{"file_name": "/home/qj213/afp-2021-10-22/thys/FeatherweightJava/FJSound.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/FeatherweightJava", "problem_names": ["lemma mtype_mbody:\n  fixes Cs :: \"nat list\"\n  assumes \"mtype(CT,m,C) = Cs \\<rightarrow> C0\"\n  shows \"\\<exists>xs e. mbody(CT,m,C) = xs . e \\<and> length xs = length Cs\"", "lemma mtype_mbody_length: \n  assumes mt:\"mtype(CT,m,C) = Cs \\<rightarrow> C0\"\n  and mb:\"mbody(CT,m,C) = xs . e\"\n  shows \"length xs = length Cs\"", "lemma A_1_1:\n  assumes \"CT \\<turnstile> C <: D\" and \"CT OK\"\n  shows \"(mtype(CT,m,D) = Cs \\<rightarrow> C0) \\<Longrightarrow> (mtype(CT,m,C) = Cs \\<rightarrow> C0)\"", "lemma sub_fields: \n  assumes \"CT \\<turnstile> C <: D\"\n  shows \"\\<And>Dg. fields(CT,D) = Dg \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg@Cf)\"", "lemma A_1_2:\n  assumes \"CT OK\"\n    and \"\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\"                            \n    and \"\\<Gamma>2 = [xs [\\<mapsto>] Bs]\"                         \n    and \"length xs = length ds\"\n    and \"length Bs = length ds\"                      \n    and \"\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs\"\n  shows \"CT;\\<Gamma> \\<turnstile>+ es:Ds \\<Longrightarrow> \\<exists>Cs. (CT;\\<Gamma>1 \\<turnstile>+ ([ds/xs]es):Cs \\<and> CT \\<turnstile>+ Cs <: Ds)\" (is \"?TYPINGS \\<Longrightarrow> ?P1\")\n    and \"CT;\\<Gamma> \\<turnstile> e:D \\<Longrightarrow> \\<exists>C. (CT;\\<Gamma>1 \\<turnstile> ((ds/xs)e):C \\<and> CT \\<turnstile> C <: D)\" (is \"?TYPING \\<Longrightarrow> ?P2\")", "lemma A_1_3:\n  shows \"(CT;\\<Gamma>2 \\<turnstile>+ es : Cs) \\<Longrightarrow> (CT;\\<Gamma>1++\\<Gamma>2 \\<turnstile>+ es : Cs)\" (is \"?P1 \\<Longrightarrow> ?P2\")\n  and \"CT;\\<Gamma>2 \\<turnstile> e : C \\<Longrightarrow> CT;\\<Gamma>1++\\<Gamma>2 \\<turnstile> e : C\" (is \"?Q1 \\<Longrightarrow> ?Q2\")", "lemma A_1_4: \n  assumes ct_ok: \"CT OK\" \n  and mb:\"mbody(CT,m,C) = xs . e\" \n  and mt:\"mtype(CT,m,C) = Ds \\<rightarrow> D\"\n  shows \"\\<exists>D0 C0. (CT \\<turnstile> C <: D0) \\<and> \n                (CT \\<turnstile> C0 <: D) \\<and> \n                (CT;[xs[\\<mapsto>]Ds](this \\<mapsto> D0) \\<turnstile> e : C0)\"", "theorem Thm_2_4_1: \n  assumes \"CT \\<turnstile> e \\<rightarrow> e'\" \n  and \"CT OK\"\n  shows \"\\<And>C. \\<lbrakk> CT;\\<Gamma> \\<turnstile> e : C \\<rbrakk> \n  \\<Longrightarrow> \\<exists>C'. (CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C)\"", "theorem Thm_2_4_2_1: \n  assumes \"CT;Map.empty \\<turnstile> e : C\"\n  and \"FieldProj (New C0 es) fi \\<in> subexprs(e)\"\n  shows \"\\<exists>Cf fDef. fields(CT, C0) = Cf \\<and> lookup Cf (\\<lambda>fd. (vdName fd = fi)) = Some fDef\"", "lemma Thm_2_4_2_2: \n  fixes es ds :: \"exp list\"\n  assumes \"CT;Map.empty \\<turnstile> e : C\" \n  and \"MethodInvk (New C0 es) m ds \\<in> subexprs(e)\"\n  shows \"\\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds\"", "lemma closed_subterm_split: \n  assumes \"CT;\\<Gamma> \\<turnstile> e : C\" and \"\\<Gamma> = Map.empty\"\n  shows \"\n  ((\\<exists>C0 es fi. (FieldProj (New C0 es) fi) \\<in> subexprs(e))  \n  \\<or> (\\<exists>C0 es m ds. (MethodInvk (New C0 es) m ds) \\<in> subexprs(e))\n  \\<or> (\\<exists>C0 D es. (Cast D (New C0 es)) \\<in> subexprs(e))\n  \\<or> val(e))\" (is \"?F e \\<or> ?M e \\<or> ?C e \\<or> ?V e\" is \"?IH e\")", "theorem Thm_2_4_3: \n  assumes e_typ: \"CT;Map.empty \\<turnstile> e : C\"\n  and ct_ok: \"CT OK\"\n  and multisteps: \"CT \\<turnstile> e \\<rightarrow>* e1\"\n  and no_step: \"\\<not>(\\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2)\"\n  shows \"(val(e1) \\<and> (\\<exists>D. CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C))\n      \\<or> (\\<exists>D C es. (Cast D (New C es) \\<in> subexprs(e1) \\<and> CT \\<turnstile> C \\<not><: D))\""], "translations": [["", "lemma mtype_mbody:\n  fixes Cs :: \"nat list\"\n  assumes \"mtype(CT,m,C) = Cs \\<rightarrow> C0\"\n  shows \"\\<exists>xs e. mbody(CT,m,C) = xs . e \\<and> length xs = length Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs e. mbody(CT,m,C) = xs . e \\<and> length xs = length Cs", "using assms"], ["proof (prove)\nusing this:\n  mtype(CT,m,C) = Cs \\<rightarrow> C0\n\ngoal (1 subgoal):\n 1. \\<exists>xs e. mbody(CT,m,C) = xs . e \\<and> length xs = length Cs", "proof(induct rule:mtype.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef Bs B.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_types (mParams mDef) = Bs; mReturn mDef = B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs e.\n                            mbody(CT,m,C) = xs . e \\<and>\n                            length xs = length Bs\n 2. \\<And>CT C CDef m D Bs B.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = D; mtype(CT,m,D) = Bs \\<rightarrow> B;\n        \\<exists>xs e.\n           mbody(CT,m,D) = xs . e \\<and> length xs = length Bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs e.\n                            mbody(CT,m,C) = xs . e \\<and>\n                            length xs = length Bs", "case(mt_class C0 Cs C CDef CT m mDef)"], ["proof (state)\nthis:\n  C0 Cs = Some C\n  lookup (cMethods C) (\\<lambda>md. mName md = CDef) = Some CT\n  varDefs_types (mParams CT) = m\n  mReturn CT = mDef\n\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef Bs B.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_types (mParams mDef) = Bs; mReturn mDef = B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs e.\n                            mbody(CT,m,C) = xs . e \\<and>\n                            length xs = length Bs\n 2. \\<And>CT C CDef m D Bs B.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = D; mtype(CT,m,D) = Bs \\<rightarrow> B;\n        \\<exists>xs e.\n           mbody(CT,m,D) = xs . e \\<and> length xs = length Bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs e.\n                            mbody(CT,m,C) = xs . e \\<and>\n                            length xs = length Bs", "thus ?case"], ["proof (prove)\nusing this:\n  C0 Cs = Some C\n  lookup (cMethods C) (\\<lambda>md. mName md = CDef) = Some CT\n  varDefs_types (mParams CT) = m\n  mReturn CT = mDef\n\ngoal (1 subgoal):\n 1. \\<exists>xs e. mbody(C0,CDef,Cs) = xs . e \\<and> length xs = length m", "by (force simp add:varDefs_types_def varDefs_names_def elim:mtype.cases intro:mbody.mb_class)"], ["proof (state)\nthis:\n  \\<exists>xs e. mbody(C0,CDef,Cs) = xs . e \\<and> length xs = length m\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m D Bs B.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = D; mtype(CT,m,D) = Bs \\<rightarrow> B;\n        \\<exists>xs e.\n           mbody(CT,m,D) = xs . e \\<and> length xs = length Bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs e.\n                            mbody(CT,m,C) = xs . e \\<and>\n                            length xs = length Bs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m D Bs B.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = D; mtype(CT,m,D) = Bs \\<rightarrow> B;\n        \\<exists>xs e.\n           mbody(CT,m,D) = xs . e \\<and> length xs = length Bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs e.\n                            mbody(CT,m,C) = xs . e \\<and>\n                            length xs = length Bs", "case(mt_super CT C0 CDef m D Cs C)"], ["proof (state)\nthis:\n  CT C0 = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C\n  \\<exists>xs e. mbody(CT,m,D) = xs . e \\<and> length xs = length Cs\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m D Bs B.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = D; mtype(CT,m,D) = Bs \\<rightarrow> B;\n        \\<exists>xs e.\n           mbody(CT,m,D) = xs . e \\<and> length xs = length Bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs e.\n                            mbody(CT,m,C) = xs . e \\<and>\n                            length xs = length Bs", "then"], ["proof (chain)\npicking this:\n  CT C0 = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C\n  \\<exists>xs e. mbody(CT,m,D) = xs . e \\<and> length xs = length Cs", "obtain xs e where \"mbody(CT,m,D) = xs . e\" and \"length xs = length Cs\""], ["proof (prove)\nusing this:\n  CT C0 = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C\n  \\<exists>xs e. mbody(CT,m,D) = xs . e \\<and> length xs = length Cs\n\ngoal (1 subgoal):\n 1. (\\<And>xs e.\n        \\<lbrakk>mbody(CT,m,D) = xs . e; length xs = length Cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mbody(CT,m,D) = xs . e\n  length xs = length Cs\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m D Bs B.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = D; mtype(CT,m,D) = Bs \\<rightarrow> B;\n        \\<exists>xs e.\n           mbody(CT,m,D) = xs . e \\<and> length xs = length Bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs e.\n                            mbody(CT,m,C) = xs . e \\<and>\n                            length xs = length Bs", "thus ?case"], ["proof (prove)\nusing this:\n  mbody(CT,m,D) = xs . e\n  length xs = length Cs\n\ngoal (1 subgoal):\n 1. \\<exists>xs e. mbody(CT,m,C0) = xs . e \\<and> length xs = length Cs", "using mt_super"], ["proof (prove)\nusing this:\n  mbody(CT,m,D) = xs . e\n  length xs = length Cs\n  CT C0 = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C\n  \\<exists>xs e. mbody(CT,m,D) = xs . e \\<and> length xs = length Cs\n\ngoal (1 subgoal):\n 1. \\<exists>xs e. mbody(CT,m,C0) = xs . e \\<and> length xs = length Cs", "by (auto intro:mbody.mb_super)"], ["proof (state)\nthis:\n  \\<exists>xs e. mbody(CT,m,C0) = xs . e \\<and> length xs = length Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mtype_mbody_length: \n  assumes mt:\"mtype(CT,m,C) = Cs \\<rightarrow> C0\"\n  and mb:\"mbody(CT,m,C) = xs . e\"\n  shows \"length xs = length Cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length Cs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs = length Cs", "from mtype_mbody[OF mt]"], ["proof (chain)\npicking this:\n  \\<exists>xs e. mbody(CT,m,C) = xs . e \\<and> length xs = length Cs", "obtain xs' e' \n    where mb2: \"mbody(CT,m,C) = xs' . e'\" \n    and  \"length xs' = length Cs\""], ["proof (prove)\nusing this:\n  \\<exists>xs e. mbody(CT,m,C) = xs . e \\<and> length xs = length Cs\n\ngoal (1 subgoal):\n 1. (\\<And>xs' e'.\n        \\<lbrakk>mbody(CT,m,C) = xs' . e'; length xs' = length Cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mbody(CT,m,C) = xs' . e'\n  length xs' = length Cs\n\ngoal (1 subgoal):\n 1. length xs = length Cs", "with mbody_functional[OF mb mb2]"], ["proof (chain)\npicking this:\n  xs = xs' \\<and> e = e'\n  mbody(CT,m,C) = xs' . e'\n  length xs' = length Cs", "show ?thesis"], ["proof (prove)\nusing this:\n  xs = xs' \\<and> e = e'\n  mbody(CT,m,C) = xs' . e'\n  length xs' = length Cs\n\ngoal (1 subgoal):\n 1. length xs = length Cs", "by auto"], ["proof (state)\nthis:\n  length xs = length Cs\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Method Types and Field Declarations of Subtypes\\<close>"], ["", "lemma A_1_1:\n  assumes \"CT \\<turnstile> C <: D\" and \"CT OK\"\n  shows \"(mtype(CT,m,D) = Cs \\<rightarrow> C0) \\<Longrightarrow> (mtype(CT,m,C) = Cs \\<rightarrow> C0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mtype(CT,m,D) = Cs \\<rightarrow> C0 \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "using assms"], ["proof (prove)\nusing this:\n  CT \\<turnstile> C <: D\n  CT OK\n\ngoal (1 subgoal):\n 1. mtype(CT,m,D) = Cs \\<rightarrow> C0 \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "proof (induct rule:subtyping.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>CT C.\n       \\<lbrakk>mtype(CT,m,C) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<And>CT C D E.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<lbrakk>mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0;\n        CT \\<turnstile> D <: E;\n        \\<lbrakk>mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,D) = Cs \\<rightarrow> C0;\n        mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0\n 3. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "case (s_refl C CT)"], ["proof (state)\nthis:\n  mtype(C,m,CT) = Cs \\<rightarrow> C0\n  C OK\n\ngoal (3 subgoals):\n 1. \\<And>CT C.\n       \\<lbrakk>mtype(CT,m,C) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<And>CT C D E.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<lbrakk>mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0;\n        CT \\<turnstile> D <: E;\n        \\<lbrakk>mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,D) = Cs \\<rightarrow> C0;\n        mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0\n 3. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mtype(C,m,CT) = Cs \\<rightarrow> C0", "by fact"], ["proof (state)\nthis:\n  mtype(C,m,CT) = Cs \\<rightarrow> C0\n\ngoal (2 subgoals):\n 1. \\<And>CT C D E.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<lbrakk>mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0;\n        CT \\<turnstile> D <: E;\n        \\<lbrakk>mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,D) = Cs \\<rightarrow> C0;\n        mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>CT C D E.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<lbrakk>mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0;\n        CT \\<turnstile> D <: E;\n        \\<lbrakk>mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,D) = Cs \\<rightarrow> C0;\n        mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "case (s_trans C CT D E)"], ["proof (state)\nthis:\n  C \\<turnstile> CT <: D\n  \\<lbrakk>mtype(C,m,D) = Cs \\<rightarrow> C0; C OK\\<rbrakk>\n  \\<Longrightarrow> mtype(C,m,CT) = Cs \\<rightarrow> C0\n  C \\<turnstile> D <: E\n  \\<lbrakk>mtype(C,m,E) = Cs \\<rightarrow> C0; C OK\\<rbrakk>\n  \\<Longrightarrow> mtype(C,m,D) = Cs \\<rightarrow> C0\n  mtype(C,m,E) = Cs \\<rightarrow> C0\n  C OK\n\ngoal (2 subgoals):\n 1. \\<And>CT C D E.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<lbrakk>mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0;\n        CT \\<turnstile> D <: E;\n        \\<lbrakk>mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n        \\<Longrightarrow> mtype(CT,m,D) = Cs \\<rightarrow> C0;\n        mtype(CT,m,E) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "thus ?case"], ["proof (prove)\nusing this:\n  C \\<turnstile> CT <: D\n  \\<lbrakk>mtype(C,m,D) = Cs \\<rightarrow> C0; C OK\\<rbrakk>\n  \\<Longrightarrow> mtype(C,m,CT) = Cs \\<rightarrow> C0\n  C \\<turnstile> D <: E\n  \\<lbrakk>mtype(C,m,E) = Cs \\<rightarrow> C0; C OK\\<rbrakk>\n  \\<Longrightarrow> mtype(C,m,D) = Cs \\<rightarrow> C0\n  mtype(C,m,E) = Cs \\<rightarrow> C0\n  C OK\n\ngoal (1 subgoal):\n 1. mtype(C,m,CT) = Cs \\<rightarrow> C0", "by auto"], ["proof (state)\nthis:\n  mtype(C,m,CT) = Cs \\<rightarrow> C0\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "case (s_super CT C CDef D)"], ["proof (state)\nthis:\n  CT C = Some CDef\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C0\n  CT OK\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "hence \"CT \\<turnstile> CDef OK\" and \"cName CDef = C\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C0\n  CT OK\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> CDef OK &&& cName CDef = C", "by(auto elim:ct_typing.cases)"], ["proof (state)\nthis:\n  CT \\<turnstile> CDef OK\n  cName CDef = C\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "with s_super"], ["proof (chain)\npicking this:\n  CT C = Some CDef\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C0\n  CT OK\n  CT \\<turnstile> CDef OK\n  cName CDef = C", "obtain M \n    where M: \"CT \\<turnstile>+ M OK IN C\" and cMethods: \"cMethods CDef = M\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C0\n  CT OK\n  CT \\<turnstile> CDef OK\n  cName CDef = C\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>CT \\<turnstile>+ M OK IN C; cMethods CDef = M\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:class_typing.cases)"], ["proof (state)\nthis:\n  CT \\<turnstile>+ M OK IN C\n  cMethods CDef = M\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "let ?lookup_m = \"lookup M (\\<lambda>md. (mName md =m))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        mtype(CT,m,D) = Cs \\<rightarrow> C0; CT OK\\<rbrakk>\n       \\<Longrightarrow> mtype(CT,m,C) = Cs \\<rightarrow> C0", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mtype(CT,m,C) = Cs \\<rightarrow> C0", "proof(cases \"\\<exists>mDef. ?lookup_m = Some mDef\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "case True"], ["proof (state)\nthis:\n  \\<exists>mDef. lookup M (\\<lambda>md. mName md = m) = Some mDef\n\ngoal (2 subgoals):\n 1. \\<exists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "then"], ["proof (chain)\npicking this:\n  \\<exists>mDef. lookup M (\\<lambda>md. mName md = m) = Some mDef", "obtain mDef where m: \"?lookup_m = Some mDef\""], ["proof (prove)\nusing this:\n  \\<exists>mDef. lookup M (\\<lambda>md. mName md = m) = Some mDef\n\ngoal (1 subgoal):\n 1. (\\<And>mDef.\n        lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(rule exE)"], ["proof (state)\nthis:\n  lookup M (\\<lambda>md. mName md = m) = Some mDef\n\ngoal (2 subgoals):\n 1. \\<exists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "hence mDef_name: \"mName mDef = m\""], ["proof (prove)\nusing this:\n  lookup M (\\<lambda>md. mName md = m) = Some mDef\n\ngoal (1 subgoal):\n 1. mName mDef = m", "by (rule lookup_true)"], ["proof (state)\nthis:\n  mName mDef = m\n\ngoal (2 subgoals):\n 1. \\<exists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "have \"CT \\<turnstile> mDef OK IN C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> mDef OK IN C", "using M m"], ["proof (prove)\nusing this:\n  CT \\<turnstile>+ M OK IN C\n  lookup M (\\<lambda>md. mName md = m) = Some mDef\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> mDef OK IN C", "by(auto simp add:method_typings_lookup)"], ["proof (state)\nthis:\n  CT \\<turnstile> mDef OK IN C\n\ngoal (2 subgoals):\n 1. \\<exists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "then"], ["proof (chain)\npicking this:\n  CT \\<turnstile> mDef OK IN C", "obtain CDef' m' D' Cs' C0'\n      where CT: \"CT C = Some CDef'\"\n        and \"cSuper CDef' = D'\"\n        and \"mName mDef = m'\"\n        and mReturn: \"mReturn mDef = C0'\"\n        and varDefs_types: \"varDefs_types (mParams mDef) = Cs'\"\n        and \"\\<forall>Ds D0. (mtype(CT,m',D') = Ds \\<rightarrow> D0) \\<longrightarrow> Cs'=Ds \\<and> C0'=D0\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> mDef OK IN C\n\ngoal (1 subgoal):\n 1. (\\<And>CDef' D' m' C0' Cs'.\n        \\<lbrakk>CT C = Some CDef'; cSuper CDef' = D'; mName mDef = m';\n         mReturn mDef = C0'; varDefs_types (mParams mDef) = Cs';\n         \\<forall>Ds D0.\n            mtype(CT,m',D') = Ds \\<rightarrow> D0 \\<longrightarrow>\n            Cs' = Ds \\<and> C0' = D0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: method_typing.cases)"], ["proof (state)\nthis:\n  CT C = Some CDef'\n  cSuper CDef' = D'\n  mName mDef = m'\n  mReturn mDef = C0'\n  varDefs_types (mParams mDef) = Cs'\n  \\<forall>Ds D0.\n     mtype(CT,m',D') = Ds \\<rightarrow> D0 \\<longrightarrow>\n     Cs' = Ds \\<and> C0' = D0\n\ngoal (2 subgoals):\n 1. \\<exists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "with s_super mDef_name"], ["proof (chain)\npicking this:\n  CT C = Some CDef\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C0\n  CT OK\n  mName mDef = m\n  CT C = Some CDef'\n  cSuper CDef' = D'\n  mName mDef = m'\n  mReturn mDef = C0'\n  varDefs_types (mParams mDef) = Cs'\n  \\<forall>Ds D0.\n     mtype(CT,m',D') = Ds \\<rightarrow> D0 \\<longrightarrow>\n     Cs' = Ds \\<and> C0' = D0", "have \"CDef=CDef'\" \n      and \"D=D'\" \n      and \"m=m'\" \n      and \"\\<forall>Ds D0. (mtype(CT,m,D) = Ds \\<rightarrow> D0) \\<longrightarrow> Cs'=Ds \\<and> C0' = D0\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C0\n  CT OK\n  mName mDef = m\n  CT C = Some CDef'\n  cSuper CDef' = D'\n  mName mDef = m'\n  mReturn mDef = C0'\n  varDefs_types (mParams mDef) = Cs'\n  \\<forall>Ds D0.\n     mtype(CT,m',D') = Ds \\<rightarrow> D0 \\<longrightarrow>\n     Cs' = Ds \\<and> C0' = D0\n\ngoal (1 subgoal):\n 1. (CDef = CDef' &&& D = D') &&&\n    m = m' &&&\n    \\<forall>Ds D0.\n       mtype(CT,m,D) = Ds \\<rightarrow> D0 \\<longrightarrow>\n       Cs' = Ds \\<and> C0' = D0", "by auto"], ["proof (state)\nthis:\n  CDef = CDef'\n  D = D'\n  m = m'\n  \\<forall>Ds D0.\n     mtype(CT,m,D) = Ds \\<rightarrow> D0 \\<longrightarrow>\n     Cs' = Ds \\<and> C0' = D0\n\ngoal (2 subgoals):\n 1. \\<exists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0\n 2. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "thus ?thesis"], ["proof (prove)\nusing this:\n  CDef = CDef'\n  D = D'\n  m = m'\n  \\<forall>Ds D0.\n     mtype(CT,m,D) = Ds \\<rightarrow> D0 \\<longrightarrow>\n     Cs' = Ds \\<and> C0' = D0\n\ngoal (1 subgoal):\n 1. mtype(CT,m,C) = Cs \\<rightarrow> C0", "using s_super cMethods m CT mReturn varDefs_types"], ["proof (prove)\nusing this:\n  CDef = CDef'\n  D = D'\n  m = m'\n  \\<forall>Ds D0.\n     mtype(CT,m,D) = Ds \\<rightarrow> D0 \\<longrightarrow>\n     Cs' = Ds \\<and> C0' = D0\n  CT C = Some CDef\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C0\n  CT OK\n  cMethods CDef = M\n  lookup M (\\<lambda>md. mName md = m) = Some mDef\n  CT C = Some CDef'\n  mReturn mDef = C0'\n  varDefs_types (mParams mDef) = Cs'\n\ngoal (1 subgoal):\n 1. mtype(CT,m,C) = Cs \\<rightarrow> C0", "by (auto intro:mtype.intros)"], ["proof (state)\nthis:\n  mtype(CT,m,C) = Cs \\<rightarrow> C0\n\ngoal (1 subgoal):\n 1. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "case False"], ["proof (state)\nthis:\n  \\<nexists>mDef. lookup M (\\<lambda>md. mName md = m) = Some mDef\n\ngoal (1 subgoal):\n 1. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "hence \"?lookup_m = None\""], ["proof (prove)\nusing this:\n  \\<nexists>mDef. lookup M (\\<lambda>md. mName md = m) = Some mDef\n\ngoal (1 subgoal):\n 1. lookup M (\\<lambda>md. mName md = m) = None", "by (simp add: lookup_split)"], ["proof (state)\nthis:\n  lookup M (\\<lambda>md. mName md = m) = None\n\ngoal (1 subgoal):\n 1. \\<nexists>mDef.\n       lookup M (\\<lambda>md. mName md = m) = Some mDef \\<Longrightarrow>\n    mtype(CT,m,C) = Cs \\<rightarrow> C0", "then"], ["proof (chain)\npicking this:\n  lookup M (\\<lambda>md. mName md = m) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  lookup M (\\<lambda>md. mName md = m) = None\n\ngoal (1 subgoal):\n 1. mtype(CT,m,C) = Cs \\<rightarrow> C0", "using s_super cMethods"], ["proof (prove)\nusing this:\n  lookup M (\\<lambda>md. mName md = m) = None\n  CT C = Some CDef\n  cSuper CDef = D\n  mtype(CT,m,D) = Cs \\<rightarrow> C0\n  CT OK\n  cMethods CDef = M\n\ngoal (1 subgoal):\n 1. mtype(CT,m,C) = Cs \\<rightarrow> C0", "by (auto simp add:mtype.intros)"], ["proof (state)\nthis:\n  mtype(CT,m,C) = Cs \\<rightarrow> C0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mtype(CT,m,C) = Cs \\<rightarrow> C0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub_fields: \n  assumes \"CT \\<turnstile> C <: D\"\n  shows \"\\<And>Dg. fields(CT,D) = Dg \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg@Cf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Dg.\n       fields(CT,D) = Dg \\<Longrightarrow>\n       \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "using assms"], ["proof (prove)\nusing this:\n  CT \\<turnstile> C <: D\n\ngoal (1 subgoal):\n 1. \\<And>Dg.\n       fields(CT,D) = Dg \\<Longrightarrow>\n       \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "proof induct"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>CT C Dg.\n       fields(CT,C) = Dg \\<Longrightarrow>\n       \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 2. \\<And>CT C D E Dg.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<And>Dg.\n           fields(CT,D) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,C) = (Dg @ Cf);\n        CT \\<turnstile> D <: E;\n        \\<And>Dg.\n           fields(CT,E) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,D) = (Dg @ Cf);\n        fields(CT,E) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 3. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "case (s_refl CT C)"], ["proof (state)\nthis:\n  fields(CT,C) = Dg\n\ngoal (3 subgoals):\n 1. \\<And>CT C Dg.\n       fields(CT,C) = Dg \\<Longrightarrow>\n       \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 2. \\<And>CT C D E Dg.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<And>Dg.\n           fields(CT,D) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,C) = (Dg @ Cf);\n        CT \\<turnstile> D <: E;\n        \\<And>Dg.\n           fields(CT,E) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,D) = (Dg @ Cf);\n        fields(CT,E) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 3. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "hence \"fields(CT,C) = (Dg@[])\""], ["proof (prove)\nusing this:\n  fields(CT,C) = Dg\n\ngoal (1 subgoal):\n 1. fields(CT,C) = (Dg @ [])", "by simp"], ["proof (state)\nthis:\n  fields(CT,C) = (Dg @ [])\n\ngoal (3 subgoals):\n 1. \\<And>CT C Dg.\n       fields(CT,C) = Dg \\<Longrightarrow>\n       \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 2. \\<And>CT C D E Dg.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<And>Dg.\n           fields(CT,D) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,C) = (Dg @ Cf);\n        CT \\<turnstile> D <: E;\n        \\<And>Dg.\n           fields(CT,E) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,D) = (Dg @ Cf);\n        fields(CT,E) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 3. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "thus ?case"], ["proof (prove)\nusing this:\n  fields(CT,C) = (Dg @ [])\n\ngoal (1 subgoal):\n 1. \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", ".."], ["proof (state)\nthis:\n  \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n\ngoal (2 subgoals):\n 1. \\<And>CT C D E Dg.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<And>Dg.\n           fields(CT,D) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,C) = (Dg @ Cf);\n        CT \\<turnstile> D <: E;\n        \\<And>Dg.\n           fields(CT,E) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,D) = (Dg @ Cf);\n        fields(CT,E) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 2. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>CT C D E Dg.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<And>Dg.\n           fields(CT,D) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,C) = (Dg @ Cf);\n        CT \\<turnstile> D <: E;\n        \\<And>Dg.\n           fields(CT,E) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,D) = (Dg @ Cf);\n        fields(CT,E) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 2. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "case (s_trans CT C D E)"], ["proof (state)\nthis:\n  CT \\<turnstile> C <: D\n  fields(CT,D) = ?Dg \\<Longrightarrow>\n  \\<exists>Cf. fields(CT,C) = (?Dg @ Cf)\n  CT \\<turnstile> D <: E\n  fields(CT,E) = ?Dg \\<Longrightarrow>\n  \\<exists>Cf. fields(CT,D) = (?Dg @ Cf)\n  fields(CT,E) = Dg\n\ngoal (2 subgoals):\n 1. \\<And>CT C D E Dg.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<And>Dg.\n           fields(CT,D) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,C) = (Dg @ Cf);\n        CT \\<turnstile> D <: E;\n        \\<And>Dg.\n           fields(CT,E) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,D) = (Dg @ Cf);\n        fields(CT,E) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 2. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "then"], ["proof (chain)\npicking this:\n  CT \\<turnstile> C <: D\n  fields(CT,D) = ?Dg \\<Longrightarrow>\n  \\<exists>Cf. fields(CT,C) = (?Dg @ Cf)\n  CT \\<turnstile> D <: E\n  fields(CT,E) = ?Dg \\<Longrightarrow>\n  \\<exists>Cf. fields(CT,D) = (?Dg @ Cf)\n  fields(CT,E) = Dg", "obtain Df Cf where \"fields(CT,C) = ((Dg@Df)@Cf)\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> C <: D\n  fields(CT,D) = ?Dg \\<Longrightarrow>\n  \\<exists>Cf. fields(CT,C) = (?Dg @ Cf)\n  CT \\<turnstile> D <: E\n  fields(CT,E) = ?Dg \\<Longrightarrow>\n  \\<exists>Cf. fields(CT,D) = (?Dg @ Cf)\n  fields(CT,E) = Dg\n\ngoal (1 subgoal):\n 1. (\\<And>Df Cf.\n        fields(CT,C) = ((Dg @ Df) @ Cf) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  fields(CT,C) = ((Dg @ Df) @ Cf)\n\ngoal (2 subgoals):\n 1. \\<And>CT C D E Dg.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        \\<And>Dg.\n           fields(CT,D) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,C) = (Dg @ Cf);\n        CT \\<turnstile> D <: E;\n        \\<And>Dg.\n           fields(CT,E) = Dg \\<Longrightarrow>\n           \\<exists>Cf. fields(CT,D) = (Dg @ Cf);\n        fields(CT,E) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n 2. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "thus ?case"], ["proof (prove)\nusing this:\n  fields(CT,C) = ((Dg @ Df) @ Cf)\n\ngoal (1 subgoal):\n 1. \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "by auto"], ["proof (state)\nthis:\n  \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "case (s_super CT C CDef D Dg)"], ["proof (state)\nthis:\n  CT C = Some CDef\n  cSuper CDef = D\n  fields(CT,D) = Dg\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "then"], ["proof (chain)\npicking this:\n  CT C = Some CDef\n  cSuper CDef = D\n  fields(CT,D) = Dg", "obtain Cf where \"cFields CDef = Cf\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  cSuper CDef = D\n  fields(CT,D) = Dg\n\ngoal (1 subgoal):\n 1. (\\<And>Cf. cFields CDef = Cf \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  cFields CDef = Cf\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "with s_super"], ["proof (chain)\npicking this:\n  CT C = Some CDef\n  cSuper CDef = D\n  fields(CT,D) = Dg\n  cFields CDef = Cf", "have \"fields(CT,C) = (Dg@Cf)\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  cSuper CDef = D\n  fields(CT,D) = Dg\n  cFields CDef = Cf\n\ngoal (1 subgoal):\n 1. fields(CT,C) = (Dg @ Cf)", "by(simp add:f_class)"], ["proof (state)\nthis:\n  fields(CT,C) = (Dg @ Cf)\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef D Dg.\n       \\<lbrakk>CT C = Some CDef; cSuper CDef = D;\n        fields(CT,D) = Dg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", "thus ?case"], ["proof (prove)\nusing this:\n  fields(CT,C) = (Dg @ Cf)\n\ngoal (1 subgoal):\n 1. \\<exists>Cf. fields(CT,C) = (Dg @ Cf)", ".."], ["proof (state)\nthis:\n  \\<exists>Cf. fields(CT,C) = (Dg @ Cf)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Substitution Lemma\\<close>"], ["", "lemma A_1_2:\n  assumes \"CT OK\"\n    and \"\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\"                            \n    and \"\\<Gamma>2 = [xs [\\<mapsto>] Bs]\"                         \n    and \"length xs = length ds\"\n    and \"length Bs = length ds\"                      \n    and \"\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs\"\n  shows \"CT;\\<Gamma> \\<turnstile>+ es:Ds \\<Longrightarrow> \\<exists>Cs. (CT;\\<Gamma>1 \\<turnstile>+ ([ds/xs]es):Cs \\<and> CT \\<turnstile>+ Cs <: Ds)\" (is \"?TYPINGS \\<Longrightarrow> ?P1\")\n    and \"CT;\\<Gamma> \\<turnstile> e:D \\<Longrightarrow> \\<exists>C. (CT;\\<Gamma>1 \\<turnstile> ((ds/xs)e):C \\<and> CT \\<turnstile> C <: D)\" (is \"?TYPING \\<Longrightarrow> ?P2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (CT;\\<Gamma> \\<turnstile>+ es : Ds \\<Longrightarrow>\n     \\<exists>Cs.\n        CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n        CT \\<turnstile>+ Cs <: Ds) &&&\n    (CT;\\<Gamma> \\<turnstile> e : D \\<Longrightarrow>\n     \\<exists>C.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and>\n        CT \\<turnstile> C <: D)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. CT;\\<Gamma> \\<turnstile>+ es : Ds \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n       CT \\<turnstile>+ Cs <: Ds\n 2. CT;\\<Gamma> \\<turnstile> e : D \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and> CT \\<turnstile> C <: D", "let ?COMMON_ASMS = \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and> (\\<Gamma>2 = [xs [\\<mapsto>] Bs]) \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\ngoal (2 subgoals):\n 1. CT;\\<Gamma> \\<turnstile>+ es : Ds \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n       CT \\<turnstile>+ Cs <: Ds\n 2. CT;\\<Gamma> \\<turnstile> e : D \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and> CT \\<turnstile> C <: D", "have RESULT:\"  (?TYPINGS \\<longrightarrow> ?COMMON_ASMS \\<longrightarrow> ?P1)\n               \\<and> (?TYPING \\<longrightarrow> ?COMMON_ASMS \\<longrightarrow> ?P2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CT;\\<Gamma> \\<turnstile>+ es : Ds \\<longrightarrow>\n     CT OK \\<and>\n     \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n     \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n     length Bs = length ds \\<and>\n     (\\<exists>As.\n         CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n         CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n     (\\<exists>Cs.\n         CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n         CT \\<turnstile>+ Cs <: Ds)) \\<and>\n    (CT;\\<Gamma> \\<turnstile> e : D \\<longrightarrow>\n     CT OK \\<and>\n     \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n     \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n     length Bs = length ds \\<and>\n     (\\<exists>As.\n         CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n         CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n     (\\<exists>C.\n         CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and>\n         CT \\<turnstile> C <: D))", "proof(induct rule:typings_typing.induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>CT \\<Gamma>.\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Cs.\n           CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : Cs \\<and>\n           CT \\<turnstile>+ Cs <: [])\n 2. \\<And>CT \\<Gamma> e0 C0 es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs)\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Csa.\n                             CT;\\<Gamma>1 \\<turnstile>+ map\n                   (substs_syn ds xs) (e0 # es) : Csa \\<and>\n                             CT \\<turnstile>+ Csa <: (C0 # Cs))\n 3. \\<And>\\<Gamma> x C CT.\n       \\<Gamma> x = Some C \\<Longrightarrow>\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Ca.\n           CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : Ca \\<and>\n           CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 5. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 7. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 8. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 9. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case (ts_nil CT \\<Gamma>)"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>CT \\<Gamma>.\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Cs.\n           CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : Cs \\<and>\n           CT \\<turnstile>+ Cs <: [])\n 2. \\<And>CT \\<Gamma> e0 C0 es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs)\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Csa.\n                             CT;\\<Gamma>1 \\<turnstile>+ map\n                   (substs_syn ds xs) (e0 # es) : Csa \\<and>\n                             CT \\<turnstile>+ Csa <: (C0 # Cs))\n 3. \\<And>\\<Gamma> x C CT.\n       \\<Gamma> x = Some C \\<Longrightarrow>\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Ca.\n           CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : Ca \\<and>\n           CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 5. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 7. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 8. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 9. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>Cs.\n        CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : Cs \\<and>\n        CT \\<turnstile>+ Cs <: [])", "proof (rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : Cs \\<and>\n       CT \\<turnstile>+ Cs <: []", "have \"(CT;\\<Gamma>1 \\<turnstile>+ ([ds/xs][]):[]) \\<and> (CT \\<turnstile>+ [] <: [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : [] \\<and>\n    CT \\<turnstile>+ [] <: []", "by (auto simp add: typings_typing.intros subtypings.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : [] \\<and>\n  CT \\<turnstile>+ [] <: []\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : Cs \\<and>\n       CT \\<turnstile>+ Cs <: []", "then"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : [] \\<and>\n  CT \\<turnstile>+ [] <: []", "show \"\\<exists>Cs.(CT;\\<Gamma>1 \\<turnstile>+ ([ds/xs][]):Cs) \\<and> (CT \\<turnstile>+ Cs <: [])\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : [] \\<and>\n  CT \\<turnstile>+ [] <: []\n\ngoal (1 subgoal):\n 1. \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : Cs \\<and>\n       CT \\<turnstile>+ Cs <: []", "by auto"], ["proof (state)\nthis:\n  \\<exists>Cs.\n     CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : Cs \\<and>\n     CT \\<turnstile>+ Cs <: []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Cs.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) [] : Cs \\<and>\n      CT \\<turnstile>+ Cs <: [])\n\ngoal (8 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs)\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Csa.\n                             CT;\\<Gamma>1 \\<turnstile>+ map\n                   (substs_syn ds xs) (e0 # es) : Csa \\<and>\n                             CT \\<turnstile>+ Csa <: (C0 # Cs))\n 2. \\<And>\\<Gamma> x C CT.\n       \\<Gamma> x = Some C \\<Longrightarrow>\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Ca.\n           CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : Ca \\<and>\n           CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 4. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 7. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 8. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs)\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Csa.\n                             CT;\\<Gamma>1 \\<turnstile>+ map\n                   (substs_syn ds xs) (e0 # es) : Csa \\<and>\n                             CT \\<turnstile>+ Csa <: (C0 # Cs))\n 2. \\<And>\\<Gamma> x C CT.\n       \\<Gamma> x = Some C \\<Longrightarrow>\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Ca.\n           CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : Ca \\<and>\n           CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 4. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 7. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 8. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case(ts_cons CT \\<Gamma> e0 C0 es Cs')"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  CT;\\<Gamma> \\<turnstile>+ es : Cs'\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Cs.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n      CT \\<turnstile>+ Cs <: Cs')\n\ngoal (8 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs)\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Csa.\n                             CT;\\<Gamma>1 \\<turnstile>+ map\n                   (substs_syn ds xs) (e0 # es) : Csa \\<and>\n                             CT \\<turnstile>+ Csa <: (C0 # Cs))\n 2. \\<And>\\<Gamma> x C CT.\n       \\<Gamma> x = Some C \\<Longrightarrow>\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Ca.\n           CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : Ca \\<and>\n           CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 4. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 7. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 8. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>Cs.\n        CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                    (e0 # es) : Cs \\<and>\n        CT \\<turnstile>+ Cs <: (C0 # Cs'))", "proof (rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                   (e0 # es) : Cs \\<and>\n       CT \\<turnstile>+ Cs <: (C0 # Cs')", "assume asms: \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and> (\\<Gamma>2 = [xs [\\<mapsto>] Bs]) \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                   (e0 # es) : Cs \\<and>\n       CT \\<turnstile>+ Cs <: (C0 # Cs')", "with ts_cons"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  CT;\\<Gamma> \\<turnstile>+ es : Cs'\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Cs.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n      CT \\<turnstile>+ Cs <: Cs')\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "have e0_typ: \"CT;\\<Gamma> \\<turnstile> e0 : C0\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  CT;\\<Gamma> \\<turnstile>+ es : Cs'\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Cs.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n      CT \\<turnstile>+ Cs <: Cs')\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> e0 : C0", "by fastforce"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                   (e0 # es) : Cs \\<and>\n       CT \\<turnstile>+ Cs <: (C0 # Cs')", "with ts_cons asms"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  CT;\\<Gamma> \\<turnstile>+ es : Cs'\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Cs.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n      CT \\<turnstile>+ Cs <: Cs')\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n  CT;\\<Gamma> \\<turnstile> e0 : C0", "have \n          \"\\<exists>C.(CT;\\<Gamma>1 \\<turnstile> (ds/xs) e0 : C) \\<and> (CT \\<turnstile> C <: C0)\" \n        and \"\\<exists>Cs.(CT;\\<Gamma>1 \\<turnstile>+ [ds/xs]es : Cs) \\<and> (CT \\<turnstile>+ Cs <: Cs')\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  CT;\\<Gamma> \\<turnstile>+ es : Cs'\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Cs.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n      CT \\<turnstile>+ Cs <: Cs')\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n       CT \\<turnstile> C <: C0 &&&\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n       CT \\<turnstile>+ Cs <: Cs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: C0\n  \\<exists>Cs.\n     CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n     CT \\<turnstile>+ Cs <: Cs'\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                   (e0 # es) : Cs \\<and>\n       CT \\<turnstile>+ Cs <: (C0 # Cs')", "then"], ["proof (chain)\npicking this:\n  \\<exists>C.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: C0\n  \\<exists>Cs.\n     CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n     CT \\<turnstile>+ Cs <: Cs'", "obtain C Cs where\n          \"(CT;\\<Gamma>1 \\<turnstile> (ds/xs) e0 : C) \\<and> (CT \\<turnstile> C <: C0)\" \n        and \"(CT;\\<Gamma>1 \\<turnstile>+ [ds/xs]es : Cs) \\<and> (CT \\<turnstile>+ Cs <: Cs')\""], ["proof (prove)\nusing this:\n  \\<exists>C.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: C0\n  \\<exists>Cs.\n     CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n     CT \\<turnstile>+ Cs <: Cs'\n\ngoal (1 subgoal):\n 1. (\\<And>C Cs.\n        \\<lbrakk>CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n                 CT \\<turnstile> C <: C0;\n         CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n         CT \\<turnstile>+ Cs <: Cs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: C0\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n  CT \\<turnstile>+ Cs <: Cs'\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                   (e0 # es) : Cs \\<and>\n       CT \\<turnstile>+ Cs <: (C0 # Cs')", "hence \"CT;\\<Gamma>1 \\<turnstile>+ [ds/xs](e0#es) : (C#Cs)\"\n        and \"CT \\<turnstile>+ (C#Cs) <: (C0#Cs')\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: C0\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n  CT \\<turnstile>+ Cs <: Cs'\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                (e0 # es) : (C # Cs) &&&\n    CT \\<turnstile>+ (C # Cs) <: (C0 # Cs')", "by (auto simp add: typings_typing.intros subtypings.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) (e0 # es) : (C # Cs)\n  CT \\<turnstile>+ (C # Cs) <: (C0 # Cs')\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                   (e0 # es) : Cs \\<and>\n       CT \\<turnstile>+ Cs <: (C0 # Cs')", "then"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) (e0 # es) : (C # Cs)\n  CT \\<turnstile>+ (C # Cs) <: (C0 # Cs')", "show \"\\<exists>Cs. CT;\\<Gamma>1 \\<turnstile>+ map (substs [xs [\\<mapsto>] ds]) (e0 # es) : Cs \\<and> CT \\<turnstile>+ Cs <: (C0 # Cs')\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) (e0 # es) : (C # Cs)\n  CT \\<turnstile>+ (C # Cs) <: (C0 # Cs')\n\ngoal (1 subgoal):\n 1. \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                   (e0 # es) : Cs \\<and>\n       CT \\<turnstile>+ Cs <: (C0 # Cs')", "by auto"], ["proof (state)\nthis:\n  \\<exists>Cs.\n     CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) (e0 # es) : Cs \\<and>\n     CT \\<turnstile>+ Cs <: (C0 # Cs')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Cs.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n                                  (e0 # es) : Cs \\<and>\n      CT \\<turnstile>+ Cs <: (C0 # Cs'))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x C CT.\n       \\<Gamma> x = Some C \\<Longrightarrow>\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Ca.\n           CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : Ca \\<and>\n           CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 3. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 7. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x C CT.\n       \\<Gamma> x = Some C \\<Longrightarrow>\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Ca.\n           CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : Ca \\<and>\n           CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 3. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 7. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case (t_var \\<Gamma> x C' CT)"], ["proof (state)\nthis:\n  \\<Gamma> x = Some C'\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x C CT.\n       \\<Gamma> x = Some C \\<Longrightarrow>\n       CT OK \\<and>\n       \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n       \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n       length Bs = length ds \\<and>\n       (\\<exists>As.\n           CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n           CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n       (\\<exists>Ca.\n           CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : Ca \\<and>\n           CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 3. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 7. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>C.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n        CT \\<turnstile> C <: C')", "proof (rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n       CT \\<turnstile> C <: C'", "assume asms: \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and> (\\<Gamma>2 = [xs [\\<mapsto>] Bs]) \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n       CT \\<turnstile> C <: C'", "hence \n        lengths: \"length ds = length Bs\"\n        and G_def: \"\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\"\n        and G2_def : \"\\<Gamma>2 = [xs[\\<mapsto>]Bs]\""], ["proof (prove)\nusing this:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. length ds = length Bs &&&\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 &&& \\<Gamma>2 = [xs [\\<mapsto>] Bs]", "by auto"], ["proof (state)\nthis:\n  length ds = length Bs\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs]\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n       CT \\<turnstile> C <: C'", "from lengths G2_def"], ["proof (chain)\npicking this:\n  length ds = length Bs\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs]", "have same_doms: \"dom([xs[\\<mapsto>]ds]) = dom(\\<Gamma>2)\""], ["proof (prove)\nusing this:\n  length ds = length Bs\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs]\n\ngoal (1 subgoal):\n 1. dom [xs [\\<mapsto>] ds] = dom \\<Gamma>2", "by auto"], ["proof (state)\nthis:\n  dom [xs [\\<mapsto>] ds] = dom \\<Gamma>2\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n       CT \\<turnstile> C <: C'", "from asms"], ["proof (chain)\npicking this:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "show \"\\<exists>C. CT;\\<Gamma>1 \\<turnstile> substs [xs [\\<mapsto>] ds] (Var x) : C \\<and> CT \\<turnstile> C <: C'\""], ["proof (prove)\nusing this:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n       CT \\<turnstile> C <: C'", "proof (cases \"\\<Gamma>2 x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>CT OK \\<and>\n             \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n             \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n             length Bs = length ds \\<and>\n             (\\<exists>As.\n                 CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                 CT \\<turnstile>+ As <: Bs);\n     \\<Gamma>2 x = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n                         CT \\<turnstile> C <: C'\n 2. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "case None"], ["proof (state)\nthis:\n  \\<Gamma>2 x = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CT OK \\<and>\n             \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n             \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n             length Bs = length ds \\<and>\n             (\\<exists>As.\n                 CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                 CT \\<turnstile>+ As <: Bs);\n     \\<Gamma>2 x = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n                         CT \\<turnstile> C <: C'\n 2. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "with G_def t_var"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\n  \\<Gamma> x = Some C'\n  \\<Gamma>2 x = None", "have G1_x: \"\\<Gamma>1 x = Some C'\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\n  \\<Gamma> x = Some C'\n  \\<Gamma>2 x = None\n\ngoal (1 subgoal):\n 1. \\<Gamma>1 x = Some C'", "by(simp add:map_add_Some_iff)"], ["proof (state)\nthis:\n  \\<Gamma>1 x = Some C'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CT OK \\<and>\n             \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n             \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n             length Bs = length ds \\<and>\n             (\\<exists>As.\n                 CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                 CT \\<turnstile>+ As <: Bs);\n     \\<Gamma>2 x = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n                         CT \\<turnstile> C <: C'\n 2. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "from None same_doms"], ["proof (chain)\npicking this:\n  \\<Gamma>2 x = None\n  dom [xs [\\<mapsto>] ds] = dom \\<Gamma>2", "have \"x \\<notin> dom([xs[\\<mapsto>]ds])\""], ["proof (prove)\nusing this:\n  \\<Gamma>2 x = None\n  dom [xs [\\<mapsto>] ds] = dom \\<Gamma>2\n\ngoal (1 subgoal):\n 1. x \\<notin> dom [xs [\\<mapsto>] ds]", "by (auto simp only:domIff)"], ["proof (state)\nthis:\n  x \\<notin> dom [xs [\\<mapsto>] ds]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CT OK \\<and>\n             \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n             \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n             length Bs = length ds \\<and>\n             (\\<exists>As.\n                 CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                 CT \\<turnstile>+ As <: Bs);\n     \\<Gamma>2 x = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n                         CT \\<turnstile> C <: C'\n 2. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "hence \"[xs[\\<mapsto>]ds]x = None\""], ["proof (prove)\nusing this:\n  x \\<notin> dom [xs [\\<mapsto>] ds]\n\ngoal (1 subgoal):\n 1. [xs [\\<mapsto>] ds] x = None", "by(auto simp only:map_add_Some_iff)"], ["proof (state)\nthis:\n  [xs [\\<mapsto>] ds] x = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CT OK \\<and>\n             \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n             \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n             length Bs = length ds \\<and>\n             (\\<exists>As.\n                 CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                 CT \\<turnstile>+ As <: Bs);\n     \\<Gamma>2 x = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n                         CT \\<turnstile> C <: C'\n 2. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "hence \"(ds/xs)(Var x) = (Var x)\""], ["proof (prove)\nusing this:\n  [xs [\\<mapsto>] ds] x = None\n\ngoal (1 subgoal):\n 1. (ds/xs)Var x = Var x", "by auto"], ["proof (state)\nthis:\n  (ds/xs)Var x = Var x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CT OK \\<and>\n             \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n             \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n             length Bs = length ds \\<and>\n             (\\<exists>As.\n                 CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                 CT \\<turnstile>+ As <: Bs);\n     \\<Gamma>2 x = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n                         CT \\<turnstile> C <: C'\n 2. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "with G1_x"], ["proof (chain)\npicking this:\n  \\<Gamma>1 x = Some C'\n  (ds/xs)Var x = Var x", "have \n          \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)(Var x) : C'\" and \"CT \\<turnstile> C' <: C'\""], ["proof (prove)\nusing this:\n  \\<Gamma>1 x = Some C'\n  (ds/xs)Var x = Var x\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C' &&& CT \\<turnstile> C' <: C'", "by (auto simp add:typings_typing.intros subtyping.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C'\n  CT \\<turnstile> C' <: C'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CT OK \\<and>\n             \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n             \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n             length Bs = length ds \\<and>\n             (\\<exists>As.\n                 CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                 CT \\<turnstile>+ As <: Bs);\n     \\<Gamma>2 x = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n                         CT \\<turnstile> C <: C'\n 2. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "thus ?thesis"], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C'\n  CT \\<turnstile> C' <: C'\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n       CT \\<turnstile> C <: C'", "by auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n     CT \\<turnstile> C <: C'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "case (Some Bi)"], ["proof (state)\nthis:\n  \\<Gamma>2 x = Some Bi\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "with G_def t_var"], ["proof (chain)\npicking this:\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\n  \\<Gamma> x = Some C'\n  \\<Gamma>2 x = Some Bi", "have c'_eq_bi: \"C' = Bi\""], ["proof (prove)\nusing this:\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\n  \\<Gamma> x = Some C'\n  \\<Gamma>2 x = Some Bi\n\ngoal (1 subgoal):\n 1. C' = Bi", "by (auto simp add: map_add_SomeD)"], ["proof (state)\nthis:\n  C' = Bi\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "from \\<open>length xs = length ds\\<close> asms"], ["proof (chain)\npicking this:\n  length xs = length ds\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "have \"length xs = length Bs\""], ["proof (prove)\nusing this:\n  length xs = length ds\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. length xs = length Bs", "by simp"], ["proof (state)\nthis:\n  length xs = length Bs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "with Some G2_def"], ["proof (chain)\npicking this:\n  \\<Gamma>2 x = Some Bi\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs]\n  length xs = length Bs", "have \"\\<exists>i.(Bs!i = Bi) \\<and> (i < length Bs) \\<and>\n            (\\<forall>l.((length l = length Bs) \\<longrightarrow> ([xs[\\<mapsto>]l] x = Some (l!i))))\""], ["proof (prove)\nusing this:\n  \\<Gamma>2 x = Some Bi\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs]\n  length xs = length Bs\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       Bs ! i = Bi \\<and>\n       i < length Bs \\<and>\n       (\\<forall>l.\n           length l = length Bs \\<longrightarrow>\n           [xs [\\<mapsto>] l] x = Some (l ! i))", "by (auto simp add: map_upds_index)"], ["proof (state)\nthis:\n  \\<exists>i.\n     Bs ! i = Bi \\<and>\n     i < length Bs \\<and>\n     (\\<forall>l.\n         length l = length Bs \\<longrightarrow>\n         [xs [\\<mapsto>] l] x = Some (l ! i))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "then"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     Bs ! i = Bi \\<and>\n     i < length Bs \\<and>\n     (\\<forall>l.\n         length l = length Bs \\<longrightarrow>\n         [xs [\\<mapsto>] l] x = Some (l ! i))", "obtain i where bs_i_proj: \"(Bs!i = Bi)\" \n          and i_len: \"i < length Bs\"\n          and P: \"(\\<And>(l::exp list).((length l = length Bs) \\<longrightarrow> ([xs[\\<mapsto>]l] x = Some (l!i))))\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     Bs ! i = Bi \\<and>\n     i < length Bs \\<and>\n     (\\<forall>l.\n         length l = length Bs \\<longrightarrow>\n         [xs [\\<mapsto>] l] x = Some (l ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>Bs ! i = Bi; i < length Bs;\n         \\<And>l.\n            length l = length Bs \\<longrightarrow>\n            [xs [\\<mapsto>] l] x = Some (l ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  Bs ! i = Bi\n  i < length Bs\n  length ?l1 = length Bs \\<longrightarrow>\n  [xs [\\<mapsto>] ?l1] x = Some (?l1 ! i)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "from lengths P"], ["proof (chain)\npicking this:\n  length ds = length Bs\n  length ?l1 = length Bs \\<longrightarrow>\n  [xs [\\<mapsto>] ?l1] x = Some (?l1 ! i)", "have subst_x: \"([xs[\\<mapsto>]ds]x = Some (ds!i))\""], ["proof (prove)\nusing this:\n  length ds = length Bs\n  length ?l1 = length Bs \\<longrightarrow>\n  [xs [\\<mapsto>] ?l1] x = Some (?l1 ! i)\n\ngoal (1 subgoal):\n 1. [xs [\\<mapsto>] ds] x = Some (ds ! i)", "by auto"], ["proof (state)\nthis:\n  [xs [\\<mapsto>] ds] x = Some (ds ! i)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "from asms"], ["proof (chain)\npicking this:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "obtain As where as_ex:\"CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs\""], ["proof (prove)\nusing this:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. (\\<And>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "hence \"length As = length Bs\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs\n\ngoal (1 subgoal):\n 1. length As = length Bs", "by (auto simp add: subtypings_length)"], ["proof (state)\nthis:\n  length As = length Bs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "hence proj_i:\"CT;\\<Gamma>1 \\<turnstile> ds!i : As!i \\<and> CT \\<turnstile> As!i <: Bs!i\""], ["proof (prove)\nusing this:\n  length As = length Bs\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> ds ! i : As ! i \\<and>\n    CT \\<turnstile> As ! i <: Bs ! i", "using i_len lengths as_ex"], ["proof (prove)\nusing this:\n  length As = length Bs\n  i < length Bs\n  length ds = length Bs\n  CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> ds ! i : As ! i \\<and>\n    CT \\<turnstile> As ! i <: Bs ! i", "by (auto simp add: typings_proj)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> ds ! i : As ! i \\<and>\n  CT \\<turnstile> As ! i <: Bs ! i\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "hence \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)(Var x) : As!i \\<and> CT \\<turnstile> As!i <: C'\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> ds ! i : As ! i \\<and>\n  CT \\<turnstile> As ! i <: Bs ! i\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : As ! i \\<and>\n    CT \\<turnstile> As ! i <: C'", "using c'_eq_bi bs_i_proj subst_x"], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> ds ! i : As ! i \\<and>\n  CT \\<turnstile> As ! i <: Bs ! i\n  C' = Bi\n  Bs ! i = Bi\n  [xs [\\<mapsto>] ds] x = Some (ds ! i)\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : As ! i \\<and>\n    CT \\<turnstile> As ! i <: C'", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : As ! i \\<and>\n  CT \\<turnstile> As ! i <: C'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>CT OK \\<and>\n                \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                length Bs = length ds \\<and>\n                (\\<exists>As.\n                    CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                    CT \\<turnstile>+ As <: Bs);\n        \\<Gamma>2 x = Some a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var\n                        x : C \\<and>\n                            CT \\<turnstile> C <: C'", "thus ?thesis"], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : As ! i \\<and>\n  CT \\<turnstile> As ! i <: C'\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n       CT \\<turnstile> C <: C'", ".."], ["proof (state)\nthis:\n  \\<exists>C.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n     CT \\<turnstile> C <: C'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>C.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n     CT \\<turnstile> C <: C'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)Var x : C \\<and>\n      CT \\<turnstile> C <: C')\n\ngoal (6 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 2. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 2. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case(t_field CT \\<Gamma> e0 C0 Cf fi fDef Ci)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n\ngoal (6 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 Cf fi fDef Ci.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>C.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0\n                         fi : C \\<and>\n                             CT \\<turnstile> C <: Ci)\n 2. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 6. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>C.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n        CT \\<turnstile> C <: Ci)", "proof(rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "assume asms: \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and>\n        (\\<Gamma>2 = [xs [\\<mapsto>] Bs]) \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "from t_field"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci", "have flds: \"fields(CT,C0) = Cf\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n\ngoal (1 subgoal):\n 1. fields(CT,C0) = Cf", "by fastforce"], ["proof (state)\nthis:\n  fields(CT,C0) = Cf\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "from t_field asms"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "obtain C where e0_typ: \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C\" and sub: \"CT \\<turnstile> C <: C0\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C;\n         CT \\<turnstile> C <: C0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C\n  CT \\<turnstile> C <: C0\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "from sub_fields[OF sub flds]"], ["proof (chain)\npicking this:\n  \\<exists>Cfa. fields(CT,C) = (Cf @ Cfa)", "obtain Dg where flds_C: \"fields(CT,C) = (Cf@Dg)\""], ["proof (prove)\nusing this:\n  \\<exists>Cfa. fields(CT,C) = (Cf @ Cfa)\n\ngoal (1 subgoal):\n 1. (\\<And>Dg.\n        fields(CT,C) = (Cf @ Dg) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  fields(CT,C) = (Cf @ Dg)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "from t_field"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci", "have lookup_CfDg: \"lookup (Cf@Dg) (\\<lambda>fd. vdName fd = fi) = Some fDef\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n\ngoal (1 subgoal):\n 1. lookup (Cf @ Dg) (\\<lambda>fd. vdName fd = fi) = Some fDef", "by(simp add:lookup_append)"], ["proof (state)\nthis:\n  lookup (Cf @ Dg) (\\<lambda>fd. vdName fd = fi) = Some fDef\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "from e0_typ flds_C lookup_CfDg t_field"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C\n  fields(CT,C) = (Cf @ Dg)\n  lookup (Cf @ Dg) (\\<lambda>fd. vdName fd = fi) = Some fDef\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)(FieldProj e0 fi) : Ci\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C\n  fields(CT,C) = (Cf @ Dg)\n  lookup (Cf @ Dg) (\\<lambda>fd. vdName fd = fi) = Some fDef\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : Ci", "by(simp add:typings_typing.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : Ci\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : Ci\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "have \"CT \\<turnstile> Ci <: Ci\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> Ci <: Ci", "by (simp add:subtyping.intros)"], ["proof (state)\nthis:\n  CT \\<turnstile> Ci <: Ci\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : Ci\n  CT \\<turnstile> Ci <: Ci", "show \"\\<exists>C. CT;\\<Gamma>1 \\<turnstile> (ds/xs)(FieldProj e0 fi) : C \\<and> CT \\<turnstile> C <: Ci\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : Ci\n  CT \\<turnstile> Ci <: Ci\n\ngoal (1 subgoal):\n 1. \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n       CT \\<turnstile> C <: Ci", "by auto"], ["proof (state)\nthis:\n  \\<exists>C.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n     CT \\<turnstile> C <: Ci\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)FieldProj e0 fi : C \\<and>\n      CT \\<turnstile> C <: Ci)\n\ngoal (5 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case(t_invk CT \\<Gamma> e0 C0 m Ds C es Cs)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n\ngoal (5 subgoals):\n 1. \\<And>CT \\<Gamma> e0 C0 m Ds C es Cs.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: C0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0\n                         m es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 5. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>Ca.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n        CT \\<turnstile> Ca <: C)", "proof(rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "assume asms: \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and> (\\<Gamma>2 = [xs [\\<mapsto>] Bs])\n          \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "hence ct_ok: \"CT OK\""], ["proof (prove)\nusing this:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK", ".."], ["proof (state)\nthis:\n  CT OK\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from t_invk"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds", "have mtyp: \"mtype(CT,m,C0) = Ds \\<rightarrow> C\" \n        and subs: \"CT \\<turnstile>+ Cs <: Ds\"\n        and lens: \"length es = length Ds\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n\ngoal (1 subgoal):\n 1. mtype(CT,m,C0) = Ds \\<rightarrow> C &&&\n    CT \\<turnstile>+ Cs <: Ds &&& length es = length Ds", "by auto"], ["proof (state)\nthis:\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from t_invk asms"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "obtain C' where\n          e0_typ: \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\" and sub': \"CT \\<turnstile> C' <: C0\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C';\n         CT \\<turnstile> C' <: C0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C' <: C0\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from t_invk asms"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "obtain Cs' where\n          es_typ: \"CT;\\<Gamma>1 \\<turnstile>+ [ds/xs]es : Cs'\" and subs': \"CT \\<turnstile>+ Cs' <: Cs\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n      CT \\<turnstile> C <: C0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. (\\<And>Cs'.\n        \\<lbrakk>CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs';\n         CT \\<turnstile>+ Cs' <: Cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs'\n  CT \\<turnstile>+ Cs' <: Cs\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "have subst_e: \"(ds/xs)(MethodInvk e0 m es) = MethodInvk ((ds/xs)e0) m ([ds/xs]es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ds/xs)MethodInvk e0 m es =\n    MethodInvk ((ds/xs)e0) m (map (substs_syn ds xs) es)", "by(auto simp add: subst_list1_eq_map_substs)"], ["proof (state)\nthis:\n  (ds/xs)MethodInvk e0 m es =\n  MethodInvk ((ds/xs)e0) m (map (substs_syn ds xs) es)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from \n        e0_typ\n        A_1_1[OF sub' ct_ok mtyp] \n        es_typ\n        subtypings_trans[OF subs' subs] \n        lens \n        subst_e"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  mtype(CT,m,C') = Ds \\<rightarrow> C\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs'\n  CT \\<turnstile>+ Cs' <: Ds\n  length es = length Ds\n  (ds/xs)MethodInvk e0 m es =\n  MethodInvk ((ds/xs)e0) m (map (substs_syn ds xs) es)", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)(MethodInvk e0 m es) : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  mtype(CT,m,C') = Ds \\<rightarrow> C\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs'\n  CT \\<turnstile>+ Cs' <: Ds\n  length es = length Ds\n  (ds/xs)MethodInvk e0 m es =\n  MethodInvk ((ds/xs)e0) m (map (substs_syn ds xs) es)\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : C", "by(auto simp add:typings_typing.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "have \"CT \\<turnstile> C <: C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> C <: C", "by(simp add:subtyping.intros)"], ["proof (state)\nthis:\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : C\n  CT \\<turnstile> C <: C", "show \"\\<exists>C'. CT;\\<Gamma>1 \\<turnstile> (ds/xs)(MethodInvk e0 m es) : C' \\<and> CT \\<turnstile> C' <: C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : C\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : C' \\<and>\n       CT \\<turnstile> C' <: C", "by auto"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Ca.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)MethodInvk e0 m es : Ca \\<and>\n      CT \\<turnstile> Ca <: C)\n\ngoal (4 subgoals):\n 1. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case(t_new CT C Df es Ds \\<Gamma> Cs)"], ["proof (state)\nthis:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n\ngoal (4 subgoals):\n 1. \\<And>CT C Df es Ds \\<Gamma> Cs.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>Csa.\n            CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs)\n  es : Csa \\<and>\n            CT \\<turnstile>+ Csa <: Cs);\n        CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C\n                         es : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 4. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>Ca.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n        CT \\<turnstile> Ca <: C)", "proof(rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "assume asms: \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and> (\\<Gamma>2 = [xs [\\<mapsto>] Bs]) \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "hence ct_ok: \"CT OK\""], ["proof (prove)\nusing this:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK", ".."], ["proof (state)\nthis:\n  CT OK\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from t_new"], ["proof (chain)\npicking this:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds", "have\n        subs: \"CT \\<turnstile>+ Cs <: Ds\"\n        and flds: \"fields(CT,C) = Df\"\n        and len: \"length es = length Df\"\n        and vdts: \"varDefs_types Df = Ds\""], ["proof (prove)\nusing this:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n\ngoal (1 subgoal):\n 1. (CT \\<turnstile>+ Cs <: Ds &&& fields(CT,C) = Df) &&&\n    length es = length Df &&& varDefs_types Df = Ds", "by auto"], ["proof (state)\nthis:\n  CT \\<turnstile>+ Cs <: Ds\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from t_new asms"], ["proof (chain)\npicking this:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "obtain Cs' where\n        es_typ: \"CT;\\<Gamma>1 \\<turnstile>+ [ds/xs]es : Cs'\" and subs': \"CT \\<turnstile>+ Cs' <: Cs\""], ["proof (prove)\nusing this:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Csa.\n      CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Csa \\<and>\n      CT \\<turnstile>+ Csa <: Cs)\n  CT \\<turnstile>+ Cs <: Ds\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. (\\<And>Cs'.\n        \\<lbrakk>CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs';\n         CT \\<turnstile>+ Cs' <: Cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs'\n  CT \\<turnstile>+ Cs' <: Cs\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "have subst_e: \"(ds/xs)(New C es) = New C ([ds/xs]es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ds/xs)New C es = New C (map (substs_syn ds xs) es)", "by(auto simp add: subst_list2_eq_map_substs)"], ["proof (state)\nthis:\n  (ds/xs)New C es = New C (map (substs_syn ds xs) es)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from es_typ subtypings_trans[OF subs' subs] flds subst_e len vdts"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs'\n  CT \\<turnstile>+ Cs' <: Ds\n  fields(CT,C) = Df\n  (ds/xs)New C es = New C (map (substs_syn ds xs) es)\n  length es = length Df\n  varDefs_types Df = Ds", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)(New C es) : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs'\n  CT \\<turnstile>+ Cs' <: Ds\n  fields(CT,C) = Df\n  (ds/xs)New C es = New C (map (substs_syn ds xs) es)\n  length es = length Df\n  varDefs_types Df = Ds\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : C", "by(auto simp add:typings_typing.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "have \"CT \\<turnstile> C <: C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> C <: C", "by(simp add:subtyping.intros)"], ["proof (state)\nthis:\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : C\n  CT \\<turnstile> C <: C", "show \"\\<exists>C'. CT;\\<Gamma>1 \\<turnstile> (ds/xs)(New C es) : C' \\<and> CT \\<turnstile> C' <: C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : C\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : C' \\<and>\n       CT \\<turnstile> C' <: C", "by auto"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Ca.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)New C es : Ca \\<and>\n      CT \\<turnstile> Ca <: C)\n\ngoal (3 subgoals):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case(t_ucast CT \\<Gamma> e0 D C)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> D <: C\n\ngoal (3 subgoals):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> D <: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 3. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>Ca.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n        CT \\<turnstile> Ca <: C)", "proof(rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "assume asms: \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and> (\\<Gamma>2 = [xs [\\<mapsto>] Bs]) \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from t_ucast asms"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> D <: C\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "obtain C' where e0_typ: \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\" \n        and  sub1:\"CT \\<turnstile> C' <: D\" \n        and  sub2:\"CT \\<turnstile> D <: C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> D <: C\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C';\n         CT \\<turnstile> C' <: D; CT \\<turnstile> D <: C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C' <: D\n  CT \\<turnstile> D <: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from sub1 sub2"], ["proof (chain)\npicking this:\n  CT \\<turnstile> C' <: D\n  CT \\<turnstile> D <: C", "have \"CT \\<turnstile> C' <: C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> C' <: D\n  CT \\<turnstile> D <: C\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> C' <: C", "by (rule s_trans)"], ["proof (state)\nthis:\n  CT \\<turnstile> C' <: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "with e0_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C' <: C", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs)(Cast C e0) : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C' <: C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C", "by(auto simp add: typings_typing.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "have \"CT \\<turnstile> C <: C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> C <: C", "by (rule s_refl)"], ["proof (state)\nthis:\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n  CT \\<turnstile> C <: C", "show \"\\<exists>C'. CT;\\<Gamma>1 \\<turnstile> (ds/xs)(Cast C e0) : C' \\<and> CT \\<turnstile> C' <: C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C' \\<and>\n       CT \\<turnstile> C' <: C", "by auto"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Ca.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n      CT \\<turnstile> Ca <: C)\n\ngoal (2 subgoals):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case(t_dcast CT \\<Gamma> e0 D C)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> C <: D\n  C \\<noteq> D\n\ngoal (2 subgoals):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C <: D; C \\<noteq> D\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)\n 2. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>Ca.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n        CT \\<turnstile> Ca <: C)", "proof(rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "assume asms: \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and> (\\<Gamma>2 = [xs [\\<mapsto>] Bs]) \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from t_dcast asms"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> C <: D\n  C \\<noteq> D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "obtain C' where e0_typ:\"CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> C <: D\n  C \\<noteq> D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "have \"(CT \\<turnstile> C' <: C)  \\<or> \n        (C \\<noteq> C' \\<and> CT \\<turnstile> C <: C') \\<or> \n        (CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> C' <: C \\<or>\n    C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<or>\n    CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C", "by blast"], ["proof (state)\nthis:\n  CT \\<turnstile> C' <: C \\<or>\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<or>\n  CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "moreover"], ["proof (state)\nthis:\n  CT \\<turnstile> C' <: C \\<or>\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<or>\n  CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "{"], ["proof (state)\nthis:\n  CT \\<turnstile> C' <: C \\<or>\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<or>\n  CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "assume \"CT \\<turnstile> C' <: C\""], ["proof (state)\nthis:\n  CT \\<turnstile> C' <: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "with e0_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C' <: C", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs) (Cast C e0) : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C' <: C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C", "by (auto simp add: typings_typing.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "}"], ["proof (state)\nthis:\n  CT \\<turnstile> C' <: C \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "moreover"], ["proof (state)\nthis:\n  CT \\<turnstile> C' <: C \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "{"], ["proof (state)\nthis:\n  CT \\<turnstile> C' <: C \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "assume \"(C \\<noteq> C' \\<and> CT \\<turnstile> C <: C')\""], ["proof (state)\nthis:\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C'\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "with e0_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C'", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs) (Cast C e0) : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C'\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C", "by (auto simp add: typings_typing.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "}"], ["proof (state)\nthis:\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "moreover"], ["proof (state)\nthis:\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "{"], ["proof (state)\nthis:\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "assume \"(CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C)\""], ["proof (state)\nthis:\n  CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "with e0_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs) (Cast C e0) : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C", "by (auto simp add: typings_typing.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "}"], ["proof (state)\nthis:\n  CT \\<turnstile> C \\<not><: C' \\<and>\n  CT \\<turnstile> C' \\<not><: C \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "ultimately"], ["proof (chain)\npicking this:\n  CT \\<turnstile> C' <: C \\<or>\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<or>\n  CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C\n  CT \\<turnstile> C' <: C \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n  CT \\<turnstile> C \\<not><: C' \\<and>\n  CT \\<turnstile> C' \\<not><: C \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs) (Cast C e0) : C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> C' <: C \\<or>\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<or>\n  CT \\<turnstile> C \\<not><: C' \\<and> CT \\<turnstile> C' \\<not><: C\n  CT \\<turnstile> C' <: C \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n  C \\<noteq> C' \\<and> CT \\<turnstile> C <: C' \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n  CT \\<turnstile> C \\<not><: C' \\<and>\n  CT \\<turnstile> C' \\<not><: C \\<Longrightarrow>\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "have \"CT \\<turnstile> C <: C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> C <: C", "by(rule s_refl)"], ["proof (state)\nthis:\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n  CT \\<turnstile> C <: C", "show \"\\<exists>C'. CT;\\<Gamma>1 \\<turnstile> (ds/xs)(Cast C e0) : C' \\<and> CT \\<turnstile> C' <: C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C' \\<and>\n       CT \\<turnstile> C' <: C", "by auto"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Ca.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n      CT \\<turnstile> Ca <: C)\n\ngoal (1 subgoal):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "case(t_scast CT \\<Gamma> e0 D C)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> D \\<not><: C\n\ngoal (1 subgoal):\n 1. \\<And>CT \\<Gamma> e0 D C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        CT OK \\<and>\n        \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n        \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n        length Bs = length ds \\<and>\n        (\\<exists>As.\n            CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n            CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n        (\\<exists>C.\n            CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and>\n            CT \\<turnstile> C <: D);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C\\<rbrakk>\n       \\<Longrightarrow> CT OK \\<and>\n                         \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n                         \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n                         length Bs = length ds \\<and>\n                         (\\<exists>As.\n                             CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n                             CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n                         (\\<exists>Ca.\n                             CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C\n                         e0 : Ca \\<and>\n                             CT \\<turnstile> Ca <: C)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n    (\\<exists>Ca.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n        CT \\<turnstile> Ca <: C)", "proof(rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "assume asms: \"(CT OK) \\<and> (\\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2) \\<and> (\\<Gamma>2 = [xs [\\<mapsto>] Bs]) \\<and> (length Bs = length ds) \\<and> (\\<exists>As. CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\""], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from t_scast asms"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> D \\<not><: C\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)", "obtain C' where e0_typ:\"CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\" \n        and sub1: \"CT \\<turnstile> C' <: D\" \n        and nsub1: \"CT \\<turnstile> C \\<not><: D\"  \n        and nsub2: \"CT \\<turnstile> D \\<not><: C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>C.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C \\<and> CT \\<turnstile> C <: D)\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> D \\<not><: C\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs)\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C';\n         CT \\<turnstile> C' <: D; CT \\<turnstile> C \\<not><: D;\n         CT \\<turnstile> D \\<not><: C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n  CT \\<turnstile> C' <: D\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> D \\<not><: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "from not_subtypes[OF sub1 nsub1 nsub2]"], ["proof (chain)\npicking this:\n  CT \\<turnstile> C' \\<not><: C", "have \"CT \\<turnstile> C' \\<not><: C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> C' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> C' \\<not><: C", "by fastforce"], ["proof (state)\nthis:\n  CT \\<turnstile> C' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "moreover"], ["proof (state)\nthis:\n  CT \\<turnstile> C' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "have \"CT \\<turnstile> C \\<not><: C'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> C \\<not><: C'", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> CT \\<turnstile> C \\<not><: C' \\<Longrightarrow> False", "assume \"\\<not> CT \\<turnstile> C \\<not><: C'\""], ["proof (state)\nthis:\n  \\<not> CT \\<turnstile> C \\<not><: C'\n\ngoal (1 subgoal):\n 1. \\<not> CT \\<turnstile> C \\<not><: C' \\<Longrightarrow> False", "hence \"CT \\<turnstile> C <: C'\""], ["proof (prove)\nusing this:\n  \\<not> CT \\<turnstile> C \\<not><: C'\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> C <: C'", "by auto"], ["proof (state)\nthis:\n  CT \\<turnstile> C <: C'\n\ngoal (1 subgoal):\n 1. \\<not> CT \\<turnstile> C \\<not><: C' \\<Longrightarrow> False", "hence \"CT \\<turnstile> C <: D\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> C <: C'\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> C <: D", "using sub1"], ["proof (prove)\nusing this:\n  CT \\<turnstile> C <: C'\n  CT \\<turnstile> C' <: D\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> C <: D", "by(rule s_trans)"], ["proof (state)\nthis:\n  CT \\<turnstile> C <: D\n\ngoal (1 subgoal):\n 1. \\<not> CT \\<turnstile> C \\<not><: C' \\<Longrightarrow> False", "with nsub1"], ["proof (chain)\npicking this:\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> C <: D", "show \"False\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> C <: D\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT \\<turnstile> C \\<not><: C'\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "ultimately"], ["proof (chain)\npicking this:\n  CT \\<turnstile> C' \\<not><: C\n  CT \\<turnstile> C \\<not><: C'", "have \"CT;\\<Gamma>1 \\<turnstile> (ds/xs) (Cast C e0) : C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> C' \\<not><: C\n  CT \\<turnstile> C \\<not><: C'\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C", "using e0_typ"], ["proof (prove)\nusing this:\n  CT \\<turnstile> C' \\<not><: C\n  CT \\<turnstile> C \\<not><: C'\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)e0 : C'\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C", "by (auto simp add: typings_typing.intros)"], ["proof (state)\nthis:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. CT OK \\<and>\n    \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n    \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n    length Bs = length ds \\<and>\n    (\\<exists>As.\n        CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n        CT \\<turnstile>+ As <: Bs) \\<Longrightarrow>\n    \\<exists>Ca.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n       CT \\<turnstile> Ca <: C", "thus \"\\<exists>C'. CT;\\<Gamma>1 \\<turnstile> (ds/xs)(Cast C e0) : C' \\<and> CT \\<turnstile> C' <: C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C' \\<and>\n       CT \\<turnstile> C' <: C", "by (auto simp add: s_refl)"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CT OK \\<and>\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n  length Bs = length ds \\<and>\n  (\\<exists>As.\n      CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n      CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n  (\\<exists>Ca.\n      CT;\\<Gamma>1 \\<turnstile> (ds/xs)Cast C e0 : Ca \\<and>\n      CT \\<turnstile> Ca <: C)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (CT;\\<Gamma> \\<turnstile>+ es : Ds \\<longrightarrow>\n   CT OK \\<and>\n   \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n   \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n   length Bs = length ds \\<and>\n   (\\<exists>As.\n       CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n       CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n   (\\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n       CT \\<turnstile>+ Cs <: Ds)) \\<and>\n  (CT;\\<Gamma> \\<turnstile> e : D \\<longrightarrow>\n   CT OK \\<and>\n   \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n   \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n   length Bs = length ds \\<and>\n   (\\<exists>As.\n       CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n       CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n   (\\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and>\n       CT \\<turnstile> C <: D))\n\ngoal (2 subgoals):\n 1. CT;\\<Gamma> \\<turnstile>+ es : Ds \\<Longrightarrow>\n    \\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n       CT \\<turnstile>+ Cs <: Ds\n 2. CT;\\<Gamma> \\<turnstile> e : D \\<Longrightarrow>\n    \\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and> CT \\<turnstile> C <: D", "thus \"?TYPINGS \\<Longrightarrow> ?P1\" and \"?TYPING \\<Longrightarrow> ?P2\""], ["proof (prove)\nusing this:\n  (CT;\\<Gamma> \\<turnstile>+ es : Ds \\<longrightarrow>\n   CT OK \\<and>\n   \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n   \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n   length Bs = length ds \\<and>\n   (\\<exists>As.\n       CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n       CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n   (\\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n       CT \\<turnstile>+ Cs <: Ds)) \\<and>\n  (CT;\\<Gamma> \\<turnstile> e : D \\<longrightarrow>\n   CT OK \\<and>\n   \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n   \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n   length Bs = length ds \\<and>\n   (\\<exists>As.\n       CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n       CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n   (\\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and>\n       CT \\<turnstile> C <: D))\n\ngoal (1 subgoal):\n 1. (CT;\\<Gamma> \\<turnstile>+ es : Ds \\<Longrightarrow>\n     \\<exists>Cs.\n        CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n        CT \\<turnstile>+ Cs <: Ds) &&&\n    (CT;\\<Gamma> \\<turnstile> e : D \\<Longrightarrow>\n     \\<exists>C.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and>\n        CT \\<turnstile> C <: D)", "using assms"], ["proof (prove)\nusing this:\n  (CT;\\<Gamma> \\<turnstile>+ es : Ds \\<longrightarrow>\n   CT OK \\<and>\n   \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n   \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n   length Bs = length ds \\<and>\n   (\\<exists>As.\n       CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n       CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n   (\\<exists>Cs.\n       CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n       CT \\<turnstile>+ Cs <: Ds)) \\<and>\n  (CT;\\<Gamma> \\<turnstile> e : D \\<longrightarrow>\n   CT OK \\<and>\n   \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2 \\<and>\n   \\<Gamma>2 = [xs [\\<mapsto>] Bs] \\<and>\n   length Bs = length ds \\<and>\n   (\\<exists>As.\n       CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and>\n       CT \\<turnstile>+ As <: Bs) \\<longrightarrow>\n   (\\<exists>C.\n       CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and>\n       CT \\<turnstile> C <: D))\n  CT OK\n  \\<Gamma> = \\<Gamma>1 ++ \\<Gamma>2\n  \\<Gamma>2 = [xs [\\<mapsto>] Bs]\n  length xs = length ds\n  length Bs = length ds\n  \\<exists>As.\n     CT;\\<Gamma>1 \\<turnstile>+ ds : As \\<and> CT \\<turnstile>+ As <: Bs\n\ngoal (1 subgoal):\n 1. (CT;\\<Gamma> \\<turnstile>+ es : Ds \\<Longrightarrow>\n     \\<exists>Cs.\n        CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n        CT \\<turnstile>+ Cs <: Ds) &&&\n    (CT;\\<Gamma> \\<turnstile> e : D \\<Longrightarrow>\n     \\<exists>C.\n        CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and>\n        CT \\<turnstile> C <: D)", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile>+ es : Ds \\<Longrightarrow>\n  \\<exists>Cs.\n     CT;\\<Gamma>1 \\<turnstile>+ map (substs_syn ds xs) es : Cs \\<and>\n     CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile> e : D \\<Longrightarrow>\n  \\<exists>C.\n     CT;\\<Gamma>1 \\<turnstile> (ds/xs)e : C \\<and> CT \\<turnstile> C <: D\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Weakening Lemma\\<close>"], ["", "text \\<open>This lemma is not in the same form as in TOPLAS, but rather as\nwe need it in subject reduction\\<close>"], ["", "lemma A_1_3:\n  shows \"(CT;\\<Gamma>2 \\<turnstile>+ es : Cs) \\<Longrightarrow> (CT;\\<Gamma>1++\\<Gamma>2 \\<turnstile>+ es : Cs)\" (is \"?P1 \\<Longrightarrow> ?P2\")\n  and \"CT;\\<Gamma>2 \\<turnstile> e : C \\<Longrightarrow> CT;\\<Gamma>1++\\<Gamma>2 \\<turnstile> e : C\" (is \"?Q1 \\<Longrightarrow> ?Q2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (CT;\\<Gamma>2 \\<turnstile>+ es : Cs \\<Longrightarrow>\n     CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile>+ es : Cs) &&&\n    (CT;\\<Gamma>2 \\<turnstile> e : C \\<Longrightarrow>\n     CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile> e : C)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. CT;\\<Gamma>2 \\<turnstile>+ es : Cs \\<Longrightarrow>\n    CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile>+ es : Cs\n 2. CT;\\<Gamma>2 \\<turnstile> e : C \\<Longrightarrow>\n    CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile> e : C", "have \"(?P1 \\<longrightarrow> ?P2) \\<and> (?Q1 \\<longrightarrow> ?Q2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CT;\\<Gamma>2 \\<turnstile>+ es : Cs \\<longrightarrow>\n     CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile>+ es : Cs) \\<and>\n    (CT;\\<Gamma>2 \\<turnstile> e : C \\<longrightarrow>\n     CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile> e : C)", "by(induct rule:typings_typing.induct, auto simp add: map_add_find_right typings_typing.intros)"], ["proof (state)\nthis:\n  (CT;\\<Gamma>2 \\<turnstile>+ es : Cs \\<longrightarrow>\n   CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile>+ es : Cs) \\<and>\n  (CT;\\<Gamma>2 \\<turnstile> e : C \\<longrightarrow>\n   CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile> e : C)\n\ngoal (2 subgoals):\n 1. CT;\\<Gamma>2 \\<turnstile>+ es : Cs \\<Longrightarrow>\n    CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile>+ es : Cs\n 2. CT;\\<Gamma>2 \\<turnstile> e : C \\<Longrightarrow>\n    CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile> e : C", "thus \"?P1 \\<Longrightarrow> ?P2\" and \"?Q1 \\<Longrightarrow> ?Q2\""], ["proof (prove)\nusing this:\n  (CT;\\<Gamma>2 \\<turnstile>+ es : Cs \\<longrightarrow>\n   CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile>+ es : Cs) \\<and>\n  (CT;\\<Gamma>2 \\<turnstile> e : C \\<longrightarrow>\n   CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile> e : C)\n\ngoal (1 subgoal):\n 1. (CT;\\<Gamma>2 \\<turnstile>+ es : Cs \\<Longrightarrow>\n     CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile>+ es : Cs) &&&\n    (CT;\\<Gamma>2 \\<turnstile> e : C \\<Longrightarrow>\n     CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile> e : C)", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma>2 \\<turnstile>+ es : Cs \\<Longrightarrow>\n  CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile>+ es : Cs\n  CT;\\<Gamma>2 \\<turnstile> e : C \\<Longrightarrow>\n  CT;\\<Gamma>1 ++ \\<Gamma>2 \\<turnstile> e : C\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Method Body Typing Lemma\\<close>"], ["", "lemma A_1_4: \n  assumes ct_ok: \"CT OK\" \n  and mb:\"mbody(CT,m,C) = xs . e\" \n  and mt:\"mtype(CT,m,C) = Ds \\<rightarrow> D\"\n  shows \"\\<exists>D0 C0. (CT \\<turnstile> C <: D0) \\<and> \n                (CT \\<turnstile> C0 <: D) \\<and> \n                (CT;[xs[\\<mapsto>]Ds](this \\<mapsto> D0) \\<turnstile> e : C0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D0 C0.\n       CT \\<turnstile> C <: D0 \\<and>\n       CT \\<turnstile> C0 <: D \\<and>\n       CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0", "using mb ct_ok mt"], ["proof (prove)\nusing this:\n  mbody(CT,m,C) = xs . e\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n\ngoal (1 subgoal):\n 1. \\<exists>D0 C0.\n       CT \\<turnstile> C <: D0 \\<and>\n       CT \\<turnstile> C0 <: D \\<and>\n       CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0", "proof(induct rule: mbody.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_names (mParams mDef) = xs; mBody mDef = e; CT OK;\n        mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0\n 2. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "case (mb_class CT C CDef m mDef xs e)"], ["proof (state)\nthis:\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef\n  varDefs_names (mParams mDef) = xs\n  mBody mDef = e\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_names (mParams mDef) = xs; mBody mDef = e; CT OK;\n        mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0\n 2. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "hence\n    m_param:\"varDefs_types (mParams mDef) = Ds\" \n    and m_ret:\"mReturn mDef = D\" \n    and \"CT \\<turnstile> CDef OK\" \n    and \"cName CDef = C\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef\n  varDefs_names (mParams mDef) = xs\n  mBody mDef = e\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n\ngoal (1 subgoal):\n 1. (varDefs_types (mParams mDef) = Ds &&& mReturn mDef = D) &&&\n    CT \\<turnstile> CDef OK &&& cName CDef = C", "by (auto elim:mtype.cases ct_typing.cases)"], ["proof (state)\nthis:\n  varDefs_types (mParams mDef) = Ds\n  mReturn mDef = D\n  CT \\<turnstile> CDef OK\n  cName CDef = C\n\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_names (mParams mDef) = xs; mBody mDef = e; CT OK;\n        mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0\n 2. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "hence \"CT \\<turnstile>+ (cMethods CDef) OK IN C\""], ["proof (prove)\nusing this:\n  varDefs_types (mParams mDef) = Ds\n  mReturn mDef = D\n  CT \\<turnstile> CDef OK\n  cName CDef = C\n\ngoal (1 subgoal):\n 1. CT \\<turnstile>+ cMethods CDef OK IN C", "by (auto elim:class_typing.cases)"], ["proof (state)\nthis:\n  CT \\<turnstile>+ cMethods CDef OK IN C\n\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_names (mParams mDef) = xs; mBody mDef = e; CT OK;\n        mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0\n 2. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "hence \"CT \\<turnstile> mDef OK IN C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile>+ cMethods CDef OK IN C\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> mDef OK IN C", "using mb_class"], ["proof (prove)\nusing this:\n  CT \\<turnstile>+ cMethods CDef OK IN C\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef\n  varDefs_names (mParams mDef) = xs\n  mBody mDef = e\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> mDef OK IN C", "by(auto simp add:method_typings_lookup)"], ["proof (state)\nthis:\n  CT \\<turnstile> mDef OK IN C\n\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_names (mParams mDef) = xs; mBody mDef = e; CT OK;\n        mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0\n 2. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "hence \"\\<exists> E0. ((CT;[xs[\\<mapsto>]Ds,this\\<mapsto>C] \\<turnstile> e : E0) \\<and> (CT \\<turnstile> E0 <: D))\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> mDef OK IN C\n\ngoal (1 subgoal):\n 1. \\<exists>E0.\n       CT;[xs [\\<mapsto>] Ds, this \\<mapsto> C] \\<turnstile> e : E0 \\<and>\n       CT \\<turnstile> E0 <: D", "using mb_class m_param m_ret"], ["proof (prove)\nusing this:\n  CT \\<turnstile> mDef OK IN C\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef\n  varDefs_names (mParams mDef) = xs\n  mBody mDef = e\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n  varDefs_types (mParams mDef) = Ds\n  mReturn mDef = D\n\ngoal (1 subgoal):\n 1. \\<exists>E0.\n       CT;[xs [\\<mapsto>] Ds, this \\<mapsto> C] \\<turnstile> e : E0 \\<and>\n       CT \\<turnstile> E0 <: D", "by(auto elim:method_typing.cases)"], ["proof (state)\nthis:\n  \\<exists>E0.\n     CT;[xs [\\<mapsto>] Ds, this \\<mapsto> C] \\<turnstile> e : E0 \\<and>\n     CT \\<turnstile> E0 <: D\n\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_names (mParams mDef) = xs; mBody mDef = e; CT OK;\n        mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0\n 2. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "then"], ["proof (chain)\npicking this:\n  \\<exists>E0.\n     CT;[xs [\\<mapsto>] Ds, this \\<mapsto> C] \\<turnstile> e : E0 \\<and>\n     CT \\<turnstile> E0 <: D", "obtain E0 \n    where \"CT;[xs[\\<mapsto>]Ds,this\\<mapsto>C] \\<turnstile> e : E0\"\n    and \"CT \\<turnstile> E0 <: D\"\n    and \"CT \\<turnstile> C <: C\""], ["proof (prove)\nusing this:\n  \\<exists>E0.\n     CT;[xs [\\<mapsto>] Ds, this \\<mapsto> C] \\<turnstile> e : E0 \\<and>\n     CT \\<turnstile> E0 <: D\n\ngoal (1 subgoal):\n 1. (\\<And>E0.\n        \\<lbrakk>CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                     C] \\<turnstile> e : E0;\n         CT \\<turnstile> E0 <: D; CT \\<turnstile> C <: C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: s_refl)"], ["proof (state)\nthis:\n  CT;[xs [\\<mapsto>] Ds, this \\<mapsto> C] \\<turnstile> e : E0\n  CT \\<turnstile> E0 <: D\n  CT \\<turnstile> C <: C\n\ngoal (2 subgoals):\n 1. \\<And>CT C CDef m mDef xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = Some mDef;\n        varDefs_names (mParams mDef) = xs; mBody mDef = e; CT OK;\n        mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0\n 2. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "thus ?case"], ["proof (prove)\nusing this:\n  CT;[xs [\\<mapsto>] Ds, this \\<mapsto> C] \\<turnstile> e : E0\n  CT \\<turnstile> E0 <: D\n  CT \\<turnstile> C <: C\n\ngoal (1 subgoal):\n 1. \\<exists>D0 C0.\n       CT \\<turnstile> C <: D0 \\<and>\n       CT \\<turnstile> C0 <: D \\<and>\n       CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0", "by blast"], ["proof (state)\nthis:\n  \\<exists>D0 C0.\n     CT \\<turnstile> C <: D0 \\<and>\n     CT \\<turnstile> C0 <: D \\<and>\n     CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "case (mb_super CT C CDef m Da xs e)"], ["proof (state)\nthis:\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = Da\n  mbody(CT,m,Da) = xs . e\n  \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D0 C0.\n                       CT \\<turnstile> Da <: D0 \\<and>\n                       CT \\<turnstile> C0 <: D \\<and>\n                       CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                           D0] \\<turnstile> e : C0\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "hence ct: \"CT OK\"\n    and IH: \"\\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk> \n    \\<Longrightarrow> \\<exists>D0 C0. (CT \\<turnstile> Da <: D0) \\<and> (CT \\<turnstile> C0 <: D) \n              \\<and> (CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e:C0)\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = Da\n  mbody(CT,m,Da) = xs . e\n  \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D0 C0.\n                       CT \\<turnstile> Da <: D0 \\<and>\n                       CT \\<turnstile> C0 <: D \\<and>\n                       CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                           D0] \\<turnstile> e : C0\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n\ngoal (1 subgoal):\n 1. CT OK &&&\n    (\\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n     \\<Longrightarrow> \\<exists>D0 C0.\n                          CT \\<turnstile> Da <: D0 \\<and>\n                          CT \\<turnstile> C0 <: D \\<and>\n                          CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                              D0] \\<turnstile> e : C0)", "by fastforce+"], ["proof (state)\nthis:\n  CT OK\n  \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D0 C0.\n                       CT \\<turnstile> Da <: D0 \\<and>\n                       CT \\<turnstile> C0 <: D \\<and>\n                       CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                           D0] \\<turnstile> e : C0\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "from mb_super"], ["proof (chain)\npicking this:\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = Da\n  mbody(CT,m,Da) = xs . e\n  \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D0 C0.\n                       CT \\<turnstile> Da <: D0 \\<and>\n                       CT \\<turnstile> C0 <: D \\<and>\n                       CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                           D0] \\<turnstile> e : C0\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D", "have c_sub_da: \"CT \\<turnstile> C <: Da\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = Da\n  mbody(CT,m,Da) = xs . e\n  \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D0 C0.\n                       CT \\<turnstile> Da <: D0 \\<and>\n                       CT \\<turnstile> C0 <: D \\<and>\n                       CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                           D0] \\<turnstile> e : C0\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> C <: Da", "by (auto simp add:s_super)"], ["proof (state)\nthis:\n  CT \\<turnstile> C <: Da\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "from mb_super"], ["proof (chain)\npicking this:\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = Da\n  mbody(CT,m,Da) = xs . e\n  \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D0 C0.\n                       CT \\<turnstile> Da <: D0 \\<and>\n                       CT \\<turnstile> C0 <: D \\<and>\n                       CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                           D0] \\<turnstile> e : C0\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D", "have mt:\"mtype(CT,m,Da) = Ds \\<rightarrow> D\""], ["proof (prove)\nusing this:\n  CT C = Some CDef\n  lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None\n  cSuper CDef = Da\n  mbody(CT,m,Da) = xs . e\n  \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>D0 C0.\n                       CT \\<turnstile> Da <: D0 \\<and>\n                       CT \\<turnstile> C0 <: D \\<and>\n                       CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                           D0] \\<turnstile> e : C0\n  CT OK\n  mtype(CT,m,C) = Ds \\<rightarrow> D\n\ngoal (1 subgoal):\n 1. mtype(CT,m,Da) = Ds \\<rightarrow> D", "by (auto elim: mtype.cases)"], ["proof (state)\nthis:\n  mtype(CT,m,Da) = Ds \\<rightarrow> D\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "from IH[OF ct mt]"], ["proof (chain)\npicking this:\n  \\<exists>D0 C0.\n     CT \\<turnstile> Da <: D0 \\<and>\n     CT \\<turnstile> C0 <: D \\<and>\n     CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0", "obtain D0 C0 \n    where s1: \"CT \\<turnstile> Da <: D0\" \n    and \"CT \\<turnstile> C0 <: D\" \n    and \"CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0\""], ["proof (prove)\nusing this:\n  \\<exists>D0 C0.\n     CT \\<turnstile> Da <: D0 \\<and>\n     CT \\<turnstile> C0 <: D \\<and>\n     CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0\n\ngoal (1 subgoal):\n 1. (\\<And>D0 C0.\n        \\<lbrakk>CT \\<turnstile> Da <: D0; CT \\<turnstile> C0 <: D;\n         CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n             D0] \\<turnstile> e : C0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT \\<turnstile> Da <: D0\n  CT \\<turnstile> C0 <: D\n  CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0\n\ngoal (1 subgoal):\n 1. \\<And>CT C CDef m Da xs e.\n       \\<lbrakk>CT C = Some CDef;\n        lookup (cMethods CDef) (\\<lambda>md. mName md = m) = None;\n        cSuper CDef = Da; mbody(CT,m,Da) = xs . e;\n        \\<lbrakk>CT OK; mtype(CT,m,Da) = Ds \\<rightarrow> D\\<rbrakk>\n        \\<Longrightarrow> \\<exists>D0 C0.\n                             CT \\<turnstile> Da <: D0 \\<and>\n                             CT \\<turnstile> C0 <: D \\<and>\n                             CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                 D0] \\<turnstile> e : C0;\n        CT OK; mtype(CT,m,C) = Ds \\<rightarrow> D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D0 C0.\n                            CT \\<turnstile> C <: D0 \\<and>\n                            CT \\<turnstile> C0 <: D \\<and>\n                            CT;[xs [\\<mapsto>] Ds, this \\<mapsto>\n                                D0] \\<turnstile> e : C0", "thus ?case"], ["proof (prove)\nusing this:\n  CT \\<turnstile> Da <: D0\n  CT \\<turnstile> C0 <: D\n  CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0\n\ngoal (1 subgoal):\n 1. \\<exists>D0 C0.\n       CT \\<turnstile> C <: D0 \\<and>\n       CT \\<turnstile> C0 <: D \\<and>\n       CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0", "using s_trans[OF c_sub_da s1]"], ["proof (prove)\nusing this:\n  CT \\<turnstile> Da <: D0\n  CT \\<turnstile> C0 <: D\n  CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0\n  CT \\<turnstile> C <: D0\n\ngoal (1 subgoal):\n 1. \\<exists>D0 C0.\n       CT \\<turnstile> C <: D0 \\<and>\n       CT \\<turnstile> C0 <: D \\<and>\n       CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0", "by blast"], ["proof (state)\nthis:\n  \\<exists>D0 C0.\n     CT \\<turnstile> C <: D0 \\<and>\n     CT \\<turnstile> C0 <: D \\<and>\n     CT;[xs [\\<mapsto>] Ds, this \\<mapsto> D0] \\<turnstile> e : C0\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Subject Reduction Theorem\\<close>"], ["", "theorem Thm_2_4_1: \n  assumes \"CT \\<turnstile> e \\<rightarrow> e'\" \n  and \"CT OK\"\n  shows \"\\<And>C. \\<lbrakk> CT;\\<Gamma> \\<turnstile> e : C \\<rbrakk> \n  \\<Longrightarrow> \\<exists>C'. (CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       CT;\\<Gamma> \\<turnstile> e : C \\<Longrightarrow>\n       \\<exists>C'.\n          CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C", "using assms"], ["proof (prove)\nusing this:\n  CT \\<turnstile> e \\<rightarrow> e'\n  CT OK\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       CT;\\<Gamma> \\<turnstile> e : C \\<Longrightarrow>\n       \\<exists>C'.\n          CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C", "proof(induct rule: reduction.induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "case (r_field CT Ca Cf es fi e')"], ["proof (state)\nthis:\n  fields(CT,Ca) = Cf\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'\n  CT;\\<Gamma> \\<turnstile> FieldProj (New Ca es) fi : C\n  CT OK\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "hence \"CT;\\<Gamma> \\<turnstile> FieldProj (New Ca es) fi : C\" \n    and ct_ok: \"CT OK\" \n    and flds: \"fields(CT,Ca) = Cf\" \n    and lkup2: \"lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'\""], ["proof (prove)\nusing this:\n  fields(CT,Ca) = Cf\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'\n  CT;\\<Gamma> \\<turnstile> FieldProj (New Ca es) fi : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (CT;\\<Gamma> \\<turnstile> FieldProj (New Ca es) fi : C &&& CT OK) &&&\n    fields(CT,Ca) = Cf &&&\n    lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'", "by fastforce+"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> FieldProj (New Ca es) fi : C\n  CT OK\n  fields(CT,Ca) = Cf\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "then"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> FieldProj (New Ca es) fi : C\n  CT OK\n  fields(CT,Ca) = Cf\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'", "obtain Ca' Cf' fDef \n    where new_typ: \"CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\" \n    and flds':\"fields(CT,Ca') = Cf'\" \n    and lkup: \"lookup Cf' (\\<lambda>fd. vdName fd = fi) = Some fDef\" \n    and C_def: \"vdType fDef = C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> FieldProj (New Ca es) fi : C\n  CT OK\n  fields(CT,Ca) = Cf\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'\n\ngoal (1 subgoal):\n 1. (\\<And>Ca' Cf' fDef.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> New Ca es : Ca';\n         fields(CT,Ca') = Cf';\n         lookup Cf' (\\<lambda>fd. vdName fd = fi) = Some fDef;\n         vdType fDef = C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: typing.cases)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\n  fields(CT,Ca') = Cf'\n  lookup Cf' (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = C\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "hence Ca_Ca': \"Ca = Ca'\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\n  fields(CT,Ca') = Cf'\n  lookup Cf' (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = C\n\ngoal (1 subgoal):\n 1. Ca = Ca'", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  Ca = Ca'\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with flds'"], ["proof (chain)\npicking this:\n  fields(CT,Ca') = Cf'\n  Ca = Ca'", "have Cf_Cf': \"Cf = Cf'\""], ["proof (prove)\nusing this:\n  fields(CT,Ca') = Cf'\n  Ca = Ca'\n\ngoal (1 subgoal):\n 1. Cf = Cf'", "by(simp add:fields_functional[OF flds ct_ok])"], ["proof (state)\nthis:\n  Cf = Cf'\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from new_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'", "obtain Cs Ds Cf''\n    where \"fields(CT,Ca') = Cf''\" \n    and es_typs: \"CT;\\<Gamma> \\<turnstile>+ es:Cs\"\n    and Ds_def: \"varDefs_types Cf'' = Ds\" \n    and length_Cf_es: \"length Cf'' = length es\" \n    and subs: \"CT \\<turnstile>+ Cs <: Ds\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\n\ngoal (1 subgoal):\n 1. (\\<And>Cf'' Cs Ds.\n        \\<lbrakk>fields(CT,Ca') = Cf''; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n         varDefs_types Cf'' = Ds; length Cf'' = length es;\n         CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:typing.cases)"], ["proof (state)\nthis:\n  fields(CT,Ca') = Cf''\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  varDefs_types Cf'' = Ds\n  length Cf'' = length es\n  CT \\<turnstile>+ Cs <: Ds\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with Ca_Ca'"], ["proof (chain)\npicking this:\n  Ca = Ca'\n  fields(CT,Ca') = Cf''\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  varDefs_types Cf'' = Ds\n  length Cf'' = length es\n  CT \\<turnstile>+ Cs <: Ds", "have  Cf_Cf'': \"Cf = Cf''\""], ["proof (prove)\nusing this:\n  Ca = Ca'\n  fields(CT,Ca') = Cf''\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  varDefs_types Cf'' = Ds\n  length Cf'' = length es\n  CT \\<turnstile>+ Cs <: Ds\n\ngoal (1 subgoal):\n 1. Cf = Cf''", "by(auto simp add:fields_functional[OF flds ct_ok])"], ["proof (state)\nthis:\n  Cf = Cf''\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from length_Cf_es Cf_Cf'' lookup2_index[OF lkup2]"], ["proof (chain)\npicking this:\n  length Cf'' = length es\n  Cf = Cf''\n  length Cf = length es \\<Longrightarrow>\n  \\<exists>i<length es.\n     e' = es ! i \\<and>\n     lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)", "obtain i where \n    i_bound: \"i < length es\" \n    and \"e' = es!i\" \n    and \"lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf!i)\""], ["proof (prove)\nusing this:\n  length Cf'' = length es\n  Cf = Cf''\n  length Cf = length es \\<Longrightarrow>\n  \\<exists>i<length es.\n     e' = es ! i \\<and>\n     lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length es; e' = es ! i;\n         lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < length es\n  e' = es ! i\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  i < length es\n  e' = es ! i\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with C_def Ds_def lkup lkup2"], ["proof (chain)\npicking this:\n  vdType fDef = C\n  varDefs_types Cf'' = Ds\n  lookup Cf' (\\<lambda>fd. vdName fd = fi) = Some fDef\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'\n  i < length es\n  e' = es ! i\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)", "have \"Ds!i = C\""], ["proof (prove)\nusing this:\n  vdType fDef = C\n  varDefs_types Cf'' = Ds\n  lookup Cf' (\\<lambda>fd. vdName fd = fi) = Some fDef\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'\n  i < length es\n  e' = es ! i\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)\n\ngoal (1 subgoal):\n 1. Ds ! i = C", "using Ca_Ca' Cf_Cf' Cf_Cf'' i_bound length_Cf_es flds'"], ["proof (prove)\nusing this:\n  vdType fDef = C\n  varDefs_types Cf'' = Ds\n  lookup Cf' (\\<lambda>fd. vdName fd = fi) = Some fDef\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some e'\n  i < length es\n  e' = es ! i\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)\n  Ca = Ca'\n  Cf = Cf'\n  Cf = Cf''\n  i < length es\n  length Cf'' = length es\n  fields(CT,Ca') = Cf'\n\ngoal (1 subgoal):\n 1. Ds ! i = C", "by (auto simp add:nth_map varDefs_types_def fields_functional[OF flds ct_ok])"], ["proof (state)\nthis:\n  Ds ! i = C\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  Ds ! i = C\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with subs es_typs"], ["proof (chain)\npicking this:\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  Ds ! i = C", "have \n    \"CT;\\<Gamma> \\<turnstile> (es!i):(Cs!i)\" and \"CT \\<turnstile> (Cs!i) <: (Ds!i)\""], ["proof (prove)\nusing this:\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  Ds ! i = C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i &&&\n    CT \\<turnstile> Cs ! i <: Ds ! i", "using i_bound"], ["proof (prove)\nusing this:\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  Ds ! i = C\n  i < length es\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i &&&\n    CT \\<turnstile> Cs ! i <: Ds ! i", "by(auto simp add:typings_index subtypings_index typings_lengths)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i\n  CT \\<turnstile> Cs ! i <: Ds ! i\n\ngoal (8 subgoals):\n 1. \\<And>CT C Cf es fi ei Ca.\n       \\<lbrakk>fields(CT,C) = Cf;\n        lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some ei;\n        CT;\\<Gamma> \\<turnstile> FieldProj (New C es) fi : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> ei : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 7. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 8. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "ultimately"], ["proof (chain)\npicking this:\n  i < length es\n  e' = es ! i\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)\n  Ds ! i = C\n  CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i\n  CT \\<turnstile> Cs ! i <: Ds ! i", "show ?case"], ["proof (prove)\nusing this:\n  i < length es\n  e' = es ! i\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some (Cf ! i)\n  Ds ! i = C\n  CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i\n  CT \\<turnstile> Cs ! i <: Ds ! i\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C", "by auto"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "case(r_invk CT m Ca xs e ds es e')"], ["proof (state)\nthis:\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from r_invk"], ["proof (chain)\npicking this:\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK", "have mb: \"mbody(CT,m,Ca) = xs . e\""], ["proof (prove)\nusing this:\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK\n\ngoal (1 subgoal):\n 1. mbody(CT,m,Ca) = xs . e", "by fastforce"], ["proof (state)\nthis:\n  mbody(CT,m,Ca) = xs . e\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from r_invk"], ["proof (chain)\npicking this:\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK", "obtain Ca' Ds Cs\n    where \"CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\"\n    and \"mtype(CT,m,Ca') = Cs \\<rightarrow> C\" \n    and ds_typs: \"CT;\\<Gamma> \\<turnstile>+ ds : Ds\" \n    and Ds_subs: \"CT \\<turnstile>+ Ds <: Cs\" \n    and l1: \"length ds = length Cs\""], ["proof (prove)\nusing this:\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (\\<And>Ca' Cs Ds.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> New Ca es : Ca';\n         mtype(CT,m,Ca') = Cs \\<rightarrow> C;\n         CT;\\<Gamma> \\<turnstile>+ ds : Ds; CT \\<turnstile>+ Ds <: Cs;\n         length ds = length Cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\n  mtype(CT,m,Ca') = Cs \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ ds : Ds\n  CT \\<turnstile>+ Ds <: Cs\n  length ds = length Cs\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "hence new_typ: \"CT;\\<Gamma> \\<turnstile> New Ca es : Ca\" \n    and mt: \"mtype(CT,m,Ca) = Cs \\<rightarrow> C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\n  mtype(CT,m,Ca') = Cs \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ ds : Ds\n  CT \\<turnstile>+ Ds <: Cs\n  length ds = length Cs\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> New Ca es : Ca &&&\n    mtype(CT,m,Ca) = Cs \\<rightarrow> C", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca\n  mtype(CT,m,Ca) = Cs \\<rightarrow> C\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from ds_typs new_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile>+ ds : Ds\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca", "have \"CT;\\<Gamma> \\<turnstile>+ (ds @[New Ca es]) : (Ds @[Ca])\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ ds : Ds\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile>+ (ds @ [New Ca es]) : (Ds @ [Ca])", "by (simp add:typings_append)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile>+ (ds @ [New Ca es]) : (Ds @ [Ca])\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile>+ (ds @ [New Ca es]) : (Ds @ [Ca])\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from A_1_4[OF _ mb mt] r_invk"], ["proof (chain)\npicking this:\n  CT OK \\<Longrightarrow>\n  \\<exists>D0 C0.\n     CT \\<turnstile> Ca <: D0 \\<and>\n     CT \\<turnstile> C0 <: C \\<and>\n     CT;[xs [\\<mapsto>] Cs, this \\<mapsto> D0] \\<turnstile> e : C0\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK", "obtain Da E  \n    where \"CT \\<turnstile> Ca <: Da\" \n    and E_sub_C: \"CT \\<turnstile> E <: C\" \n    and e0_typ1: \"CT;[xs[\\<mapsto>]Cs,this\\<mapsto>Da] \\<turnstile> e : E\""], ["proof (prove)\nusing this:\n  CT OK \\<Longrightarrow>\n  \\<exists>D0 C0.\n     CT \\<turnstile> Ca <: D0 \\<and>\n     CT \\<turnstile> C0 <: C \\<and>\n     CT;[xs [\\<mapsto>] Cs, this \\<mapsto> D0] \\<turnstile> e : C0\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (\\<And>Da E.\n        \\<lbrakk>CT \\<turnstile> Ca <: Da; CT \\<turnstile> E <: C;\n         CT;[xs [\\<mapsto>] Cs, this \\<mapsto>\n             Da] \\<turnstile> e : E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT \\<turnstile> Ca <: Da\n  CT \\<turnstile> E <: C\n  CT;[xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT \\<turnstile> Ca <: Da\n  CT \\<turnstile> E <: C\n  CT;[xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with Ds_subs"], ["proof (chain)\npicking this:\n  CT \\<turnstile>+ Ds <: Cs\n  CT \\<turnstile> Ca <: Da\n  CT \\<turnstile> E <: C\n  CT;[xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E", "have \"CT \\<turnstile>+ (Ds@[Ca]) <: (Cs@[Da])\""], ["proof (prove)\nusing this:\n  CT \\<turnstile>+ Ds <: Cs\n  CT \\<turnstile> Ca <: Da\n  CT \\<turnstile> E <: C\n  CT;[xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n\ngoal (1 subgoal):\n 1. CT \\<turnstile>+ (Ds @ [Ca]) <: (Cs @ [Da])", "by(auto simp add:subtyping_append)"], ["proof (state)\nthis:\n  CT \\<turnstile>+ (Ds @ [Ca]) <: (Cs @ [Da])\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile>+ (ds @ [New Ca es]) : (Ds @ [Ca])\n  CT \\<turnstile> Ca <: Da\n  CT \\<turnstile> E <: C\n  CT;[xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n  CT \\<turnstile>+ (Ds @ [Ca]) <: (Cs @ [Da])", "have ex: \"\\<exists>As. CT;\\<Gamma> \\<turnstile>+ (ds @[New Ca es]) : As \\<and> CT \\<turnstile>+ As <: (Cs@[Da])\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ (ds @ [New Ca es]) : (Ds @ [Ca])\n  CT \\<turnstile> Ca <: Da\n  CT \\<turnstile> E <: C\n  CT;[xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n  CT \\<turnstile>+ (Ds @ [Ca]) <: (Cs @ [Da])\n\ngoal (1 subgoal):\n 1. \\<exists>As.\n       CT;\\<Gamma> \\<turnstile>+ (ds @ [New Ca es]) : As \\<and>\n       CT \\<turnstile>+ As <: (Cs @ [Da])", "by auto"], ["proof (state)\nthis:\n  \\<exists>As.\n     CT;\\<Gamma> \\<turnstile>+ (ds @ [New Ca es]) : As \\<and>\n     CT \\<turnstile>+ As <: (Cs @ [Da])\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from e0_typ1"], ["proof (chain)\npicking this:\n  CT;[xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E", "have e0_typ2: \"CT;(\\<Gamma> ++ [xs[\\<mapsto>]Cs,this\\<mapsto>Da]) \\<turnstile> e : E\""], ["proof (prove)\nusing this:\n  CT;[xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> ++ [xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E", "by(simp only:A_1_3)"], ["proof (state)\nthis:\n  CT;\\<Gamma> ++ [xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from e0_typ2 mtype_mbody_length[OF mt mb]"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> ++ [xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n  length xs = length Cs", "have e0_typ3: \"CT;(\\<Gamma> ++ [(xs@[this])[\\<mapsto>](Cs@[Da])]) \\<turnstile> e : E\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> ++ [xs [\\<mapsto>] Cs, this \\<mapsto> Da] \\<turnstile> e : E\n  length xs = length Cs\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> ++ [xs @ [this] [\\<mapsto>] Cs @ [Da]] \\<turnstile> e : E", "by(force simp only:map_shuffle)"], ["proof (state)\nthis:\n  CT;\\<Gamma> ++ [xs @ [this] [\\<mapsto>] Cs @ [Da]] \\<turnstile> e : E\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "let ?\\<Gamma>1 = \"\\<Gamma>\" and ?\\<Gamma>2 = \"[(xs@[this])[\\<mapsto>](Cs@[Da])]\""], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "have g_def: \"(?\\<Gamma>1 ++ ?\\<Gamma>2) = (?\\<Gamma>1 ++ ?\\<Gamma>2)\" and g2_def: \"?\\<Gamma>2 = ?\\<Gamma>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> ++ [xs @ [this] [\\<mapsto>] Cs @ [Da]] =\n    \\<Gamma> ++ [xs @ [this] [\\<mapsto>] Cs @ [Da]] &&&\n    [xs @ [this] [\\<mapsto>] Cs @ [Da]] =\n    [xs @ [this] [\\<mapsto>] Cs @ [Da]]", "by auto"], ["proof (state)\nthis:\n  \\<Gamma> ++ [xs @ [this] [\\<mapsto>] Cs @ [Da]] =\n  \\<Gamma> ++ [xs @ [this] [\\<mapsto>] Cs @ [Da]]\n  [xs @ [this] [\\<mapsto>] Cs @ [Da]] = [xs @ [this] [\\<mapsto>] Cs @ [Da]]\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from A_1_2[OF _ g_def g2_def _ _ ex] e0_typ3 r_invk l1 mtype_mbody_length[OF mt mb]"], ["proof (chain)\npicking this:\n  \\<lbrakk>CT OK; length (xs @ [this]) = length (ds @ [New Ca es]);\n   length (Cs @ [Da]) = length (ds @ [New Ca es]);\n   CT;\\<Gamma> ++\n      [xs @ [this] [\\<mapsto>] Cs @ [Da]] \\<turnstile>+ ?es : ?Ds\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Cs.\n                       CT;\\<Gamma> \\<turnstile>+ map\n            (substs_syn (ds @ [New Ca es]) (xs @ [this])) ?es : Cs \\<and>\n                       CT \\<turnstile>+ Cs <: ?Ds\n  \\<lbrakk>CT OK; length (xs @ [this]) = length (ds @ [New Ca es]);\n   length (Cs @ [Da]) = length (ds @ [New Ca es]);\n   CT;\\<Gamma> ++\n      [xs @ [this] [\\<mapsto>] Cs @ [Da]] \\<turnstile> ?e : ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C.\n                       CT;\\<Gamma> \\<turnstile> ((ds @\n            [New Ca es])/(xs @ [this]))?e : C \\<and>\n                       CT \\<turnstile> C <: ?D\n  CT;\\<Gamma> ++ [xs @ [this] [\\<mapsto>] Cs @ [Da]] \\<turnstile> e : E\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK\n  length ds = length Cs\n  length xs = length Cs", "obtain E' where e'_typ: \"CT;\\<Gamma> \\<turnstile> substs [(xs@[this])[\\<mapsto>](ds@[New Ca es])] e : E'\" \n    and E'_sub_E: \"CT \\<turnstile> E' <: E\""], ["proof (prove)\nusing this:\n  \\<lbrakk>CT OK; length (xs @ [this]) = length (ds @ [New Ca es]);\n   length (Cs @ [Da]) = length (ds @ [New Ca es]);\n   CT;\\<Gamma> ++\n      [xs @ [this] [\\<mapsto>] Cs @ [Da]] \\<turnstile>+ ?es : ?Ds\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Cs.\n                       CT;\\<Gamma> \\<turnstile>+ map\n            (substs_syn (ds @ [New Ca es]) (xs @ [this])) ?es : Cs \\<and>\n                       CT \\<turnstile>+ Cs <: ?Ds\n  \\<lbrakk>CT OK; length (xs @ [this]) = length (ds @ [New Ca es]);\n   length (Cs @ [Da]) = length (ds @ [New Ca es]);\n   CT;\\<Gamma> ++\n      [xs @ [this] [\\<mapsto>] Cs @ [Da]] \\<turnstile> ?e : ?D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C.\n                       CT;\\<Gamma> \\<turnstile> ((ds @\n            [New Ca es])/(xs @ [this]))?e : C \\<and>\n                       CT \\<turnstile> C <: ?D\n  CT;\\<Gamma> ++ [xs @ [this] [\\<mapsto>] Cs @ [Da]] \\<turnstile> e : E\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK\n  length ds = length Cs\n  length xs = length Cs\n\ngoal (1 subgoal):\n 1. (\\<And>E'.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> ((ds @\n      [New Ca es])/(xs @ [this]))e : E';\n         CT \\<turnstile> E' <: E\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> ((ds @ [New Ca es])/(xs @ [this]))e : E'\n  CT \\<turnstile> E' <: E\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> ((ds @ [New Ca es])/(xs @ [this]))e : E'\n  CT \\<turnstile> E' <: E\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from e'_typ l1 mtype_mbody_length[OF mt mb]"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> ((ds @ [New Ca es])/(xs @ [this]))e : E'\n  length ds = length Cs\n  length xs = length Cs", "have \"CT;\\<Gamma> \\<turnstile> substs [xs[\\<mapsto>]ds,this\\<mapsto>(New Ca es)] e : E'\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> ((ds @ [New Ca es])/(xs @ [this]))e : E'\n  length ds = length Cs\n  length xs = length Cs\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> substs\n                              [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es]\n                              e : E'", "by(auto simp only:map_shuffle)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> substs\n                            [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es]\n                            e : E'\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> substs\n                            [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es]\n                            e : E'\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from E'_sub_E E_sub_C"], ["proof (chain)\npicking this:\n  CT \\<turnstile> E' <: E\n  CT \\<turnstile> E <: C", "have \"CT \\<turnstile> E' <: C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> E' <: E\n  CT \\<turnstile> E <: C\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> E' <: C", "by (rule subtyping.s_trans)"], ["proof (state)\nthis:\n  CT \\<turnstile> E' <: C\n\ngoal (7 subgoals):\n 1. \\<And>CT m C xs e0 ds es e0' Ca.\n       \\<lbrakk>mbody(CT,m,C) = xs . e0;\n        substs [xs [\\<mapsto>] ds, this \\<mapsto> New C es] e0 = e0';\n        CT;\\<Gamma> \\<turnstile> MethodInvk (New C es) m ds : Ca;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 6. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 7. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> ((ds @ [New Ca es])/(xs @ [this]))e : E'\n  CT \\<turnstile> E' <: E\n  CT;\\<Gamma> \\<turnstile> substs\n                            [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es]\n                            e : E'\n  CT \\<turnstile> E' <: C", "show ?case"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> ((ds @ [New Ca es])/(xs @ [this]))e : E'\n  CT \\<turnstile> E' <: E\n  CT;\\<Gamma> \\<turnstile> substs\n                            [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es]\n                            e : E'\n  CT \\<turnstile> E' <: C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C", "using r_invk"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> ((ds @ [New Ca es])/(xs @ [this]))e : E'\n  CT \\<turnstile> E' <: E\n  CT;\\<Gamma> \\<turnstile> substs\n                            [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es]\n                            e : E'\n  CT \\<turnstile> E' <: C\n  mbody(CT,m,Ca) = xs . e\n  substs [xs [\\<mapsto>] ds, this \\<mapsto> New Ca es] e = e'\n  CT;\\<Gamma> \\<turnstile> MethodInvk (New Ca es) m ds : C\n  CT OK\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C", "by auto"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C\n\ngoal (6 subgoals):\n 1. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 6. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 6. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "case (r_cast CT Ca D es)"], ["proof (state)\nthis:\n  CT \\<turnstile> Ca <: D\n  CT;\\<Gamma> \\<turnstile> Cast D (New Ca es) : C\n  CT OK\n\ngoal (6 subgoals):\n 1. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 6. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "then"], ["proof (chain)\npicking this:\n  CT \\<turnstile> Ca <: D\n  CT;\\<Gamma> \\<turnstile> Cast D (New Ca es) : C\n  CT OK", "obtain Ca' \n    where \"C = D\" \n    and \"CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> Ca <: D\n  CT;\\<Gamma> \\<turnstile> Cast D (New Ca es) : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (\\<And>Ca'.\n        \\<lbrakk>C = D; CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: typing.cases)"], ["proof (state)\nthis:\n  C = D\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\n\ngoal (6 subgoals):\n 1. \\<And>CT C D es Ca.\n       \\<lbrakk>CT \\<turnstile> C <: D;\n        CT;\\<Gamma> \\<turnstile> Cast D (New C es) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C es : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 5. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 6. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "thus ?case"], ["proof (prove)\nusing this:\n  C = D\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> New Ca es : C' \\<and>\n       CT \\<turnstile> C' <: C", "using r_cast"], ["proof (prove)\nusing this:\n  C = D\n  CT;\\<Gamma> \\<turnstile> New Ca es : Ca'\n  CT \\<turnstile> Ca <: D\n  CT;\\<Gamma> \\<turnstile> Cast D (New Ca es) : C\n  CT OK\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> New Ca es : C' \\<and>\n       CT \\<turnstile> C' <: C", "by (auto elim: typing.cases)"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> New Ca es : C' \\<and> CT \\<turnstile> C' <: C\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "case (rc_field CT e0 e0' f)"], ["proof (state)\nthis:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C\n  CT OK\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "then"], ["proof (chain)\npicking this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C\n  CT OK", "obtain C0 Cf fd where \"CT;\\<Gamma> \\<turnstile> e0 : C0\" \n    and Cf_def: \"fields(CT,C0) = Cf\" \n    and fd_def:\"lookup Cf (\\<lambda>fd. (vdName fd = f))  = Some fd\"\n    and \"vdType fd = C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (\\<And>C0 Cf fd.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0; fields(CT,C0) = Cf;\n         lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd;\n         vdType fd = C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd\n  vdType fd = C\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd\n  vdType fd = C\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with rc_field"], ["proof (chain)\npicking this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd\n  vdType fd = C", "obtain C' \n    where \"CT;\\<Gamma> \\<turnstile> e0' : C'\" \n    and \"CT \\<turnstile> C' <: C0\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd\n  vdType fd = C\n\ngoal (1 subgoal):\n 1. (\\<And>C'.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0' : C';\n         CT \\<turnstile> C' <: C0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0' : C'\n  CT \\<turnstile> C' <: C0\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0' : C'\n  CT \\<turnstile> C' <: C0\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from sub_fields[OF _ Cf_def]"], ["proof (chain)\npicking this:\n  CT \\<turnstile> ?C <: C0 \\<Longrightarrow>\n  \\<exists>Cfa. fields(CT,?C) = (Cf @ Cfa)", "obtain Cf'\n    where \"fields(CT,C') = (Cf@Cf')\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> ?C <: C0 \\<Longrightarrow>\n  \\<exists>Cfa. fields(CT,?C) = (Cf @ Cfa)\n\ngoal (1 subgoal):\n 1. (\\<And>Cf'.\n        fields(CT,C') = (Cf @ Cf') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by rule (rule \\<open>CT \\<turnstile> C' <: C0\\<close>)"], ["proof (state)\nthis:\n  fields(CT,C') = (Cf @ Cf')\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  fields(CT,C') = (Cf @ Cf')\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with fd_def"], ["proof (chain)\npicking this:\n  lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd\n  fields(CT,C') = (Cf @ Cf')", "have \"lookup (Cf@Cf') (\\<lambda>fd. (vdName fd = f)) = Some fd\""], ["proof (prove)\nusing this:\n  lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd\n  fields(CT,C') = (Cf @ Cf')\n\ngoal (1 subgoal):\n 1. lookup (Cf @ Cf') (\\<lambda>fd. vdName fd = f) = Some fd", "by(simp add:lookup_append)"], ["proof (state)\nthis:\n  lookup (Cf @ Cf') (\\<lambda>fd. vdName fd = f) = Some fd\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd\n  vdType fd = C\n  CT;\\<Gamma> \\<turnstile> e0' : C'\n  CT \\<turnstile> C' <: C0\n  fields(CT,C') = (Cf @ Cf')\n  lookup (Cf @ Cf') (\\<lambda>fd. vdName fd = f) = Some fd", "have \"CT;\\<Gamma> \\<turnstile> FieldProj e0' f : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = f) = Some fd\n  vdType fd = C\n  CT;\\<Gamma> \\<turnstile> e0' : C'\n  CT \\<turnstile> C' <: C0\n  fields(CT,C') = (Cf @ Cf')\n  lookup (Cf @ Cf') (\\<lambda>fd. vdName fd = f) = Some fd\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> FieldProj e0' f : C", "by(auto simp add:typings_typing.t_field)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> FieldProj e0' f : C\n\ngoal (5 subgoals):\n 1. \\<And>CT e0 e0' f C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> FieldProj e0 f : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> FieldProj e0'\n                f : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 4. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 5. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "thus ?case"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> FieldProj e0' f : C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> FieldProj e0' f : C' \\<and>\n       CT \\<turnstile> C' <: C", "by (auto simp add:subtyping.s_refl)"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> FieldProj e0' f : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "case (rc_invk_recv CT e0 e0' m es C)"], ["proof (state)\nthis:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C\n  CT OK\n\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "then"], ["proof (chain)\npicking this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C\n  CT OK", "obtain C0 Ds Cs\n    where ct_ok:\"CT OK\" \n    and \"CT;\\<Gamma> \\<turnstile> e0 : C0\" \n    and mt:\"mtype(CT,m,C0) = Ds \\<rightarrow> C\" \n    and \"CT;\\<Gamma> \\<turnstile>+ es : Cs\"\n    and \"length es = length Ds\"\n    and \"CT \\<turnstile>+ Cs <: Ds\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (\\<And>C0 Ds Cs.\n        \\<lbrakk>CT OK; CT;\\<Gamma> \\<turnstile> e0 : C0;\n         mtype(CT,m,C0) = Ds \\<rightarrow> C;\n         CT;\\<Gamma> \\<turnstile>+ es : Cs; length es = length Ds;\n         CT \\<turnstile>+ Cs <: Ds\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  length es = length Ds\n  CT \\<turnstile>+ Cs <: Ds\n\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  length es = length Ds\n  CT \\<turnstile>+ Cs <: Ds\n\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with rc_invk_recv"], ["proof (chain)\npicking this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C\n  CT OK\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  length es = length Ds\n  CT \\<turnstile>+ Cs <: Ds", "obtain C0' \n    where \"CT;\\<Gamma> \\<turnstile> e0' : C0'\" \n    and \"CT \\<turnstile> C0' <: C0\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C\n  CT OK\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  length es = length Ds\n  CT \\<turnstile>+ Cs <: Ds\n\ngoal (1 subgoal):\n 1. (\\<And>C0'.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0' : C0';\n         CT \\<turnstile> C0' <: C0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0' : C0'\n  CT \\<turnstile> C0' <: C0\n\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0' : C0'\n  CT \\<turnstile> C0' <: C0\n\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with A_1_1[OF _ ct_ok mt]"], ["proof (chain)\npicking this:\n  CT \\<turnstile> ?C <: C0 \\<Longrightarrow>\n  mtype(CT,m,?C) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile> e0' : C0'\n  CT \\<turnstile> C0' <: C0", "have \"mtype(CT,m,C0') = Ds \\<rightarrow> C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> ?C <: C0 \\<Longrightarrow>\n  mtype(CT,m,?C) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile> e0' : C0'\n  CT \\<turnstile> C0' <: C0\n\ngoal (1 subgoal):\n 1. mtype(CT,m,C0') = Ds \\<rightarrow> C", "by simp"], ["proof (state)\nthis:\n  mtype(CT,m,C0') = Ds \\<rightarrow> C\n\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "ultimately"], ["proof (chain)\npicking this:\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  length es = length Ds\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile> e0' : C0'\n  CT \\<turnstile> C0' <: C0\n  mtype(CT,m,C0') = Ds \\<rightarrow> C", "have \"CT;\\<Gamma> \\<turnstile> MethodInvk e0' m es : C\""], ["proof (prove)\nusing this:\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  length es = length Ds\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile> e0' : C0'\n  CT \\<turnstile> C0' <: C0\n  mtype(CT,m,C0') = Ds \\<rightarrow> C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> MethodInvk e0' m es : C", "by(auto simp add:typings_typing.t_invk)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0' m es : C\n\ngoal (4 subgoals):\n 1. \\<And>CT e0 e0' m es C.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0' m\n                es : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 3. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 4. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "thus ?case"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0' m es : C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> MethodInvk e0' m es : C' \\<and>\n       CT \\<turnstile> C' <: C", "by (auto simp add:subtyping.s_refl)"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> MethodInvk e0' m es : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "case (rc_invk_arg CT ei ei' e0 m el er C)"], ["proof (state)\nthis:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C\n  CT OK\n\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "then"], ["proof (chain)\npicking this:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C\n  CT OK", "obtain Cs Ds C0\n    where typs: \"CT;\\<Gamma> \\<turnstile>+ (el@(ei#er)) : Cs\"\n    and e0_typ: \"CT;\\<Gamma> \\<turnstile> e0 : C0\"\n    and mt: \"mtype(CT,m,C0) = Ds \\<rightarrow> C\"\n    and Cs_sub_Ds: \"CT \\<turnstile>+ Cs <: Ds\"\n    and len: \"length (el@(ei#er)) = length Ds\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (\\<And>Cs C0 Ds.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile>+ (el @ ei # er) : Cs;\n         CT;\\<Gamma> \\<turnstile> e0 : C0;\n         mtype(CT,m,C0) = Ds \\<rightarrow> C; CT \\<turnstile>+ Cs <: Ds;\n         length (el @ ei # er) = length Ds\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei # er) : Cs\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT \\<turnstile>+ Cs <: Ds\n  length (el @ ei # er) = length Ds\n\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "hence \"CT;\\<Gamma> \\<turnstile> ei:(Cs!(length el))\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei # er) : Cs\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT \\<turnstile>+ Cs <: Ds\n  length (el @ ei # er) = length Ds\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> ei : Cs ! length el", "by (simp add:ith_typing)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> ei : Cs ! length el\n\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with rc_invk_arg"], ["proof (chain)\npicking this:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C\n  CT OK\n  CT;\\<Gamma> \\<turnstile> ei : Cs ! length el", "obtain Ci' \n    where ei_typ: \"CT;\\<Gamma> \\<turnstile> ei':Ci'\"\n    and Ci_sub: \"CT \\<turnstile> Ci' <: (Cs!(length el))\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C\n  CT OK\n  CT;\\<Gamma> \\<turnstile> ei : Cs ! length el\n\ngoal (1 subgoal):\n 1. (\\<And>Ci'.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei' : Ci';\n         CT \\<turnstile> Ci' <: Cs ! length el\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> ei' : Ci'\n  CT \\<turnstile> Ci' <: Cs ! length el\n\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from ith_typing_sub[OF typs ei_typ Ci_sub]"], ["proof (chain)\npicking this:\n  \\<exists>Cs'.\n     CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs' \\<and>\n     CT \\<turnstile>+ Cs' <: Cs", "obtain Cs'\n    where es'_typs: \"CT;\\<Gamma> \\<turnstile>+ (el@(ei'#er)) : Cs'\"\n    and Cs'_sub_Cs: \"CT \\<turnstile>+ Cs' <: Cs\""], ["proof (prove)\nusing this:\n  \\<exists>Cs'.\n     CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs' \\<and>\n     CT \\<turnstile>+ Cs' <: Cs\n\ngoal (1 subgoal):\n 1. (\\<And>Cs'.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs';\n         CT \\<turnstile>+ Cs' <: Cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs'\n  CT \\<turnstile>+ Cs' <: Cs\n\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from len"], ["proof (chain)\npicking this:\n  length (el @ ei # er) = length Ds", "have \"length (el@(ei'#er)) = length Ds\""], ["proof (prove)\nusing this:\n  length (el @ ei # er) = length Ds\n\ngoal (1 subgoal):\n 1. length (el @ ei' # er) = length Ds", "by simp"], ["proof (state)\nthis:\n  length (el @ ei' # er) = length Ds\n\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with es'_typs subtypings_trans[OF Cs'_sub_Cs Cs_sub_Ds]  e0_typ mt"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs'\n  CT \\<turnstile>+ Cs' <: Ds\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  length (el @ ei' # er) = length Ds", "have\n    \"CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el@(ei'#er)) : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs'\n  CT \\<turnstile>+ Cs' <: Ds\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  length (el @ ei' # er) = length Ds\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei' # er) : C", "by(auto simp add:typings_typing.t_invk)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei' # er) : C\n\ngoal (3 subgoals):\n 1. \\<And>CT ei ei' e0 m el er C.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei # er) : C;\n        CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> MethodInvk e0 m\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 3. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "thus ?case"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei' # er) : C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei' # er) : C' \\<and>\n       CT \\<turnstile> C' <: C", "by (auto simp add:subtyping.s_refl)"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> MethodInvk e0 m (el @ ei' # er) : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "case (rc_new_arg CT ei ei' Ca el er C)"], ["proof (state)\nthis:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> New Ca (el @ ei # er) : C\n  CT OK\n\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "then"], ["proof (chain)\npicking this:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> New Ca (el @ ei # er) : C\n  CT OK", "obtain Cs Df Ds \n    where typs: \"CT;\\<Gamma> \\<turnstile>+ (el@(ei#er)) : Cs\"\n    and flds: \"fields(CT,C) = Df\"\n    and len: \"length (el@(ei#er)) = length Df\"\n    and Ds_def: \"varDefs_types Df = Ds\"\n    and Cs_sub_Ds: \"CT \\<turnstile>+ Cs <: Ds\"\n    and C_def: \"Ca = C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> New Ca (el @ ei # er) : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (\\<And>Cs Df Ds.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile>+ (el @ ei # er) : Cs;\n         fields(CT,C) = Df; length (el @ ei # er) = length Df;\n         varDefs_types Df = Ds; CT \\<turnstile>+ Cs <: Ds; Ca = C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei # er) : Cs\n  fields(CT,C) = Df\n  length (el @ ei # er) = length Df\n  varDefs_types Df = Ds\n  CT \\<turnstile>+ Cs <: Ds\n  Ca = C\n\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "hence \"CT;\\<Gamma> \\<turnstile> ei:(Cs!(length el))\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei # er) : Cs\n  fields(CT,C) = Df\n  length (el @ ei # er) = length Df\n  varDefs_types Df = Ds\n  CT \\<turnstile>+ Cs <: Ds\n  Ca = C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> ei : Cs ! length el", "by (simp add:ith_typing)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> ei : Cs ! length el\n\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with rc_new_arg"], ["proof (chain)\npicking this:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> New Ca (el @ ei # er) : C\n  CT OK\n  CT;\\<Gamma> \\<turnstile> ei : Cs ! length el", "obtain Ci' \n    where ei_typ: \"CT;\\<Gamma> \\<turnstile> ei':Ci'\"\n    and Ci_sub: \"CT \\<turnstile> Ci' <: (Cs!(length el))\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> ei \\<rightarrow> ei'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> New Ca (el @ ei # er) : C\n  CT OK\n  CT;\\<Gamma> \\<turnstile> ei : Cs ! length el\n\ngoal (1 subgoal):\n 1. (\\<And>Ci'.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei' : Ci';\n         CT \\<turnstile> Ci' <: Cs ! length el\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> ei' : Ci'\n  CT \\<turnstile> Ci' <: Cs ! length el\n\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from ith_typing_sub[OF typs ei_typ Ci_sub]"], ["proof (chain)\npicking this:\n  \\<exists>Cs'.\n     CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs' \\<and>\n     CT \\<turnstile>+ Cs' <: Cs", "obtain Cs'\n    where es'_typs: \"CT;\\<Gamma> \\<turnstile>+ (el@(ei'#er)) : Cs'\"\n    and Cs'_sub_Cs: \"CT \\<turnstile>+ Cs' <: Cs\""], ["proof (prove)\nusing this:\n  \\<exists>Cs'.\n     CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs' \\<and>\n     CT \\<turnstile>+ Cs' <: Cs\n\ngoal (1 subgoal):\n 1. (\\<And>Cs'.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs';\n         CT \\<turnstile>+ Cs' <: Cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs'\n  CT \\<turnstile>+ Cs' <: Cs\n\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "from len"], ["proof (chain)\npicking this:\n  length (el @ ei # er) = length Df", "have \"length (el@(ei'#er)) = length Df\""], ["proof (prove)\nusing this:\n  length (el @ ei # er) = length Df\n\ngoal (1 subgoal):\n 1. length (el @ ei' # er) = length Df", "by simp"], ["proof (state)\nthis:\n  length (el @ ei' # er) = length Df\n\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with es'_typs subtypings_trans[OF Cs'_sub_Cs Cs_sub_Ds] flds Ds_def C_def"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs'\n  CT \\<turnstile>+ Cs' <: Ds\n  fields(CT,C) = Df\n  varDefs_types Df = Ds\n  Ca = C\n  length (el @ ei' # er) = length Df", "have\n    \"CT;\\<Gamma> \\<turnstile> New Ca (el@(ei'#er)) : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ (el @ ei' # er) : Cs'\n  CT \\<turnstile>+ Cs' <: Ds\n  fields(CT,C) = Df\n  varDefs_types Df = Ds\n  Ca = C\n  length (el @ ei' # er) = length Df\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> New Ca (el @ ei' # er) : C", "by(auto simp add:typings_typing.t_new)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> New Ca (el @ ei' # er) : C\n\ngoal (2 subgoals):\n 1. \\<And>CT ei ei' C el er Ca.\n       \\<lbrakk>CT \\<turnstile> ei \\<rightarrow> ei';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> ei : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> ei' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> New C (el @ ei # er) : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> New C\n                (el @ ei' # er) : C' \\<and>\n                            CT \\<turnstile> C' <: Ca\n 2. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "thus ?case"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> New Ca (el @ ei' # er) : C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> New Ca (el @ ei' # er) : C' \\<and>\n       CT \\<turnstile> C' <: C", "by (auto simp add:subtyping.s_refl)"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> New Ca (el @ ei' # er) : C' \\<and>\n     CT \\<turnstile> C' <: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "case (rc_cast CT e0 e0' C Ca)"], ["proof (state)\nthis:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca\n  CT OK\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "then"], ["proof (chain)\npicking this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca\n  CT OK", "obtain D \n    where \"CT;\\<Gamma> \\<turnstile> e0 : D\"\n    and Ca_def: \"Ca = C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca\n  CT OK\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; Ca = C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  Ca = C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with rc_cast"], ["proof (chain)\npicking this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  Ca = C", "obtain D' \n    where e0'_typ: \"CT;\\<Gamma> \\<turnstile> e0':D'\" and \"CT \\<turnstile> D' <: D\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> e0 \\<rightarrow> e0'\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca\n  CT OK\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  Ca = C\n\ngoal (1 subgoal):\n 1. (\\<And>D'.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0' : D';\n         CT \\<turnstile> D' <: D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0' : D'\n  CT \\<turnstile> D' <: D\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "have \"(CT \\<turnstile> D' <: C)  \\<or> \n    (C \\<noteq> D' \\<and> CT \\<turnstile> C <: D') \\<or> \n    (CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT \\<turnstile> D' <: C \\<or>\n    C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<or>\n    CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C", "by blast"], ["proof (state)\nthis:\n  CT \\<turnstile> D' <: C \\<or>\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<or>\n  CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT \\<turnstile> D' <: C \\<or>\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<or>\n  CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "{"], ["proof (state)\nthis:\n  CT \\<turnstile> D' <: C \\<or>\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<or>\n  CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "assume \"CT \\<turnstile> D' <: C\""], ["proof (state)\nthis:\n  CT \\<turnstile> D' <: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with e0'_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0' : D'\n  CT \\<turnstile> D' <: C", "have \"CT;\\<Gamma> \\<turnstile> Cast C e0' : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0' : D'\n  CT \\<turnstile> D' <: C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> Cast C e0' : C", "by (auto simp add: typings_typing.t_ucast)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "}"], ["proof (state)\nthis:\n  CT \\<turnstile> D' <: C \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  CT \\<turnstile> D' <: C \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "{"], ["proof (state)\nthis:\n  CT \\<turnstile> D' <: C \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "assume \"(C \\<noteq> D' \\<and> CT \\<turnstile> C <: D')\""], ["proof (state)\nthis:\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D'\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with e0'_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0' : D'\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D'", "have \"CT;\\<Gamma> \\<turnstile> Cast C e0' : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0' : D'\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D'\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> Cast C e0' : C", "by (auto simp add: typings_typing.t_dcast)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "}"], ["proof (state)\nthis:\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "moreover"], ["proof (state)\nthis:\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "{"], ["proof (state)\nthis:\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "assume \"(CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C)\""], ["proof (state)\nthis:\n  CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "with e0'_typ"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0' : D'\n  CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C", "have \"CT;\\<Gamma> \\<turnstile> Cast C e0' : C\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0' : D'\n  CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> Cast C e0' : C", "by (auto simp add: typings_typing.t_scast)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "}"], ["proof (state)\nthis:\n  CT \\<turnstile> C \\<not><: D' \\<and>\n  CT \\<turnstile> D' \\<not><: C \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "ultimately"], ["proof (chain)\npicking this:\n  CT \\<turnstile> D' <: C \\<or>\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<or>\n  CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C\n  CT \\<turnstile> D' <: C \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n  CT \\<turnstile> C \\<not><: D' \\<and>\n  CT \\<turnstile> D' \\<not><: C \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C", "have \"CT;\\<Gamma> \\<turnstile> Cast C e0' : C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> D' <: C \\<or>\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<or>\n  CT \\<turnstile> C \\<not><: D' \\<and> CT \\<turnstile> D' \\<not><: C\n  CT \\<turnstile> D' <: C \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n  C \\<noteq> D' \\<and> CT \\<turnstile> C <: D' \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n  CT \\<turnstile> C \\<not><: D' \\<and>\n  CT \\<turnstile> D' \\<not><: C \\<Longrightarrow>\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> Cast C e0' : C", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<And>CT e0 e0' C Ca.\n       \\<lbrakk>CT \\<turnstile> e0 \\<rightarrow> e0';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e0' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : Ca; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n                            CT \\<turnstile> C' <: Ca", "thus ?case"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n       CT \\<turnstile> C' <: Ca", "using Ca_def"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> Cast C e0' : C\n  Ca = C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n       CT \\<turnstile> C' <: Ca", "by (auto simp add:subtyping.s_refl)"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> Cast C e0' : C' \\<and>\n     CT \\<turnstile> C' <: Ca\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Multi-Step Subject Reduction Theorem\\<close>"], ["", "corollary Cor_2_4_1_multi:\n  assumes \"CT \\<turnstile> e \\<rightarrow>* e'\" \n  and \"CT OK\"\n  shows \"\\<And>C. \\<lbrakk> CT;\\<Gamma> \\<turnstile> e : C \\<rbrakk> \\<Longrightarrow> \\<exists>C'. (CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       CT;\\<Gamma> \\<turnstile> e : C \\<Longrightarrow>\n       \\<exists>C'.\n          CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C", "using assms"], ["proof (prove)\nusing this:\n  CT \\<turnstile> e \\<rightarrow>* e'\n  CT OK\n\ngoal (1 subgoal):\n 1. \\<And>C.\n       CT;\\<Gamma> \\<turnstile> e : C \\<Longrightarrow>\n       \\<exists>C'.\n          CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>CT e C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "case (rs_refl CT e C)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e : C\n  CT OK\n\ngoal (2 subgoals):\n 1. \\<And>CT e C.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e : C' \\<and>\n                            CT \\<turnstile> C' <: C\n 2. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "thus ?case"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e : C\n  CT OK\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> e : C' \\<and> CT \\<turnstile> C' <: C", "by (auto simp add:subtyping.s_refl)"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> e : C' \\<and> CT \\<turnstile> C' <: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "case(rs_trans CT e e' e'' C)"], ["proof (state)\nthis:\n  CT \\<turnstile> e \\<rightarrow> e'\n  CT \\<turnstile> e' \\<rightarrow>* e''\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> e : C\n  CT OK\n\ngoal (1 subgoal):\n 1. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "hence e_typ: \"CT;\\<Gamma> \\<turnstile> e : C\" \n    and e_step: \"CT \\<turnstile> e \\<rightarrow> e'\" \n    and ct_ok: \"CT OK\" \n    and IH: \"\\<And>D. \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : D; CT OK\\<rbrakk> \\<Longrightarrow> \\<exists>E. CT;\\<Gamma> \\<turnstile> e'' : E \\<and> CT \\<turnstile> E <: D\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> e \\<rightarrow> e'\n  CT \\<turnstile> e' \\<rightarrow>* e''\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : ?C; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C'.\n                       CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                       CT \\<turnstile> C' <: ?C\n  CT;\\<Gamma> \\<turnstile> e : C\n  CT OK\n\ngoal (1 subgoal):\n 1. (CT;\\<Gamma> \\<turnstile> e : C &&&\n     CT \\<turnstile> e \\<rightarrow> e') &&&\n    CT OK &&&\n    (\\<And>D.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : D; CT OK\\<rbrakk>\n        \\<Longrightarrow> \\<exists>E.\n                             CT;\\<Gamma> \\<turnstile> e'' : E \\<and>\n                             CT \\<turnstile> E <: D)", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e : C\n  CT \\<turnstile> e \\<rightarrow> e'\n  CT OK\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : ?D; CT OK\\<rbrakk>\n  \\<Longrightarrow> \\<exists>E.\n                       CT;\\<Gamma> \\<turnstile> e'' : E \\<and>\n                       CT \\<turnstile> E <: ?D\n\ngoal (1 subgoal):\n 1. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "from Thm_2_4_1[OF e_step ct_ok e_typ]"], ["proof (chain)\npicking this:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C", "obtain D where e'_typ: \"CT;\\<Gamma> \\<turnstile> e' : D\" and D_sub_C: \"CT \\<turnstile> D <: C\""], ["proof (prove)\nusing this:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> e' : C' \\<and> CT \\<turnstile> C' <: C\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : D;\n         CT \\<turnstile> D <: C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e' : D\n  CT \\<turnstile> D <: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "with IH[OF e'_typ ct_ok]"], ["proof (chain)\npicking this:\n  \\<exists>E. CT;\\<Gamma> \\<turnstile> e'' : E \\<and> CT \\<turnstile> E <: D\n  CT;\\<Gamma> \\<turnstile> e' : D\n  CT \\<turnstile> D <: C", "obtain E where \"CT;\\<Gamma> \\<turnstile> e'': E\" and E_sub_D: \"CT \\<turnstile> E <: D\""], ["proof (prove)\nusing this:\n  \\<exists>E. CT;\\<Gamma> \\<turnstile> e'' : E \\<and> CT \\<turnstile> E <: D\n  CT;\\<Gamma> \\<turnstile> e' : D\n  CT \\<turnstile> D <: C\n\ngoal (1 subgoal):\n 1. (\\<And>E.\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e'' : E;\n         CT \\<turnstile> E <: D\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e'' : E\n  CT \\<turnstile> E <: D\n\ngoal (1 subgoal):\n 1. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "moreover"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e'' : E\n  CT \\<turnstile> E <: D\n\ngoal (1 subgoal):\n 1. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "from s_trans[OF E_sub_D D_sub_C]"], ["proof (chain)\npicking this:\n  CT \\<turnstile> E <: C", "have \"CT \\<turnstile> E <: C\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> E <: C\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> E <: C", "by auto"], ["proof (state)\nthis:\n  CT \\<turnstile> E <: C\n\ngoal (1 subgoal):\n 1. \\<And>CT e e' e'' C.\n       \\<lbrakk>CT \\<turnstile> e \\<rightarrow> e';\n        CT \\<turnstile> e' \\<rightarrow>* e'';\n        \\<And>C.\n           \\<lbrakk>CT;\\<Gamma> \\<turnstile> e' : C; CT OK\\<rbrakk>\n           \\<Longrightarrow> \\<exists>C'.\n                                CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                                CT \\<turnstile> C' <: C;\n        CT;\\<Gamma> \\<turnstile> e : C; CT OK\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C'.\n                            CT;\\<Gamma> \\<turnstile> e'' : C' \\<and>\n                            CT \\<turnstile> C' <: C", "ultimately"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e'' : E\n  CT \\<turnstile> E <: D\n  CT \\<turnstile> E <: C", "show ?case"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e'' : E\n  CT \\<turnstile> E <: D\n  CT \\<turnstile> E <: C\n\ngoal (1 subgoal):\n 1. \\<exists>C'.\n       CT;\\<Gamma> \\<turnstile> e'' : C' \\<and> CT \\<turnstile> C' <: C", "by auto"], ["proof (state)\nthis:\n  \\<exists>C'.\n     CT;\\<Gamma> \\<turnstile> e'' : C' \\<and> CT \\<turnstile> C' <: C\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Progress\\<close>"], ["", "text \\<open>The two \"progress lemmas\" proved in the TOPLAS paper alone are\nnot quite enough to prove type soundness. We prove an additional lemma\nshowing that every well-typed expression is either a value or contains\na potential redex as a sub-expression.\\<close>"], ["", "theorem Thm_2_4_2_1: \n  assumes \"CT;Map.empty \\<turnstile> e : C\"\n  and \"FieldProj (New C0 es) fi \\<in> subexprs(e)\"\n  shows \"\\<exists>Cf fDef. fields(CT, C0) = Cf \\<and> lookup Cf (\\<lambda>fd. (vdName fd = fi)) = Some fDef\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Cf fDef.\n       fields(CT,C0) = Cf \\<and>\n       lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Cf fDef.\n       fields(CT,C0) = Cf \\<and>\n       lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef", "obtain Ci where \"CT;Map.empty \\<turnstile> (FieldProj (New C0 es) fi) : Ci\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ci.\n        CT;Map.empty \\<turnstile> FieldProj (New C0 es)\n                                   fi : Ci \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> e : C\n  FieldProj (New C0 es) fi \\<in> subexprs(e)\n\ngoal (1 subgoal):\n 1. (\\<And>Ci.\n        CT;Map.empty \\<turnstile> FieldProj (New C0 es)\n                                   fi : Ci \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (force simp add:subexpr_typing)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> FieldProj (New C0 es) fi : Ci\n\ngoal (1 subgoal):\n 1. \\<exists>Cf fDef.\n       fields(CT,C0) = Cf \\<and>\n       lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef", "then"], ["proof (chain)\npicking this:\n  CT;Map.empty \\<turnstile> FieldProj (New C0 es) fi : Ci", "obtain Cf fDef C0'\n    where \"CT;Map.empty \\<turnstile> (New C0 es) : C0'\"\n    and \"fields(CT,C0') = Cf\" \n    and \"lookup Cf (\\<lambda>fd. (vdName fd = fi)) = Some fDef\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> FieldProj (New C0 es) fi : Ci\n\ngoal (1 subgoal):\n 1. (\\<And>C0' Cf fDef.\n        \\<lbrakk>CT;Map.empty \\<turnstile> New C0 es : C0';\n         fields(CT,C0') = Cf;\n         lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  fields(CT,C0') = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n\ngoal (1 subgoal):\n 1. \\<exists>Cf fDef.\n       fields(CT,C0) = Cf \\<and>\n       lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef", "thus ?thesis"], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  fields(CT,C0') = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n\ngoal (1 subgoal):\n 1. \\<exists>Cf fDef.\n       fields(CT,C0) = Cf \\<and>\n       lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  \\<exists>Cf fDef.\n     fields(CT,C0) = Cf \\<and>\n     lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Thm_2_4_2_2: \n  fixes es ds :: \"exp list\"\n  assumes \"CT;Map.empty \\<turnstile> e : C\" \n  and \"MethodInvk (New C0 es) m ds \\<in> subexprs(e)\"\n  shows \"\\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds", "obtain D where \"CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m ds : D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>D.\n        CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m\n                                   ds : D \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> e : C\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e)\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m\n                                   ds : D \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (force simp add:subexpr_typing)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m ds : D\n\ngoal (1 subgoal):\n 1. \\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds", "then"], ["proof (chain)\npicking this:\n  CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m ds : D", "obtain C0' Cs\n    where \"CT;Map.empty \\<turnstile> (New C0 es) : C0'\"\n    and mt:\"mtype(CT,m,C0') = Cs \\<rightarrow> D\"\n    and \"length ds = length Cs\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m ds : D\n\ngoal (1 subgoal):\n 1. (\\<And>C0' Cs.\n        \\<lbrakk>CT;Map.empty \\<turnstile> New C0 es : C0';\n         mtype(CT,m,C0') = Cs \\<rightarrow> D;\n         length ds = length Cs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  mtype(CT,m,C0') = Cs \\<rightarrow> D\n  length ds = length Cs\n\ngoal (1 subgoal):\n 1. \\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds", "with mtype_mbody[OF mt]"], ["proof (chain)\npicking this:\n  \\<exists>xs e. mbody(CT,m,C0') = xs . e \\<and> length xs = length Cs\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  mtype(CT,m,C0') = Cs \\<rightarrow> D\n  length ds = length Cs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>xs e. mbody(CT,m,C0') = xs . e \\<and> length xs = length Cs\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  mtype(CT,m,C0') = Cs \\<rightarrow> D\n  length ds = length Cs\n\ngoal (1 subgoal):\n 1. \\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds", "by (force elim:typing.cases)"], ["proof (state)\nthis:\n  \\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma closed_subterm_split: \n  assumes \"CT;\\<Gamma> \\<turnstile> e : C\" and \"\\<Gamma> = Map.empty\"\n  shows \"\n  ((\\<exists>C0 es fi. (FieldProj (New C0 es) fi) \\<in> subexprs(e))  \n  \\<or> (\\<exists>C0 es m ds. (MethodInvk (New C0 es) m ds) \\<in> subexprs(e))\n  \\<or> (\\<exists>C0 D es. (Cast D (New C0 es)) \\<in> subexprs(e))\n  \\<or> val(e))\" (is \"?F e \\<or> ?M e \\<or> ?C e \\<or> ?V e\" is \"?IH e\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e)) \\<or> val(e)", "using assms"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e)) \\<or> val(e)", "proof(induct CT \\<Gamma> e C rule:typing_induct)"], ["proof (state)\ngoal (8 subgoals):\n 1. CT;\\<Gamma> \\<turnstile> e : C\n 2. \\<And>C CT \\<Gamma> x.\n       \\<lbrakk>\\<Gamma> x = Some C; CT;\\<Gamma> \\<turnstile> Var x : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D (New C0 es) \\<in> subexprs(Var x)) \\<or>\n                         val(Var x)\n 3. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 4. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 5. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 7. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 8. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. CT;\\<Gamma> \\<turnstile> e : C\n 2. \\<And>C CT \\<Gamma> x.\n       \\<lbrakk>\\<Gamma> x = Some C; CT;\\<Gamma> \\<turnstile> Var x : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D (New C0 es) \\<in> subexprs(Var x)) \\<or>\n                         val(Var x)\n 3. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 4. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 5. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 7. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 8. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> e : C", "using assms"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> e : C", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e : C\n\ngoal (7 subgoals):\n 1. \\<And>C CT \\<Gamma> x.\n       \\<lbrakk>\\<Gamma> x = Some C; CT;\\<Gamma> \\<turnstile> Var x : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D (New C0 es) \\<in> subexprs(Var x)) \\<or>\n                         val(Var x)\n 2. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 3. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 4. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 7. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>C CT \\<Gamma> x.\n       \\<lbrakk>\\<Gamma> x = Some C; CT;\\<Gamma> \\<turnstile> Var x : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D (New C0 es) \\<in> subexprs(Var x)) \\<or>\n                         val(Var x)\n 2. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 3. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 4. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 7. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "case (2 C CT \\<Gamma> x)"], ["proof (state)\nthis:\n  \\<Gamma> x = Some C\n  CT;\\<Gamma> \\<turnstile> Var x : C\n  \\<Gamma> = Map.empty\n\ngoal (7 subgoals):\n 1. \\<And>C CT \\<Gamma> x.\n       \\<lbrakk>\\<Gamma> x = Some C; CT;\\<Gamma> \\<turnstile> Var x : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Var x)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D (New C0 es) \\<in> subexprs(Var x)) \\<or>\n                         val(Var x)\n 2. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 3. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 4. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 7. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> x = Some C\n  CT;\\<Gamma> \\<turnstile> Var x : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Var x)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Var x)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Var x)) \\<or>\n    val(Var x)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(Var x)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Var x)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Var x)) \\<or>\n  val(Var x)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "case (3 C0 Ct Cf Ci \\<Gamma> e0 fDef fi)"], ["proof (state)\nthis:\n  Ct;\\<Gamma> \\<turnstile> e0 : C0\n  \\<lbrakk>Ct;\\<Gamma> \\<turnstile> e0 : C0; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  fields(Ct,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n  Ct;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci\n  \\<Gamma> = Map.empty\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "have s1: \"e0 \\<in> subexprs(FieldProj e0 fi)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e0 \\<in> subexprs(FieldProj e0 fi)", "by(auto simp add:isubexprs.intros)"], ["proof (state)\nthis:\n  e0 \\<in> subexprs(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from 3"], ["proof (chain)\npicking this:\n  Ct;\\<Gamma> \\<turnstile> e0 : C0\n  \\<lbrakk>Ct;\\<Gamma> \\<turnstile> e0 : C0; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  fields(Ct,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n  Ct;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci\n  \\<Gamma> = Map.empty", "have \"?IH e0\""], ["proof (prove)\nusing this:\n  Ct;\\<Gamma> \\<turnstile> e0 : C0\n  \\<lbrakk>Ct;\\<Gamma> \\<turnstile> e0 : C0; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  fields(Ct,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  vdType fDef = Ci\n  Ct;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?F e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)", "obtain C0 es fi' where s2: \"FieldProj (New C0 es) fi' \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es fi'.\n        FieldProj (New C0 es) fi' \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  FieldProj (New C0 es) fi' \\<in> subexprs(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  FieldProj (New C0 es) fi' \\<in> subexprs(FieldProj e0 fi)", "have ?case"], ["proof (prove)\nusing this:\n  FieldProj (New C0 es) fi' \\<in> subexprs(FieldProj e0 fi)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fia.\n        FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 D es.\n        Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    val(FieldProj e0 fi)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?M e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)", "obtain C0 es m ds where s2: \"MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)", "have ?case"], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fia.\n        FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 D es.\n        Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    val(FieldProj e0 fi)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?C e0\""], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)", "obtain C0 D es where s2: \"Cast D (New C0 es) \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>D C0 es.\n        Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)", "have ?case"], ["proof (prove)\nusing this:\n  Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fia.\n        FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 D es.\n        Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    val(FieldProj e0 fi)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?V e0\""], ["proof (state)\nthis:\n  val(e0)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  val(e0)", "obtain C0 es where \"e0 = (New C0 es)\" and \"vals(es)\""], ["proof (prove)\nusing this:\n  val(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es.\n        \\<lbrakk>e0 = New C0 es; vals(es)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force elim:val.cases)"], ["proof (state)\nthis:\n  e0 = New C0 es\n  vals(es)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence ?case"], ["proof (prove)\nusing this:\n  e0 = New C0 es\n  vals(es)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fia.\n        FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 D es.\n        Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    val(FieldProj e0 fi)", "by(force intro:isubexprs.intros)"], ["proof (state)\nthis:\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (6 subgoals):\n 1. \\<And>C0 CT Cf Ci \\<Gamma> e0 fDef fi.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        fields(CT,C0) = Cf;\n        lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef;\n        vdType fDef = Ci; CT;\\<Gamma> \\<turnstile> FieldProj e0 fi : Ci;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fia.\n                             FieldProj (New C0 es)\n                              fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0\n                                es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n                         val(FieldProj e0 fi)\n 2. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 3. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 6. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fia.\n        FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    (\\<exists>C0 D es.\n        Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n    val(FieldProj e0 fi)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>C0 es fia.\n      FieldProj (New C0 es) fia \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  (\\<exists>C0 D es.\n      Cast D (New C0 es) \\<in> subexprs(FieldProj e0 fi)) \\<or>\n  val(FieldProj e0 fi)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "case (4 C C0 CT Cs Ds \\<Gamma> e0 es m)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C\n  \\<Gamma> = Map.empty\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "have s1: \"e0 \\<in> subexprs(MethodInvk e0 m es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e0 \\<in> subexprs(MethodInvk e0 m es)", "by(auto simp add:isubexprs.intros)"], ["proof (state)\nthis:\n  e0 \\<in> subexprs(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from 4"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C\n  \\<Gamma> = Map.empty", "have \"?IH e0\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : C0\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  mtype(CT,m,C0) = Ds \\<rightarrow> C\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT \\<turnstile>+ Cs <: Ds\n  length es = length Ds\n  CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?F e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)", "obtain C0 es fi where s2: \"FieldProj (New C0 es) fi \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  FieldProj (New C0 es) fi \\<in> subexprs(MethodInvk e0 m es__)", "have ?case"], ["proof (prove)\nusing this:\n  FieldProj (New C0 es) fi \\<in> subexprs(MethodInvk e0 m es__)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa)\n         fi \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n    (\\<exists>C0 esa ma ds.\n        MethodInvk (New C0 esa) ma\n         ds \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n    (\\<exists>C0 D esa.\n        Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n    val(MethodInvk e0 m es__)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n  val(MethodInvk e0 m es__)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?M e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)", "obtain C0 es' m' ds where s2: \"MethodInvk (New C0 es') m' ds \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es' m' ds.\n        MethodInvk (New C0 es') m' ds \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MethodInvk (New C0 es') m' ds \\<in> subexprs(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  MethodInvk (New C0 es') m' ds \\<in> subexprs(MethodInvk e0 m es)", "have ?case"], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es') m' ds \\<in> subexprs(MethodInvk e0 m es)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    (\\<exists>C0 esa ma ds.\n        MethodInvk (New C0 esa) ma\n         ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    (\\<exists>C0 D esa.\n        Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    val(MethodInvk e0 m es)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?C e0\""], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)", "obtain C0 D es where s2: \"Cast D (New C0 es) \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>D C0 es.\n        Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  Cast D (New C0 es) \\<in> subexprs(MethodInvk e0 m es__)", "have ?case"], ["proof (prove)\nusing this:\n  Cast D (New C0 es) \\<in> subexprs(MethodInvk e0 m es__)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa)\n         fi \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n    (\\<exists>C0 esa ma ds.\n        MethodInvk (New C0 esa) ma\n         ds \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n    (\\<exists>C0 D esa.\n        Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n    val(MethodInvk e0 m es__)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es__)) \\<or>\n  val(MethodInvk e0 m es__)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?V e0\""], ["proof (state)\nthis:\n  val(e0)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  val(e0)", "obtain C0 es' where \"e0 = (New C0 es')\" and \"vals(es')\""], ["proof (prove)\nusing this:\n  val(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es'.\n        \\<lbrakk>e0 = New C0 es'; vals(es')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force elim:val.cases)"], ["proof (state)\nthis:\n  e0 = New C0 es'\n  vals(es')\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence ?case"], ["proof (prove)\nusing this:\n  e0 = New C0 es'\n  vals(es')\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    (\\<exists>C0 esa ma ds.\n        MethodInvk (New C0 esa) ma\n         ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    (\\<exists>C0 D esa.\n        Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    val(MethodInvk e0 m es)", "by(force intro:isubexprs.intros)"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (5 subgoals):\n 1. \\<And>C C0 CT Cs Ds \\<Gamma> e0 es m.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : C0;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        mtype(CT,m,C0) = Ds \\<rightarrow> C;\n        CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; length es = length Ds;\n        CT;\\<Gamma> \\<turnstile> MethodInvk e0 m es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 esa ma ds.\n                             MethodInvk (New C0 esa) ma\n                              ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0\n                                esa) \\<in> subexprs(MethodInvk e0 m\n               es)) \\<or>\n                         val(MethodInvk e0 m es)\n 2. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 5. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    (\\<exists>C0 esa ma ds.\n        MethodInvk (New C0 esa) ma\n         ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    (\\<exists>C0 D esa.\n        Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n    val(MethodInvk e0 m es)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 esa ma ds.\n      MethodInvk (New C0 esa) ma\n       ds \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  (\\<exists>C0 D esa.\n      Cast D (New C0 esa) \\<in> subexprs(MethodInvk e0 m es)) \\<or>\n  val(MethodInvk e0 m es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "case (5 C CT Cs Df Ds \\<Gamma> es)"], ["proof (state)\nthis:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile> New C es : C\n  \\<Gamma> = Map.empty\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence \n    \"length es = length Cs\"    \n    \"\\<And> i. \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> (es!i) : (Cs!i); \\<Gamma> = Map.empty\\<rbrakk> \\<Longrightarrow> ?IH (es!i)\"\n    and \"CT;\\<Gamma> \\<turnstile>+ es : Cs\""], ["proof (prove)\nusing this:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile> New C es : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. (length es = length Cs &&&\n     (\\<And>i.\n         \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n          \\<Gamma> = Map.empty\\<rbrakk>\n         \\<Longrightarrow> (\\<exists>C0 esa fi.\n                               FieldProj (New C0 esa)\n                                fi \\<in> subexprs(es ! i)) \\<or>\n                           (\\<exists>C0 esa m ds.\n                               MethodInvk (New C0 esa) m\n                                ds \\<in> subexprs(es ! i)) \\<or>\n                           (\\<exists>C0 D esa.\n                               Cast D\n                                (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                           val(es ! i))) &&&\n    CT;\\<Gamma> \\<turnstile>+ es : Cs", "by (auto simp add:typings_lengths)"], ["proof (state)\nthis:\n  length es = length Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence \"(\\<exists>i < length es. (?F (es!i) \\<or> ?M (es!i) \\<or> ?C (es!i))) \\<or> (vals(es))\" (is \"?Q es\")"], ["proof (prove)\nusing this:\n  length es = length Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length es.\n        (\\<exists>C0 esa fi.\n            FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n        (\\<exists>C0 esa m ds.\n            MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n        (\\<exists>C0 D esa.\n            Cast D (New C0 esa) \\<in> subexprs(es ! i))) \\<or>\n    vals(es)", "proof(induct \"es\" \"Cs\" rule:list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>i < length [];\n                 CT;\\<Gamma> \\<turnstile> [] ! i : [] ! i;\n                 \\<Gamma> = Map.empty\\<rbrakk>\n                \\<Longrightarrow> (\\<exists>C0 es fi.\nFieldProj (New C0 es) fi \\<in> subexprs([] ! i)) \\<or>\n                                  (\\<exists>C0 es m ds.\nMethodInvk (New C0 es) m ds \\<in> subexprs([] ! i)) \\<or>\n                                  (\\<exists>C0 D es.\nCast D (New C0 es) \\<in> subexprs([] ! i)) \\<or>\n                                  val([] ! i);\n     CT;\\<Gamma> \\<turnstile>+ [] : []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i<length [].\n                          (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs([] ! i)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs([] ! i)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D\n                               (New C0 es) \\<in> subexprs([] ! i))) \\<or>\n                      vals([])\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>?i < length []; CT;\\<Gamma> \\<turnstile> [] ! ?i : [] ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs([] ! ?i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs([] ! ?i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs([] ! ?i)) \\<or>\n                    val([] ! ?i)\n  CT;\\<Gamma> \\<turnstile>+ [] : []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>i < length [];\n                 CT;\\<Gamma> \\<turnstile> [] ! i : [] ! i;\n                 \\<Gamma> = Map.empty\\<rbrakk>\n                \\<Longrightarrow> (\\<exists>C0 es fi.\nFieldProj (New C0 es) fi \\<in> subexprs([] ! i)) \\<or>\n                                  (\\<exists>C0 es m ds.\nMethodInvk (New C0 es) m ds \\<in> subexprs([] ! i)) \\<or>\n                                  (\\<exists>C0 D es.\nCast D (New C0 es) \\<in> subexprs([] ! i)) \\<or>\n                                  val([] ! i);\n     CT;\\<Gamma> \\<turnstile>+ [] : []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i<length [].\n                          (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs([] ! i)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs([] ! i)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D\n                               (New C0 es) \\<in> subexprs([] ! i))) \\<or>\n                      vals([])\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "thus \"?Q []\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length []; CT;\\<Gamma> \\<turnstile> [] ! ?i : [] ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs([] ! ?i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs([] ! ?i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs([] ! ?i)) \\<or>\n                    val([] ! ?i)\n  CT;\\<Gamma> \\<turnstile>+ [] : []\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length [].\n        (\\<exists>C0 es fi.\n            FieldProj (New C0 es) fi \\<in> subexprs([] ! i)) \\<or>\n        (\\<exists>C0 es m ds.\n            MethodInvk (New C0 es) m ds \\<in> subexprs([] ! i)) \\<or>\n        (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs([] ! i))) \\<or>\n    vals([])", "by(auto intro:vals_val.intros)"], ["proof (state)\nthis:\n  (\\<exists>i<length [].\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs([] ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs([] ! i)) \\<or>\n      (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs([] ! i))) \\<or>\n  vals([])\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "case (Cons h t Ch Ct)"], ["proof (state)\nthis:\n  length t = length Ct\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i < length t;\n               CT;\\<Gamma> \\<turnstile> t ! i : Ct ! i;\n               \\<Gamma> = Map.empty\\<rbrakk>\n              \\<Longrightarrow> (\\<exists>C0 es fi.\n                                    FieldProj (New C0 es)\n                                     fi \\<in> subexprs(t ! i)) \\<or>\n                                (\\<exists>C0 es m ds.\n                                    MethodInvk (New C0 es) m\n                                     ds \\<in> subexprs(t ! i)) \\<or>\n                                (\\<exists>C0 D es.\n                                    Cast D\n                                     (New C0\n es) \\<in> subexprs(t ! i)) \\<or>\n                                val(t ! i);\n   CT;\\<Gamma> \\<turnstile>+ t : Ct\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>i<length t.\n                        (\\<exists>C0 es fi.\n                            FieldProj (New C0 es)\n                             fi \\<in> subexprs(t ! i)) \\<or>\n                        (\\<exists>C0 es m ds.\n                            MethodInvk (New C0 es) m\n                             ds \\<in> subexprs(t ! i)) \\<or>\n                        (\\<exists>C0 D es.\n                            Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n                    vals(t)\n  \\<lbrakk>?i < length (h # t);\n   CT;\\<Gamma> \\<turnstile> (h # t) ! ?i : (Ch # Ct) ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D\n                         (New C0 es) \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    val((h # t) ! ?i)\n  CT;\\<Gamma> \\<turnstile>+ (h # t) : (Ch # Ct)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "with 5"], ["proof (chain)\npicking this:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile> New C es : C\n  \\<Gamma> = Map.empty\n  length t = length Ct\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i < length t;\n               CT;\\<Gamma> \\<turnstile> t ! i : Ct ! i;\n               \\<Gamma> = Map.empty\\<rbrakk>\n              \\<Longrightarrow> (\\<exists>C0 es fi.\n                                    FieldProj (New C0 es)\n                                     fi \\<in> subexprs(t ! i)) \\<or>\n                                (\\<exists>C0 es m ds.\n                                    MethodInvk (New C0 es) m\n                                     ds \\<in> subexprs(t ! i)) \\<or>\n                                (\\<exists>C0 D es.\n                                    Cast D\n                                     (New C0\n es) \\<in> subexprs(t ! i)) \\<or>\n                                val(t ! i);\n   CT;\\<Gamma> \\<turnstile>+ t : Ct\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>i<length t.\n                        (\\<exists>C0 es fi.\n                            FieldProj (New C0 es)\n                             fi \\<in> subexprs(t ! i)) \\<or>\n                        (\\<exists>C0 es m ds.\n                            MethodInvk (New C0 es) m\n                             ds \\<in> subexprs(t ! i)) \\<or>\n                        (\\<exists>C0 D es.\n                            Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n                    vals(t)\n  \\<lbrakk>?i < length (h # t);\n   CT;\\<Gamma> \\<turnstile> (h # t) ! ?i : (Ch # Ct) ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D\n                         (New C0 es) \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    val((h # t) ! ?i)\n  CT;\\<Gamma> \\<turnstile>+ (h # t) : (Ch # Ct)", "have h_t_typs: \"CT;\\<Gamma> \\<turnstile>+ (h#t) : (Ch#Ct)\"\n        and OIH: \"\\<And> i. \\<lbrakk>i < length (h#t); CT;\\<Gamma> \\<turnstile> ((h#t)!i) : ((Ch#Ct)!i); \\<Gamma> = Map.empty\\<rbrakk> \\<Longrightarrow> ?IH ((h#t)!i)\"\n        and G_def: \"\\<Gamma> = Map.empty\""], ["proof (prove)\nusing this:\n  fields(CT,C) = Df\n  length es = length Df\n  varDefs_types Df = Ds\n  CT;\\<Gamma> \\<turnstile>+ es : Cs\n  \\<lbrakk>?i < length es; CT;\\<Gamma> \\<turnstile> es ! ?i : Cs ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 esa fi.\n                        FieldProj (New C0 esa)\n                         fi \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 esa m ds.\n                        MethodInvk (New C0 esa) m\n                         ds \\<in> subexprs(es ! ?i)) \\<or>\n                    (\\<exists>C0 D esa.\n                        Cast D (New C0 esa) \\<in> subexprs(es ! ?i)) \\<or>\n                    val(es ! ?i)\n  CT \\<turnstile>+ Cs <: Ds\n  CT;\\<Gamma> \\<turnstile> New C es : C\n  \\<Gamma> = Map.empty\n  length t = length Ct\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i < length t;\n               CT;\\<Gamma> \\<turnstile> t ! i : Ct ! i;\n               \\<Gamma> = Map.empty\\<rbrakk>\n              \\<Longrightarrow> (\\<exists>C0 es fi.\n                                    FieldProj (New C0 es)\n                                     fi \\<in> subexprs(t ! i)) \\<or>\n                                (\\<exists>C0 es m ds.\n                                    MethodInvk (New C0 es) m\n                                     ds \\<in> subexprs(t ! i)) \\<or>\n                                (\\<exists>C0 D es.\n                                    Cast D\n                                     (New C0\n es) \\<in> subexprs(t ! i)) \\<or>\n                                val(t ! i);\n   CT;\\<Gamma> \\<turnstile>+ t : Ct\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>i<length t.\n                        (\\<exists>C0 es fi.\n                            FieldProj (New C0 es)\n                             fi \\<in> subexprs(t ! i)) \\<or>\n                        (\\<exists>C0 es m ds.\n                            MethodInvk (New C0 es) m\n                             ds \\<in> subexprs(t ! i)) \\<or>\n                        (\\<exists>C0 D es.\n                            Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n                    vals(t)\n  \\<lbrakk>?i < length (h # t);\n   CT;\\<Gamma> \\<turnstile> (h # t) ! ?i : (Ch # Ct) ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D\n                         (New C0 es) \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    val((h # t) ! ?i)\n  CT;\\<Gamma> \\<turnstile>+ (h # t) : (Ch # Ct)\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile>+ (h # t) : (Ch # Ct) &&&\n    (\\<And>i.\n        \\<lbrakk>i < length (h # t);\n         CT;\\<Gamma> \\<turnstile> (h # t) ! i : (Ch # Ct) ! i;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs((h # t) ! i)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs((h # t) ! i)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D\n                               (New C0\n                                 es) \\<in> subexprs((h # t) ! i)) \\<or>\n                          val((h # t) ! i)) &&&\n    \\<Gamma> = Map.empty", "by auto"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile>+ (h # t) : (Ch # Ct)\n  \\<lbrakk>?i < length (h # t);\n   CT;\\<Gamma> \\<turnstile> (h # t) ! ?i : (Ch # Ct) ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D\n                         (New C0 es) \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    val((h # t) ! ?i)\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "from h_t_typs"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile>+ (h # t) : (Ch # Ct)", "have \n        h_typ: \"CT;\\<Gamma> \\<turnstile> (h#t)!0 : (Ch#Ct)!0\" \n        and t_typs: \"CT;\\<Gamma> \\<turnstile>+ t : Ct\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ (h # t) : (Ch # Ct)\n\ngoal (1 subgoal):\n 1. CT;\\<Gamma> \\<turnstile> (h # t) ! 0 : (Ch # Ct) ! 0 &&&\n    CT;\\<Gamma> \\<turnstile>+ t : Ct", "by(auto elim:typings.cases)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> (h # t) ! 0 : (Ch # Ct) ! 0\n  CT;\\<Gamma> \\<turnstile>+ t : Ct\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "{"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> (h # t) ! 0 : (Ch # Ct) ! 0\n  CT;\\<Gamma> \\<turnstile>+ t : Ct\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "assume \"i < length t\""], ["proof (state)\nthis:\n  i < length t\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "hence s_i: \"Suc i < length (h#t)\""], ["proof (prove)\nusing this:\n  i < length t\n\ngoal (1 subgoal):\n 1. Suc i < length (h # t)", "by auto"], ["proof (state)\nthis:\n  Suc i < length (h # t)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "from OIH[OF s_i]"], ["proof (chain)\npicking this:\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> (h # t) ! Suc i : (Ch # Ct) ! Suc i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs((h # t) ! Suc i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs((h # t) ! Suc i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D\n                         (New C0 es) \\<in> subexprs((h # t) ! Suc i)) \\<or>\n                    val((h # t) ! Suc i)", "have \"\\<lbrakk>i < length t; CT;\\<Gamma> \\<turnstile> (t!i) : (Ct!i); \\<Gamma> = Map.empty\\<rbrakk> \\<Longrightarrow> ?IH (t!i)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> (h # t) ! Suc i : (Ch # Ct) ! Suc i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs((h # t) ! Suc i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs((h # t) ! Suc i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D\n                         (New C0 es) \\<in> subexprs((h # t) ! Suc i)) \\<or>\n                    val((h # t) ! Suc i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length t; CT;\\<Gamma> \\<turnstile> t ! i : Ct ! i;\n     \\<Gamma> = Map.empty\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>C0 es fi.\n                          FieldProj (New C0 es)\n                           fi \\<in> subexprs(t ! i)) \\<or>\n                      (\\<exists>C0 es m ds.\n                          MethodInvk (New C0 es) m\n                           ds \\<in> subexprs(t ! i)) \\<or>\n                      (\\<exists>C0 D es.\n                          Cast D (New C0 es) \\<in> subexprs(t ! i)) \\<or>\n                      val(t ! i)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>i < length t; CT;\\<Gamma> \\<turnstile> t ! i : Ct ! i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs(t ! i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(t ! i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(t ! i)) \\<or>\n                    val(t ! i)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < length t; ?i2 < length t;\n   CT;\\<Gamma> \\<turnstile> t ! ?i2 : Ct ! ?i2;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs(t ! ?i2)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(t ! ?i2)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(t ! ?i2)) \\<or>\n                    val(t ! ?i2)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "with t_typs"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile>+ t : Ct\n  \\<lbrakk>?i2 < length t; ?i2 < length t;\n   CT;\\<Gamma> \\<turnstile> t ! ?i2 : Ct ! ?i2;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs(t ! ?i2)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(t ! ?i2)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(t ! ?i2)) \\<or>\n                    val(t ! ?i2)", "have \"?Q t\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ t : Ct\n  \\<lbrakk>?i2 < length t; ?i2 < length t;\n   CT;\\<Gamma> \\<turnstile> t ! ?i2 : Ct ! ?i2;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs(t ! ?i2)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(t ! ?i2)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(t ! ?i2)) \\<or>\n                    val(t ! ?i2)\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length t.\n        (\\<exists>C0 es fi.\n            FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n        (\\<exists>C0 es m ds.\n            MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n        (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n    vals(t)", "using Cons"], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile>+ t : Ct\n  \\<lbrakk>?i2 < length t; ?i2 < length t;\n   CT;\\<Gamma> \\<turnstile> t ! ?i2 : Ct ! ?i2;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs(t ! ?i2)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(t ! ?i2)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(t ! ?i2)) \\<or>\n                    val(t ! ?i2)\n  length t = length Ct\n  \\<lbrakk>\\<And>i.\n              \\<lbrakk>i < length t;\n               CT;\\<Gamma> \\<turnstile> t ! i : Ct ! i;\n               \\<Gamma> = Map.empty\\<rbrakk>\n              \\<Longrightarrow> (\\<exists>C0 es fi.\n                                    FieldProj (New C0 es)\n                                     fi \\<in> subexprs(t ! i)) \\<or>\n                                (\\<exists>C0 es m ds.\n                                    MethodInvk (New C0 es) m\n                                     ds \\<in> subexprs(t ! i)) \\<or>\n                                (\\<exists>C0 D es.\n                                    Cast D\n                                     (New C0\n es) \\<in> subexprs(t ! i)) \\<or>\n                                val(t ! i);\n   CT;\\<Gamma> \\<turnstile>+ t : Ct\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>i<length t.\n                        (\\<exists>C0 es fi.\n                            FieldProj (New C0 es)\n                             fi \\<in> subexprs(t ! i)) \\<or>\n                        (\\<exists>C0 es m ds.\n                            MethodInvk (New C0 es) m\n                             ds \\<in> subexprs(t ! i)) \\<or>\n                        (\\<exists>C0 D es.\n                            Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n                    vals(t)\n  \\<lbrakk>?i < length (h # t);\n   CT;\\<Gamma> \\<turnstile> (h # t) ! ?i : (Ch # Ct) ! ?i;\n   \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es)\n                         fi \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D\n                         (New C0 es) \\<in> subexprs((h # t) ! ?i)) \\<or>\n                    val((h # t) ! ?i)\n  CT;\\<Gamma> \\<turnstile>+ (h # t) : (Ch # Ct)\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length t.\n        (\\<exists>C0 es fi.\n            FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n        (\\<exists>C0 es m ds.\n            MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n        (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n    vals(t)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i<length t.\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n  vals(t)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "moreover"], ["proof (state)\nthis:\n  (\\<exists>i<length t.\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n  vals(t)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "{"], ["proof (state)\nthis:\n  (\\<exists>i<length t.\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n  vals(t)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "assume \"\\<exists>i < length t. (?F (t!i) \\<or> ?M (t!i) \\<or> ?C (t!i))\""], ["proof (state)\nthis:\n  \\<exists>i<length t.\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "then"], ["proof (chain)\npicking this:\n  \\<exists>i<length t.\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))", "obtain i \n          where \"i < length t\" \n          and \"?F (t!i) \\<or> ?M (t!i) \\<or> ?C (t!i)\""], ["proof (prove)\nusing this:\n  \\<exists>i<length t.\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length t;\n         (\\<exists>C0 es fi.\n             FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n         (\\<exists>C0 es m ds.\n             MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n         (\\<exists>C0 D es.\n             Cast D (New C0 es) \\<in> subexprs(t ! i))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  i < length t\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "hence \"(Suc i < length (h#t)) \\<and> (?F ((h#t)!(Suc i)) \\<or> ?M ((h#t)!(Suc i)) \\<or> ?C ((h#t)!(Suc i)))\""], ["proof (prove)\nusing this:\n  i < length t\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))\n\ngoal (1 subgoal):\n 1. Suc i < length (h # t) \\<and>\n    ((\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! Suc i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! Suc i)) \\<or>\n     (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! Suc i)))", "by auto"], ["proof (state)\nthis:\n  Suc i < length (h # t) \\<and>\n  ((\\<exists>C0 es fi.\n       FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! Suc i)) \\<or>\n   (\\<exists>C0 es m ds.\n       MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! Suc i)) \\<or>\n   (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! Suc i)))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "hence \"\\<exists>i < length (h#t). (?F ((h#t)!i) \\<or> ?M ((h#t)!i) \\<or> ?C ((h#t)!i))\""], ["proof (prove)\nusing this:\n  Suc i < length (h # t) \\<and>\n  ((\\<exists>C0 es fi.\n       FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! Suc i)) \\<or>\n   (\\<exists>C0 es m ds.\n       MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! Suc i)) \\<or>\n   (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! Suc i)))\n\ngoal (1 subgoal):\n 1. \\<exists>i<length (h # t).\n       (\\<exists>C0 es fi.\n           FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n       (\\<exists>C0 es m ds.\n           MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n       (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! i))", ".."], ["proof (state)\nthis:\n  \\<exists>i<length (h # t).\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n     (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! i))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "hence \"?Q (h#t)\""], ["proof (prove)\nusing this:\n  \\<exists>i<length (h # t).\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n     (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! i))\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length (h # t).\n        (\\<exists>C0 es fi.\n            FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 es m ds.\n            MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 D es.\n            Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n    vals((h # t))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "}"], ["proof (state)\nthis:\n  \\<exists>i<length t.\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 D es.\n         Cast D (New C0 es) \\<in> subexprs(t ! i)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "moreover"], ["proof (state)\nthis:\n  \\<exists>i<length t.\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 D es.\n         Cast D (New C0 es) \\<in> subexprs(t ! i)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "{"], ["proof (state)\nthis:\n  \\<exists>i<length t.\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 D es.\n         Cast D (New C0 es) \\<in> subexprs(t ! i)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "assume v_t: \"vals(t)\""], ["proof (state)\nthis:\n  vals(t)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "from OIH[OF _ h_typ G_def]"], ["proof (chain)\npicking this:\n  0 < length (h # t) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! 0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! 0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! 0)) \\<or>\n  val((h # t) ! 0)", "have \"?IH h\""], ["proof (prove)\nusing this:\n  0 < length (h # t) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! 0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! 0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! 0)) \\<or>\n  val((h # t) ! 0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<or> val(h)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<or> val(h)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "moreover"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<or> val(h)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "{"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<or> val(h)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "assume \"?F h \\<or> ?M h \\<or> ?C h\""], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "hence \"?F ((h#t)!0) \\<or> ?M ((h#t)!0) \\<or> ?C ((h#t)!0)\""], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h))\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! 0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! 0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! 0))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! 0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! 0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! 0))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "hence \"?Q (h#t)\""], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! 0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! 0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs((h # t) ! 0))\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length (h # t).\n        (\\<exists>C0 es fi.\n            FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 es m ds.\n            MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 D es.\n            Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n    vals((h # t))", "by force"], ["proof (state)\nthis:\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "}"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "moreover"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "{"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "assume \"?V h\""], ["proof (state)\nthis:\n  val(h)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "with v_t"], ["proof (chain)\npicking this:\n  vals(t)\n  val(h)", "have \"vals((h#t))\""], ["proof (prove)\nusing this:\n  vals(t)\n  val(h)\n\ngoal (1 subgoal):\n 1. vals((h # t))", "by (force intro:vals_val.intros)"], ["proof (state)\nthis:\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "hence \"?Q(h#t)\""], ["proof (prove)\nusing this:\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length (h # t).\n        (\\<exists>C0 es fi.\n            FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 es m ds.\n            MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 D es.\n            Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n    vals((h # t))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "}"], ["proof (state)\nthis:\n  val(h) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<or> val(h)\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n  val(h) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))", "have \"?Q(h#t)\""], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<or> val(h)\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(h)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(h)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n  val(h) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length (h # t).\n        (\\<exists>C0 es fi.\n            FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 es m ds.\n            MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 D es.\n            Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n    vals((h # t))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "}"], ["proof (state)\nthis:\n  vals(t) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>\\<And>i.\n                    \\<lbrakk>i < length xs;\n                     CT;\\<Gamma> \\<turnstile> xs ! i : ys ! i;\n                     \\<Gamma> = Map.empty\\<rbrakk>\n                    \\<Longrightarrow> (\\<exists>C0 es fi.\n    FieldProj (New C0 es) fi \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 es m ds.\n    MethodInvk (New C0 es) m ds \\<in> subexprs(xs ! i)) \\<or>\n(\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(xs ! i)) \\<or>\nval(xs ! i);\n         CT;\\<Gamma> \\<turnstile>+ xs : ys\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>i<length xs.\n                              (\\<exists>C0 es fi.\n                                  FieldProj (New C0 es)\n                                   fi \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 es m ds.\n                                  MethodInvk (New C0 es) m\n                                   ds \\<in> subexprs(xs ! i)) \\<or>\n                              (\\<exists>C0 D es.\n                                  Cast D\n                                   (New C0\n                                     es) \\<in> subexprs(xs ! i))) \\<or>\n                          vals(xs);\n        \\<And>i.\n           \\<lbrakk>i < length (x # xs);\n            CT;\\<Gamma> \\<turnstile> (x # xs) ! i : (y # ys) ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i)) \\<or>\n                             val((x # xs) ! i);\n        CT;\\<Gamma> \\<turnstile>+ (x # xs) : (y # ys)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i<length (x # xs).\n                             (\\<exists>C0 es fi.\n                                 FieldProj (New C0 es)\n                                  fi \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 es m ds.\n                                 MethodInvk (New C0 es) m\n                                  ds \\<in> subexprs((x # xs) ! i)) \\<or>\n                             (\\<exists>C0 D es.\n                                 Cast D\n                                  (New C0\n                                    es) \\<in> subexprs((x # xs) ! i))) \\<or>\n                         vals((x # xs))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>i<length t.\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n  vals(t)\n  \\<exists>i<length t.\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 D es.\n         Cast D (New C0 es) \\<in> subexprs(t ! i)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n  vals(t) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))", "show \"?Q(h#t)\""], ["proof (prove)\nusing this:\n  (\\<exists>i<length t.\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n      (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(t ! i))) \\<or>\n  vals(t)\n  \\<exists>i<length t.\n     (\\<exists>C0 es fi.\n         FieldProj (New C0 es) fi \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 es m ds.\n         MethodInvk (New C0 es) m ds \\<in> subexprs(t ! i)) \\<or>\n     (\\<exists>C0 D es.\n         Cast D (New C0 es) \\<in> subexprs(t ! i)) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n  vals(t) \\<Longrightarrow>\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal (1 subgoal):\n 1. (\\<exists>i<length (h # t).\n        (\\<exists>C0 es fi.\n            FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 es m ds.\n            MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n        (\\<exists>C0 D es.\n            Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n    vals((h # t))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>i<length (h # t).\n      (\\<exists>C0 es fi.\n          FieldProj (New C0 es) fi \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 es m ds.\n          MethodInvk (New C0 es) m ds \\<in> subexprs((h # t) ! i)) \\<or>\n      (\\<exists>C0 D es.\n          Cast D (New C0 es) \\<in> subexprs((h # t) ! i))) \\<or>\n  vals((h # t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>i<length es.\n      (\\<exists>C0 esa fi.\n          FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 esa m ds.\n          MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))) \\<or>\n  vals(es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>i<length es.\n      (\\<exists>C0 esa fi.\n          FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 esa m ds.\n          MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))) \\<or>\n  vals(es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  (\\<exists>i<length es.\n      (\\<exists>C0 esa fi.\n          FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 esa m ds.\n          MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))) \\<or>\n  vals(es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"\\<exists>i<length es. ?F (es!i) \\<or> ?M (es!i) \\<or> ?C(es!i)\""], ["proof (state)\nthis:\n  \\<exists>i<length es.\n     (\\<exists>C0 esa fi.\n         FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 esa m ds.\n         MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i<length es.\n     (\\<exists>C0 esa fi.\n         FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 esa m ds.\n         MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))", "obtain i where i_len: \"i < length es\" and r: \"?F (es!i) \\<or> ?M (es!i) \\<or> ?C(es!i)\""], ["proof (prove)\nusing this:\n  \\<exists>i<length es.\n     (\\<exists>C0 esa fi.\n         FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 esa m ds.\n         MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length es;\n         (\\<exists>C0 esa fi.\n             FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n         (\\<exists>C0 esa m ds.\n             MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n         (\\<exists>C0 D esa.\n             Cast D (New C0 esa) \\<in> subexprs(es ! i))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  i < length es\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from ith_mem[OF i_len]"], ["proof (chain)\npicking this:\n  es ! i \\<in> set es", "have s1:\"es!i \\<in> subexprs(New C es)\""], ["proof (prove)\nusing this:\n  es ! i \\<in> set es\n\ngoal (1 subgoal):\n 1. es ! i \\<in> subexprs(New C es)", "by(auto intro:isubexprs.se_newarg)"], ["proof (state)\nthis:\n  es ! i \\<in> subexprs(New C es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  es ! i \\<in> subexprs(New C es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?F (es!i)\""], ["proof (state)\nthis:\n  \\<exists>C0 esa fi. FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 esa fi. FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)", "obtain C0 es' fi where s2: \"FieldProj (New C0 es') fi \\<in> subexprs(es!i)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 esa fi. FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es' fi.\n        FieldProj (New C0 es') fi \\<in> subexprs(es ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  FieldProj (New C0 es') fi \\<in> subexprs(es ! i)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  FieldProj (New C0 es') fi \\<in> subexprs(New C es)", "have \"?F(New C es) \\<or> ?M(New C es) \\<or> ?C(New C es)\""], ["proof (prove)\nusing this:\n  FieldProj (New C0 es') fi \\<in> subexprs(New C es)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 esa m ds.\n        MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 esa fi.\n     FieldProj (New C0 esa) fi \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 esa fi.\n     FieldProj (New C0 esa) fi \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 esa fi.\n     FieldProj (New C0 esa) fi \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?M (es!i)\""], ["proof (state)\nthis:\n  \\<exists>C0 esa m ds. MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 esa m ds. MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)", "obtain C0 es' m' ds where s2: \"MethodInvk (New C0 es') m' ds \\<in> subexprs(es!i)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 esa m ds. MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es' m' ds.\n        MethodInvk (New C0 es') m'\n         ds \\<in> subexprs(es ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  MethodInvk (New C0 es') m' ds \\<in> subexprs(es ! i)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  MethodInvk (New C0 es') m' ds \\<in> subexprs(New C es)", "have \"?F(New C es) \\<or> ?M(New C es) \\<or> ?C(New C es)\""], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es') m' ds \\<in> subexprs(New C es)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 esa m ds.\n        MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 esa m ds.\n     MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 esa m ds.\n     MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 esa m ds.\n     MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?C (es!i)\""], ["proof (state)\nthis:\n  \\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i)", "obtain C0 D es' where s2: \"Cast D (New C0 es') \\<in> subexprs(es!i)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>D C0 es'.\n        Cast D (New C0 es') \\<in> subexprs(es ! i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Cast D (New C0 es') \\<in> subexprs(es ! i)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  Cast D (New C0 es') \\<in> subexprs(New C es)", "have \"?F(New C es) \\<or> ?M(New C es) \\<or> ?C(New C es)\""], ["proof (prove)\nusing this:\n  Cast D (New C0 es') \\<in> subexprs(New C es)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 esa m ds.\n        MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 D esa.\n     Cast D (New C0 esa) \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>C0 esa fi.\n     FieldProj (New C0 esa) fi \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n  \\<exists>C0 esa m ds.\n     MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n  \\<exists>C0 D esa.\n     Cast D (New C0 esa) \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))", "have \"?F(New C es) \\<or> ?M(New C es) \\<or> ?C(New C es)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 esa fi.\n     FieldProj (New C0 esa) fi \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n  \\<exists>C0 esa m ds.\n     MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n  \\<exists>C0 D esa.\n     Cast D (New C0 esa) \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 esa m ds.\n        MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))", "using r"], ["proof (prove)\nusing this:\n  \\<exists>C0 esa fi.\n     FieldProj (New C0 esa) fi \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n  \\<exists>C0 esa m ds.\n     MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n  \\<exists>C0 D esa.\n     Cast D (New C0 esa) \\<in> subexprs(es ! i) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 esa m ds.\n        MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))", "by blast"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence ?case"], ["proof (prove)\nusing this:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es))\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 esa m ds.\n        MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n    val(New C es)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>i<length es.\n     (\\<exists>C0 esa fi.\n         FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 esa m ds.\n         MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 D esa.\n         Cast D (New C0 esa) \\<in> subexprs(es ! i)) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>i<length es.\n     (\\<exists>C0 esa fi.\n         FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 esa m ds.\n         MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 D esa.\n         Cast D (New C0 esa) \\<in> subexprs(es ! i)) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>i<length es.\n     (\\<exists>C0 esa fi.\n         FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 esa m ds.\n         MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 D esa.\n         Cast D (New C0 esa) \\<in> subexprs(es ! i)) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"vals(es)\""], ["proof (state)\nthis:\n  vals(es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence ?case"], ["proof (prove)\nusing this:\n  vals(es)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 esa m ds.\n        MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n    val(New C es)", "by(auto intro:vals_val.intros)"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  vals(es) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n\ngoal (4 subgoals):\n 1. \\<And>C CT Cs Df Ds \\<Gamma> es.\n       \\<lbrakk>fields(CT,C) = Df; length es = length Df;\n        varDefs_types Df = Ds; CT;\\<Gamma> \\<turnstile>+ es : Cs;\n        \\<And>i.\n           \\<lbrakk>i < length es; CT;\\<Gamma> \\<turnstile> es ! i : Cs ! i;\n            \\<Gamma> = Map.empty\\<rbrakk>\n           \\<Longrightarrow> (\\<exists>C0 esa fi.\n                                 FieldProj (New C0 esa)\n                                  fi \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 esa m ds.\n                                 MethodInvk (New C0 esa) m\n                                  ds \\<in> subexprs(es ! i)) \\<or>\n                             (\\<exists>C0 D esa.\n                                 Cast D\n                                  (New C0 esa) \\<in> subexprs(es ! i)) \\<or>\n                             val(es ! i);\n        CT \\<turnstile>+ Cs <: Ds; CT;\\<Gamma> \\<turnstile> New C es : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 esa fi.\n                             FieldProj (New C0 esa)\n                              fi \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 esa m ds.\n                             MethodInvk (New C0 esa) m\n                              ds \\<in> subexprs(New C es)) \\<or>\n                         (\\<exists>C0 D esa.\n                             Cast D\n                              (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n                         val(New C es)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 4. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>i<length es.\n      (\\<exists>C0 esa fi.\n          FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 esa m ds.\n          MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))) \\<or>\n  vals(es)\n  \\<exists>i<length es.\n     (\\<exists>C0 esa fi.\n         FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 esa m ds.\n         MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 D esa.\n         Cast D (New C0 esa) \\<in> subexprs(es ! i)) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n  vals(es) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>i<length es.\n      (\\<exists>C0 esa fi.\n          FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 esa m ds.\n          MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n      (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(es ! i))) \\<or>\n  vals(es)\n  \\<exists>i<length es.\n     (\\<exists>C0 esa fi.\n         FieldProj (New C0 esa) fi \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 esa m ds.\n         MethodInvk (New C0 esa) m ds \\<in> subexprs(es ! i)) \\<or>\n     (\\<exists>C0 D esa.\n         Cast D (New C0 esa) \\<in> subexprs(es ! i)) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n  vals(es) \\<Longrightarrow>\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 esa fi.\n        FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 esa m ds.\n        MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n    (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n    val(New C es)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>C0 esa fi.\n      FieldProj (New C0 esa) fi \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 esa m ds.\n      MethodInvk (New C0 esa) m ds \\<in> subexprs(New C es)) \\<or>\n  (\\<exists>C0 D esa. Cast D (New C0 esa) \\<in> subexprs(New C es)) \\<or>\n  val(New C es)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "case (6 C CT D \\<Gamma> e0)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> D <: C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "have s1: \"e0 \\<in> subexprs(Cast C e0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e0 \\<in> subexprs(Cast C e0)", "by(auto simp add:isubexprs.intros)"], ["proof (state)\nthis:\n  e0 \\<in> subexprs(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from 6"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> D <: C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty", "have \"?IH e0\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> D <: C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?F e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)", "obtain C0 es fi where s2: \"FieldProj (New C0 es) fi \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?M e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)", "obtain C0 es m ds where s2: \"MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?C e0\""], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)", "obtain C0 D' es where s2: \"Cast D' (New C0 es) \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>D' C0 es.\n        Cast D' (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Cast D' (New C0 es) \\<in> subexprs(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  Cast D' (New C0 es) \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  Cast D' (New C0 es) \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?V e0\""], ["proof (state)\nthis:\n  val(e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  val(e0)", "obtain C0 es' where \"e0 = (New C0 es')\" and \"vals(es')\""], ["proof (prove)\nusing this:\n  val(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es'.\n        \\<lbrakk>e0 = New C0 es'; vals(es')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force elim:val.cases)"], ["proof (state)\nthis:\n  e0 = New C0 es'\n  vals(es')\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence ?case"], ["proof (prove)\nusing this:\n  e0 = New C0 es'\n  vals(es')\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by(force intro:isubexprs.intros)"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (3 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> D <: C; CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 3. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "case (7 C CT D \\<Gamma> e0)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> C <: D\n  C \\<noteq> D\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "have s1: \"e0 \\<in> subexprs(Cast C e0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e0 \\<in> subexprs(Cast C e0)", "by(auto simp add:isubexprs.intros)"], ["proof (state)\nthis:\n  e0 \\<in> subexprs(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from 7"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> C <: D\n  C \\<noteq> D\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty", "have \"?IH e0\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> C <: D\n  C \\<noteq> D\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?F e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)", "obtain C0 es fi where s2: \"FieldProj (New C0 es) fi \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?M e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)", "obtain C0 es m ds where s2: \"MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?C e0\""], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)", "obtain C0 D' es where s2: \"Cast D' (New C0 es) \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>D' C0 es.\n        Cast D' (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Cast D' (New C0 es) \\<in> subexprs(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  Cast D' (New C0 es) \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  Cast D' (New C0 es) \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?V e0\""], ["proof (state)\nthis:\n  val(e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  val(e0)", "obtain C0 es' where \"e0 = (New C0 es')\" and \"vals(es')\""], ["proof (prove)\nusing this:\n  val(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es'.\n        \\<lbrakk>e0 = New C0 es'; vals(es')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force elim:val.cases)"], ["proof (state)\nthis:\n  e0 = New C0 es'\n  vals(es')\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence ?case"], ["proof (prove)\nusing this:\n  e0 = New C0 es'\n  vals(es')\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by(force intro:isubexprs.intros)"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (2 subgoals):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C <: D; C \\<noteq> D;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)\n 2. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "case (8 C CT D \\<Gamma> e0)"], ["proof (state)\nthis:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> D \\<not><: C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "have s1: \"e0 \\<in> subexprs(Cast C e0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e0 \\<in> subexprs(Cast C e0)", "by(auto simp add:isubexprs.intros)"], ["proof (state)\nthis:\n  e0 \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from 8"], ["proof (chain)\npicking this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> D \\<not><: C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty", "have \"?IH e0\""], ["proof (prove)\nusing this:\n  CT;\\<Gamma> \\<turnstile> e0 : D\n  \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D; \\<Gamma> = Map.empty\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>C0 es fi.\n                        FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 es m ds.\n                        MethodInvk (New C0 es) m\n                         ds \\<in> subexprs(e0)) \\<or>\n                    (\\<exists>C0 D es.\n                        Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                    val(e0)\n  CT \\<turnstile> C \\<not><: D\n  CT \\<turnstile> D \\<not><: C\n  CT;\\<Gamma> \\<turnstile> Cast C e0 : C\n  \\<Gamma> = Map.empty\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?F e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)", "obtain C0 es fi where s2: \"FieldProj (New C0 es) fi \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  FieldProj (New C0 es) fi \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?M e0\""], ["proof (state)\nthis:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)", "obtain C0 es m ds where s2: \"MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?C e0\""], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)", "obtain C0 D' es where s2: \"Cast D' (New C0 es) \\<in> subexprs(e0)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>D' C0 es.\n        Cast D' (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Cast D' (New C0 es) \\<in> subexprs(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "from rtrancl_trans[OF s2 s1]"], ["proof (chain)\npicking this:\n  Cast D' (New C0 es) \\<in> subexprs(Cast C e0)", "have ?case"], ["proof (prove)\nusing this:\n  Cast D' (New C0 es) \\<in> subexprs(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "assume \"?V e0\""], ["proof (state)\nthis:\n  val(e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "then"], ["proof (chain)\npicking this:\n  val(e0)", "obtain C0 es' where \"e0 = (New C0 es')\" and \"vals(es')\""], ["proof (prove)\nusing this:\n  val(e0)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es'.\n        \\<lbrakk>e0 = New C0 es'; vals(es')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force elim:val.cases)"], ["proof (state)\nthis:\n  e0 = New C0 es'\n  vals(es')\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "hence ?case"], ["proof (prove)\nusing this:\n  e0 = New C0 es'\n  vals(es')\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by(force intro:isubexprs.intros)"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "}"], ["proof (state)\nthis:\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. \\<And>C CT D \\<Gamma> e0.\n       \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n        \\<lbrakk>CT;\\<Gamma> \\<turnstile> e0 : D;\n         \\<Gamma> = Map.empty\\<rbrakk>\n        \\<Longrightarrow> (\\<exists>C0 es fi.\n                              FieldProj (New C0 es)\n                               fi \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 es m ds.\n                              MethodInvk (New C0 es) m\n                               ds \\<in> subexprs(e0)) \\<or>\n                          (\\<exists>C0 D es.\n                              Cast D (New C0 es) \\<in> subexprs(e0)) \\<or>\n                          val(e0);\n        CT \\<turnstile> C \\<not><: D; CT \\<turnstile> D \\<not><: C;\n        CT;\\<Gamma> \\<turnstile> Cast C e0 : C;\n        \\<Gamma> = Map.empty\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>C0 es fi.\n                             FieldProj (New C0 es)\n                              fi \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 es m ds.\n                             MethodInvk (New C0 es) m\n                              ds \\<in> subexprs(Cast C e0)) \\<or>\n                         (\\<exists>C0 D es.\n                             Cast D\n                              (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n                         val(Cast C e0)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0)) \\<or> val(e0)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n  val(e0) \\<Longrightarrow>\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n    val(Cast C e0)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi.\n      FieldProj (New C0 es) fi \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(Cast C e0)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(Cast C e0)) \\<or>\n  val(Cast C e0)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Type Soundness Theorem\\<close>"], ["", "theorem Thm_2_4_3: \n  assumes e_typ: \"CT;Map.empty \\<turnstile> e : C\"\n  and ct_ok: \"CT OK\"\n  and multisteps: \"CT \\<turnstile> e \\<rightarrow>* e1\"\n  and no_step: \"\\<not>(\\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2)\"\n  shows \"(val(e1) \\<and> (\\<exists>D. CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C))\n      \\<or> (\\<exists>D C es. (Cast D (New C es) \\<in> subexprs(e1) \\<and> CT \\<turnstile> C \\<not><: D))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "from assms Cor_2_4_1_multi[OF multisteps ct_ok e_typ]"], ["proof (chain)\npicking this:\n  CT;Map.empty \\<turnstile> e : C\n  CT OK\n  CT \\<turnstile> e \\<rightarrow>* e1\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n  \\<exists>C'.\n     CT;Map.empty \\<turnstile> e1 : C' \\<and> CT \\<turnstile> C' <: C", "obtain C1 \n    where e1_typ: \"CT;Map.empty \\<turnstile> e1 : C1\" \n    and C1_sub_C: \"CT \\<turnstile> C1 <: C\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> e : C\n  CT OK\n  CT \\<turnstile> e \\<rightarrow>* e1\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n  \\<exists>C'.\n     CT;Map.empty \\<turnstile> e1 : C' \\<and> CT \\<turnstile> C' <: C\n\ngoal (1 subgoal):\n 1. (\\<And>C1.\n        \\<lbrakk>CT;Map.empty \\<turnstile> e1 : C1;\n         CT \\<turnstile> C1 <: C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> e1 : C1\n  CT \\<turnstile> C1 <: C\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "from e1_typ"], ["proof (chain)\npicking this:\n  CT;Map.empty \\<turnstile> e1 : C1", "have \"((\\<exists>C0 es fi. (FieldProj (New C0 es) fi) \\<in> subexprs(e1))  \n    \\<or> (\\<exists>C0 es m ds. (MethodInvk (New C0 es) m ds) \\<in> subexprs(e1))\n    \\<or> (\\<exists>C0 D es. (Cast D (New C0 es)) \\<in> subexprs(e1))\n    \\<or> val(e1))\" (is \"?F e1 \\<or> ?M e1 \\<or> ?C e1 \\<or> ?V e1\")"], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> e1 : C1\n\ngoal (1 subgoal):\n 1. (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)) \\<or>\n    (\\<exists>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e1)) \\<or>\n    (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)) \\<or> val(e1)", "by (simp add: closed_subterm_split)"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)) \\<or> val(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)) \\<or> val(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "{"], ["proof (state)\nthis:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)) \\<or> val(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "assume \"?F e1\""], ["proof (state)\nthis:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)", "obtain C0 es fi where fp: \"FieldProj (New C0 es) fi \\<in> subexprs(e1)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es fi.\n        FieldProj (New C0 es) fi \\<in> subexprs(e1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  FieldProj (New C0 es) fi \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  FieldProj (New C0 es) fi \\<in> subexprs(e1)", "obtain Ci where \"CT;Map.empty \\<turnstile> FieldProj (New C0 es) fi : Ci\""], ["proof (prove)\nusing this:\n  FieldProj (New C0 es) fi \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. (\\<And>Ci.\n        CT;Map.empty \\<turnstile> FieldProj (New C0 es)\n                                   fi : Ci \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using e1_typ"], ["proof (prove)\nusing this:\n  FieldProj (New C0 es) fi \\<in> subexprs(e1)\n  CT;Map.empty \\<turnstile> e1 : C1\n\ngoal (1 subgoal):\n 1. (\\<And>Ci.\n        CT;Map.empty \\<turnstile> FieldProj (New C0 es)\n                                   fi : Ci \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(force simp add:subexpr_typing)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> FieldProj (New C0 es) fi : Ci\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  CT;Map.empty \\<turnstile> FieldProj (New C0 es) fi : Ci", "obtain C0' where new_typ: \"CT;Map.empty \\<turnstile> New C0 es : C0'\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> FieldProj (New C0 es) fi : Ci\n\ngoal (1 subgoal):\n 1. (\\<And>C0'.\n        CT;Map.empty \\<turnstile> New C0 es : C0' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (force elim: typing.cases)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "hence \"C0 = C0'\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n\ngoal (1 subgoal):\n 1. C0 = C0'", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  C0 = C0'\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "with new_typ"], ["proof (chain)\npicking this:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  C0 = C0'", "obtain Df where f1: \"fields(CT,C0) = Df\" and lens: \"length es = length Df\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  C0 = C0'\n\ngoal (1 subgoal):\n 1. (\\<And>Df.\n        \\<lbrakk>fields(CT,C0) = Df; length es = length Df\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto elim:typing.cases)"], ["proof (state)\nthis:\n  fields(CT,C0) = Df\n  length es = length Df\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "from Thm_2_4_2_1[OF e1_typ fp]"], ["proof (chain)\npicking this:\n  \\<exists>Cf fDef.\n     fields(CT,C0) = Cf \\<and>\n     lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef", "obtain Cf fDef \n      where f2: \"fields(CT,C0) = Cf\" \n      and lkup: \"lookup Cf (\\<lambda>fd. vdName fd = fi) = Some(fDef)\""], ["proof (prove)\nusing this:\n  \\<exists>Cf fDef.\n     fields(CT,C0) = Cf \\<and>\n     lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n\ngoal (1 subgoal):\n 1. (\\<And>Cf fDef.\n        \\<lbrakk>fields(CT,C0) = Cf;\n         lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "moreover"], ["proof (state)\nthis:\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "from fields_functional[OF f1 ct_ok f2] lens"], ["proof (chain)\npicking this:\n  Df = Cf\n  length es = length Df", "have \"length es = length Cf\""], ["proof (prove)\nusing this:\n  Df = Cf\n  length es = length Df\n\ngoal (1 subgoal):\n 1. length es = length Cf", "by auto"], ["proof (state)\nthis:\n  length es = length Cf\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "moreover"], ["proof (state)\nthis:\n  length es = length Cf\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "from lookup_index[OF lkup]"], ["proof (chain)\npicking this:\n  \\<exists>i<length Cf.\n     fDef = Cf ! i \\<and>\n     (length Cf = length ?l2.0 \\<longrightarrow>\n      lookup2 Cf ?l2.0 (\\<lambda>fd. vdName fd = fi) = Some (?l2.0 ! i))", "obtain i where \n      \"i<length Cf\" \n      and \"fDef = Cf ! i\"\n      and \"(length Cf = length es) \\<longrightarrow> lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es ! i)\""], ["proof (prove)\nusing this:\n  \\<exists>i<length Cf.\n     fDef = Cf ! i \\<and>\n     (length Cf = length ?l2.0 \\<longrightarrow>\n      lookup2 Cf ?l2.0 (\\<lambda>fd. vdName fd = fi) = Some (?l2.0 ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length Cf; fDef = Cf ! i;\n         length Cf = length es \\<longrightarrow>\n         lookup2 Cf es (\\<lambda>fd. vdName fd = fi) =\n         Some (es ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < length Cf\n  fDef = Cf ! i\n  length Cf = length es \\<longrightarrow>\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es ! i)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "ultimately"], ["proof (chain)\npicking this:\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  length es = length Cf\n  i < length Cf\n  fDef = Cf ! i\n  length Cf = length es \\<longrightarrow>\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es ! i)", "have \"lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es!i)\""], ["proof (prove)\nusing this:\n  fields(CT,C0) = Cf\n  lookup Cf (\\<lambda>fd. vdName fd = fi) = Some fDef\n  length es = length Cf\n  i < length Cf\n  fDef = Cf ! i\n  length Cf = length es \\<longrightarrow>\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es ! i)\n\ngoal (1 subgoal):\n 1. lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es ! i)", "by auto"], ["proof (state)\nthis:\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es ! i)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "with f2"], ["proof (chain)\npicking this:\n  fields(CT,C0) = Cf\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es ! i)", "have \"CT \\<turnstile> FieldProj(New C0 es) fi \\<rightarrow> (es!i)\""], ["proof (prove)\nusing this:\n  fields(CT,C0) = Cf\n  lookup2 Cf es (\\<lambda>fd. vdName fd = fi) = Some (es ! i)\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> FieldProj (New C0 es) fi \\<rightarrow> es ! i", "by(auto intro:reduction.intros)"], ["proof (state)\nthis:\n  CT \\<turnstile> FieldProj (New C0 es) fi \\<rightarrow> es ! i\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "with fp"], ["proof (chain)\npicking this:\n  FieldProj (New C0 es) fi \\<in> subexprs(e1)\n  CT \\<turnstile> FieldProj (New C0 es) fi \\<rightarrow> es ! i", "have \"\\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\""], ["proof (prove)\nusing this:\n  FieldProj (New C0 es) fi \\<in> subexprs(e1)\n  CT \\<turnstile> FieldProj (New C0 es) fi \\<rightarrow> es ! i\n\ngoal (1 subgoal):\n 1. \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2", "by(simp add:subexpr_reduct)"], ["proof (state)\nthis:\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "with no_step"], ["proof (chain)\npicking this:\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "by auto"], ["proof (state)\nthis:\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "assume \"?M e1\""], ["proof (state)\nthis:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e1)", "obtain C0 es m ds where mi:\"MethodInvk (New C0 es) m ds \\<in> subexprs(e1)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 es m ds. MethodInvk (New C0 es) m ds \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. (\\<And>C0 es m ds.\n        MethodInvk (New C0 es) m ds \\<in> subexprs(e1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e1)", "obtain D where \"CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m ds : D\""], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m\n                                   ds : D \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using e1_typ"], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e1)\n  CT;Map.empty \\<turnstile> e1 : C1\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m\n                                   ds : D \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(force simp add:subexpr_typing)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m ds : D\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m ds : D", "obtain C0' Es E \n      where m_typ: \"CT;Map.empty \\<turnstile> New C0 es : C0'\" \n      and \"mtype(CT,m,C0') = Es \\<rightarrow> E\"\n      and \"length ds = length Es\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> MethodInvk (New C0 es) m ds : D\n\ngoal (1 subgoal):\n 1. (\\<And>C0' Es E.\n        \\<lbrakk>CT;Map.empty \\<turnstile> New C0 es : C0';\n         mtype(CT,m,C0') = Es \\<rightarrow> E;\n         length ds = length Es\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  mtype(CT,m,C0') = Es \\<rightarrow> E\n  length ds = length Es\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "from Thm_2_4_2_2[OF e1_typ mi]"], ["proof (chain)\npicking this:\n  \\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds", "obtain xs e0 where mb: \"mbody(CT, m, C0) = xs . e0\" and \"length xs = length ds\""], ["proof (prove)\nusing this:\n  \\<exists>xs e0. mbody(CT,m,C0) = xs . e0 \\<and> length xs = length ds\n\ngoal (1 subgoal):\n 1. (\\<And>xs e0.\n        \\<lbrakk>mbody(CT,m,C0) = xs . e0; length xs = length ds\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  mbody(CT,m,C0) = xs . e0\n  length xs = length ds\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "hence \"CT \\<turnstile> (MethodInvk (New C0 es) m ds) \\<rightarrow> (substs[xs[\\<mapsto>]ds,this\\<mapsto>(New C0 es)]e0)\""], ["proof (prove)\nusing this:\n  mbody(CT,m,C0) = xs . e0\n  length xs = length ds\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> MethodInvk (New C0 es) m\n                     ds \\<rightarrow> substs\n [xs [\\<mapsto>] ds, this \\<mapsto> New C0 es] e0", "by(auto simp add:reduction.intros)"], ["proof (state)\nthis:\n  CT \\<turnstile> MethodInvk (New C0 es) m\n                   ds \\<rightarrow> substs\n                                     [xs [\\<mapsto>] ds, this \\<mapsto>\nNew C0 es]\n                                     e0\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "with mi"], ["proof (chain)\npicking this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e1)\n  CT \\<turnstile> MethodInvk (New C0 es) m\n                   ds \\<rightarrow> substs\n                                     [xs [\\<mapsto>] ds, this \\<mapsto>\nNew C0 es]\n                                     e0", "have \"\\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\""], ["proof (prove)\nusing this:\n  MethodInvk (New C0 es) m ds \\<in> subexprs(e1)\n  CT \\<turnstile> MethodInvk (New C0 es) m\n                   ds \\<rightarrow> substs\n                                     [xs [\\<mapsto>] ds, this \\<mapsto>\nNew C0 es]\n                                     e0\n\ngoal (1 subgoal):\n 1. \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2", "by(simp add:subexpr_reduct)"], ["proof (state)\nthis:\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "with no_step"], ["proof (chain)\npicking this:\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2", "have ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "by auto"], ["proof (state)\nthis:\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "assume \"?C e1\""], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)", "obtain C0 D es where c_def: \"Cast D (New C0 es) \\<in> subexprs(e1)\""], ["proof (prove)\nusing this:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. (\\<And>D C0 es.\n        Cast D (New C0 es) \\<in> subexprs(e1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Cast D (New C0 es) \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  Cast D (New C0 es) \\<in> subexprs(e1)", "obtain D' where \"CT;Map.empty \\<turnstile> Cast D (New C0 es) : D'\""], ["proof (prove)\nusing this:\n  Cast D (New C0 es) \\<in> subexprs(e1)\n\ngoal (1 subgoal):\n 1. (\\<And>D'.\n        CT;Map.empty \\<turnstile> Cast D (New C0 es) : D' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using e1_typ"], ["proof (prove)\nusing this:\n  Cast D (New C0 es) \\<in> subexprs(e1)\n  CT;Map.empty \\<turnstile> e1 : C1\n\ngoal (1 subgoal):\n 1. (\\<And>D'.\n        CT;Map.empty \\<turnstile> Cast D (New C0 es) : D' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (force simp add:subexpr_typing)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> Cast D (New C0 es) : D'\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "then"], ["proof (chain)\npicking this:\n  CT;Map.empty \\<turnstile> Cast D (New C0 es) : D'", "obtain C0' where new_typ: \"CT;Map.empty \\<turnstile> New C0 es : C0'\" and D_eq_D': \"D = D'\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> Cast D (New C0 es) : D'\n\ngoal (1 subgoal):\n 1. (\\<And>C0'.\n        \\<lbrakk>CT;Map.empty \\<turnstile> New C0 es : C0'; D = D'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim:typing.cases)"], ["proof (state)\nthis:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  D = D'\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "hence C0_eq_C0': \"C0 = C0'\""], ["proof (prove)\nusing this:\n  CT;Map.empty \\<turnstile> New C0 es : C0'\n  D = D'\n\ngoal (1 subgoal):\n 1. C0 = C0'", "by(auto elim:typing.cases)"], ["proof (state)\nthis:\n  C0 = C0'\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "hence ?thesis"], ["proof (prove)\nusing this:\n  C0 = C0'\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "proof(cases \"CT \\<turnstile> C0 <: D\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 <: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)\n 2. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 \\<not><: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)", "case True"], ["proof (state)\nthis:\n  CT \\<turnstile> C0 <: D\n\ngoal (2 subgoals):\n 1. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 <: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)\n 2. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 \\<not><: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)", "hence \"CT \\<turnstile> Cast D (New C0 es) \\<rightarrow> (New C0 es)\""], ["proof (prove)\nusing this:\n  CT \\<turnstile> C0 <: D\n\ngoal (1 subgoal):\n 1. CT \\<turnstile> Cast D (New C0 es) \\<rightarrow> New C0 es", "by(auto simp add:reduction.intros)"], ["proof (state)\nthis:\n  CT \\<turnstile> Cast D (New C0 es) \\<rightarrow> New C0 es\n\ngoal (2 subgoals):\n 1. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 <: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)\n 2. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 \\<not><: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)", "with c_def"], ["proof (chain)\npicking this:\n  Cast D (New C0 es) \\<in> subexprs(e1)\n  CT \\<turnstile> Cast D (New C0 es) \\<rightarrow> New C0 es", "have \"\\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\""], ["proof (prove)\nusing this:\n  Cast D (New C0 es) \\<in> subexprs(e1)\n  CT \\<turnstile> Cast D (New C0 es) \\<rightarrow> New C0 es\n\ngoal (1 subgoal):\n 1. \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2", "by (simp add:subexpr_reduct)"], ["proof (state)\nthis:\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 <: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)\n 2. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 \\<not><: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)", "with no_step"], ["proof (chain)\npicking this:\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n  \\<exists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "by auto"], ["proof (state)\nthis:\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 \\<not><: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 \\<not><: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)", "case False"], ["proof (state)\nthis:\n  CT \\<turnstile> C0 \\<not><: D\n\ngoal (1 subgoal):\n 1. \\<lbrakk>C0 = C0'; CT \\<turnstile> C0 \\<not><: D\\<rbrakk>\n    \\<Longrightarrow> val(e1) \\<and>\n                      (\\<exists>D.\n                          CT;Map.empty \\<turnstile> e1 : D \\<and>\n                          CT \\<turnstile> D <: C) \\<or>\n                      (\\<exists>D C es.\n                          Cast D (New C es) \\<in> subexprs(e1) \\<and>\n                          CT \\<turnstile> C \\<not><: D)", "with c_def"], ["proof (chain)\npicking this:\n  Cast D (New C0 es) \\<in> subexprs(e1)\n  CT \\<turnstile> C0 \\<not><: D", "show ?thesis"], ["proof (prove)\nusing this:\n  Cast D (New C0 es) \\<in> subexprs(e1)\n  CT \\<turnstile> C0 \\<not><: D\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "by auto"], ["proof (state)\nthis:\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "}"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "moreover"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "{"], ["proof (state)\nthis:\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "assume \"?V e1\""], ["proof (state)\nthis:\n  val(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "hence ?thesis"], ["proof (prove)\nusing this:\n  val(e1)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "using assms"], ["proof (prove)\nusing this:\n  val(e1)\n  CT;Map.empty \\<turnstile> e : C\n  CT OK\n  CT \\<turnstile> e \\<rightarrow>* e1\n  \\<nexists>e2. CT \\<turnstile> e1 \\<rightarrow> e2\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "by(auto simp add:Cor_2_4_1_multi)"], ["proof (state)\nthis:\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "}"], ["proof (state)\nthis:\n  val(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)) \\<or> val(e1)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n  val(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>C0 es fi. FieldProj (New C0 es) fi \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 es m ds.\n      MethodInvk (New C0 es) m ds \\<in> subexprs(e1)) \\<or>\n  (\\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1)) \\<or> val(e1)\n  \\<exists>C0 es fi.\n     FieldProj (New C0 es) fi \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n  \\<exists>C0 es m ds.\n     MethodInvk (New C0 es) m ds \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n  \\<exists>C0 D es. Cast D (New C0 es) \\<in> subexprs(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n  val(e1) \\<Longrightarrow>\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal (1 subgoal):\n 1. val(e1) \\<and>\n    (\\<exists>D.\n        CT;Map.empty \\<turnstile> e1 : D \\<and>\n        CT \\<turnstile> D <: C) \\<or>\n    (\\<exists>D C es.\n        Cast D (New C es) \\<in> subexprs(e1) \\<and>\n        CT \\<turnstile> C \\<not><: D)", "by blast"], ["proof (state)\nthis:\n  val(e1) \\<and>\n  (\\<exists>D.\n      CT;Map.empty \\<turnstile> e1 : D \\<and> CT \\<turnstile> D <: C) \\<or>\n  (\\<exists>D C es.\n      Cast D (New C es) \\<in> subexprs(e1) \\<and>\n      CT \\<turnstile> C \\<not><: D)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}