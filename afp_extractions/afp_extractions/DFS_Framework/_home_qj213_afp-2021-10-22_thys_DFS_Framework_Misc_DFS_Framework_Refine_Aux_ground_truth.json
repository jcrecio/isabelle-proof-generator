{"file_name": "/home/qj213/afp-2021-10-22/thys/DFS_Framework/Misc/DFS_Framework_Refine_Aux.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/DFS_Framework", "problem_names": ["lemma GHOST_elim_Let: \\<comment> \\<open>Unfold rule to inline GHOST-Lets\\<close>\n  shows \"(let x=GHOST m in f x) = f m\"", "lemma \"WHILEI I b f s \\<le> \n  do {ASSERT (I s); WHILE b (\\<lambda>s. do {s \\<leftarrow> f s; ASSERT (I s); RETURN s}) s}\"", "lemma WHILET_eq_WHILE:\n  assumes \"WHILET b f s0 \\<noteq> top\"\n  shows \"WHILET b f s0 = WHILE b f s0\"", "lemma WHILEIT_eq_WHILEI:\n  assumes \"WHILEIT I b f s0 \\<noteq> top\"\n  shows \"WHILEIT I b f s0 = WHILEI I b f s0\"", "lemma WHILEIT_le_WHILEI:\n  assumes \"wf V\"\n  assumes VAR: \"\\<And>s. \\<lbrakk> I s; b s; f s \\<le> SPEC I \\<rbrakk> \\<Longrightarrow> f s \\<le> SPEC (\\<lambda>s'. (s',s)\\<in>V)\"\n  shows \"WHILEIT I b f s \\<le> WHILEI I b f s\"", "lemmas WHILEIT_refine_WHILEI = order_trans[OF WHILEIT_le_WHILEI WHILEI_refine]", "lemma WHILET_eq_WHILE_tproof:\n  assumes \"wf V\"\n  assumes \"I s0\"\n  assumes \"\\<And>s. \\<lbrakk> I s; b s \\<rbrakk> \\<Longrightarrow> f s \\<le> SPEC (\\<lambda>s'. I s' \\<and> (s',s)\\<in>V)\"\n  shows \"WHILET b f s0 = WHILE b f s0\"", "lemma WHILEIT_eq_WHILEI_tproof:\n  assumes \"wf V\"\n  assumes \"\\<And>s. \\<lbrakk> I s; b s \\<rbrakk> \\<Longrightarrow> f s \\<le> SPEC (\\<lambda>s'. (s',s)\\<in>V)\"\n  shows \"WHILEIT I b f s0 = WHILEI I b f s0\""], "translations": [["", "lemma GHOST_elim_Let: \\<comment> \\<open>Unfold rule to inline GHOST-Lets\\<close>\n  shows \"(let x=GHOST m in f x) = f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Let (GHOST m) f = f m", "by simp"], ["", "lemma \"WHILEI I b f s \\<le> \n  do {ASSERT (I s); WHILE b (\\<lambda>s. do {s \\<leftarrow> f s; ASSERT (I s); RETURN s}) s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^bsup>I\\<^esup> b f s\n    \\<le> ASSERT (I s) \\<bind>\n          (\\<lambda>_.\n              WHILE b\n               (\\<lambda>s.\n                   f s \\<bind>\n                   (\\<lambda>s.\n                       ASSERT (I s) \\<bind> (\\<lambda>_. RETURN s)))\n               s)", "unfolding WHILEI_def WHILE_def WHILEI_body_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. REC (\\<lambda>W s.\n            if I s then if b s then f s \\<bind> W else RETURN s else FAIL)\n     s\n    \\<le> ASSERT (I s) \\<bind>\n          (\\<lambda>_.\n              REC (\\<lambda>W s.\n                      if True\n                      then if b s\n                           then f s \\<bind>\n                                (\\<lambda>s.\n                                    ASSERT (I s) \\<bind>\n                                    (\\<lambda>_. RETURN s)) \\<bind>\n                                W\n                           else RETURN s\n                      else FAIL)\n               s)", "apply (rule refine_IdD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. REC (\\<lambda>W s.\n            if I s then if b s then f s \\<bind> W else RETURN s else FAIL)\n     s\n    \\<le> \\<Down> Id\n           (ASSERT (I s) \\<bind>\n            (\\<lambda>_.\n                REC (\\<lambda>W s.\n                        if True\n                        then if b s\n                             then f s \\<bind>\n                                  (\\<lambda>s.\nASSERT (I s) \\<bind> (\\<lambda>_. RETURN s)) \\<bind>\n                                  W\n                             else RETURN s\n                        else FAIL)\n                 s))", "apply refine_rcg"], ["proof (prove)\ngoal (6 subgoals):\n 1. I s \\<Longrightarrow> (s, s) \\<in> ?R3\n 2. \\<And>W Wa sa saa.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> ?R3 \\<Longrightarrow> W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> ?R3;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa\\<rbrakk>\n       \\<Longrightarrow> I sa = True\n 3. \\<And>W Wa sa saa.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> ?R3 \\<Longrightarrow> W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> ?R3;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa;\n        I sa; True\\<rbrakk>\n       \\<Longrightarrow> b sa = b saa\n 4. \\<And>W Wa sa saa.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> ?R3 \\<Longrightarrow> W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> ?R3;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa;\n        I sa; True; b sa; b saa\\<rbrakk>\n       \\<Longrightarrow> f sa\n                         \\<le> \\<Down> (?R'6 W Wa sa saa)\n                                (f saa \\<bind>\n                                 (\\<lambda>s.\n                                     ASSERT (I s) \\<bind>\n                                     (\\<lambda>_. RETURN s)))\n 5. \\<And>W Wa sa saa x x'.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> ?R3 \\<Longrightarrow> W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> ?R3;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa;\n        I sa; True; b sa; b saa; (x, x') \\<in> ?R'6 W Wa sa saa\\<rbrakk>\n       \\<Longrightarrow> W x \\<le> \\<Down> Id (Wa x')\n 6. \\<And>W Wa sa saa.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> ?R3 \\<Longrightarrow> W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> ?R3;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa;\n        I sa; True; \\<not> b sa; \\<not> b saa\\<rbrakk>\n       \\<Longrightarrow> (sa, saa) \\<in> Id", "apply (rule introR[where R=\"br id I\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. I s \\<Longrightarrow> (s, s) \\<in> br id I\n 2. \\<And>W Wa sa saa.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> br id I \\<Longrightarrow>\n           W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> br id I;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa\\<rbrakk>\n       \\<Longrightarrow> I sa = True\n 3. \\<And>W Wa sa saa.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> br id I \\<Longrightarrow>\n           W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> br id I;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa;\n        I sa; True\\<rbrakk>\n       \\<Longrightarrow> b sa = b saa\n 4. \\<And>W Wa sa saa.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> br id I \\<Longrightarrow>\n           W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> br id I;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa;\n        I sa; True; b sa; b saa\\<rbrakk>\n       \\<Longrightarrow> f sa\n                         \\<le> \\<Down> (?R'6 W Wa sa saa)\n                                (f saa \\<bind>\n                                 (\\<lambda>s.\n                                     ASSERT (I s) \\<bind>\n                                     (\\<lambda>_. RETURN s)))\n 5. \\<And>W Wa sa saa x x'.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> br id I \\<Longrightarrow>\n           W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> br id I;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa;\n        I sa; True; b sa; b saa; (x, x') \\<in> ?R'6 W Wa sa saa\\<rbrakk>\n       \\<Longrightarrow> W x \\<le> \\<Down> Id (Wa x')\n 6. \\<And>W Wa sa saa.\n       \\<lbrakk>I s;\n        \\<And>s sa.\n           (s, sa) \\<in> br id I \\<Longrightarrow>\n           W s \\<le> \\<Down> Id (Wa sa);\n        (sa, saa) \\<in> br id I;\n        REC (\\<lambda>f' x'.\n                if True\n                then if b x'\n                     then f x' \\<bind>\n                          (\\<lambda>s.\n                              ASSERT (I s) \\<bind>\n                              (\\<lambda>_. RETURN s)) \\<bind>\n                          f'\n                     else RETURN x'\n                else FAIL) =\n        Wa;\n        I sa; True; \\<not> b sa; \\<not> b saa\\<rbrakk>\n       \\<Longrightarrow> (sa, saa) \\<in> Id", "apply (simp_all add: br_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W Wa sa saa.\n       \\<lbrakk>I s; \\<And>s. I s \\<Longrightarrow> W s \\<le> Wa s;\n        saa = sa;\n        REC (\\<lambda>f' x'.\n                if b x'\n                then f x' \\<bind>\n                     (\\<lambda>s.\n                         ASSERT (I s) \\<bind>\n                         (\\<lambda>_. RETURN s)) \\<bind>\n                     f'\n                else RETURN x') =\n        Wa;\n        I sa; b sa\\<rbrakk>\n       \\<Longrightarrow> f sa\n                         \\<le> \\<Down> (?R'6 W Wa sa sa)\n                                (f sa \\<bind>\n                                 (\\<lambda>s.\n                                     ASSERT (I s) \\<bind>\n                                     (\\<lambda>_. RETURN s)))\n 2. \\<And>W Wa sa saa x x'.\n       \\<lbrakk>I s; \\<And>s. I s \\<Longrightarrow> W s \\<le> Wa s;\n        saa = sa;\n        REC (\\<lambda>f' x'.\n                if b x'\n                then f x' \\<bind>\n                     (\\<lambda>s.\n                         ASSERT (I s) \\<bind>\n                         (\\<lambda>_. RETURN s)) \\<bind>\n                     f'\n                else RETURN x') =\n        Wa;\n        I sa; b sa; (x, x') \\<in> ?R'6 W Wa sa sa\\<rbrakk>\n       \\<Longrightarrow> W x \\<le> Wa x'", "apply (rule intro_prgR[where R=\"br id I\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W Wa sa saa.\n       \\<lbrakk>I s; \\<And>s. I s \\<Longrightarrow> W s \\<le> Wa s;\n        saa = sa;\n        REC (\\<lambda>f' x'.\n                if b x'\n                then f x' \\<bind>\n                     (\\<lambda>s.\n                         ASSERT (I s) \\<bind>\n                         (\\<lambda>_. RETURN s)) \\<bind>\n                     f'\n                else RETURN x') =\n        Wa;\n        I sa; b sa\\<rbrakk>\n       \\<Longrightarrow> f sa\n                         \\<le> \\<Down> (br id I)\n                                (f sa \\<bind>\n                                 (\\<lambda>s.\n                                     ASSERT (I s) \\<bind>\n                                     (\\<lambda>_. RETURN s)))\n 2. \\<And>W Wa sa saa x x'.\n       \\<lbrakk>I s; \\<And>s. I s \\<Longrightarrow> W s \\<le> Wa s;\n        saa = sa;\n        REC (\\<lambda>f' x'.\n                if b x'\n                then f x' \\<bind>\n                     (\\<lambda>s.\n                         ASSERT (I s) \\<bind>\n                         (\\<lambda>_. RETURN s)) \\<bind>\n                     f'\n                else RETURN x') =\n        Wa;\n        I sa; b sa; (x, x') \\<in> br id I\\<rbrakk>\n       \\<Longrightarrow> W x \\<le> Wa x'", "apply (simp_all add: br_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W Wa sa saa.\n       \\<lbrakk>I s; \\<And>s. I s \\<Longrightarrow> W s \\<le> Wa s;\n        saa = sa;\n        REC (\\<lambda>f' x'.\n                if b x'\n                then f x' \\<bind>\n                     (\\<lambda>s.\n                         ASSERT (I s) \\<bind>\n                         (\\<lambda>_. RETURN s)) \\<bind>\n                     f'\n                else RETURN x') =\n        Wa;\n        I sa; b sa\\<rbrakk>\n       \\<Longrightarrow> f sa\n                         \\<le> \\<Down> {(c, a). a = c \\<and> I c}\n                                (f sa \\<bind>\n                                 (\\<lambda>s.\n                                     ASSERT (I s) \\<bind>\n                                     (\\<lambda>_. RETURN s)))", "apply (auto simp: pw_le_iff refine_pw_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* TODO: Move to RefineG_While *)"], ["", "lemma WHILET_eq_WHILE:\n  assumes \"WHILET b f s0 \\<noteq> top\"\n  shows \"WHILET b f s0 = WHILE b f s0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 = WHILE b f s0", "using assms"], ["proof (prove)\nusing this:\n  WHILE\\<^sub>T b f s0 \\<noteq> FAIL\n\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 = WHILE b f s0", "unfolding WHILET_def WHILE_def WHILEIT_def WHILEI_def"], ["proof (prove)\nusing this:\n  REC\\<^sub>T (WHILEI_body (\\<bind>) RETURN (\\<lambda>_. True) b f)\n   s0 \\<noteq>\n  FAIL\n\ngoal (1 subgoal):\n 1. REC\\<^sub>T (WHILEI_body (\\<bind>) RETURN (\\<lambda>_. True) b f) s0 =\n    REC (WHILEI_body (\\<bind>) RETURN (\\<lambda>_. True) b f) s0", "by (rule RECT_eq_REC)"], ["", "lemma WHILEIT_eq_WHILEI:\n  assumes \"WHILEIT I b f s0 \\<noteq> top\"\n  shows \"WHILEIT I b f s0 = WHILEI I b f s0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0 = WHILE\\<^bsup>I\\<^esup> b f s0", "using assms"], ["proof (prove)\nusing this:\n  WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0 \\<noteq> FAIL\n\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0 = WHILE\\<^bsup>I\\<^esup> b f s0", "unfolding WHILEIT_def WHILEI_def"], ["proof (prove)\nusing this:\n  REC\\<^sub>T (WHILEI_body (\\<bind>) RETURN I b f) s0 \\<noteq> FAIL\n\ngoal (1 subgoal):\n 1. REC\\<^sub>T (WHILEI_body (\\<bind>) RETURN I b f) s0 =\n    REC (WHILEI_body (\\<bind>) RETURN I b f) s0", "by (rule RECT_eq_REC)"], ["", "(* TODO: Move to refinement framework! *)"], ["", "lemma WHILEIT_le_WHILEI:\n  assumes \"wf V\"\n  assumes VAR: \"\\<And>s. \\<lbrakk> I s; b s; f s \\<le> SPEC I \\<rbrakk> \\<Longrightarrow> f s \\<le> SPEC (\\<lambda>s'. (s',s)\\<in>V)\"\n  shows \"WHILEIT I b f s \\<le> WHILEI I b f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s \\<le> WHILE\\<^bsup>I\\<^esup> b f s", "using \\<open>wf V\\<close>"], ["proof (prove)\nusing this:\n  wf V\n\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s \\<le> WHILE\\<^bsup>I\\<^esup> b f s", "apply (induction s rule: wf_induct[consumes 1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> V \\<longrightarrow>\n          WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y\n          \\<le> WHILE\\<^bsup>I\\<^esup> b f y \\<Longrightarrow>\n       WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f x\n       \\<le> WHILE\\<^bsup>I\\<^esup> b f x", "apply (subst WHILEIT_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> V \\<longrightarrow>\n          WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y\n          \\<le> WHILE\\<^bsup>I\\<^esup> b f y \\<Longrightarrow>\n       (if I x\n        then if b x then f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n             else RETURN x\n        else FAIL)\n       \\<le> WHILE\\<^bsup>I\\<^esup> b f x", "apply (subst WHILEI_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>y.\n          (y, x) \\<in> V \\<longrightarrow>\n          WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y\n          \\<le> WHILE\\<^bsup>I\\<^esup> b f y \\<Longrightarrow>\n       (if I x\n        then if b x then f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n             else RETURN x\n        else FAIL)\n       \\<le> (if I x\n              then if b x then f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f\n                   else RETURN x\n              else FAIL)", "proof (clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> V \\<longrightarrow>\n                   WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y\n                   \\<le> WHILE\\<^bsup>I\\<^esup> b f y;\n        b x; I x\\<rbrakk>\n       \\<Longrightarrow> f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n                         \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> V \\<longrightarrow>\n                   WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y\n                   \\<le> WHILE\\<^bsup>I\\<^esup> b f y;\n        b x; I x\\<rbrakk>\n       \\<Longrightarrow> f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n                         \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "assume A: \"I x\" \"b x\""], ["proof (state)\nthis:\n  I x\n  b x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> V \\<longrightarrow>\n                   WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y\n                   \\<le> WHILE\\<^bsup>I\\<^esup> b f y;\n        b x; I x\\<rbrakk>\n       \\<Longrightarrow> f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n                         \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "assume IH: \"\\<forall>y. (y, x) \\<in> V \\<longrightarrow> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y \\<le> WHILE\\<^bsup>I\\<^esup> b f y\""], ["proof (state)\nthis:\n  \\<forall>y.\n     (y, x) \\<in> V \\<longrightarrow>\n     WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y \\<le> WHILE\\<^bsup>I\\<^esup> b f y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>y.\n                   (y, x) \\<in> V \\<longrightarrow>\n                   WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y\n                   \\<le> WHILE\\<^bsup>I\\<^esup> b f y;\n        b x; I x\\<rbrakk>\n       \\<Longrightarrow> f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n                         \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "show \"f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f\n 2. \\<not> ?P \\<Longrightarrow>\n    f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "assume B: \"f x \\<le> SPEC I\""], ["proof (state)\nthis:\n  f x \\<le> SPEC I\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f\n 2. \\<not> ?P \\<Longrightarrow>\n    f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "show \"?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "apply (rule Refine_Basic.bind_mono(1)[OF order_refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       RETURN xa \\<le> f x \\<Longrightarrow>\n       WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f xa\n       \\<le> WHILE\\<^bsup>I\\<^esup> b f xa", "using IH VAR[OF A B]"], ["proof (prove)\nusing this:\n  \\<forall>y.\n     (y, x) \\<in> V \\<longrightarrow>\n     WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f y \\<le> WHILE\\<^bsup>I\\<^esup> b f y\n  f x \\<le> SPEC (\\<lambda>s'. (s', x) \\<in> V)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       RETURN xa \\<le> f x \\<Longrightarrow>\n       WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f xa\n       \\<le> WHILE\\<^bsup>I\\<^esup> b f xa", "by (auto simp: pw_le_iff)"], ["proof (state)\nthis:\n  f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n  \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f\n\ngoal (1 subgoal):\n 1. \\<not> f x \\<le> SPEC I \\<Longrightarrow>\n    f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f x \\<le> SPEC I \\<Longrightarrow>\n    f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "assume B: \"\\<not>(f x \\<le> SPEC I)\""], ["proof (state)\nthis:\n  \\<not> f x \\<le> SPEC I\n\ngoal (1 subgoal):\n 1. \\<not> f x \\<le> SPEC I \\<Longrightarrow>\n    f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "hence \"f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f = FAIL\""], ["proof (prove)\nusing this:\n  \\<not> f x \\<le> SPEC I\n\ngoal (1 subgoal):\n 1. f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f = FAIL", "apply (subst WHILEI_unfold[abs_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> f x \\<le> SPEC I \\<Longrightarrow>\n    f x \\<bind>\n    (\\<lambda>x.\n        if I x\n        then if b x then f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f\n             else RETURN x\n        else FAIL) =\n    FAIL", "apply (auto simp: pw_eq_iff pw_le_iff refine_pw_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f = FAIL\n\ngoal (1 subgoal):\n 1. \\<not> f x \\<le> SPEC I \\<Longrightarrow>\n    f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "thus ?thesis"], ["proof (prove)\nusing this:\n  f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f = FAIL\n\ngoal (1 subgoal):\n 1. f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n    \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f", "by simp"], ["proof (state)\nthis:\n  f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n  \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f x \\<bind> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f\n  \\<le> f x \\<bind> WHILE\\<^bsup>I\\<^esup> b f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas WHILEIT_refine_WHILEI = order_trans[OF WHILEIT_le_WHILEI WHILEI_refine]"], ["", "lemma WHILET_eq_WHILE_tproof:\n  assumes \"wf V\"\n  assumes \"I s0\"\n  assumes \"\\<And>s. \\<lbrakk> I s; b s \\<rbrakk> \\<Longrightarrow> f s \\<le> SPEC (\\<lambda>s'. I s' \\<and> (s',s)\\<in>V)\"\n  shows \"WHILET b f s0 = WHILE b f s0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 = WHILE b f s0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 = WHILE b f s0", "have \"WHILET b f s0 \\<le> SPEC I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 \\<le> SPEC I", "by (rule WHILET_rule[where I=I], fact+)"], ["proof (state)\nthis:\n  WHILE\\<^sub>T b f s0 \\<le> SPEC I\n\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 = WHILE b f s0", "hence \"WHILET b f s0 \\<noteq> top\""], ["proof (prove)\nusing this:\n  WHILE\\<^sub>T b f s0 \\<le> SPEC I\n\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 \\<noteq> FAIL", "by auto"], ["proof (state)\nthis:\n  WHILE\\<^sub>T b f s0 \\<noteq> FAIL\n\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 = WHILE b f s0", "thus ?thesis"], ["proof (prove)\nusing this:\n  WHILE\\<^sub>T b f s0 \\<noteq> FAIL\n\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T b f s0 = WHILE b f s0", "unfolding WHILE_def WHILEI_def WHILET_def WHILEIT_def"], ["proof (prove)\nusing this:\n  REC\\<^sub>T (WHILEI_body (\\<bind>) RETURN (\\<lambda>_. True) b f)\n   s0 \\<noteq>\n  FAIL\n\ngoal (1 subgoal):\n 1. REC\\<^sub>T (WHILEI_body (\\<bind>) RETURN (\\<lambda>_. True) b f) s0 =\n    REC (WHILEI_body (\\<bind>) RETURN (\\<lambda>_. True) b f) s0", "by (subst RECT_eq_REC) auto"], ["proof (state)\nthis:\n  WHILE\\<^sub>T b f s0 = WHILE b f s0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WHILEIT_eq_WHILEI_tproof:\n  assumes \"wf V\"\n  assumes \"\\<And>s. \\<lbrakk> I s; b s \\<rbrakk> \\<Longrightarrow> f s \\<le> SPEC (\\<lambda>s'. (s',s)\\<in>V)\"\n  shows \"WHILEIT I b f s0 = WHILEI I b f s0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0 = WHILE\\<^bsup>I\\<^esup> b f s0", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0\n    \\<le> WHILE\\<^bsup>I\\<^esup> b f s0\n 2. WHILE\\<^bsup>I\\<^esup> b f s0\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0\n    \\<le> WHILE\\<^bsup>I\\<^esup> b f s0", "by (rule WHILEIT_le_WHILEI[OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^bsup>I\\<^esup> b f s0\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. WHILE\\<^bsup>I\\<^esup> b f s0\n    \\<le> WHILE\\<^sub>T\\<^bsup>I\\<^esup> b f s0", "by (rule WHILEI_le_WHILEIT)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}