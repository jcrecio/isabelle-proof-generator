{"file_name": "/home/qj213/afp-2021-10-22/thys/DFS_Framework/Misc/Impl_Rev_Array_Stack.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/DFS_Framework", "problem_names": ["lemma ras_rel_def: \"\\<langle>R\\<rangle>ras_rel \\<equiv> br ras_raw_\\<alpha> ras_raw_invar O \\<langle>R\\<rangle>list_rel\"", "lemma [relator_props]: \n  assumes [relator_props]: \"single_valued R\" \n  shows \"single_valued (\\<langle>R\\<rangle>ras_rel)\"", "lemmas [autoref_rel_intf] = REL_INTFI[of ras_rel i_list]", "lemma ras_empty_refine[autoref_rules]: \"(ras_empty (),[]) \\<in> \\<langle>R\\<rangle>ras_rel\"", "lemma ras_push_refine[autoref_rules]: \n  \"(ras_push,(#)) \\<in> R \\<rightarrow> \\<langle>R\\<rangle>ras_rel \\<rightarrow> \\<langle>R\\<rangle>ras_rel\"", "lemma ras_shrink_id_refine: \"(ras_shrink,id) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> \\<langle>R\\<rangle>ras_rel\"", "lemma ras_shrinkI:\n  assumes [param]: \"(s,a)\\<in>\\<langle>R\\<rangle>ras_rel\"\n  shows \"(ras_shrink s,a)\\<in>\\<langle>R\\<rangle>ras_rel\"", "lemma ras_pop_refine[autoref_rules]: \"(ras_pop,tl) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> \\<langle>R\\<rangle>ras_rel\"", "lemma ras_get_refine: \n  assumes 1: \"i'<length l\" \n  assumes 2: \"(a,l)\\<in>\\<langle>R\\<rangle>ras_rel\" \n  assumes 3[param]: \"(i,i')\\<in>nat_rel\"\n  shows \"(ras_get a i,l!i')\\<in>R\"", "lemma ras_get_autoref[autoref_rules]: \n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>ras_rel\"\n  assumes \"(i,i')\\<in>Id\"\n  assumes \"SIDE_PRECOND (i' < length l')\"\n  shows \"(ras_get l i,(OP nth ::: \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel \\<rightarrow> R)$l'$i')\\<in>R\"", "lemma ras_set_refine: \n  assumes 1: \"i'<length l\" \n  assumes 2: \"(a,l)\\<in>\\<langle>R\\<rangle>ras_rel\" \n  assumes 3[param]: \"(x,x')\\<in>R\"\n  assumes 4[param]: \"(i,i')\\<in>nat_rel\"\n  shows \"(ras_set a i x, l[i':=x'])\\<in>\\<langle>R\\<rangle>ras_rel\"", "lemma ras_set_autoref[autoref_rules]: \n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>ras_rel\"\n  assumes \"(i,i')\\<in>Id\"\n  assumes 3[param]: \"(x,x')\\<in>R\"\n  assumes \"SIDE_PRECOND (i' < length l')\"\n  shows \"(ras_set l i x,\n    (OP list_update ::: \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>ras_rel)$l'$i'$x'\n    )\\<in>\\<langle>R\\<rangle>ras_rel\"", "lemma ras_length_refine[autoref_rules]: \n  \"(ras_length,length) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel\"", "lemma ras_top_code[code]: \"ras_top s = (let (a,n)=s in array_get a (n - 1))\"", "lemma ras_top_refine: \"\\<lbrakk>l\\<noteq>[]; (s,l)\\<in>\\<langle>R\\<rangle>ras_rel\\<rbrakk> \\<Longrightarrow> (ras_top s,hd l)\\<in>R\"", "lemma ras_top_autoref[autoref_rules]:\n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>ras_rel\"\n  assumes \"SIDE_PRECOND (l' \\<noteq> [])\"\n  shows \"(ras_top l,(OP hd ::: \\<langle>R\\<rangle>ras_rel \\<rightarrow> R)$l')\\<in>R\"", "lemma ras_is_empty_code[code]: \"ras_is_empty s = (snd s = 0)\"", "lemma ras_is_empty_refine[autoref_rules]: \n  \"(ras_is_empty,is_Nil) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> bool_rel\"", "lemma ras_singleton_refine[autoref_rules]: \n  \"(ras_singleton,op_list_singleton)\\<in>R \\<rightarrow> \\<langle>R\\<rangle>ras_rel\"", "lemma ras_cast_to_list_refine[autoref_rules]: \n  \"(ras_cast_to_list, CAST) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel\""], "translations": [["", "lemma ras_rel_def: \"\\<langle>R\\<rangle>ras_rel \\<equiv> br ras_raw_\\<alpha> ras_raw_invar O \\<langle>R\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>R\\<rangle>ras_rel \\<equiv>\n    br ras_raw_\\<alpha> ras_raw_invar O \\<langle>R\\<rangle>list_rel", "unfolding ras_rel_def_internal[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>R\\<rangle>(\\<lambda>R.\n                           br ras_raw_\\<alpha> ras_raw_invar O\n                           \\<langle>R\\<rangle>list_rel) \\<equiv>\n    br ras_raw_\\<alpha> ras_raw_invar O \\<langle>R\\<rangle>list_rel", "by (simp add: relAPP_def)"], ["", "(* TODO: Fix relator-props solver to also include atac! *)"], ["", "lemma [relator_props]: \n  assumes [relator_props]: \"single_valued R\" \n  shows \"single_valued (\\<langle>R\\<rangle>ras_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued (\\<langle>R\\<rangle>ras_rel)", "unfolding ras_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued\n     (br ras_raw_\\<alpha> ras_raw_invar O \\<langle>R\\<rangle>list_rel)", "(*apply (tactic {* REPEAT_ALL_NEW (atac ORELSE' (resolve_tac @{thms relator_props})) 1*})*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued\n     (br ras_raw_\\<alpha> ras_raw_invar O \\<langle>R\\<rangle>list_rel)", "by (tagged_solver)"], ["", "lemmas [autoref_rel_intf] = REL_INTFI[of ras_rel i_list]"], ["", "definition \"ras_empty (_::unit) \\<equiv> (array_of_list [],0)\""], ["", "lemma ras_empty_refine[autoref_rules]: \"(ras_empty (),[]) \\<in> \\<langle>R\\<rangle>ras_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_empty (), []) \\<in> \\<langle>R\\<rangle>ras_rel", "unfolding ras_rel_def ras_empty_def br_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((array_of_list [], 0), [])\n    \\<in> {(c, a). a = ras_raw_\\<alpha> c \\<and> ras_raw_invar c} O\n          \\<langle>R\\<rangle>list_rel", "unfolding ras_raw_\\<alpha>_def ras_raw_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((array_of_list [], 0), [])\n    \\<in> {(c, a).\n           a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n           snd c \\<le> array_length (fst c)} O\n          \\<langle>R\\<rangle>list_rel", "by auto"], ["", "definition \"ras_push x s \\<equiv> let\n    (a,n)=s;\n    a = if n = array_length a then\n        array_grow a (max 4 (2*n)) x\n      else a;\n    a = array_set a n x\n  in\n    (a,n+1)\""], ["", "lemma ras_push_refine[autoref_rules]: \n  \"(ras_push,(#)) \\<in> R \\<rightarrow> \\<langle>R\\<rangle>ras_rel \\<rightarrow> \\<langle>R\\<rangle>ras_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_push, (#))\n    \\<in> R \\<rightarrow>\n          \\<langle>R\\<rangle>ras_rel \\<rightarrow>\n          \\<langle>R\\<rangle>ras_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R;\n        (aa, a'a) \\<in> \\<langle>R\\<rangle>ras_rel\\<rbrakk>\n       \\<Longrightarrow> (ras_push a aa, a' # a'a)\n                         \\<in> \\<langle>R\\<rangle>ras_rel", "apply (simp add: ras_push_def ras_rel_def br_def\n    ras_raw_\\<alpha>_def ras_raw_invar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> R;\n        (aa, a'a)\n        \\<in> {(c, a).\n               a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n               snd c \\<le> array_length (fst c)} O\n              \\<langle>R\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (case aa of\n                          (aa, n) \\<Rightarrow>\n                            (array_set\n                              (if n = array_length aa\n                               then array_grow aa (max 4 (2 * n)) a else aa)\n                              n a,\n                             Suc n),\n                          a' # a'a)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take ba (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> (ba = array_length ab \\<longrightarrow>\n                          ((array_set\n                             (array_grow ab (max 4 (2 * array_length ab)) a)\n                             (array_length ab) a,\n                            Suc (array_length ab)),\n                           a' # z)\n                          \\<in> {(c, a).\n                                 a =\n                                 rev (take (snd c)\n (list_of_array (fst c))) \\<and>\n                                 snd c \\<le> array_length (fst c)} O\n                                \\<langle>R\\<rangle>list_rel) \\<and>\n                         (ba \\<noteq> array_length ab \\<longrightarrow>\n                          ((array_set ab ba a, Suc ba), a' # z)\n                          \\<in> {(c, a).\n                                 a =\n                                 rev (take (snd c)\n (list_of_array (fst c))) \\<and>\n                                 snd c \\<le> array_length (fst c)} O\n                                \\<langle>R\\<rangle>list_rel)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take (array_length ab) (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        array_length ab \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set\n                            (array_grow ab (max 4 (2 * array_length ab)) a)\n                            (array_length ab) a,\n                           Suc (array_length ab)),\n                          a' # z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 2. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take ba (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba a, Suc ba), a' # z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply (rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take (array_length ab) (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        array_length ab \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set\n                            (array_grow ab (max 4 (2 * array_length ab)) a)\n                            (array_length ab) a,\n                           Suc (array_length ab)),\n                          ?b21 a a' ab ba z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take (array_length ab) (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        array_length ab \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> (?b21 a a' ab ba z, a' # z)\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 3. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take ba (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba a, Suc ba), a' # z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply auto []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take (array_length ab) (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        array_length ab \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> (rev ((take (Suc (array_length ab))\n                                 (list_of_array ab) @\n                                replicate\n                                 (Suc (array_length ab) -\n                                  length (list_of_array ab))\n                                 a)\n                               [array_length ab := a]),\n                          a' # z)\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take ba (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba a, Suc ba), a' # z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply (clarsimp simp: array_length_list) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take ba (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba a, Suc ba), a' # z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take ba (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba a, Suc ba), ?b99 a a' ab ba z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take ba (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> (?b99 a a' ab ba z, a' # z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply auto []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' ab ba z.\n       \\<lbrakk>(a, a') \\<in> R;\n        (rev (take ba (list_of_array ab)), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> (rev ((take (Suc ba) (list_of_array ab))[ba := a]),\n                          a' # z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (auto simp: take_Suc_conv_app_nth array_length_list list_update_append) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "term array_shrink"], ["", "definition \"ras_shrink s \\<equiv> let \n    (a,n) = s;\n    a = if 128*n \\<le> array_length a \\<and> n>4 then\n        array_shrink a n\n      else a\n  in\n    (a,n)\""], ["", "lemma ras_shrink_id_refine: \"(ras_shrink,id) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> \\<langle>R\\<rangle>ras_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_shrink, id)\n    \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow>\n          \\<langle>R\\<rangle>ras_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_shrink a, id a') \\<in> \\<langle>R\\<rangle>ras_rel", "apply (simp add: ras_shrink_def ras_rel_def br_def\n    ras_raw_\\<alpha>_def ras_raw_invar_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a')\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n       (case a of\n        (a, n) \\<Rightarrow>\n          (if 128 * n \\<le> array_length a \\<and> 4 < n\n           then array_shrink a n else a,\n           n),\n        a')\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba z.\n       \\<lbrakk>(rev (take ba (list_of_array aa)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> (128 * ba \\<le> array_length aa \\<and>\n                          4 < ba \\<longrightarrow>\n                          ((array_shrink aa ba, ba), z)\n                          \\<in> {(c, a).\n                                 a =\n                                 rev (take (snd c)\n (list_of_array (fst c))) \\<and>\n                                 snd c \\<le> array_length (fst c)} O\n                                \\<langle>R\\<rangle>list_rel) \\<and>\n                         ((128 * ba \\<le> array_length aa \\<longrightarrow>\n                           \\<not> 4 < ba) \\<longrightarrow>\n                          ((aa, ba), z)\n                          \\<in> {(c, a).\n                                 a =\n                                 rev (take (snd c)\n (list_of_array (fst c))) \\<and>\n                                 snd c \\<le> array_length (fst c)} O\n                                \\<langle>R\\<rangle>list_rel)", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba z.\n       \\<lbrakk>(rev (take ba (list_of_array aa)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; 128 * ba \\<le> array_length aa;\n        4 < ba\\<rbrakk>\n       \\<Longrightarrow> ((array_shrink aa ba, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 2. \\<And>aa ba z.\n       \\<lbrakk>(rev (take ba (list_of_array aa)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa;\n        \\<not> 128 * ba \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> ((aa, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 3. \\<And>aa ba z.\n       \\<lbrakk>(rev (take ba (list_of_array aa)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; \\<not> 4 < ba\\<rbrakk>\n       \\<Longrightarrow> ((aa, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply (rule)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba z.\n       \\<lbrakk>(rev (take ba (list_of_array aa)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; 128 * ba \\<le> array_length aa;\n        4 < ba\\<rbrakk>\n       \\<Longrightarrow> ((array_shrink aa ba, ba), ?b21 aa ba z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>aa ba z.\n       \\<lbrakk>(rev (take ba (list_of_array aa)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; 128 * ba \\<le> array_length aa;\n        4 < ba\\<rbrakk>\n       \\<Longrightarrow> (?b21 aa ba z, z) \\<in> \\<langle>R\\<rangle>list_rel\n 3. \\<And>aa ba z.\n       \\<lbrakk>(rev (take ba (list_of_array aa)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa;\n        \\<not> 128 * ba \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> ((aa, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 4. \\<And>aa ba z.\n       \\<lbrakk>(rev (take ba (list_of_array aa)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; \\<not> 4 < ba\\<rbrakk>\n       \\<Longrightarrow> ((aa, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply (auto simp: array_length_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ras_shrinkI:\n  assumes [param]: \"(s,a)\\<in>\\<langle>R\\<rangle>ras_rel\"\n  shows \"(ras_shrink s,a)\\<in>\\<langle>R\\<rangle>ras_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_shrink s, a) \\<in> \\<langle>R\\<rangle>ras_rel", "apply (subst id_apply[of a,symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_shrink s, id a) \\<in> \\<langle>R\\<rangle>ras_rel", "apply (parametricity add: ras_shrink_id_refine)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"ras_pop s \\<equiv> let (a,n)=s in ras_shrink (a,n - 1)\""], ["", "lemma ras_pop_refine[autoref_rules]: \"(ras_pop,tl) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> \\<langle>R\\<rangle>ras_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_pop, tl)\n    \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow>\n          \\<langle>R\\<rangle>ras_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_pop a, tl a') \\<in> \\<langle>R\\<rangle>ras_rel", "apply (clarsimp simp add: ras_pop_def split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' x1 x2.\n       ((x1, x2), a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_shrink (x1, x2 - Suc 0), tl a') \\<in> \\<langle>R\\<rangle>ras_rel", "apply (rule ras_shrinkI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' x1 x2.\n       ((x1, x2), a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       ((x1, x2 - Suc 0), tl a') \\<in> \\<langle>R\\<rangle>ras_rel", "apply (simp add: ras_pop_def ras_rel_def br_def\n    ras_raw_\\<alpha>_def ras_raw_invar_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' x1 x2.\n       ((x1, x2), a')\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n       ((x1, x2 - Suc 0), tl a')\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b z.\n       \\<lbrakk>(rev (take b (list_of_array a)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> ((a, b - Suc 0), tl z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b z.\n       \\<lbrakk>(rev (take b (list_of_array a)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> ((a, b - Suc 0), ?b25 a b z)\n                         \\<in> {(c, a).\n                                a =\n                                rev (take (snd c)\n(list_of_array (fst c))) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>a b z.\n       \\<lbrakk>(rev (take b (list_of_array a)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> (?b25 a b z, tl z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (auto simp: array_length_list) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b z.\n       \\<lbrakk>(rev (take b (list_of_array a)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> (rev (take (b - Suc 0) (list_of_array a)), tl z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (clarsimp simp: array_length_list \n    take_minus_one_conv_butlast rev_butlast_is_tl_rev) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b z.\n       \\<lbrakk>(rev (take b (list_of_array a)), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> length (list_of_array a)\\<rbrakk>\n       \\<Longrightarrow> (tl (rev (take b (list_of_array a))), tl z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"ras_get s i \\<equiv> let (a,n::nat)=s in array_get a (n-(i+1))\""], ["", "lemma ras_get_refine: \n  assumes 1: \"i'<length l\" \n  assumes 2: \"(a,l)\\<in>\\<langle>R\\<rangle>ras_rel\" \n  assumes 3[param]: \"(i,i')\\<in>nat_rel\"\n  shows \"(ras_get a i,l!i')\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_get a i, l ! i') \\<in> R", "using 2"], ["proof (prove)\nusing this:\n  (a, l) \\<in> \\<langle>R\\<rangle>ras_rel\n\ngoal (1 subgoal):\n 1. (ras_get a i, l ! i') \\<in> R", "apply (clarsimp \n    simp add: ras_get_def ras_rel_def br_def ras_raw_\\<alpha>_def ras_raw_invar_def\n    split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>(rev (take x2 (list_of_array x1)), l)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (x1, x2); x2 \\<le> array_length x1\\<rbrakk>\n       \\<Longrightarrow> (array_get x1 (x2 - Suc i), l ! i') \\<in> R", "apply (rename_tac aa bb)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa bb.\n       \\<lbrakk>(rev (take bb (list_of_array aa)), l)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (aa, bb); bb \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> (array_get aa (bb - Suc i), l ! i') \\<in> R", "apply (case_tac aa, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "fix n cl"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "assume TKR[param]: \"(rev (take n cl), l) \\<in> \\<langle>R\\<rangle>list_rel\""], ["proof (state)\nthis:\n  (rev (take n cl), l) \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "assume NLE: \"n \\<le> length cl\""], ["proof (state)\nthis:\n  n \\<le> length cl\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "have \"(rev (take n cl)!i, l!i')\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev (take n cl) ! i, l ! i') \\<in> R", "by parametricity (rule 1)"], ["proof (state)\nthis:\n  (rev (take n cl) ! i, l ! i') \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "also"], ["proof (state)\nthis:\n  (rev (take n cl) ! i, l ! i') \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "have \"rev (take n cl)!i = (take n cl)!(n - Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (take n cl) ! i = take n cl ! (n - Suc i)", "apply (subst rev_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i < length (take n cl)\n 2. take n cl ! (length (take n cl) - Suc i) = take n cl ! (n - Suc i)", "using 1 3 list_rel_imp_same_length[OF TKR]"], ["proof (prove)\nusing this:\n  i' < length l\n  (i, i') \\<in> nat_rel\n  length (rev (take n cl)) = length l\n\ngoal (2 subgoals):\n 1. i < length (take n cl)\n 2. take n cl ! (length (take n cl) - Suc i) = take n cl ! (n - Suc i)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. take n cl ! (length (take n cl) - Suc i) = take n cl ! (n - Suc i)", "apply (simp add: min_absorb2[OF NLE])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rev (take n cl) ! i = take n cl ! (n - Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "also"], ["proof (state)\nthis:\n  rev (take n cl) ! i = take n cl ! (n - Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "have \"take n cl!(n-Suc i) = cl!(n - Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n cl ! (n - Suc i) = cl ! (n - Suc i)", "using 1 3 list_rel_imp_same_length[OF TKR]"], ["proof (prove)\nusing this:\n  i' < length l\n  (i, i') \\<in> nat_rel\n  length (rev (take n cl)) = length l\n\ngoal (1 subgoal):\n 1. take n cl ! (n - Suc i) = cl ! (n - Suc i)", "by simp"], ["proof (state)\nthis:\n  take n cl ! (n - Suc i) = cl ! (n - Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(rev (take bb x), l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! (bb - Suc i), l ! i') \\<in> R", "finally"], ["proof (chain)\npicking this:\n  (cl ! (n - Suc i), l ! i') \\<in> R", "show \"(cl!(n-Suc i),l!i')\\<in>R\""], ["proof (prove)\nusing this:\n  (cl ! (n - Suc i), l ! i') \\<in> R\n\ngoal (1 subgoal):\n 1. (cl ! (n - Suc i), l ! i') \\<in> R", "."], ["proof (state)\nthis:\n  (cl ! (n - Suc i), l ! i') \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["", "context begin"], ["", "interpretation autoref_syn"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma ras_get_autoref[autoref_rules]: \n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>ras_rel\"\n  assumes \"(i,i')\\<in>Id\"\n  assumes \"SIDE_PRECOND (i' < length l')\"\n  shows \"(ras_get l i,(OP nth ::: \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel \\<rightarrow> R)$l'$i')\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_get l i,\n     (OP (!) :::\n      \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel \\<rightarrow> R) $\n     l' $\n     i')\n    \\<in> R", "using assms"], ["proof (prove)\nusing this:\n  (l, l') \\<in> \\<langle>R\\<rangle>ras_rel\n  (i, i') \\<in> nat_rel\n  SIDE_PRECOND (i' < length l')\n\ngoal (1 subgoal):\n 1. (ras_get l i,\n     (OP (!) :::\n      \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel \\<rightarrow> R) $\n     l' $\n     i')\n    \\<in> R", "by (simp add: ras_get_refine)"], ["", "definition \"ras_set s i x \\<equiv> let (a,n::nat)=s in (array_set a (n - (i+1)) x,n)\""], ["", "lemma ras_set_refine: \n  assumes 1: \"i'<length l\" \n  assumes 2: \"(a,l)\\<in>\\<langle>R\\<rangle>ras_rel\" \n  assumes 3[param]: \"(x,x')\\<in>R\"\n  assumes 4[param]: \"(i,i')\\<in>nat_rel\"\n  shows \"(ras_set a i x, l[i':=x'])\\<in>\\<langle>R\\<rangle>ras_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_set a i x, l[i' := x']) \\<in> \\<langle>R\\<rangle>ras_rel", "apply (clarsimp \n    simp: ras_set_def ras_rel_def br_def ras_raw_\\<alpha>_def ras_raw_invar_def\n    split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       ((array_set x1 (x2 - Suc i) x, x2), l[i' := x'])\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       ((array_set x1 (x2 - Suc i) x, x2), ?b8 x1 x2)\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)}\n 2. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (?b8 x1 x2, l[i' := x']) \\<in> \\<langle>R\\<rangle>list_rel", "using 2"], ["proof (prove)\nusing this:\n  (a, l) \\<in> \\<langle>R\\<rangle>ras_rel\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       ((array_set x1 (x2 - Suc i) x, x2), ?b8 x1 x2)\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)}\n 2. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (?b8 x1 x2, l[i' := x']) \\<in> \\<langle>R\\<rangle>list_rel", "apply (auto simp: ras_rel_def br_def ras_raw_invar_def) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (rev ((take x2 (list_of_array x1))[x2 - Suc i := x]), l[i' := x'])\n       \\<in> \\<langle>R\\<rangle>list_rel", "apply (subst rev_update)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       x2 - Suc i < length (take x2 (list_of_array x1))\n 2. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       ((rev (take x2 (list_of_array x1)))\n        [length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1 := x], l\n        [i' := x'])\n       \\<in> \\<langle>R\\<rangle>list_rel", "using 1 2 3 4"], ["proof (prove)\nusing this:\n  i' < length l\n  (a, l) \\<in> \\<langle>R\\<rangle>ras_rel\n  (x, x') \\<in> R\n  (i, i') \\<in> nat_rel\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       x2 - Suc i < length (take x2 (list_of_array x1))\n 2. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       ((rev (take x2 (list_of_array x1)))\n        [length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1 := x], l\n        [i' := x'])\n       \\<in> \\<langle>R\\<rangle>list_rel", "apply (clarsimp simp: ras_rel_def br_def ras_raw_invar_def ras_raw_\\<alpha>_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a = (aa, b); i' < length l; (x, x') \\<in> R; i = i';\n        (rev (take b (list_of_array aa)), l)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> b - Suc i' < length (list_of_array aa) \\<and>\n                         b - Suc i' < b\n 2. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       ((rev (take x2 (list_of_array x1)))\n        [length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1 := x], l\n        [i' := x'])\n       \\<in> \\<langle>R\\<rangle>list_rel", "apply (rename_tac ar n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ar n.\n       \\<lbrakk>a = (ar, n); i' < length l; (x, x') \\<in> R; i = i';\n        (rev (take n (list_of_array ar)), l)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        n \\<le> array_length ar\\<rbrakk>\n       \\<Longrightarrow> n - Suc i' < length (list_of_array ar) \\<and>\n                         n - Suc i' < n\n 2. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       ((rev (take x2 (list_of_array x1)))\n        [length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1 := x], l\n        [i' := x'])\n       \\<in> \\<langle>R\\<rangle>list_rel", "apply (case_tac ar, auto dest: list_rel_imp_same_length) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       ((rev (take x2 (list_of_array x1)))\n        [length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1 := x], l\n        [i' := x'])\n       \\<in> \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (rev (take x2 (list_of_array x1)), l)\n       \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1, i')\n       \\<in> nat_rel", "using 2"], ["proof (prove)\nusing this:\n  (a, l) \\<in> \\<langle>R\\<rangle>ras_rel\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (rev (take x2 (list_of_array x1)), l)\n       \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1, i')\n       \\<in> nat_rel", "apply (auto simp: ras_rel_def br_def ras_raw_invar_def ras_raw_\\<alpha>_def) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1, i')\n       \\<in> nat_rel", "using 1 2 4"], ["proof (prove)\nusing this:\n  i' < length l\n  (a, l) \\<in> \\<langle>R\\<rangle>ras_rel\n  (i, i') \\<in> nat_rel\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       a = (x1, x2) \\<Longrightarrow>\n       (length (take x2 (list_of_array x1)) - (x2 - Suc i) - 1, i')\n       \\<in> nat_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>a = (x1, x2); i' < length l;\n        ((x1, x2), l) \\<in> \\<langle>R\\<rangle>ras_rel; i = i'\\<rbrakk>\n       \\<Longrightarrow> min (length (list_of_array x1)) x2 -\n                         Suc (x2 - Suc i') =\n                         i'", "apply (auto simp: ras_rel_def br_def ras_raw_invar_def ras_raw_\\<alpha>_def) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>a = (aa, b); i' < length l; i = i';\n        (rev (take b (list_of_array aa)), l)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> min (length (list_of_array aa)) b -\n                         Suc (b - Suc i') =\n                         i'", "apply (rename_tac ar n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ar n.\n       \\<lbrakk>a = (ar, n); i' < length l; i = i';\n        (rev (take n (list_of_array ar)), l)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        n \\<le> array_length ar\\<rbrakk>\n       \\<Longrightarrow> min (length (list_of_array ar)) n -\n                         Suc (n - Suc i') =\n                         i'", "apply (case_tac ar, auto dest: list_rel_imp_same_length) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ras_set_autoref[autoref_rules]: \n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>ras_rel\"\n  assumes \"(i,i')\\<in>Id\"\n  assumes 3[param]: \"(x,x')\\<in>R\"\n  assumes \"SIDE_PRECOND (i' < length l')\"\n  shows \"(ras_set l i x,\n    (OP list_update ::: \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>ras_rel)$l'$i'$x'\n    )\\<in>\\<langle>R\\<rangle>ras_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_set l i x,\n     (OP list_update :::\n      \\<langle>R\\<rangle>ras_rel \\<rightarrow>\n      nat_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>ras_rel) $\n     l' $\n     i' $\n     x')\n    \\<in> \\<langle>R\\<rangle>ras_rel", "using assms"], ["proof (prove)\nusing this:\n  (l, l') \\<in> \\<langle>R\\<rangle>ras_rel\n  (i, i') \\<in> nat_rel\n  (x, x') \\<in> R\n  SIDE_PRECOND (i' < length l')\n\ngoal (1 subgoal):\n 1. (ras_set l i x,\n     (OP list_update :::\n      \\<langle>R\\<rangle>ras_rel \\<rightarrow>\n      nat_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>ras_rel) $\n     l' $\n     i' $\n     x')\n    \\<in> \\<langle>R\\<rangle>ras_rel", "by (simp add: ras_set_refine)"], ["", "definition ras_length :: \"'a rev_array_stack \\<Rightarrow> nat\" where \n  \"ras_length = snd\""], ["", "lemma ras_length_refine[autoref_rules]: \n  \"(ras_length,length) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_length, length)\n    \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> nat_rel", "by (auto \n    simp: ras_length_def ras_rel_def br_def ras_raw_\\<alpha>_def ras_raw_invar_def\n      array_length_list\n    dest!: list_rel_imp_same_length\n  )"], ["", "definition \"ras_top s \\<equiv> ras_get s 0\""], ["", "lemma ras_top_code[code]: \"ras_top s = (let (a,n)=s in array_get a (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ras_top s = (let (a, n) = s in array_get a (n - 1))", "unfolding ras_top_def ras_get_def ras_length_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let (a, n) = s in array_get a (n - (0 + 1))) =\n    (let (a, n) = s in array_get a (n - 1))", "by (auto split: prod.split)"], ["", "lemma ras_top_refine: \"\\<lbrakk>l\\<noteq>[]; (s,l)\\<in>\\<langle>R\\<rangle>ras_rel\\<rbrakk> \\<Longrightarrow> (ras_top s,hd l)\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>ras_rel\\<rbrakk>\n    \\<Longrightarrow> (ras_top s, hd l) \\<in> R", "unfolding ras_top_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>ras_rel\\<rbrakk>\n    \\<Longrightarrow> (ras_get s 0, hd l) \\<in> R", "apply (simp add: hd_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>ras_rel\\<rbrakk>\n    \\<Longrightarrow> (ras_get s 0, l ! 0) \\<in> R", "apply (rule ras_get_refine)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>ras_rel\\<rbrakk>\n    \\<Longrightarrow> 0 < length l\n 2. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>ras_rel\\<rbrakk>\n    \\<Longrightarrow> (s, l) \\<in> \\<langle>R\\<rangle>ras_rel\n 3. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>ras_rel\\<rbrakk>\n    \\<Longrightarrow> (0, 0) \\<in> nat_rel", "apply (auto simp: ras_length_def ras_rel_def br_def ras_raw_\\<alpha>_def \n    ras_raw_invar_def array_length_list\n    dest!: list_rel_imp_same_length)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ras_top_autoref[autoref_rules]:\n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>ras_rel\"\n  assumes \"SIDE_PRECOND (l' \\<noteq> [])\"\n  shows \"(ras_top l,(OP hd ::: \\<langle>R\\<rangle>ras_rel \\<rightarrow> R)$l')\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_top l, (OP hd ::: \\<langle>R\\<rangle>ras_rel \\<rightarrow> R) $ l')\n    \\<in> R", "using assms"], ["proof (prove)\nusing this:\n  (l, l') \\<in> \\<langle>R\\<rangle>ras_rel\n  SIDE_PRECOND (l' \\<noteq> [])\n\ngoal (1 subgoal):\n 1. (ras_top l, (OP hd ::: \\<langle>R\\<rangle>ras_rel \\<rightarrow> R) $ l')\n    \\<in> R", "by (simp add: ras_top_refine)"], ["", "definition \"ras_is_empty s \\<equiv> ras_length s = 0\""], ["", "lemma ras_is_empty_code[code]: \"ras_is_empty s = (snd s = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ras_is_empty s = (snd s = 0)", "unfolding ras_is_empty_def ras_length_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd s = 0) = (snd s = 0)", "by simp"], ["", "lemma ras_is_empty_refine[autoref_rules]: \n  \"(ras_is_empty,is_Nil) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_is_empty, is_Nil)\n    \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> bool_rel", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_is_empty a, is_Nil a') \\<in> bool_rel", "fix s l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_is_empty a, is_Nil a') \\<in> bool_rel", "assume [param]: \"(s,l)\\<in>\\<langle>R\\<rangle>ras_rel\""], ["proof (state)\nthis:\n  (s, l) \\<in> \\<langle>R\\<rangle>ras_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_is_empty a, is_Nil a') \\<in> bool_rel", "have \"(ras_is_empty s,length l = 0) \\<in> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_is_empty s, length l = 0) \\<in> bool_rel", "unfolding ras_is_empty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_length s = 0, length l = 0) \\<in> bool_rel", "by (parametricity add: ras_length_refine)"], ["proof (state)\nthis:\n  (ras_is_empty s, length l = 0) \\<in> bool_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_is_empty a, is_Nil a') \\<in> bool_rel", "also"], ["proof (state)\nthis:\n  (ras_is_empty s, length l = 0) \\<in> bool_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_is_empty a, is_Nil a') \\<in> bool_rel", "have \"length l = 0 \\<longleftrightarrow> is_Nil l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (length l = 0) = is_Nil l", "by (cases l) auto"], ["proof (state)\nthis:\n  (length l = 0) = is_Nil l\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_is_empty a, is_Nil a') \\<in> bool_rel", "finally"], ["proof (chain)\npicking this:\n  (ras_is_empty s, is_Nil l) \\<in> bool_rel", "show \"(ras_is_empty s, is_Nil l) \\<in> bool_rel\""], ["proof (prove)\nusing this:\n  (ras_is_empty s, is_Nil l) \\<in> bool_rel\n\ngoal (1 subgoal):\n 1. (ras_is_empty s, is_Nil l) \\<in> bool_rel", "."], ["proof (state)\nthis:\n  (ras_is_empty s, is_Nil l) \\<in> bool_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"ras_singleton x \\<equiv> (array_of_list [x],1)\""], ["", "lemma ras_singleton_refine[autoref_rules]: \n  \"(ras_singleton,op_list_singleton)\\<in>R \\<rightarrow> \\<langle>R\\<rangle>ras_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_singleton, op_list_singleton)\n    \\<in> R \\<rightarrow> \\<langle>R\\<rangle>ras_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       (ras_singleton a, op_list_singleton a')\n       \\<in> \\<langle>R\\<rangle>ras_rel", "apply (simp add: ras_singleton_def ras_rel_def br_def ras_raw_\\<alpha>_def \n    ras_raw_invar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       ((array_of_list [a], Suc 0), [a'])\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       ((array_of_list [a], Suc 0), ?b1 a a')\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)}\n 2. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       (?b1 a a', [a']) \\<in> \\<langle>R\\<rangle>list_rel", "apply (auto simp: array_length_list) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       ([a], [a']) \\<in> \\<langle>R\\<rangle>list_rel", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"ras_cast_to_list s \\<equiv> let (a,n) = s in rev (take n (list_of_array a))\""], ["", "lemma ras_cast_to_list_refine[autoref_rules]: \n  \"(ras_cast_to_list, CAST) \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ras_cast_to_list, CAST)\n    \\<in> \\<langle>R\\<rangle>ras_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>ras_rel \\<Longrightarrow>\n       (ras_cast_to_list a, CAST a') \\<in> \\<langle>R\\<rangle>list_rel", "apply (simp add: ras_cast_to_list_def ras_rel_def br_def ras_raw_\\<alpha>_def \n    ras_raw_invar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a')\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n       (case a of (a, n) \\<Rightarrow> rev (take n (list_of_array a)), a')\n       \\<in> \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       (a, a')\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n       (case a of (a, n) \\<Rightarrow> rev (take n (list_of_array a)), a')\n       \\<in> ?A1 a a'\n 2. \\<And>a a'.\n       (a, a')\n       \\<in> {(c, a).\n              a = rev (take (snd c) (list_of_array (fst c))) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n       ?A1 a a' \\<subseteq> \\<langle>R\\<rangle>list_rel", "apply (auto simp: array_length_list) [2]"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}