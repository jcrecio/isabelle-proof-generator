{"file_name": "/home/qj213/afp-2021-10-22/thys/DFS_Framework/Invars/DFS_Invars_SCC.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/DFS_Framework", "problem_names": ["lemmas scc_root_def = scc_root'_def", "lemma scc_rootI:\n    assumes \"is_scc E scc\"\n    and \"v \\<in> dom (discovered s)\"\n    and \"v \\<in> scc\"\n    and \"scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\"\n    shows \"scc_root s v scc\"", "lemma scc_root_is_discovered:\n    \"scc_root s v scc \\<Longrightarrow> v \\<in> dom (discovered s)\"", "lemma scc_root_scc_tree_rtrancl:\n    assumes \"scc_root s v scc\"\n    and \"x \\<in> scc\" \"x \\<in> dom (discovered s)\"\n    shows \"(v,x) \\<in> (tree_edges s)\\<^sup>*\"", "lemma scc_root_scc_reach:\n    assumes \"scc_root s r scc\"\n    and \"v \\<in> scc\"\n    shows \"(r,v) \\<in> E\\<^sup>*\"", "lemma scc_reach_scc_root:\n    assumes \"scc_root s r scc\"\n    and \"v \\<in> scc\"\n    shows \"(v,r) \\<in> E\\<^sup>*\"", "lemma scc_root_scc_tree_trancl:\n    assumes \"scc_root s v scc\"\n    and \"x \\<in> scc\" \"x \\<in> dom (discovered s)\" \"x \\<noteq> v\"\n    shows \"(v,x) \\<in> (tree_edges s)\\<^sup>+\"", "lemma scc_root_unique_scc:\n    \"scc_root s v scc \\<Longrightarrow> scc_root s v scc' \\<Longrightarrow> scc = scc'\"", "lemma scc_root_unique_root:\n    assumes scc1: \"scc_root s v scc\"\n    and scc2: \"scc_root s v' scc\"\n    shows \"v = v'\"", "lemma scc_root_unique_is_scc:\n    assumes \"scc_root s v scc\"\n    shows \"scc_root s v (scc_of E v)\"", "lemma scc_root_finished_impl_scc_finished:\n    assumes \"v \\<in> dom (finished s)\"\n    and \"scc_root s v scc\"\n    shows \"scc \\<subseteq> dom (finished s)\"", "lemma scc_root_disc_le:\n    assumes \"scc_root s v scc\"\n    and \"x \\<in> scc\" \"x \\<in> dom (discovered s)\"\n    shows \"\\<delta> s v \\<le> \\<delta> s x\"", "lemma scc_root_fin_ge:\n    assumes \"scc_root s v scc\"\n    and \"v \\<in> dom (finished s)\"\n    and \"x \\<in> scc\"\n    shows \"\\<phi> s v \\<ge> \\<phi> s x\"", "lemma scc_root_is_Min_disc:\n    assumes \"scc_root s v scc\"\n    shows \"Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s v\" (is \"Min ?S = _\")", "lemma Min_disc_is_scc_root:\n    assumes \"v \\<in> scc\" \"v \\<in> dom (discovered s)\"\n    and \"is_scc E scc\"\n    and min: \"\\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\"\n    shows \"scc_root s v scc\"", "lemma scc_root_iff_Min_disc:\n    assumes \"is_scc E scc\" \"r \\<in> scc\" \"r \\<in> dom (discovered s)\"\n    shows \"scc_root s r scc \\<longleftrightarrow> Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma scc_root_exists:\n    assumes \"is_scc E scc\"\n    and scc: \"scc \\<inter> dom (discovered s) \\<noteq> {}\"\n    shows \"\\<exists>r. scc_root s r scc\"", "lemma scc_root_of_node_exists:\n    assumes \"v \\<in> dom (discovered s)\"\n    shows \"\\<exists>r. scc_root s r (scc_of E v)\"", "lemma scc_root_transfer':\n    assumes \"discovered s = discovered s'\" \"tree_edges s = tree_edges s'\"\n    shows \"scc_root s r scc \\<longleftrightarrow> scc_root s' r scc\"", "lemma scc_root_transfer:\n    assumes inv: \"DFS_invar G param s'\"\n    assumes r_d: \"r \\<in> dom (discovered s)\"\n    assumes d: \"dom (discovered s) \\<subseteq> dom (discovered s')\"\n               \"\\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\"\n               \"\\<forall>x\\<in>dom (discovered s') - dom (discovered s). \\<delta> s' x \\<ge> counter s\"\n    and t: \"tree_edges s \\<subseteq> tree_edges s'\"\n    shows \"scc_root s r scc \\<longleftrightarrow> scc_root s' r scc\""], "translations": [["", "lemmas scc_root_def = scc_root'_def"], ["", "lemma scc_rootI:\n    assumes \"is_scc E scc\"\n    and \"v \\<in> dom (discovered s)\"\n    and \"v \\<in> scc\"\n    and \"scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\"\n    shows \"scc_root s v scc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_root s v scc", "using assms"], ["proof (prove)\nusing this:\n  is_scc E scc\n  v \\<in> dom (discovered s)\n  v \\<in> scc\n  scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "by (simp add: scc_root_def)"], ["", "definition \"scc_roots s = {v. \\<exists>scc. scc_root s v scc}\""], ["", "end"], ["", "context DFS_invar begin"], ["", "lemma scc_root_is_discovered:\n    \"scc_root s v scc \\<Longrightarrow> v \\<in> dom (discovered s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_root s v scc \\<Longrightarrow> v \\<in> dom (discovered s)", "by (simp add: scc_root_def)"], ["", "lemma scc_root_scc_tree_rtrancl:\n    assumes \"scc_root s v scc\"\n    and \"x \\<in> scc\" \"x \\<in> dom (discovered s)\"\n    shows \"(v,x) \\<in> (tree_edges s)\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>*", "using assms"], ["proof (prove)\nusing this:\n  scc_root s v scc\n  x \\<in> scc\n  x \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>*", "by (auto simp add: scc_root_def)"], ["", "lemma scc_root_scc_reach:\n    assumes \"scc_root s r scc\"\n    and \"v \\<in> scc\"\n    shows \"(r,v) \\<in> E\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r, v) \\<in> E\\<^sup>*", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (r, v) \\<in> E\\<^sup>*", "from assms"], ["proof (chain)\npicking this:\n  scc_root s r scc\n  v \\<in> scc", "have \"is_scc E scc\" \"r \\<in> scc\""], ["proof (prove)\nusing this:\n  scc_root s r scc\n  v \\<in> scc\n\ngoal (1 subgoal):\n 1. is_scc E scc &&& r \\<in> scc", "by (simp_all add: scc_root_def)"], ["proof (state)\nthis:\n  is_scc E scc\n  r \\<in> scc\n\ngoal (1 subgoal):\n 1. (r, v) \\<in> E\\<^sup>*", "with is_scc_connected assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>is_scc ?E ?U; ?x \\<in> ?U; ?y \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> ?E\\<^sup>*\n  scc_root s r scc\n  v \\<in> scc\n  is_scc E scc\n  r \\<in> scc", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_scc ?E ?U; ?x \\<in> ?U; ?y \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> ?E\\<^sup>*\n  scc_root s r scc\n  v \\<in> scc\n  is_scc E scc\n  r \\<in> scc\n\ngoal (1 subgoal):\n 1. (r, v) \\<in> E\\<^sup>*", "by metis"], ["proof (state)\nthis:\n  (r, v) \\<in> E\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_reach_scc_root:\n    assumes \"scc_root s r scc\"\n    and \"v \\<in> scc\"\n    shows \"(v,r) \\<in> E\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, r) \\<in> E\\<^sup>*", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (v, r) \\<in> E\\<^sup>*", "from assms"], ["proof (chain)\npicking this:\n  scc_root s r scc\n  v \\<in> scc", "have \"is_scc E scc\" \"r \\<in> scc\""], ["proof (prove)\nusing this:\n  scc_root s r scc\n  v \\<in> scc\n\ngoal (1 subgoal):\n 1. is_scc E scc &&& r \\<in> scc", "by (simp_all add: scc_root_def)"], ["proof (state)\nthis:\n  is_scc E scc\n  r \\<in> scc\n\ngoal (1 subgoal):\n 1. (v, r) \\<in> E\\<^sup>*", "with is_scc_connected assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>is_scc ?E ?U; ?x \\<in> ?U; ?y \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> ?E\\<^sup>*\n  scc_root s r scc\n  v \\<in> scc\n  is_scc E scc\n  r \\<in> scc", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_scc ?E ?U; ?x \\<in> ?U; ?y \\<in> ?U\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> ?E\\<^sup>*\n  scc_root s r scc\n  v \\<in> scc\n  is_scc E scc\n  r \\<in> scc\n\ngoal (1 subgoal):\n 1. (v, r) \\<in> E\\<^sup>*", "by metis"], ["proof (state)\nthis:\n  (v, r) \\<in> E\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_root_scc_tree_trancl:\n    assumes \"scc_root s v scc\"\n    and \"x \\<in> scc\" \"x \\<in> dom (discovered s)\" \"x \\<noteq> v\"\n    shows \"(v,x) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "using assms scc_root_scc_tree_rtrancl"], ["proof (prove)\nusing this:\n  scc_root s v scc\n  x \\<in> scc\n  x \\<in> dom (discovered s)\n  x \\<noteq> v\n  \\<lbrakk>scc_root s ?v ?scc; ?x \\<in> ?scc;\n   ?x \\<in> dom (discovered s)\\<rbrakk>\n  \\<Longrightarrow> (?v, ?x) \\<in> (tree_edges s)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "by (auto simp add: rtrancl_eq_or_trancl)"], ["", "lemma scc_root_unique_scc:\n    \"scc_root s v scc \\<Longrightarrow> scc_root s v scc' \\<Longrightarrow> scc = scc'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>scc_root s v scc; scc_root s v scc'\\<rbrakk>\n    \\<Longrightarrow> scc = scc'", "unfolding scc_root_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_scc E scc \\<and>\n             v \\<in> scc \\<and>\n             v \\<in> dom (discovered s) \\<and>\n             scc \\<inter> dom (discovered s)\n             \\<subseteq> (tree_edges s)\\<^sup>* `` {v};\n     is_scc E scc' \\<and>\n     v \\<in> scc' \\<and>\n     v \\<in> dom (discovered s) \\<and>\n     scc' \\<inter> dom (discovered s)\n     \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\\<rbrakk>\n    \\<Longrightarrow> scc = scc'", "by (metis is_scc_unique)"], ["", "lemma scc_root_unique_root:\n    assumes scc1: \"scc_root s v scc\"\n    and scc2: \"scc_root s v' scc\"\n    shows \"v = v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "assume \"v \\<noteq> v'\""], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "from scc1"], ["proof (chain)\npicking this:\n  scc_root s v scc", "have \"v \\<in> scc\" \"v \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  scc_root s v scc\n\ngoal (1 subgoal):\n 1. v \\<in> scc &&& v \\<in> dom (discovered s)", "by (simp_all add: scc_root_def)"], ["proof (state)\nthis:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "with scc_root_scc_tree_trancl[OF scc2] \\<open>v \\<noteq> v'\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> scc; ?x \\<in> dom (discovered s);\n   ?x \\<noteq> v'\\<rbrakk>\n  \\<Longrightarrow> (v', ?x) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> v'\n  v \\<in> scc\n  v \\<in> dom (discovered s)", "have \"(v',v) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> scc; ?x \\<in> dom (discovered s);\n   ?x \\<noteq> v'\\<rbrakk>\n  \\<Longrightarrow> (v', ?x) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> v'\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (v', v) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (v', v) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  (v', v) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "from scc2"], ["proof (chain)\npicking this:\n  scc_root s v' scc", "have \"v' \\<in> scc\" \"v' \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  scc_root s v' scc\n\ngoal (1 subgoal):\n 1. v' \\<in> scc &&& v' \\<in> dom (discovered s)", "by (simp_all add: scc_root_def)"], ["proof (state)\nthis:\n  v' \\<in> scc\n  v' \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "with scc_root_scc_tree_trancl[OF scc1] \\<open>v\\<noteq>v'\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> scc; ?x \\<in> dom (discovered s); ?x \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> (v, ?x) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> v'\n  v' \\<in> scc\n  v' \\<in> dom (discovered s)", "have \"(v,v') \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> scc; ?x \\<in> dom (discovered s); ?x \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> (v, ?x) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> v'\n  v' \\<in> scc\n  v' \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (v, v') \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (v, v') \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (v', v') \\<in> (tree_edges s)\\<^sup>+", "show False"], ["proof (prove)\nusing this:\n  (v', v') \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. False", "using no_loop_in_tree"], ["proof (prove)\nusing this:\n  (v', v') \\<in> (tree_edges s)\\<^sup>+\n  (?v, ?v) \\<notin> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_root_unique_is_scc:\n    assumes \"scc_root s v scc\"\n    shows \"scc_root s v (scc_of E v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "from assms"], ["proof (chain)\npicking this:\n  scc_root s v scc", "have \"v \\<in> scc\" \"is_scc E scc\""], ["proof (prove)\nusing this:\n  scc_root s v scc\n\ngoal (1 subgoal):\n 1. v \\<in> scc &&& is_scc E scc", "by (simp_all add: scc_root_def)"], ["proof (state)\nthis:\n  v \\<in> scc\n  is_scc E scc\n\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "moreover"], ["proof (state)\nthis:\n  v \\<in> scc\n  is_scc E scc\n\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "have \"v \\<in> scc_of E v\" \"is_scc E (scc_of E v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> scc_of E v &&& is_scc E (scc_of E v)", "by simp_all"], ["proof (state)\nthis:\n  v \\<in> scc_of E v\n  is_scc E (scc_of E v)\n\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "ultimately"], ["proof (chain)\npicking this:\n  v \\<in> scc\n  is_scc E scc\n  v \\<in> scc_of E v\n  is_scc E (scc_of E v)", "have \"scc = scc_of E v\""], ["proof (prove)\nusing this:\n  v \\<in> scc\n  is_scc E scc\n  v \\<in> scc_of E v\n  is_scc E (scc_of E v)\n\ngoal (1 subgoal):\n 1. scc = scc_of E v", "using is_scc_unique"], ["proof (prove)\nusing this:\n  v \\<in> scc\n  is_scc E scc\n  v \\<in> scc_of E v\n  is_scc E (scc_of E v)\n  \\<lbrakk>is_scc ?E ?scc; is_scc ?E ?scc'; ?v \\<in> ?scc;\n   ?v \\<in> ?scc'\\<rbrakk>\n  \\<Longrightarrow> ?scc = ?scc'\n\ngoal (1 subgoal):\n 1. scc = scc_of E v", "by metis"], ["proof (state)\nthis:\n  scc = scc_of E v\n\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  scc = scc_of E v\n\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "using assms"], ["proof (prove)\nusing this:\n  scc = scc_of E v\n  scc_root s v scc\n\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "by simp"], ["proof (state)\nthis:\n  scc_root s v (scc_of E v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_root_finished_impl_scc_finished:\n    assumes \"v \\<in> dom (finished s)\"\n    and \"scc_root s v scc\"\n    shows \"scc \\<subseteq> dom (finished s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scc \\<subseteq> dom (finished s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> scc \\<Longrightarrow> x \\<in> dom (finished s)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> scc \\<Longrightarrow> x \\<in> dom (finished s)", "assume \"x \\<in> scc\""], ["proof (state)\nthis:\n  x \\<in> scc\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> scc \\<Longrightarrow> x \\<in> dom (finished s)", "let ?E = \"Restr E scc\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> scc \\<Longrightarrow> x \\<in> dom (finished s)", "from assms"], ["proof (chain)\npicking this:\n  v \\<in> dom (finished s)\n  scc_root s v scc", "have \"is_scc E scc\" \"v \\<in> scc\""], ["proof (prove)\nusing this:\n  v \\<in> dom (finished s)\n  scc_root s v scc\n\ngoal (1 subgoal):\n 1. is_scc E scc &&& v \\<in> scc", "by (simp_all add: scc_root_def)"], ["proof (state)\nthis:\n  is_scc E scc\n  v \\<in> scc\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> scc \\<Longrightarrow> x \\<in> dom (finished s)", "hence \"(v,x) \\<in> (Restr E scc)\\<^sup>*\""], ["proof (prove)\nusing this:\n  is_scc E scc\n  v \\<in> scc\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (Restr E scc)\\<^sup>*", "using \\<open>x \\<in> scc\\<close>"], ["proof (prove)\nusing this:\n  is_scc E scc\n  v \\<in> scc\n  x \\<in> scc\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (Restr E scc)\\<^sup>*", "by (simp add: is_scc_connected')"], ["proof (state)\nthis:\n  (v, x) \\<in> (Restr E scc)\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> scc \\<Longrightarrow> x \\<in> dom (finished s)", "with rtrancl_is_path"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?u, ?v) \\<in> ?E\\<^sup>*;\n   \\<And>l. path ?E ?u l ?v \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  (v, x) \\<in> (Restr E scc)\\<^sup>*", "obtain p where \"path ?E v p x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?u, ?v) \\<in> ?E\\<^sup>*;\n   \\<And>l. path ?E ?u l ?v \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  (v, x) \\<in> (Restr E scc)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        path (Restr E scc) v p x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  path (Restr E scc) v p x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> scc \\<Longrightarrow> x \\<in> dom (finished s)", "thus \"x \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  path (Restr E scc) v p x\n\ngoal (1 subgoal):\n 1. x \\<in> dom (finished s)", "proof (induction p arbitrary: x rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       path (Restr E scc) v [] x \\<Longrightarrow> x \\<in> dom (finished s)\n 2. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "case Nil"], ["proof (state)\nthis:\n  path (Restr E scc) v [] x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       path (Restr E scc) v [] x \\<Longrightarrow> x \\<in> dom (finished s)\n 2. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "hence \"v = x\""], ["proof (prove)\nusing this:\n  path (Restr E scc) v [] x\n\ngoal (1 subgoal):\n 1. v = x", "by simp"], ["proof (state)\nthis:\n  v = x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       path (Restr E scc) v [] x \\<Longrightarrow> x \\<in> dom (finished s)\n 2. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "with assms"], ["proof (chain)\npicking this:\n  v \\<in> dom (finished s)\n  scc_root s v scc\n  v = x", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> dom (finished s)\n  scc_root s v scc\n  v = x\n\ngoal (1 subgoal):\n 1. x \\<in> dom (finished s)", "by simp"], ["proof (state)\nthis:\n  x \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "case (snoc y ys)"], ["proof (state)\nthis:\n  path (Restr E scc) v ys ?x7 \\<Longrightarrow> ?x7 \\<in> dom (finished s)\n  path (Restr E scc) v (ys @ [y]) x\n\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "hence \"path ?E v ys y\" \"(y,x) \\<in> ?E\""], ["proof (prove)\nusing this:\n  path (Restr E scc) v ys ?x7 \\<Longrightarrow> ?x7 \\<in> dom (finished s)\n  path (Restr E scc) v (ys @ [y]) x\n\ngoal (1 subgoal):\n 1. path (Restr E scc) v ys y &&& (y, x) \\<in> Restr E scc", "by (simp_all add: path_append_conv)"], ["proof (state)\nthis:\n  path (Restr E scc) v ys y\n  (y, x) \\<in> Restr E scc\n\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "with snoc.IH"], ["proof (chain)\npicking this:\n  path (Restr E scc) v ys ?x7 \\<Longrightarrow> ?x7 \\<in> dom (finished s)\n  path (Restr E scc) v ys y\n  (y, x) \\<in> Restr E scc", "have \"y \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  path (Restr E scc) v ys ?x7 \\<Longrightarrow> ?x7 \\<in> dom (finished s)\n  path (Restr E scc) v ys y\n  (y, x) \\<in> Restr E scc\n\ngoal (1 subgoal):\n 1. y \\<in> dom (finished s)", "by simp"], ["proof (state)\nthis:\n  y \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "moreover"], ["proof (state)\nthis:\n  y \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "from \\<open>(y,x) \\<in> ?E\\<close>"], ["proof (chain)\npicking this:\n  (y, x) \\<in> Restr E scc", "have \"(y,x) \\<in> E\" \"x \\<in> scc\""], ["proof (prove)\nusing this:\n  (y, x) \\<in> Restr E scc\n\ngoal (1 subgoal):\n 1. (y, x) \\<in> E &&& x \\<in> scc", "by auto"], ["proof (state)\nthis:\n  (y, x) \\<in> E\n  x \\<in> scc\n\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> dom (finished s)\n  (y, x) \\<in> E\n  x \\<in> scc", "have \"x \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  y \\<in> dom (finished s)\n  (y, x) \\<in> E\n  x \\<in> scc\n\ngoal (1 subgoal):\n 1. x \\<in> dom (discovered s)", "using finished_imp_succ_discovered"], ["proof (prove)\nusing this:\n  y \\<in> dom (finished s)\n  (y, x) \\<in> E\n  x \\<in> scc\n  \\<lbrakk>?v \\<in> dom (finished s); ?w \\<in> E `` {?v}\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. x \\<in> dom (discovered s)", "by blast"], ["proof (state)\nthis:\n  x \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. \\<And>x xs xa.\n       \\<lbrakk>\\<And>x.\n                   path (Restr E scc) v xs x \\<Longrightarrow>\n                   x \\<in> dom (finished s);\n        path (Restr E scc) v (xs @ [x]) xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> dom (finished s)", "with \\<open>x \\<in> scc\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> scc\n  x \\<in> dom (discovered s)", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> scc\n  x \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. x \\<in> dom (finished s)", "using assms scc_root_scc_tree_trancl tree_path_impl_parenthesis"], ["proof (prove)\nusing this:\n  x \\<in> scc\n  x \\<in> dom (discovered s)\n  v \\<in> dom (finished s)\n  scc_root s v scc\n  \\<lbrakk>scc_root s ?v ?scc; ?x \\<in> ?scc; ?x \\<in> dom (discovered s);\n   ?x \\<noteq> ?v\\<rbrakk>\n  \\<Longrightarrow> (?v, ?x) \\<in> (tree_edges s)\\<^sup>+\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    the_discovered s ?v < the_discovered s ?w \\<and>\n                    the_finished s ?w < the_finished s ?v\n\ngoal (1 subgoal):\n 1. x \\<in> dom (finished s)", "by blast"], ["proof (state)\nthis:\n  x \\<in> dom (finished s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> dom (finished s)\n\ngoal:\nNo subgoals!", "qed"], ["", "context begin"], ["", "interpretation timing_syntax"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma scc_root_disc_le:\n    assumes \"scc_root s v scc\"\n    and \"x \\<in> scc\" \"x \\<in> dom (discovered s)\"\n    shows \"\\<delta> s v \\<le> \\<delta> s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> s v \\<le> \\<delta> s x", "proof (cases \"x = v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = v \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s x\n 2. x \\<noteq> v \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s x", "case False"], ["proof (state)\nthis:\n  x \\<noteq> v\n\ngoal (2 subgoals):\n 1. x = v \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s x\n 2. x \\<noteq> v \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s x", "with assms scc_root_scc_tree_trancl tree_path_disc"], ["proof (chain)\npicking this:\n  scc_root s v scc\n  x \\<in> scc\n  x \\<in> dom (discovered s)\n  \\<lbrakk>scc_root s ?v ?scc; ?x \\<in> ?scc; ?x \\<in> dom (discovered s);\n   ?x \\<noteq> ?v\\<rbrakk>\n  \\<Longrightarrow> (?v, ?x) \\<in> (tree_edges s)\\<^sup>+\n  (?v, ?w) \\<in> (tree_edges s)\\<^sup>+ \\<Longrightarrow>\n  \\<delta> s ?v < \\<delta> s ?w\n  x \\<noteq> v", "have \n      \"\\<delta> s v < \\<delta> s x\""], ["proof (prove)\nusing this:\n  scc_root s v scc\n  x \\<in> scc\n  x \\<in> dom (discovered s)\n  \\<lbrakk>scc_root s ?v ?scc; ?x \\<in> ?scc; ?x \\<in> dom (discovered s);\n   ?x \\<noteq> ?v\\<rbrakk>\n  \\<Longrightarrow> (?v, ?x) \\<in> (tree_edges s)\\<^sup>+\n  (?v, ?w) \\<in> (tree_edges s)\\<^sup>+ \\<Longrightarrow>\n  \\<delta> s ?v < \\<delta> s ?w\n  x \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<delta> s v < \\<delta> s x", "by blast"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s x\n\ngoal (2 subgoals):\n 1. x = v \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s x\n 2. x \\<noteq> v \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> s v < \\<delta> s x\n\ngoal (1 subgoal):\n 1. \\<delta> s v \\<le> \\<delta> s x", "by simp"], ["proof (state)\nthis:\n  \\<delta> s v \\<le> \\<delta> s x\n\ngoal (1 subgoal):\n 1. x = v \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s x", "qed simp"], ["", "lemma scc_root_fin_ge:\n    assumes \"scc_root s v scc\"\n    and \"v \\<in> dom (finished s)\"\n    and \"x \\<in> scc\"\n    shows \"\\<phi> s v \\<ge> \\<phi> s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> s x \\<le> \\<phi> s v", "proof (cases \"x = v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v\n 2. x \\<noteq> v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v", "case False"], ["proof (state)\nthis:\n  x \\<noteq> v\n\ngoal (2 subgoals):\n 1. x = v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v\n 2. x \\<noteq> v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v", "from assms scc_root_finished_impl_scc_finished"], ["proof (chain)\npicking this:\n  scc_root s v scc\n  v \\<in> dom (finished s)\n  x \\<in> scc\n  \\<lbrakk>?v \\<in> dom (finished s); scc_root s ?v ?scc\\<rbrakk>\n  \\<Longrightarrow> ?scc \\<subseteq> dom (finished s)", "have \n      \"x \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  scc_root s v scc\n  v \\<in> dom (finished s)\n  x \\<in> scc\n  \\<lbrakk>?v \\<in> dom (finished s); scc_root s ?v ?scc\\<rbrakk>\n  \\<Longrightarrow> ?scc \\<subseteq> dom (finished s)\n\ngoal (1 subgoal):\n 1. x \\<in> dom (finished s)", "by auto"], ["proof (state)\nthis:\n  x \\<in> dom (finished s)\n\ngoal (2 subgoals):\n 1. x = v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v\n 2. x \\<noteq> v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v", "hence \"x \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  x \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. x \\<in> dom (discovered s)", "using finished_discovered"], ["proof (prove)\nusing this:\n  x \\<in> dom (finished s)\n  dom (finished s) \\<subseteq> dom (discovered s)\n\ngoal (1 subgoal):\n 1. x \\<in> dom (discovered s)", "by auto"], ["proof (state)\nthis:\n  x \\<in> dom (discovered s)\n\ngoal (2 subgoals):\n 1. x = v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v\n 2. x \\<noteq> v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v", "with assms False"], ["proof (chain)\npicking this:\n  scc_root s v scc\n  v \\<in> dom (finished s)\n  x \\<in> scc\n  x \\<noteq> v\n  x \\<in> dom (discovered s)", "have \"(v,x) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  scc_root s v scc\n  v \\<in> dom (finished s)\n  x \\<in> scc\n  x \\<noteq> v\n  x \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "using scc_root_scc_tree_trancl"], ["proof (prove)\nusing this:\n  scc_root s v scc\n  v \\<in> dom (finished s)\n  x \\<in> scc\n  x \\<noteq> v\n  x \\<in> dom (discovered s)\n  \\<lbrakk>scc_root s ?v ?scc; ?x \\<in> ?scc; ?x \\<in> dom (discovered s);\n   ?x \\<noteq> ?v\\<rbrakk>\n  \\<Longrightarrow> (?v, ?x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (v, x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (2 subgoals):\n 1. x = v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v\n 2. x \\<noteq> v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v", "with tree_path_impl_parenthesis assms False"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    \\<delta> s ?v < \\<delta> s ?w \\<and>\n                    \\<phi> s ?w < \\<phi> s ?v\n  scc_root s v scc\n  v \\<in> dom (finished s)\n  x \\<in> scc\n  x \\<noteq> v\n  (v, x) \\<in> (tree_edges s)\\<^sup>+", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    \\<delta> s ?v < \\<delta> s ?w \\<and>\n                    \\<phi> s ?w < \\<phi> s ?v\n  scc_root s v scc\n  v \\<in> dom (finished s)\n  x \\<in> scc\n  x \\<noteq> v\n  (v, x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<phi> s x \\<le> \\<phi> s v", "by force"], ["proof (state)\nthis:\n  \\<phi> s x \\<le> \\<phi> s v\n\ngoal (1 subgoal):\n 1. x = v \\<Longrightarrow> \\<phi> s x \\<le> \\<phi> s v", "qed simp"], ["", "lemma scc_root_is_Min_disc:\n    assumes \"scc_root s v scc\"\n    shows \"Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s v\" (is \"Min ?S = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s v", "proof (rule Min_eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n 2. \\<And>y.\n       y \\<in> \\<delta> s `\n               (scc \\<inter> dom (discovered s)) \\<Longrightarrow>\n       \\<delta> s v \\<le> y\n 3. \\<delta> s v \\<in> \\<delta> s ` (scc \\<inter> dom (discovered s))", "from discovered_finite"], ["proof (chain)\npicking this:\n  finite (dom (discovered s))", "show \"finite ?S\""], ["proof (prove)\nusing this:\n  finite (dom (discovered s))\n\ngoal (1 subgoal):\n 1. finite (\\<delta> s ` (scc \\<inter> dom (discovered s)))", "by auto"], ["proof (state)\nthis:\n  finite (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       y \\<in> \\<delta> s `\n               (scc \\<inter> dom (discovered s)) \\<Longrightarrow>\n       \\<delta> s v \\<le> y\n 2. \\<delta> s v \\<in> \\<delta> s ` (scc \\<inter> dom (discovered s))", "from scc_root_disc_le[OF assms]"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> scc; ?x \\<in> dom (discovered s)\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s ?x", "show \"\\<And>y. y \\<in> ?S \\<Longrightarrow> \\<delta> s v \\<le> y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> scc; ?x \\<in> dom (discovered s)\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s ?x\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> \\<delta> s `\n               (scc \\<inter> dom (discovered s)) \\<Longrightarrow>\n       \\<delta> s v \\<le> y", "by force"], ["proof (state)\nthis:\n  ?y7 \\<in> \\<delta> s ` (scc \\<inter> dom (discovered s)) \\<Longrightarrow>\n  \\<delta> s v \\<le> ?y7\n\ngoal (1 subgoal):\n 1. \\<delta> s v \\<in> \\<delta> s ` (scc \\<inter> dom (discovered s))", "from assms"], ["proof (chain)\npicking this:\n  scc_root s v scc", "have \"v \\<in> scc\" \"v \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  scc_root s v scc\n\ngoal (1 subgoal):\n 1. v \\<in> scc &&& v \\<in> dom (discovered s)", "by (simp_all add: scc_root_def)"], ["proof (state)\nthis:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. \\<delta> s v \\<in> \\<delta> s ` (scc \\<inter> dom (discovered s))", "thus \"\\<delta> s v \\<in> ?S\""], ["proof (prove)\nusing this:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. \\<delta> s v \\<in> \\<delta> s ` (scc \\<inter> dom (discovered s))", "by auto"], ["proof (state)\nthis:\n  \\<delta> s v \\<in> \\<delta> s ` (scc \\<inter> dom (discovered s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Min_disc_is_scc_root:\n    assumes \"v \\<in> scc\" \"v \\<in> dom (discovered s)\"\n    and \"is_scc E scc\"\n    and min: \"\\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\"\n    shows \"scc_root s v scc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_root s v scc", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s v scc", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s v scc", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s v scc", "assume A: \"y \\<in> scc\" \"y \\<in> dom (discovered s)\" \"y \\<noteq> v\""], ["proof (state)\nthis:\n  y \\<in> scc\n  y \\<in> dom (discovered s)\n  y \\<noteq> v\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "with min"], ["proof (chain)\npicking this:\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  y \\<in> scc\n  y \\<in> dom (discovered s)\n  y \\<noteq> v", "have \"\\<delta> s v \\<le> \\<delta> s y\""], ["proof (prove)\nusing this:\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  y \\<in> scc\n  y \\<in> dom (discovered s)\n  y \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<delta> s v \\<le> \\<delta> s y", "by auto"], ["proof (state)\nthis:\n  \\<delta> s v \\<le> \\<delta> s y\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "with assms disc_unequal A"], ["proof (chain)\npicking this:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  \\<lbrakk>?v \\<in> dom (discovered s); ?w \\<in> dom (discovered s);\n   ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?v \\<noteq> \\<delta> s ?w\n  y \\<in> scc\n  y \\<in> dom (discovered s)\n  y \\<noteq> v\n  \\<delta> s v \\<le> \\<delta> s y", "have \"\\<delta> s v < \\<delta> s y\""], ["proof (prove)\nusing this:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  \\<lbrakk>?v \\<in> dom (discovered s); ?w \\<in> dom (discovered s);\n   ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?v \\<noteq> \\<delta> s ?w\n  y \\<in> scc\n  y \\<in> dom (discovered s)\n  y \\<noteq> v\n  \\<delta> s v \\<le> \\<delta> s y\n\ngoal (1 subgoal):\n 1. \\<delta> s v < \\<delta> s y", "by fastforce"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s y\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?y9 \\<in> scc; ?y9 \\<in> dom (discovered s);\n   ?y9 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s ?y9\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "note scc_disc = this"], ["proof (state)\nthis:\n  \\<lbrakk>?y9 \\<in> scc; ?y9 \\<in> dom (discovered s);\n   ?y9 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s ?y9\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?y9 \\<in> scc; ?y9 \\<in> dom (discovered s);\n   ?y9 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s ?y9\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s v scc", "assume A: \"x \\<in> scc \\<inter> dom (discovered s)\""], ["proof (state)\nthis:\n  x \\<in> scc \\<inter> dom (discovered s)\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "have \"x \\<in> (tree_edges s)\\<^sup>* `` {v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> (tree_edges s)\\<^sup>* `` {v}", "proof (cases \"v = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}\n 2. v \\<noteq> x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}", "case False"], ["proof (state)\nthis:\n  v \\<noteq> x\n\ngoal (2 subgoals):\n 1. v = x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}\n 2. v \\<noteq> x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}", "with A scc_disc"], ["proof (chain)\npicking this:\n  x \\<in> scc \\<inter> dom (discovered s)\n  \\<lbrakk>?y9 \\<in> scc; ?y9 \\<in> dom (discovered s);\n   ?y9 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s ?y9\n  v \\<noteq> x", "have \\<delta>: \"\\<delta> s v < \\<delta> s x\""], ["proof (prove)\nusing this:\n  x \\<in> scc \\<inter> dom (discovered s)\n  \\<lbrakk>?y9 \\<in> scc; ?y9 \\<in> dom (discovered s);\n   ?y9 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s ?y9\n  v \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<delta> s v < \\<delta> s x", "by simp"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s x\n\ngoal (2 subgoals):\n 1. v = x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}\n 2. v \\<noteq> x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}", "have \"(v,x) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "proof (cases \"v \\<in> dom (finished s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+\n 2. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "case False"], ["proof (state)\nthis:\n  v \\<notin> dom (finished s)\n\ngoal (2 subgoals):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+\n 2. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with stack_set_def assms"], ["proof (chain)\npicking this:\n  set (stack s) = dom (discovered s) - dom (finished s)\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  v \\<notin> dom (finished s)", "have \n            v_stack: \"v \\<in> set (stack s)\""], ["proof (prove)\nusing this:\n  set (stack s) = dom (discovered s) - dom (finished s)\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  v \\<notin> dom (finished s)\n\ngoal (1 subgoal):\n 1. v \\<in> set (stack s)", "by auto"], ["proof (state)\nthis:\n  v \\<in> set (stack s)\n\ngoal (2 subgoals):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+\n 2. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "proof (cases \"x \\<in> dom (finished s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+\n 2. x \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "case True"], ["proof (state)\nthis:\n  x \\<in> dom (finished s)\n\ngoal (2 subgoals):\n 1. x \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+\n 2. x \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with parenthesis_impl_tree_path_not_finished[of v x] assms \\<delta> False"], ["proof (chain)\npicking this:\n  \\<lbrakk>v \\<in> dom (discovered s); x \\<in> dom (finished s);\n   \\<delta> s v < \\<delta> s x; v \\<notin> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> (v, x) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  \\<delta> s v < \\<delta> s x\n  v \\<notin> dom (finished s)\n  x \\<in> dom (finished s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>v \\<in> dom (discovered s); x \\<in> dom (finished s);\n   \\<delta> s v < \\<delta> s x; v \\<notin> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> (v, x) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  \\<delta> s v < \\<delta> s x\n  v \\<notin> dom (finished s)\n  x \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "by auto"], ["proof (state)\nthis:\n  (v, x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. x \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "case False"], ["proof (state)\nthis:\n  x \\<notin> dom (finished s)\n\ngoal (1 subgoal):\n 1. x \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with A stack_set_def"], ["proof (chain)\npicking this:\n  x \\<in> scc \\<inter> dom (discovered s)\n  set (stack s) = dom (discovered s) - dom (finished s)\n  x \\<notin> dom (finished s)", "have \"x \\<in> set (stack s)\""], ["proof (prove)\nusing this:\n  x \\<in> scc \\<inter> dom (discovered s)\n  set (stack s) = dom (discovered s) - dom (finished s)\n  x \\<notin> dom (finished s)\n\ngoal (1 subgoal):\n 1. x \\<in> set (stack s)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (stack s)\n\ngoal (1 subgoal):\n 1. x \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with v_stack \\<delta>"], ["proof (chain)\npicking this:\n  v \\<in> set (stack s)\n  \\<delta> s v < \\<delta> s x\n  x \\<in> set (stack s)", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> set (stack s)\n  \\<delta> s v < \\<delta> s x\n  x \\<in> set (stack s)\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "using on_stack_is_tree_path"], ["proof (prove)\nusing this:\n  v \\<in> set (stack s)\n  \\<delta> s v < \\<delta> s x\n  x \\<in> set (stack s)\n  \\<lbrakk>?x \\<in> set (stack s); ?y \\<in> set (stack s);\n   \\<delta> s ?x < \\<delta> s ?y\\<rbrakk>\n  \\<Longrightarrow> (?x, ?y) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (v, x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "case True"], ["proof (state)\nthis:\n  v \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "note v_fin = this"], ["proof (state)\nthis:\n  v \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "let ?E = \"Restr E scc\""], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "assume \"(v, y) \\<in> ?E\" and \"v \\<noteq> y\""], ["proof (state)\nthis:\n  (v, y) \\<in> Restr E scc\n  v \\<noteq> y\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "hence *: \"y \\<in> succ v\" \"y \\<in> scc\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> Restr E scc\n  v \\<noteq> y\n\ngoal (1 subgoal):\n 1. y \\<in> E `` {v} &&& y \\<in> scc", "by auto"], ["proof (state)\nthis:\n  y \\<in> E `` {v}\n  y \\<in> scc\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with finished_imp_succ_discovered v_fin"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v \\<in> dom (finished s); ?w \\<in> E `` {?v}\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (discovered s)\n  v \\<in> dom (finished s)\n  y \\<in> E `` {v}\n  y \\<in> scc", "have \n              \"y \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> dom (finished s); ?w \\<in> E `` {?v}\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (discovered s)\n  v \\<in> dom (finished s)\n  y \\<in> E `` {v}\n  y \\<in> scc\n\ngoal (1 subgoal):\n 1. y \\<in> dom (discovered s)", "by simp"], ["proof (state)\nthis:\n  y \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with scc_disc \\<open>v \\<noteq> y\\<close> *"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y9 \\<in> scc; ?y9 \\<in> dom (discovered s);\n   ?y9 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s ?y9\n  v \\<noteq> y\n  y \\<in> E `` {v}\n  y \\<in> scc\n  y \\<in> dom (discovered s)", "have \"\\<delta> s v < \\<delta> s y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y9 \\<in> scc; ?y9 \\<in> dom (discovered s);\n   ?y9 \\<noteq> v\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s ?y9\n  v \\<noteq> y\n  y \\<in> E `` {v}\n  y \\<in> scc\n  y \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. \\<delta> s v < \\<delta> s y", "by simp"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s y\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with * finished_succ_impl_path_in_tree v_fin"], ["proof (chain)\npicking this:\n  y \\<in> E `` {v}\n  y \\<in> scc\n  \\<lbrakk>?v \\<in> dom (finished s); ?w \\<in> E `` {?v};\n   \\<delta> s ?v < \\<delta> s ?w\\<rbrakk>\n  \\<Longrightarrow> (?v, ?w) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y", "have \"(v,y) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  y \\<in> E `` {v}\n  y \\<in> scc\n  \\<lbrakk>?v \\<in> dom (finished s); ?w \\<in> E `` {?v};\n   \\<delta> s ?v < \\<delta> s ?w\\<rbrakk>\n  \\<Longrightarrow> (?v, ?w) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n\ngoal (1 subgoal):\n 1. (v, y) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(v, ?y9) \\<in> Restr E scc; v \\<noteq> ?y9\\<rbrakk>\n  \\<Longrightarrow> (v, ?y9) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "note trancl_base = this"], ["proof (state)\nthis:\n  \\<lbrakk>(v, ?y9) \\<in> Restr E scc; v \\<noteq> ?y9\\<rbrakk>\n  \\<Longrightarrow> (v, ?y9) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "from A"], ["proof (chain)\npicking this:\n  x \\<in> scc \\<inter> dom (discovered s)", "have \"x \\<in> scc\""], ["proof (prove)\nusing this:\n  x \\<in> scc \\<inter> dom (discovered s)\n\ngoal (1 subgoal):\n 1. x \\<in> scc", "by simp"], ["proof (state)\nthis:\n  x \\<in> scc\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with assms"], ["proof (chain)\npicking this:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  x \\<in> scc", "have \"(v,x) \\<in> ?E\\<^sup>*\""], ["proof (prove)\nusing this:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  x \\<in> scc\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (Restr E scc)\\<^sup>*", "by (simp add: is_scc_connected')"], ["proof (state)\nthis:\n  (v, x) \\<in> (Restr E scc)\\<^sup>*\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "with \\<open>v\\<noteq>x\\<close>"], ["proof (chain)\npicking this:\n  v \\<noteq> x\n  (v, x) \\<in> (Restr E scc)\\<^sup>*", "have \"(v,x) \\<in> ?E\\<^sup>+\""], ["proof (prove)\nusing this:\n  v \\<noteq> x\n  (v, x) \\<in> (Restr E scc)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (Restr E scc)\\<^sup>+", "by (metis rtrancl_eq_or_trancl)"], ["proof (state)\nthis:\n  (v, x) \\<in> (Restr E scc)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, x) \\<in> (tree_edges s)\\<^sup>+", "thus ?thesis"], ["proof (prove)\nusing this:\n  (v, x) \\<in> (Restr E scc)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "using \\<open>v\\<noteq>x\\<close>"], ["proof (prove)\nusing this:\n  (v, x) \\<in> (Restr E scc)\\<^sup>+\n  v \\<noteq> x\n\ngoal (1 subgoal):\n 1. (v, x) \\<in> (tree_edges s)\\<^sup>+", "proof (induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>(v, y) \\<in> Restr E scc; v \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E scc)\\<^sup>+;\n        (y, z) \\<in> Restr E scc;\n        v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        v \\<noteq> z\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "case (base y)"], ["proof (state)\nthis:\n  (v, y) \\<in> Restr E scc\n  v \\<noteq> y\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>(v, y) \\<in> Restr E scc; v \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E scc)\\<^sup>+;\n        (y, z) \\<in> Restr E scc;\n        v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        v \\<noteq> z\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with trancl_base"], ["proof (chain)\npicking this:\n  \\<lbrakk>(v, ?y9) \\<in> Restr E scc; v \\<noteq> ?y9\\<rbrakk>\n  \\<Longrightarrow> (v, ?y9) \\<in> (tree_edges s)\\<^sup>+\n  (v, y) \\<in> Restr E scc\n  v \\<noteq> y", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>(v, ?y9) \\<in> Restr E scc; v \\<noteq> ?y9\\<rbrakk>\n  \\<Longrightarrow> (v, ?y9) \\<in> (tree_edges s)\\<^sup>+\n  (v, y) \\<in> Restr E scc\n  v \\<noteq> y\n\ngoal (1 subgoal):\n 1. (v, y) \\<in> (tree_edges s)\\<^sup>+", "."], ["proof (state)\nthis:\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E scc)\\<^sup>+;\n        (y, z) \\<in> Restr E scc;\n        v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        v \\<noteq> z\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E scc)\\<^sup>+;\n        (y, z) \\<in> Restr E scc;\n        v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        v \\<noteq> z\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "case (step y z)"], ["proof (state)\nthis:\n  (v, y) \\<in> (Restr E scc)\\<^sup>+\n  (y, z) \\<in> Restr E scc\n  v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E scc)\\<^sup>+;\n        (y, z) \\<in> Restr E scc;\n        v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        v \\<noteq> z\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "proof (cases \"v = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "case True"], ["proof (state)\nthis:\n  v = y\n\ngoal (2 subgoals):\n 1. v = y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with step trancl_base"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (Restr E scc)\\<^sup>+\n  (y, z) \\<in> Restr E scc\n  v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> z\n  \\<lbrakk>(v, ?y9) \\<in> Restr E scc; v \\<noteq> ?y9\\<rbrakk>\n  \\<Longrightarrow> (v, ?y9) \\<in> (tree_edges s)\\<^sup>+\n  v = y", "show ?thesis"], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E scc)\\<^sup>+\n  (y, z) \\<in> Restr E scc\n  v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> z\n  \\<lbrakk>(v, ?y9) \\<in> Restr E scc; v \\<noteq> ?y9\\<rbrakk>\n  \\<Longrightarrow> (v, ?y9) \\<in> (tree_edges s)\\<^sup>+\n  v = y\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "case False"], ["proof (state)\nthis:\n  v \\<noteq> y\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with step"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (Restr E scc)\\<^sup>+\n  (y, z) \\<in> Restr E scc\n  v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> z\n  v \\<noteq> y", "have \"(v,y) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E scc)\\<^sup>+\n  (y, z) \\<in> Restr E scc\n  v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> z\n  v \\<noteq> y\n\ngoal (1 subgoal):\n 1. (v, y) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with tree_path_impl_parenthesis[OF _ v_fin]"], ["proof (chain)\npicking this:\n  (v, ?w) \\<in> (tree_edges s)\\<^sup>+ \\<Longrightarrow>\n  ?w \\<in> dom (finished s) \\<and>\n  \\<delta> s v < \\<delta> s ?w \\<and> \\<phi> s ?w < \\<phi> s v\n  (v, y) \\<in> (tree_edges s)\\<^sup>+", "have \n                y_fin: \"y \\<in> dom (finished s)\" \n                and y_t: \"\\<delta> s v < \\<delta> s y\" \"\\<phi> s y < \\<phi> s v\""], ["proof (prove)\nusing this:\n  (v, ?w) \\<in> (tree_edges s)\\<^sup>+ \\<Longrightarrow>\n  ?w \\<in> dom (finished s) \\<and>\n  \\<delta> s v < \\<delta> s ?w \\<and> \\<phi> s ?w < \\<phi> s v\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. y \\<in> dom (finished s) &&&\n    \\<delta> s v < \\<delta> s y &&& \\<phi> s y < \\<phi> s v", "by auto"], ["proof (state)\nthis:\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n  \\<phi> s y < \\<phi> s v\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with finished_discovered"], ["proof (chain)\npicking this:\n  dom (finished s) \\<subseteq> dom (discovered s)\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n  \\<phi> s y < \\<phi> s v", "have y_disc: \"y \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  dom (finished s) \\<subseteq> dom (discovered s)\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n  \\<phi> s y < \\<phi> s v\n\ngoal (1 subgoal):\n 1. y \\<in> dom (discovered s)", "by auto"], ["proof (state)\nthis:\n  y \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "from step"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (Restr E scc)\\<^sup>+\n  (y, z) \\<in> Restr E scc\n  v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> z", "have *: \"z \\<in> succ y\" \"z \\<in> scc\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E scc)\\<^sup>+\n  (y, z) \\<in> Restr E scc\n  v \\<noteq> y \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<noteq> z\n\ngoal (1 subgoal):\n 1. z \\<in> E `` {y} &&& z \\<in> scc", "by auto"], ["proof (state)\nthis:\n  z \\<in> E `` {y}\n  z \\<in> scc\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with finished_imp_succ_discovered y_fin"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v \\<in> dom (finished s); ?w \\<in> E `` {?v}\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (discovered s)\n  y \\<in> dom (finished s)\n  z \\<in> E `` {y}\n  z \\<in> scc", "have \n                z_disc: \"z \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> dom (finished s); ?w \\<in> E `` {?v}\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (discovered s)\n  y \\<in> dom (finished s)\n  z \\<in> E `` {y}\n  z \\<in> scc\n\ngoal (1 subgoal):\n 1. z \\<in> dom (discovered s)", "by simp"], ["proof (state)\nthis:\n  z \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with * \\<open>v\\<noteq>z\\<close>"], ["proof (chain)\npicking this:\n  z \\<in> E `` {y}\n  z \\<in> scc\n  v \\<noteq> z\n  z \\<in> dom (discovered s)", "have \\<delta>z: \"\\<delta> s v < \\<delta> s z\""], ["proof (prove)\nusing this:\n  z \\<in> E `` {y}\n  z \\<in> scc\n  v \\<noteq> z\n  z \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. \\<delta> s v < \\<delta> s z", "by (simp add: scc_disc)"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "from * edges_covered finished_no_pending[OF \\<open>y \\<in> dom (finished s)\\<close>] \n                   y_disc"], ["proof (chain)\npicking this:\n  z \\<in> E `` {y}\n  z \\<in> scc\n  E \\<inter> dom (discovered s) \\<times> UNIV - pending s =\n  tree_edges s \\<union> cross_edges s \\<union> back_edges s\n  pending s `` {y} = {}\n  y \\<in> dom (discovered s)", "have \"(y,z) \\<in> edges s\""], ["proof (prove)\nusing this:\n  z \\<in> E `` {y}\n  z \\<in> scc\n  E \\<inter> dom (discovered s) \\<times> UNIV - pending s =\n  tree_edges s \\<union> cross_edges s \\<union> back_edges s\n  pending s `` {y} = {}\n  y \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s", "by auto"], ["proof (state)\nthis:\n  (y, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. v \\<noteq> y \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "thus ?thesis"], ["proof (prove)\nusing this:\n  (y, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. (y, z) \\<in> tree_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 3. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume \"(y,z) \\<in> tree_edges s\""], ["proof (state)\nthis:\n  (y, z) \\<in> tree_edges s\n\ngoal (3 subgoals):\n 1. (y, z) \\<in> tree_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 3. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with \\<open>(v,y) \\<in> (tree_edges s)\\<^sup>+\\<close>"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n  (y, z) \\<in> tree_edges s", "show ?thesis"], ["proof (prove)\nusing this:\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n  (y, z) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", ".."], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume CE: \"(y,z) \\<in> cross_edges s\""], ["proof (state)\nthis:\n  (y, z) \\<in> cross_edges s\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with cross_edges_finished_decr y_fin y_t"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?u, ?v) \\<in> cross_edges s; ?u \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> \\<phi> s ?v < \\<phi> s ?u\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n  \\<phi> s y < \\<phi> s v\n  (y, z) \\<in> cross_edges s", "have \"\\<phi> s z < \\<phi> s v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?u, ?v) \\<in> cross_edges s; ?u \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> \\<phi> s ?v < \\<phi> s ?u\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n  \\<phi> s y < \\<phi> s v\n  (y, z) \\<in> cross_edges s\n\ngoal (1 subgoal):\n 1. \\<phi> s z < \\<phi> s v", "by force"], ["proof (state)\nthis:\n  \\<phi> s z < \\<phi> s v\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  \\<phi> s z < \\<phi> s v\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "note \\<delta>z"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "from CE cross_edges_target_finished"], ["proof (chain)\npicking this:\n  (y, z) \\<in> cross_edges s\n  (?u, ?v) \\<in> cross_edges s \\<Longrightarrow> ?v \\<in> dom (finished s)", "have \n                  \"z \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> cross_edges s\n  (?u, ?v) \\<in> cross_edges s \\<Longrightarrow> ?v \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. z \\<in> dom (finished s)", "by simp"], ["proof (state)\nthis:\n  z \\<in> dom (finished s)\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "using parenthesis_impl_tree_path[OF v_fin]"], ["proof (prove)\nusing this:\n  \\<phi> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n  \\<lbrakk>?w \\<in> dom (finished s); \\<delta> s v < \\<delta> s ?w;\n   \\<phi> s ?w < \\<phi> s v\\<rbrakk>\n  \\<Longrightarrow> (v, ?w) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "by metis"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume BE: \"(y,z) \\<in> back_edges s\""], ["proof (state)\nthis:\n  (y, z) \\<in> back_edges s\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with back_edge_disc_lt_fin y_fin y_t"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?v, ?w) \\<in> back_edges s; ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?w < \\<phi> s ?v\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n  \\<phi> s y < \\<phi> s v\n  (y, z) \\<in> back_edges s", "have \n                  \"\\<delta> s z < \\<phi> s v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v, ?w) \\<in> back_edges s; ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?w < \\<phi> s ?v\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n  \\<phi> s y < \\<phi> s v\n  (y, z) \\<in> back_edges s\n\ngoal (1 subgoal):\n 1. \\<delta> s z < \\<phi> s v", "by force"], ["proof (state)\nthis:\n  \\<delta> s z < \\<phi> s v\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  \\<delta> s z < \\<phi> s v\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "note \\<delta>z"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "note z_disc"], ["proof (state)\nthis:\n  z \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "ultimately"], ["proof (chain)\npicking this:\n  \\<delta> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)", "have \"z \\<in> dom (finished s)\" \"\\<phi> s z < \\<phi> s v\""], ["proof (prove)\nusing this:\n  \\<delta> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. z \\<in> dom (finished s) &&& \\<phi> s z < \\<phi> s v", "using parenthesis_contained[OF v_fin]"], ["proof (prove)\nusing this:\n  \\<delta> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)\n  \\<lbrakk>?w \\<in> dom (discovered s); \\<delta> s v < \\<delta> s ?w;\n   \\<delta> s ?w < \\<phi> s v\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    \\<phi> s ?w < \\<phi> s v\n\ngoal (1 subgoal):\n 1. z \\<in> dom (finished s) &&& \\<phi> s z < \\<phi> s v", "by simp_all"], ["proof (state)\nthis:\n  z \\<in> dom (finished s)\n  \\<phi> s z < \\<phi> s v\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with \\<delta>z"], ["proof (chain)\npicking this:\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n  \\<phi> s z < \\<phi> s v", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n  \\<phi> s z < \\<phi> s v\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "using parenthesis_impl_tree_path[OF v_fin]"], ["proof (prove)\nusing this:\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n  \\<phi> s z < \\<phi> s v\n  \\<lbrakk>?w \\<in> dom (finished s); \\<delta> s v < \\<delta> s ?w;\n   \\<phi> s ?w < \\<phi> s v\\<rbrakk>\n  \\<Longrightarrow> (v, ?w) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "by metis"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (2 subgoals):\n 1. v = x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}\n 2. v \\<noteq> x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}", "thus ?thesis"], ["proof (prove)\nusing this:\n  (v, x) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. x \\<in> (tree_edges s)\\<^sup>* `` {v}", "by auto"], ["proof (state)\nthis:\n  x \\<in> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. v = x \\<Longrightarrow> x \\<in> (tree_edges s)\\<^sup>* `` {v}", "qed simp"], ["proof (state)\nthis:\n  x \\<in> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "}"], ["proof (state)\nthis:\n  ?x9 \\<in> scc \\<inter> dom (discovered s) \\<Longrightarrow>\n  ?x9 \\<in> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "hence \"scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\""], ["proof (prove)\nusing this:\n  ?x9 \\<in> scc \\<inter> dom (discovered s) \\<Longrightarrow>\n  ?x9 \\<in> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. scc \\<inter> dom (discovered s)\n    \\<subseteq> (tree_edges s)\\<^sup>* `` {v}", "by blast"], ["proof (state)\nthis:\n  scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "with assms"], ["proof (chain)\npicking this:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {v}", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> scc\n  v \\<in> dom (discovered s)\n  is_scc E scc\n  \\<delta> s v = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. scc_root s v scc", "by (auto intro: scc_rootI)"], ["proof (state)\nthis:\n  scc_root s v scc\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_root_iff_Min_disc:\n    assumes \"is_scc E scc\" \"r \\<in> scc\" \"r \\<in> dom (discovered s)\"\n    shows \"scc_root s r scc \\<longleftrightarrow> Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_root s r scc =\n    (Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow>\n    Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r\n 2. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n    \\<delta> s r \\<Longrightarrow>\n    scc_root s r scc", "assume \"?L\""], ["proof (state)\nthis:\n  scc_root s r scc\n\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow>\n    Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r\n 2. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n    \\<delta> s r \\<Longrightarrow>\n    scc_root s r scc", "with scc_root_is_Min_disc"], ["proof (chain)\npicking this:\n  scc_root s ?v ?scc \\<Longrightarrow>\n  Min (\\<delta> s ` (?scc \\<inter> dom (discovered s))) = \\<delta> s ?v\n  scc_root s r scc", "show \"?R\""], ["proof (prove)\nusing this:\n  scc_root s ?v ?scc \\<Longrightarrow>\n  Min (\\<delta> s ` (?scc \\<inter> dom (discovered s))) = \\<delta> s ?v\n  scc_root s r scc\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r", "."], ["proof (state)\nthis:\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n    \\<delta> s r \\<Longrightarrow>\n    scc_root s r scc", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n    \\<delta> s r \\<Longrightarrow>\n    scc_root s r scc", "assume \"?R\""], ["proof (state)\nthis:\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n    \\<delta> s r \\<Longrightarrow>\n    scc_root s r scc", "with Min_disc_is_scc_root assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v \\<in> ?scc; ?v \\<in> dom (discovered s); is_scc E ?scc;\n   \\<delta> s ?v =\n   Min (\\<delta> s ` (?scc \\<inter> dom (discovered s)))\\<rbrakk>\n  \\<Longrightarrow> scc_root s ?v ?scc\n  is_scc E scc\n  r \\<in> scc\n  r \\<in> dom (discovered s)\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r", "show \"?L\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> ?scc; ?v \\<in> dom (discovered s); is_scc E ?scc;\n   \\<delta> s ?v =\n   Min (\\<delta> s ` (?scc \\<inter> dom (discovered s)))\\<rbrakk>\n  \\<Longrightarrow> scc_root s ?v ?scc\n  is_scc E scc\n  r \\<in> scc\n  r \\<in> dom (discovered s)\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) = \\<delta> s r\n\ngoal (1 subgoal):\n 1. scc_root s r scc", "by simp"], ["proof (state)\nthis:\n  scc_root s r scc\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_root_exists:\n    assumes \"is_scc E scc\"\n    and scc: \"scc \\<inter> dom (discovered s) \\<noteq> {}\"\n    shows \"\\<exists>r. scc_root s r scc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "let ?S = \"scc \\<inter> dom (discovered s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "from discovered_finite"], ["proof (chain)\npicking this:\n  finite (dom (discovered s))", "have \"finite (\\<delta> s`?S)\""], ["proof (prove)\nusing this:\n  finite (dom (discovered s))\n\ngoal (1 subgoal):\n 1. finite (\\<delta> s ` (scc \\<inter> dom (discovered s)))", "by auto"], ["proof (state)\nthis:\n  finite (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "moreover"], ["proof (state)\nthis:\n  finite (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "from scc"], ["proof (chain)\npicking this:\n  scc \\<inter> dom (discovered s) \\<noteq> {}", "have \"\\<delta> s ` ?S \\<noteq> {}\""], ["proof (prove)\nusing this:\n  scc \\<inter> dom (discovered s) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<delta> s ` (scc \\<inter> dom (discovered s)) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  \\<delta> s ` (scc \\<inter> dom (discovered s)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "moreover"], ["proof (state)\nthis:\n  \\<delta> s ` (scc \\<inter> dom (discovered s)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "have \"\\<And>(x::nat) f A. x \\<notin> f ` A \\<or> (\\<exists>y. x = f y \\<and> y \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f A.\n       x \\<notin> f ` A \\<or> (\\<exists>y. x = f y \\<and> y \\<in> A)", "by blast \n      \\<comment> \\<open>autogenerated by sledgehammer\\<close>"], ["proof (state)\nthis:\n  ?x7 \\<notin> ?f7 ` ?A7 \\<or> (\\<exists>y. ?x7 = ?f7 y \\<and> y \\<in> ?A7)\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "ultimately"], ["proof (chain)\npicking this:\n  finite (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  \\<delta> s ` (scc \\<inter> dom (discovered s)) \\<noteq> {}\n  ?x7 \\<notin> ?f7 ` ?A7 \\<or> (\\<exists>y. ?x7 = ?f7 y \\<and> y \\<in> ?A7)", "have \"\\<exists>x \\<in> ?S. \\<delta> s x = Min (\\<delta> s ` ?S)\""], ["proof (prove)\nusing this:\n  finite (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  \\<delta> s ` (scc \\<inter> dom (discovered s)) \\<noteq> {}\n  ?x7 \\<notin> ?f7 ` ?A7 \\<or> (\\<exists>y. ?x7 = ?f7 y \\<and> y \\<in> ?A7)\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>scc \\<inter> dom (discovered s).\n       \\<delta> s x = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))", "by (metis Min_in)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>scc \\<inter> dom (discovered s).\n     \\<delta> s x = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "with Min_disc_is_scc_root \\<open>is_scc E scc\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v \\<in> ?scc; ?v \\<in> dom (discovered s); is_scc E ?scc;\n   \\<delta> s ?v =\n   Min (\\<delta> s ` (?scc \\<inter> dom (discovered s)))\\<rbrakk>\n  \\<Longrightarrow> scc_root s ?v ?scc\n  is_scc E scc\n  \\<exists>x\\<in>scc \\<inter> dom (discovered s).\n     \\<delta> s x = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> ?scc; ?v \\<in> dom (discovered s); is_scc E ?scc;\n   \\<delta> s ?v =\n   Min (\\<delta> s ` (?scc \\<inter> dom (discovered s)))\\<rbrakk>\n  \\<Longrightarrow> scc_root s ?v ?scc\n  is_scc E scc\n  \\<exists>x\\<in>scc \\<inter> dom (discovered s).\n     \\<delta> s x = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r scc", "by auto"], ["proof (state)\nthis:\n  \\<exists>r. scc_root s r scc\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_root_of_node_exists:\n    assumes \"v \\<in> dom (discovered s)\"\n    shows \"\\<exists>r. scc_root s r (scc_of E v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r (scc_of E v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r (scc_of E v)", "have \"is_scc E (scc_of E v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_scc E (scc_of E v)", "by simp"], ["proof (state)\nthis:\n  is_scc E (scc_of E v)\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r (scc_of E v)", "moreover"], ["proof (state)\nthis:\n  is_scc E (scc_of E v)\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r (scc_of E v)", "have \"v \\<in> scc_of E v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> scc_of E v", "by simp"], ["proof (state)\nthis:\n  v \\<in> scc_of E v\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r (scc_of E v)", "with assms"], ["proof (chain)\npicking this:\n  v \\<in> dom (discovered s)\n  v \\<in> scc_of E v", "have \"scc_of E v \\<inter> dom (discovered s) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  v \\<in> dom (discovered s)\n  v \\<in> scc_of E v\n\ngoal (1 subgoal):\n 1. scc_of E v \\<inter> dom (discovered s) \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  scc_of E v \\<inter> dom (discovered s) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r (scc_of E v)", "ultimately"], ["proof (chain)\npicking this:\n  is_scc E (scc_of E v)\n  scc_of E v \\<inter> dom (discovered s) \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  is_scc E (scc_of E v)\n  scc_of E v \\<inter> dom (discovered s) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r (scc_of E v)", "using scc_root_exists"], ["proof (prove)\nusing this:\n  is_scc E (scc_of E v)\n  scc_of E v \\<inter> dom (discovered s) \\<noteq> {}\n  \\<lbrakk>is_scc E ?scc;\n   ?scc \\<inter> dom (discovered s) \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>r. scc_root s r ?scc\n\ngoal (1 subgoal):\n 1. \\<exists>r. scc_root s r (scc_of E v)", "by metis"], ["proof (state)\nthis:\n  \\<exists>r. scc_root s r (scc_of E v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_root_transfer':\n    assumes \"discovered s = discovered s'\" \"tree_edges s = tree_edges s'\"\n    shows \"scc_root s r scc \\<longleftrightarrow> scc_root s' r scc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "unfolding scc_root_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_scc E scc \\<and>\n     r \\<in> scc \\<and>\n     r \\<in> dom (discovered s) \\<and>\n     scc \\<inter> dom (discovered s)\n     \\<subseteq> (tree_edges s)\\<^sup>* `` {r}) =\n    (is_scc E scc \\<and>\n     r \\<in> scc \\<and>\n     r \\<in> dom (discovered s') \\<and>\n     scc \\<inter> dom (discovered s')\n     \\<subseteq> (tree_edges s')\\<^sup>* `` {r})", "by (simp add: assms)"], ["", "lemma scc_root_transfer:\n    assumes inv: \"DFS_invar G param s'\"\n    assumes r_d: \"r \\<in> dom (discovered s)\"\n    assumes d: \"dom (discovered s) \\<subseteq> dom (discovered s')\"\n               \"\\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\"\n               \"\\<forall>x\\<in>dom (discovered s') - dom (discovered s). \\<delta> s' x \\<ge> counter s\"\n    and t: \"tree_edges s \\<subseteq> tree_edges s'\"\n    shows \"scc_root s r scc \\<longleftrightarrow> scc_root s' r scc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "interpret s': DFS_invar where s=s'"], ["proof (prove)\ngoal (1 subgoal):\n 1. DFS_invar G param s'", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "let ?sd = \"scc \\<inter> dom (discovered s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "let ?sd' = \"scc \\<inter> dom (discovered s')\""], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "let ?sdd = \"scc \\<inter> (dom (discovered s') - dom (discovered s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "assume r_s: \"r \\<in> scc\" \"is_scc E scc\""], ["proof (state)\nthis:\n  r \\<in> scc\n  is_scc E scc\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "with r_d"], ["proof (chain)\npicking this:\n  r \\<in> dom (discovered s)\n  r \\<in> scc\n  is_scc E scc", "have ne: \"\\<delta> s'`?sd \\<noteq> {}\""], ["proof (prove)\nusing this:\n  r \\<in> dom (discovered s)\n  r \\<in> scc\n  is_scc E scc\n\ngoal (1 subgoal):\n 1. \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "from discovered_finite"], ["proof (chain)\npicking this:\n  finite (dom (discovered s))", "have fin: \"finite (\\<delta> s' ` ?sd)\""], ["proof (prove)\nusing this:\n  finite (dom (discovered s))\n\ngoal (1 subgoal):\n 1. finite (\\<delta> s' ` (scc \\<inter> dom (discovered s)))", "by simp"], ["proof (state)\nthis:\n  finite (\\<delta> s' ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "from timing_less_counter d"], ["proof (chain)\npicking this:\n  ?v \\<in> dom (discovered s) \\<Longrightarrow> \\<delta> s ?v < counter s\n  ?v \\<in> dom (finished s) \\<Longrightarrow> \\<phi> s ?v < counter s\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x", "have \"\\<And>x. x\\<in>\\<delta> s' ` ?sd \\<Longrightarrow> x < counter s\""], ["proof (prove)\nusing this:\n  ?v \\<in> dom (discovered s) \\<Longrightarrow> \\<delta> s ?v < counter s\n  ?v \\<in> dom (finished s) \\<Longrightarrow> \\<phi> s ?v < counter s\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<delta> s' `\n               (scc \\<inter> dom (discovered s)) \\<Longrightarrow>\n       x < counter s", "by auto"], ["proof (state)\nthis:\n  ?x7\n  \\<in> \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<Longrightarrow>\n  ?x7 < counter s\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "hence Min: \"Min (\\<delta> s' ` ?sd) < counter s\""], ["proof (prove)\nusing this:\n  ?x7\n  \\<in> \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<Longrightarrow>\n  ?x7 < counter s\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) < counter s", "using Min_less_iff[OF fin] ne"], ["proof (prove)\nusing this:\n  ?x7\n  \\<in> \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<Longrightarrow>\n  ?x7 < counter s\n  \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<noteq>\n  {} \\<Longrightarrow>\n  (Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) < ?x) =\n  (\\<exists>a\\<in>\\<delta> s' ` (scc \\<inter> dom (discovered s)). a < ?x)\n  \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) < counter s", "by blast"], ["proof (state)\nthis:\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) < counter s\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "from d"], ["proof (chain)\npicking this:\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x", "have \"Min (\\<delta> s ` ?sd) = Min (\\<delta> s' ` ?sd)\""], ["proof (prove)\nusing this:\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s)))", "by (auto simp: image_def)"], ["proof (state)\nthis:\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "also"], ["proof (state)\nthis:\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "from d"], ["proof (chain)\npicking this:\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x", "have \"?sd' = ?sd \\<union> ?sdd\""], ["proof (prove)\nusing this:\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x\n\ngoal (1 subgoal):\n 1. scc \\<inter> dom (discovered s') =\n    scc \\<inter> dom (discovered s) \\<union>\n    scc \\<inter> (dom (discovered s') - dom (discovered s))", "by auto"], ["proof (state)\nthis:\n  scc \\<inter> dom (discovered s') =\n  scc \\<inter> dom (discovered s) \\<union>\n  scc \\<inter> (dom (discovered s') - dom (discovered s))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "hence *: \"\\<delta> s' ` ?sd' = \\<delta> s' ` ?sd \\<union> \\<delta> s' ` ?sdd\""], ["proof (prove)\nusing this:\n  scc \\<inter> dom (discovered s') =\n  scc \\<inter> dom (discovered s) \\<union>\n  scc \\<inter> (dom (discovered s') - dom (discovered s))\n\ngoal (1 subgoal):\n 1. \\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n    \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n    \\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s)))", "by auto"], ["proof (state)\nthis:\n  \\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n  \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n  \\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s)))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "hence \"Min (\\<delta> s' ` ?sd) = Min (\\<delta> s' ` ?sd')\""], ["proof (prove)\nusing this:\n  \\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n  \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n  \\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s)))\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) =\n    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "proof (cases \"?sdd = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n 2. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "case False"], ["proof (state)\nthis:\n  scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n 2. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "from d"], ["proof (chain)\npicking this:\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x", "have \"\\<And>x. x \\<in> \\<delta> s' ` ?sdd \\<Longrightarrow> x \\<ge> counter s\""], ["proof (prove)\nusing this:\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<delta> s' `\n               (scc \\<inter>\n                (dom (discovered s') -\n                 dom (discovered s))) \\<Longrightarrow>\n       counter s \\<le> x", "by auto"], ["proof (state)\nthis:\n  ?x7\n  \\<in> \\<delta> s' `\n        (scc \\<inter>\n         (dom (discovered s') - dom (discovered s))) \\<Longrightarrow>\n  counter s \\<le> ?x7\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n 2. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "moreover"], ["proof (state)\nthis:\n  ?x7\n  \\<in> \\<delta> s' `\n        (scc \\<inter>\n         (dom (discovered s') - dom (discovered s))) \\<Longrightarrow>\n  counter s \\<le> ?x7\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n 2. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "from False"], ["proof (chain)\npicking this:\n  scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq> {}", "have ne': \"\\<delta> s' ` ?sdd \\<noteq> {}\""], ["proof (prove)\nusing this:\n  scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<delta> s' `\n    (scc \\<inter> (dom (discovered s') - dom (discovered s))) \\<noteq>\n    {}", "by blast"], ["proof (state)\nthis:\n  \\<delta> s' `\n  (scc \\<inter> (dom (discovered s') - dom (discovered s))) \\<noteq>\n  {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n 2. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "moreover"], ["proof (state)\nthis:\n  \\<delta> s' `\n  (scc \\<inter> (dom (discovered s') - dom (discovered s))) \\<noteq>\n  {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n 2. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "from s'.discovered_finite"], ["proof (chain)\npicking this:\n  finite (dom (discovered s'))", "have fin': \"finite (\\<delta> s' ` ?sdd)\""], ["proof (prove)\nusing this:\n  finite (dom (discovered s'))\n\ngoal (1 subgoal):\n 1. finite\n     (\\<delta> s' `\n      (scc \\<inter> (dom (discovered s') - dom (discovered s))))", "by blast"], ["proof (state)\nthis:\n  finite\n   (\\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s))))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n 2. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "ultimately"], ["proof (chain)\npicking this:\n  ?x7\n  \\<in> \\<delta> s' `\n        (scc \\<inter>\n         (dom (discovered s') - dom (discovered s))) \\<Longrightarrow>\n  counter s \\<le> ?x7\n  \\<delta> s' `\n  (scc \\<inter> (dom (discovered s') - dom (discovered s))) \\<noteq>\n  {}\n  finite\n   (\\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s))))", "have \"Min (\\<delta> s' ` ?sdd) \\<ge> counter s\""], ["proof (prove)\nusing this:\n  ?x7\n  \\<in> \\<delta> s' `\n        (scc \\<inter>\n         (dom (discovered s') - dom (discovered s))) \\<Longrightarrow>\n  counter s \\<le> ?x7\n  \\<delta> s' `\n  (scc \\<inter> (dom (discovered s') - dom (discovered s))) \\<noteq>\n  {}\n  finite\n   (\\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s))))\n\ngoal (1 subgoal):\n 1. counter s\n    \\<le> Min (\\<delta> s' `\n               (scc \\<inter> (dom (discovered s') - dom (discovered s))))", "using Min_ge_iff"], ["proof (prove)\nusing this:\n  ?x7\n  \\<in> \\<delta> s' `\n        (scc \\<inter>\n         (dom (discovered s') - dom (discovered s))) \\<Longrightarrow>\n  counter s \\<le> ?x7\n  \\<delta> s' `\n  (scc \\<inter> (dom (discovered s') - dom (discovered s))) \\<noteq>\n  {}\n  finite\n   (\\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s))))\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> (?x \\<le> Min ?A) = (\\<forall>a\\<in>?A. ?x \\<le> a)\n\ngoal (1 subgoal):\n 1. counter s\n    \\<le> Min (\\<delta> s' `\n               (scc \\<inter> (dom (discovered s') - dom (discovered s))))", "by metis"], ["proof (state)\nthis:\n  counter s\n  \\<le> Min (\\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s))))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n 2. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "with Min Min_Un[OF fin ne fin' ne'] *"], ["proof (chain)\npicking this:\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) < counter s\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n       \\<delta> s' `\n       (scc \\<inter> (dom (discovered s') - dom (discovered s)))) =\n  min (Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))))\n   (Min (\\<delta> s' `\n         (scc \\<inter> (dom (discovered s') - dom (discovered s)))))\n  \\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n  \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n  \\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s)))\n  counter s\n  \\<le> Min (\\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s))))", "show ?thesis"], ["proof (prove)\nusing this:\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) < counter s\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n       \\<delta> s' `\n       (scc \\<inter> (dom (discovered s') - dom (discovered s)))) =\n  min (Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))))\n   (Min (\\<delta> s' `\n         (scc \\<inter> (dom (discovered s') - dom (discovered s)))))\n  \\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n  \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n  \\<delta> s' ` (scc \\<inter> (dom (discovered s') - dom (discovered s)))\n  counter s\n  \\<le> Min (\\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s))))\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) =\n    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "by simp"], ["proof (state)\nthis:\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) =\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<delta> s' ` (scc \\<inter> dom (discovered s')) =\n             \\<delta> s' ` (scc \\<inter> dom (discovered s)) \\<union>\n             \\<delta> s' `\n             (scc \\<inter> (dom (discovered s') - dom (discovered s)));\n     scc \\<inter> (dom (discovered s') - dom (discovered s)) = {}\\<rbrakk>\n    \\<Longrightarrow> Min (\\<delta> s' `\n                           (scc \\<inter> dom (discovered s))) =\n                      Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "qed simp"], ["proof (state)\nthis:\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s))) =\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "finally"], ["proof (chain)\npicking this:\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "have \"Min (\\<delta> s ` ?sd) = Min (\\<delta> s' ` ?sd')\""], ["proof (prove)\nusing this:\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "."], ["proof (state)\nthis:\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "}"], ["proof (state)\nthis:\n  \\<lbrakk>r \\<in> scc; is_scc E scc\\<rbrakk>\n  \\<Longrightarrow> Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n                    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "note aux = this"], ["proof (state)\nthis:\n  \\<lbrakk>r \\<in> scc; is_scc E scc\\<rbrakk>\n  \\<Longrightarrow> Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n                    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. scc_root s r scc = scc_root s' r scc", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow> scc_root s' r scc\n 2. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "assume r: \"scc_root s r scc\""], ["proof (state)\nthis:\n  scc_root s r scc\n\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow> scc_root s' r scc\n 2. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "from r_d d"], ["proof (chain)\npicking this:\n  r \\<in> dom (discovered s)\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x", "have \"\\<delta> s' r = \\<delta> s r\""], ["proof (prove)\nusing this:\n  r \\<in> dom (discovered s)\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x\n\ngoal (1 subgoal):\n 1. \\<delta> s' r = \\<delta> s r", "by simp"], ["proof (state)\nthis:\n  \\<delta> s' r = \\<delta> s r\n\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow> scc_root s' r scc\n 2. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "also"], ["proof (state)\nthis:\n  \\<delta> s' r = \\<delta> s r\n\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow> scc_root s' r scc\n 2. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "from r scc_root_is_Min_disc"], ["proof (chain)\npicking this:\n  scc_root s r scc\n  scc_root s ?v ?scc \\<Longrightarrow>\n  Min (\\<delta> s ` (?scc \\<inter> dom (discovered s))) = \\<delta> s ?v", "have \"\\<delta> s r = Min (\\<delta> s ` ?sd)\""], ["proof (prove)\nusing this:\n  scc_root s r scc\n  scc_root s ?v ?scc \\<Longrightarrow>\n  Min (\\<delta> s ` (?scc \\<inter> dom (discovered s))) = \\<delta> s ?v\n\ngoal (1 subgoal):\n 1. \\<delta> s r = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))", "by simp"], ["proof (state)\nthis:\n  \\<delta> s r = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow> scc_root s' r scc\n 2. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "also"], ["proof (state)\nthis:\n  \\<delta> s r = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow> scc_root s' r scc\n 2. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "from r aux"], ["proof (chain)\npicking this:\n  scc_root s r scc\n  \\<lbrakk>r \\<in> scc; is_scc E scc\\<rbrakk>\n  \\<Longrightarrow> Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n                    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "have \"Min (\\<delta> s ` ?sd) = Min (\\<delta> s' ` ?sd')\""], ["proof (prove)\nusing this:\n  scc_root s r scc\n  \\<lbrakk>r \\<in> scc; is_scc E scc\\<rbrakk>\n  \\<Longrightarrow> Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n                    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "by (simp add: scc_root_def)"], ["proof (state)\nthis:\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (2 subgoals):\n 1. scc_root s r scc \\<Longrightarrow> scc_root s' r scc\n 2. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "finally"], ["proof (chain)\npicking this:\n  \\<delta> s' r = Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "show \"scc_root s' r scc\""], ["proof (prove)\nusing this:\n  \\<delta> s' r = Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. scc_root s' r scc", "using r_d d r[unfolded scc_root_def]"], ["proof (prove)\nusing this:\n  \\<delta> s' r = Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n  r \\<in> dom (discovered s)\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x\n  is_scc E scc \\<and>\n  r \\<in> scc \\<and>\n  r \\<in> dom (discovered s) \\<and>\n  scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {r}\n\ngoal (1 subgoal):\n 1. scc_root s' r scc", "by (blast intro!: s'.Min_disc_is_scc_root)"], ["proof (state)\nthis:\n  scc_root s' r scc\n\ngoal (1 subgoal):\n 1. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "assume r': \"scc_root s' r scc\""], ["proof (state)\nthis:\n  scc_root s' r scc\n\ngoal (1 subgoal):\n 1. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "from r_d d"], ["proof (chain)\npicking this:\n  r \\<in> dom (discovered s)\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x", "have \"\\<delta> s r = \\<delta> s' r\""], ["proof (prove)\nusing this:\n  r \\<in> dom (discovered s)\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x\n\ngoal (1 subgoal):\n 1. \\<delta> s r = \\<delta> s' r", "by simp"], ["proof (state)\nthis:\n  \\<delta> s r = \\<delta> s' r\n\ngoal (1 subgoal):\n 1. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "also"], ["proof (state)\nthis:\n  \\<delta> s r = \\<delta> s' r\n\ngoal (1 subgoal):\n 1. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "from r' s'.scc_root_is_Min_disc"], ["proof (chain)\npicking this:\n  scc_root s' r scc\n  scc_root s' ?v ?scc \\<Longrightarrow>\n  Min (\\<delta> s' ` (?scc \\<inter> dom (discovered s'))) = \\<delta> s' ?v", "have \"\\<delta> s' r = Min (\\<delta> s' ` ?sd')\""], ["proof (prove)\nusing this:\n  scc_root s' r scc\n  scc_root s' ?v ?scc \\<Longrightarrow>\n  Min (\\<delta> s' ` (?scc \\<inter> dom (discovered s'))) = \\<delta> s' ?v\n\ngoal (1 subgoal):\n 1. \\<delta> s' r = Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "by simp"], ["proof (state)\nthis:\n  \\<delta> s' r = Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "also"], ["proof (state)\nthis:\n  \\<delta> s' r = Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "from r' aux"], ["proof (chain)\npicking this:\n  scc_root s' r scc\n  \\<lbrakk>r \\<in> scc; is_scc E scc\\<rbrakk>\n  \\<Longrightarrow> Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n                    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))", "have \"Min (\\<delta> s' ` ?sd') = Min (\\<delta> s ` ?sd)\""], ["proof (prove)\nusing this:\n  scc_root s' r scc\n  \\<lbrakk>r \\<in> scc; is_scc E scc\\<rbrakk>\n  \\<Longrightarrow> Min (\\<delta> s ` (scc \\<inter> dom (discovered s))) =\n                    Min (\\<delta> s' ` (scc \\<inter> dom (discovered s')))\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s' ` (scc \\<inter> dom (discovered s'))) =\n    Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))", "by (simp add: scc_root_def)"], ["proof (state)\nthis:\n  Min (\\<delta> s' ` (scc \\<inter> dom (discovered s'))) =\n  Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. scc_root s' r scc \\<Longrightarrow> scc_root s r scc", "finally"], ["proof (chain)\npicking this:\n  \\<delta> s r = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))", "show \"scc_root s r scc\""], ["proof (prove)\nusing this:\n  \\<delta> s r = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n\ngoal (1 subgoal):\n 1. scc_root s r scc", "using r_d d r'[unfolded scc_root_def]"], ["proof (prove)\nusing this:\n  \\<delta> s r = Min (\\<delta> s ` (scc \\<inter> dom (discovered s)))\n  r \\<in> dom (discovered s)\n  dom (discovered s) \\<subseteq> dom (discovered s')\n  \\<forall>x\\<in>dom (discovered s). \\<delta> s x = \\<delta> s' x\n  \\<forall>x\\<in>dom (discovered s') - dom (discovered s).\n     counter s \\<le> \\<delta> s' x\n  is_scc E scc \\<and>\n  r \\<in> scc \\<and>\n  r \\<in> dom (discovered s') \\<and>\n  scc \\<inter> dom (discovered s')\n  \\<subseteq> (tree_edges s')\\<^sup>* `` {r}\n\ngoal (1 subgoal):\n 1. scc_root s r scc", "by (blast intro!: Min_disc_is_scc_root)"], ["proof (state)\nthis:\n  scc_root s r scc\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  scc_root s r scc = scc_root s' r scc\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "end"]]}