{"file_name": "/home/qj213/afp-2021-10-22/thys/DFS_Framework/Examples/Tarjan_LowLink.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/DFS_Framework", "problem_names": ["lemma lowlink_setI:\n    assumes \"lowlink_path s v p w\"\n    and \"w \\<in> dom (discovered s)\"\n    and \"(v,w) \\<in> E\\<^sup>*\" \"(w,v) \\<in> E\\<^sup>*\"\n    shows \"w \\<in> lowlink_set s v\"", "lemma lowlink_set_discovered:\n    \"lowlink_set s v \\<subseteq> dom (discovered s)\"", "lemma lowlink_set_finite[simp, intro!]:\n    \"finite (lowlink_set s v)\"", "lemma lowlink_set_not_empty:\n    assumes \"v \\<in> dom (discovered s)\"\n    shows \"lowlink_set s v \\<noteq> {}\"", "lemma lowlink_path_single:\n    assumes \"(v,w) \\<in> cross_edges s \\<union> back_edges s\"\n    shows \"lowlink_path s v [v] w\"", "lemma lowlink_path_Cons:\n    assumes \"lowlink_path s v (x#xs) w\"\n    and \"xs \\<noteq> []\"\n    shows \"\\<exists>u. lowlink_path s u xs w\"", "lemma lowlink_path_in_tree:\n    assumes p: \"lowlink_path s v p w\"\n    and j: \"j < length p\"\n    and k: \"k < j\"\n    shows \"(p!k, p!j) \\<in> (tree_edges s)\\<^sup>+\"", "lemma lowlink_path_finished:\n    assumes p: \"lowlink_path s v p w\"\n    and j: \"j < length p\" \"j > 0\"\n    shows \"p!j \\<in> dom (finished s)\"", "lemma lowlink_path_tree_prepend:\n    assumes p: \"lowlink_path s v p w\"\n    and tree_edges: \"(u,v) \\<in> (tree_edges s)\\<^sup>+\"\n    and fin: \"u \\<in> dom (finished s) \\<or> (stack s \\<noteq> [] \\<and> u = hd (stack s))\"\n    shows \"\\<exists>p. lowlink_path s u p w\"", "lemma lowlink_path_complex:\n    assumes \"(u,v) \\<in> (tree_edges s)\\<^sup>+\"\n    and \"u \\<in> dom (finished s) \\<or> (stack s \\<noteq> [] \\<and> u = hd (stack s))\"\n    and \"(v,w) \\<in> cross_edges s \\<union> back_edges s\"\n    shows \"\\<exists>p. lowlink_path s u p w\"", "lemma no_path_imp_no_lowlink_path:\n    assumes \"edges s `` {v} = {}\"\n    shows \"\\<not>lowlink_path s v p w\"", "lemma LowLink_le_disc:\n    assumes \"v \\<in> dom (discovered s)\"\n    shows \"LowLink s v \\<le> \\<delta> s v\"", "lemma LowLink_lessE:\n    assumes \"LowLink s v < x\"\n    and \"v \\<in> dom (discovered s)\"\n    obtains w where \"\\<delta> s w < x\" \"w \\<in> lowlink_set s v\"", "lemma LowLink_lessI:\n    assumes \"y \\<in> lowlink_set s v\"\n    and \"\\<delta> s y < \\<delta> s v\"\n    shows \"LowLink s v < \\<delta> s v\"", "lemma LowLink_eqI:\n    assumes \"DFS_invar G param s'\"\n    assumes sub_m: \"discovered s \\<subseteq>\\<^sub>m discovered s'\"\n    assumes sub: \"lowlink_set s w \\<subseteq> lowlink_set s' w\"\n    and rev_sub: \"lowlink_set s' w \\<subseteq> lowlink_set s w \\<union> X\"\n    and w_disc: \"w \\<in> dom (discovered s)\"\n    and X: \"\\<And>x. \\<lbrakk>x \\<in> X; x \\<in> lowlink_set s' w\\<rbrakk> \\<Longrightarrow> \\<delta> s' x \\<ge> LowLink s w\"\n    shows \"LowLink s w = LowLink s' w\"", "lemma LowLink_eq_disc_iff_scc_root:\n    assumes \"v \\<in> dom (finished s) \\<or> (stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {})\"\n    shows \"LowLink s v = \\<delta> s v \\<longleftrightarrow> scc_root s v (scc_of E v)\""], "translations": [["", "lemma lowlink_setI:\n    assumes \"lowlink_path s v p w\"\n    and \"w \\<in> dom (discovered s)\"\n    and \"(v,w) \\<in> E\\<^sup>*\" \"(w,v) \\<in> E\\<^sup>*\"\n    shows \"w \\<in> lowlink_set s v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> lowlink_set s v", "proof (cases \"v = w\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = w \\<Longrightarrow> w \\<in> lowlink_set s v\n 2. v \\<noteq> w \\<Longrightarrow> w \\<in> lowlink_set s v", "case True"], ["proof (state)\nthis:\n  v = w\n\ngoal (2 subgoals):\n 1. v = w \\<Longrightarrow> w \\<in> lowlink_set s v\n 2. v \\<noteq> w \\<Longrightarrow> w \\<in> lowlink_set s v", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = w\n\ngoal (1 subgoal):\n 1. w \\<in> lowlink_set s v", "by (simp add: lowlink_set_def assms)"], ["proof (state)\nthis:\n  w \\<in> lowlink_set s v\n\ngoal (1 subgoal):\n 1. v \\<noteq> w \\<Longrightarrow> w \\<in> lowlink_set s v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> w \\<Longrightarrow> w \\<in> lowlink_set s v", "case False"], ["proof (state)\nthis:\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. v \\<noteq> w \\<Longrightarrow> w \\<in> lowlink_set s v", "with assms"], ["proof (chain)\npicking this:\n  lowlink_path s v p w\n  w \\<in> dom (discovered s)\n  (v, w) \\<in> E\\<^sup>*\n  (w, v) \\<in> E\\<^sup>*\n  v \\<noteq> w", "have \"(v,w) \\<in> E\\<^sup>+\" \"(w,v) \\<in> E\\<^sup>+\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n  w \\<in> dom (discovered s)\n  (v, w) \\<in> E\\<^sup>*\n  (w, v) \\<in> E\\<^sup>*\n  v \\<noteq> w\n\ngoal (1 subgoal):\n 1. (v, w) \\<in> E\\<^sup>+ &&& (w, v) \\<in> E\\<^sup>+", "by (metis rtrancl_eq_or_trancl)+"], ["proof (state)\nthis:\n  (v, w) \\<in> E\\<^sup>+\n  (w, v) \\<in> E\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<noteq> w \\<Longrightarrow> w \\<in> lowlink_set s v", "with assms"], ["proof (chain)\npicking this:\n  lowlink_path s v p w\n  w \\<in> dom (discovered s)\n  (v, w) \\<in> E\\<^sup>*\n  (w, v) \\<in> E\\<^sup>*\n  (v, w) \\<in> E\\<^sup>+\n  (w, v) \\<in> E\\<^sup>+", "show ?thesis"], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n  w \\<in> dom (discovered s)\n  (v, w) \\<in> E\\<^sup>*\n  (w, v) \\<in> E\\<^sup>*\n  (v, w) \\<in> E\\<^sup>+\n  (w, v) \\<in> E\\<^sup>+\n\ngoal (1 subgoal):\n 1. w \\<in> lowlink_set s v", "by (auto simp add: lowlink_set_def)"], ["proof (state)\nthis:\n  w \\<in> lowlink_set s v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lowlink_set_discovered:\n    \"lowlink_set s v \\<subseteq> dom (discovered s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowlink_set s v \\<subseteq> dom (discovered s)", "unfolding lowlink_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {w \\<in> dom (discovered s).\n     v = w \\<or>\n     (v, w) \\<in> E\\<^sup>+ \\<and>\n     (w, v) \\<in> E\\<^sup>+ \\<and> (\\<exists>p. lowlink_path s v p w)}\n    \\<subseteq> dom (discovered s)", "by blast"], ["", "lemma lowlink_set_finite[simp, intro!]:\n    \"finite (lowlink_set s v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lowlink_set s v)", "using lowlink_set_discovered discovered_finite"], ["proof (prove)\nusing this:\n  lowlink_set s ?v \\<subseteq> dom (discovered s)\n  finite (dom (discovered s))\n\ngoal (1 subgoal):\n 1. finite (lowlink_set s v)", "by (metis finite_subset)"], ["", "lemma lowlink_set_not_empty:\n    assumes \"v \\<in> dom (discovered s)\"\n    shows \"lowlink_set s v \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowlink_set s v \\<noteq> {}", "unfolding lowlink_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {w \\<in> dom (discovered s).\n     v = w \\<or>\n     (v, w) \\<in> E\\<^sup>+ \\<and>\n     (w, v) \\<in> E\\<^sup>+ \\<and>\n     (\\<exists>p. lowlink_path s v p w)} \\<noteq>\n    {}", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. {w \\<in> dom (discovered s).\n     v = w \\<or>\n     (v, w) \\<in> E\\<^sup>+ \\<and>\n     (w, v) \\<in> E\\<^sup>+ \\<and>\n     (\\<exists>p. lowlink_path s v p w)} \\<noteq>\n    {}", "by auto"], ["", "lemma lowlink_path_single:\n    assumes \"(v,w) \\<in> cross_edges s \\<union> back_edges s\"\n    shows \"lowlink_path s v [v] w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowlink_path s v [v] w", "unfolding lowlink_path_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. path E v [v] w \\<and>\n    [v] \\<noteq> [] \\<and>\n    (last [v], w) \\<in> cross_edges s \\<union> back_edges s \\<and>\n    (1 < length [v] \\<longrightarrow>\n     [v] ! 1 \\<in> dom (finished s) \\<and>\n     (\\<forall>k<length [v] - 1. ([v] ! k, [v] ! Suc k) \\<in> tree_edges s))", "using assms cross_edges_ssE back_edges_ssE"], ["proof (prove)\nusing this:\n  (v, w) \\<in> cross_edges s \\<union> back_edges s\n  cross_edges s \\<subseteq> E\n  back_edges s \\<subseteq> E\n\ngoal (1 subgoal):\n 1. path E v [v] w \\<and>\n    [v] \\<noteq> [] \\<and>\n    (last [v], w) \\<in> cross_edges s \\<union> back_edges s \\<and>\n    (1 < length [v] \\<longrightarrow>\n     [v] ! 1 \\<in> dom (finished s) \\<and>\n     (\\<forall>k<length [v] - 1. ([v] ! k, [v] ! Suc k) \\<in> tree_edges s))", "by (auto simp add: path_simps)"], ["", "lemma lowlink_path_Cons:\n    assumes \"lowlink_path s v (x#xs) w\"\n    and \"xs \\<noteq> []\"\n    shows \"\\<exists>u. lowlink_path s u xs w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "from assms"], ["proof (chain)\npicking this:\n  lowlink_path s v (x # xs) w\n  xs \\<noteq> []", "have path: \"path E v (x#xs) w\" \n      and cb: \"(last xs, w) \\<in> cross_edges s \\<union> back_edges s\"\n      and f: \"(x#xs)!1 \\<in> dom (finished s)\"\n      and t: \"(\\<forall>k < length xs. ((x#xs)!k, (x#xs)!Suc k) \\<in> tree_edges s)\""], ["proof (prove)\nusing this:\n  lowlink_path s v (x # xs) w\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (path E v (x # xs) w &&&\n     (last xs, w) \\<in> cross_edges s \\<union> back_edges s) &&&\n    (x # xs) ! 1 \\<in> dom (finished s) &&&\n    \\<forall>k<length xs.\n       ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s", "unfolding lowlink_path_def"], ["proof (prove)\nusing this:\n  path E v (x # xs) w \\<and>\n  x # xs \\<noteq> [] \\<and>\n  (last (x # xs), w) \\<in> cross_edges s \\<union> back_edges s \\<and>\n  (1 < length (x # xs) \\<longrightarrow>\n   (x # xs) ! 1 \\<in> dom (finished s) \\<and>\n   (\\<forall>k<length (x # xs) - 1.\n       ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s))\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (path E v (x # xs) w &&&\n     (last xs, w) \\<in> cross_edges s \\<union> back_edges s) &&&\n    (x # xs) ! 1 \\<in> dom (finished s) &&&\n    \\<forall>k<length xs.\n       ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s", "by auto"], ["proof (state)\nthis:\n  path E v (x # xs) w\n  (last xs, w) \\<in> cross_edges s \\<union> back_edges s\n  (x # xs) ! 1 \\<in> dom (finished s)\n  \\<forall>k<length xs. ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "from path"], ["proof (chain)\npicking this:\n  path E v (x # xs) w", "obtain u where \"path E u xs w\""], ["proof (prove)\nusing this:\n  path E v (x # xs) w\n\ngoal (1 subgoal):\n 1. (\\<And>u. path E u xs w \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: path_simps)"], ["proof (state)\nthis:\n  path E u xs w\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "moreover"], ["proof (state)\nthis:\n  path E u xs w\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "note cb \\<open>xs \\<noteq> []\\<close>"], ["proof (state)\nthis:\n  (last xs, w) \\<in> cross_edges s \\<union> back_edges s\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "moreover"], ["proof (state)\nthis:\n  (last xs, w) \\<in> cross_edges s \\<union> back_edges s\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "{"], ["proof (state)\nthis:\n  (last xs, w) \\<in> cross_edges s \\<union> back_edges s\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "define k' where \"k' = Suc k\""], ["proof (state)\nthis:\n  k' = Suc k\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "assume \"k < length xs - 1\""], ["proof (state)\nthis:\n  k < length xs - 1\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "with k'_def"], ["proof (chain)\npicking this:\n  k' = Suc k\n  k < length xs - 1", "have \"k' < length xs\""], ["proof (prove)\nusing this:\n  k' = Suc k\n  k < length xs - 1\n\ngoal (1 subgoal):\n 1. k' < length xs", "by simp"], ["proof (state)\nthis:\n  k' < length xs\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "with t"], ["proof (chain)\npicking this:\n  \\<forall>k<length xs. ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s\n  k' < length xs", "have \"((x#xs)!k', (x#xs)!Suc k') \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  \\<forall>k<length xs. ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s\n  k' < length xs\n\ngoal (1 subgoal):\n 1. ((x # xs) ! k', (x # xs) ! Suc k') \\<in> tree_edges s", "by simp"], ["proof (state)\nthis:\n  ((x # xs) ! k', (x # xs) ! Suc k') \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "hence \"(xs!k,xs!Suc k) \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  ((x # xs) ! k', (x # xs) ! Suc k') \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. (xs ! k, xs ! Suc k) \\<in> tree_edges s", "by (simp add: k'_def nth_Cons')"], ["proof (state)\nthis:\n  (xs ! k, xs ! Suc k) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "}"], ["proof (state)\nthis:\n  ?k9 < length xs - 1 \\<Longrightarrow>\n  (xs ! ?k9, xs ! Suc ?k9) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "note t' = this"], ["proof (state)\nthis:\n  ?k9 < length xs - 1 \\<Longrightarrow>\n  (xs ! ?k9, xs ! Suc ?k9) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "moreover"], ["proof (state)\nthis:\n  ?k9 < length xs - 1 \\<Longrightarrow>\n  (xs ! ?k9, xs ! Suc ?k9) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "{"], ["proof (state)\nthis:\n  ?k9 < length xs - 1 \\<Longrightarrow>\n  (xs ! ?k9, xs ! Suc ?k9) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "assume *: \"length xs > 1\""], ["proof (state)\nthis:\n  1 < length xs\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "from f"], ["proof (chain)\npicking this:\n  (x # xs) ! 1 \\<in> dom (finished s)", "have \"xs!0 \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  (x # xs) ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. xs ! 0 \\<in> dom (finished s)", "by auto"], ["proof (state)\nthis:\n  xs ! 0 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "moreover"], ["proof (state)\nthis:\n  xs ! 0 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "from t'[of 0] *"], ["proof (chain)\npicking this:\n  0 < length xs - 1 \\<Longrightarrow>\n  (xs ! 0, xs ! Suc 0) \\<in> tree_edges s\n  1 < length xs", "have \"(xs!0,xs!1) \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  0 < length xs - 1 \\<Longrightarrow>\n  (xs ! 0, xs ! Suc 0) \\<in> tree_edges s\n  1 < length xs\n\ngoal (1 subgoal):\n 1. (xs ! 0, xs ! 1) \\<in> tree_edges s", "by simp"], ["proof (state)\nthis:\n  (xs ! 0, xs ! 1) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "ultimately"], ["proof (chain)\npicking this:\n  xs ! 0 \\<in> dom (finished s)\n  (xs ! 0, xs ! 1) \\<in> tree_edges s", "have \"xs!1 \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  xs ! 0 \\<in> dom (finished s)\n  (xs ! 0, xs ! 1) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. xs ! 1 \\<in> dom (finished s)", "using tree_edge_impl_parenthesis"], ["proof (prove)\nusing this:\n  xs ! 0 \\<in> dom (finished s)\n  (xs ! 0, xs ! 1) \\<in> tree_edges s\n  \\<lbrakk>(?v, ?w) \\<in> tree_edges s; ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    the_discovered s ?v < the_discovered s ?w \\<and>\n                    the_finished s ?w < the_finished s ?v\n\ngoal (1 subgoal):\n 1. xs ! 1 \\<in> dom (finished s)", "by metis"], ["proof (state)\nthis:\n  xs ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "}"], ["proof (state)\nthis:\n  1 < length xs \\<Longrightarrow> xs ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "ultimately"], ["proof (chain)\npicking this:\n  path E u xs w\n  (last xs, w) \\<in> cross_edges s \\<union> back_edges s\n  xs \\<noteq> []\n  ?k9 < length xs - 1 \\<Longrightarrow>\n  (xs ! ?k9, xs ! Suc ?k9) \\<in> tree_edges s\n  1 < length xs \\<Longrightarrow> xs ! 1 \\<in> dom (finished s)", "have \"lowlink_path s u xs w\""], ["proof (prove)\nusing this:\n  path E u xs w\n  (last xs, w) \\<in> cross_edges s \\<union> back_edges s\n  xs \\<noteq> []\n  ?k9 < length xs - 1 \\<Longrightarrow>\n  (xs ! ?k9, xs ! Suc ?k9) \\<in> tree_edges s\n  1 < length xs \\<Longrightarrow> xs ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. lowlink_path s u xs w", "by (auto simp add: lowlink_path_def)"], ["proof (state)\nthis:\n  lowlink_path s u xs w\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", "thus ?thesis"], ["proof (prove)\nusing this:\n  lowlink_path s u xs w\n\ngoal (1 subgoal):\n 1. \\<exists>u. lowlink_path s u xs w", ".."], ["proof (state)\nthis:\n  \\<exists>u. lowlink_path s u xs w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lowlink_path_in_tree:\n    assumes p: \"lowlink_path s v p w\"\n    and j: \"j < length p\"\n    and k: \"k < j\"\n    shows \"(p!k, p!j) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p ! k, p ! j) \\<in> (tree_edges s)\\<^sup>+", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (p ! k, p ! j) \\<in> (tree_edges s)\\<^sup>+", "from p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w", "have \"p \\<noteq> []\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n\ngoal (1 subgoal):\n 1. p \\<noteq> []", "by (auto simp add: lowlink_path_def)"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. (p ! k, p ! j) \\<in> (tree_edges s)\\<^sup>+", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. (p ! k, p ! j) \\<in> (tree_edges s)\\<^sup>+", "using p j k"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  lowlink_path s v p w\n  j < length p\n  k < j\n\ngoal (1 subgoal):\n 1. (p ! k, p ! j) \\<in> (tree_edges s)\\<^sup>+", "proof (induction arbitrary: v j k rule: list_nonempty_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x v j k.\n       \\<lbrakk>lowlink_path s v [x] w; j < length [x]; k < j\\<rbrakk>\n       \\<Longrightarrow> ([x] ! k, [x] ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>x xs v j k.\n       \\<lbrakk>xs \\<noteq> [];\n        \\<And>v j k.\n           \\<lbrakk>lowlink_path s v xs w; j < length xs; k < j\\<rbrakk>\n           \\<Longrightarrow> (xs ! k, xs ! j) \\<in> (tree_edges s)\\<^sup>+;\n        lowlink_path s v (x # xs) w; j < length (x # xs); k < j\\<rbrakk>\n       \\<Longrightarrow> ((x # xs) ! k, (x # xs) ! j)\n                         \\<in> (tree_edges s)\\<^sup>+", "case single"], ["proof (state)\nthis:\n  lowlink_path s v [x_] w\n  j < length [x_]\n  k < j\n\ngoal (2 subgoals):\n 1. \\<And>x v j k.\n       \\<lbrakk>lowlink_path s v [x] w; j < length [x]; k < j\\<rbrakk>\n       \\<Longrightarrow> ([x] ! k, [x] ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>x xs v j k.\n       \\<lbrakk>xs \\<noteq> [];\n        \\<And>v j k.\n           \\<lbrakk>lowlink_path s v xs w; j < length xs; k < j\\<rbrakk>\n           \\<Longrightarrow> (xs ! k, xs ! j) \\<in> (tree_edges s)\\<^sup>+;\n        lowlink_path s v (x # xs) w; j < length (x # xs); k < j\\<rbrakk>\n       \\<Longrightarrow> ((x # xs) ! k, (x # xs) ! j)\n                         \\<in> (tree_edges s)\\<^sup>+", "thus ?case"], ["proof (prove)\nusing this:\n  lowlink_path s v [x_] w\n  j < length [x_]\n  k < j\n\ngoal (1 subgoal):\n 1. ([x_] ! k, [x_] ! j) \\<in> (tree_edges s)\\<^sup>+", "by auto"], ["proof (state)\nthis:\n  ([x_] ! k, [x_] ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. \\<And>x xs v j k.\n       \\<lbrakk>xs \\<noteq> [];\n        \\<And>v j k.\n           \\<lbrakk>lowlink_path s v xs w; j < length xs; k < j\\<rbrakk>\n           \\<Longrightarrow> (xs ! k, xs ! j) \\<in> (tree_edges s)\\<^sup>+;\n        lowlink_path s v (x # xs) w; j < length (x # xs); k < j\\<rbrakk>\n       \\<Longrightarrow> ((x # xs) ! k, (x # xs) ! j)\n                         \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs v j k.\n       \\<lbrakk>xs \\<noteq> [];\n        \\<And>v j k.\n           \\<lbrakk>lowlink_path s v xs w; j < length xs; k < j\\<rbrakk>\n           \\<Longrightarrow> (xs ! k, xs ! j) \\<in> (tree_edges s)\\<^sup>+;\n        lowlink_path s v (x # xs) w; j < length (x # xs); k < j\\<rbrakk>\n       \\<Longrightarrow> ((x # xs) ! k, (x # xs) ! j)\n                         \\<in> (tree_edges s)\\<^sup>+", "case (cons x xs)"], ["proof (state)\nthis:\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j\n\ngoal (1 subgoal):\n 1. \\<And>x xs v j k.\n       \\<lbrakk>xs \\<noteq> [];\n        \\<And>v j k.\n           \\<lbrakk>lowlink_path s v xs w; j < length xs; k < j\\<rbrakk>\n           \\<Longrightarrow> (xs ! k, xs ! j) \\<in> (tree_edges s)\\<^sup>+;\n        lowlink_path s v (x # xs) w; j < length (x # xs); k < j\\<rbrakk>\n       \\<Longrightarrow> ((x # xs) ! k, (x # xs) ! j)\n                         \\<in> (tree_edges s)\\<^sup>+", "define j' where \"j' = j - 1\""], ["proof (state)\nthis:\n  j' = j - 1\n\ngoal (1 subgoal):\n 1. \\<And>x xs v j k.\n       \\<lbrakk>xs \\<noteq> [];\n        \\<And>v j k.\n           \\<lbrakk>lowlink_path s v xs w; j < length xs; k < j\\<rbrakk>\n           \\<Longrightarrow> (xs ! k, xs ! j) \\<in> (tree_edges s)\\<^sup>+;\n        lowlink_path s v (x # xs) w; j < length (x # xs); k < j\\<rbrakk>\n       \\<Longrightarrow> ((x # xs) ! k, (x # xs) ! j)\n                         \\<in> (tree_edges s)\\<^sup>+", "with cons"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j\n  j' = j - 1", "have j'_le: \"j' < length xs\" and \"k \\<le> j'\"  and j: \"j = Suc j'\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j\n  j' = j - 1\n\ngoal (1 subgoal):\n 1. j' < length xs &&& k \\<le> j' &&& j = Suc j'", "by auto"], ["proof (state)\nthis:\n  j' < length xs\n  k \\<le> j'\n  j = Suc j'\n\ngoal (1 subgoal):\n 1. \\<And>x xs v j k.\n       \\<lbrakk>xs \\<noteq> [];\n        \\<And>v j k.\n           \\<lbrakk>lowlink_path s v xs w; j < length xs; k < j\\<rbrakk>\n           \\<Longrightarrow> (xs ! k, xs ! j) \\<in> (tree_edges s)\\<^sup>+;\n        lowlink_path s v (x # xs) w; j < length (x # xs); k < j\\<rbrakk>\n       \\<Longrightarrow> ((x # xs) ! k, (x # xs) ! j)\n                         \\<in> (tree_edges s)\\<^sup>+", "from cons lowlink_path_Cons"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j\n  \\<lbrakk>lowlink_path s ?v (?x # ?xs) ?w; ?xs \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u. lowlink_path s u ?xs ?w", "obtain u where p: \"lowlink_path s u xs w\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j\n  \\<lbrakk>lowlink_path s ?v (?x # ?xs) ?w; ?xs \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u. lowlink_path s u ?xs ?w\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        lowlink_path s u xs w \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  lowlink_path s u xs w\n\ngoal (1 subgoal):\n 1. \\<And>x xs v j k.\n       \\<lbrakk>xs \\<noteq> [];\n        \\<And>v j k.\n           \\<lbrakk>lowlink_path s v xs w; j < length xs; k < j\\<rbrakk>\n           \\<Longrightarrow> (xs ! k, xs ! j) \\<in> (tree_edges s)\\<^sup>+;\n        lowlink_path s v (x # xs) w; j < length (x # xs); k < j\\<rbrakk>\n       \\<Longrightarrow> ((x # xs) ! k, (x # xs) ! j)\n                         \\<in> (tree_edges s)\\<^sup>+", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "proof (cases \"k=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "case True"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "from cons"], ["proof (chain)\npicking this:\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j", "have \"\\<And>k. k < length (x#xs) - 1 \\<Longrightarrow> ((x#xs)!k,(x#xs)!Suc k) \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k < length (x # xs) - 1 \\<Longrightarrow>\n       ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s", "unfolding lowlink_path_def"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<lbrakk>path E ?v7 xs w \\<and>\n           xs \\<noteq> [] \\<and>\n           (last xs, w) \\<in> cross_edges s \\<union> back_edges s \\<and>\n           (1 < length xs \\<longrightarrow>\n            xs ! 1 \\<in> dom (finished s) \\<and>\n            (\\<forall>k<length xs - 1.\n                (xs ! k, xs ! Suc k) \\<in> tree_edges s));\n   ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  path E v (x # xs) w \\<and>\n  x # xs \\<noteq> [] \\<and>\n  (last (x # xs), w) \\<in> cross_edges s \\<union> back_edges s \\<and>\n  (1 < length (x # xs) \\<longrightarrow>\n   (x # xs) ! 1 \\<in> dom (finished s) \\<and>\n   (\\<forall>k<length (x # xs) - 1.\n       ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s))\n  j < length (x # xs)\n  k < j\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k < length (x # xs) - 1 \\<Longrightarrow>\n       ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s", "by auto"], ["proof (state)\nthis:\n  ?k7 < length (x # xs) - 1 \\<Longrightarrow>\n  ((x # xs) ! ?k7, (x # xs) ! Suc ?k7) \\<in> tree_edges s\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  ?k7 < length (x # xs) - 1 \\<Longrightarrow>\n  ((x # xs) ! ?k7, (x # xs) ! Suc ?k7) \\<in> tree_edges s\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "from True cons"], ["proof (chain)\npicking this:\n  k = 0\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j", "have \"k < length (x#xs) - 1\""], ["proof (prove)\nusing this:\n  k = 0\n  xs \\<noteq> []\n  \\<lbrakk>lowlink_path s ?v7 xs w; ?j7 < length xs; ?k7 < ?j7\\<rbrakk>\n  \\<Longrightarrow> (xs ! ?k7, xs ! ?j7) \\<in> (tree_edges s)\\<^sup>+\n  lowlink_path s v (x # xs) w\n  j < length (x # xs)\n  k < j\n\ngoal (1 subgoal):\n 1. k < length (x # xs) - 1", "by auto"], ["proof (state)\nthis:\n  k < length (x # xs) - 1\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "ultimately"], ["proof (chain)\npicking this:\n  ?k7 < length (x # xs) - 1 \\<Longrightarrow>\n  ((x # xs) ! ?k7, (x # xs) ! Suc ?k7) \\<in> tree_edges s\n  k < length (x # xs) - 1", "have *: \"((x#xs)!k,(x#xs)!Suc k) \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  ?k7 < length (x # xs) - 1 \\<Longrightarrow>\n  ((x # xs) ! ?k7, (x # xs) ! Suc ?k7) \\<in> tree_edges s\n  k < length (x # xs) - 1\n\ngoal (1 subgoal):\n 1. ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s", "by metis"], ["proof (state)\nthis:\n  ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "proof (cases \"j' = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j' = 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. j' \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "case True"], ["proof (state)\nthis:\n  j' = 0\n\ngoal (2 subgoals):\n 1. j' = 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n 2. j' \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "with * j \\<open>k=0\\<close>"], ["proof (chain)\npicking this:\n  ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s\n  j = Suc j'\n  k = 0\n  j' = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s\n  j = Suc j'\n  k = 0\n  j' = 0\n\ngoal (1 subgoal):\n 1. ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. j' \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j' \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "case False"], ["proof (state)\nthis:\n  j' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. j' \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "with True"], ["proof (chain)\npicking this:\n  k = 0\n  j' \\<noteq> 0", "have \"j' > k\""], ["proof (prove)\nusing this:\n  k = 0\n  j' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k < j'", "by simp"], ["proof (state)\nthis:\n  k < j'\n\ngoal (1 subgoal):\n 1. j' \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "with cons.IH[OF p j'_le]"], ["proof (chain)\npicking this:\n  ?k7 < j' \\<Longrightarrow>\n  (xs ! ?k7, xs ! j') \\<in> (tree_edges s)\\<^sup>+\n  k < j'", "have \"(xs!k, xs!j') \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  ?k7 < j' \\<Longrightarrow>\n  (xs ! ?k7, xs ! j') \\<in> (tree_edges s)\\<^sup>+\n  k < j'\n\ngoal (1 subgoal):\n 1. (xs ! k, xs ! j') \\<in> (tree_edges s)\\<^sup>+", "."], ["proof (state)\nthis:\n  (xs ! k, xs ! j') \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. j' \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "with j"], ["proof (chain)\npicking this:\n  j = Suc j'\n  (xs ! k, xs ! j') \\<in> (tree_edges s)\\<^sup>+", "have \"((x#xs)!Suc k, (x#xs)!j) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  j = Suc j'\n  (xs ! k, xs ! j') \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. ((x # xs) ! Suc k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  ((x # xs) ! Suc k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. j' \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "with *"], ["proof (chain)\npicking this:\n  ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s\n  ((x # xs) ! Suc k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "show ?thesis"], ["proof (prove)\nusing this:\n  ((x # xs) ! k, (x # xs) ! Suc k) \\<in> tree_edges s\n  ((x # xs) ! Suc k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "by (metis trancl_into_trancl2)"], ["proof (state)\nthis:\n  ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "case False"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "define k' where \"k' = k - 1\""], ["proof (state)\nthis:\n  k' = k - 1\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "with False \\<open>k \\<le> j'\\<close>"], ["proof (chain)\npicking this:\n  k \\<noteq> 0\n  k \\<le> j'\n  k' = k - 1", "have \"k' < j'\" and k: \"k = Suc k'\""], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  k \\<le> j'\n  k' = k - 1\n\ngoal (1 subgoal):\n 1. k' < j' &&& k = Suc k'", "by simp_all"], ["proof (state)\nthis:\n  k' < j'\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "with cons.IH[OF p j'_le]"], ["proof (chain)\npicking this:\n  ?k7 < j' \\<Longrightarrow>\n  (xs ! ?k7, xs ! j') \\<in> (tree_edges s)\\<^sup>+\n  k' < j'\n  k = Suc k'", "have \"(xs!k', xs!j') \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  ?k7 < j' \\<Longrightarrow>\n  (xs ! ?k7, xs ! j') \\<in> (tree_edges s)\\<^sup>+\n  k' < j'\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. (xs ! k', xs ! j') \\<in> (tree_edges s)\\<^sup>+", "by metis"], ["proof (state)\nthis:\n  (xs ! k', xs ! j') \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "hence \"((x#xs)!Suc k', (x#xs)!Suc j') \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  (xs ! k', xs ! j') \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. ((x # xs) ! Suc k', (x # xs) ! Suc j') \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  ((x # xs) ! Suc k', (x # xs) ! Suc j') \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "with k j"], ["proof (chain)\npicking this:\n  k = Suc k'\n  j = Suc j'\n  ((x # xs) ! Suc k', (x # xs) ! Suc j') \\<in> (tree_edges s)\\<^sup>+", "show ?thesis"], ["proof (prove)\nusing this:\n  k = Suc k'\n  j = Suc j'\n  ((x # xs) ! Suc k', (x # xs) ! Suc j') \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((x # xs) ! k, (x # xs) ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (p ! k, p ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lowlink_path_finished:\n    assumes p: \"lowlink_path s v p w\"\n    and j: \"j < length p\" \"j > 0\"\n    shows \"p!j \\<in> dom (finished s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ! j \\<in> dom (finished s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p ! j \\<in> dom (finished s)", "from j"], ["proof (chain)\npicking this:\n  j < length p\n  0 < j", "have \"length p > 1\""], ["proof (prove)\nusing this:\n  j < length p\n  0 < j\n\ngoal (1 subgoal):\n 1. 1 < length p", "by simp"], ["proof (state)\nthis:\n  1 < length p\n\ngoal (1 subgoal):\n 1. p ! j \\<in> dom (finished s)", "with p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w\n  1 < length p", "have f: \"p!1 \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n  1 < length p\n\ngoal (1 subgoal):\n 1. p ! 1 \\<in> dom (finished s)", "by (simp add: lowlink_path_def)"], ["proof (state)\nthis:\n  p ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. p ! j \\<in> dom (finished s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  p ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. p ! j \\<in> dom (finished s)", "proof (cases \"j=1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p ! 1 \\<in> dom (finished s); j = 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)\n 2. \\<lbrakk>p ! 1 \\<in> dom (finished s); j \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)", "case False"], ["proof (state)\nthis:\n  j \\<noteq> 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p ! 1 \\<in> dom (finished s); j = 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)\n 2. \\<lbrakk>p ! 1 \\<in> dom (finished s); j \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)", "with j"], ["proof (chain)\npicking this:\n  j < length p\n  0 < j\n  j \\<noteq> 1", "have \"j > 1\""], ["proof (prove)\nusing this:\n  j < length p\n  0 < j\n  j \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 1 < j", "by simp"], ["proof (state)\nthis:\n  1 < j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p ! 1 \\<in> dom (finished s); j = 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)\n 2. \\<lbrakk>p ! 1 \\<in> dom (finished s); j \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)", "with assms lowlink_path_in_tree[where k=1]"], ["proof (chain)\npicking this:\n  lowlink_path s v p w\n  j < length p\n  0 < j\n  \\<lbrakk>lowlink_path s ?v ?p ?w; ?j < length ?p; 1 < ?j\\<rbrakk>\n  \\<Longrightarrow> (?p ! 1, ?p ! ?j) \\<in> (tree_edges s)\\<^sup>+\n  1 < j", "have \"(p!1,p!j) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n  j < length p\n  0 < j\n  \\<lbrakk>lowlink_path s ?v ?p ?w; ?j < length ?p; 1 < ?j\\<rbrakk>\n  \\<Longrightarrow> (?p ! 1, ?p ! ?j) \\<in> (tree_edges s)\\<^sup>+\n  1 < j\n\ngoal (1 subgoal):\n 1. (p ! 1, p ! j) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (p ! 1, p ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p ! 1 \\<in> dom (finished s); j = 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)\n 2. \\<lbrakk>p ! 1 \\<in> dom (finished s); j \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)", "with f tree_path_impl_parenthesis"], ["proof (chain)\npicking this:\n  p ! 1 \\<in> dom (finished s)\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    the_discovered s ?v < the_discovered s ?w \\<and>\n                    the_finished s ?w < the_finished s ?v\n  (p ! 1, p ! j) \\<in> (tree_edges s)\\<^sup>+", "show ?thesis"], ["proof (prove)\nusing this:\n  p ! 1 \\<in> dom (finished s)\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    the_discovered s ?v < the_discovered s ?w \\<and>\n                    the_finished s ?w < the_finished s ?v\n  (p ! 1, p ! j) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. p ! j \\<in> dom (finished s)", "by simp"], ["proof (state)\nthis:\n  p ! j \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p ! 1 \\<in> dom (finished s); j = 1\\<rbrakk>\n    \\<Longrightarrow> p ! j \\<in> dom (finished s)", "qed simp"], ["proof (state)\nthis:\n  p ! j \\<in> dom (finished s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lowlink_path_tree_prepend:\n    assumes p: \"lowlink_path s v p w\"\n    and tree_edges: \"(u,v) \\<in> (tree_edges s)\\<^sup>+\"\n    and fin: \"u \\<in> dom (finished s) \\<or> (stack s \\<noteq> [] \\<and> u = hd (stack s))\"\n    shows \"\\<exists>p. lowlink_path s u p w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "note lowlink_path_def[simp]"], ["proof (state)\nthis:\n  lowlink_path ?s ?v ?p ?w \\<equiv>\n  path E ?v ?p ?w \\<and>\n  ?p \\<noteq> [] \\<and>\n  (last ?p, ?w) \\<in> cross_edges ?s \\<union> back_edges ?s \\<and>\n  (1 < length ?p \\<longrightarrow>\n   ?p ! 1 \\<in> dom (finished ?s) \\<and>\n   (\\<forall>k<length ?p - 1. (?p ! k, ?p ! Suc k) \\<in> tree_edges ?s))\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "from tree_edges trancl_is_path"], ["proof (chain)\npicking this:\n  (u, v) \\<in> (tree_edges s)\\<^sup>+\n  \\<lbrakk>(?u, ?v) \\<in> ?E\\<^sup>+;\n   \\<And>l.\n      \\<lbrakk>l \\<noteq> []; path ?E ?u l ?v\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain tp where \n      tp: \"path (tree_edges s) u tp v\" \"tp \\<noteq> []\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> (tree_edges s)\\<^sup>+\n  \\<lbrakk>(?u, ?v) \\<in> ?E\\<^sup>+;\n   \\<And>l.\n      \\<lbrakk>l \\<noteq> []; path ?E ?u l ?v\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>tp.\n        \\<lbrakk>path (tree_edges s) u tp v; tp \\<noteq> []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "from tree_path_impl_parenthesis assms hd_stack_tree_path_finished"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    the_discovered s ?v < the_discovered s ?w \\<and>\n                    the_finished s ?w < the_finished s ?v\n  lowlink_path s v p w\n  (u, v) \\<in> (tree_edges s)\\<^sup>+\n  u \\<in> dom (finished s) \\<or> stack s \\<noteq> [] \\<and> u = hd (stack s)\n  \\<lbrakk>stack s \\<noteq> [];\n   (hd (stack s), ?v) \\<in> (tree_edges s)\\<^sup>+\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> dom (finished s)", "have \n      v_fin: \"v \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    the_discovered s ?v < the_discovered s ?w \\<and>\n                    the_finished s ?w < the_finished s ?v\n  lowlink_path s v p w\n  (u, v) \\<in> (tree_edges s)\\<^sup>+\n  u \\<in> dom (finished s) \\<or> stack s \\<noteq> [] \\<and> u = hd (stack s)\n  \\<lbrakk>stack s \\<noteq> [];\n   (hd (stack s), ?v) \\<in> (tree_edges s)\\<^sup>+\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. v \\<in> dom (finished s)", "by blast"], ["proof (state)\nthis:\n  v \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "from p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w", "have \"p!0 = hd p\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n\ngoal (1 subgoal):\n 1. p ! 0 = hd p", "by (simp add: hd_conv_nth)"], ["proof (state)\nthis:\n  p ! 0 = hd p\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "with p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w\n  p ! 0 = hd p", "have p_0: \"p!0 = v\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n  p ! 0 = hd p\n\ngoal (1 subgoal):\n 1. p ! 0 = v", "by (auto simp add: path_hd)"], ["proof (state)\nthis:\n  p ! 0 = v\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "let ?p = \"tp @ p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "from tp path_mono[OF tree_edges_ssE]"], ["proof (chain)\npicking this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n  path (tree_edges s) ?u ?p ?v \\<Longrightarrow> path E ?u ?p ?v", "have \"path E u tp v\""], ["proof (prove)\nusing this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n  path (tree_edges s) ?u ?p ?v \\<Longrightarrow> path E ?u ?p ?v\n\ngoal (1 subgoal):\n 1. path E u tp v", "by simp"], ["proof (state)\nthis:\n  path E u tp v\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "also"], ["proof (state)\nthis:\n  path E u tp v\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "from p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w", "have \"path E v p w\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n\ngoal (1 subgoal):\n 1. path E v p w", "by simp"], ["proof (state)\nthis:\n  path E v p w\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "finally"], ["proof (chain)\npicking this:\n  path E u (tp @ p) w", "have \"path E u ?p w\""], ["proof (prove)\nusing this:\n  path E u (tp @ p) w\n\ngoal (1 subgoal):\n 1. path E u (tp @ p) w", "."], ["proof (state)\nthis:\n  path E u (tp @ p) w\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "}"], ["proof (state)\nthis:\n  path E u (tp @ p) w\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "moreover"], ["proof (state)\nthis:\n  path E u (tp @ p) w\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "from p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w", "have \"?p \\<noteq> []\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n\ngoal (1 subgoal):\n 1. tp @ p \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  tp @ p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "moreover"], ["proof (state)\nthis:\n  tp @ p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "from p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w", "have \"(last ?p, w) \\<in> cross_edges s \\<union> back_edges s\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n\ngoal (1 subgoal):\n 1. (last (tp @ p), w) \\<in> cross_edges s \\<union> back_edges s", "by simp"], ["proof (state)\nthis:\n  (last (tp @ p), w) \\<in> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "moreover"], ["proof (state)\nthis:\n  (last (tp @ p), w) \\<in> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "{"], ["proof (state)\nthis:\n  (last (tp @ p), w) \\<in> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "assume \"length ?p > 1\""], ["proof (state)\nthis:\n  1 < length (tp @ p)\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "have \"?p ! 1 \\<in> dom (finished s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tp @ p) ! 1 \\<in> dom (finished s)", "proof (cases \"length tp > 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "case True"], ["proof (state)\nthis:\n  1 < length tp\n\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "hence tp1: \"?p ! 1 = tp ! 1\""], ["proof (prove)\nusing this:\n  1 < length tp\n\ngoal (1 subgoal):\n 1. (tp @ p) ! 1 = tp ! 1", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (tp @ p) ! 1 = tp ! 1\n\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "from tp True"], ["proof (chain)\npicking this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n  1 < length tp", "have \"(tp ! 0, tp ! 1) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n  1 < length tp\n\ngoal (1 subgoal):\n 1. (tp ! 0, tp ! 1) \\<in> (tree_edges s)\\<^sup>+", "by (auto simp add: path_nth_conv nth_append elim: allE[where x=0])"], ["proof (state)\nthis:\n  (tp ! 0, tp ! 1) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "also"], ["proof (state)\nthis:\n  (tp ! 0, tp ! 1) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "from True"], ["proof (chain)\npicking this:\n  1 < length tp", "have \"tp ! 0 = hd tp\""], ["proof (prove)\nusing this:\n  1 < length tp\n\ngoal (1 subgoal):\n 1. tp ! 0 = hd tp", "by (simp add: hd_conv_nth)"], ["proof (state)\nthis:\n  tp ! 0 = hd tp\n\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "also"], ["proof (state)\nthis:\n  tp ! 0 = hd tp\n\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "from tp"], ["proof (chain)\npicking this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []", "have \"hd tp = u\""], ["proof (prove)\nusing this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd tp = u", "by (simp add: path_hd)"], ["proof (state)\nthis:\n  hd tp = u\n\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "finally"], ["proof (chain)\npicking this:\n  (u, tp ! 1) \\<in> (tree_edges s)\\<^sup>+", "have \"tp ! 1 \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  (u, tp ! 1) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. tp ! 1 \\<in> dom (finished s)", "using tree_path_impl_parenthesis fin hd_stack_tree_path_finished"], ["proof (prove)\nusing this:\n  (u, tp ! 1) \\<in> (tree_edges s)\\<^sup>+\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    the_discovered s ?v < the_discovered s ?w \\<and>\n                    the_finished s ?w < the_finished s ?v\n  u \\<in> dom (finished s) \\<or> stack s \\<noteq> [] \\<and> u = hd (stack s)\n  \\<lbrakk>stack s \\<noteq> [];\n   (hd (stack s), ?v) \\<in> (tree_edges s)\\<^sup>+\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. tp ! 1 \\<in> dom (finished s)", "by blast"], ["proof (state)\nthis:\n  tp ! 1 \\<in> dom (finished s)\n\ngoal (2 subgoals):\n 1. 1 < length tp \\<Longrightarrow> (tp @ p) ! 1 \\<in> dom (finished s)\n 2. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  tp ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. (tp @ p) ! 1 \\<in> dom (finished s)", "by (subst tp1)"], ["proof (state)\nthis:\n  (tp @ p) ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "case False"], ["proof (state)\nthis:\n  \\<not> 1 < length tp\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "with tp"], ["proof (chain)\npicking this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n  \\<not> 1 < length tp", "have \"length tp = 1\""], ["proof (prove)\nusing this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n  \\<not> 1 < length tp\n\ngoal (1 subgoal):\n 1. length tp = 1", "by (cases tp) auto"], ["proof (state)\nthis:\n  length tp = 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "with p_0"], ["proof (chain)\npicking this:\n  p ! 0 = v\n  length tp = 1", "have \"?p ! 1 = v\""], ["proof (prove)\nusing this:\n  p ! 0 = v\n  length tp = 1\n\ngoal (1 subgoal):\n 1. (tp @ p) ! 1 = v", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (tp @ p) ! 1 = v\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length tp \\<Longrightarrow>\n    (tp @ p) ! 1 \\<in> dom (finished s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (tp @ p) ! 1 = v\n\ngoal (1 subgoal):\n 1. (tp @ p) ! 1 \\<in> dom (finished s)", "by (simp add: v_fin)"], ["proof (state)\nthis:\n  (tp @ p) ! 1 \\<in> dom (finished s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (tp @ p) ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "also"], ["proof (state)\nthis:\n  (tp @ p) ! 1 \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "have \"\\<forall>k < length ?p - 1. (?p!k, ?p!Suc k) \\<in> tree_edges s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k<length (tp @ p) - 1.\n       ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "proof (safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k < length (tp @ p) - 1 \\<Longrightarrow>\n       ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k < length (tp @ p) - 1 \\<Longrightarrow>\n       ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "assume A: \"k < length ?p - 1\""], ["proof (state)\nthis:\n  k < length (tp @ p) - 1\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k < length (tp @ p) - 1 \\<Longrightarrow>\n       ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "show \"(?p!k, ?p!Suc k) \\<in> tree_edges s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "proof (cases \"k < length tp\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n 2. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "case True"], ["proof (state)\nthis:\n  k < length tp\n\ngoal (2 subgoals):\n 1. k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n 2. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "hence k: \"?p ! k = tp ! k\""], ["proof (prove)\nusing this:\n  k < length tp\n\ngoal (1 subgoal):\n 1. (tp @ p) ! k = tp ! k", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (tp @ p) ! k = tp ! k\n\ngoal (2 subgoals):\n 1. k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n 2. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "proof (cases \"Suc k < length tp\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n 2. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "case True"], ["proof (state)\nthis:\n  Suc k < length tp\n\ngoal (2 subgoals):\n 1. Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n 2. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "hence \"?p ! Suc k = tp ! Suc k\""], ["proof (prove)\nusing this:\n  Suc k < length tp\n\ngoal (1 subgoal):\n 1. (tp @ p) ! Suc k = tp ! Suc k", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (tp @ p) ! Suc k = tp ! Suc k\n\ngoal (2 subgoals):\n 1. Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n 2. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "moreover"], ["proof (state)\nthis:\n  (tp @ p) ! Suc k = tp ! Suc k\n\ngoal (2 subgoals):\n 1. Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n 2. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "from True tp"], ["proof (chain)\npicking this:\n  Suc k < length tp\n  path (tree_edges s) u tp v\n  tp \\<noteq> []", "have \"(tp ! k, tp ! Suc k) \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  Suc k < length tp\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n\ngoal (1 subgoal):\n 1. (tp ! k, tp ! Suc k) \\<in> tree_edges s", "by (auto simp add: path_nth_conv nth_append \n                       elim: allE[where x=k])"], ["proof (state)\nthis:\n  (tp ! k, tp ! Suc k) \\<in> tree_edges s\n\ngoal (2 subgoals):\n 1. Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n 2. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "ultimately"], ["proof (chain)\npicking this:\n  (tp @ p) ! Suc k = tp ! Suc k\n  (tp ! k, tp ! Suc k) \\<in> tree_edges s", "show ?thesis"], ["proof (prove)\nusing this:\n  (tp @ p) ! Suc k = tp ! Suc k\n  (tp ! k, tp ! Suc k) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "using k"], ["proof (prove)\nusing this:\n  (tp @ p) ! Suc k = tp ! Suc k\n  (tp ! k, tp ! Suc k) \\<in> tree_edges s\n  (tp @ p) ! k = tp ! k\n\ngoal (1 subgoal):\n 1. ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "by simp"], ["proof (state)\nthis:\n  ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "case False"], ["proof (state)\nthis:\n  \\<not> Suc k < length tp\n\ngoal (1 subgoal):\n 1. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "with True"], ["proof (chain)\npicking this:\n  k < length tp\n  \\<not> Suc k < length tp", "have *: \"Suc k = length tp\""], ["proof (prove)\nusing this:\n  k < length tp\n  \\<not> Suc k < length tp\n\ngoal (1 subgoal):\n 1. Suc k = length tp", "by simp"], ["proof (state)\nthis:\n  Suc k = length tp\n\ngoal (1 subgoal):\n 1. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "with tp True"], ["proof (chain)\npicking this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n  k < length tp\n  Suc k = length tp", "have \"(tp ! k, v) \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  path (tree_edges s) u tp v\n  tp \\<noteq> []\n  k < length tp\n  Suc k = length tp\n\ngoal (1 subgoal):\n 1. (tp ! k, v) \\<in> tree_edges s", "by (auto simp add: path_nth_conv nth_append \n                       elim: allE[where x=k])"], ["proof (state)\nthis:\n  (tp ! k, v) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "also"], ["proof (state)\nthis:\n  (tp ! k, v) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "from * p_0"], ["proof (chain)\npicking this:\n  Suc k = length tp\n  p ! 0 = v", "have \"v = ?p ! Suc k\""], ["proof (prove)\nusing this:\n  Suc k = length tp\n  p ! 0 = v\n\ngoal (1 subgoal):\n 1. v = (tp @ p) ! Suc k", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  v = (tp @ p) ! Suc k\n\ngoal (1 subgoal):\n 1. \\<not> Suc k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "finally"], ["proof (chain)\npicking this:\n  (tp ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "show ?thesis"], ["proof (prove)\nusing this:\n  (tp ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "by (simp add: k)"], ["proof (state)\nthis:\n  ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "case False"], ["proof (state)\nthis:\n  \\<not> k < length tp\n\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "hence *: \"Suc k - length tp = Suc (k - length tp)\""], ["proof (prove)\nusing this:\n  \\<not> k < length tp\n\ngoal (1 subgoal):\n 1. Suc k - length tp = Suc (k - length tp)", "by simp"], ["proof (state)\nthis:\n  Suc k - length tp = Suc (k - length tp)\n\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "define k' where \"k' = k - length tp\""], ["proof (state)\nthis:\n  k' = k - length tp\n\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "with False *"], ["proof (chain)\npicking this:\n  \\<not> k < length tp\n  Suc k - length tp = Suc (k - length tp)\n  k' = k - length tp", "have k': \"?p ! k = p ! k'\" \"?p ! Suc k = p ! Suc k'\""], ["proof (prove)\nusing this:\n  \\<not> k < length tp\n  Suc k - length tp = Suc (k - length tp)\n  k' = k - length tp\n\ngoal (1 subgoal):\n 1. (tp @ p) ! k = p ! k' &&& (tp @ p) ! Suc k = p ! Suc k'", "by (simp_all add: nth_append)"], ["proof (state)\nthis:\n  (tp @ p) ! k = p ! k'\n  (tp @ p) ! Suc k = p ! Suc k'\n\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "from k'_def False A"], ["proof (chain)\npicking this:\n  k' = k - length tp\n  \\<not> k < length tp\n  k < length (tp @ p) - 1", "have \"k' < length p - 1\""], ["proof (prove)\nusing this:\n  k' = k - length tp\n  \\<not> k < length tp\n  k < length (tp @ p) - 1\n\ngoal (1 subgoal):\n 1. k' < length p - 1", "by simp"], ["proof (state)\nthis:\n  k' < length p - 1\n\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "with p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w\n  k' < length p - 1", "have \"(p!k', p!Suc k') \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n  k' < length p - 1\n\ngoal (1 subgoal):\n 1. (p ! k', p ! Suc k') \\<in> tree_edges s", "by simp"], ["proof (state)\nthis:\n  (p ! k', p ! Suc k') \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "(* p is lowlink_path *)"], ["proof (state)\nthis:\n  (p ! k', p ! Suc k') \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<not> k < length tp \\<Longrightarrow>\n    ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "with k'"], ["proof (chain)\npicking this:\n  (tp @ p) ! k = p ! k'\n  (tp @ p) ! Suc k = p ! Suc k'\n  (p ! k', p ! Suc k') \\<in> tree_edges s", "show ?thesis"], ["proof (prove)\nusing this:\n  (tp @ p) ! k = p ! k'\n  (tp @ p) ! Suc k = p ! Suc k'\n  (p ! k', p ! Suc k') \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s", "by simp"], ["proof (state)\nthis:\n  ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k<length (tp @ p) - 1.\n     ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "also (conjI)"], ["proof (state)\nthis:\n  \\<forall>k<length (tp @ p) - 1.\n     ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "note calculation"], ["proof (state)\nthis:\n  (tp @ p) ! 1 \\<in> dom (finished s) \\<and>\n  (\\<forall>k<length (tp @ p) - 1.\n      ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s)\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "}"], ["proof (state)\nthis:\n  1 < length (tp @ p) \\<Longrightarrow>\n  (tp @ p) ! 1 \\<in> dom (finished s) \\<and>\n  (\\<forall>k<length (tp @ p) - 1.\n      ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s)\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "ultimately"], ["proof (chain)\npicking this:\n  path E u (tp @ p) w\n  tp @ p \\<noteq> []\n  (last (tp @ p), w) \\<in> cross_edges s \\<union> back_edges s\n  1 < length (tp @ p) \\<Longrightarrow>\n  (tp @ p) ! 1 \\<in> dom (finished s) \\<and>\n  (\\<forall>k<length (tp @ p) - 1.\n      ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s)", "have \"lowlink_path s u ?p w\""], ["proof (prove)\nusing this:\n  path E u (tp @ p) w\n  tp @ p \\<noteq> []\n  (last (tp @ p), w) \\<in> cross_edges s \\<union> back_edges s\n  1 < length (tp @ p) \\<Longrightarrow>\n  (tp @ p) ! 1 \\<in> dom (finished s) \\<and>\n  (\\<forall>k<length (tp @ p) - 1.\n      ((tp @ p) ! k, (tp @ p) ! Suc k) \\<in> tree_edges s)\n\ngoal (1 subgoal):\n 1. lowlink_path s u (tp @ p) w", "by simp"], ["proof (state)\nthis:\n  lowlink_path s u (tp @ p) w\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "thus ?thesis"], ["proof (prove)\nusing this:\n  lowlink_path s u (tp @ p) w\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", ".."], ["proof (state)\nthis:\n  \\<exists>p. lowlink_path s u p w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lowlink_path_complex:\n    assumes \"(u,v) \\<in> (tree_edges s)\\<^sup>+\"\n    and \"u \\<in> dom (finished s) \\<or> (stack s \\<noteq> [] \\<and> u = hd (stack s))\"\n    and \"(v,w) \\<in> cross_edges s \\<union> back_edges s\"\n    shows \"\\<exists>p. lowlink_path s u p w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "from assms lowlink_path_single"], ["proof (chain)\npicking this:\n  (u, v) \\<in> (tree_edges s)\\<^sup>+\n  u \\<in> dom (finished s) \\<or> stack s \\<noteq> [] \\<and> u = hd (stack s)\n  (v, w) \\<in> cross_edges s \\<union> back_edges s\n  (?v, ?w) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n  lowlink_path s ?v [?v] ?w", "have \"lowlink_path s v [v] w\""], ["proof (prove)\nusing this:\n  (u, v) \\<in> (tree_edges s)\\<^sup>+\n  u \\<in> dom (finished s) \\<or> stack s \\<noteq> [] \\<and> u = hd (stack s)\n  (v, w) \\<in> cross_edges s \\<union> back_edges s\n  (?v, ?w) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n  lowlink_path s ?v [?v] ?w\n\ngoal (1 subgoal):\n 1. lowlink_path s v [v] w", "by simp"], ["proof (state)\nthis:\n  lowlink_path s v [v] w\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "with assms lowlink_path_tree_prepend"], ["proof (chain)\npicking this:\n  (u, v) \\<in> (tree_edges s)\\<^sup>+\n  u \\<in> dom (finished s) \\<or> stack s \\<noteq> [] \\<and> u = hd (stack s)\n  (v, w) \\<in> cross_edges s \\<union> back_edges s\n  \\<lbrakk>lowlink_path s ?v ?p ?w; (?u, ?v) \\<in> (tree_edges s)\\<^sup>+;\n   ?u \\<in> dom (finished s) \\<or>\n   stack s \\<noteq> [] \\<and> ?u = hd (stack s)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p. lowlink_path s ?u p ?w\n  lowlink_path s v [v] w", "show ?thesis"], ["proof (prove)\nusing this:\n  (u, v) \\<in> (tree_edges s)\\<^sup>+\n  u \\<in> dom (finished s) \\<or> stack s \\<noteq> [] \\<and> u = hd (stack s)\n  (v, w) \\<in> cross_edges s \\<union> back_edges s\n  \\<lbrakk>lowlink_path s ?v ?p ?w; (?u, ?v) \\<in> (tree_edges s)\\<^sup>+;\n   ?u \\<in> dom (finished s) \\<or>\n   stack s \\<noteq> [] \\<and> ?u = hd (stack s)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p. lowlink_path s ?u p ?w\n  lowlink_path s v [v] w\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s u p w", "by simp"], ["proof (state)\nthis:\n  \\<exists>p. lowlink_path s u p w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_path_imp_no_lowlink_path:\n    assumes \"edges s `` {v} = {}\"\n    shows \"\\<not>lowlink_path s v p w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lowlink_path s v p w", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lowlink_path s v p w \\<Longrightarrow> False", "assume p: \"lowlink_path s v p w\""], ["proof (state)\nthis:\n  lowlink_path s v p w\n\ngoal (1 subgoal):\n 1. lowlink_path s v p w \\<Longrightarrow> False", "hence [simp]: \"p\\<noteq>[]\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n\ngoal (1 subgoal):\n 1. p \\<noteq> []", "by (simp add: lowlink_path_def)"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. lowlink_path s v p w \\<Longrightarrow> False", "from p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w", "have \"hd p = v\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n\ngoal (1 subgoal):\n 1. hd p = v", "by (auto simp add: lowlink_path_def path_hd)"], ["proof (state)\nthis:\n  hd p = v\n\ngoal (1 subgoal):\n 1. lowlink_path s v p w \\<Longrightarrow> False", "with hd_conv_nth[OF \\<open>p\\<noteq>[]\\<close>]"], ["proof (chain)\npicking this:\n  hd p = p ! 0\n  hd p = v", "have v: \"p!0 = v\""], ["proof (prove)\nusing this:\n  hd p = p ! 0\n  hd p = v\n\ngoal (1 subgoal):\n 1. p ! 0 = v", "by simp"], ["proof (state)\nthis:\n  p ! 0 = v\n\ngoal (1 subgoal):\n 1. lowlink_path s v p w \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"length p > 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < length p \\<Longrightarrow> False\n 2. \\<not> 1 < length p \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  1 < length p\n\ngoal (2 subgoals):\n 1. 1 < length p \\<Longrightarrow> False\n 2. \\<not> 1 < length p \\<Longrightarrow> False", "with p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w\n  1 < length p", "have \"(p!0,p!1) \\<in> tree_edges s\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n  1 < length p\n\ngoal (1 subgoal):\n 1. (p ! 0, p ! 1) \\<in> tree_edges s", "by (simp add: lowlink_path_def)"], ["proof (state)\nthis:\n  (p ! 0, p ! 1) \\<in> tree_edges s\n\ngoal (2 subgoals):\n 1. 1 < length p \\<Longrightarrow> False\n 2. \\<not> 1 < length p \\<Longrightarrow> False", "with v assms"], ["proof (chain)\npicking this:\n  p ! 0 = v\n  (tree_edges s \\<union> cross_edges s \\<union> back_edges s) `` {v} = {}\n  (p ! 0, p ! 1) \\<in> tree_edges s", "show False"], ["proof (prove)\nusing this:\n  p ! 0 = v\n  (tree_edges s \\<union> cross_edges s \\<union> back_edges s) `` {v} = {}\n  (p ! 0, p ! 1) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length p \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 1 < length p \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> 1 < length p\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length p \\<Longrightarrow> False", "with \\<open>p\\<noteq>[]\\<close>"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  \\<not> 1 < length p", "have \"length p = 1\""], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  \\<not> 1 < length p\n\ngoal (1 subgoal):\n 1. length p = 1", "by (cases p) auto"], ["proof (state)\nthis:\n  length p = 1\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length p \\<Longrightarrow> False", "hence \"last p = v\""], ["proof (prove)\nusing this:\n  length p = 1\n\ngoal (1 subgoal):\n 1. last p = v", "by (simp add: last_conv_nth v)"], ["proof (state)\nthis:\n  last p = v\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length p \\<Longrightarrow> False", "with p"], ["proof (chain)\npicking this:\n  lowlink_path s v p w\n  last p = v", "have \"(v,w) \\<in> edges s\""], ["proof (prove)\nusing this:\n  lowlink_path s v p w\n  last p = v\n\ngoal (1 subgoal):\n 1. (v, w) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s", "by (simp add: lowlink_path_def)"], ["proof (state)\nthis:\n  (v, w) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. \\<not> 1 < length p \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  (tree_edges s \\<union> cross_edges s \\<union> back_edges s) `` {v} = {}\n  (v, w) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s", "show False"], ["proof (prove)\nusing this:\n  (tree_edges s \\<union> cross_edges s \\<union> back_edges s) `` {v} = {}\n  (v, w) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "context begin"], ["", "interpretation timing_syntax"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma LowLink_le_disc:\n    assumes \"v \\<in> dom (discovered s)\"\n    shows \"LowLink s v \\<le> \\<delta> s v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<le> \\<delta> s v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<le> \\<delta> s v", "unfolding lowlink_set_def"], ["proof (prove)\nusing this:\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s `\n         {w \\<in> dom (discovered s).\n          v = w \\<or>\n          (v, w) \\<in> E\\<^sup>+ \\<and>\n          (w, v) \\<in> E\\<^sup>+ \\<and> (\\<exists>p. lowlink_path s v p w)})\n    \\<le> \\<delta> s v", "by clarsimp"], ["", "lemma LowLink_lessE:\n    assumes \"LowLink s v < x\"\n    and \"v \\<in> dom (discovered s)\"\n    obtains w where \"\\<delta> s w < x\" \"w \\<in> lowlink_set s v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < x; w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < x; w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?L = \"\\<delta> s ` lowlink_set s v\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < x; w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "note assms"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s v) < x\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < x; w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s v) < x\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < x; w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from lowlink_set_finite"], ["proof (chain)\npicking this:\n  finite (lowlink_set s ?v)", "have \"finite ?L\""], ["proof (prove)\nusing this:\n  finite (lowlink_set s ?v)\n\ngoal (1 subgoal):\n 1. finite (\\<delta> s ` lowlink_set s v)", "by auto"], ["proof (state)\nthis:\n  finite (\\<delta> s ` lowlink_set s v)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < x; w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  finite (\\<delta> s ` lowlink_set s v)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < x; w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from lowlink_set_not_empty assms"], ["proof (chain)\npicking this:\n  ?v \\<in> dom (discovered s) \\<Longrightarrow> lowlink_set s ?v \\<noteq> {}\n  Min (\\<delta> s ` lowlink_set s v) < x\n  v \\<in> dom (discovered s)", "have \"?L \\<noteq> {}\""], ["proof (prove)\nusing this:\n  ?v \\<in> dom (discovered s) \\<Longrightarrow> lowlink_set s ?v \\<noteq> {}\n  Min (\\<delta> s ` lowlink_set s v) < x\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. \\<delta> s ` lowlink_set s v \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  \\<delta> s ` lowlink_set s v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < x; w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  Min (\\<delta> s ` lowlink_set s v) < x\n  v \\<in> dom (discovered s)\n  finite (\\<delta> s ` lowlink_set s v)\n  \\<delta> s ` lowlink_set s v \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  Min (\\<delta> s ` lowlink_set s v) < x\n  v \\<in> dom (discovered s)\n  finite (\\<delta> s ` lowlink_set s v)\n  \\<delta> s ` lowlink_set s v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  Min (\\<delta> s ` lowlink_set s v) < x\n  v \\<in> dom (discovered s)\n  finite (\\<delta> s ` lowlink_set s v)\n  \\<delta> s ` lowlink_set s v \\<noteq> {}\n  \\<lbrakk>\\<delta> s ?w7 < x; ?w7 \\<in> lowlink_set s v\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (auto simp: Min_less_iff)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LowLink_lessI:\n    assumes \"y \\<in> lowlink_set s v\"\n    and \"\\<delta> s y < \\<delta> s v\"\n    shows \"LowLink s v < \\<delta> s v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "let ?L = \"\\<delta> s ` lowlink_set s v\""], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "from assms"], ["proof (chain)\npicking this:\n  y \\<in> lowlink_set s v\n  \\<delta> s y < \\<delta> s v", "have \"\\<delta> s y \\<in> ?L\""], ["proof (prove)\nusing this:\n  y \\<in> lowlink_set s v\n  \\<delta> s y < \\<delta> s v\n\ngoal (1 subgoal):\n 1. \\<delta> s y \\<in> \\<delta> s ` lowlink_set s v", "by simp"], ["proof (state)\nthis:\n  \\<delta> s y \\<in> \\<delta> s ` lowlink_set s v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "moreover"], ["proof (state)\nthis:\n  \\<delta> s y \\<in> \\<delta> s ` lowlink_set s v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "hence \"?L \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<delta> s y \\<in> \\<delta> s ` lowlink_set s v\n\ngoal (1 subgoal):\n 1. \\<delta> s ` lowlink_set s v \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  \\<delta> s ` lowlink_set s v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "moreover"], ["proof (state)\nthis:\n  \\<delta> s ` lowlink_set s v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "from lowlink_set_finite"], ["proof (chain)\npicking this:\n  finite (lowlink_set s ?v)", "have \"finite ?L\""], ["proof (prove)\nusing this:\n  finite (lowlink_set s ?v)\n\ngoal (1 subgoal):\n 1. finite (\\<delta> s ` lowlink_set s v)", "by auto"], ["proof (state)\nthis:\n  finite (\\<delta> s ` lowlink_set s v)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "ultimately"], ["proof (chain)\npicking this:\n  \\<delta> s y \\<in> \\<delta> s ` lowlink_set s v\n  \\<delta> s ` lowlink_set s v \\<noteq> {}\n  finite (\\<delta> s ` lowlink_set s v)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> s y \\<in> \\<delta> s ` lowlink_set s v\n  \\<delta> s ` lowlink_set s v \\<noteq> {}\n  finite (\\<delta> s ` lowlink_set s v)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "by (metis Min_less_iff assms(2))"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LowLink_eqI:\n    assumes \"DFS_invar G param s'\"\n    assumes sub_m: \"discovered s \\<subseteq>\\<^sub>m discovered s'\"\n    assumes sub: \"lowlink_set s w \\<subseteq> lowlink_set s' w\"\n    and rev_sub: \"lowlink_set s' w \\<subseteq> lowlink_set s w \\<union> X\"\n    and w_disc: \"w \\<in> dom (discovered s)\"\n    and X: \"\\<And>x. \\<lbrakk>x \\<in> X; x \\<in> lowlink_set s' w\\<rbrakk> \\<Longrightarrow> \\<delta> s' x \\<ge> LowLink s w\"\n    shows \"LowLink s w = LowLink s' w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) =\n    Min (\\<delta> s' ` lowlink_set s' w)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n    Min (\\<delta> s' ` lowlink_set s' w) \\<Longrightarrow>\n    False", "interpret s': DFS_invar where s=s'"], ["proof (prove)\ngoal (1 subgoal):\n 1. DFS_invar G param s'", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n    Min (\\<delta> s' ` lowlink_set s' w) \\<Longrightarrow>\n    False", "assume A: \"LowLink s w \\<noteq> LowLink s' w\""], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n  Min (\\<delta> s' ` lowlink_set s' w)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n    Min (\\<delta> s' ` lowlink_set s' w) \\<Longrightarrow>\n    False", "from lowlink_set_discovered sub sub_m w_disc"], ["proof (chain)\npicking this:\n  lowlink_set s ?v \\<subseteq> dom (discovered s)\n  lowlink_set s w \\<subseteq> lowlink_set s' w\n  discovered s \\<subseteq>\\<^sub>m discovered s'\n  w \\<in> dom (discovered s)", "have \n           sub': \"\\<delta> s ` lowlink_set s w \\<subseteq> \\<delta> s' ` lowlink_set s' w\"\n      and  w_disc': \"w \\<in> dom (discovered s')\"\n      and  eq: \"\\<And>ll. ll \\<in> lowlink_set s w \\<Longrightarrow> \\<delta> s' ll = \\<delta> s ll\""], ["proof (prove)\nusing this:\n  lowlink_set s ?v \\<subseteq> dom (discovered s)\n  lowlink_set s w \\<subseteq> lowlink_set s' w\n  discovered s \\<subseteq>\\<^sub>m discovered s'\n  w \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. \\<delta> s ` lowlink_set s w\n    \\<subseteq> \\<delta> s' ` lowlink_set s' w &&&\n    w \\<in> dom (discovered s') &&&\n    (\\<And>ll.\n        ll \\<in> lowlink_set s w \\<Longrightarrow>\n        \\<delta> s' ll = \\<delta> s ll)", "by (force simp: map_le_def)+"], ["proof (state)\nthis:\n  \\<delta> s ` lowlink_set s w \\<subseteq> \\<delta> s' ` lowlink_set s' w\n  w \\<in> dom (discovered s')\n  ?ll7 \\<in> lowlink_set s w \\<Longrightarrow>\n  \\<delta> s' ?ll7 = \\<delta> s ?ll7\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n    Min (\\<delta> s' ` lowlink_set s' w) \\<Longrightarrow>\n    False", "from lowlink_set_not_empty[OF w_disc] A Min_antimono[OF sub'] s'.lowlink_set_finite"], ["proof (chain)\npicking this:\n  lowlink_set s w \\<noteq> {}\n  Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n  Min (\\<delta> s' ` lowlink_set s' w)\n  \\<lbrakk>\\<delta> s ` lowlink_set s w \\<noteq> {};\n   finite (\\<delta> s' ` lowlink_set s' w)\\<rbrakk>\n  \\<Longrightarrow> Min (\\<delta> s' ` lowlink_set s' w)\n                    \\<le> Min (\\<delta> s ` lowlink_set s w)\n  finite (lowlink_set s' ?v)", "have \n      \"LowLink s' w < LowLink s w\""], ["proof (prove)\nusing this:\n  lowlink_set s w \\<noteq> {}\n  Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n  Min (\\<delta> s' ` lowlink_set s' w)\n  \\<lbrakk>\\<delta> s ` lowlink_set s w \\<noteq> {};\n   finite (\\<delta> s' ` lowlink_set s' w)\\<rbrakk>\n  \\<Longrightarrow> Min (\\<delta> s' ` lowlink_set s' w)\n                    \\<le> Min (\\<delta> s ` lowlink_set s w)\n  finite (lowlink_set s' ?v)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s' ` lowlink_set s' w)\n    < Min (\\<delta> s ` lowlink_set s w)", "by fastforce"], ["proof (state)\nthis:\n  Min (\\<delta> s' ` lowlink_set s' w) < Min (\\<delta> s ` lowlink_set s w)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n    Min (\\<delta> s' ` lowlink_set s' w) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  Min (\\<delta> s' ` lowlink_set s' w) < Min (\\<delta> s ` lowlink_set s w)", "obtain ll where ll: \"ll \\<in> lowlink_set s' w\" and ll_le: \"\\<delta> s' ll < LowLink s w\""], ["proof (prove)\nusing this:\n  Min (\\<delta> s' ` lowlink_set s' w) < Min (\\<delta> s ` lowlink_set s w)\n\ngoal (1 subgoal):\n 1. (\\<And>ll.\n        \\<lbrakk>ll \\<in> lowlink_set s' w;\n         \\<delta> s' ll < Min (\\<delta> s ` lowlink_set s w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis s'.LowLink_lessE w_disc')"], ["proof (state)\nthis:\n  ll \\<in> lowlink_set s' w\n  \\<delta> s' ll < Min (\\<delta> s ` lowlink_set s w)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n    Min (\\<delta> s' ` lowlink_set s' w) \\<Longrightarrow>\n    False", "with rev_sub"], ["proof (chain)\npicking this:\n  lowlink_set s' w \\<subseteq> lowlink_set s w \\<union> X\n  ll \\<in> lowlink_set s' w\n  \\<delta> s' ll < Min (\\<delta> s ` lowlink_set s w)", "have \"ll \\<in> lowlink_set s w \\<or> ll \\<in> X\""], ["proof (prove)\nusing this:\n  lowlink_set s' w \\<subseteq> lowlink_set s w \\<union> X\n  ll \\<in> lowlink_set s' w\n  \\<delta> s' ll < Min (\\<delta> s ` lowlink_set s w)\n\ngoal (1 subgoal):\n 1. ll \\<in> lowlink_set s w \\<or> ll \\<in> X", "by auto"], ["proof (state)\nthis:\n  ll \\<in> lowlink_set s w \\<or> ll \\<in> X\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n    Min (\\<delta> s' ` lowlink_set s' w) \\<Longrightarrow>\n    False", "hence \"LowLink s w \\<le> \\<delta> s' ll\""], ["proof (prove)\nusing this:\n  ll \\<in> lowlink_set s w \\<or> ll \\<in> X\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ll \\<in> lowlink_set s w \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll\n 2. ll \\<in> X \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "assume \"ll \\<in> lowlink_set s w\""], ["proof (state)\nthis:\n  ll \\<in> lowlink_set s w\n\ngoal (2 subgoals):\n 1. ll \\<in> lowlink_set s w \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll\n 2. ll \\<in> X \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "with lowlink_set_finite eq"], ["proof (chain)\npicking this:\n  finite (lowlink_set s ?v)\n  ?ll7 \\<in> lowlink_set s w \\<Longrightarrow>\n  \\<delta> s' ?ll7 = \\<delta> s ?ll7\n  ll \\<in> lowlink_set s w", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (lowlink_set s ?v)\n  ?ll7 \\<in> lowlink_set s w \\<Longrightarrow>\n  \\<delta> s' ?ll7 = \\<delta> s ?ll7\n  ll \\<in> lowlink_set s w\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "by force"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll\n\ngoal (1 subgoal):\n 1. ll \\<in> X \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ll \\<in> X \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "assume \"ll \\<in> X\""], ["proof (state)\nthis:\n  ll \\<in> X\n\ngoal (1 subgoal):\n 1. ll \\<in> X \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "with ll"], ["proof (chain)\npicking this:\n  ll \\<in> lowlink_set s' w\n  ll \\<in> X", "show ?thesis"], ["proof (prove)\nusing this:\n  ll \\<in> lowlink_set s' w\n  ll \\<in> X\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "by (metis X)"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s w) \\<noteq>\n    Min (\\<delta> s' ` lowlink_set s' w) \\<Longrightarrow>\n    False", "with ll_le"], ["proof (chain)\npicking this:\n  \\<delta> s' ll < Min (\\<delta> s ` lowlink_set s w)\n  Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll", "show False"], ["proof (prove)\nusing this:\n  \\<delta> s' ll < Min (\\<delta> s ` lowlink_set s w)\n  Min (\\<delta> s ` lowlink_set s w) \\<le> \\<delta> s' ll\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LowLink_eq_disc_iff_scc_root:\n    assumes \"v \\<in> dom (finished s) \\<or> (stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {})\"\n    shows \"LowLink s v = \\<delta> s v \\<longleftrightarrow> scc_root s v (scc_of E v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v) =\n    scc_root s v (scc_of E v)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)\n 2. scc_root s v (scc_of E v) \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v", "let ?scc = \"scc_of E v\""], ["proof (state)\ngoal (2 subgoals):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)\n 2. scc_root s v (scc_of E v) \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v", "assume scc: \"scc_root s v ?scc\""], ["proof (state)\nthis:\n  scc_root s v (scc_of E v)\n\ngoal (2 subgoals):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)\n 2. scc_root s v (scc_of E v) \\<Longrightarrow>\n    Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v", "show \"LowLink s v = \\<delta> s v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "assume A: \"LowLink s v \\<noteq> \\<delta> s v\""], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s v) \\<noteq> \\<delta> s v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "from assms finished_discovered stack_discovered hd_in_set"], ["proof (chain)\npicking this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  dom (finished s) \\<subseteq> dom (discovered s)\n  set (stack s) \\<subseteq> dom (discovered s)\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs", "have disc: \"v \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  dom (finished s) \\<subseteq> dom (discovered s)\n  set (stack s) \\<subseteq> dom (discovered s)\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. v \\<in> dom (discovered s)", "by blast"], ["proof (state)\nthis:\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "with assms LowLink_le_disc A"], ["proof (chain)\npicking this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  ?v \\<in> dom (discovered s) \\<Longrightarrow>\n  Min (\\<delta> s ` lowlink_set s ?v) \\<le> \\<delta> s ?v\n  Min (\\<delta> s ` lowlink_set s v) \\<noteq> \\<delta> s v\n  v \\<in> dom (discovered s)", "have \"LowLink s v < \\<delta> s v\""], ["proof (prove)\nusing this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  ?v \\<in> dom (discovered s) \\<Longrightarrow>\n  Min (\\<delta> s ` lowlink_set s ?v) \\<le> \\<delta> s ?v\n  Min (\\<delta> s ` lowlink_set s v) \\<noteq> \\<delta> s v\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "by force"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "with disc"], ["proof (chain)\npicking this:\n  v \\<in> dom (discovered s)\n  Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "obtain w where \n        w: \"\\<delta> s w < \\<delta> s v\" \"w \\<in> lowlink_set s v\""], ["proof (prove)\nusing this:\n  v \\<in> dom (discovered s)\n  Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>\\<delta> s w < \\<delta> s v;\n         w \\<in> lowlink_set s v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis LowLink_lessE)"], ["proof (state)\nthis:\n  \\<delta> s w < \\<delta> s v\n  w \\<in> lowlink_set s v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "with lowlink_set_discovered"], ["proof (chain)\npicking this:\n  lowlink_set s ?v \\<subseteq> dom (discovered s)\n  \\<delta> s w < \\<delta> s v\n  w \\<in> lowlink_set s v", "have wdisc: \"w \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  lowlink_set s ?v \\<subseteq> dom (discovered s)\n  \\<delta> s w < \\<delta> s v\n  w \\<in> lowlink_set s v\n\ngoal (1 subgoal):\n 1. w \\<in> dom (discovered s)", "by auto"], ["proof (state)\nthis:\n  w \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "from w"], ["proof (chain)\npicking this:\n  \\<delta> s w < \\<delta> s v\n  w \\<in> lowlink_set s v", "have \"(v,w) \\<in> E\\<^sup>*\" \"(w,v) \\<in> E\\<^sup>*\""], ["proof (prove)\nusing this:\n  \\<delta> s w < \\<delta> s v\n  w \\<in> lowlink_set s v\n\ngoal (1 subgoal):\n 1. (v, w) \\<in> E\\<^sup>* &&& (w, v) \\<in> E\\<^sup>*", "by (auto simp add: lowlink_set_def)"], ["proof (state)\nthis:\n  (v, w) \\<in> E\\<^sup>*\n  (w, v) \\<in> E\\<^sup>*\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  (v, w) \\<in> E\\<^sup>*\n  (w, v) \\<in> E\\<^sup>*\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "have \"is_scc E ?scc\" \"v \\<in> ?scc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_scc E (scc_of E v) &&& v \\<in> scc_of E v", "by simp_all"], ["proof (state)\nthis:\n  is_scc E (scc_of E v)\n  v \\<in> scc_of E v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  (v, w) \\<in> E\\<^sup>*\n  (w, v) \\<in> E\\<^sup>*\n  is_scc E (scc_of E v)\n  v \\<in> scc_of E v", "have \"w \\<in> ?scc\""], ["proof (prove)\nusing this:\n  (v, w) \\<in> E\\<^sup>*\n  (w, v) \\<in> E\\<^sup>*\n  is_scc E (scc_of E v)\n  v \\<in> scc_of E v\n\ngoal (1 subgoal):\n 1. w \\<in> scc_of E v", "by (metis is_scc_closed)"], ["proof (state)\nthis:\n  w \\<in> scc_of E v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "with wdisc scc_root_disc_le[OF scc]"], ["proof (chain)\npicking this:\n  w \\<in> dom (discovered s)\n  \\<lbrakk>?x \\<in> scc_of E v; ?x \\<in> dom (discovered s)\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s ?x\n  w \\<in> scc_of E v", "have \"\\<delta> s v \\<le> \\<delta> s w\""], ["proof (prove)\nusing this:\n  w \\<in> dom (discovered s)\n  \\<lbrakk>?x \\<in> scc_of E v; ?x \\<in> dom (discovered s)\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v \\<le> \\<delta> s ?x\n  w \\<in> scc_of E v\n\ngoal (1 subgoal):\n 1. \\<delta> s v \\<le> \\<delta> s w", "by simp"], ["proof (state)\nthis:\n  \\<delta> s v \\<le> \\<delta> s w\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) \\<noteq>\n    \\<delta> s v \\<Longrightarrow>\n    False", "with w"], ["proof (chain)\npicking this:\n  \\<delta> s w < \\<delta> s v\n  w \\<in> lowlink_set s v\n  \\<delta> s v \\<le> \\<delta> s w", "show False"], ["proof (prove)\nusing this:\n  \\<delta> s w < \\<delta> s v\n  w \\<in> lowlink_set s v\n  \\<delta> s v \\<le> \\<delta> s w\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "assume LL: \"LowLink s v = \\<delta> s v\""], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "from assms finished_discovered stack_discovered hd_in_set"], ["proof (chain)\npicking this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  dom (finished s) \\<subseteq> dom (discovered s)\n  set (stack s) \\<subseteq> dom (discovered s)\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs", "have \n      v_disc: \"v \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  dom (finished s) \\<subseteq> dom (discovered s)\n  set (stack s) \\<subseteq> dom (discovered s)\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. v \\<in> dom (discovered s)", "by blast"], ["proof (state)\nthis:\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "from assms finished_no_pending"], ["proof (chain)\npicking this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  ?v \\<in> dom (finished s) \\<Longrightarrow> pending s `` {?v} = {}", "have\n      v_no_p: \"pending s `` {v} = {}\""], ["proof (prove)\nusing this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  ?v \\<in> dom (finished s) \\<Longrightarrow> pending s `` {?v} = {}\n\ngoal (1 subgoal):\n 1. pending s `` {v} = {}", "by blast"], ["proof (state)\nthis:\n  pending s `` {v} = {}\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "let ?scc = \"scc_of E v\""], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "have is_scc: \"is_scc E ?scc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_scc E (scc_of E v)", "by simp"], ["proof (state)\nthis:\n  is_scc E (scc_of E v)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "{"], ["proof (state)\nthis:\n  is_scc E (scc_of E v)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "assume \"r \\<noteq> v\"\n      and \"r \\<in> ?scc\" \"r \\<in> dom (discovered s)\""], ["proof (state)\nthis:\n  r \\<noteq> v\n  r \\<in> scc_of E v\n  r \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "have \"v \\<in> ?scc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> scc_of E v", "by simp"], ["proof (state)\nthis:\n  v \\<in> scc_of E v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "with \\<open>r \\<in> ?scc\\<close> is_scc"], ["proof (chain)\npicking this:\n  r \\<in> scc_of E v\n  is_scc E (scc_of E v)\n  v \\<in> scc_of E v", "have \"(v,r) \\<in> (Restr E ?scc)\\<^sup>*\""], ["proof (prove)\nusing this:\n  r \\<in> scc_of E v\n  is_scc E (scc_of E v)\n  v \\<in> scc_of E v\n\ngoal (1 subgoal):\n 1. (v, r) \\<in> (Restr E (scc_of E v))\\<^sup>*", "by (simp add: is_scc_connected')"], ["proof (state)\nthis:\n  (v, r) \\<in> (Restr E (scc_of E v))\\<^sup>*\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "hence \"(v,r) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  (v, r) \\<in> (Restr E (scc_of E v))\\<^sup>*\n\ngoal (1 subgoal):\n 1. (v, r) \\<in> (tree_edges s)\\<^sup>+", "using \\<open>r\\<noteq>v\\<close>"], ["proof (prove)\nusing this:\n  (v, r) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  r \\<noteq> v\n\ngoal (1 subgoal):\n 1. (v, r) \\<in> (tree_edges s)\\<^sup>+", "proof (induction rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "case (step y z)"], ["proof (state)\nthis:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "hence \"(v,z) \\<in> (Restr E ?scc)\\<^sup>*\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (Restr E (scc_of E v))\\<^sup>*", "by (metis rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  (v, z) \\<in> (Restr E (scc_of E v))\\<^sup>*\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "hence \"(v,z) \\<in> E\\<^sup>*\""], ["proof (prove)\nusing this:\n  (v, z) \\<in> (Restr E (scc_of E v))\\<^sup>*\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> E\\<^sup>*", "by (metis Restr_rtrancl_mono)"], ["proof (state)\nthis:\n  (v, z) \\<in> E\\<^sup>*\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "from step"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v", "have \"(z,v) \\<in> E\\<^sup>*\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n\ngoal (1 subgoal):\n 1. (z, v) \\<in> E\\<^sup>*", "by (simp add: is_scc_connected[OF is_scc])"], ["proof (state)\nthis:\n  (z, v) \\<in> E\\<^sup>*\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "{"], ["proof (state)\nthis:\n  (z, v) \\<in> E\\<^sup>*\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume z_disc: \"z \\<in> dom (discovered s)\"\n          and \"\\<exists>p. lowlink_path s v p z\""], ["proof (state)\nthis:\n  z \\<in> dom (discovered s)\n  \\<exists>p. lowlink_path s v p z\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with \\<open>(z,v)\\<in>E\\<^sup>*\\<close> \\<open>(v,z)\\<in>E\\<^sup>*\\<close>"], ["proof (chain)\npicking this:\n  (z, v) \\<in> E\\<^sup>*\n  (v, z) \\<in> E\\<^sup>*\n  z \\<in> dom (discovered s)\n  \\<exists>p. lowlink_path s v p z", "have ll: \"z \\<in> lowlink_set s v\""], ["proof (prove)\nusing this:\n  (z, v) \\<in> E\\<^sup>*\n  (v, z) \\<in> E\\<^sup>*\n  z \\<in> dom (discovered s)\n  \\<exists>p. lowlink_path s v p z\n\ngoal (1 subgoal):\n 1. z \\<in> lowlink_set s v", "by (metis lowlink_setI)"], ["proof (state)\nthis:\n  z \\<in> lowlink_set s v\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "have \"\\<delta> s v < \\<delta> s z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> s v < \\<delta> s z", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<delta> s v < \\<delta> s z \\<Longrightarrow> False", "presume \"\\<delta> s v \\<ge> \\<delta> s z\""], ["proof (state)\nthis:\n  \\<delta> s z \\<le> \\<delta> s v\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> s v < \\<delta> s z \\<Longrightarrow> False", "with \\<open>z\\<noteq>v\\<close> v_disc z_disc disc_unequal"], ["proof (chain)\npicking this:\n  z \\<noteq> v\n  v \\<in> dom (discovered s)\n  z \\<in> dom (discovered s)\n  \\<lbrakk>?v \\<in> dom (discovered s); ?w \\<in> dom (discovered s);\n   ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?v \\<noteq> \\<delta> s ?w\n  \\<delta> s z \\<le> \\<delta> s v", "have \"\\<delta> s z < \\<delta> s v\""], ["proof (prove)\nusing this:\n  z \\<noteq> v\n  v \\<in> dom (discovered s)\n  z \\<in> dom (discovered s)\n  \\<lbrakk>?v \\<in> dom (discovered s); ?w \\<in> dom (discovered s);\n   ?v \\<noteq> ?w\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?v \\<noteq> \\<delta> s ?w\n  \\<delta> s z \\<le> \\<delta> s v\n\ngoal (1 subgoal):\n 1. \\<delta> s z < \\<delta> s v", "by fastforce"], ["proof (state)\nthis:\n  \\<delta> s z < \\<delta> s v\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> s v < \\<delta> s z \\<Longrightarrow> False", "with ll"], ["proof (chain)\npicking this:\n  z \\<in> lowlink_set s v\n  \\<delta> s z < \\<delta> s v", "have \"LowLink s v < \\<delta> s v\""], ["proof (prove)\nusing this:\n  z \\<in> lowlink_set s v\n  \\<delta> s z < \\<delta> s v\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "by (metis LowLink_lessI)"], ["proof (state)\nthis:\n  Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> s v < \\<delta> s z \\<Longrightarrow> False", "with LL"], ["proof (chain)\npicking this:\n  Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v\n  Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v", "show False"], ["proof (prove)\nusing this:\n  Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v\n  Min (\\<delta> s ` lowlink_set s v) < \\<delta> s v\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> \\<delta> s v < \\<delta> s z \\<Longrightarrow>\n    \\<delta> s z \\<le> \\<delta> s v", "qed simp"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "}"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> dom (discovered s);\n   \\<exists>p. lowlink_path s v p z\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s z\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "note \\<delta>z = this"], ["proof (state)\nthis:\n  \\<lbrakk>z \\<in> dom (discovered s);\n   \\<exists>p. lowlink_path s v p z\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s z\n\ngoal (2 subgoals):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>(v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*;\n        (y, z) \\<in> Restr E (scc_of E v);\n        y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+;\n        z \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "proof (cases \"y=v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "case True"], ["proof (state)\nthis:\n  y = v\n\ngoal (2 subgoals):\n 1. y = v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "note [simp] = this"], ["proof (state)\nthis:\n  y = v\n\ngoal (2 subgoals):\n 1. y = v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with step v_no_p v_disc no_pending_imp_succ_discovered"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  pending s `` {v} = {}\n  v \\<in> dom (discovered s)\n  \\<lbrakk>?u \\<in> dom (discovered s); pending s `` {?u} = {};\n   ?v \\<in> E `` {?u}\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> dom (discovered s)\n  y = v", "have\n            z_disc: \"z \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  pending s `` {v} = {}\n  v \\<in> dom (discovered s)\n  \\<lbrakk>?u \\<in> dom (discovered s); pending s `` {?u} = {};\n   ?v \\<in> E `` {?u}\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> dom (discovered s)\n  y = v\n\ngoal (1 subgoal):\n 1. z \\<in> dom (discovered s)", "by blast"], ["proof (state)\nthis:\n  z \\<in> dom (discovered s)\n\ngoal (2 subgoals):\n 1. y = v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "from step edges_covered v_no_p v_disc"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  E \\<inter> dom (discovered s) \\<times> UNIV - pending s =\n  tree_edges s \\<union> cross_edges s \\<union> back_edges s\n  pending s `` {v} = {}\n  v \\<in> dom (discovered s)", "have \"(v,z) \\<in> edges s\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  E \\<inter> dom (discovered s) \\<times> UNIV - pending s =\n  tree_edges s \\<union> cross_edges s \\<union> back_edges s\n  pending s `` {v} = {}\n  v \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s", "by auto"], ["proof (state)\nthis:\n  (v, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s\n\ngoal (2 subgoals):\n 1. y = v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "thus ?thesis"], ["proof (prove)\nusing this:\n  (v, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "proof (rule edgesE_CB)"], ["proof (state)\ngoal (2 subgoals):\n 1. (v, z) \\<in> tree_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (v, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume \"(v,z) \\<in> tree_edges s\""], ["proof (state)\nthis:\n  (v, z) \\<in> tree_edges s\n\ngoal (2 subgoals):\n 1. (v, z) \\<in> tree_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (v, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "thus ?thesis"], ["proof (prove)\nusing this:\n  (v, z) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", ".."], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (v, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume CB: \"(v,z) \\<in> cross_edges s \\<union> back_edges s\""], ["proof (state)\nthis:\n  (v, z) \\<in> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "hence \"lowlink_path s v [v] z\""], ["proof (prove)\nusing this:\n  (v, z) \\<in> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. lowlink_path s v [v] z", "by (simp add: lowlink_path_single)"], ["proof (state)\nthis:\n  lowlink_path s v [v] z\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with \\<delta>z[OF z_disc] no_pending_succ_impl_path_in_tree v_disc v_no_p step"], ["proof (chain)\npicking this:\n  \\<exists>p. lowlink_path s v p z \\<Longrightarrow>\n  \\<delta> s v < \\<delta> s z\n  \\<lbrakk>?v \\<in> dom (discovered s); pending s `` {?v} = {};\n   ?w \\<in> E `` {?v}; \\<delta> s ?v < \\<delta> s ?w\\<rbrakk>\n  \\<Longrightarrow> (?v, ?w) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> dom (discovered s)\n  pending s `` {v} = {}\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  lowlink_path s v [v] z", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>p. lowlink_path s v p z \\<Longrightarrow>\n  \\<delta> s v < \\<delta> s z\n  \\<lbrakk>?v \\<in> dom (discovered s); pending s `` {?v} = {};\n   ?w \\<in> E `` {?v}; \\<delta> s ?v < \\<delta> s ?w\\<rbrakk>\n  \\<Longrightarrow> (?v, ?w) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> dom (discovered s)\n  pending s `` {v} = {}\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  lowlink_path s v [v] z\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "by auto"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "case False"], ["proof (state)\nthis:\n  y \\<noteq> v\n\ngoal (1 subgoal):\n 1. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with step.IH"], ["proof (chain)\npicking this:\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  y \\<noteq> v", "have T: \"(v,y) \\<in> (tree_edges s)\\<^sup>+\""], ["proof (prove)\nusing this:\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  y \\<noteq> v\n\ngoal (1 subgoal):\n 1. (v, y) \\<in> (tree_edges s)\\<^sup>+", "."], ["proof (state)\nthis:\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with tree_path_impl_parenthesis assms hd_stack_tree_path_finished tree_path_disc"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    \\<delta> s ?v < \\<delta> s ?w \\<and>\n                    \\<phi> s ?w < \\<phi> s ?v\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  \\<lbrakk>stack s \\<noteq> [];\n   (hd (stack s), ?v) \\<in> (tree_edges s)\\<^sup>+\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> dom (finished s)\n  (?v, ?w) \\<in> (tree_edges s)\\<^sup>+ \\<Longrightarrow>\n  \\<delta> s ?v < \\<delta> s ?w\n  (v, y) \\<in> (tree_edges s)\\<^sup>+", "have \n            y_fin: \"y \\<in> dom (finished s)\"\n            and y_\\<delta> : \"\\<delta> s v < \\<delta> s y\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    \\<delta> s ?v < \\<delta> s ?w \\<and>\n                    \\<phi> s ?w < \\<phi> s ?v\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  \\<lbrakk>stack s \\<noteq> [];\n   (hd (stack s), ?v) \\<in> (tree_edges s)\\<^sup>+\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> dom (finished s)\n  (?v, ?w) \\<in> (tree_edges s)\\<^sup>+ \\<Longrightarrow>\n  \\<delta> s ?v < \\<delta> s ?w\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. y \\<in> dom (finished s) &&& \\<delta> s v < \\<delta> s y", "by blast+"], ["proof (state)\nthis:\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n\ngoal (1 subgoal):\n 1. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "with step"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y", "have z_disc: \"z \\<in> dom (discovered s)\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n\ngoal (1 subgoal):\n 1. z \\<in> dom (discovered s)", "using finished_imp_succ_discovered"], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  y \\<in> dom (finished s)\n  \\<delta> s v < \\<delta> s y\n  \\<lbrakk>?v \\<in> dom (finished s); ?w \\<in> E `` {?v}\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. z \\<in> dom (discovered s)", "by auto"], ["proof (state)\nthis:\n  z \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "from step edges_covered finished_no_pending[of y] y_fin finished_discovered"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  E \\<inter> dom (discovered s) \\<times> UNIV - pending s =\n  tree_edges s \\<union> cross_edges s \\<union> back_edges s\n  y \\<in> dom (finished s) \\<Longrightarrow> pending s `` {y} = {}\n  y \\<in> dom (finished s)\n  dom (finished s) \\<subseteq> dom (discovered s)", "have \n            \"(y,z) \\<in> edges s\""], ["proof (prove)\nusing this:\n  (v, y) \\<in> (Restr E (scc_of E v))\\<^sup>*\n  (y, z) \\<in> Restr E (scc_of E v)\n  y \\<noteq> v \\<Longrightarrow> (v, y) \\<in> (tree_edges s)\\<^sup>+\n  z \\<noteq> v\n  E \\<inter> dom (discovered s) \\<times> UNIV - pending s =\n  tree_edges s \\<union> cross_edges s \\<union> back_edges s\n  y \\<in> dom (finished s) \\<Longrightarrow> pending s `` {y} = {}\n  y \\<in> dom (finished s)\n  dom (finished s) \\<subseteq> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s", "by fast"], ["proof (state)\nthis:\n  (y, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. y \\<noteq> v \\<Longrightarrow> (v, z) \\<in> (tree_edges s)\\<^sup>+", "thus ?thesis"], ["proof (prove)\nusing this:\n  (y, z) \\<in> tree_edges s \\<union> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "proof (rule edgesE_CB)"], ["proof (state)\ngoal (2 subgoals):\n 1. (y, z) \\<in> tree_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume \"(y,z) \\<in> tree_edges s\""], ["proof (state)\nthis:\n  (y, z) \\<in> tree_edges s\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> tree_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with T"], ["proof (chain)\npicking this:\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n  (y, z) \\<in> tree_edges s", "show ?thesis"], ["proof (prove)\nusing this:\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n  (y, z) \\<in> tree_edges s\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", ".."], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (y, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume CB: \"(y,z) \\<in> cross_edges s \\<union> back_edges s\""], ["proof (state)\nthis:\n  (y, z) \\<in> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with lowlink_path_complex[OF T] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>v \\<in> dom (finished s) \\<or>\n           stack s \\<noteq> [] \\<and> v = hd (stack s);\n   (y, ?w) \\<in> cross_edges s \\<union> back_edges s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p. lowlink_path s v p ?w\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  (y, z) \\<in> cross_edges s \\<union> back_edges s", "have \n              \"\\<exists>p. lowlink_path s v p z\""], ["proof (prove)\nusing this:\n  \\<lbrakk>v \\<in> dom (finished s) \\<or>\n           stack s \\<noteq> [] \\<and> v = hd (stack s);\n   (y, ?w) \\<in> cross_edges s \\<union> back_edges s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>p. lowlink_path s v p ?w\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  (y, z) \\<in> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. \\<exists>p. lowlink_path s v p z", "by blast"], ["proof (state)\nthis:\n  \\<exists>p. lowlink_path s v p z\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with \\<delta>z z_disc"], ["proof (chain)\npicking this:\n  \\<lbrakk>z \\<in> dom (discovered s);\n   \\<exists>p. lowlink_path s v p z\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)\n  \\<exists>p. lowlink_path s v p z", "have \\<delta>z: \"\\<delta> s v < \\<delta> s z\""], ["proof (prove)\nusing this:\n  \\<lbrakk>z \\<in> dom (discovered s);\n   \\<exists>p. lowlink_path s v p z\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)\n  \\<exists>p. lowlink_path s v p z\n\ngoal (1 subgoal):\n 1. \\<delta> s v < \\<delta> s z", "by simp"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> cross_edges s \\<union> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "proof (cases \"v \\<in> dom (finished s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "case True"], ["proof (state)\nthis:\n  v \\<in> dom (finished s)\n\ngoal (2 subgoals):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with tree_path_impl_parenthesis T"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    \\<delta> s ?v < \\<delta> s ?w \\<and>\n                    \\<phi> s ?w < \\<phi> s ?v\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> dom (finished s)", "have y_f: \"\\<phi> s y < \\<phi> s v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v, ?w) \\<in> (tree_edges s)\\<^sup>+;\n   ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    \\<delta> s ?v < \\<delta> s ?w \\<and>\n                    \\<phi> s ?w < \\<phi> s ?v\n  (v, y) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. \\<phi> s y < \\<phi> s v", "by blast"], ["proof (state)\nthis:\n  \\<phi> s y < \\<phi> s v\n\ngoal (2 subgoals):\n 1. v \\<in> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "from CB"], ["proof (chain)\npicking this:\n  (y, z) \\<in> cross_edges s \\<union> back_edges s", "show ?thesis"], ["proof (prove)\nusing this:\n  (y, z) \\<in> cross_edges s \\<union> back_edges s\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume C: \"(y,z) \\<in> cross_edges s\""], ["proof (state)\nthis:\n  (y, z) \\<in> cross_edges s\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with cross_edges_finished_decr y_fin y_f"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?u, ?v) \\<in> cross_edges s; ?u \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> \\<phi> s ?v < \\<phi> s ?u\n  y \\<in> dom (finished s)\n  \\<phi> s y < \\<phi> s v\n  (y, z) \\<in> cross_edges s", "have \"\\<phi> s z < \\<phi> s v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?u, ?v) \\<in> cross_edges s; ?u \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> \\<phi> s ?v < \\<phi> s ?u\n  y \\<in> dom (finished s)\n  \\<phi> s y < \\<phi> s v\n  (y, z) \\<in> cross_edges s\n\ngoal (1 subgoal):\n 1. \\<phi> s z < \\<phi> s v", "by force"], ["proof (state)\nthis:\n  \\<phi> s z < \\<phi> s v\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  \\<phi> s z < \\<phi> s v\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "note \\<delta>z"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "from C cross_edges_target_finished"], ["proof (chain)\npicking this:\n  (y, z) \\<in> cross_edges s\n  (?u, ?v) \\<in> cross_edges s \\<Longrightarrow> ?v \\<in> dom (finished s)", "have \n                  \"z \\<in> dom (finished s)\""], ["proof (prove)\nusing this:\n  (y, z) \\<in> cross_edges s\n  (?u, ?v) \\<in> cross_edges s \\<Longrightarrow> ?v \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. z \\<in> dom (finished s)", "by simp"], ["proof (state)\nthis:\n  z \\<in> dom (finished s)\n\ngoal (2 subgoals):\n 1. (y, z) \\<in> cross_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+\n 2. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "ultimately"], ["proof (chain)\npicking this:\n  \\<phi> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "using parenthesis_impl_tree_path[OF True]"], ["proof (prove)\nusing this:\n  \\<phi> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n  \\<lbrakk>?w \\<in> dom (finished s); \\<delta> s v < \\<delta> s ?w;\n   \\<phi> s ?w < \\<phi> s v\\<rbrakk>\n  \\<Longrightarrow> (v, ?w) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "by metis"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "assume B: \"(y,z) \\<in> back_edges s\""], ["proof (state)\nthis:\n  (y, z) \\<in> back_edges s\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with back_edge_disc_lt_fin y_fin y_f"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?v, ?w) \\<in> back_edges s; ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?w < \\<phi> s ?v\n  y \\<in> dom (finished s)\n  \\<phi> s y < \\<phi> s v\n  (y, z) \\<in> back_edges s", "have \"\\<delta> s z < \\<phi> s v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?v, ?w) \\<in> back_edges s; ?v \\<in> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?w < \\<phi> s ?v\n  y \\<in> dom (finished s)\n  \\<phi> s y < \\<phi> s v\n  (y, z) \\<in> back_edges s\n\ngoal (1 subgoal):\n 1. \\<delta> s z < \\<phi> s v", "by force"], ["proof (state)\nthis:\n  \\<delta> s z < \\<phi> s v\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "moreover"], ["proof (state)\nthis:\n  \\<delta> s z < \\<phi> s v\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "note \\<delta>z z_disc"], ["proof (state)\nthis:\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "ultimately"], ["proof (chain)\npicking this:\n  \\<delta> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)", "have \"z \\<in> dom (finished s)\" \"\\<phi> s z < \\<phi> s v\""], ["proof (prove)\nusing this:\n  \\<delta> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)\n\ngoal (1 subgoal):\n 1. z \\<in> dom (finished s) &&& \\<phi> s z < \\<phi> s v", "using parenthesis_contained[OF True]"], ["proof (prove)\nusing this:\n  \\<delta> s z < \\<phi> s v\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (discovered s)\n  \\<lbrakk>?w \\<in> dom (discovered s); \\<delta> s v < \\<delta> s ?w;\n   \\<delta> s ?w < \\<phi> s v\\<rbrakk>\n  \\<Longrightarrow> ?w \\<in> dom (finished s) \\<and>\n                    \\<phi> s ?w < \\<phi> s v\n\ngoal (1 subgoal):\n 1. z \\<in> dom (finished s) &&& \\<phi> s z < \\<phi> s v", "by simp_all"], ["proof (state)\nthis:\n  z \\<in> dom (finished s)\n  \\<phi> s z < \\<phi> s v\n\ngoal (1 subgoal):\n 1. (y, z) \\<in> back_edges s \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with \\<delta>z"], ["proof (chain)\npicking this:\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n  \\<phi> s z < \\<phi> s v", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n  \\<phi> s z < \\<phi> s v\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "using parenthesis_impl_tree_path[OF True]"], ["proof (prove)\nusing this:\n  \\<delta> s v < \\<delta> s z\n  z \\<in> dom (finished s)\n  \\<phi> s z < \\<phi> s v\n  \\<lbrakk>?w \\<in> dom (finished s); \\<delta> s v < \\<delta> s ?w;\n   \\<phi> s ?w < \\<phi> s v\\<rbrakk>\n  \\<Longrightarrow> (v, ?w) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "by metis"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "case False \\<comment> \\<open>\\<open>v \\<notin> dom (finished s)\\<close>\\<close>"], ["proof (state)\nthis:\n  v \\<notin> dom (finished s)\n\ngoal (1 subgoal):\n 1. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with assms"], ["proof (chain)\npicking this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  v \\<notin> dom (finished s)", "have st: \"stack s \\<noteq> []\" \"v = hd (stack s)\" \"pending s `` {v} = {}\""], ["proof (prove)\nusing this:\n  v \\<in> dom (finished s) \\<or>\n  stack s \\<noteq> [] \\<and> v = hd (stack s) \\<and> pending s `` {v} = {}\n  v \\<notin> dom (finished s)\n\ngoal (1 subgoal):\n 1. stack s \\<noteq> [] &&& v = hd (stack s) &&& pending s `` {v} = {}", "by blast+"], ["proof (state)\nthis:\n  stack s \\<noteq> []\n  v = hd (stack s)\n  pending s `` {v} = {}\n\ngoal (1 subgoal):\n 1. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "have \"z \\<in> dom (finished s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> dom (finished s)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<notin> dom (finished s) \\<Longrightarrow> False", "assume \"z \\<notin> dom (finished s)\""], ["proof (state)\nthis:\n  z \\<notin> dom (finished s)\n\ngoal (1 subgoal):\n 1. z \\<notin> dom (finished s) \\<Longrightarrow> False", "with z_disc"], ["proof (chain)\npicking this:\n  z \\<in> dom (discovered s)\n  z \\<notin> dom (finished s)", "have \"z \\<in> set (stack s)\""], ["proof (prove)\nusing this:\n  z \\<in> dom (discovered s)\n  z \\<notin> dom (finished s)\n\ngoal (1 subgoal):\n 1. z \\<in> set (stack s)", "by (simp add: stack_set_def)"], ["proof (state)\nthis:\n  z \\<in> set (stack s)\n\ngoal (1 subgoal):\n 1. z \\<notin> dom (finished s) \\<Longrightarrow> False", "with \\<open>z\\<noteq>v\\<close> st"], ["proof (chain)\npicking this:\n  z \\<noteq> v\n  stack s \\<noteq> []\n  v = hd (stack s)\n  pending s `` {v} = {}\n  z \\<in> set (stack s)", "have \"z \\<in> set (tl (stack s))\""], ["proof (prove)\nusing this:\n  z \\<noteq> v\n  stack s \\<noteq> []\n  v = hd (stack s)\n  pending s `` {v} = {}\n  z \\<in> set (stack s)\n\ngoal (1 subgoal):\n 1. z \\<in> set (tl (stack s))", "by (cases \"stack s\") auto"], ["proof (state)\nthis:\n  z \\<in> set (tl (stack s))\n\ngoal (1 subgoal):\n 1. z \\<notin> dom (finished s) \\<Longrightarrow> False", "with st tl_lt_stack_hd_discover \\<delta>z"], ["proof (chain)\npicking this:\n  stack s \\<noteq> []\n  v = hd (stack s)\n  pending s `` {v} = {}\n  \\<lbrakk>stack s \\<noteq> []; ?x \\<in> set (tl (stack s))\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?x < \\<delta> s (hd (stack s))\n  \\<delta> s v < \\<delta> s z\n  z \\<in> set (tl (stack s))", "show False"], ["proof (prove)\nusing this:\n  stack s \\<noteq> []\n  v = hd (stack s)\n  pending s `` {v} = {}\n  \\<lbrakk>stack s \\<noteq> []; ?x \\<in> set (tl (stack s))\\<rbrakk>\n  \\<Longrightarrow> \\<delta> s ?x < \\<delta> s (hd (stack s))\n  \\<delta> s v < \\<delta> s z\n  z \\<in> set (tl (stack s))\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. v \\<notin> dom (finished s) \\<Longrightarrow>\n    (v, z) \\<in> (tree_edges s)\\<^sup>+", "with \\<delta>z parenthesis_impl_tree_path_not_finished v_disc False"], ["proof (chain)\npicking this:\n  \\<delta> s v < \\<delta> s z\n  \\<lbrakk>?v \\<in> dom (discovered s); ?w \\<in> dom (finished s);\n   \\<delta> s ?v < \\<delta> s ?w; ?v \\<notin> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> (?v, ?w) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> dom (discovered s)\n  v \\<notin> dom (finished s)\n  z \\<in> dom (finished s)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<delta> s v < \\<delta> s z\n  \\<lbrakk>?v \\<in> dom (discovered s); ?w \\<in> dom (finished s);\n   \\<delta> s ?v < \\<delta> s ?w; ?v \\<notin> dom (finished s)\\<rbrakk>\n  \\<Longrightarrow> (?v, ?w) \\<in> (tree_edges s)\\<^sup>+\n  v \\<in> dom (discovered s)\n  v \\<notin> dom (finished s)\n  z \\<in> dom (finished s)\n\ngoal (1 subgoal):\n 1. (v, z) \\<in> (tree_edges s)\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v, z) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. v \\<noteq> v \\<Longrightarrow> (v, v) \\<in> (tree_edges s)\\<^sup>+", "qed simp"], ["proof (state)\nthis:\n  (v, r) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "hence \"r \\<in> (tree_edges s)\\<^sup>* `` {v}\""], ["proof (prove)\nusing this:\n  (v, r) \\<in> (tree_edges s)\\<^sup>+\n\ngoal (1 subgoal):\n 1. r \\<in> (tree_edges s)\\<^sup>* `` {v}", "by auto"], ["proof (state)\nthis:\n  r \\<in> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?r9 \\<noteq> v; ?r9 \\<in> scc_of E v;\n   ?r9 \\<in> dom (discovered s)\\<rbrakk>\n  \\<Longrightarrow> ?r9 \\<in> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "hence \"?scc \\<inter> dom (discovered s) \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?r9 \\<noteq> v; ?r9 \\<in> scc_of E v;\n   ?r9 \\<in> dom (discovered s)\\<rbrakk>\n  \\<Longrightarrow> ?r9 \\<in> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. scc_of E v \\<inter> dom (discovered s)\n    \\<subseteq> (tree_edges s)\\<^sup>* `` {v}", "by fastforce"], ["proof (state)\nthis:\n  scc_of E v \\<inter> dom (discovered s)\n  \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. Min (\\<delta> s ` lowlink_set s v) = \\<delta> s v \\<Longrightarrow>\n    scc_root s v (scc_of E v)", "thus \"scc_root s v ?scc\""], ["proof (prove)\nusing this:\n  scc_of E v \\<inter> dom (discovered s)\n  \\<subseteq> (tree_edges s)\\<^sup>* `` {v}\n\ngoal (1 subgoal):\n 1. scc_root s v (scc_of E v)", "by (auto intro!: scc_rootI v_disc)"], ["proof (state)\nthis:\n  scc_root s v (scc_of E v)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "end"]]}