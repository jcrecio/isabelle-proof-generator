{"file_name": "/home/qj213/afp-2021-10-22/thys/Group-Ring-Module/Algebra2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Group-Ring-Module", "problem_names": ["lemma (in Order) less_and_segment:\"b \\<in> carrier D \\<Longrightarrow>\n      (\\<forall>a.((a \\<prec> b \\<and> a \\<in> carrier D) \\<longrightarrow> (Q a))) = \n      (\\<forall>a\\<in>carrier (Iod D (segment D b)).(Q a))\"", "lemma (in Worder) Word_compare2:\"\\<lbrakk>Worder E; \n    \\<not> (\\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. ord_equiv (Iod D (segment D a)) \n                                             (Iod E (segment E b)))\\<rbrakk> \\<Longrightarrow> \n       \\<exists>c\\<in>carrier D. ord_equiv (Iod D (segment D c))  E\"", "lemma (in Worder) Worder_equiv:\"\\<lbrakk>Worder E; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.  ord_equiv (Iod D (segment D a)) \n             (Iod E (segment E b));  \n      \\<forall>c\\<in>carrier E. \\<exists>d\\<in>carrier D.  ord_equiv (Iod E (segment E c)) \n                    (Iod D (segment D d))\\<rbrakk> \\<Longrightarrow> ord_equiv D E\"", "lemma (in Worder) Worder_equiv1:\"\\<lbrakk>Worder E; \\<not> ord_equiv D E\\<rbrakk> \\<Longrightarrow>\n      \\<not> ((\\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.  \n         ord_equiv (Iod D (segment D a)) (Iod E (segment E b))) \\<and> \n         (\\<forall>c\\<in>carrier E. \\<exists>d\\<in>carrier D.  \n         ord_equiv (Iod E (segment E c)) (Iod D (segment D d))))\"", "lemma (in Worder) Word_compare:\"Worder E \\<Longrightarrow>\n (\\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E) \\<or> ord_equiv D E \\<or> \n (\\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b)))\"", "lemma (in Worder) Word_compareTr1:\"\\<lbrakk>Worder E;\n      \\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E; ord_equiv D E \\<rbrakk> \\<Longrightarrow> \n     False\"", "lemma (in Worder) Word_compareTr2:\"\\<lbrakk>Worder E; ord_equiv D E; \n      \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> False\"", "lemma (in Worder) Word_compareTr3:\"\\<lbrakk>Worder E; \n      \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b)); \n      \\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E\\<rbrakk> \\<Longrightarrow> False\"", "lemma (in Worder) subset_equiv_segment:\"S \\<subseteq> carrier D \\<Longrightarrow> \n      ord_equiv D (Iod D S) \\<or> \n      (\\<exists>a\\<in>carrier D. ord_equiv (Iod D S) (Iod D (segment D a)))\"", "lemma Worder_ord_equivTr:\"\\<lbrakk>Worder S; Worder T\\<rbrakk> \\<Longrightarrow>\n       ord_equiv S T = (\\<exists>f. ord_isom S T f)\"", "lemma Worder_ord_isom_mem:\"\\<lbrakk>Worder S; Worder T; ord_isom S T f; a \\<in> carrier S\\<rbrakk>\n     \\<Longrightarrow> f a \\<in> carrier T\"", "lemma Worder_refl:\"Worder S \\<Longrightarrow> ord_equiv S S\"", "lemma Worder_sym:\"\\<lbrakk>Worder S; Worder T; ord_equiv S T \\<rbrakk> \\<Longrightarrow> ord_equiv T S\"", "lemma Worder_trans:\"\\<lbrakk>Worder S; Worder T; Worder U; ord_equiv S T; ord_equiv T U\\<rbrakk> \\<Longrightarrow> ord_equiv S U\"", "lemma ordinal_inc_self:\"Worder S \\<Longrightarrow> S \\<in> ordinal_number S\"", "lemma ordinal_number_eq:\"\\<lbrakk>Worder D; Worder E\\<rbrakk> \\<Longrightarrow>\n               (ord_equiv D E) = (ordinal_number D = ordinal_number E)\"", "lemma mem_ordinal_number_equiv:\"\\<lbrakk>Worder D; \n           X \\<in> ordinal_number D\\<rbrakk> \\<Longrightarrow> ord_equiv X D\"", "lemma mem_ordinal_number_Worder:\"\\<lbrakk>Worder D; \n           X \\<in> ordinal_number D\\<rbrakk> \\<Longrightarrow> Worder X\"", "lemma mem_ordinal_number_Worder1:\"\\<lbrakk>x \\<in> ODnums; X \\<in> x\\<rbrakk> \\<Longrightarrow> Worder X\"", "lemma mem_ODnums_nonempty:\"X \\<in> ODnums \\<Longrightarrow> \\<exists>x. x \\<in> X\"", "lemma carr_ODnods:\"carrier ODnods = ODnums\"", "lemma ordinal_number_mem_carrier_ODnods:\n     \"Worder D \\<Longrightarrow> ordinal_number D \\<in> carrier ODnods\"", "lemma ordinal_number_mem_ODnums: \n      \"Worder D \\<Longrightarrow> ordinal_number D \\<in> ODnums\"", "lemma ODordTr1:\" \\<lbrakk>Worder D; Worder E\\<rbrakk> \\<Longrightarrow> \n       (ODord (ordinal_number D) (ordinal_number E)) =\n       (\\<exists>b\\<in> carrier E. ord_equiv D (Iod E (segment E b)))\"", "lemma ODord:\" \\<lbrakk>Worder D; d \\<in> carrier D\\<rbrakk> \\<Longrightarrow> \n       ODord (ordinal_number (Iod D (segment D d))) (ordinal_number D)\"", "lemma ord_less_ODord:\"\\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D; \n           a = ordinal_number (Iod D (segment D c));\n           b = ordinal_number (Iod D (segment D d))\\<rbrakk> \\<Longrightarrow>\n                         c \\<prec>\\<^bsub>D\\<^esub> d =  a \\<sqsubset> b\"", "lemma ODord_le_ref:\"\\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; ODord_le X Y; Y \\<sqsubseteq> X \\<rbrakk> \\<Longrightarrow>\n                               X = Y\"", "lemma ODord_le_trans:\"\\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; Z \\<in> ODnums; X \\<sqsubseteq> Y; Y \\<sqsubseteq> Z \\<rbrakk>\n                     \\<Longrightarrow>  X \\<sqsubseteq> Z\"", "lemma ordinal_numberTr1:\" X \\<in> carrier ODnods \\<Longrightarrow> \\<exists>D. Worder D \\<and> D \\<in> X\"", "lemma ordinal_numberTr1_1:\" X \\<in> ODnums \\<Longrightarrow> \\<exists>D. Worder D \\<and> D \\<in> X\"", "lemma ordinal_numberTr1_2:\"\\<lbrakk>x \\<in> ODnums; S \\<in> x; T \\<in> x\\<rbrakk> \\<Longrightarrow>\n                              ord_equiv S T\"", "lemma ordinal_numberTr2:\"\\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk> \\<Longrightarrow>\n            D \\<in> x\"", "lemma ordinal_numberTr3:\"\\<lbrakk>Worder D; Worder F; ord_equiv D F; \n        x = ordinal_number D\\<rbrakk> \\<Longrightarrow> x = ordinal_number F\"", "lemma ordinal_numberTr4:\"\\<lbrakk>Worder D; X \\<in> carrier ODnods; D \\<in> X \\<rbrakk> \\<Longrightarrow>\n            X = ordinal_number D\"", "lemma ordinal_numberTr5:\"\\<lbrakk>x \\<in> ODnums; D \\<in> x\\<rbrakk> \\<Longrightarrow> x = ordinal_number D\"", "lemma ordinal_number_ord:\"\\<lbrakk> X \\<in> carrier ODnods; Y \\<in> carrier ODnods\\<rbrakk> \\<Longrightarrow>\n                             ODord X Y \\<or> X = Y \\<or> ODord Y X\"", "lemma ODnum_subTr:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in>ODnums; y \\<sqsubset> x; Y \\<in> y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c\\<in>carrier D. ord_equiv Y (Iod D (segment D c))\"", "lemma ODnum_segmentTr:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in>ODnums; y \\<sqsubset> x\\<rbrakk> \\<Longrightarrow> \n        \\<exists>c. c\\<in>carrier D \\<and> (\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D c)))\"", "lemma ODnum_segmentTr1:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums; y \\<sqsubset> x\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c. c \\<in> carrier D \\<and> (y = ordinal_number (Iod D (segment D c)))\"", "lemma ODnods_less:\"\\<lbrakk>x \\<in> carrier ODnods; y \\<in> carrier ODnods\\<rbrakk> \\<Longrightarrow>\n                       x \\<prec>\\<^bsub>ODnods\\<^esub> y =  x \\<sqsubset> y\"", "lemma ODord_less_not_eq:\"\\<lbrakk>x \\<in> carrier ODnods; y \\<in> carrier ODnods; x \\<sqsubset> y\\<rbrakk> \\<Longrightarrow>\n                          x \\<noteq> y\"", "lemma not_ODord:\"\\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b\\<rbrakk> \\<Longrightarrow> \\<not> (b \\<sqsubseteq> a)\"", "lemma Order_ODnods:\"Order ODnods\"", "lemma Torder_ODnods:\"Torder ODnods\"", "lemma ODNmap_mem:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums; ODord y x\\<rbrakk> \\<Longrightarrow> \n      ODNmap D y \\<in> carrier D \\<and> \n             (\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D (ODNmap D y))))\"", "lemma ODNmapTr1:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums; ODord y x\\<rbrakk> \\<Longrightarrow> \n                  y = ordinal_number (Iod D (segment D (ODNmap D y)))\"", "lemma ODNmap_self:\"\\<lbrakk>Worder D; c \\<in> carrier D;\n       a = ordinal_number (Iod D (segment D c))\\<rbrakk> \\<Longrightarrow> ODNmap D a = c\"", "lemma ODord_ODNmap_less:\"\\<lbrakk>Worder D; c \\<in> carrier D;\n      a = ordinal_number (Iod D (segment D c)); d \\<in> carrier D; \n      b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b\\<rbrakk> \\<Longrightarrow>  \n      ODNmap D a \\<prec>\\<^bsub>D\\<^esub> (ODNmap D b)\"", "lemma ODNmap_mem1:\" \\<lbrakk>Worder D; y \\<in> segment ODnods (ordinal_number D)\\<rbrakk>\n         \\<Longrightarrow> ODNmap D y \\<in> carrier D\"", "lemma ODnods_segment_inc_ODord:\"\\<lbrakk>Worder D; \n       y \\<in> segment ODnods (ordinal_number D)\\<rbrakk> \\<Longrightarrow> ODord y (ordinal_number D)\"", "lemma restict_ODNmap_func:\"\\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk> \\<Longrightarrow>\n      restrict (ODNmap D) (segment ODnods (ordinal_number D))\n               \\<in> segment ODnods (ordinal_number D) \\<rightarrow> carrier D\"", "lemma ODNmap_ord_isom:\"\\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>  \\<Longrightarrow> \n             ord_isom (Iod ODnods (segment ODnods x)) D \n      (\\<lambda>x\\<in>(carrier (Iod ODnods (segment ODnods x))). (ODNmap D x))\"", "lemma ODnum_equiv_segment:\"\\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>  \\<Longrightarrow> \n         ord_equiv (Iod ODnods (segment ODnods x)) D\"", "lemma ODnods_sub_carrier:\"S \\<subseteq> ODnums \\<Longrightarrow> carrier (Iod ODnods S) = S\"", "lemma ODnum_sub_well_ordered:\"S \\<subseteq> ODnums \\<Longrightarrow> Worder (Iod ODnods S)\"", "lemma (in Order) Pre_mem:\"\\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk> \\<Longrightarrow>\n                Pre D a \\<in> carrier D\"", "lemma (in Order) Not_ExPre:\"a \\<in> carrier D \\<Longrightarrow> \\<not> ExPre (Iod D {a}) a\"", "lemma (in Worder) UniquePre:\"\\<lbrakk>a \\<in> carrier D; ExPre D a;\n a1 \\<in> carrier D \\<and> a1 \\<prec> a \\<and> \\<not> (\\<exists>y\\<in>carrier D. (a1 \\<prec> y \\<and> y \\<prec> a)) \\<rbrakk> \\<Longrightarrow>\n Pre D a = a1\"", "lemma (in Order) Pre_element:\"\\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk> \\<Longrightarrow> \n      Pre D a \\<in> carrier D \\<and> (Pre D a) \\<prec> a \\<and>\n            \\<not> (\\<exists>y\\<in>carrier D. ((Pre D a) \\<prec> y \\<and> y \\<prec> a))\"", "lemma (in Order) Pre_in_segment:\"\\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk> \\<Longrightarrow> \n                  Pre D a \\<in> segment D a\"", "lemma (in Worder) segment_forall:\"\\<lbrakk>a \\<in> segment D b; b \\<in> carrier D; \n      x \\<in> segment D b; x \\<prec> a; \\<forall>y\\<in>segment D b. x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\\<rbrakk> \\<Longrightarrow> \n      \\<forall>y\\<in>carrier D. x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\"", "lemma (in Worder) segment_Expre:\"a \\<in> segment D b \\<Longrightarrow>\n                   ExPre (Iod D (segment D b)) a = ExPre D a\"", "lemma  (in Worder) Pre_segment:\"\\<lbrakk>a \\<in> segment D b; \n        ExPre (Iod D (segment D b)) a\\<rbrakk> \\<Longrightarrow> \n        ExPre D a \\<and> Pre D a = Pre (Iod D (segment D b)) a\"", "lemma (in Worder) Pre2segment:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<prec> a; \n                 ExPre D b\\<rbrakk> \\<Longrightarrow> ExPre (Iod D (segment D a)) b\"", "lemma (in Worder) ord_isom_Pre1:\"\\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; \n                  ord_isom D E f\\<rbrakk> \\<Longrightarrow> ExPre E (f a)\"", "lemma (in Worder) ord_isom_Pre11:\"\\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f\\<rbrakk> \n       \\<Longrightarrow> ExPre D a = ExPre E (f a)\"", "lemma (in Worder) ord_isom_Pre2:\"\\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; \n       ord_isom D E f\\<rbrakk> \\<Longrightarrow> f (Pre D a) = Pre E (f a)\"", "lemma (in Worder) transfinite_induction:\"\\<lbrakk>minimum_elem D (carrier D) s0; P s0; \\<forall>t\\<in>carrier D. ((\\<forall>u\\<in> segment D t. P u) \\<longrightarrow> P t)\\<rbrakk> \\<Longrightarrow> \\<forall>x\\<in>carrier D. P x\"", "lemma (in Order) carrier_adjunct_ord:\n        \"carrier (adjunct_ord D a) = carrier D \\<union> {a}\"", "lemma (in Order) Order_adjunct_ord:\"a \\<notin> carrier D \\<Longrightarrow> \n                                    Order (adjunct_ord D a)\"", "lemma (in Order) adjunct_ord_large_a:\"\\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk> \\<Longrightarrow> \n                             \\<forall>x\\<in>carrier D. x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a\"", "lemma carr_Ssegment_adjunct_ord:\"\\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk> \\<Longrightarrow> \n                 carrier D = (Ssegment (adjunct_ord D a) a)\"", "lemma (in Order) adjunct_ord_selfD:\"a \\<notin> carrier D \\<Longrightarrow>\n          D = Iod (adjunct_ord D a) (carrier D)\"", "lemma Ssegment_adjunct_ord:\"\\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk> \\<Longrightarrow> \n          D = SIod (adjunct_ord D a) (Ssegment (adjunct_ord D a) a)\"", "lemma (in Order) Torder_adjunction:\"\\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X)\\<rbrakk> \\<Longrightarrow> Torder (Iod D (X \\<union> {a}))\"", "lemma Torder_Sadjunction:\"\\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X)\\<rbrakk> \\<Longrightarrow> Torder (SIod D (X \\<union> {a}))\"", "lemma (in Torder) Torder_adjunct_ord:\"a \\<notin> carrier D \\<Longrightarrow> \n                                       Torder (adjunct_ord D a)\"", "lemma (in Order) well_ord_adjunction:\"\\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X)\\<rbrakk> \\<Longrightarrow> Worder (Iod D (X \\<union> {a}))\"", "lemma well_ord_Sadjunction:\"\\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X)\\<rbrakk> \\<Longrightarrow> Worder (SIod D (X \\<union> {a}))\"", "lemma (in Worder) Worder_adjunct_ord:\"a \\<notin> carrier D \\<Longrightarrow> \n                                       Worder (adjunct_ord D a)\"", "lemma (in Order) mem_upper_bounds:\"\\<lbrakk>X \\<subseteq> carrier D; b \\<in> carrier D; \n                 \\<forall>x\\<in>X. x \\<preceq> b\\<rbrakk> \\<Longrightarrow> ub X b\"", "lemma (in Order) Torder_Chain:\"\\<lbrakk>X \\<subseteq> carrier D; Torder (Iod D X)\\<rbrakk>\n       \\<Longrightarrow> Chain D X\"", "lemma (in Order) Chain_Torder:\"Chain D X \\<Longrightarrow> \n                                   Torder (Iod D X)\"", "lemma (in Order) Chain_sub:\"Chain D X \\<Longrightarrow> X \\<subseteq> carrier D\"", "lemma (in Order) Chain_sub_Chain:\"\\<lbrakk>Chain D X; Y \\<subseteq> X \\<rbrakk> \\<Longrightarrow> Chain D Y\"", "lemma (in Order) upper_bounds_sub:\"X \\<subseteq> carrier D \\<Longrightarrow> \n                           upper_bounds D X \\<subseteq> carrier D\"", "lemma (in Order) Sup:\"\\<lbrakk>X \\<subseteq> carrier D; minimum_elem D (upper_bounds D X) a\\<rbrakk> \\<Longrightarrow>                        Sup D X = a\"", "lemma (in Worder) Sup_mem:\"\\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b\\<rbrakk> \\<Longrightarrow> \n                  Sup D X \\<in> carrier D\"", "lemma (in Order) S_inductive_sup:\"\\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk> \\<Longrightarrow>\n                             minimum_elem D (upper_bounds D X) (Sup D X)\"", "lemma (in Order) adjunct_Chain:\"\\<lbrakk>Chain D X; b \\<in> carrier D; \\<forall>x\\<in>X. x \\<preceq> b\\<rbrakk> \\<Longrightarrow>\n                 Chain D (insert b X)\"", "lemma (in Order) S_inductive_sup_mem:\"\\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk> \\<Longrightarrow>\n                             Sup D X \\<in> carrier D\"", "lemma (in Order) S_inductive_Sup_min_bounds:\"\\<lbrakk>S_inductive_set D; Chain D X;\n       ub X b\\<rbrakk> \\<Longrightarrow>  Sup D X \\<preceq> b\"", "lemma (in Order) S_inductive_sup_bound:\"\\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk> \\<Longrightarrow>\n                                        \\<forall>x\\<in>X. x \\<preceq> (Sup D X)\"", "lemma (in Order) S_inductive_Sup_in_ChainTr:\n \"\\<lbrakk>S_inductive_set D; Chain D X; c \\<in> carrier (Iod D (insert (Sup D X) X)); \n  Sup D X \\<notin> X;\n   \\<forall>y\\<in>carrier (Iod D (insert (Sup D X) X)). \n    c \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> Sup D X\\<rbrakk> \\<Longrightarrow> \n    c \\<in> upper_bounds D X\"", "lemma (in Order) S_inductive_Sup_in_Chain:\"\\<lbrakk>S_inductive_set D; Chain D X;\n       ExPre (Iod D (insert (Sup D X) X)) (Sup D X)\\<rbrakk> \\<Longrightarrow> Sup D X \\<in> X\"", "lemma (in Order) S_inductive_bounds_compare:\"\\<lbrakk>S_inductive_set D; Chain D X1;\n       Chain D X2; X1 \\<subseteq> X2\\<rbrakk> \\<Longrightarrow> upper_bounds D X2 \\<subseteq> upper_bounds D X1 \"", "lemma (in Order) S_inductive_sup_compare:\"\\<lbrakk>S_inductive_set D; Chain D X1;\n       Chain D X2; X1 \\<subseteq> X2\\<rbrakk> \\<Longrightarrow> Sup D X1 \\<preceq>  Sup D X2\"", "lemma (in Order) mem_of_WWa:\"\\<lbrakk>W \\<subseteq> carrier D; Worder (Iod D W); a \\<in> W;\n  (\\<forall>x\\<in>W. a \\<preceq> x); \n  (\\<forall>x\\<in>W. (if (ExPre (Iod D W) x) then  g (Pre (Iod D W) x) = x else\n  (if a \\<noteq> x then Sup D (segment (Iod D W) x) = x else a = a)))\\<rbrakk> \\<Longrightarrow>\n       W \\<in> WWa D g a\"", "lemma (in Order) mem_WWa_then:\"W \\<in> WWa D g a \\<Longrightarrow> W \\<subseteq> carrier D \\<and> \n  Worder (Iod D W) \\<and> a \\<in> W \\<and> (\\<forall>x\\<in>W. a \\<preceq> x) \\<and> \n  (\\<forall>x\\<in>W. (if (ExPre (Iod D W) x) then  g (Pre (Iod D W) x) = x else\n  (if a \\<noteq> x then Sup D (segment (Iod D W) x) = x else a = a)))\"", "lemma (in Order) mem_wwa_Worder:\"W \\<in> WWa D g a \\<Longrightarrow> Worder (Iod D W)\"", "lemma (in Order) mem_WWa_sub_carrier:\"W \\<in> WWa D g a \\<Longrightarrow> W \\<subseteq> carrier D\"", "lemma (in Order) Union_WWa_sub_carrier:\"\\<Union> (WWa D g a) \\<subseteq> carrier D\"", "lemma (in Order) mem_WWa_inc_a:\"W \\<in> WWa D g a \\<Longrightarrow> a \\<in> W\"", "lemma (in Order) mem_WWa_Chain:\"W \\<in> WWa D g a \\<Longrightarrow> Chain D W\"", "lemma (in Order) Sup_adjunct_Sup:\"\\<lbrakk>S_inductive_set D; \n      f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x; \n      W \\<in> WWa D f a; Sup D W \\<notin> W\\<rbrakk>\n      \\<Longrightarrow> Sup D (insert (Sup D W) W) = Sup D W\"", "lemma (in Order) BNTr1:\"a \\<in> carrier D \\<Longrightarrow> Worder (Iod D {a})\"", "lemma (in Order) BNTr2:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n                         \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow> {a} \\<in> WWa D f a\"", "lemma (in Order) BNTr2_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow> \\<forall>x\\<in>W. a \\<preceq> x\"", "lemma (in Order) BNTr3:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow> minimum_elem (Iod D W) W a\"", "lemma (in Order) Adjunct_segment_sub:\"\\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk> \\<Longrightarrow>\n       segment (Iod D (insert (Sup D X) X)) (Sup D X) \\<subseteq>  X\"", "lemma (in Order) Adjunct_segment_eq:\"\\<lbrakk>S_inductive_set D; Chain D X;\n                Sup D X \\<notin> X\\<rbrakk> \\<Longrightarrow>\n       segment (Iod D (insert (Sup D X) X)) (Sup D X) = X\"", "lemma (in Order) fixp_same:\"\\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1; \n b \\<in> carrier D; ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n \\<forall>u\\<in>segment (Iod D W1) t. fixp g u\\<rbrakk> \\<Longrightarrow> \n          segment (Iod D W1) t = segment (Iod D W2) (g t)\"", "lemma (in Order) BNTr4_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g\\<rbrakk> \\<Longrightarrow> \n     \\<forall>x\\<in>W1. g x = x\"", "lemma (in Order) BNTr4_2:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n       b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n       ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\\<rbrakk> \\<Longrightarrow> \n       W1 = segment (Iod D W2) b\"", "lemma (in Order) BNTr4:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; \n       \\<exists>b\\<in>carrier D. ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\\<rbrakk> \\<Longrightarrow> \n       W1 \\<subseteq> W2\"", "lemma (in Order) Iod_same:\"A = B \\<Longrightarrow> Iod D A = Iod D B\"", "lemma (in Order) eq_ord_equivTr:\"\\<lbrakk>ord_equiv D E; E = F\\<rbrakk> \\<Longrightarrow> ord_equiv D F\"", "lemma (in Order) BNTr5:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n      ord_equiv (Iod D W1) (Iod D W2)\\<rbrakk> \\<Longrightarrow> W1 \\<subseteq> W2 \"", "lemma (in Order) BNTr6:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n\\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; W1 \\<subset> W2\\<rbrakk> \\<Longrightarrow> \n (\\<exists>b\\<in>carrier (Iod D W2). ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b)))\"", "lemma (in Order) BNTr6_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n\\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; W1 \\<subset> W2\\<rbrakk> \\<Longrightarrow> \n (\\<exists>b\\<in>carrier (Iod D W2). W1 = (segment (Iod D W2) b))\"", "lemma (in Order) BNTr7:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n      \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow> \n                W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1\"", "lemma (in Order) BNTr7_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W; W \\<in> WWa D f a; xa \\<in> \\<Union> (WWa D f a);\n         xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x\\<rbrakk> \\<Longrightarrow> xa \\<in> W\"", "lemma (in Order) BNTr7_1_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W; W \\<in> WWa D f a; xa \\<in> \\<Union> (WWa D f a);\n         xa \\<prec> x\\<rbrakk> \\<Longrightarrow> xa \\<in> W\"", "lemma (in Order) BNTr7_2:\" \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n    \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> \\<Union>(WWa D f a); ExPre (Iod D (\\<Union>(WWa D f a))) x \\<rbrakk>\n  \\<Longrightarrow> \\<forall>W\\<in>WWa D f a. (x \\<in> W \\<longrightarrow> ExPre (Iod D W) x )\"", "lemma (in Order) BNTr7_3:\" \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n    \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> \\<Union>(WWa D f a); ExPre (Iod D (\\<Union>(WWa D f a))) x \\<rbrakk>\n  \\<Longrightarrow> \\<forall>W\\<in>WWa D f a. (x \\<in> W \\<longrightarrow> Pre (Iod D (\\<Union>(WWa D f a))) x = Pre (Iod D W) x)\"", "lemma (in Order) BNTr7_4:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n         \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;  W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow> \n         ExPre (Iod D (\\<Union>(WWa D f a))) x = ExPre (Iod D W) x\"", "lemma (in Order) BNTr7_5:\" \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n           \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W; W \\<in> WWa D f a\\<rbrakk>\n          \\<Longrightarrow> (segment (Iod D (\\<Union>(WWa D f a))) x) = segment (Iod D W) x\"", "lemma (in Order) BNTr7_6:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk>  \\<Longrightarrow> a \\<in> \\<Union>(WWa D f a)\"", "lemma (in Order) BNTr7_7:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); \\<exists>xa. Wa D xa f a \\<and> x \\<in> xa\\<rbrakk> \\<Longrightarrow> \n      x \\<in> \\<Union>(WWa D f a)\"", "lemma (in Order) BNTr7_8:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); \\<exists>xa. Wa D xa f a \\<and> x \\<in> xa\\<rbrakk> \\<Longrightarrow> x \\<in> carrier D\"", "lemma (in Order) BNTr7_9:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n           \\<forall>x\\<in>carrier D. x \\<preceq> (f x); x \\<in> \\<Union>(WWa D f a) \\<rbrakk> \\<Longrightarrow> x \\<in> carrier D\"", "lemma (in Order) BNTr7_10:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a; Sup D W \\<notin> W\\<rbrakk> \\<Longrightarrow>\n                \\<not> ExPre (Iod D (insert (Sup D W) W)) (Sup D W)\"", "lemma (in Order) BNTr7_11:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n a \\<in> carrier D; b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a; \n \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W\\<rbrakk> \\<Longrightarrow>\n ExPre (Iod D (insert b W)) x = ExPre (Iod D W) x\"", "lemma (in Order) BNTr7_12:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n a \\<in> carrier D; b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a; \n \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x\\<rbrakk> \\<Longrightarrow> \n        Pre (Iod D (insert b W)) x = Pre (Iod D W) x\"", "lemma (in Order) BNTr7_13:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n   a \\<in> carrier D; b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a; \n   \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W\\<rbrakk> \\<Longrightarrow> \n        (segment (Iod D (insert b W)) x) = segment (Iod D W) x\"", "lemma (in Order) BNTr7_14:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow>\n            (insert (Sup D W) W) \\<in> WWa D f a\"", "lemma (in Order) BNTr7_15:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a;\n     f (Sup D W) \\<noteq> Sup D W\\<rbrakk> \\<Longrightarrow>\n     ExPre (Iod D (insert (f (Sup D W)) (insert (Sup D W) W))) (f (Sup D W))\"", "lemma (in Order) BNTr7_16:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a; \n     f (Sup D W) \\<noteq> (Sup D W)\\<rbrakk> \\<Longrightarrow>\n     Pre (Iod D (insert (f (Sup D W)) (insert (Sup D W) W))) (f (Sup D W)) = \n          (Sup D W)\"", "lemma (in Order) BNTr7_17:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow>\n          (insert (f (Sup D W)) (insert (Sup D W) W)) \\<in> WWa D f a\"", "lemma (in Order) BNTr8:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n          \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow>  \\<Union> (WWa D f a) \\<in> (WWa D f a)\"", "lemma (in Order) BNTr10:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n   a \\<in> carrier D;  \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow>\n                   (Sup D (\\<Union>(WWa D f a))) \\<in> (\\<Union>(WWa D f a))\"", "lemma (in Order) BNTr11:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n                 a \\<in> carrier D;  \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow> \n                   f (Sup D (\\<Union>(WWa D f a))) = (Sup D (\\<Union>(WWa D f a)))\"", "lemma (in Order) Bourbaki_Nakayama:\"\\<lbrakk>S_inductive_set D; \n      f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow>\n      \\<exists>x0\\<in>carrier D. f x0 = x0\"", "lemma (in Order) maxl_funTr:\"\\<lbrakk>x \\<in> carrier D; \n      \\<exists>y. y \\<in> upper_bounds D {x} \\<and> y \\<noteq> x\\<rbrakk> \\<Longrightarrow> \n      (SOME z. z \\<in> upper_bounds D {x} \\<and> z \\<noteq> x) \\<in> carrier D\"", "lemma (in Order) maxl_fun_func:\"maxl_fun D \\<in> carrier D \\<rightarrow> carrier D\"", "lemma (in Order) maxl_fun_gt:\"\\<lbrakk>x \\<in> carrier D; \n      \\<exists>y\\<in> carrier D.  x \\<preceq> y \\<and> x \\<noteq> y \\<rbrakk> \\<Longrightarrow> \n          x \\<preceq> (maxl_fun D x) \\<and> (maxl_fun D x) \\<noteq> x\"", "lemma (in Order) maxl_fun_maxl:\"\\<lbrakk>x \\<in> carrier D; maxl_fun D x = x \\<rbrakk>\n      \\<Longrightarrow> maximal x\"", "lemma (in Order) maxl_fun_asc:\"\\<forall>x\\<in>carrier D. x \\<preceq> (maxl_fun D x)\"", "lemma (in Order) S_inductive_maxl:\"\\<lbrakk>S_inductive_set D; carrier D \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n          \\<exists>m. maximal m\"", "lemma (in Order) maximal_mem:\"maximal m \\<Longrightarrow> m \\<in> carrier D\"", "lemma (in Order) Chain_mem_fTo:\"Chain D C \\<Longrightarrow> C \\<in> carrier (fTo D)\"", "lemma (in Order) fTOrder:\"Order (fTo D)\"", "lemma (in Order) fTo_Order_sub:\"\\<lbrakk>A \\<in> carrier (fTo D); B \\<in> carrier (fTo D)\\<rbrakk>\n         \\<Longrightarrow> (A \\<preceq>\\<^bsub>(fTo D)\\<^esub> B) = (A \\<subseteq> B)\"", "lemma (in Order) mem_fTo_Chain:\"X \\<in> carrier (fTo D) \\<Longrightarrow> Chain D X\"", "lemma (in Order) mem_fTo_sub_carrier:\"X \\<in> carrier (fTo D) \\<Longrightarrow> X \\<subseteq> carrier D\"", "lemma (in Order) Un_fTo_Chain:\"Chain (fTo D) CC \\<Longrightarrow> Chain D (\\<Union> CC)\"", "lemma (in Order) Un_fTo_Chain_mem_fTo:\"Chain (fTo D) CC \\<Longrightarrow>\n                  (\\<Union> CC) \\<in> carrier (fTo D)\"", "lemma (in Order) Un_upper_bound:\"Chain (fTo D) C \\<Longrightarrow>\n                  \\<Union>C \\<in> upper_bounds (fTo D) C\"", "lemma (in Order) fTo_conditional_inc_C:\"C \\<in> carrier (fTo D) \\<Longrightarrow> \n        C \\<in> carrier (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S})\"", "lemma (in Order) fTo_conditional_Un_Chain_mem1:\" \\<lbrakk>C \\<in> carrier (fTo D); \n     Chain (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca; Ca \\<noteq> {}\\<rbrakk> \\<Longrightarrow>\n      \\<Union>Ca \\<in> upper_bounds (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca\"", "lemma (in Order) fTo_conditional_min1:\" \\<lbrakk>C \\<in> carrier (fTo D); \n     Chain (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca; Ca \\<noteq> {}\\<rbrakk> \\<Longrightarrow>\n      minimum_elem (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S})\n        (upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca) (\\<Union>Ca)\"", "lemma (in Order) fTo_conditional_Un_Chain_mem2:\" \\<lbrakk>C \\<in> carrier (fTo D); \n       Chain (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca; Ca = {}\\<rbrakk> \\<Longrightarrow>\n       C \\<in> upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca\"", "lemma (in Order) fTo_conditional_min2:\" \\<lbrakk>C \\<in> carrier (fTo D); \n     Chain (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca; Ca = {}\\<rbrakk> \\<Longrightarrow>\n      minimum_elem (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S})\n        (upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca) C\"", "lemma (in Order) fTo_S_inductive:\"S_inductive_set (fTo D)\"", "lemma (in Order) conditional_min_upper_bound:\" \\<lbrakk>C \\<in> carrier (fTo D);\n      Chain (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca\\<rbrakk> \\<Longrightarrow> \n      \\<exists>X. minimum_elem (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S})\n         (upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca) X\"", "lemma (in Order) Hausdorff_acTr:\"C \\<in> carrier (fTo D) \\<Longrightarrow>\n       S_inductive_set (Iod (fTo D) {S. S \\<in> (carrier (fTo D)) \\<and>  C \\<subseteq> S})\"", "lemma  satisfy_cond_mem_set:\"\\<lbrakk> x \\<in> A; P x \\<rbrakk> \\<Longrightarrow> x \\<in> {y \\<in> A. P y}\"", "lemma (in Order) maximal_conditional_maximal:\" \\<lbrakk>C \\<in> carrier (fTo D);\n       maximal\\<^bsub>Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}\\<^esub> m\\<rbrakk> \\<Longrightarrow> maximal\\<^bsub>(fTo D)\\<^esub> m\"", "lemma (in Order) Hausdorff_ac:\"C \\<in> carrier (fTo D) \\<Longrightarrow> \n                    \\<exists>M\\<in>carrier (fTo D). C \\<subseteq> M \\<and> maximal\\<^bsub>(fTo D)\\<^esub> M\"", "lemma (in Order) Zorn_lemmaTr:\"\\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n           maximal\\<^bsub>fTo D\\<^esub> M; b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b \\<rbrakk> \\<Longrightarrow>\n            maximal b \\<and> b \\<in> upper_bounds D C\"", "lemma (in Order) g_Zorn_lemma1:\"\\<lbrakk>inductive_set D; Chain D C\\<rbrakk> \\<Longrightarrow> \\<exists>m. maximal m \\<and> m \\<in> upper_bounds D C\"", "lemma (in Order) g_Zorn_lemma2:\"\\<lbrakk>inductive_set D; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow> \n                 \\<exists>m\\<in>carrier D. maximal m \\<and> a \\<preceq> m\"", "lemma (in Order) g_Zorn_lemma3:\"inductive_set D \\<Longrightarrow> \\<exists>m\\<in>carrier D. maximal m\"", "lemma (in Group) mult_closed:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n           a \\<cdot> b \\<in> carrier G\"", "lemma (in Group) i_closed:\"a \\<in> carrier G \\<Longrightarrow> (\\<rho> a) \\<in> carrier G\"", "lemma (in Group) r_mult_eqn:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n       c \\<in> carrier G; a = b\\<rbrakk> \\<Longrightarrow> a \\<cdot> c = b \\<cdot> c\"", "lemma (in Group) l_mult_eqn:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n       c \\<in> carrier G; a = b\\<rbrakk> \\<Longrightarrow> c \\<cdot> a = c \\<cdot> b\"", "lemma (in Group) r_i:\"a \\<in> carrier G \\<Longrightarrow>\n                    a \\<cdot> (\\<rho> a) = \\<one> \"", "lemma (in Group) r_unit:\"a \\<in> carrier G \\<Longrightarrow> a \\<cdot> \\<one> = a\"", "lemma (in Group) l_i_unique:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; \n       b \\<cdot> a = \\<one> \\<rbrakk> \\<Longrightarrow> (\\<rho> a) = b \"", "lemma (in Group) l_i_i:\"a \\<in> carrier G \\<Longrightarrow> (\\<rho> (\\<rho> a)) \\<cdot> (\\<rho> a) = \\<one>\"", "lemma (in Group) l_div_eqn:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n        a \\<cdot> x = a \\<cdot> y \\<rbrakk> \\<Longrightarrow> x = y\"", "lemma (in Group) r_div_eqn:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n   x \\<cdot> a = y \\<cdot> a \\<rbrakk> \\<Longrightarrow> x = y \"", "lemma (in Group) l_mult_eqn1:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;  y \\<in> carrier G;\n        (\\<rho> a) \\<cdot> x = (\\<rho> a) \\<cdot> y\\<rbrakk>  \\<Longrightarrow> x = y \"", "lemma (in Group) tOp_assocTr41:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n       d \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d = a \\<cdot> b \\<cdot> (c \\<cdot> d)\"", "lemma (in Group) tOp_assocTr42:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n      d \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d = a \\<cdot> (b \\<cdot> c)\\<cdot> d\"", "lemma (in Group) tOp_assocTr44:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n      d \\<in> carrier G \\<rbrakk> \\<Longrightarrow> (\\<rho> a) \\<cdot> b \\<cdot> ((\\<rho> c) \\<cdot> d) = \n                                         (\\<rho>  a) \\<cdot> ((b \\<cdot> (\\<rho> c)) \\<cdot> d)\"", "lemma (in Group) tOp_assocTr45:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G; \nd \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d = a \\<cdot> (b \\<cdot> (c \\<cdot> d))\"", "lemma (in Group) one_unique:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;  x \\<cdot> a = x\\<rbrakk> \\<Longrightarrow> \n                                a = \\<one>\"", "lemma (in Group) i_one:\"\\<rho> \\<one> = \\<one>\"", "lemma (in Group) eqn_inv1:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; a = (\\<rho> x) \\<rbrakk> \\<Longrightarrow> \n                       x = (\\<rho> a)\"", "lemma (in Group) eqn_inv2:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;  x \\<cdot> a = x \\<cdot> (\\<rho> x)\\<rbrakk> \\<Longrightarrow>\n                        x = (\\<rho> a)\"", "lemma (in Group) r_one_unique:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; a \\<cdot> x = a\\<rbrakk>  \\<Longrightarrow>\n                                 x = \\<one>\"", "lemma (in Group) r_i_unique:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; a \\<cdot> x = \\<one>\\<rbrakk> \\<Longrightarrow>\n                             x = (\\<rho> a)\"", "lemma (in Group) iop_i_i:\"a \\<in> carrier G  \\<Longrightarrow> \\<rho> (\\<rho> a) = a\"", "lemma (in Group) i_ab:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                            \\<rho> (a \\<cdot> b) = (\\<rho> b) \\<cdot> (\\<rho> a)\"", "lemma (in Group) sol_eq_l:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; x \\<in> carrier G;\n                   a \\<cdot> x = b\\<rbrakk> \\<Longrightarrow> x = (\\<rho> a) \\<cdot> b\"", "lemma (in Group) sol_eq_r:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; x \\<in> carrier G; \n       x \\<cdot> a = b \\<rbrakk> \\<Longrightarrow>  x = b \\<cdot> (\\<rho> a)\"", "lemma (in Group) r_div_eq:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; a \\<cdot> (\\<rho> b) = \\<one>\\<rbrakk> \\<Longrightarrow>\n                            a = b\"", "lemma (in Group) l_div_eq:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; (\\<rho> a) \\<cdot> b = \\<one>\\<rbrakk> \\<Longrightarrow>\n                               a = b\"", "lemma (in Group) i_m_closed:\"\\<lbrakk>a \\<in> carrier G ; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n              (\\<rho> a) \\<cdot> b \\<in> carrier G \"", "lemma (in Group) sg_subset:\"G \\<guillemotright> H \\<Longrightarrow> H \\<subseteq> carrier G\"", "lemma (in Group) one_Gp_one:\"G \\<guillemotright> H \\<Longrightarrow> \\<one>\\<^bsub>(Gp G H)\\<^esub> = \\<one>\"", "lemma (in Group) carrier_Gp:\"G \\<guillemotright> H \\<Longrightarrow> (carrier (\\<natural>H)) = H\"", "lemma (in Group) sg_subset_elem:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H \\<rbrakk> \\<Longrightarrow> h \\<in> carrier G\"", "lemma (in Group) sg_mult_closedr:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> carrier G; h \\<in> H\\<rbrakk> \\<Longrightarrow>\n                x \\<cdot> h \\<in> carrier G\"", "lemma (in Group) sg_mult_closedl:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> carrier G; h \\<in> H\\<rbrakk> \\<Longrightarrow>\n                    h \\<cdot> x \\<in> carrier G\"", "lemma (in Group) sg_condTr1:\"\\<lbrakk>H \\<subseteq> carrier G; H \\<noteq> {};\n                  \\<forall>a. \\<forall>b. a \\<in> H \\<and> b \\<in> H \\<longrightarrow>  a \\<cdot> (\\<rho> b) \\<in> H\\<rbrakk> \\<Longrightarrow> \\<one> \\<in> H\"", "lemma (in Group) sg_unit_closed:\"G \\<guillemotright> H \\<Longrightarrow> \\<one> \\<in> H\"", "lemma (in Group) sg_i_closed:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H\\<rbrakk> \\<Longrightarrow> (\\<rho> x) \\<in> H\"", "lemma (in Group) sg_mult_closed:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H; y \\<in> H\\<rbrakk> \\<Longrightarrow>\n                                       x \\<cdot> y \\<in> H\"", "lemma (in Group) nsg_sg: \"G \\<triangleright> H \\<Longrightarrow> G \\<guillemotright> H\"", "lemma (in Group) nsg_subset:\"G \\<triangleright> N  \\<Longrightarrow> N \\<subseteq> carrier G\"", "lemma (in Group) nsg_lr_cst_eq:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                                     a \\<diamondsuit> N = N \\<bullet> a\"", "lemma (in Group) sg_i_m_closed:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> H ; b \\<in> H\\<rbrakk> \\<Longrightarrow> (\\<rho> a) \\<cdot> b \\<in> H\"", "lemma (in Group) sg_m_i_closed:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> H ; b \\<in> H \\<rbrakk> \\<Longrightarrow> a \\<cdot> (\\<rho> b) \\<in> H\"", "lemma (in Group) smallest_sg_gen:\"\\<lbrakk>A \\<subseteq> carrier G; G \\<guillemotright> H; A \\<subseteq> H\\<rbrakk> \\<Longrightarrow>\n                                   sg_gen G A \\<subseteq> H\"", "lemma (in Group) special_sg_G: \"G \\<guillemotright> (carrier G)\"", "lemma (in Group) special_sg_self: \"G = \\<natural>(carrier G)\"", "lemma (in Group) special_sg_e: \"G \\<guillemotright> {\\<one>}\"", "lemma (in Group) inter_sgs:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K\\<rbrakk> \\<Longrightarrow> G \\<guillemotright> (H \\<inter> K)\"", "lemma (in Group) subg_generated:\"A \\<subseteq> carrier G  \\<Longrightarrow> G \\<guillemotright> (sg_gen G A)\"", "lemma Group_Ugp:\"Ugp G \\<Longrightarrow> Group G\"", "lemma (in Group) r_mult_in_sg:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> carrier G; x \\<cdot> a \\<in> H\\<rbrakk>\n                              \\<Longrightarrow> \\<exists>h \\<in> H. h \\<cdot> (\\<rho> a) = x\"", "lemma (in Group) r_unit_sg:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> h \\<cdot> \\<one> = h\"", "lemma (in Group) sg_l_unit:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> \\<one> \\<cdot> h = h\"", "lemma (in Group) sg_l_i:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H \\<rbrakk> \\<Longrightarrow> (\\<rho> x) \\<cdot> x = \\<one>\"", "lemma (in Group) sg_tassoc:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H; y \\<in> H; z \\<in> H\\<rbrakk> \\<Longrightarrow>\n                  x \\<cdot> y \\<cdot> z = x \\<cdot> (y \\<cdot> z)\"", "lemma (in Group) sg_condition:\"\\<lbrakk>H \\<subseteq> carrier G; H \\<noteq> {};\n       \\<forall>a. \\<forall>b. a \\<in> H \\<and> b \\<in> H \\<longrightarrow>  a \\<cdot> (\\<rho> b) \\<in> H\\<rbrakk> \\<Longrightarrow> G \\<guillemotright> H\"", "lemma (in Group) Group_Gp:\"G \\<guillemotright> H \\<Longrightarrow> Group (\\<natural> H)\"", "lemma (in Group) Gp_carrier:\"G \\<guillemotright> H \\<Longrightarrow> carrier (Gp G H) = H\"", "lemma (in Group) sg_sg:\"\\<lbrakk>G \\<guillemotright> K; G \\<guillemotright> H; H \\<subseteq> K\\<rbrakk> \\<Longrightarrow> Gp G K \\<guillemotright> H\"", "lemma (in Group) sg_subset_of_subG:\"\\<lbrakk>G \\<guillemotright> K; Gp G K \\<guillemotright> H\\<rbrakk> \\<Longrightarrow> H \\<subseteq> K\"", "lemma const_ghom:\"\\<lbrakk>Group F; Group G\\<rbrakk> \\<Longrightarrow> 1\\<^bsub>F,G\\<^esub> \\<in> gHom F G\"", "lemma (in Group) const_gbij:\"gbij\\<^bsub>(\\<natural> {\\<one>}),(\\<natural> {\\<one>})\\<^esub> (1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>)\"", "lemma (in Group) unit_Groups_isom:\" (\\<natural> {\\<one>}) \\<cong> (\\<natural> {\\<one>})\"", "lemma Ugp_const_gHom:\"\\<lbrakk>Ugp G; Ugp E\\<rbrakk> \\<Longrightarrow> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>) \\<in> gHom G E\"", "lemma Ugp_const_gbij:\"\\<lbrakk>Ugp G; Ugp E\\<rbrakk> \\<Longrightarrow> gbij\\<^bsub>G,E\\<^esub> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\"", "lemma Ugps_isomorphic:\"\\<lbrakk>Ugp G; Ugp E\\<rbrakk> \\<Longrightarrow> G \\<cong> E\"", "lemma (in Group) Gp_mult_induced:\"\\<lbrakk>G \\<guillemotright> L; a \\<in> L; b \\<in> L\\<rbrakk>  \\<Longrightarrow>  \n                          a \\<cdot>\\<^bsub>(Gp G L)\\<^esub> b = a \\<cdot> b\"", "lemma (in Group) sg_i_induced:\"\\<lbrakk>G \\<guillemotright> L; a \\<in> L\\<rbrakk>  \\<Longrightarrow> \\<rho>\\<^bsub>(Gp G L)\\<^esub> a = \\<rho> a\"", "lemma (in Group) Gp_mult_induced1:\"\\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K; a \\<in> H \\<inter> K; b \\<in> H \\<inter> K\\<rbrakk> \n          \\<Longrightarrow> a \\<cdot>\\<^bsub>\\<natural>(H \\<inter> K)\\<^esub> b = a \\<cdot>\\<^bsub>(\\<natural>H)\\<^esub> b\"", "lemma (in Group) Gp_mult_induced2:\"\\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K; a \\<in> H \\<inter> K; b \\<in> H \\<inter> K\\<rbrakk> \n          \\<Longrightarrow> a \\<cdot>\\<^bsub>\\<natural>(H \\<inter> K)\\<^esub> b = a \\<cdot>\\<^bsub>(\\<natural>K)\\<^esub> b\"", "lemma (in Group) sg_i_induced1:\"\\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K; a \\<in> H \\<inter> K\\<rbrakk> \n                                     \\<Longrightarrow>  \\<rho>\\<^bsub>\\<natural>(H \\<inter> K)\\<^esub> a = \\<rho>\\<^bsub>(\\<natural>H)\\<^esub> a\"", "lemma (in Group) sg_i_induced2:\"\\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K; a \\<in> H \\<inter> K\\<rbrakk> \n          \\<Longrightarrow>  \\<rho>\\<^bsub>\\<natural>(H \\<inter> K)\\<^esub> a = \\<rho>\\<^bsub>\\<natural>K\\<^esub> a\"", "lemma (in Group) subg_sg_sg:\"\\<lbrakk>G \\<guillemotright> K; (Gp G K) \\<guillemotright> H \\<rbrakk> \\<Longrightarrow> G \\<guillemotright> H\"", "lemma (in Group) Gp_inherited:\"\\<lbrakk>G \\<guillemotright> K; G \\<guillemotright> L; K \\<subseteq> L\\<rbrakk> \\<Longrightarrow> \n                                Gp (Gp G L) K = Gp G K\"", "lemma (in Group) mem_lcs:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> a \\<diamondsuit> H\\<rbrakk>  \\<Longrightarrow> \n                          x \\<in> carrier G\"", "lemma (in Group) lcs_subset:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<diamondsuit> H \\<subseteq> carrier G\"", "lemma (in Group) a_in_lcs:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<in> a \\<diamondsuit> H\"", "lemma (in Group) eq_lcs1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n         x \\<in> a \\<diamondsuit> H; a \\<diamondsuit> H = b \\<diamondsuit> H\\<rbrakk> \\<Longrightarrow>  x \\<in> b \\<diamondsuit> H\"", "lemma (in Group) eq_lcs2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                            a \\<diamondsuit> H = b \\<diamondsuit> H\\<rbrakk> \\<Longrightarrow> a \\<in> b \\<diamondsuit> H\"", "lemma (in Group) lcs_mem_ldiv:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n                                  (a \\<in> b \\<diamondsuit> H) = ((\\<rho> b) \\<cdot> a \\<in> H)\"", "lemma (in Group) lcsTr5:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                 (\\<rho> a) \\<cdot> b \\<in> H; x \\<in> a \\<diamondsuit> H\\<rbrakk> \\<Longrightarrow> ((\\<rho> b) \\<cdot> x) \\<in> H\"", "lemma (in Group) lcsTr6:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                         (\\<rho> a) \\<cdot> b \\<in> H; x \\<in> a \\<diamondsuit> H\\<rbrakk> \\<Longrightarrow>  x \\<in> b \\<diamondsuit> H\"", "lemma (in Group) lcs_Unit1:\"G \\<guillemotright> H \\<Longrightarrow> \\<one> \\<diamondsuit> H = H\"", "lemma (in Group) lcs_Unit2:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> h \\<diamondsuit> H = H\"", "lemma (in Group) lcsTr7:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G; (\\<rho> a) \\<cdot> b \\<in> H\\<rbrakk>\n                        \\<Longrightarrow> a \\<diamondsuit> H \\<subseteq>  b \\<diamondsuit> H\"", "lemma (in Group) lcsTr8:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; h \\<in> H\\<rbrakk> \\<Longrightarrow> a \\<cdot> h \\<in> a \\<diamondsuit> H\"", "lemma (in Group) lcs_tool1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n      (\\<rho> a) \\<cdot> b \\<in> H\\<rbrakk> \\<Longrightarrow> (\\<rho> b) \\<cdot> a \\<in> H\"", "theorem (in Group) lcs_eq:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n           ((\\<rho> a) \\<cdot> b \\<in> H) = (a \\<diamondsuit> H = b \\<diamondsuit> H)\"", "lemma (in Group) rcs_subset:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> H \\<bullet> a \\<subseteq> carrier G\"", "lemma (in Group) mem_rcs:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow> \\<exists>h\\<in>H. h \\<cdot> a = x\"", "lemma (in Group) rcs_subset_elem:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> H \\<bullet> a\\<rbrakk>  \\<Longrightarrow> \n                                                        x \\<in> carrier G\"", "lemma (in Group) rcs_in_set_rcs:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n          H \\<bullet> a \\<in> set_rcs G H\"", "lemma (in Group) rcsTr0:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                         H \\<bullet> (a \\<cdot> b) \\<in> set_rcs G H\"", "lemma (in Group) a_in_rcs:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<in> H \\<bullet> a\"", "lemma (in Group) rcs_nonempty:\"\\<lbrakk>G \\<guillemotright> H; X \\<in> set_rcs G H\\<rbrakk> \\<Longrightarrow> X \\<noteq> {}\"", "lemma (in Group) rcs_tool0:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n      a \\<cdot> (\\<rho> b) \\<in> H\\<rbrakk> \\<Longrightarrow> b \\<cdot> (\\<rho> a) \\<in> H\"", "lemma (in Group) rcsTr1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n         x \\<in> H \\<bullet> a; H \\<bullet> a = H \\<bullet> b\\<rbrakk> \\<Longrightarrow> x \\<in> H \\<bullet> b\"", "lemma (in Group) rcs_eqTr:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                             H \\<bullet> a = H \\<bullet> b\\<rbrakk> \\<Longrightarrow> a \\<in> H \\<bullet> b\"", "lemma (in Group) rcs_eqTr1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n           (a \\<in> H \\<bullet> b) =  (a \\<cdot> (\\<rho> b) \\<in> H)\"", "lemma (in Group) rcsTr2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> H \\<bullet> (\\<rho> a)\\<rbrakk> \\<Longrightarrow> \n                          b \\<cdot> a \\<in> H\"", "lemma (in Group) rcsTr5:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n       b \\<cdot> (\\<rho> a) \\<in> H; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow> x \\<cdot> (\\<rho> b) \\<in> H\"", "lemma (in Group) rcsTr6:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                  b \\<cdot> (\\<rho> a) \\<in> H ; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow> x \\<in> H \\<bullet> b\"", "lemma (in Group) rcs_Unit1:\"G \\<guillemotright> H \\<Longrightarrow>  H \\<bullet> \\<one> = H\"", "lemma (in Group) unit_rcs_in_set_rcs:\"G \\<guillemotright> H \\<Longrightarrow> H \\<in> set_rcs G H\"", "lemma (in Group) rcs_Unit2:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> H \\<bullet> h = H\"", "lemma (in Group) rcsTr7:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G; b \\<cdot> (\\<rho> a) \\<in> H\\<rbrakk>\n                         \\<Longrightarrow> H \\<bullet> a  \\<subseteq>  H \\<bullet> b\"", "lemma (in Group) rcs_tool1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G; \n      b \\<cdot> (\\<rho> a) \\<in> H\\<rbrakk> \\<Longrightarrow>  a \\<cdot> (\\<rho> b) \\<in> H \"", "lemma (in Group) rcs_tool2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G;  x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                               \\<exists> h \\<in> H. h \\<cdot> a = x\"", "theorem (in Group) rcs_eq:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                            (b \\<cdot> (\\<rho> a) \\<in> H) = (H \\<bullet> a = H \\<bullet> b)\"", "lemma (in Group) rcs_eq1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                                           H \\<bullet> a = H \\<bullet> x\"", "lemma (in Group) rcs_eq2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G;  b \\<in> carrier G; \n                           (H \\<bullet> a) \\<inter> (H \\<bullet> b) \\<noteq> {}\\<rbrakk> \\<Longrightarrow> (H \\<bullet> a) = (H \\<bullet> b)\"", "lemma (in Group) rcs_meet:\"\\<lbrakk>G \\<guillemotright> H; X \\<in> set_rcs G H; Y \\<in> set_rcs G H;\n                               X \\<inter> Y \\<noteq> {}\\<rbrakk> \\<Longrightarrow> X = Y\"", "lemma (in Group) rcsTr8:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; h \\<in> H; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                      h \\<cdot> x \\<in> H \\<bullet> a\"", "lemma (in Group) rcsTr9:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; h \\<in> H; (\\<rho> x) \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                          h \\<cdot> (\\<rho> x) \\<in> H \\<bullet> a\"", "lemma (in Group) rcsTr10:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> H \\<bullet> a; y \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                          x \\<cdot> (\\<rho> y) \\<in> H\"", "lemma (in Group) PrSubg4_2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> H \\<bullet> (\\<rho> a)\\<rbrakk> \\<Longrightarrow> \n       x \\<in> {z. \\<exists>v\\<in>(H \\<bullet> a). \\<exists>h\\<in>H. h \\<cdot> (\\<rho> v) = z}\"", "lemma (in Group) rcs_fixed:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; H \\<bullet> a = H\\<rbrakk>  \\<Longrightarrow> a \\<in> H\"", "lemma (in Group) rcs_fixed1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; h \\<in> H\\<rbrakk> \\<Longrightarrow>\n                                               H \\<bullet> a = (H \\<bullet> (h \\<cdot> a))\"", "lemma (in Group) rcs_fixed2:\"G \\<guillemotright> H \\<Longrightarrow> \\<forall>h\\<in>H. H \\<bullet> h = H\"", "lemma (in Group) Gp_rcs:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K; H \\<subseteq> K; x \\<in> K\\<rbrakk> \\<Longrightarrow>\n                                   H \\<bullet>\\<^bsub>(Gp G K)\\<^esub> x = (H \\<bullet> x)\"", "lemma (in Group) subg_lcs:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K; H \\<subseteq> K; x \\<in> K\\<rbrakk> \\<Longrightarrow>\n                                   x \\<diamondsuit>\\<^bsub>(Gp G K)\\<^esub> H = x \\<diamondsuit> H\"", "lemma (in Group) nsg1:\"\\<lbrakk>G \\<guillemotright> H; b \\<in> carrier G; h \\<in> H;\n       \\<forall>a\\<in> carrier G. \\<forall>h\\<in>H. (a \\<cdot> h)\\<cdot> (\\<rho> a) \\<in> H\\<rbrakk> \\<Longrightarrow> b \\<cdot> h \\<cdot> (\\<rho> b) \\<in> H\"", "lemma (in Group) nsg2:\"\\<lbrakk>G \\<guillemotright> H; b \\<in> carrier G; h \\<in> H;  \n       \\<forall>a\\<in>carrier G. \\<forall>h\\<in>H. (a \\<cdot> h) \\<cdot> (\\<rho> a) \\<in> H\\<rbrakk> \\<Longrightarrow>  (\\<rho> b) \\<cdot> h \\<cdot> b \\<in> H\"", "lemma (in Group) nsg_subset_elem:\"\\<lbrakk>G \\<triangleright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> h \\<in> carrier G\"", "lemma (in Group) nsg_l_rcs_eq:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<diamondsuit> N = N \\<bullet> a\"", "lemma (in Group) sg_nsg1:\"\\<lbrakk>G \\<guillemotright> H; \\<forall>a\\<in> carrier G. \\<forall>h\\<in>H. (a \\<cdot> h)\\<cdot> (\\<rho> a) \\<in> H;\n                 b \\<in> carrier G \\<rbrakk> \\<Longrightarrow> H \\<bullet> b =  b \\<diamondsuit> H\"", "lemma (in Group) cond_nsg:\"\\<lbrakk>G \\<guillemotright> H; \\<forall>a\\<in>carrier G. \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> (\\<rho> a) \\<in> H \\<rbrakk>\n                            \\<Longrightarrow> G \\<triangleright> H\"", "lemma (in Group) special_nsg_e:\"G \\<guillemotright> H \\<Longrightarrow> Gp G H \\<triangleright> {\\<one>}\"", "lemma (in Group) special_nsg_G:\"G \\<triangleright> (carrier G)\"", "lemma (in Group) special_nsg_G1:\"G \\<guillemotright> H \\<Longrightarrow> Gp G H \\<triangleright> H\"", "lemma (in Group) nsgTr0:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; b \\<in> N \\<bullet> a \\<rbrakk>\n                        \\<Longrightarrow>  (a \\<cdot> (\\<rho> b) \\<in> N) \\<and> ((\\<rho> a) \\<cdot> b \\<in> N)\"", "lemma (in Group) nsgTr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; b \\<cdot> (\\<rho> a) \\<in> N\\<rbrakk>\n                         \\<Longrightarrow> (\\<rho> b) \\<cdot> a \\<in> N\"", "lemma (in Group) nsgTr2:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; a1 \\<in> carrier G; \n       b1 \\<in> carrier G \\<rbrakk> \\<Longrightarrow> (a \\<cdot> b) \\<cdot> (\\<rho> (a1 \\<cdot> b1)) = \n                          a \\<cdot> (((b \\<cdot> (\\<rho> b1)) \\<cdot> ((\\<rho> a1) \\<cdot> a)) \\<cdot> (\\<rho> a))\"", "lemma (in Group) nsgPr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk> \\<Longrightarrow>\n                                                 a \\<cdot> (h \\<cdot> (\\<rho> a)) \\<in> N\"", "lemma (in Group) nsgPr1_1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G ; h \\<in> N\\<rbrakk> \\<Longrightarrow> \n                              (a \\<cdot> h) \\<cdot> (\\<rho> a) \\<in> N\"", "lemma (in Group) nsgPr2:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk> \\<Longrightarrow>\n                                   (\\<rho> a) \\<cdot> (h \\<cdot> a) \\<in> N\"", "lemma (in Group) nsgPr2_1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk> \\<Longrightarrow>\n                                              (\\<rho> a) \\<cdot> h \\<cdot> a \\<in> N\"", "lemma (in Group) nsgTr3:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; \na1 \\<in> carrier G; b1 \\<in> carrier G;  a \\<cdot> (\\<rho> a1) \\<in> N; b \\<cdot> (\\<rho> b1) \\<in> N\\<rbrakk> \\<Longrightarrow> \n                  (a \\<cdot> b) \\<cdot> (\\<rho> (a1 \\<cdot> b1)) \\<in> N\"", "lemma (in Group) nsg_in_Gp:\"\\<lbrakk>G \\<triangleright> N; G \\<guillemotright> H; N \\<subseteq> H\\<rbrakk> \\<Longrightarrow> (Gp G H) \\<triangleright> N\"", "lemma (in Group) nsgTr4:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;  x \\<in> N \\<bullet> a\\<rbrakk> \\<Longrightarrow> \n                            (\\<rho> x) \\<in> N \\<bullet> (\\<rho> a)\"", "lemma (in Group) c_topTr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; \n       a1 \\<in> carrier G; b1 \\<in> carrier G; N \\<bullet> a = N \\<bullet> a1; N \\<bullet> b = N \\<bullet> b1\\<rbrakk> \\<Longrightarrow> \n                      N \\<bullet> (a \\<cdot> b) = N \\<bullet> (a1 \\<cdot> b1)\"", "lemma (in Group) c_topTr2:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; a1 \\<in> carrier G;\n                 N \\<bullet> a = N \\<bullet> a1 \\<rbrakk> \\<Longrightarrow> N \\<bullet> (\\<rho> a) = N \\<bullet> (\\<rho> a1)\"", "lemma (in Group) c_iop_welldefTr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                         c_iop G N (N \\<bullet> a) \\<subseteq>  N \\<bullet> (\\<rho> a)\"", "lemma (in Group) c_iop_welldefTr2:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                                   N \\<bullet> (\\<rho> a) \\<subseteq>  c_iop G N (N \\<bullet> a)\"", "lemma (in Group) c_iop_welldef:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                 c_iop G N (N \\<bullet> a) =  N \\<bullet> (\\<rho> a)\"", "lemma (in Group) c_top_welldefTr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; \n          b \\<in> carrier G; x \\<in> N \\<bullet> a; y \\<in> N \\<bullet> b\\<rbrakk> \\<Longrightarrow> x \\<cdot> y \\<in> N \\<bullet> (a \\<cdot> b)\"", "lemma (in Group) c_top_welldefTr2:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G \\<rbrakk> \n                       \\<Longrightarrow> c_top G N (N \\<bullet> a) (N \\<bullet> b) \\<subseteq>  N \\<bullet> (a \\<cdot> b)\"", "lemma (in Group) c_top_welldefTr4:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; \n      x \\<in> N \\<bullet> (a \\<cdot> b)\\<rbrakk> \\<Longrightarrow> x \\<in> c_top G N (N \\<bullet> a) (N \\<bullet> b)\"", "lemma (in Group) c_top_welldefTr5:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n                             N \\<bullet> (a \\<cdot> b) \\<subseteq> c_top G N (N \\<bullet> a) (N \\<bullet> b)\"", "lemma (in Group) c_top_welldef:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n                 N \\<bullet> (a \\<cdot> b) = c_top G N (N \\<bullet> a) (N \\<bullet> b)\"", "lemma (in Group) Qg_unitTr:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                            c_top G N N (N \\<bullet> a) = N \\<bullet> a\"", "lemma (in Group) Qg_unit:\"G \\<triangleright> N  \\<Longrightarrow> \\<forall>x\\<in>set_rcs G N. c_top G N N x = x\"", "lemma (in Group) Qg_iTr:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                         c_top G N (c_iop G N (N \\<bullet> a)) (N \\<bullet> a) = N\"", "lemma (in Group) Qg_i:\"G \\<triangleright> N  \\<Longrightarrow>\n                         \\<forall>x \\<in> set_rcs G N. c_top G N (c_iop G N x) x = N\"", "lemma (in Group) Qg_tassocTr:\n  \"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G \\<rbrakk> \\<Longrightarrow> \n   c_top G N (N \\<bullet> a) (c_top G N (N \\<bullet> b) (N \\<bullet> c)) = \n                           c_top G N (c_top G N (N \\<bullet> a) (N \\<bullet> b)) (N \\<bullet> c)\"", "lemma (in Group) Qg_tassoc: \"G \\<triangleright> N \\<Longrightarrow>\n\\<forall>X\\<in>set_rcs G N. \\<forall>Y\\<in>set_rcs G N. \\<forall>Z\\<in>set_rcs G N. c_top G N X (c_top G N Y Z) \n                                   = c_top G N (c_top G N X Y) Z\"", "lemma (in Group) Qg_top:\"G \\<triangleright> N \\<Longrightarrow> \n                 c_top G N : set_rcs G N \\<rightarrow> set_rcs G N \\<rightarrow> set_rcs G N\"", "lemma (in Group) Qg_top_closed:\"\\<lbrakk>G \\<triangleright> N; A \\<in> set_rcs G N; B \\<in> set_rcs G N\\<rbrakk> \\<Longrightarrow>\n                                   c_top G N A B \\<in> set_rcs G N\"", "lemma (in Group) Qg_iop: \"G \\<triangleright> N \\<Longrightarrow>\n               c_iop G N :set_rcs G N \\<rightarrow> set_rcs G N\"", "lemma (in Group) Qg_iop_closed:\"\\<lbrakk>G \\<triangleright> N; A \\<in> set_rcs G N\\<rbrakk> \\<Longrightarrow>\n                                   c_iop G N A \\<in> set_rcs G N\"", "lemma (in Group) Qg_unit_closed: \"G \\<triangleright> N \\<Longrightarrow>  N \\<in> set_rcs G N\"", "theorem (in Group) Group_Qg:\"G \\<triangleright> N \\<Longrightarrow>  Group (Qg G N)\"", "lemma (in Group) Qg_one:\"G \\<triangleright> N \\<Longrightarrow> one (G / N) = N\"", "lemma (in Group) Qg_carrier:\"carrier (G / (N::'a set)) = set_rcs G N\"", "lemma (in Group) Qg_unit_group:\"G \\<triangleright> N \\<Longrightarrow> \n                        (set_rcs G N = {N}) = (carrier G = N)\"", "lemma (in Group) Gp_Qg:\"G \\<triangleright> N \\<Longrightarrow> Gp(G / N) (carrier(G / N)) = G / N\"", "lemma (in Group) Pj_hom0:\"\\<lbrakk>G \\<triangleright> N; x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n                 \\<Longrightarrow> Pj G N (x \\<cdot> y) = (Pj G N x) \\<cdot>\\<^bsub>(G / N)\\<^esub> (Pj G N y)\"", "lemma (in Group) Pj_ghom:\"G \\<triangleright> N \\<Longrightarrow> (Pj G N) \\<in> gHom G (G / N)\"", "lemma (in Group) Pj_mem:\"\\<lbrakk>G \\<triangleright> N; x \\<in> carrier G\\<rbrakk> \\<Longrightarrow> (Pj G N) x = N \\<bullet> x\"", "lemma (in Group) Pj_gsurjec:\"G \\<triangleright> N \\<Longrightarrow> gsurjec G (G/N) (Pj G N)\"", "lemma (in Group) lcs_in_Gp:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K; K \\<subseteq> H; a \\<in> H\\<rbrakk>  \\<Longrightarrow> \n                                       a \\<diamondsuit> K = a \\<diamondsuit>\\<^bsub>(Gp G H)\\<^esub> K\"", "lemma (in Group) rcs_in_Gp:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K; K \\<subseteq> H; a \\<in> H \\<rbrakk>  \\<Longrightarrow>\n                              K \\<bullet> a = K \\<bullet>\\<^bsub>(Gp G H)\\<^esub> a\""], "translations": [["", "lemma (in Order) less_and_segment:\"b \\<in> carrier D \\<Longrightarrow>\n      (\\<forall>a.((a \\<prec> b \\<and> a \\<in> carrier D) \\<longrightarrow> (Q a))) = \n      (\\<forall>a\\<in>carrier (Iod D (segment D b)).(Q a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> carrier D \\<Longrightarrow>\n    (\\<forall>a.\n        a \\<prec> b \\<and> a \\<in> carrier D \\<longrightarrow> Q a) =\n    (\\<forall>a\\<in>carrier (Iod D (segment D b)). Q a)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D;\n     \\<forall>a.\n        a \\<prec> b \\<and> a \\<in> carrier D \\<longrightarrow> Q a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier (Iod D (segment D b)). Q a\n 2. \\<lbrakk>b \\<in> carrier D;\n     \\<forall>a\\<in>carrier (Iod D (segment D b)). Q a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<prec> b \\<and>\n                         a \\<in> carrier D \\<longrightarrow>\n                         Q a", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>b \\<in> carrier D;\n        \\<forall>a.\n           a \\<prec> b \\<and> a \\<in> carrier D \\<longrightarrow> Q a;\n        a \\<in> carrier (Iod D (segment D b))\\<rbrakk>\n       \\<Longrightarrow> Q a\n 2. \\<lbrakk>b \\<in> carrier D;\n     \\<forall>a\\<in>carrier (Iod D (segment D b)). Q a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<prec> b \\<and>\n                         a \\<in> carrier D \\<longrightarrow>\n                         Q a", "apply (cut_tac segment_sub[of \"b\"], simp add:Iod_carrier,\n        thin_tac \"segment D b \\<subseteq> carrier D\",\n        simp add:segment_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D;\n     \\<forall>a\\<in>carrier (Iod D (segment D b)). Q a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<prec> b \\<and>\n                         a \\<in> carrier D \\<longrightarrow>\n                         Q a", "apply (rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>b \\<in> carrier D;\n        \\<forall>a\\<in>carrier (Iod D (segment D b)). Q a; a \\<prec> b;\n        a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> Q a", "apply (cut_tac segment_sub[of \"b\"], simp add:Iod_carrier,\n        thin_tac \"segment D b \\<subseteq> carrier D\",\n        simp add:segment_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Word_compare2:\"\\<lbrakk>Worder E; \n    \\<not> (\\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. ord_equiv (Iod D (segment D a)) \n                                             (Iod E (segment E b)))\\<rbrakk> \\<Longrightarrow> \n       \\<exists>c\\<in>carrier D. ord_equiv (Iod D (segment D c))  E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<not> (\\<forall>a\\<in>carrier D.\n                \\<exists>b\\<in>carrier E.\n                   ord_equiv (Iod D (segment D a))\n                    (Iod E (segment E b)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                         ord_equiv (Iod D (segment D c)) E", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<exists>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier E.\n           \\<not> ord_equiv (Iod D (segment D a))\n                   (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                         ord_equiv (Iod D (segment D c)) E", "apply (frule bex_nonempty_set[of \"carrier D\"],\n       frule nonempty_set_sub[of \"carrier D\" _],\n       thin_tac \"\\<exists>a\\<in>carrier D. \\<forall>b\\<in>carrier E.\n           \\<not> ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     {x \\<in> carrier D.\n      \\<forall>b\\<in>carrier E.\n         \\<not> ord_equiv (Iod D (segment D x))\n                 (Iod E (segment E b))} \\<noteq>\n     {};\n     {x \\<in> carrier D.\n      \\<forall>b\\<in>carrier E.\n         \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                         ord_equiv (Iod D (segment D c)) E", "apply  (insert ex_minimum,\n      frule_tac a = \"{x \\<in> carrier D. \\<forall>b\\<in>carrier E.\n        \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\" in \n        forall_spec, simp,\n      thin_tac \"{x \\<in> carrier D. \\<forall>b\\<in>carrier E.\n       \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))} \\<noteq> {}\",\n      thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\",\n      erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E;\n        {x \\<in> carrier D.\n         \\<forall>b\\<in>carrier E.\n            \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n        \\<subseteq> carrier D;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply (frule_tac X = \"{x \\<in> carrier D. \\<forall>b\\<in>carrier E.\n      \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\" and a = x in \n       minimum_elem_mem, assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         x;\n        x \\<in> carrier D \\<and>\n        (\\<forall>b\\<in>carrier E.\n            \\<not> ord_equiv (Iod D (segment D x))\n                    (Iod E (segment E b)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply (rename_tac d)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         d;\n        d \\<in> carrier D \\<and>\n        (\\<forall>b\\<in>carrier E.\n            \\<not> ord_equiv (Iod D (segment D d))\n                    (Iod E (segment E b)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply (erule conjE, thin_tac \"\\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D d)) (Iod E (segment E b))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         d;\n        d \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply (frule_tac d = d in less_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         d;\n        d \\<in> carrier D;\n        \\<forall>a.\n           a \\<prec> d \\<and> a \\<in> carrier D \\<longrightarrow>\n           \\<not> (\\<forall>b\\<in>carrier E.\n                      \\<not> ord_equiv (Iod D (segment D a))\n                              (Iod E (segment E b)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         d;\n        d \\<in> carrier D;\n        \\<forall>a.\n           a \\<prec> d \\<and> a \\<in> carrier D \\<longrightarrow>\n           (\\<exists>b\\<in>carrier E.\n               ord_equiv (Iod D (segment D a))\n                (Iod E (segment E b)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply (simp add:less_and_segment)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         d;\n        d \\<in> carrier D;\n        \\<forall>a\\<in>carrier (Iod D (segment D d)).\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply (cut_tac a = d in segment_Worder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         d;\n        d \\<in> carrier D;\n        \\<forall>a\\<in>carrier (Iod D (segment D d)).\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        Worder (Iod D (segment D d))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply (frule_tac D = \"Iod D (segment D d)\" in  Worder.well_ord_compare1 [of _ \n       \"E\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>d.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         d;\n        d \\<in> carrier D;\n        \\<forall>a\\<in>carrier (Iod D (segment D d)).\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        Worder (Iod D (segment D d))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>carrier (Iod D (segment D d)).\n                            \\<exists>b\\<in>carrier E.\n                               ord_equiv\n                                (Iod (Iod D (segment D d))\n                                  (segment (Iod D (segment D d)) a))\n                                (Iod E (segment E b))\n 2. \\<And>d.\n       \\<lbrakk>Worder E;\n        minimum_elem D\n         {x \\<in> carrier D.\n          \\<forall>b\\<in>carrier E.\n             \\<not> ord_equiv (Iod D (segment D x)) (Iod E (segment E b))}\n         d;\n        d \\<in> carrier D;\n        \\<forall>a\\<in>carrier (Iod D (segment D d)).\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        Worder (Iod D (segment D d));\n        ord_equiv (Iod D (segment D d)) E \\<or>\n        (\\<exists>c\\<in>carrier E.\n            ord_equiv (Iod D (segment D d)) (Iod E (segment E c)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv (Iod D (segment D c)) E", "apply (auto simp add: minimum_elem_def Iod_segment_segment)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Worder_equiv:\"\\<lbrakk>Worder E; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.  ord_equiv (Iod D (segment D a)) \n             (Iod E (segment E b));  \n      \\<forall>c\\<in>carrier E. \\<exists>d\\<in>carrier D.  ord_equiv (Iod E (segment E c)) \n                    (Iod D (segment D d))\\<rbrakk> \\<Longrightarrow> ord_equiv D E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     \\<forall>c\\<in>carrier E.\n        \\<exists>d\\<in>carrier D.\n           ord_equiv (Iod E (segment E c)) (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (frule well_ord_compare1 [of \"E\"], assumption+,\n       erule disjE, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     \\<forall>c\\<in>carrier E.\n        \\<exists>d\\<in>carrier D.\n           ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     \\<exists>c\\<in>carrier E. ord_equiv D (Iod E (segment E c))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (erule bexE,\n       insert Worder,\n       frule_tac x = c in bspec, assumption+,\n        thin_tac \"\\<forall>c\\<in>carrier E. \\<exists>d\\<in>carrier D.\n               ord_equiv (Iod E (segment E c)) (Iod D (segment D d))\",\n       erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c d.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        c \\<in> carrier E; ord_equiv D (Iod E (segment E c)); Worder D;\n        d \\<in> carrier D;\n        ord_equiv (Iod E (segment E c)) (Iod D (segment D d))\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D E", "apply (cut_tac a = d in segment_Worder,\n       cut_tac D = E and a = c in Worder.segment_Worder, assumption+,\n       frule_tac D = \"Iod D (segment D d)\" in Worder.Order,\n       frule_tac D = \"Iod E (segment E c)\" in Worder.Order,\n       insert Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c d.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        c \\<in> carrier E; ord_equiv D (Iod E (segment E c)); Worder D;\n        d \\<in> carrier D;\n        ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n        Worder (Iod D (segment D d)); Worder (Iod E (segment E c));\n        Order (Iod D (segment D d)); Order (Iod E (segment E c));\n        Order D\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D E", "apply (frule_tac D = \"D\" and E = \"Iod E (segment E c)\" and \n       F = \"Iod D (segment D d)\" in Order.ord_equiv_trans, assumption+,\n       frule_tac a = d in nonequiv_segment)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c d.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        c \\<in> carrier E; ord_equiv D (Iod E (segment E c)); Worder D;\n        d \\<in> carrier D;\n        ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n        Worder (Iod D (segment D d)); Worder (Iod E (segment E c));\n        Order (Iod D (segment D d)); Order (Iod E (segment E c)); Order D;\n        ord_equiv D (Iod D (segment D d));\n        \\<not> ord_equiv D (Iod D (segment D d))\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D E", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Worder_equiv1:\"\\<lbrakk>Worder E; \\<not> ord_equiv D E\\<rbrakk> \\<Longrightarrow>\n      \\<not> ((\\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.  \n         ord_equiv (Iod D (segment D a)) (Iod E (segment E b))) \\<and> \n         (\\<forall>c\\<in>carrier E. \\<exists>d\\<in>carrier D.  \n         ord_equiv (Iod E (segment E c)) (Iod D (segment D d))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; \\<not> ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> \\<not> ((\\<forall>a\\<in>carrier D.\n                                  \\<exists>b\\<in>carrier E.\n                                     ord_equiv (Iod D (segment D a))\n(Iod E (segment E b))) \\<and>\n                              (\\<forall>c\\<in>carrier E.\n                                  \\<exists>d\\<in>carrier D.\n                                     ord_equiv (Iod E (segment E c))\n(Iod D (segment D d))))", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; \\<not> ord_equiv D E;\n     (\\<forall>a\\<in>carrier D.\n         \\<exists>b\\<in>carrier E.\n            ord_equiv (Iod D (segment D a)) (Iod E (segment E b))) \\<and>\n     (\\<forall>c\\<in>carrier E.\n         \\<exists>d\\<in>carrier D.\n            ord_equiv (Iod E (segment E c)) (Iod D (segment D d)))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; \\<not> ord_equiv D E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     \\<forall>c\\<in>carrier E.\n        \\<exists>d\\<in>carrier D.\n           ord_equiv (Iod E (segment E c)) (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule Worder_equiv [of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; \\<not> ord_equiv D E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     \\<forall>c\\<in>carrier E.\n        \\<exists>d\\<in>carrier D.\n           ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Word_compare:\"Worder E \\<Longrightarrow>\n (\\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E) \\<or> ord_equiv D E \\<or> \n (\\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder E \\<Longrightarrow>\n    (\\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E) \\<or>\n    ord_equiv D E \\<or>\n    (\\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b)))", "apply (frule Worder.Order[of \"E\"],\n       case_tac \"ord_equiv D E\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      ord_equiv D E \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))", "apply (frule Worder_equiv1 [of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<not> ((\\<forall>a\\<in>carrier D.\n                 \\<exists>b\\<in>carrier E.\n                    ord_equiv (Iod D (segment D a))\n                     (Iod E (segment E b))) \\<and>\n             (\\<forall>c\\<in>carrier E.\n                 \\<exists>d\\<in>carrier D.\n                    ord_equiv (Iod E (segment E c))\n                     (Iod D (segment D d))))\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      ord_equiv D E \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     (\\<exists>a\\<in>carrier D.\n         \\<forall>b\\<in>carrier E.\n            \\<not> ord_equiv (Iod D (segment D a))\n                    (Iod E (segment E b))) \\<or>\n     (\\<exists>c\\<in>carrier E.\n         \\<forall>d\\<in>carrier D.\n            \\<not> ord_equiv (Iod E (segment E c))\n                    (Iod D (segment D d)))\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier E.\n           \\<not> ord_equiv (Iod D (segment D a))\n                   (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))\n 2. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))", "apply (frule Word_compare2 [of  \"E\"], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier E.\n           \\<not> ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     \\<exists>c\\<in>carrier D. ord_equiv (Iod D (segment D c)) E\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))\n 2. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))", "apply (cut_tac  Worder.Word_compare2 [of \"E\" \"D\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     \\<exists>c\\<in>carrier E. ord_equiv (Iod E (segment E c)) D\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))\n 2. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> Worder E\n 3. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> Worder D\n 4. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<forall>a\\<in>carrier E.\n                                 \\<exists>b\\<in>carrier D.\n                                    ord_equiv (Iod E (segment E a))\n                                     (Iod D (segment D b)))", "apply (thin_tac \"\\<exists>c\\<in>carrier E. \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c)) (Iod D (segment D d))\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E. ord_equiv (Iod E (segment E c)) D\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D (segment D a)) E) \\<or>\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))\n 2. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> Worder E\n 3. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> Worder D\n 4. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c))\n                   (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<forall>a\\<in>carrier E.\n                                 \\<exists>b\\<in>carrier D.\n                                    ord_equiv (Iod E (segment E a))\n                                     (Iod D (segment D b)))", "apply (erule bexE,\n        cut_tac a = c in Worder.segment_Worder[of \"E\"], assumption+, \n        frule_tac D = \"Iod E (segment E c)\" in Worder.Order,\n        insert Order,\n        frule_tac D = \"Iod E (segment E c)\" and E = D in Order.ord_equiv_sym,\n        assumption+, blast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     Order D\\<rbrakk>\n    \\<Longrightarrow> Worder E\n 2. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     Order D\\<rbrakk>\n    \\<Longrightarrow> Worder D\n 3. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     Order D\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<forall>a\\<in>carrier E.\n                                 \\<exists>b\\<in>carrier D.\n                                    ord_equiv (Iod E (segment E a))\n                                     (Iod D (segment D b)))", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     Order D\\<rbrakk>\n    \\<Longrightarrow> Worder D\n 2. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     Order D\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<forall>a\\<in>carrier E.\n                                 \\<exists>b\\<in>carrier D.\n                                    ord_equiv (Iod E (segment E a))\n                                     (Iod D (segment D b)))", "apply (simp add:Worder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; Order E; \\<not> ord_equiv D E;\n     \\<exists>c\\<in>carrier E.\n        \\<forall>d\\<in>carrier D.\n           \\<not> ord_equiv (Iod E (segment E c)) (Iod D (segment D d));\n     Order D\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<forall>a\\<in>carrier E.\n                                 \\<exists>b\\<in>carrier D.\n                                    ord_equiv (Iod E (segment E a))\n                                     (Iod D (segment D b)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Word_compareTr1:\"\\<lbrakk>Worder E;\n      \\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E; ord_equiv D E \\<rbrakk> \\<Longrightarrow> \n     False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E;\n     ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule bexE,\n       cut_tac a = a in segment_Worder,\n       frule_tac D = E in Worder.Order,\n       frule_tac D = \"Iod D (segment D a)\" in Worder.Order,\n       frule_tac D = \"Iod D (segment D a)\" and E = E in Order.ord_equiv_sym,\n       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Worder E; ord_equiv D E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E; Worder (Iod D (segment D a));\n        Order E; Order (Iod D (segment D a));\n        ord_equiv E (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (insert Order,\n       frule_tac D = D and E = E and F = \"Iod D (segment D a)\" in \n       Order.ord_equiv_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Worder E; ord_equiv D E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E; Worder (Iod D (segment D a));\n        Order E; Order (Iod D (segment D a));\n        ord_equiv E (Iod D (segment D a)); Order D;\n        ord_equiv D (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = a in nonequiv_segment, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Word_compareTr2:\"\\<lbrakk>Worder E; ord_equiv D E; \n      \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_equiv D E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder E; ord_equiv D E; b \\<in> carrier E;\n        ord_equiv D (Iod E (segment E b))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac a = b in Worder.segment_Worder [of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder E; ord_equiv D E; b \\<in> carrier E;\n        ord_equiv D (Iod E (segment E b));\n        Worder (Iod E (segment E b))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac Worder,\n       frule Worder.Order[of \"E\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder E; ord_equiv D E; b \\<in> carrier E;\n        ord_equiv D (Iod E (segment E b)); Worder (Iod E (segment E b));\n        Worder D; Order E\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = \"Iod E (segment E b)\" in Worder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder E; ord_equiv D E; b \\<in> carrier E;\n        ord_equiv D (Iod E (segment E b)); Worder (Iod E (segment E b));\n        Worder D; Order E; Order (Iod E (segment E b))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac E = E in ord_equiv_sym, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder E; ord_equiv D E; b \\<in> carrier E;\n        ord_equiv D (Iod E (segment E b)); Worder (Iod E (segment E b));\n        Worder D; Order E; Order (Iod E (segment E b));\n        ord_equiv E D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (meson Worder Worder.Word_compareTr1 ord_equiv_sym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Word_compareTr3:\"\\<lbrakk>Worder E; \n      \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b)); \n      \\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b));\n     \\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule bexE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>Worder E; b \\<in> carrier E;\n        ord_equiv D (Iod E (segment E b)); a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:ord_equiv_def[of \"D\"], erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f\\<rbrakk>\n       \\<Longrightarrow> False", "(** ord_isom_segment_segment **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Worder.Torder[of \"E\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac a = b in Worder.segment_Worder [of \"E\"], assumption+,\n        frule_tac D = \"Iod E (segment E b)\" in Worder.Torder,\n        frule_tac D = \"Iod E (segment E b)\" in Worder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac E = \"Iod E (segment E b)\" and f = f and a = a in \n        ord_isom_segment_segment, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a))\n         (Iod (Iod E (segment E b)) (segment (Iod E (segment E b)) (f a)))\n         (restrict f (carrier (Iod D (segment D a))))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac f = f and a = a and E = \"Iod E (segment E b)\" in \n        ord_isom_mem, assumption+,\n        frule Worder.Order[of \"E\"], \n        frule_tac b = b and a = \"f a\" in Order.Iod_segment_segment[of \"E\"],\n        assumption+, simp,\n        thin_tac \"Iod (Iod E (segment E b)) (segment (Iod E (segment E b)) \n        (f a)) =  Iod E (segment E (f a))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> carrier (Iod E (segment E b)); Order E\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = \"E\" and a = b in Order.segment_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> carrier (Iod E (segment E b)); Order E;\n        segment E b \\<subseteq> carrier E\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Order.Iod_carrier[of \"E\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> segment E b; Order E;\n        segment E b \\<subseteq> carrier E\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = \"f a\" and A = \"segment E b\" and B = \"carrier E\"\n               in subsetD, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> segment E b; Order E; segment E b \\<subseteq> carrier E;\n        f a \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac a = a in segment_Worder,\n         frule_tac D = \"Iod D (segment D a)\" in Worder.Order,\n         cut_tac a = \"f a\" in Worder.segment_Worder [of \"E\"], assumption+,\n         frule_tac D = \"Iod E (segment E (f a))\" in Worder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> segment E b; Order E; segment E b \\<subseteq> carrier E;\n        f a \\<in> carrier E; Worder (Iod D (segment D a));\n        Order (Iod D (segment D a)); Worder (Iod E (segment E (f a)));\n        Order (Iod E (segment E (f a)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (\n         frule_tac D = \"Iod D (segment D a)\" and E = \"Iod E (segment E (f a))\" in Order.ord_equiv, assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> segment E b; Order E; segment E b \\<subseteq> carrier E;\n        f a \\<in> carrier E; Worder (Iod D (segment D a));\n        Order (Iod D (segment D a)); Worder (Iod E (segment E (f a)));\n        Order (Iod E (segment E (f a)));\n        ord_equiv (Iod D (segment D a)) (Iod E (segment E (f a)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = \"Iod D (segment D a)\" and E = E in \n                                            Order.ord_equiv_sym, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> segment E b; Order E; segment E b \\<subseteq> carrier E;\n        f a \\<in> carrier E; Worder (Iod D (segment D a));\n        Order (Iod D (segment D a)); Worder (Iod E (segment E (f a)));\n        Order (Iod E (segment E (f a)));\n        ord_equiv (Iod D (segment D a)) (Iod E (segment E (f a)));\n        ord_equiv E (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = E and E = \"Iod D (segment D a)\" and \n        F = \"Iod E (segment E (f a))\" in Order.ord_equiv_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a f.\n       \\<lbrakk>Worder E; b \\<in> carrier E; a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) E;\n        ord_isom D (Iod E (segment E b)) f; Torder E;\n        Worder (Iod E (segment E b)); Torder (Iod E (segment E b));\n        Order (Iod E (segment E b));\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> segment E b; Order E; segment E b \\<subseteq> carrier E;\n        f a \\<in> carrier E; Worder (Iod D (segment D a));\n        Order (Iod D (segment D a)); Worder (Iod E (segment E (f a)));\n        Order (Iod E (segment E (f a)));\n        ord_equiv (Iod D (segment D a)) (Iod E (segment E (f a)));\n        ord_equiv E (Iod D (segment D a));\n        ord_equiv E (Iod E (segment E (f a)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Worder.nonequiv_segment[of \"E\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) subset_equiv_segment:\"S \\<subseteq> carrier D \\<Longrightarrow> \n      ord_equiv D (Iod D S) \\<or> \n      (\\<exists>a\\<in>carrier D. ord_equiv (Iod D S) (Iod D (segment D a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> carrier D \\<Longrightarrow>\n    ord_equiv D (Iod D S) \\<or>\n    (\\<exists>a\\<in>carrier D. ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (frule subset_Worder [of \"S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (frule Word_compare [of \"Iod D S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n     (\\<exists>a\\<in>carrier D.\n         ord_equiv (Iod D (segment D a)) (Iod D S)) \\<or>\n     ord_equiv D (Iod D S) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D S).\n         ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n     \\<exists>a\\<in>carrier D.\n        ord_equiv (Iod D (segment D a)) (Iod D S)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))\n 2. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n     ord_equiv D (Iod D S) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D S).\n         ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        a \\<in> carrier D;\n        ord_equiv (Iod D (segment D a)) (Iod D S)\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))\n 2. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n     ord_equiv D (Iod D S) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D S).\n         ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (cut_tac a = a in segment_Worder,\n        frule_tac D = \"Iod D (segment D a)\" in Worder.Order,\n        frule Worder.Order[of \"Iod D S\"],\n        frule_tac D = \"Iod D (segment D a)\" in Order.ord_equiv_sym[of _ \n                 \"Iod D S\"], assumption+, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n     ord_equiv D (Iod D S) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D S).\n         ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n     ord_equiv D (Iod D S)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))\n 2. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n     \\<exists>b\\<in>carrier (Iod D S).\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n     \\<exists>b\\<in>carrier (Iod D S).\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                      (\\<exists>a\\<in>carrier D.\n                          ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b))\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (frule Worder.Order[of \"Iod D S\"],\n        frule_tac D = \"Iod D S\" and a = b in Order.segment_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> carrier (Iod D S)\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (frule_tac S = \"segment (Iod D S) b\" in Order.Iod_sub_sub[of \"Iod D S\" _ \"S\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> carrier (Iod D S)\\<rbrakk>\n       \\<Longrightarrow> segment (Iod D S) b \\<subseteq> S\n 2. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> carrier (Iod D S)\\<rbrakk>\n       \\<Longrightarrow> S \\<subseteq> carrier (Iod D S)\n 3. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> carrier (Iod D S);\n        Iod (Iod (Iod D S) S) (segment (Iod D S) b) =\n        Iod (Iod D S) (segment (Iod D S) b)\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> carrier (Iod D S)\\<rbrakk>\n       \\<Longrightarrow> S \\<subseteq> carrier (Iod D S)\n 2. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> carrier (Iod D S);\n        Iod (Iod (Iod D S) S) (segment (Iod D S) b) =\n        Iod (Iod D S) (segment (Iod D S) b)\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> carrier (Iod D S);\n        Iod (Iod (Iod D S) S) (segment (Iod D S) b) =\n        Iod (Iod D S) (segment (Iod D S) b)\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (simp add:Iod_sub_sub[of \"S\" \"S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S);\n        b \\<in> carrier (Iod D S);\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> carrier (Iod D S)\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        ord_equiv D (Iod (Iod D S) (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (frule_tac S = \"segment (Iod D S) b\" in Iod_sub_sub[of _ \"S\"],\n         assumption+, simp,\n        thin_tac \"Iod (Iod D S) (segment (Iod D S) b) = \n                                          Iod D (segment (Iod D S) b)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        ord_equiv D (Iod D (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "(** to_subset **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        ord_equiv D (Iod D (segment (Iod D S) b)); Order (Iod D S);\n        segment (Iod D S) b \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> ord_equiv D (Iod D S) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             ord_equiv (Iod D S) (Iod D (segment D a)))", "apply (simp add:ord_equiv_def, erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b f.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        Order (Iod D S); segment (Iod D S) b \\<subseteq> S;\n        ord_isom D (Iod D (segment (Iod D S) b)) f\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f. ord_isom D (Iod D S) f) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             \\<exists>f.\n                                ord_isom (Iod D S) (Iod D (segment D a)) f)", "apply (frule_tac A = \"segment (Iod D S) b\" and B = S and C = \"carrier D\" in\n         subset_trans, assumption+,\n        frule_tac c = b in subsetD[of \"S\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b f.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        Order (Iod D S); segment (Iod D S) b \\<subseteq> S;\n        ord_isom D (Iod D (segment (Iod D S) b)) f;\n        segment (Iod D S) b \\<subseteq> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f. ord_isom D (Iod D S) f) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             \\<exists>f.\n                                ord_isom (Iod D S) (Iod D (segment D a)) f)", "apply (frule_tac T = \"segment (Iod D S) b\" and f = f in to_subset,\n         assumption+,\n        frule_tac a = b in forall_spec, assumption, \n        thin_tac \"\\<forall>a. a \\<in> carrier D \\<longrightarrow> a \\<preceq> f a\",\n        frule_tac T = \"segment (Iod D S) b\" in Iod_Order,\n        cut_tac D = \"Iod D S\" and a = b in Worder.segment_Worder)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b f.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        Order (Iod D S); segment (Iod D S) b \\<subseteq> S;\n        ord_isom D (Iod D (segment (Iod D S) b)) f;\n        segment (Iod D S) b \\<subseteq> carrier D; b \\<in> carrier D;\n        b \\<preceq> f b; Order (Iod D (segment (Iod D S) b))\\<rbrakk>\n       \\<Longrightarrow> Worder (Iod D S)\n 2. \\<And>b f.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        Order (Iod D S); segment (Iod D S) b \\<subseteq> S;\n        ord_isom D (Iod D (segment (Iod D S) b)) f;\n        segment (Iod D S) b \\<subseteq> carrier D; b \\<in> carrier D;\n        b \\<preceq> f b; Order (Iod D (segment (Iod D S) b));\n        Worder (Iod (Iod D S) (segment (Iod D S) b))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f. ord_isom D (Iod D S) f) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             \\<exists>f.\n                                ord_isom (Iod D S) (Iod D (segment D a)) f)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b f.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        Order (Iod D S); segment (Iod D S) b \\<subseteq> S;\n        ord_isom D (Iod D (segment (Iod D S) b)) f;\n        segment (Iod D S) b \\<subseteq> carrier D; b \\<in> carrier D;\n        b \\<preceq> f b; Order (Iod D (segment (Iod D S) b));\n        Worder (Iod (Iod D S) (segment (Iod D S) b))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f. ord_isom D (Iod D S) f) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             \\<exists>f.\n                                ord_isom (Iod D S) (Iod D (segment D a)) f)", "apply (frule_tac S = \"segment (Iod D S) b\" in Iod_sub_sub[of _ \"S\"],\n         assumption+, simp,\n        thin_tac \"Iod (Iod D S) (segment (Iod D S) b) = \n                                          Iod D (segment (Iod D S) b)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b f.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        Order (Iod D S); segment (Iod D S) b \\<subseteq> S;\n        ord_isom D (Iod D (segment (Iod D S) b)) f;\n        segment (Iod D S) b \\<subseteq> carrier D; b \\<in> carrier D;\n        b \\<preceq> f b; Order (Iod D (segment (Iod D S) b));\n        Worder (Iod D (segment (Iod D S) b))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f. ord_isom D (Iod D S) f) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             \\<exists>f.\n                                ord_isom (Iod D S) (Iod D (segment D a)) f)", "apply (insert Order,\n        frule_tac E = \"Iod D (segment (Iod D S) b)\" and f = f and a = b in \n        ord_isom_mem, assumption+,\n        simp add:Iod_carrier,\n        frule_tac c = \"f b\" and A = \"segment (Iod D S) b\" in \n               subsetD[of _ \"S\"], assumption+,\n        simp add:segment_def[of \"Iod D S\"],\n        simp add:Iod_carrier,\n        simp add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b f.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        Order (Iod D S);\n        {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S}\n        \\<subseteq> S;\n        ord_isom D\n         (Iod D {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S}) f;\n        {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S}\n        \\<subseteq> carrier D;\n        b \\<in> carrier D; b \\<preceq> f b;\n        Order\n         (Iod D {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S});\n        Worder\n         (Iod D {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S});\n        Order D; f b \\<prec> b; f b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f. ord_isom D (Iod D S) f) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             \\<exists>f.\n                                ord_isom (Iod D S) (Iod D (segment D a)) f)", "apply (frule_tac c = b in subsetD[of \"S\" \"carrier D\"], assumption+,\n        frule_tac c = \"f b\" in subsetD[of \"S\" \"carrier D\"], assumption+,\n        frule_tac a1 = \"f b\" and b1 = b in not_less_le[THEN sym], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b f.\n       \\<lbrakk>S \\<subseteq> carrier D; Worder (Iod D S); b \\<in> S;\n        Order (Iod D S);\n        {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S}\n        \\<subseteq> S;\n        ord_isom D\n         (Iod D {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S}) f;\n        {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S}\n        \\<subseteq> carrier D;\n        b \\<in> carrier D; b \\<preceq> f b;\n        Order\n         (Iod D {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S});\n        Worder\n         (Iod D {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> b \\<and> x \\<in> S});\n        Order D; f b \\<prec> b; f b \\<in> S; b \\<in> carrier D;\n        f b \\<in> carrier D;\n        b \\<preceq> f b = (\\<not> f b \\<prec> b)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f. ord_isom D (Iod D S) f) \\<or>\n                         (\\<exists>a\\<in>carrier D.\n                             \\<exists>f.\n                                ord_isom (Iod D S) (Iod D (segment D a)) f)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  ordinal_number :: \"'a Order  \\<Rightarrow> 'a Order set\" where\n  \"ordinal_number S = {X. Worder X \\<and> ord_equiv X S}\""], ["", "definition\n  ODnums :: \"'a Order set set\" where\n  \"ODnums = {X. \\<exists>S. Worder S \\<and> X = ordinal_number S}\""], ["", "definition\n  ODord :: \"['a Order set, 'a Order set] \\<Rightarrow> bool\" (infix \"\\<sqsubset>\" 60) where\n  \"X \\<sqsubset> Y \\<longleftrightarrow> (\\<exists>x \\<in> X. \\<exists>y \\<in> Y. (\\<exists>c\\<in>carrier y. ord_equiv x (Iod y (segment y c))))\""], ["", "definition\n  ODord_le :: \"['a Order set, 'a Order set] \\<Rightarrow> bool\" (infix \"\\<sqsubseteq>\" 60) where\n  \"X \\<sqsubseteq> Y \\<longleftrightarrow> X = Y \\<or> ODord X Y\""], ["", "definition\n  ODrel :: \"((('a Order) set) * (('a Order) set)) set\" where\n  \"ODrel = {Z. Z \\<in> ODnums \\<times> ODnums \\<and> ODord_le (fst Z) (snd Z)}\""], ["", "definition\n  ODnods :: \"('a Order set) Order\" where\n  \"ODnods = \\<lparr>carrier = ODnums, rel = ODrel \\<rparr>\""], ["", "lemma Worder_ord_equivTr:\"\\<lbrakk>Worder S; Worder T\\<rbrakk> \\<Longrightarrow>\n       ord_equiv S T = (\\<exists>f. ord_isom S T f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder S; Worder T\\<rbrakk>\n    \\<Longrightarrow> ord_equiv S T = (\\<exists>f. ord_isom S T f)", "by (frule Worder.Order[of \"S\"], frule Worder.Order[of \"T\"],\n    simp add:ord_equiv_def)"], ["", "lemma Worder_ord_isom_mem:\"\\<lbrakk>Worder S; Worder T; ord_isom S T f; a \\<in> carrier S\\<rbrakk>\n     \\<Longrightarrow> f a \\<in> carrier T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder S; Worder T; ord_isom S T f; a \\<in> carrier S\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> carrier T", "by (frule Worder.Order[of \"S\"], frule Worder.Order[of \"T\"],\n    simp add:Order.ord_isom_mem)"], ["", "lemma Worder_refl:\"Worder S \\<Longrightarrow> ord_equiv S S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder S \\<Longrightarrow> ord_equiv S S", "apply (frule_tac Worder.Order [of \"S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder S; Order S\\<rbrakk> \\<Longrightarrow> ord_equiv S S", "apply (rule Order.ord_equiv_reflex [of \"S\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Worder_sym:\"\\<lbrakk>Worder S; Worder T; ord_equiv S T \\<rbrakk> \\<Longrightarrow> ord_equiv T S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder S; Worder T; ord_equiv S T\\<rbrakk>\n    \\<Longrightarrow> ord_equiv T S", "apply (frule_tac Worder.Order [of \"S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder S; Worder T; ord_equiv S T; Order S\\<rbrakk>\n    \\<Longrightarrow> ord_equiv T S", "apply (frule_tac Worder.Order [of \"T\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder S; Worder T; ord_equiv S T; Order S; Order T\\<rbrakk>\n    \\<Longrightarrow> ord_equiv T S", "apply (rule Order.ord_equiv_sym [of \"S\" \"T\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Worder_trans:\"\\<lbrakk>Worder S; Worder T; Worder U; ord_equiv S T; ord_equiv T U\\<rbrakk> \\<Longrightarrow> ord_equiv S U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder S; Worder T; Worder U; ord_equiv S T;\n     ord_equiv T U\\<rbrakk>\n    \\<Longrightarrow> ord_equiv S U", "apply (frule Worder.Order [of \"S\"],\n       frule Worder.Order [of \"T\"],\n       frule Worder.Order [of \"U\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder S; Worder T; Worder U; ord_equiv S T; ord_equiv T U;\n     Order S; Order T; Order U\\<rbrakk>\n    \\<Longrightarrow> ord_equiv S U", "apply (rule Order.ord_equiv_trans [of \"S\" \"T\" \"U\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_inc_self:\"Worder S \\<Longrightarrow> S \\<in> ordinal_number S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder S \\<Longrightarrow> S \\<in> ordinal_number S", "by (simp add:ordinal_number_def, simp add:Worder_refl)"], ["", "lemma ordinal_number_eq:\"\\<lbrakk>Worder D; Worder E\\<rbrakk> \\<Longrightarrow>\n               (ord_equiv D E) = (ordinal_number D = ordinal_number E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E = (ordinal_number D = ordinal_number E)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D = ordinal_number E\n 2. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (simp add:ordinal_number_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X D} =\n                      {X. Worder X \\<and> ord_equiv X E}\n 2. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (rule equalityI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Worder D; Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X D}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X E}\n 2. \\<lbrakk>Worder D; Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X E}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X D}\n 3. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (rule subsetI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; Worder E; ord_equiv D E;\n        x \\<in> {X. Worder X \\<and> ord_equiv X D}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {X. Worder X \\<and> ord_equiv X E}\n 2. \\<lbrakk>Worder D; Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X E}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X D}\n 3. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; Worder E; ord_equiv D E;\n        Worder x \\<and> ord_equiv x D\\<rbrakk>\n       \\<Longrightarrow> ord_equiv x E\n 2. \\<lbrakk>Worder D; Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X E}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X D}\n 3. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; Worder E; ord_equiv D E; Worder x;\n        ord_equiv x D\\<rbrakk>\n       \\<Longrightarrow> ord_equiv x E\n 2. \\<lbrakk>Worder D; Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X E}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X D}\n 3. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (rule_tac S = x and T = D and U = E in Worder_trans,\n                       assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X E}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X D}\n 2. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (rule subsetI, simp, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; Worder E; ord_equiv D E; Worder x;\n        ord_equiv x E\\<rbrakk>\n       \\<Longrightarrow> ord_equiv x D\n 2. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (rule_tac S = x and T = E and U = D in Worder_trans,\n                       assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; Worder E; ord_equiv D E; Worder x;\n        ord_equiv x E\\<rbrakk>\n       \\<Longrightarrow> ord_equiv E D\n 2. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (rule Worder_sym, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D = ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (simp add:ordinal_number_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder E;\n     {X. Worder X \\<and> ord_equiv X D} =\n     {X. Worder X \\<and> ord_equiv X E}\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply (frule Worder_refl[of \"D\"],\n       frule Worder_refl[of \"E\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder E;\n     {X. Worder X \\<and> ord_equiv X D} =\n     {X. Worder X \\<and> ord_equiv X E};\n     ord_equiv D D; ord_equiv E E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mem_ordinal_number_equiv:\"\\<lbrakk>Worder D; \n           X \\<in> ordinal_number D\\<rbrakk> \\<Longrightarrow> ord_equiv X D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; X \\<in> ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> ord_equiv X D", "by (simp add:ordinal_number_def)"], ["", "lemma mem_ordinal_number_Worder:\"\\<lbrakk>Worder D; \n           X \\<in> ordinal_number D\\<rbrakk> \\<Longrightarrow> Worder X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; X \\<in> ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> Worder X", "by (simp add:ordinal_number_def)"], ["", "lemma mem_ordinal_number_Worder1:\"\\<lbrakk>x \\<in> ODnums; X \\<in> x\\<rbrakk> \\<Longrightarrow> Worder X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> ODnums; X \\<in> x\\<rbrakk> \\<Longrightarrow> Worder X", "apply (simp add:ODnums_def, erule exE, erule conjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>X \\<in> ordinal_number S; Worder S;\n        x = ordinal_number S\\<rbrakk>\n       \\<Longrightarrow> Worder X", "apply (rule mem_ordinal_number_Worder, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mem_ODnums_nonempty:\"X \\<in> ODnums \\<Longrightarrow> \\<exists>x. x \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> ODnums \\<Longrightarrow> \\<exists>x. x \\<in> X", "apply (simp add:ODnums_def, simp add:ordinal_number_def,\n       erule exE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder S; X = {X. Worder X \\<and> ord_equiv X S}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. x \\<in> X", "apply (frule_tac S = S in Worder_refl, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma carr_ODnods:\"carrier ODnods = ODnums\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier ODnods = ODnums", "by (simp add:ODnods_def)"], ["", "lemma ordinal_number_mem_carrier_ODnods:\n     \"Worder D \\<Longrightarrow> ordinal_number D \\<in> carrier ODnods\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder D \\<Longrightarrow> ordinal_number D \\<in> carrier ODnods", "by (simp add:ODnods_def ODnums_def, blast)"], ["", "lemma ordinal_number_mem_ODnums: \n      \"Worder D \\<Longrightarrow> ordinal_number D \\<in> ODnums\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder D \\<Longrightarrow> ordinal_number D \\<in> ODnums", "by (simp add:ODnums_def, blast)"], ["", "lemma ODordTr1:\" \\<lbrakk>Worder D; Worder E\\<rbrakk> \\<Longrightarrow> \n       (ODord (ordinal_number D) (ordinal_number E)) =\n       (\\<exists>b\\<in> carrier E. ord_equiv D (Iod E (segment E b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder E\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E =\n                      (\\<exists>b\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E b)))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; Worder E;\n     ordinal_number D \\<sqsubset> ordinal_number E\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                         ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply (simp add:ODord_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; Worder E;\n     \\<exists>x\\<in>ordinal_number D.\n        \\<exists>y\\<in>ordinal_number E.\n           \\<exists>c\\<in>carrier y.\n              ord_equiv x (Iod y (segment y c))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                         ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply ((erule bexE)+, simp add:ordinal_number_def, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y c.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier y;\n        ord_equiv x (Iod y (segment y c)); Worder x; ord_equiv x D;\n        Worder y; ord_equiv y E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                            ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply (rename_tac X Y c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y c.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier Y;\n        ord_equiv X (Iod Y (segment Y c)); Worder X; ord_equiv X D;\n        Worder Y; ord_equiv Y E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                            ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply (frule_tac S = Y and T = E in Worder_ord_equivTr, assumption,\n       simp, erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y c f.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier Y;\n        ord_equiv X (Iod Y (segment Y c)); Worder X; ord_equiv X D;\n        Worder Y; ord_equiv Y E; ord_isom Y E f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                            ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply (frule_tac D = Y in Worder.Order,\n       frule_tac D = E in Worder.Order,\n       frule_tac D = Y and E = E and f = f and a = c in \n                 Order.ord_isom_segment_segment, assumption+,\n       frule_tac S = Y and T = E and f = f and a = c in \n                 Worder_ord_isom_mem, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y c f.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier Y;\n        ord_equiv X (Iod Y (segment Y c)); Worder X; ord_equiv X D;\n        Worder Y; ord_equiv Y E; ord_isom Y E f; Order Y; Order E;\n        ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c)))\n         (restrict f (carrier (Iod Y (segment Y c))));\n        f c \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                            ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply (cut_tac D = Y and a = c in Worder.segment_Worder, assumption,\n       cut_tac D = E and a = \"f c\" in Worder.segment_Worder, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y c f.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier Y;\n        ord_equiv X (Iod Y (segment Y c)); Worder X; ord_equiv X D;\n        Worder Y; ord_equiv Y E; ord_isom Y E f; Order Y; Order E;\n        ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c)))\n         (restrict f (carrier (Iod Y (segment Y c))));\n        f c \\<in> carrier E; Worder (Iod Y (segment Y c));\n        Worder (Iod E (segment E (f c)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                            ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply (frule_tac S1 = \"Iod Y (segment Y c)\" and T1 = \"Iod E (segment E (f c))\" \n       in Worder_ord_equivTr[THEN sym], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y c f.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier Y;\n        ord_equiv X (Iod Y (segment Y c)); Worder X; ord_equiv X D;\n        Worder Y; ord_equiv Y E; ord_isom Y E f; Order Y; Order E;\n        ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c)))\n         (restrict f (carrier (Iod Y (segment Y c))));\n        f c \\<in> carrier E; Worder (Iod Y (segment Y c));\n        Worder (Iod E (segment E (f c)));\n        (\\<exists>fa.\n            ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c))) fa) =\n        ord_equiv (Iod Y (segment Y c)) (Iod E (segment E (f c)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                            ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply (frule_tac S = X and T = D in Worder_sym, assumption+,\n       thin_tac \"ord_equiv X D\",\n       frule_tac S = D and T = X and U = \"Iod Y (segment Y c)\" in \n                 Worder_trans, assumption+,\n       frule_tac S = D and T = \"Iod Y (segment Y c)\" and \n           U = \"Iod E (segment E (f c))\" in Worder_trans, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X Y c f.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier Y;\n        ord_equiv X (Iod Y (segment Y c)); Worder X; Worder Y;\n        ord_equiv Y E; ord_isom Y E f; Order Y; Order E;\n        ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c)))\n         (restrict f (carrier (Iod Y (segment Y c))));\n        f c \\<in> carrier E; Worder (Iod Y (segment Y c));\n        Worder (Iod E (segment E (f c)));\n        (\\<exists>fa.\n            ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c))) fa) =\n        ord_equiv (Iod Y (segment Y c)) (Iod E (segment E (f c)));\n        ord_equiv D X; ord_equiv D (Iod Y (segment Y c))\\<rbrakk>\n       \\<Longrightarrow> ord_equiv (Iod Y (segment Y c))\n                          (Iod E (segment E (f c)))\n 2. \\<And>X Y c f.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier Y;\n        ord_equiv X (Iod Y (segment Y c)); Worder X; Worder Y;\n        ord_equiv Y E; ord_isom Y E f; Order Y; Order E;\n        ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c)))\n         (restrict f (carrier (Iod Y (segment Y c))));\n        f c \\<in> carrier E; Worder (Iod Y (segment Y c));\n        Worder (Iod E (segment E (f c)));\n        (\\<exists>fa.\n            ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c))) fa) =\n        ord_equiv (Iod Y (segment Y c)) (Iod E (segment E (f c)));\n        ord_equiv D X; ord_equiv D (Iod Y (segment Y c));\n        ord_equiv D (Iod E (segment E (f c)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                            ord_equiv D (Iod E (segment E b))\n 3. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y c f.\n       \\<lbrakk>Worder D; Worder E; c \\<in> carrier Y;\n        ord_equiv X (Iod Y (segment Y c)); Worder X; Worder Y;\n        ord_equiv Y E; ord_isom Y E f; Order Y; Order E;\n        ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c)))\n         (restrict f (carrier (Iod Y (segment Y c))));\n        f c \\<in> carrier E; Worder (Iod Y (segment Y c));\n        Worder (Iod E (segment E (f c)));\n        (\\<exists>fa.\n            ord_isom (Iod Y (segment Y c)) (Iod E (segment E (f c))) fa) =\n        ord_equiv (Iod Y (segment Y c)) (Iod E (segment E (f c)));\n        ord_equiv D X; ord_equiv D (Iod Y (segment Y c));\n        ord_equiv D (Iod E (segment E (f c)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier E.\n                            ord_equiv D (Iod E (segment E b))\n 2. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number D \\<sqsubset> ordinal_number E", "apply (simp add:ODord_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder E;\n     \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>ordinal_number D.\n                         \\<exists>y\\<in>ordinal_number E.\n                            \\<exists>c\\<in>carrier y.\n                               ord_equiv x (Iod y (segment y c))", "apply (frule ordinal_inc_self[of \"D\"],\n       frule ordinal_inc_self[of \"E\"], blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODord:\" \\<lbrakk>Worder D; d \\<in> carrier D\\<rbrakk> \\<Longrightarrow> \n       ODord (ordinal_number (Iod D (segment D d))) (ordinal_number D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; d \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> ordinal_number (Iod D (segment D d)) \\<sqsubset>\n                      ordinal_number D", "apply (cut_tac Worder.segment_Worder[of \"D\" \"d\"], \n       subst ODordTr1[of \"Iod D (segment D d)\" \"D\"], assumption+,\n       frule Worder_refl[of \"Iod D (segment D d)\"], blast, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ord_less_ODord:\"\\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D; \n           a = ordinal_number (Iod D (segment D c));\n           b = ordinal_number (Iod D (segment D d))\\<rbrakk> \\<Longrightarrow>\n                         c \\<prec>\\<^bsub>D\\<^esub> d =  a \\<sqsubset> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d = a \\<sqsubset> b", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d));\n     c \\<prec>\\<^bsub>D\\<^esub> d\\<rbrakk>\n    \\<Longrightarrow> a \\<sqsubset> b\n 2. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (frule Worder.Order[of \"D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d)); c \\<prec>\\<^bsub>D\\<^esub> d;\n     Order D\\<rbrakk>\n    \\<Longrightarrow> a \\<sqsubset> b\n 2. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (simp add:Order.segment_inc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d)); c \\<in> segment D d;\n     Order D\\<rbrakk>\n    \\<Longrightarrow> ordinal_number (Iod D (segment D c)) \\<sqsubset>\n                      ordinal_number (Iod D (segment D d))\n 2. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (frule Order.Iod_carr_segment[THEN sym, of \"D\" \"d\"],\n       frule eq_set_inc[of \"c\" \"segment D d\" \"carrier (Iod D (segment D d))\"],\n       assumption+,\n       thin_tac \"segment D d = carrier (Iod D (segment D d))\",\n       thin_tac \"c \\<in> segment D d\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d)); Order D;\n     c \\<in> carrier (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> ordinal_number (Iod D (segment D c)) \\<sqsubset>\n                      ordinal_number (Iod D (segment D d))\n 2. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (cut_tac Worder.segment_Worder[of \"D\" \"d\"], \n       frule ODord[of \"Iod D (segment D d)\" \"c\"], assumption+,\n       simp add:Order.Iod_segment_segment, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d));\n     ordinal_number (Iod D (segment D c)) \\<sqsubset>\n     ordinal_number (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (frule Worder.segment_Worder[of D c],\n        frule Worder.segment_Worder[of D d])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c));\n     b = ordinal_number (Iod D (segment D d));\n     ordinal_number (Iod D (segment D c)) \\<sqsubset>\n     ordinal_number (Iod D (segment D d));\n     Worder (Iod D (segment D c)); Worder (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (simp add:ODordTr1[of \"Iod D (segment D c)\" \"Iod D (segment D d)\"],\n        thin_tac \"a = ordinal_number (Iod D (segment D c))\",\n        thin_tac \"b = ordinal_number (Iod D (segment D d))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n     \\<exists>b\\<in>carrier (Iod D (segment D d)).\n        ord_equiv (Iod D (segment D c))\n         (Iod (Iod D (segment D d)) (segment (Iod D (segment D d)) b));\n     Worder (Iod D (segment D c)); Worder (Iod D (segment D d))\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n        Worder (Iod D (segment D c)); Worder (Iod D (segment D d));\n        b \\<in> carrier (Iod D (segment D d));\n        ord_equiv (Iod D (segment D c))\n         (Iod (Iod D (segment D d))\n           (segment (Iod D (segment D d)) b))\\<rbrakk>\n       \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (frule Worder.Order[of D])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n        Worder (Iod D (segment D c)); Worder (Iod D (segment D d));\n        b \\<in> carrier (Iod D (segment D d));\n        ord_equiv (Iod D (segment D c))\n         (Iod (Iod D (segment D d)) (segment (Iod D (segment D d)) b));\n        Order D\\<rbrakk>\n       \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (simp add:Order.Iod_segment_segment)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n        Worder (Iod D (segment D c)); Worder (Iod D (segment D d));\n        b \\<in> carrier (Iod D (segment D d));\n        ord_equiv (Iod D (segment D c)) (Iod D (segment D b));\n        Order D\\<rbrakk>\n       \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (simp add:Order.Iod_carr_segment,\n        frule Order.segment_sub[of D d],\n        frule_tac c = b in subsetD[of \"segment D d\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder D; c \\<in> carrier D; d \\<in> carrier D;\n        Worder (Iod D (segment D c)); Worder (Iod D (segment D d));\n        b \\<in> segment D d;\n        ord_equiv (Iod D (segment D c)) (Iod D (segment D b)); Order D;\n        segment D d \\<subseteq> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (frule_tac b = b in Worder.segment_unique[of D c], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder D; d \\<in> carrier D; Worder (Iod D (segment D b));\n        Worder (Iod D (segment D d)); b \\<in> segment D d;\n        ord_equiv (Iod D (segment D b)) (Iod D (segment D b)); Order D;\n        segment D d \\<subseteq> carrier D; b \\<in> carrier D; c = b\\<rbrakk>\n       \\<Longrightarrow> b \\<prec>\\<^bsub>D\\<^esub> d", "apply (simp add:Order.segment_inc[THEN sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODord_le_ref:\"\\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; ODord_le X Y; Y \\<sqsubseteq> X \\<rbrakk> \\<Longrightarrow>\n                               X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; X \\<sqsubseteq> Y;\n     Y \\<sqsubseteq> X\\<rbrakk>\n    \\<Longrightarrow> X = Y", "apply (simp add:ODnums_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>S. Worder S \\<and> X = ordinal_number S;\n     \\<exists>S. Worder S \\<and> Y = ordinal_number S; X \\<sqsubseteq> Y;\n     Y \\<sqsubseteq> X\\<rbrakk>\n    \\<Longrightarrow> X = Y", "apply ((erule exE)+, (erule conjE)+, rename_tac S T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>X \\<sqsubseteq> Y; Y \\<sqsubseteq> X; Worder S;\n        X = ordinal_number S; Worder T; Y = ordinal_number T\\<rbrakk>\n       \\<Longrightarrow> X = Y", "apply (simp add:ODord_le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>ordinal_number S = ordinal_number T \\<or>\n                ordinal_number S \\<sqsubset> ordinal_number T;\n        ordinal_number T = ordinal_number S \\<or>\n        ordinal_number T \\<sqsubset> ordinal_number S;\n        Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>ordinal_number T = ordinal_number S \\<or>\n                ordinal_number T \\<sqsubset> ordinal_number S;\n        Worder S; X = ordinal_number S; Worder T; Y = ordinal_number T;\n        ordinal_number S \\<sqsubset> ordinal_number T\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T; ordinal_number S \\<sqsubset> ordinal_number T;\n        ordinal_number T \\<sqsubset> ordinal_number S\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply (simp add:ODordTr1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier T. ord_equiv S (Iod T (segment T b));\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply (frule_tac D = T and E = S in Worder.Word_compareTr3, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S T.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier T. ord_equiv S (Iod T (segment T b));\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier T.\n                            ord_equiv (Iod T (segment T a)) S\n 2. \\<And>S T.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier T. ord_equiv S (Iod T (segment T b));\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b));\n        False\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply (erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S T b.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b));\n        b \\<in> carrier T; ord_equiv S (Iod T (segment T b))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier T.\n                            ord_equiv (Iod T (segment T a)) S\n 2. \\<And>S T.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier T. ord_equiv S (Iod T (segment T b));\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b));\n        False\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply (frule_tac D = T and a = b in Worder.segment_Worder)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S T b.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b));\n        b \\<in> carrier T; ord_equiv S (Iod T (segment T b));\n        Worder (Iod T (segment T b))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier T.\n                            ord_equiv (Iod T (segment T a)) S\n 2. \\<And>S T.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier T. ord_equiv S (Iod T (segment T b));\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b));\n        False\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply (frule_tac S = S and T = \"Iod T (segment T b)\" in Worder_sym,\n         assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S T b.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b));\n        b \\<in> carrier T; ord_equiv S (Iod T (segment T b));\n        Worder (Iod T (segment T b));\n        ord_equiv (Iod T (segment T b)) S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier T.\n                            ord_equiv (Iod T (segment T a)) S\n 2. \\<And>S T.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier T. ord_equiv S (Iod T (segment T b));\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b));\n        False\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S T.\n       \\<lbrakk>Worder S; X = ordinal_number S; Worder T;\n        Y = ordinal_number T;\n        \\<exists>b\\<in>carrier T. ord_equiv S (Iod T (segment T b));\n        \\<exists>b\\<in>carrier S. ord_equiv T (Iod S (segment S b));\n        False\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number T", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODord_le_trans:\"\\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; Z \\<in> ODnums; X \\<sqsubseteq> Y; Y \\<sqsubseteq> Z \\<rbrakk>\n                     \\<Longrightarrow>  X \\<sqsubseteq> Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; Z \\<in> ODnums;\n     X \\<sqsubseteq> Y; Y \\<sqsubseteq> Z\\<rbrakk>\n    \\<Longrightarrow> X \\<sqsubseteq> Z", "apply (simp add:ODord_le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; Z \\<in> ODnums;\n     X = Y \\<or> X \\<sqsubset> Y; Y = Z \\<or> Y \\<sqsubset> Z\\<rbrakk>\n    \\<Longrightarrow> X = Z \\<or> X \\<sqsubset> Z", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; Z \\<in> ODnums;\n     Y = Z \\<or> Y \\<sqsubset> Z; X \\<sqsubset> Y\\<rbrakk>\n    \\<Longrightarrow> X = Z \\<or> X \\<sqsubset> Z", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> ODnums; Y \\<in> ODnums; Z \\<in> ODnums;\n     X \\<sqsubset> Y; Y \\<sqsubset> Z\\<rbrakk>\n    \\<Longrightarrow> X = Z \\<or> X \\<sqsubset> Z", "apply (simp add:ODnums_def, (erule exE)+, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S Sa Sb.\n       \\<lbrakk>X \\<sqsubset> Y; Y \\<sqsubset> Z; Worder S;\n        X = ordinal_number S; Worder Sa; Y = ordinal_number Sa; Worder Sb;\n        Z = ordinal_number Sb\\<rbrakk>\n       \\<Longrightarrow> X = Z \\<or> X \\<sqsubset> Z", "apply (rename_tac A B C, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C.\n       \\<lbrakk>ordinal_number A \\<sqsubset> ordinal_number B;\n        ordinal_number B \\<sqsubset> ordinal_number C; Worder A;\n        X = ordinal_number A; Worder B; Y = ordinal_number B; Worder C;\n        Z = ordinal_number C\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         ordinal_number A \\<sqsubset> ordinal_number C", "apply (simp add:ODordTr1,\n        thin_tac \"X = ordinal_number A\",\n        thin_tac \"Y = ordinal_number B\",\n        thin_tac \"Z = ordinal_number C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C.\n       \\<lbrakk>\\<exists>b\\<in>carrier B. ord_equiv A (Iod B (segment B b));\n        \\<exists>b\\<in>carrier C. ord_equiv B (Iod C (segment C b));\n        Worder A; Worder B; Worder C\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (erule bexE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "(* going to apply ord_isom_segment_segment *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (frule_tac D = B in Worder.Order,\n        frule_tac D = C in Worder.Order,\n        frule_tac D = C and a = ba in Worder.segment_Worder,\n        frule_tac D = \"Iod C (segment C ba)\" in Worder.Order,\n        frule_tac D = B and E = \"Iod C (segment C ba)\" in \n                  Order.ord_equiv_isom, assumption+, erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (frule_tac D = B and E = \"Iod C (segment C ba)\" and f = f in \n         Order.ord_isom_segment_segment, assumption+,\n        frule_tac D = B and E = \"Iod C (segment C ba)\" and f = f and a = b in\n         Order.ord_isom_mem, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f;\n        ord_isom (Iod B (segment B b))\n         (Iod (Iod C (segment C ba)) (segment (Iod C (segment C ba)) (f b)))\n         (restrict f (carrier (Iod B (segment B b))));\n        f b \\<in> carrier (Iod C (segment C ba))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "(** ord_isom_segment_segment applied **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f;\n        ord_isom (Iod B (segment B b))\n         (Iod (Iod C (segment C ba)) (segment (Iod C (segment C ba)) (f b)))\n         (restrict f (carrier (Iod B (segment B b))));\n        f b \\<in> carrier (Iod C (segment C ba))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (simp add:Order.Iod_segment_segment)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f;\n        ord_isom (Iod B (segment B b)) (Iod C (segment C (f b)))\n         (restrict f (carrier (Iod B (segment B b))));\n        f b \\<in> carrier (Iod C (segment C ba))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (frule_tac D = B and a = b in Worder.segment_Worder,\n        frule_tac D = \"Iod B (segment B b)\" in Worder.Order,\n        frule_tac D = C and a = \"f b\" in Worder.segment_Worder,\n        frule_tac D = \"Iod C (segment C (f b))\" in Worder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f;\n        ord_isom (Iod B (segment B b)) (Iod C (segment C (f b)))\n         (restrict f (carrier (Iod B (segment B b))));\n        f b \\<in> carrier (Iod C (segment C ba));\n        Worder (Iod B (segment B b)); Order (Iod B (segment B b));\n        Worder (Iod C (segment C (f b)));\n        Order (Iod C (segment C (f b)))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (frule_tac D = \"Iod B (segment B b)\" and E = \"Iod C (segment C (f b))\"\n         in  Order.ord_equiv, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f;\n        ord_isom (Iod B (segment B b)) (Iod C (segment C (f b)))\n         (restrict f (carrier (Iod B (segment B b))));\n        f b \\<in> carrier (Iod C (segment C ba));\n        Worder (Iod B (segment B b)); Order (Iod B (segment B b));\n        Worder (Iod C (segment C (f b))); Order (Iod C (segment C (f b)));\n        ord_equiv (Iod B (segment B b)) (Iod C (segment C (f b)))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (frule_tac S = A and T = \"Iod B (segment B b)\" and \n                  U = \"Iod C (segment C (f b))\" in Worder_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f;\n        ord_isom (Iod B (segment B b)) (Iod C (segment C (f b)))\n         (restrict f (carrier (Iod B (segment B b))));\n        f b \\<in> carrier (Iod C (segment C ba));\n        Worder (Iod B (segment B b)); Order (Iod B (segment B b));\n        Worder (Iod C (segment C (f b))); Order (Iod C (segment C (f b)));\n        ord_equiv (Iod B (segment B b)) (Iod C (segment C (f b)));\n        ord_equiv A (Iod C (segment C (f b)))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (simp add:Order.Iod_carr_segment)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f;\n        ord_isom (Iod B (segment B b)) (Iod C (segment C (f b)))\n         (restrict f (segment B b));\n        f b \\<in> segment C ba; Worder (Iod B (segment B b));\n        Order (Iod B (segment B b)); Worder (Iod C (segment C (f b)));\n        Order (Iod C (segment C (f b)));\n        ord_equiv (Iod B (segment B b)) (Iod C (segment C (f b)));\n        ord_equiv A (Iod C (segment C (f b)))\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply (frule_tac D = C and a = ba in Order.segment_sub,\n        frule_tac c = \"f b\" and A = \"segment C ba\" and B = \"carrier C\" in\n        subsetD, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B C b ba f.\n       \\<lbrakk>Worder A; Worder B; Worder C; b \\<in> carrier B;\n        ord_equiv A (Iod B (segment B b)); ba \\<in> carrier C;\n        ord_equiv B (Iod C (segment C ba)); Order B; Order C;\n        Worder (Iod C (segment C ba)); Order (Iod C (segment C ba));\n        ord_isom B (Iod C (segment C ba)) f;\n        ord_isom (Iod B (segment B b)) (Iod C (segment C (f b)))\n         (restrict f (segment B b));\n        f b \\<in> segment C ba; Worder (Iod B (segment B b));\n        Order (Iod B (segment B b)); Worder (Iod C (segment C (f b)));\n        Order (Iod C (segment C (f b)));\n        ord_equiv (Iod B (segment B b)) (Iod C (segment C (f b)));\n        ord_equiv A (Iod C (segment C (f b)));\n        segment C ba \\<subseteq> carrier C; f b \\<in> carrier C\\<rbrakk>\n       \\<Longrightarrow> ordinal_number A = ordinal_number C \\<or>\n                         (\\<exists>b\\<in>carrier C.\n                             ord_equiv A (Iod C (segment C b)))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_numberTr1:\" X \\<in> carrier ODnods \\<Longrightarrow> \\<exists>D. Worder D \\<and> D \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> carrier ODnods \\<Longrightarrow>\n    \\<exists>D. Worder D \\<and> D \\<in> X", "apply (simp add:ODnods_def, simp add:ODnums_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S. Worder S \\<and> X = ordinal_number S \\<Longrightarrow>\n    \\<exists>D. Worder D \\<and> D \\<in> X", "apply (erule exE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder S; X = ordinal_number S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Worder D \\<and> D \\<in> X", "apply (simp add:ordinal_number_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder S; X = {X. Worder X \\<and> ord_equiv X S}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Worder D \\<and> ord_equiv D S", "apply (frule_tac S = S in Worder_refl, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_numberTr1_1:\" X \\<in> ODnums \\<Longrightarrow> \\<exists>D. Worder D \\<and> D \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> ODnums \\<Longrightarrow> \\<exists>D. Worder D \\<and> D \\<in> X", "apply (simp add:ODnums_def, erule exE, erule conjE, \n       simp add:ordinal_number_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder S; X = {X. Worder X \\<and> ord_equiv X S}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Worder D \\<and> ord_equiv D S", "apply (frule_tac S = S in Worder_refl, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_numberTr1_2:\"\\<lbrakk>x \\<in> ODnums; S \\<in> x; T \\<in> x\\<rbrakk> \\<Longrightarrow>\n                              ord_equiv S T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> ODnums; S \\<in> x; T \\<in> x\\<rbrakk>\n    \\<Longrightarrow> ord_equiv S T", "by (simp add:ODnums_def, erule exE, erule conjE,\n       simp add:ordinal_number_def, (erule conjE)+,\n       frule_tac S = T and T = Sa in Worder_sym, assumption, assumption,\n       rule_tac S = S and T = Sa and U = T in Worder_trans, assumption+)"], ["", "lemma ordinal_numberTr2:\"\\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk> \\<Longrightarrow>\n            D \\<in> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> D \\<in> x", "by (simp add:ordinal_inc_self)"], ["", "lemma ordinal_numberTr3:\"\\<lbrakk>Worder D; Worder F; ord_equiv D F; \n        x = ordinal_number D\\<rbrakk> \\<Longrightarrow> x = ordinal_number F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder F; ord_equiv D F;\n     x = ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> x = ordinal_number F", "apply (simp add:ordinal_number_def,\n        thin_tac \"x = {X. Worder X \\<and> ord_equiv X D}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder F; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X D} =\n                      {X. Worder X \\<and> ord_equiv X F}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; Worder F; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X D}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X F}\n 2. \\<lbrakk>Worder D; Worder F; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X F}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X D}", "apply (rule subsetI, simp, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; Worder F; ord_equiv D F; Worder x;\n        ord_equiv x D\\<rbrakk>\n       \\<Longrightarrow> ord_equiv x F\n 2. \\<lbrakk>Worder D; Worder F; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X F}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X D}", "apply (rule_tac S = x and T = D and U = F in Worder_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; Worder F; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> {X. Worder X \\<and> ord_equiv X F}\n                      \\<subseteq> {X. Worder X \\<and> ord_equiv X D}", "apply (rule subsetI, simp, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; Worder F; ord_equiv D F; Worder x;\n        ord_equiv x F\\<rbrakk>\n       \\<Longrightarrow> ord_equiv x D", "apply (frule Worder_sym [of \"D\" \"F\"], assumption+,\n        rule_tac S = x and T = F and U = D in Worder_trans, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_numberTr4:\"\\<lbrakk>Worder D; X \\<in> carrier ODnods; D \\<in> X \\<rbrakk> \\<Longrightarrow>\n            X = ordinal_number D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; X \\<in> carrier ODnods; D \\<in> X\\<rbrakk>\n    \\<Longrightarrow> X = ordinal_number D", "apply (simp add:ODnods_def ODnums_def, erule exE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder D; D \\<in> X; Worder S; X = ordinal_number S\\<rbrakk>\n       \\<Longrightarrow> X = ordinal_number D", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder D; D \\<in> ordinal_number S; Worder S;\n        X = ordinal_number S\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number D", "apply (frule_tac D = S in mem_ordinal_number_equiv[of _ \"D\"], assumption+,\n       frule_tac D = D and E = S in ordinal_number_eq, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder D; D \\<in> ordinal_number S; Worder S;\n        X = ordinal_number S; ord_equiv D S;\n        ord_equiv D S = (ordinal_number D = ordinal_number S)\\<rbrakk>\n       \\<Longrightarrow> ordinal_number S = ordinal_number D", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_numberTr5:\"\\<lbrakk>x \\<in> ODnums; D \\<in> x\\<rbrakk> \\<Longrightarrow> x = ordinal_number D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> ODnums; D \\<in> x\\<rbrakk>\n    \\<Longrightarrow> x = ordinal_number D", "apply (frule mem_ordinal_number_Worder1[of x D], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> ODnums; D \\<in> x; Worder D\\<rbrakk>\n    \\<Longrightarrow> x = ordinal_number D", "apply (rule ordinal_numberTr4[of D x], assumption,\n       simp add:ODnods_def, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ordinal_number_ord:\"\\<lbrakk> X \\<in> carrier ODnods; Y \\<in> carrier ODnods\\<rbrakk> \\<Longrightarrow>\n                             ODord X Y \\<or> X = Y \\<or> ODord Y X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> X \\<sqsubset> Y \\<or> X = Y \\<or> Y \\<sqsubset> X", "apply (simp add:ODord_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<in>X.\n                          \\<exists>y\\<in>Y.\n                             \\<exists>c\\<in>carrier y.\n                                ord_equiv x (Iod y (segment y c))) \\<or>\n                      X = Y \\<or>\n                      (\\<exists>x\\<in>Y.\n                          \\<exists>y\\<in>X.\n                             \\<exists>c\\<in>carrier y.\n                                ord_equiv x (Iod y (segment y c)))", "apply (frule ordinal_numberTr1 [of \"X\"],\n        frule ordinal_numberTr1 [of \"Y\"], (erule exE)+, rename_tac D E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods;\n        Worder D \\<and> D \\<in> X; Worder E \\<and> E \\<in> Y\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))", "apply (frule_tac D = D and E = E in Worder.Word_compare, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y;\n        (\\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E) \\<or>\n        ord_equiv D E \\<or>\n        (\\<exists>b\\<in>carrier E.\n            ord_equiv D (Iod E (segment E b)))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))", "apply (erule disjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y;\n        \\<exists>a\\<in>carrier D. ord_equiv (Iod D (segment D a)) E\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))\n 2. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y;\n        ord_equiv D E \\<or>\n        (\\<exists>b\\<in>carrier E.\n            ord_equiv D (Iod E (segment E b)))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))", "apply (erule bexE,\n        cut_tac D = D and a = a in Worder.segment_Worder, assumption+,\n        frule_tac S = \"Iod D (segment D a)\" and T = E in Worder_sym, \n        assumption+, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y;\n        ord_equiv D E \\<or>\n        (\\<exists>b\\<in>carrier E.\n            ord_equiv D (Iod E (segment E b)))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y; ord_equiv D E\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))\n 2. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y;\n        \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))", "apply (frule_tac D = D and X = X in ordinal_numberTr4, assumption+,\n        frule_tac D = E and X = Y in ordinal_numberTr4, assumption+,\n        frule_tac D = D and E = E in ordinal_number_eq, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y; ord_equiv D E; X = ordinal_number D;\n        Y = ordinal_number E;\n        ord_equiv D E = (ordinal_number D = ordinal_number E)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))\n 2. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y;\n        \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D E.\n       \\<lbrakk>X \\<in> carrier ODnods; Y \\<in> carrier ODnods; Worder D;\n        D \\<in> X; Worder E; E \\<in> Y;\n        \\<exists>b\\<in>carrier E. ord_equiv D (Iod E (segment E b))\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>X.\n                             \\<exists>y\\<in>Y.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c))) \\<or>\n                         X = Y \\<or>\n                         (\\<exists>x\\<in>Y.\n                             \\<exists>y\\<in>X.\n                                \\<exists>c\\<in>carrier y.\n                                   ord_equiv x (Iod y (segment y c)))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODnum_subTr:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in>ODnums; y \\<sqsubset> x; Y \\<in> y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>c\\<in>carrier D. ord_equiv Y (Iod D (segment D c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> x; Y \\<in> y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                         ord_equiv Y (Iod D (segment D c))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> ordinal_number D; Y \\<in> y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                         ord_equiv Y (Iod D (segment D c))", "apply (thin_tac \"x = ordinal_number D\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; y \\<in> ODnums; y \\<sqsubset> ordinal_number D;\n     Y \\<in> y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                         ord_equiv Y (Iod D (segment D c))", "apply (simp add:ODnums_def, erule exE, erule conjE, simp,\n        thin_tac \"y = ordinal_number S\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder D; ordinal_number S \\<sqsubset> ordinal_number D;\n        Y \\<in> ordinal_number S; Worder S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv Y (Iod D (segment D c))", "apply (frule_tac D = S and X = Y in mem_ordinal_number_Worder, \n                                                      assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder D; ordinal_number S \\<sqsubset> ordinal_number D;\n        Y \\<in> ordinal_number S; Worder S; Worder Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv Y (Iod D (segment D c))", "apply (frule_tac D = Y and X = \"ordinal_number S\" in ordinal_numberTr4,\n        simp add:ODnods_def ODnums_def, blast, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder D; ordinal_number S \\<sqsubset> ordinal_number D;\n        Y \\<in> ordinal_number S; Worder S; Worder Y;\n        ordinal_number S = ordinal_number Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv Y (Iod D (segment D c))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder D; ordinal_number Y \\<sqsubset> ordinal_number D;\n        Y \\<in> ordinal_number Y; Worder S; Worder Y;\n        ordinal_number S = ordinal_number Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv Y (Iod D (segment D c))", "apply (thin_tac \"Y \\<in> ordinal_number Y\",\n        thin_tac \"ordinal_number S = ordinal_number Y\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>Worder D; ordinal_number Y \\<sqsubset> ordinal_number D;\n        Worder S; Worder Y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c\\<in>carrier D.\n                            ord_equiv Y (Iod D (segment D c))", "apply (simp add:ODordTr1[of \"Y\" \"D\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODnum_segmentTr:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in>ODnums; y \\<sqsubset> x\\<rbrakk> \\<Longrightarrow> \n        \\<exists>c. c\\<in>carrier D \\<and> (\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c.\n                         c \\<in> carrier D \\<and>\n                         (\\<forall>Y\\<in>y.\n                             ord_equiv Y (Iod D (segment D c)))", "apply (frule ordinal_numberTr1_1[of \"y\"], erule exE, erule conjE,\n       frule_tac x = x and y = y and Y = Da in ODnum_subTr[of \"D\" ],\n        assumption+, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da c.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> x; Worder Da; Da \\<in> y; c \\<in> carrier D;\n        ord_equiv Da (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> carrier D \\<and>\n                            (\\<forall>Y\\<in>y.\n                                ord_equiv Y (Iod D (segment D c)))", "apply (rule ex_conjI, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da c.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> ordinal_number D; Worder Da; Da \\<in> y;\n        c \\<in> carrier D; ord_equiv Da (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D c))", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da c Y.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> ordinal_number D; Worder Da; Da \\<in> y;\n        c \\<in> carrier D; ord_equiv Da (Iod D (segment D c));\n        Y \\<in> y\\<rbrakk>\n       \\<Longrightarrow> ord_equiv Y (Iod D (segment D c))", "apply (frule_tac D = D and a = c in Worder.segment_Worder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da c Y.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> ordinal_number D; Worder Da; Da \\<in> y;\n        c \\<in> carrier D; ord_equiv Da (Iod D (segment D c)); Y \\<in> y;\n        Worder (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> ord_equiv Y (Iod D (segment D c))", "apply (frule_tac X = Y in mem_ordinal_number_Worder1[of y], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da c Y.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> ordinal_number D; Worder Da; Da \\<in> y;\n        c \\<in> carrier D; ord_equiv Da (Iod D (segment D c)); Y \\<in> y;\n        Worder (Iod D (segment D c)); Worder Y\\<rbrakk>\n       \\<Longrightarrow> ord_equiv Y (Iod D (segment D c))", "apply (subst ordinal_number_eq, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da c Y.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> ordinal_number D; Worder Da; Da \\<in> y;\n        c \\<in> carrier D; ord_equiv Da (Iod D (segment D c)); Y \\<in> y;\n        Worder (Iod D (segment D c)); Worder Y\\<rbrakk>\n       \\<Longrightarrow> ordinal_number Y =\n                         ordinal_number (Iod D (segment D c))", "apply (simp add:ordinal_number_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da c Y.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> ordinal_number D; Worder Da; Da \\<in> y;\n        c \\<in> carrier D;\n        ordinal_number Da = ordinal_number (Iod D (segment D c)); Y \\<in> y;\n        Worder (Iod D (segment D c)); Worder Y\\<rbrakk>\n       \\<Longrightarrow> ordinal_number Y =\n                         ordinal_number (Iod D (segment D c))", "apply (subst ordinal_numberTr5[THEN sym, of y], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Da c Y.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> ordinal_number D; Worder Da; Da \\<in> y;\n        c \\<in> carrier D;\n        ordinal_number Da = ordinal_number (Iod D (segment D c)); Y \\<in> y;\n        Worder (Iod D (segment D c)); Worder Y\\<rbrakk>\n       \\<Longrightarrow> y = ordinal_number (Iod D (segment D c))", "apply (frule_tac D = Da in ordinal_numberTr5[of y], assumption, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODnum_segmentTr1:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums; y \\<sqsubset> x\\<rbrakk>\n        \\<Longrightarrow> \\<exists>c. c \\<in> carrier D \\<and> (y = ordinal_number (Iod D (segment D c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c.\n                         c \\<in> carrier D \\<and>\n                         y = ordinal_number (Iod D (segment D c))", "apply (frule ODnum_segmentTr[of D x y], assumption+, erule exE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> x; c \\<in> carrier D;\n        \\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> carrier D \\<and>\n                            y = ordinal_number (Iod D (segment D c))", "apply (frule mem_ODnums_nonempty[of y], erule exE,\n       frule_tac x = xa in bspec, assumption,\n       thin_tac \"\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D c))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c xa.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> x; c \\<in> carrier D; xa \\<in> y;\n        ord_equiv xa (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> carrier D \\<and>\n                            y = ordinal_number (Iod D (segment D c))", "(** going to apply ordinal_number_eq **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c xa.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> x; c \\<in> carrier D; xa \\<in> y;\n        ord_equiv xa (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> carrier D \\<and>\n                            y = ordinal_number (Iod D (segment D c))", "apply (frule_tac D = xa in ordinal_numberTr5[of y], assumption, simp,\n        frule_tac a = c in Worder.segment_Worder[of D],\n        rotate_tac -2, frule sym, thin_tac \"y = ordinal_number xa\", simp,\n        frule_tac X = xa in mem_ordinal_number_Worder1[of y], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c xa.\n       \\<lbrakk>Worder (Iod D (segment D c)); Worder D;\n        x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> ordinal_number D; c \\<in> carrier D; xa \\<in> y;\n        ord_equiv xa (Iod D (segment D c)); ordinal_number xa = y;\n        Worder xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c.\n                            c \\<in> carrier D \\<and>\n                            y = ordinal_number (Iod D (segment D c))", "apply (simp add:ordinal_number_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c xa.\n       \\<lbrakk>Worder (Iod D (segment D c)); Worder D;\n        x = ordinal_number D;\n        ordinal_number (Iod D (segment D c)) \\<in> ODnums;\n        ordinal_number (Iod D (segment D c)) \\<sqsubset> ordinal_number D;\n        c \\<in> carrier D; xa \\<in> ordinal_number (Iod D (segment D c));\n        y = ordinal_number (Iod D (segment D c));\n        ordinal_number xa = ordinal_number (Iod D (segment D c));\n        Worder xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ca.\n                            ca \\<in> carrier D \\<and>\n                            ordinal_number (Iod D (segment D c)) =\n                            ordinal_number (Iod D (segment D ca))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODnods_less:\"\\<lbrakk>x \\<in> carrier ODnods; y \\<in> carrier ODnods\\<rbrakk> \\<Longrightarrow>\n                       x \\<prec>\\<^bsub>ODnods\\<^esub> y =  x \\<sqsubset> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier ODnods; y \\<in> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> x \\<prec>\\<^bsub>ODnods\\<^esub> y = x \\<sqsubset> y", "apply (simp add:ODnods_def ole_def oless_def ODrel_def ODord_le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> ODnums; y \\<in> ODnums\\<rbrakk>\n    \\<Longrightarrow> ((x = y \\<or> x \\<sqsubset> y) \\<and> x \\<noteq> y) =\n                      x \\<sqsubset> y", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> ODnums; y \\<in> ODnums;\n     (x = y \\<or> x \\<sqsubset> y) \\<and> x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<sqsubset> y\n 2. \\<lbrakk>x \\<in> ODnums; y \\<in> ODnums; x \\<sqsubset> y\\<rbrakk>\n    \\<Longrightarrow> (x = y \\<or> x \\<sqsubset> y) \\<and> x \\<noteq> y", "apply (erule conjE, erule disjE, simp, assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> ODnums; y \\<in> ODnums; x \\<sqsubset> y\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> y", "apply (simp add:ODord_def, (erule bexE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya c.\n       \\<lbrakk>x \\<in> ODnums; y \\<in> ODnums; xa \\<in> x; ya \\<in> y;\n        c \\<in> carrier ya; ord_equiv xa (Iod ya (segment ya c))\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> y", "apply (rule contrapos_pp, simp+,\n        frule_tac x = y and S = ya and T = xa in ordinal_numberTr1_2,\n         assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya c.\n       \\<lbrakk>y \\<in> ODnums; xa \\<in> y; ya \\<in> y; c \\<in> carrier ya;\n        ord_equiv xa (Iod ya (segment ya c)); x = y;\n        ord_equiv ya xa\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:ODnums_def, erule exE, erule conjE, simp,\n        frule_tac D = S and X = xa in mem_ordinal_number_Worder, assumption+,\n        frule_tac D = S and X = ya in mem_ordinal_number_Worder, assumption+,\n        cut_tac D = ya and a = c in Worder.segment_Worder, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya c S.\n       \\<lbrakk>xa \\<in> ordinal_number S; ya \\<in> ordinal_number S;\n        c \\<in> carrier ya; ord_equiv xa (Iod ya (segment ya c));\n        x = ordinal_number S; ord_equiv ya xa; Worder S;\n        y = ordinal_number S; Worder xa; Worder ya;\n        Worder (Iod ya (segment ya c))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac S = ya and T = xa and U = \"Iod ya (segment ya c)\" in\n        Worder_trans, assumption+,\n        frule_tac D = ya and a = c in Worder.nonequiv_segment, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa ya c S.\n       \\<lbrakk>xa \\<in> ordinal_number S; ya \\<in> ordinal_number S;\n        c \\<in> carrier ya; ord_equiv xa (Iod ya (segment ya c));\n        x = ordinal_number S; ord_equiv ya xa; Worder S;\n        y = ordinal_number S; Worder xa; Worder ya;\n        Worder (Iod ya (segment ya c));\n        ord_equiv ya (Iod ya (segment ya c));\n        \\<not> ord_equiv ya (Iod ya (segment ya c))\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODord_less_not_eq:\"\\<lbrakk>x \\<in> carrier ODnods; y \\<in> carrier ODnods; x \\<sqsubset> y\\<rbrakk> \\<Longrightarrow>\n                          x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier ODnods; y \\<in> carrier ODnods;\n     x \\<sqsubset> y\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> y", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in> carrier ODnods; y \\<sqsubset> y; x = y\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule ordinal_numberTr1[of y], erule exE, erule conjE,\n       simp add:ODnods_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D.\n       \\<lbrakk>y \\<in> ODnums; y \\<sqsubset> y; x = y; Worder D;\n        D \\<in> y\\<rbrakk>\n       \\<Longrightarrow> False", "(* going to see ord_equiv D (Iod D (segment D c)) for some c,\n      at first show ordinal_number D = ordinal_number (Iod D (segment D c)) *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D.\n       \\<lbrakk>y \\<in> ODnums; y \\<sqsubset> y; x = y; Worder D;\n        D \\<in> y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = D in ordinal_numberTr5[of y], assumption+,\n       frule_tac D = D and x = y and y = y in ODnum_segmentTr1, assumption+,\n       erule exE, erule conjE, simp,\n       frule_tac a = c and D = D in Worder.segment_Worder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D c.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number D \\<sqsubset> ordinal_number D; x = ordinal_number D;\n        Worder D; D \\<in> ordinal_number D;\n        ordinal_number (Iod D (segment D c)) = ordinal_number D;\n        c \\<in> carrier D; y = ordinal_number D;\n        Worder (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> False", "(* equality got *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D c.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number D \\<sqsubset> ordinal_number D; x = ordinal_number D;\n        Worder D; D \\<in> ordinal_number D;\n        ordinal_number (Iod D (segment D c)) = ordinal_number D;\n        c \\<in> carrier D; y = ordinal_number D;\n        Worder (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rotate_tac -4, frule sym, \n       thin_tac \"ordinal_number (Iod D (segment D c)) = ordinal_number D\",\n       simp add:ordinal_number_eq[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D c.\n       \\<lbrakk>c \\<in> carrier D; y = ordinal_number (Iod D (segment D c));\n        Worder (Iod D (segment D c));\n        ordinal_number (Iod D (segment D c)) \\<in> ODnums;\n        ordinal_number (Iod D (segment D c)) \\<sqsubset>\n        ordinal_number (Iod D (segment D c));\n        x = ordinal_number (Iod D (segment D c)); Worder D;\n        D \\<in> ordinal_number (Iod D (segment D c));\n        ord_equiv D (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> False", "(* ord_equiv got *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D c.\n       \\<lbrakk>c \\<in> carrier D; y = ordinal_number (Iod D (segment D c));\n        Worder (Iod D (segment D c));\n        ordinal_number (Iod D (segment D c)) \\<in> ODnums;\n        ordinal_number (Iod D (segment D c)) \\<sqsubset>\n        ordinal_number (Iod D (segment D c));\n        x = ordinal_number (Iod D (segment D c)); Worder D;\n        D \\<in> ordinal_number (Iod D (segment D c));\n        ord_equiv D (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = D and a = c in Worder.nonequiv_segment, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D c.\n       \\<lbrakk>c \\<in> carrier D; y = ordinal_number (Iod D (segment D c));\n        Worder (Iod D (segment D c));\n        ordinal_number (Iod D (segment D c)) \\<in> ODnums;\n        ordinal_number (Iod D (segment D c)) \\<sqsubset>\n        ordinal_number (Iod D (segment D c));\n        x = ordinal_number (Iod D (segment D c)); Worder D;\n        D \\<in> ordinal_number (Iod D (segment D c));\n        ord_equiv D (Iod D (segment D c));\n        \\<not> ord_equiv D (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> False", "(**** this is the key lemma ****)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D c.\n       \\<lbrakk>c \\<in> carrier D; y = ordinal_number (Iod D (segment D c));\n        Worder (Iod D (segment D c));\n        ordinal_number (Iod D (segment D c)) \\<in> ODnums;\n        ordinal_number (Iod D (segment D c)) \\<sqsubset>\n        ordinal_number (Iod D (segment D c));\n        x = ordinal_number (Iod D (segment D c)); Worder D;\n        D \\<in> ordinal_number (Iod D (segment D c));\n        ord_equiv D (Iod D (segment D c));\n        \\<not> ord_equiv D (Iod D (segment D c))\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_ODord:\"\\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b\\<rbrakk> \\<Longrightarrow> \\<not> (b \\<sqsubseteq> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b\\<rbrakk>\n    \\<Longrightarrow> \\<not> b \\<sqsubseteq> a", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b;\n     b \\<sqsubseteq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:ODord_le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b;\n     b = a \\<or> b \\<sqsubset> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac x = a and y = b in ODord_less_not_eq,\n          simp add:ODnods_def, simp add:ODnods_def, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b;\n     b = a \\<or> b \\<sqsubset> a; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b; a \\<noteq> b;\n     b = a\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b; a \\<noteq> b;\n     b \\<sqsubset> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b; a \\<noteq> b;\n     b \\<sqsubset> a\\<rbrakk>\n    \\<Longrightarrow> False", "(** Show that ord_equiv to segment each other does not happen **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b; a \\<noteq> b;\n     b \\<sqsubset> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule ordinal_numberTr1_1[of a],\n        frule ordinal_numberTr1_1[of b], (erule exE)+, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D Da.\n       \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b;\n        a \\<noteq> b; b \\<sqsubset> a; Worder D; D \\<in> a; Worder Da;\n        Da \\<in> b\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = D in ordinal_numberTr5[of a], assumption,\n        frule_tac D = Da in ordinal_numberTr5[of b], assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D Da.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number D \\<noteq> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D; Worder D;\n        D \\<in> ordinal_number D; Worder Da; Da \\<in> ordinal_number Da;\n        a = ordinal_number D; b = ordinal_number Da\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = D and E = Da in ODordTr1, assumption+,\n        frule_tac D = Da and E = D in ODordTr1, assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D Da.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        \\<exists>b\\<in>carrier Da. ord_equiv D (Iod Da (segment Da b));\n        ordinal_number D \\<noteq> ordinal_number Da;\n        \\<exists>b\\<in>carrier D. ord_equiv Da (Iod D (segment D b));\n        Worder D; D \\<in> ordinal_number D; Worder Da;\n        Da \\<in> ordinal_number Da; a = ordinal_number D;\n        b = ordinal_number Da;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = D and E = Da in Worder.Word_compareTr3, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D Da.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        \\<exists>b\\<in>carrier Da. ord_equiv D (Iod Da (segment Da b));\n        ordinal_number D \\<noteq> ordinal_number Da;\n        \\<exists>b\\<in>carrier D. ord_equiv Da (Iod D (segment D b));\n        Worder D; D \\<in> ordinal_number D; Worder Da;\n        Da \\<in> ordinal_number Da; a = ordinal_number D;\n        b = ordinal_number Da;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier D.\n                            ord_equiv (Iod D (segment D a)) Da\n 2. \\<And>D Da.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        \\<exists>b\\<in>carrier Da. ord_equiv D (Iod Da (segment Da b));\n        ordinal_number D \\<noteq> ordinal_number Da;\n        \\<exists>b\\<in>carrier D. ord_equiv Da (Iod D (segment D b));\n        Worder D; D \\<in> ordinal_number D; Worder Da;\n        Da \\<in> ordinal_number Da; a = ordinal_number D;\n        b = ordinal_number Da;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D; False\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule bexE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D Da ba baa.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        ordinal_number D \\<noteq> ordinal_number Da; Worder D;\n        D \\<in> ordinal_number D; Worder Da; Da \\<in> ordinal_number Da;\n        a = ordinal_number D; b = ordinal_number Da;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D; ba \\<in> carrier Da;\n        ord_equiv D (Iod Da (segment Da ba)); baa \\<in> carrier D;\n        ord_equiv Da (Iod D (segment D baa))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier D.\n                            ord_equiv (Iod D (segment D a)) Da\n 2. \\<And>D Da.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        \\<exists>b\\<in>carrier Da. ord_equiv D (Iod Da (segment Da b));\n        ordinal_number D \\<noteq> ordinal_number Da;\n        \\<exists>b\\<in>carrier D. ord_equiv Da (Iod D (segment D b));\n        Worder D; D \\<in> ordinal_number D; Worder Da;\n        Da \\<in> ordinal_number Da; a = ordinal_number D;\n        b = ordinal_number Da;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D; False\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac D = D and a = baa in Worder.segment_Worder,\n        frule_tac S = Da and T = \"Iod D (segment D baa)\" in Worder_sym,\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>D Da ba baa.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        ordinal_number D \\<noteq> ordinal_number Da; Worder D;\n        D \\<in> ordinal_number D; Worder Da; Da \\<in> ordinal_number Da;\n        a = ordinal_number D; b = ordinal_number Da;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D; ba \\<in> carrier Da;\n        ord_equiv D (Iod Da (segment Da ba)); baa \\<in> carrier D;\n        ord_equiv Da (Iod D (segment D baa));\n        Worder (Iod D (segment D baa));\n        ord_equiv (Iod D (segment D baa)) Da\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier D.\n                            ord_equiv (Iod D (segment D a)) Da\n 2. \\<And>D Da.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        \\<exists>b\\<in>carrier Da. ord_equiv D (Iod Da (segment Da b));\n        ordinal_number D \\<noteq> ordinal_number Da;\n        \\<exists>b\\<in>carrier D. ord_equiv Da (Iod D (segment D b));\n        Worder D; D \\<in> ordinal_number D; Worder Da;\n        Da \\<in> ordinal_number Da; a = ordinal_number D;\n        b = ordinal_number Da;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D; False\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>D Da.\n       \\<lbrakk>ordinal_number D \\<in> ODnums;\n        ordinal_number Da \\<in> ODnums;\n        \\<exists>b\\<in>carrier Da. ord_equiv D (Iod Da (segment Da b));\n        ordinal_number D \\<noteq> ordinal_number Da;\n        \\<exists>b\\<in>carrier D. ord_equiv Da (Iod D (segment D b));\n        Worder D; D \\<in> ordinal_number D; Worder Da;\n        Da \\<in> ordinal_number Da; a = ordinal_number D;\n        b = ordinal_number Da;\n        ordinal_number D \\<sqsubset> ordinal_number Da;\n        ordinal_number Da \\<sqsubset> ordinal_number D; False\\<rbrakk>\n       \\<Longrightarrow> False", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Order_ODnods:\"Order ODnods\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order ODnods", "apply (rule Order.intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. rel ODnods \\<subseteq> carrier ODnods \\<times> carrier ODnods\n 2. \\<And>a.\n       a \\<in> carrier ODnods \\<Longrightarrow> (a, a) \\<in> rel ODnods\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        (a, b) \\<in> rel ODnods; (b, a) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        c \\<in> carrier ODnods; (a, b) \\<in> rel ODnods;\n        (b, c) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel ODnods", "apply (simp add:ODnods_def ODrel_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       a \\<in> carrier ODnods \\<Longrightarrow> (a, a) \\<in> rel ODnods\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        (a, b) \\<in> rel ODnods; (b, a) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        c \\<in> carrier ODnods; (a, b) \\<in> rel ODnods;\n        (b, c) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel ODnods", "apply (simp add:ODnods_def ODrel_def, simp add:ODord_le_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        (a, b) \\<in> rel ODnods; (b, a) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        c \\<in> carrier ODnods; (a, b) \\<in> rel ODnods;\n        (b, c) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel ODnods", "apply (simp add:ODnods_def ODrel_def, simp add:ODord_le_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a = b \\<or> a \\<sqsubset> b;\n        b = a \\<or> b \\<sqsubset> a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        c \\<in> carrier ODnods; (a, b) \\<in> rel ODnods;\n        (b, c) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel ODnods", "apply (erule disjE, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; b = a \\<or> b \\<sqsubset> a;\n        a \\<sqsubset> b\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        c \\<in> carrier ODnods; (a, b) \\<in> rel ODnods;\n        (b, c) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel ODnods", "apply (erule disjE, rule sym, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b;\n        b \\<sqsubset> a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        c \\<in> carrier ODnods; (a, b) \\<in> rel ODnods;\n        (b, c) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel ODnods", "apply (frule_tac a = a and b = b in not_ODord, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; a \\<sqsubset> b;\n        b \\<sqsubset> a; \\<not> b \\<sqsubseteq> a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        c \\<in> carrier ODnods; (a, b) \\<in> rel ODnods;\n        (b, c) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel ODnods", "apply (simp add:ODord_le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        c \\<in> carrier ODnods; (a, b) \\<in> rel ODnods;\n        (b, c) \\<in> rel ODnods\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel ODnods", "apply (simp add:ODnods_def ODrel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> ODnums; b \\<in> ODnums; c \\<in> ODnums;\n        a \\<sqsubseteq> b; b \\<sqsubseteq> c\\<rbrakk>\n       \\<Longrightarrow> a \\<sqsubseteq> c", "apply (rule_tac X = a and Y = b and Z = c in ODord_le_trans, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Torder_ODnods:\"Torder ODnods\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Torder ODnods", "apply (rule Torder.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Order ODnods\n 2. Torder_axioms ODnods", "apply (cut_tac Order_ODnods, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Torder_axioms ODnods", "(*** tordered set ***)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Torder_axioms ODnods", "apply (simp add:Torder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       a \\<in> carrier ODnods \\<longrightarrow>\n       (\\<forall>b.\n           b \\<in> carrier ODnods \\<longrightarrow>\n           a \\<preceq>\\<^bsub>ODnods\\<^esub> b \\<or>\n           b \\<preceq>\\<^bsub>ODnods\\<^esub> a)", "apply ((rule allI, rule impI)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>ODnods\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>ODnods\\<^esub> a", "apply (cut_tac Order_ODnods)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        Order ODnods\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>ODnods\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>ODnods\\<^esub> a", "apply (subst Order.le_imp_less_or_eq[of \"ODnods\"], assumption+,\n       subst Order.le_imp_less_or_eq[of \"ODnods\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier ODnods; b \\<in> carrier ODnods;\n        Order ODnods\\<rbrakk>\n       \\<Longrightarrow> (a \\<prec>\\<^bsub>ODnods\\<^esub> b \\<or>\n                          a = b) \\<or>\n                         b \\<prec>\\<^bsub>ODnods\\<^esub> a \\<or> b = a", "apply (simp add:ODnods_less,\n       frule_tac X = a and Y = b in ordinal_number_ord, assumption+,\n         blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  ODNmap :: \"'a Order \\<Rightarrow> ('a Order) set \\<Rightarrow> 'a\" where\n  \"ODNmap D y = (SOME z. (z \\<in> carrier D \\<and> \n                        (\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D z)))))\""], ["", "lemma ODNmap_mem:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums; ODord y x\\<rbrakk> \\<Longrightarrow> \n      ODNmap D y \\<in> carrier D \\<and> \n             (\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D (ODNmap D y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> ODNmap D y \\<in> carrier D \\<and>\n                      (\\<forall>Y\\<in>y.\n                          ord_equiv Y (Iod D (segment D (ODNmap D y))))", "apply (frule ODnum_segmentTr [of \"D\" \"x\" \"y\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> x;\n     \\<exists>c.\n        c \\<in> carrier D \\<and>\n        (\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D c)))\\<rbrakk>\n    \\<Longrightarrow> ODNmap D y \\<in> carrier D \\<and>\n                      (\\<forall>Y\\<in>y.\n                          ord_equiv Y (Iod D (segment D (ODNmap D y))))", "apply (simp add:ODNmap_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> ordinal_number D;\n     \\<exists>c.\n        c \\<in> carrier D \\<and>\n        (\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D c)))\\<rbrakk>\n    \\<Longrightarrow> (SOME z.\n                          z \\<in> carrier D \\<and>\n                          (\\<forall>Y\\<in>y.\n                              ord_equiv Y (Iod D (segment D z))))\n                      \\<in> carrier D \\<and>\n                      (\\<forall>Y\\<in>y.\n                          ord_equiv Y\n                           (Iod D\n                             (segment D\n                               (SOME z.\n                                   z \\<in> carrier D \\<and>\n                                   (\\<forall>Y\\<in>y.\n ord_equiv Y (Iod D (segment D z)))))))", "apply (rule someI2_ex, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODNmapTr1:\"\\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums; ODord y x\\<rbrakk> \\<Longrightarrow> \n                  y = ordinal_number (Iod D (segment D (ODNmap D y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> y = ordinal_number (Iod D (segment D (ODNmap D y)))", "apply (frule ODNmap_mem [of \"D\" \"x\" \"y\"], assumption+, erule conjE,\n       frule ODnum_segmentTr1 [of \"D\" \"x\" \"y\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n     y \\<sqsubset> x; ODNmap D y \\<in> carrier D;\n     \\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D (ODNmap D y)));\n     \\<exists>c.\n        c \\<in> carrier D \\<and>\n        y = ordinal_number (Iod D (segment D c))\\<rbrakk>\n    \\<Longrightarrow> y = ordinal_number (Iod D (segment D (ODNmap D y)))", "apply (erule exE, erule conjE,\n        cut_tac D = D and a = c in Worder.segment_Worder, assumption+,\n        frule_tac D = \"Iod D (segment D c)\" and x = y in ordinal_numberTr2,\n            assumption+,\n        frule_tac x = \"Iod D (segment D c)\" in bspec, assumption,\n         thin_tac \"\\<forall>Y\\<in>y. ord_equiv Y (Iod D (segment D (ODNmap D y)))\",\n        cut_tac a = \"ODNmap D y\" in Worder.segment_Worder[of \"D\"],\n         assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> x; ODNmap D y \\<in> carrier D; c \\<in> carrier D;\n        y = ordinal_number (Iod D (segment D c));\n        Worder (Iod D (segment D c)); Iod D (segment D c) \\<in> y;\n        ord_equiv (Iod D (segment D c)) (Iod D (segment D (ODNmap D y)));\n        Worder (Iod D (segment D (ODNmap D y)))\\<rbrakk>\n       \\<Longrightarrow> y = ordinal_number (Iod D (segment D (ODNmap D y)))", "apply (frule_tac D = \"Iod D (segment D c)\" and E = \"Iod D (segment D (ODNmap D y))\" in ordinal_number_eq, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>Worder D; x = ordinal_number D; y \\<in> ODnums;\n        y \\<sqsubset> x; ODNmap D y \\<in> carrier D; c \\<in> carrier D;\n        y = ordinal_number (Iod D (segment D c));\n        Worder (Iod D (segment D c)); Iod D (segment D c) \\<in> y;\n        ord_equiv (Iod D (segment D c)) (Iod D (segment D (ODNmap D y)));\n        Worder (Iod D (segment D (ODNmap D y)));\n        ord_equiv (Iod D (segment D c)) (Iod D (segment D (ODNmap D y))) =\n        (ordinal_number (Iod D (segment D c)) =\n         ordinal_number (Iod D (segment D (ODNmap D y))))\\<rbrakk>\n       \\<Longrightarrow> y = ordinal_number (Iod D (segment D (ODNmap D y)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODNmap_self:\"\\<lbrakk>Worder D; c \\<in> carrier D;\n       a = ordinal_number (Iod D (segment D c))\\<rbrakk> \\<Longrightarrow> ODNmap D a = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c))\\<rbrakk>\n    \\<Longrightarrow> ODNmap D a = c", "apply (simp add:ODNmap_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c))\\<rbrakk>\n    \\<Longrightarrow> (SOME z.\n                          z \\<in> carrier D \\<and>\n                          (\\<forall>Y\\<in>ordinal_number\n     (Iod D (segment D c)).\n                              ord_equiv Y (Iod D (segment D z)))) =\n                      c", "apply (rule someI2_ex, rule ex_conjI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Y\\<in>ordinal_number (Iod D (segment D c)).\n                         ord_equiv Y (Iod D (segment D c))\n 2. \\<And>x.\n       \\<lbrakk>Worder D; c \\<in> carrier D;\n        a = ordinal_number (Iod D (segment D c));\n        x \\<in> carrier D \\<and>\n        (\\<forall>Y\\<in>ordinal_number (Iod D (segment D c)).\n            ord_equiv Y (Iod D (segment D x)))\\<rbrakk>\n       \\<Longrightarrow> x = c", "apply (rule ballI, \n        cut_tac Worder.segment_Worder[of \"D\" \"c\"], \n        rule_tac X = Y in mem_ordinal_number_equiv[of \"Iod D (segment D c)\"],\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; c \\<in> carrier D;\n        a = ordinal_number (Iod D (segment D c));\n        x \\<in> carrier D \\<and>\n        (\\<forall>Y\\<in>ordinal_number (Iod D (segment D c)).\n            ord_equiv Y (Iod D (segment D x)))\\<rbrakk>\n       \\<Longrightarrow> x = c", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; c \\<in> carrier D;\n        a = ordinal_number (Iod D (segment D c)); x \\<in> carrier D;\n        \\<forall>Y\\<in>ordinal_number (Iod D (segment D c)).\n           ord_equiv Y (Iod D (segment D x))\\<rbrakk>\n       \\<Longrightarrow> x = c", "apply (cut_tac Worder.segment_Worder[of \"D\" \"c\"], \n        frule ordinal_inc_self[of \"Iod D (segment D c)\"],\n        frule_tac x = \"Iod D (segment D c)\" in bspec, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; c \\<in> carrier D;\n        a = ordinal_number (Iod D (segment D c)); x \\<in> carrier D;\n        \\<forall>Y\\<in>ordinal_number (Iod D (segment D c)).\n           ord_equiv Y (Iod D (segment D x));\n        Worder (Iod D (segment D c));\n        Iod D (segment D c) \\<in> ordinal_number (Iod D (segment D c));\n        ord_equiv (Iod D (segment D c)) (Iod D (segment D x))\\<rbrakk>\n       \\<Longrightarrow> x = c\n 2. \\<And>x.\n       \\<lbrakk>Worder D; c \\<in> carrier D;\n        a = ordinal_number (Iod D (segment D c)); x \\<in> carrier D;\n        \\<forall>Y\\<in>ordinal_number (Iod D (segment D c)).\n           ord_equiv Y (Iod D (segment D x))\\<rbrakk>\n       \\<Longrightarrow> Worder D", "apply (frule_tac b = x in Worder.segment_unique[of \"D\" \"c\" _], assumption+,\n        rule sym, assumption, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODord_ODNmap_less:\"\\<lbrakk>Worder D; c \\<in> carrier D;\n      a = ordinal_number (Iod D (segment D c)); d \\<in> carrier D; \n      b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b\\<rbrakk> \\<Longrightarrow>  \n      ODNmap D a \\<prec>\\<^bsub>D\\<^esub> (ODNmap D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c)); d \\<in> carrier D;\n     b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b\\<rbrakk>\n    \\<Longrightarrow> ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b", "apply (frule ODNmap_self [of \"D\" \"c\" \"a\"], assumption+,\n       frule ODNmap_self [of \"D\" \"d\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c)); d \\<in> carrier D;\n     b = ordinal_number (Iod D (segment D d)); a \\<sqsubset> b;\n     ODNmap D a = c; ODNmap D b = d\\<rbrakk>\n    \\<Longrightarrow> ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c)); d \\<in> carrier D;\n     b = ordinal_number (Iod D (segment D d));\n     ordinal_number (Iod D (segment D c)) \\<sqsubset>\n     ordinal_number (Iod D (segment D d));\n     ODNmap D (ordinal_number (Iod D (segment D c))) = c;\n     ODNmap D (ordinal_number (Iod D (segment D d))) = d\\<rbrakk>\n    \\<Longrightarrow> c \\<prec>\\<^bsub>D\\<^esub> d", "apply (subst ord_less_ODord[of D c d a b], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; c \\<in> carrier D;\n     a = ordinal_number (Iod D (segment D c)); d \\<in> carrier D;\n     b = ordinal_number (Iod D (segment D d));\n     ordinal_number (Iod D (segment D c)) \\<sqsubset>\n     ordinal_number (Iod D (segment D d));\n     ODNmap D (ordinal_number (Iod D (segment D c))) = c;\n     ODNmap D (ordinal_number (Iod D (segment D d))) = d\\<rbrakk>\n    \\<Longrightarrow> a \\<sqsubset> b", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODNmap_mem1:\" \\<lbrakk>Worder D; y \\<in> segment ODnods (ordinal_number D)\\<rbrakk>\n         \\<Longrightarrow> ODNmap D y \\<in> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; y \\<in> segment ODnods (ordinal_number D)\\<rbrakk>\n    \\<Longrightarrow> ODNmap D y \\<in> carrier D", "apply (frule_tac D = D and x = \"ordinal_number D\" and y = y in ODNmap_mem,\n       simp, \n       frule ordinal_number_mem_carrier_ODnods[of \"D\"],\n       simp add:ODnods_def segment_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; y \\<in> segment ODnods (ordinal_number D)\\<rbrakk>\n    \\<Longrightarrow> y \\<sqsubset> ordinal_number D\n 2. \\<lbrakk>Worder D; y \\<in> segment ODnods (ordinal_number D);\n     ODNmap D y \\<in> carrier D \\<and>\n     (\\<forall>Y\\<in>y.\n         ord_equiv Y (Iod D (segment D (ODNmap D y))))\\<rbrakk>\n    \\<Longrightarrow> ODNmap D y \\<in> carrier D", "apply (simp add:segment_def,\n        frule ordinal_number_mem_carrier_ODnods[of \"D\"], simp,\n        erule conjE, simp add:ODnods_def oless_def ole_def ODrel_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; ordinal_number D \\<in> ODnums;\n     y \\<in> ODnums \\<and>\n     y \\<sqsubseteq> ordinal_number D \\<and>\n     y \\<noteq> ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> y \\<sqsubset> ordinal_number D\n 2. \\<lbrakk>Worder D; y \\<in> segment ODnods (ordinal_number D);\n     ODNmap D y \\<in> carrier D \\<and>\n     (\\<forall>Y\\<in>y.\n         ord_equiv Y (Iod D (segment D (ODNmap D y))))\\<rbrakk>\n    \\<Longrightarrow> ODNmap D y \\<in> carrier D", "apply (simp add:ODord_le_def, blast, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODnods_segment_inc_ODord:\"\\<lbrakk>Worder D; \n       y \\<in> segment ODnods (ordinal_number D)\\<rbrakk> \\<Longrightarrow> ODord y (ordinal_number D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; y \\<in> segment ODnods (ordinal_number D)\\<rbrakk>\n    \\<Longrightarrow> y \\<sqsubset> ordinal_number D", "apply (simp add:segment_def,\n        frule ordinal_number_mem_carrier_ODnods[of \"D\"], simp,\n        erule conjE, simp add:ODnods_def oless_def ole_def ODrel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; ordinal_number D \\<in> ODnums;\n     y \\<in> ODnums \\<and>\n     y \\<sqsubseteq> ordinal_number D \\<and>\n     y \\<noteq> ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> y \\<sqsubset> ordinal_number D", "apply ((erule conjE)+, simp add:ODord_le_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma restict_ODNmap_func:\"\\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk> \\<Longrightarrow>\n      restrict (ODNmap D) (segment ODnods (ordinal_number D))\n               \\<in> segment ODnods (ordinal_number D) \\<rightarrow> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> restrict (ODNmap D)\n                       (segment ODnods (ordinal_number D))\n                      \\<in> segment ODnods (ordinal_number D) \\<rightarrow>\n                            carrier D", "apply (cut_tac Order_ODnods,\n       frule Order.Iod_carr_segment[of \"ODnods\" \"ordinal_number D\"],\n       frule Order.segment_sub[of \"ODnods\" \"ordinal_number D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> restrict (ODNmap D)\n                       (segment ODnods (ordinal_number D))\n                      \\<in> segment ODnods (ordinal_number D) \\<rightarrow>\n                            carrier D", "apply (rule Pi_I, simp,\n        (frule Order.Iod_carr_segment[of ODnods \"ordinal_number D\"], \n         simp,\n         thin_tac \"carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n                            segment ODnods (ordinal_number D) \"),\n        rule ODNmap_mem1[of D], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODNmap_ord_isom:\"\\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>  \\<Longrightarrow> \n             ord_isom (Iod ODnods (segment ODnods x)) D \n      (\\<lambda>x\\<in>(carrier (Iod ODnods (segment ODnods x))). (ODNmap D x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod ODnods (segment ODnods x)) D\n                       (restrict (ODNmap D)\n                         (carrier (Iod ODnods (segment ODnods x))))", "apply (cut_tac Order_ODnods,\n       frule Order.Iod_carr_segment[of \"ODnods\" \"ordinal_number D\"],\n       frule ordinal_number_mem_carrier_ODnods[of D],\n       frule Order.segment_sub[of \"ODnods\" \"ordinal_number D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod ODnods (segment ODnods x)) D\n                       (restrict (ODNmap D)\n                         (carrier (Iod ODnods (segment ODnods x))))", "(* above items are preliminary *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod ODnods (segment ODnods x)) D\n                       (restrict (ODNmap D)\n                         (carrier (Iod ODnods (segment ODnods x))))", "apply (simp add:ord_isom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> ord_inj\n                       (Iod ODnods (segment ODnods (ordinal_number D))) D\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D))) \\<and>\n                      surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> ord_inj\n                       (Iod ODnods (segment ODnods (ordinal_number D))) D\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (simp add:ord_inj_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> restrict (ODNmap D)\n                       (segment ODnods (ordinal_number D))\n                      \\<in> segment ODnods (ordinal_number D) \\<rightarrow>\n                            carrier D \\<and>\n                      inj_on (ODNmap D)\n                       (segment ODnods (ordinal_number D)) \\<and>\n                      (\\<forall>a\\<in>segment ODnods (ordinal_number D).\n                          \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                             a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                             b =\n                             ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b)\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (simp add:restict_ODNmap_func[of D x])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> inj_on (ODNmap D)\n                       (segment ODnods (ordinal_number D)) \\<and>\n                      (\\<forall>a\\<in>segment ODnods (ordinal_number D).\n                          \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                             a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                             b =\n                             ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b)\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> inj_on (ODNmap D) (segment ODnods (ordinal_number D))\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 3. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (subst inj_on_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>y\\<in>segment ODnods (ordinal_number D).\n                            ODNmap D x = ODNmap D y \\<longrightarrow> x = y\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 3. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "(* show inj_on *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>y\\<in>segment ODnods (ordinal_number D).\n                            ODNmap D x = ODNmap D y \\<longrightarrow> x = y\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 3. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply ((rule ballI)+, rule impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D);\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D);\n        ODNmap D xa = ODNmap D y\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 3. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "(* show xa and y is the ordinal_number of\n        segments of D *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D);\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D);\n        ODNmap D xa = ODNmap D y\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 3. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (thin_tac \"carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D);\n        ODNmap D xa = ODNmap D y\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 3. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac y = xa in ODnods_segment_inc_ODord[of D], assumption+,\n         frule_tac y = y in ODnods_segment_inc_ODord[of D], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D); ODNmap D xa = ODNmap D y;\n        xa \\<sqsubset> ordinal_number D;\n        y \\<sqsubset> ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 3. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac y = y in ODNmapTr1[of D x], assumption+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D); ODNmap D xa = ODNmap D y;\n        xa \\<sqsubset> ordinal_number D;\n        y \\<sqsubset> ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> y \\<in> ODnums\n 2. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D); ODNmap D xa = ODNmap D y;\n        xa \\<sqsubset> ordinal_number D;\n        y \\<sqsubset> ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> y \\<sqsubset> x\n 3. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D); ODNmap D xa = ODNmap D y;\n        xa \\<sqsubset> ordinal_number D; y \\<sqsubset> ordinal_number D;\n        y = ordinal_number (Iod D (segment D (ODNmap D y)))\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 4. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 5. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac c = y in subsetD[of \"segment ODnods (ordinal_number D)\"\n                  \"carrier ODnods\"], assumption+, simp add:carr_ODnods,\n                   simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D); ODNmap D xa = ODNmap D y;\n        xa \\<sqsubset> ordinal_number D; y \\<sqsubset> ordinal_number D;\n        y = ordinal_number (Iod D (segment D (ODNmap D y)))\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 3. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac y = xa in ODNmapTr1[of D x], assumption+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D); ODNmap D xa = ODNmap D y;\n        xa \\<sqsubset> ordinal_number D; y \\<sqsubset> ordinal_number D;\n        y = ordinal_number (Iod D (segment D (ODNmap D y)))\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> ODnums\n 2. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D); ODNmap D xa = ODNmap D y;\n        xa \\<sqsubset> ordinal_number D; y \\<sqsubset> ordinal_number D;\n        y = ordinal_number (Iod D (segment D (ODNmap D y)))\\<rbrakk>\n       \\<Longrightarrow> xa \\<sqsubset> x\n 3. \\<And>xa y.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        xa \\<in> segment ODnods (ordinal_number D);\n        y \\<in> segment ODnods (ordinal_number D); ODNmap D xa = ODNmap D y;\n        xa \\<sqsubset> ordinal_number D; y \\<sqsubset> ordinal_number D;\n        y = ordinal_number (Iod D (segment D (ODNmap D y)));\n        xa = ordinal_number (Iod D (segment D (ODNmap D xa)))\\<rbrakk>\n       \\<Longrightarrow> xa = y\n 4. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 5. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac c = xa in subsetD[of \"segment ODnods (ordinal_number D)\"\n                   \"carrier ODnods\"], assumption+, simp add:carr_ODnods,\n                   simp, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>segment ODnods (ordinal_number D).\n                         \\<forall>b\\<in>segment ODnods (ordinal_number D).\n                            a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                            b =\n                            ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (rule ballI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D);\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D)\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (thin_tac \"carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D)\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac y = a in ODnods_segment_inc_ODord[of D], assumption+,\n         frule_tac y = b in ODnods_segment_inc_ODord[of D], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D;\n        b \\<sqsubset> ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac y = a in ODNmapTr1[of D x], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D;\n        b \\<sqsubset> ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> a \\<in> ODnums\n 2. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D;\n        b \\<sqsubset> ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> a \\<sqsubset> x\n 3. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)))\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 4. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac c = a in subsetD[of \"segment ODnods (ordinal_number D)\"\n                  \"carrier ODnods\"], assumption+, simp add:carr_ODnods,\n                   simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)))\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac y = b in ODNmapTr1[of D x], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)))\\<rbrakk>\n       \\<Longrightarrow> b \\<in> ODnums\n 2. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)))\\<rbrakk>\n       \\<Longrightarrow> b \\<sqsubset> x\n 3. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)))\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 4. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac c = b in subsetD[of \"segment ODnods (ordinal_number D)\"\n                   \"carrier ODnods\"], assumption+, simp add:carr_ODnods,\n                   simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)))\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac c = \"ODNmap D a\" and d = \"ODNmap D b\" and a = a and b = b in\n             ord_less_ODord[of D],\n         frule_tac  x = x and y = a in ODNmap_mem[of D], assumption, \n         frule_tac c = a in subsetD[of \"segment ODnods (ordinal_number D)\"\n                  \"carrier ODnods\"], assumption+, simp add:carr_ODnods,   \n         simp, simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)))\\<rbrakk>\n       \\<Longrightarrow> ODNmap D b \\<in> carrier D\n 2. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)))\\<rbrakk>\n       \\<Longrightarrow> a = ordinal_number (Iod D (segment D (ODNmap D a)))\n 3. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)))\\<rbrakk>\n       \\<Longrightarrow> b = ordinal_number (Iod D (segment D (ODNmap D b)))\n 4. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)));\n        ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b =\n        a \\<sqsubset> b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 5. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac  x = x and y = b in ODNmap_mem[of D], assumption, \n         frule_tac c = b in subsetD[of \"segment ODnods (ordinal_number D)\"\n                  \"carrier ODnods\"], assumption+, simp add:carr_ODnods,   \n         simp, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)))\\<rbrakk>\n       \\<Longrightarrow> a = ordinal_number (Iod D (segment D (ODNmap D a)))\n 2. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)))\\<rbrakk>\n       \\<Longrightarrow> b = ordinal_number (Iod D (segment D (ODNmap D b)))\n 3. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)));\n        ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b =\n        a \\<sqsubset> b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b\n 4. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply simp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)));\n        ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b =\n        a \\<sqsubset> b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         a \\<sqsubset> b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (frule_tac c = a in subsetD[of \"segment ODnods (ordinal_number D)\"\n                  \"carrier ODnods\"], assumption+,\n          frule_tac c = b in subsetD[of \"segment ODnods (ordinal_number D)\"\n                  \"carrier ODnods\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)));\n        ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b = a \\<sqsubset> b;\n        a \\<in> carrier ODnods; b \\<in> carrier ODnods\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod ODnods (segment ODnods (ordinal_number D))\\<^esub>\n                         b =\n                         a \\<sqsubset> b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (simp add:Order.Iod_less[of \"ODnods\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        a \\<in> segment ODnods (ordinal_number D);\n        b \\<in> segment ODnods (ordinal_number D);\n        a \\<sqsubset> ordinal_number D; b \\<sqsubset> ordinal_number D;\n        a = ordinal_number (Iod D (segment D (ODNmap D a)));\n        b = ordinal_number (Iod D (segment D (ODNmap D b)));\n        ODNmap D a \\<prec>\\<^bsub>D\\<^esub> ODNmap D b = a \\<sqsubset> b;\n        a \\<in> carrier ODnods; b \\<in> carrier ODnods\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>ODnods\\<^esub> b = a \\<sqsubset> b\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (simp add:ODnods_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "(** order_preserving proved **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (restrict (ODNmap D)\n                         (segment ODnods (ordinal_number D)))\n                       (segment ODnods (ordinal_number D)) (carrier D)", "apply (rule surj_to_test)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> restrict (ODNmap D)\n                       (segment ODnods (ordinal_number D))\n                      \\<in> segment ODnods (ordinal_number D) \\<rightarrow>\n                            carrier D\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>carrier D.\n                         \\<exists>a\\<in>segment ODnods (ordinal_number D).\n                            restrict (ODNmap D)\n                             (segment ODnods (ordinal_number D)) a =\n                            b", "(* show surj_to *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> restrict (ODNmap D)\n                       (segment ODnods (ordinal_number D))\n                      \\<in> segment ODnods (ordinal_number D) \\<rightarrow>\n                            carrier D\n 2. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>carrier D.\n                         \\<exists>a\\<in>segment ODnods (ordinal_number D).\n                            restrict (ODNmap D)\n                             (segment ODnods (ordinal_number D)) a =\n                            b", "apply (simp add:restict_ODNmap_func)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n     carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n     segment ODnods (ordinal_number D);\n     ordinal_number D \\<in> carrier ODnods;\n     segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>carrier D.\n                         \\<exists>a\\<in>segment ODnods (ordinal_number D).\n                            restrict (ODNmap D)\n                             (segment ODnods (ordinal_number D)) a =\n                            b", "apply (rule ballI,\n           cut_tac D = D and a = b in Worder.segment_Worder, assumption+,\n           frule_tac D = \"Iod D (segment D b)\" in \n                                 ordinal_number_mem_carrier_ODnods,\n           frule_tac c = b and a = \"ordinal_number (Iod D (segment D b))\"\n            in ODNmap_self, assumption, simp,\n           frule_tac d = b in ODord[of D], assumption,\n           frule_tac a = \"ordinal_number (Iod D (segment D b))\" in \n            Order.segment_inc[of \"ODnods\" _ \"ordinal_number D\"], assumption+,\n           cut_tac x = \"ordinal_number (Iod D (segment D b))\" in \n                         ODnods_less[of _ \"ordinal_number D\"], assumption+,\n           simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D);\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        b \\<in> carrier D; Worder (Iod D (segment D b));\n        ordinal_number (Iod D (segment D b)) \\<in> carrier ODnods;\n        ODNmap D (ordinal_number (Iod D (segment D b))) = b;\n        ordinal_number (Iod D (segment D b)) \\<sqsubset> ordinal_number D;\n        ordinal_number (Iod D (segment D b))\n        \\<in> segment ODnods (ordinal_number D);\n        ordinal_number (Iod D (segment D b)) \\<prec>\\<^bsub>ODnods\\<^esub>\n        ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>segment ODnods (ordinal_number D).\n                            ODNmap D a = b", "apply (frule_tac c = b and a = \"ordinal_number (Iod D (segment D b))\" in\n            ODNmap_self[of D], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D);\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        b \\<in> carrier D; Worder (Iod D (segment D b));\n        ordinal_number (Iod D (segment D b)) \\<in> carrier ODnods;\n        ODNmap D (ordinal_number (Iod D (segment D b))) = b;\n        ordinal_number (Iod D (segment D b)) \\<sqsubset> ordinal_number D;\n        ordinal_number (Iod D (segment D b))\n        \\<in> segment ODnods (ordinal_number D);\n        ordinal_number (Iod D (segment D b)) \\<prec>\\<^bsub>ODnods\\<^esub>\n        ordinal_number D\\<rbrakk>\n       \\<Longrightarrow> ordinal_number (Iod D (segment D b)) =\n                         ordinal_number (Iod D (segment D b))\n 2. \\<And>b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D);\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        b \\<in> carrier D; Worder (Iod D (segment D b));\n        ordinal_number (Iod D (segment D b)) \\<in> carrier ODnods;\n        ODNmap D (ordinal_number (Iod D (segment D b))) = b;\n        ordinal_number (Iod D (segment D b)) \\<sqsubset> ordinal_number D;\n        ordinal_number (Iod D (segment D b))\n        \\<in> segment ODnods (ordinal_number D);\n        ordinal_number (Iod D (segment D b)) \\<prec>\\<^bsub>ODnods\\<^esub>\n        ordinal_number D;\n        ODNmap D (ordinal_number (Iod D (segment D b))) = b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>segment ODnods (ordinal_number D).\n                            ODNmap D a = b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Worder D; x = ordinal_number D; Order ODnods;\n        carrier (Iod ODnods (segment ODnods (ordinal_number D))) =\n        segment ODnods (ordinal_number D);\n        ordinal_number D \\<in> carrier ODnods;\n        segment ODnods (ordinal_number D) \\<subseteq> carrier ODnods;\n        b \\<in> carrier D; Worder (Iod D (segment D b));\n        ordinal_number (Iod D (segment D b)) \\<in> carrier ODnods;\n        ODNmap D (ordinal_number (Iod D (segment D b))) = b;\n        ordinal_number (Iod D (segment D b)) \\<sqsubset> ordinal_number D;\n        ordinal_number (Iod D (segment D b))\n        \\<in> segment ODnods (ordinal_number D);\n        ordinal_number (Iod D (segment D b)) \\<prec>\\<^bsub>ODnods\\<^esub>\n        ordinal_number D;\n        ODNmap D (ordinal_number (Iod D (segment D b))) = b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>segment ODnods (ordinal_number D).\n                            ODNmap D a = b", "apply  blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODnum_equiv_segment:\"\\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>  \\<Longrightarrow> \n         ord_equiv (Iod ODnods (segment ODnods x)) D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod ODnods (segment ODnods x)) D", "apply (simp add: ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; x = ordinal_number D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         ord_isom\n                          (Iod ODnods (segment ODnods (ordinal_number D))) D\n                          f", "apply (frule ODNmap_ord_isom[of \"D\" \"x\"], assumption+, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ODnods_sub_carrier:\"S \\<subseteq> ODnums \\<Longrightarrow> carrier (Iod ODnods S) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> ODnums \\<Longrightarrow> carrier (Iod ODnods S) = S", "by (simp add:Iod_def)"], ["", "lemma ODnum_sub_well_ordered:\"S \\<subseteq> ODnums \\<Longrightarrow> Worder (Iod ODnods S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> ODnums \\<Longrightarrow> Worder (Iod ODnods S)", "apply (cut_tac Torder_ODnods,\n       cut_tac Order_ODnods)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod ODnods S)", "apply (frule Torder.Iod_Torder[of \"ODnods\" S], \n        simp add:carr_ODnods)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n     Torder (Iod ODnods S)\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod ODnods S)", "apply intro_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n     Torder (Iod ODnods S)\\<rbrakk>\n    \\<Longrightarrow> Order (Iod ODnods S)\n 2. \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n     Torder (Iod ODnods S)\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (Iod ODnods S)\n 3. \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n     Torder (Iod ODnods S)\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod ODnods S)", "apply (simp add:Torder_def, simp add:Torder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n     Torder (Iod ODnods S)\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod ODnods S)", "apply (simp add:Worder_axioms_def,\n        rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> carrier (Iod ODnods S);\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "(** show existence of the minimum_element of X **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> carrier (Iod ODnods S);\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule Order.Iod_carrier[of ODnods S],\n        simp add:carr_ODnods, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac A = X in nonempty_ex, erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac c = x and A = X and B = S in subsetD, assumption+,\n        frule_tac c = x and A = S and B = ODnums in subsetD, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> ODnums\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac X = x in ordinal_numberTr1_1, erule exE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac D = D and x = x in ODnum_equiv_segment)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x\\<rbrakk>\n       \\<Longrightarrow> x = ordinal_number D\n 2. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (rule ordinal_numberTr4, assumption+, simp add:carr_ODnods, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac D = D and T = \"Iod ODnods (segment ODnods x)\" in\n        Worder.equiv_Worder1,\n        rule Order.Iod_Order[of ODnods], assumption,\n        rule Order.segment_sub, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac D = \"Iod ODnods (segment ODnods x)\" in Worder.ex_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa.\n               minimum_elem (Iod ODnods (segment ODnods x)) X xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (case_tac \"(segment ODnods x) \\<inter> X \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x\n 2. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        \\<not> segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac a = \"segment ODnods x \\<inter> X\" in forall_spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> segment ODnods x \\<inter> X\n                         \\<subseteq> carrier\n(Iod ODnods (segment ODnods x)) \\<and>\n                         segment ODnods x \\<inter> X \\<noteq> {}\n 2. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        segment ODnods x \\<inter> X \\<noteq> {};\n        \\<exists>xa.\n           minimum_elem (Iod ODnods (segment ODnods x))\n            (segment ODnods x \\<inter> X) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x\n 3. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        \\<not> segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (simp add:Order.Iod_carr_segment)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        segment ODnods x \\<inter> X \\<noteq> {};\n        \\<exists>xa.\n           minimum_elem (Iod ODnods (segment ODnods x))\n            (segment ODnods x \\<inter> X) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x\n 2. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        \\<not> segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (thin_tac \"\\<forall>X. X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and> X \\<noteq> {}\n         \\<longrightarrow>  (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X \\<noteq> {};\n        \\<exists>xa.\n           minimum_elem (Iod ODnods (segment ODnods x))\n            (segment ODnods x \\<inter> X) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x\n 2. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        \\<not> segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x D xa.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X \\<noteq> {};\n        minimum_elem (Iod ODnods (segment ODnods x))\n         (segment ODnods x \\<inter> X) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x\n 2. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        \\<not> segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (simp add:carr_ODnods[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x D xa.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X \\<noteq> {};\n        minimum_elem (Iod ODnods (segment ODnods x))\n         (segment ODnods x \\<inter> X) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x\n 2. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        \\<not> segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac A = X and B = S and C = \"carrier ODnods\" in subset_trans,\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x D xa.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X \\<noteq> {};\n        minimum_elem (Iod ODnods (segment ODnods x))\n         (segment ODnods x \\<inter> X) xa;\n        X \\<subseteq> carrier ODnods\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x\n 2. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        \\<not> segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac d = x and m = xa and X = X in \n        Torder.segment_minimum_minimum[of ODnods], assumption+,\n        simp add:Int_commute, \n        simp add:Order.minimum_elem_sub[of ODnods S], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa);\n        \\<not> segment ODnods x \\<inter> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (simp,\n       thin_tac \"\\<forall>X. X \\<subseteq> carrier (Iod ODnods (segment ODnods x)) \\<and> X \\<noteq> {} \\<longrightarrow>\n            (\\<exists>xa. minimum_elem (Iod ODnods (segment ODnods x)) X xa)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac A = \"segment ODnods x\" and B = X in no_meet2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> ODnums; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S; x \\<in> ODnums;\n        Worder D; D \\<in> x; ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {};\n        \\<forall>a\\<in>X. a \\<notin> segment ODnods x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (simp add:carr_ODnods[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {};\n        \\<forall>a\\<in>X. a \\<notin> segment ODnods x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac A = X and B = S and C = \"carrier ODnods\" in subset_trans,\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {};\n        \\<forall>a\\<in>X. a \\<notin> segment ODnods x;\n        X \\<subseteq> carrier ODnods\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (frule_tac A = X and B = S and C = \"carrier ODnods\" in subset_trans,\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {};\n        \\<forall>a\\<in>X. a \\<notin> segment ODnods x;\n        X \\<subseteq> carrier ODnods; X \\<subseteq> carrier ODnods\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod ODnods S) X x", "apply (simp add:Order.segment_inc[THEN sym, of ODnods])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {};\n        \\<forall>a\\<in>X. a \\<notin> segment ODnods x;\n        X \\<subseteq> carrier ODnods\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod ODnods S) X)", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {};\n        \\<forall>a\\<in>X. a \\<notin> segment ODnods x;\n        X \\<subseteq> carrier ODnods;\n        \\<forall>x. \\<not> minimum_elem (Iod ODnods S) X x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = x in spec,\n        thin_tac \"\\<forall>x. \\<not> minimum_elem (Iod ODnods S) X x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {};\n        \\<forall>a\\<in>X. a \\<notin> segment ODnods x;\n        X \\<subseteq> carrier ODnods;\n        \\<not> minimum_elem (Iod ODnods S) X x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:minimum_elem_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D xa.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {};\n        \\<forall>a\\<in>X. a \\<notin> segment ODnods x;\n        X \\<subseteq> carrier ODnods; xa \\<in> X;\n        \\<not> x \\<preceq>\\<^bsub>Iod ODnods S\\<^esub> xa\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = xa in bspec, assumption,\n        thin_tac \"\\<forall>a\\<in>X. a \\<notin> segment ODnods x\",\n        frule_tac c = xa and A = X and B = \"carrier ODnods\" in subsetD,\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D xa.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {}; X \\<subseteq> carrier ODnods;\n        xa \\<in> X; \\<not> x \\<preceq>\\<^bsub>Iod ODnods S\\<^esub> xa;\n        xa \\<notin> segment ODnods x; xa \\<in> carrier ODnods\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Order.segment_inc[of ODnods, THEN sym],\n        frule_tac c = xa and A = X and B = S in subsetD, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D xa.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {}; X \\<subseteq> carrier ODnods;\n        xa \\<in> X; \\<not> x \\<preceq>\\<^bsub>Iod ODnods S\\<^esub> xa;\n        \\<not> xa \\<prec>\\<^bsub>ODnods\\<^esub> x; xa \\<in> carrier ODnods;\n        xa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Order.Iod_le[of ODnods S])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x D xa.\n       \\<lbrakk>S \\<subseteq> carrier ODnods; Torder ODnods; Order ODnods;\n        Torder (Iod ODnods S); X \\<subseteq> S; X \\<noteq> {};\n        carrier (Iod ODnods S) = S; x \\<in> X; x \\<in> S;\n        x \\<in> carrier ODnods; Worder D; D \\<in> x;\n        ord_equiv (Iod ODnods (segment ODnods x)) D;\n        Worder (Iod ODnods (segment ODnods x));\n        segment ODnods x \\<inter> X = {}; X \\<subseteq> carrier ODnods;\n        xa \\<in> X; \\<not> x \\<preceq>\\<^bsub>ODnods\\<^esub> xa;\n        \\<not> xa \\<prec>\\<^bsub>ODnods\\<^esub> x; xa \\<in> carrier ODnods;\n        xa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Torder.not_le_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \"Pre elements\""], ["", "definition\n  ExPre :: \"_ \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  \"ExPre D a \\<longleftrightarrow> (\\<exists>x. x \\<in> carrier D \\<and> x \\<prec>\\<^bsub>D\\<^esub> a \n                      \\<and> \\<not> (\\<exists>y\\<in>carrier D. x \\<prec>\\<^bsub>D\\<^esub> y \\<and> y \\<prec>\\<^bsub>D\\<^esub> a))\""], ["", "(* exists pre element *)"], ["", "definition\n  Pre :: \"[_ ,  'a] \\<Rightarrow> 'a\" where\n  \"Pre D a = (SOME x. x \\<in> carrier D \\<and> \n                           x \\<prec>\\<^bsub>D\\<^esub> a \\<and>\n                         \\<not> (\\<exists>y\\<in>carrier D. x \\<prec>\\<^bsub>D\\<^esub> y \\<and> y \\<prec>\\<^bsub>D\\<^esub> a))\""], ["", "(* Pre element of a *)"], ["", "lemma (in Order) Pre_mem:\"\\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk> \\<Longrightarrow>\n                Pre D a \\<in> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk>\n    \\<Longrightarrow> Pre D a \\<in> carrier D", "apply (simp add:ExPre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D;\n     \\<exists>x.\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> Pre D a \\<in> carrier D", "apply (subst Pre_def, rule someI2_ex, blast, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Not_ExPre:\"a \\<in> carrier D \\<Longrightarrow> \\<not> ExPre (Iod D {a}) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier D \\<Longrightarrow> \\<not> ExPre (Iod D {a}) a", "apply (simp add:ExPre_def,\n       rule allI, rule impI, rule impI,\n       frule singleton_sub[of \"a\" \"carrier D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; x \\<prec>\\<^bsub>Iod D {a}\\<^esub> a;\n        x \\<in> carrier (Iod D {a}); {a} \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y\\<in>carrier (Iod D {a}).\n                            x \\<prec>\\<^bsub>Iod D {a}\\<^esub> y \\<and>\n                            y \\<prec>\\<^bsub>Iod D {a}\\<^esub> a", "apply (simp add:Iod_less Iod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) UniquePre:\"\\<lbrakk>a \\<in> carrier D; ExPre D a;\n a1 \\<in> carrier D \\<and> a1 \\<prec> a \\<and> \\<not> (\\<exists>y\\<in>carrier D. (a1 \\<prec> y \\<and> y \\<prec> a)) \\<rbrakk> \\<Longrightarrow>\n Pre D a = a1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; ExPre D a;\n     a1 \\<in> carrier D \\<and>\n     a1 \\<prec> a \\<and>\n     \\<not> (\\<exists>y\\<in>carrier D.\n                a1 \\<prec> y \\<and> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> Pre D a = a1", "apply (simp add:ExPre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D;\n     \\<exists>x.\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a);\n     a1 \\<in> carrier D \\<and>\n     a1 \\<prec> a \\<and>\n     (\\<forall>y\\<in>carrier D.\n         a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> Pre D a = a1", "apply (subst Pre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D;\n     \\<exists>x.\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a);\n     a1 \\<in> carrier D \\<and>\n     a1 \\<prec> a \\<and>\n     (\\<forall>y\\<in>carrier D.\n         a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<in> carrier D \\<and>\n                          x \\<prec> a \\<and>\n                          \\<not> (\\<exists>y\\<in>carrier D.\n                                     x \\<prec> y \\<and> y \\<prec> a)) =\n                      a1", "(* definition *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D;\n     \\<exists>x.\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a);\n     a1 \\<in> carrier D \\<and>\n     a1 \\<prec> a \\<and>\n     (\\<forall>y\\<in>carrier D.\n         a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<in> carrier D \\<and>\n                          x \\<prec> a \\<and>\n                          \\<not> (\\<exists>y\\<in>carrier D.\n                                     x \\<prec> y \\<and> y \\<prec> a)) =\n                      a1", "apply (rule someI2_ex, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D;\n        \\<exists>x.\n           x \\<in> carrier D \\<and>\n           x \\<prec> a \\<and>\n           (\\<forall>y\\<in>carrier D.\n               x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a);\n        a1 \\<in> carrier D \\<and>\n        a1 \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a);\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        \\<not> (\\<exists>y\\<in>carrier D.\n                   x \\<prec> y \\<and> y \\<prec> a)\\<rbrakk>\n       \\<Longrightarrow> x = a1", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D;\n        \\<exists>x.\n           x \\<in> carrier D \\<and>\n           x \\<prec> a \\<and>\n           (\\<forall>y\\<in>carrier D.\n               x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a);\n        a1 \\<in> carrier D; x \\<in> carrier D; a1 \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        x \\<prec> a;\n        \\<not> (\\<exists>y\\<in>carrier D.\n                   x \\<prec> y \\<and> y \\<prec> a)\\<rbrakk>\n       \\<Longrightarrow> x = a1", "apply (thin_tac \"\\<exists>x. x \\<in> carrier D \\<and> x \\<prec> a \\<and>\n                           (\\<forall>y\\<in>carrier D. x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)\",\n        rename_tac z)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>a \\<in> carrier D; a1 \\<in> carrier D; z \\<in> carrier D;\n        a1 \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<prec> a;\n        \\<not> (\\<exists>y\\<in>carrier D.\n                   z \\<prec> y \\<and> y \\<prec> a)\\<rbrakk>\n       \\<Longrightarrow> z = a1", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>a \\<in> carrier D; a1 \\<in> carrier D; z \\<in> carrier D;\n        a1 \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           z \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<noteq> a1\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = z and b = a1 in less_linear, assumption+,\n        simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>a \\<in> carrier D; a1 \\<in> carrier D; z \\<in> carrier D;\n        a1 \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           z \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<noteq> a1; z \\<prec> a1 \\<or> a1 \\<prec> z\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>a \\<in> carrier D; a1 \\<in> carrier D; z \\<in> carrier D;\n        a1 \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           z \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<noteq> a1; z \\<prec> a1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>z.\n       \\<lbrakk>a \\<in> carrier D; a1 \\<in> carrier D; z \\<in> carrier D;\n        a1 \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           z \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<noteq> a1; a1 \\<prec> z\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rotate_tac -4,\n        frule_tac x = a1 in bspec, assumption+,\n        thin_tac \"\\<forall>y\\<in>carrier D. z \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\",\n        thin_tac \"\\<forall>y\\<in>carrier D. a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>a \\<in> carrier D; a1 \\<in> carrier D; z \\<in> carrier D;\n        a1 \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           a1 \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           z \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<noteq> a1; a1 \\<prec> z\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = z in bspec, assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Pre_element:\"\\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk> \\<Longrightarrow> \n      Pre D a \\<in> carrier D \\<and> (Pre D a) \\<prec> a \\<and>\n            \\<not> (\\<exists>y\\<in>carrier D. ((Pre D a) \\<prec> y \\<and> y \\<prec> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk>\n    \\<Longrightarrow> Pre D a \\<in> carrier D \\<and>\n                      Pre D a \\<prec> a \\<and>\n                      \\<not> (\\<exists>y\\<in>carrier D.\n                                 Pre D a \\<prec> y \\<and> y \\<prec> a)", "apply (simp add:ExPre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D;\n     \\<exists>x.\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> Pre D a \\<in> carrier D \\<and>\n                      Pre D a \\<prec> a \\<and>\n                      (\\<forall>y\\<in>carrier D.\n                          Pre D a \\<prec> y \\<longrightarrow>\n                          \\<not> y \\<prec> a)", "apply (subst Pre_def)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D;\n     \\<exists>x.\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> (SOME x.\n                          x \\<in> carrier D \\<and>\n                          x \\<prec> a \\<and>\n                          \\<not> (\\<exists>y\\<in>carrier D.\n                                     x \\<prec> y \\<and> y \\<prec> a))\n                      \\<in> carrier D \\<and>\n                      (SOME x.\n                          x \\<in> carrier D \\<and>\n                          x \\<prec> a \\<and>\n                          \\<not> (\\<exists>y\\<in>carrier D.\n                                     x \\<prec> y \\<and>\n                                     y \\<prec> a)) \\<prec>\n                      a \\<and>\n                      (\\<forall>y\\<in>carrier D.\n                          (SOME x.\n                              x \\<in> carrier D \\<and>\n                              x \\<prec> a \\<and>\n                              \\<not> (\\<exists>y\\<in>carrier D.\n   x \\<prec> y \\<and> y \\<prec> a)) \\<prec>\n                          y \\<longrightarrow>\n                          \\<not> y \\<prec> a)", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D;\n     \\<exists>x.\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa.\n                         aa \\<in> carrier D \\<and>\n                         aa \\<prec> a \\<and>\n                         \\<not> (\\<exists>y\\<in>carrier D.\n                                    aa \\<prec> y \\<and> y \\<prec> a)\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D;\n        \\<exists>x.\n           x \\<in> carrier D \\<and>\n           x \\<prec> a \\<and>\n           (\\<forall>y\\<in>carrier D.\n               x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a);\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        \\<not> (\\<exists>y\\<in>carrier D.\n                   x \\<prec> y \\<and> y \\<prec> a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D \\<and>\n                         x \\<prec> a \\<and>\n                         (\\<forall>y\\<in>carrier D.\n                             x \\<prec> y \\<longrightarrow>\n                             \\<not> y \\<prec> a)", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Pre_in_segment:\"\\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk> \\<Longrightarrow> \n                  Pre D a \\<in> segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; ExPre D a\\<rbrakk>\n    \\<Longrightarrow> Pre D a \\<in> segment D a", "by (frule Pre_element[of \"a\"], assumption+, (erule conjE)+,\n    simp add:segment_inc)"], ["", "lemma (in Worder) segment_forall:\"\\<lbrakk>a \\<in> segment D b; b \\<in> carrier D; \n      x \\<in> segment D b; x \\<prec> a; \\<forall>y\\<in>segment D b. x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\\<rbrakk> \\<Longrightarrow> \n      \\<forall>y\\<in>carrier D. x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D; x \\<in> segment D b;\n     x \\<prec> a;\n     \\<forall>y\\<in>segment D b.\n        x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>carrier D.\n                         x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a", "apply (cut_tac segment_sub[of b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D; x \\<in> segment D b;\n     x \\<prec> a;\n     \\<forall>y\\<in>segment D b.\n        x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n     segment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>carrier D.\n                         x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a", "apply (rule ballI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D; x \\<in> segment D b;\n        x \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        segment D b \\<subseteq> carrier D; y \\<in> carrier D;\n        x \\<prec> y\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a", "apply (case_tac \"y \\<in> segment D b\",\n         frule_tac x = y in bspec, assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D; x \\<in> segment D b;\n        x \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        segment D b \\<subseteq> carrier D; y \\<in> carrier D; x \\<prec> y;\n        y \\<notin> segment D b\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a", "(***  \n        ------------------a---------------b---------------y----------\n***)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D; x \\<in> segment D b;\n        x \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        segment D b \\<subseteq> carrier D; y \\<in> carrier D; x \\<prec> y;\n        y \\<notin> segment D b\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a", "apply (thin_tac \"\\<forall>y\\<in>segment D b. x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\",\n         frule subsetD[of \"segment D b\" \"carrier D\" \"a\"], assumption+,\n         frule_tac c = x in subsetD[of \"segment D b\" \"carrier D\"], assumption+,\n         thin_tac \"segment D b \\<subseteq> carrier D\",\n         thin_tac \"x \\<in> segment D b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D; x \\<prec> a;\n        y \\<in> carrier D; x \\<prec> y; y \\<notin> segment D b;\n        a \\<in> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a", "apply (simp add:segment_inc[THEN sym, of _ \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>a \\<prec> b; b \\<in> carrier D; x \\<prec> a;\n        y \\<in> carrier D; x \\<prec> y; \\<not> y \\<prec> b;\n        a \\<in> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a", "apply (\n         simp add:not_less_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>a \\<prec> b; b \\<in> carrier D; x \\<prec> a;\n        y \\<in> carrier D; x \\<prec> y; b \\<preceq> y; a \\<in> carrier D;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> y", "apply (frule_tac c = y in less_le_trans[of a b], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>a \\<prec> b; b \\<in> carrier D; x \\<prec> a;\n        y \\<in> carrier D; x \\<prec> y; b \\<preceq> y; a \\<in> carrier D;\n        x \\<in> carrier D; a \\<prec> y\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> y", "apply (simp add:less_imp_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) segment_Expre:\"a \\<in> segment D b \\<Longrightarrow>\n                   ExPre (Iod D (segment D b)) a = ExPre D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> segment D b \\<Longrightarrow>\n    ExPre (Iod D (segment D b)) a = ExPre D a", "apply (case_tac \"b \\<notin> carrier D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a = ExPre D a\n 2. \\<lbrakk>a \\<in> segment D b; \\<not> b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a = ExPre D a", "apply (simp add:segment_def Iod_self[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; \\<not> b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a = ExPre D a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a = ExPre D a", "apply (cut_tac segment_sub[of \"b\"],\n       frule subsetD[of \"segment D b\" \"carrier D\" a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a = ExPre D a", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n     ExPre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> ExPre D a\n 2. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n     ExPre D a\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a", "apply (simp add:ExPre_def, erule exE, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> carrier (Iod D (segment D b));\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        \\<forall>y\\<in>carrier (Iod D (segment D b)).\n           x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier D \\<and>\n                            x \\<prec> a \\<and>\n                            (\\<forall>y\\<in>carrier D.\n                                x \\<prec> y \\<longrightarrow>\n                                \\<not> y \\<prec> a)\n 2. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n     ExPre D a\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a", "apply (simp add:Iod_carrier Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> segment D b; x \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier D \\<and>\n                            x \\<prec> a \\<and>\n                            (\\<forall>y\\<in>carrier D.\n                                x \\<prec> y \\<longrightarrow>\n                                \\<not> y \\<prec> a)\n 2. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n     ExPre D a\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a", "apply (frule_tac x = x in segment_forall[of \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> segment D b; x \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier D \\<and>\n                            x \\<prec> a \\<and>\n                            (\\<forall>y\\<in>carrier D.\n                                x \\<prec> y \\<longrightarrow>\n                                \\<not> y \\<prec> a)\n 2. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n     ExPre D a\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n     ExPre D a\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D b)) a", "apply (simp add:ExPre_def, erule exE, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> carrier D; x \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier (Iod D (segment D b)) \\<and>\n                            x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n                            a \\<and>\n                            (\\<forall>y\\<in>carrier (Iod D (segment D b)).\n                                x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n a)", "apply (frule_tac a = a in segment_inc[of _ b], assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> carrier D; x \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        a \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier (Iod D (segment D b)) \\<and>\n                            x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n                            a \\<and>\n                            (\\<forall>y\\<in>carrier (Iod D (segment D b)).\n                                x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n a)", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> carrier D; x \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        a \\<prec> b;\n        \\<forall>x.\n           x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a \\<longrightarrow>\n           x \\<in> carrier (Iod D (segment D b)) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D (segment D b)).\n               x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = x in spec,\n         thin_tac \"\\<forall>x. x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a \\<longrightarrow>\n             x \\<in> carrier (Iod D (segment D b)) \\<longrightarrow>\n             (\\<exists>y\\<in>carrier (Iod D (segment D b)).\n                 x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> y \\<and> y \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a)\",\n         frule_tac a = x in less_trans[of _ a b], assumption+,\n         frule_tac a = x in segment_inc[of _ b], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> carrier D; x \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        a \\<prec> b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a \\<longrightarrow>\n        x \\<in> carrier (Iod D (segment D b)) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D (segment D b)).\n            x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a);\n        x \\<in> segment D b; x \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_carrier Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> carrier D; x \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        a \\<prec> b;\n        \\<exists>y\\<in>segment D b. x \\<prec> y \\<and> y \\<prec> a;\n        x \\<in> segment D b; x \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule bexE, erule conjE,\n       frule_tac c = y in subsetD[of \"segment D b\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; a \\<in> carrier D;\n        x \\<in> carrier D; x \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        a \\<prec> b; x \\<in> segment D b; x \\<prec> b; y \\<in> segment D b;\n        x \\<prec> y; y \\<prec> a; y \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = y in bspec, assumption,\n         thin_tac \"\\<forall>y\\<in>carrier D. x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\", simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma  (in Worder) Pre_segment:\"\\<lbrakk>a \\<in> segment D b; \n        ExPre (Iod D (segment D b)) a\\<rbrakk> \\<Longrightarrow> \n        ExPre D a \\<and> Pre D a = Pre (Iod D (segment D b)) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> ExPre D a \\<and> Pre D a = Pre (Iod D (segment D b)) a", "apply (frule segment_Expre[of \"a\" \"b\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a;\n     ExPre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (case_tac \"b \\<notin> carrier D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     \\<not> b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (simp add:segment_def, simp add:Iod_self[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     \\<not> b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (cut_tac segment_sub[of \"b\"],\n       frule subsetD[of \"segment D b\" \"carrier D\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (frule_tac a = a and ?a1.0 = \"Pre (Iod D (segment D b)) a\" in \n            UniquePre, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (segment D b)) a \\<in> carrier D \\<and>\n                      Pre (Iod D (segment D b)) a \\<prec> a \\<and>\n                      \\<not> (\\<exists>y\\<in>carrier D.\n                                 Pre (Iod D (segment D b)) a \\<prec>\n                                 y \\<and>\n                                 y \\<prec> a)\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (segment D b)) a \\<in> carrier D \\<and>\n                      Pre (Iod D (segment D b)) a \\<prec> a \\<and>\n                      (\\<forall>y\\<in>carrier D.\n                          Pre (Iod D (segment D b)) a \\<prec>\n                          y \\<longrightarrow>\n                          \\<not> y \\<prec> a)\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (cut_tac segment_Worder[of \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Worder (Iod D (segment D b))\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (segment D b)) a \\<in> carrier D \\<and>\n                      Pre (Iod D (segment D b)) a \\<prec> a \\<and>\n                      (\\<forall>y\\<in>carrier D.\n                          Pre (Iod D (segment D b)) a \\<prec>\n                          y \\<longrightarrow>\n                          \\<not> y \\<prec> a)\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (frule_tac D = \"Iod D (segment D b)\" in Worder.Order)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Worder (Iod D (segment D b));\n     Order (Iod D (segment D b))\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (segment D b)) a \\<in> carrier D \\<and>\n                      Pre (Iod D (segment D b)) a \\<prec> a \\<and>\n                      (\\<forall>y\\<in>carrier D.\n                          Pre (Iod D (segment D b)) a \\<prec>\n                          y \\<longrightarrow>\n                          \\<not> y \\<prec> a)\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (frule Order.Pre_element[of \"Iod D (segment D b)\" a],\n        simp add:Iod_carrier, assumption, erule conjE, \n        simp add:Iod_carrier, simp add:subsetD, simp add:Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     Worder (Iod D (segment D b)); Order (Iod D (segment D b));\n     Pre (Iod D (segment D b)) a \\<in> segment D b;\n     Pre (Iod D (segment D b)) a \\<prec> a \\<and>\n     (\\<forall>y\\<in>segment D b.\n         Pre (Iod D (segment D b)) a \\<prec> y \\<longrightarrow>\n         \\<not> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>carrier D.\n                         Pre (Iod D (segment D b)) a \\<prec>\n                         y \\<longrightarrow>\n                         \\<not> y \\<prec> a\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (erule conjE, rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; ExPre D a;\n        ExPre (Iod D (segment D b)) a; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Worder (Iod D (segment D b));\n        Order (Iod D (segment D b));\n        Pre (Iod D (segment D b)) a \\<in> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           Pre (Iod D (segment D b)) a \\<prec> y \\<longrightarrow>\n           \\<not> y \\<prec> a;\n        y \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (segment D b)) a \\<prec>\n                         y \\<longrightarrow>\n                         \\<not> y \\<prec> a\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (case_tac \"y \\<in> segment D b\",\n        frule_tac x = y in bspec, assumption,\n        thin_tac \"\\<forall>y\\<in>segment D b. Pre (Iod D (segment D b)) a \\<prec> y \n                  \\<longrightarrow> \\<not> y \\<prec> a\",\n        simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; ExPre D a;\n        ExPre (Iod D (segment D b)) a; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Worder (Iod D (segment D b));\n        Order (Iod D (segment D b));\n        Pre (Iod D (segment D b)) a \\<in> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           Pre (Iod D (segment D b)) a \\<prec> y \\<longrightarrow>\n           \\<not> y \\<prec> a;\n        y \\<in> carrier D; y \\<notin> segment D b\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (segment D b)) a \\<prec>\n                         y \\<longrightarrow>\n                         \\<not> y \\<prec> a\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; ExPre D a;\n        ExPre (Iod D (segment D b)) a; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Worder (Iod D (segment D b));\n        Order (Iod D (segment D b));\n        Pre (Iod D (segment D b)) a \\<in> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           Pre (Iod D (segment D b)) a \\<prec> y \\<longrightarrow>\n           \\<not> y \\<prec> a;\n        y \\<in> carrier D; y \\<notin> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> y\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (frule subsetD[of \"segment D b\" \"carrier D\" a], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; ExPre D a;\n        ExPre (Iod D (segment D b)) a; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Worder (Iod D (segment D b));\n        Order (Iod D (segment D b));\n        Pre (Iod D (segment D b)) a \\<in> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           Pre (Iod D (segment D b)) a \\<prec> y \\<longrightarrow>\n           \\<not> y \\<prec> a;\n        y \\<in> carrier D; y \\<notin> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> y; a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (frule_tac a = y in segment_inc[of _ b], assumption+, simp,\n         frule segment_inc[of a b], assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; ExPre D a;\n        ExPre (Iod D (segment D b)) a; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Worder (Iod D (segment D b));\n        Order (Iod D (segment D b));\n        Pre (Iod D (segment D b)) a \\<in> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           Pre (Iod D (segment D b)) a \\<prec> y \\<longrightarrow>\n           \\<not> y \\<prec> a;\n        y \\<in> carrier D; y \\<notin> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> y; a \\<in> carrier D;\n        \\<not> y \\<prec> b; a \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (simp add:not_less_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>a \\<in> segment D b; ExPre D a;\n        ExPre (Iod D (segment D b)) a; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Worder (Iod D (segment D b));\n        Order (Iod D (segment D b));\n        Pre (Iod D (segment D b)) a \\<in> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> a;\n        \\<forall>y\\<in>segment D b.\n           Pre (Iod D (segment D b)) a \\<prec> y \\<longrightarrow>\n           \\<not> y \\<prec> a;\n        y \\<in> carrier D; y \\<notin> segment D b;\n        Pre (Iod D (segment D b)) a \\<prec> y; a \\<in> carrier D;\n        b \\<preceq> y; a \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> y\n 2. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply (frule_tac c = y in less_le_trans[of a b], assumption+,\n         simp add:less_imp_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> segment D b; ExPre D a; ExPre (Iod D (segment D b)) a;\n     b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     a \\<in> carrier D; Pre D a = Pre (Iod D (segment D b)) a\\<rbrakk>\n    \\<Longrightarrow> Pre D a = Pre (Iod D (segment D b)) a", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Pre2segment:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<prec> a; \n                 ExPre D b\\<rbrakk> \\<Longrightarrow> ExPre (Iod D (segment D a)) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<prec> a;\n     ExPre D b\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D a)) b", "apply (frule segment_inc [of b a], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<in> segment D a;\n     ExPre D b; b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (segment D a)) b", "apply (simp add:segment_Expre[of b a])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) ord_isom_Pre1:\"\\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; \n                  ord_isom D E f\\<rbrakk> \\<Longrightarrow> ExPre E (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> ExPre E (f a)", "apply (simp add:ExPre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D;\n     \\<exists>x.\n        x \\<in> carrier D \\<and>\n        x \\<prec> a \\<and>\n        (\\<forall>y\\<in>carrier D.\n            x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a);\n     ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> carrier E \\<and>\n                         x \\<prec>\\<^bsub>E\\<^esub> f a \\<and>\n                         (\\<forall>y\\<in>carrier E.\n                             x \\<prec>\\<^bsub>E\\<^esub> y \\<longrightarrow>\n                             \\<not> y \\<prec>\\<^bsub>E\\<^esub> f a)", "apply (erule exE,\n       frule Worder.Order[of \"E\"],\n       erule conjE,\n       frule_tac a = x in ord_isom_mem[of \"E\" \"f\"], assumption+,\n       frule_tac a = a in ord_isom_mem[of \"E\" \"f\"], assumption+,\n       erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; Order E;\n        x \\<in> carrier D; f x \\<in> carrier E; f a \\<in> carrier E;\n        x \\<prec> a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier E \\<and>\n                            x \\<prec>\\<^bsub>E\\<^esub> f a \\<and>\n                            (\\<forall>y\\<in>carrier E.\n                                x \\<prec>\\<^bsub>E\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>E\\<^esub> f a)", "apply (frule_tac a = x in ord_isom_less[of \"E\" \"f\" _ \"a\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; Order E;\n        x \\<in> carrier D; f x \\<in> carrier E; f a \\<in> carrier E;\n        f x \\<prec>\\<^bsub>E\\<^esub> f a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        x \\<prec> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier E \\<and>\n                            x \\<prec>\\<^bsub>E\\<^esub> f a \\<and>\n                            (\\<forall>y\\<in>carrier E.\n                                x \\<prec>\\<^bsub>E\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>E\\<^esub> f a)", "apply (frule ord_isom_less_forall[of \"E\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; Order E;\n        x \\<in> carrier D; f x \\<in> carrier E; f a \\<in> carrier E;\n        f x \\<prec>\\<^bsub>E\\<^esub> f a;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        x \\<prec> a;\n        \\<forall>a\\<in>carrier D.\n           \\<forall>b\\<in>carrier D.\n              a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier E \\<and>\n                            x \\<prec>\\<^bsub>E\\<^esub> f a \\<and>\n                            (\\<forall>y\\<in>carrier E.\n                                x \\<prec>\\<^bsub>E\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>E\\<^esub> f a)", "apply (frule_tac x = x and a = a in ord_isom_convert[of \"E\" \"f\"],\n                             assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; Order E;\n        x \\<in> carrier D; f x \\<in> carrier E; f a \\<in> carrier E;\n        f x \\<prec>\\<^bsub>E\\<^esub> f a;\n        \\<forall>y\\<in>carrier D.\n           f x \\<prec>\\<^bsub>E\\<^esub> f y \\<longrightarrow>\n           \\<not> f y \\<prec>\\<^bsub>E\\<^esub> f a;\n        \\<forall>a\\<in>carrier D.\n           \\<forall>b\\<in>carrier D.\n              a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b;\n        \\<forall>z\\<in>carrier E.\n           f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n           \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            x \\<in> carrier E \\<and>\n                            x \\<prec>\\<^bsub>E\\<^esub> f a \\<and>\n                            (\\<forall>y\\<in>carrier E.\n                                x \\<prec>\\<^bsub>E\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>E\\<^esub> f a)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(** Here, ord_isom_convert transforms the inequality **)"], ["", "lemma (in Worder) ord_isom_Pre11:\"\\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f\\<rbrakk> \n       \\<Longrightarrow> ExPre D a = ExPre E (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> ExPre D a = ExPre E (f a)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; ExPre D a\\<rbrakk>\n    \\<Longrightarrow> ExPre E (f a)\n 2. \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f;\n     ExPre E (f a)\\<rbrakk>\n    \\<Longrightarrow> ExPre D a", "apply (simp add:ord_isom_Pre1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f;\n     ExPre E (f a)\\<rbrakk>\n    \\<Longrightarrow> ExPre D a", "apply (frule Worder.Order[of \"E\"],\n        frule ord_isom_sym[of \"E\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; ExPre E (f a);\n     Order E;\n     ord_isom E D (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> ExPre D a", "apply (cut_tac Worder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; ExPre E (f a);\n     Order E; ord_isom E D (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>);\n     Worder D\\<rbrakk>\n    \\<Longrightarrow> ExPre D a", "apply (frule Worder_ord_isom_mem[of \"D\" \"E\" \"f\" \"a\"], assumption+,\n         frule Worder.ord_isom_Pre1[of \"E\" \"D\" \"f a\" \n              \"invfun (carrier D) (carrier E) f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; ExPre E (f a);\n     Order E; ord_isom E D (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>);\n     Worder D; f a \\<in> carrier E;\n     ExPre D\n      ((f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f a))\\<rbrakk>\n    \\<Longrightarrow> ExPre D a", "apply (frule ord_isom_func[of \"E\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ord_isom D E f; ExPre E (f a);\n     Order E; ord_isom E D (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>);\n     Worder D; f a \\<in> carrier E;\n     ExPre D ((f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f a));\n     f \\<in> carrier D \\<rightarrow> carrier E\\<rbrakk>\n    \\<Longrightarrow> ExPre D a", "apply (simp add:ord_isom_def[of \"D\" \"E\" \"f\"] ord_inj_def, (erule conjE)+,\n        thin_tac \"\\<forall>a\\<in>carrier D. \\<forall>b\\<in>carrier D. a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ExPre E (f a); Order E;\n     ord_isom E D (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>);\n     Worder D; f a \\<in> carrier E;\n     ExPre D ((f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f a));\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f \\<in> extensional (carrier D); inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> ExPre D a", "apply (simp add:invfun_l)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) ord_isom_Pre2:\"\\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; \n       ord_isom D E f\\<rbrakk> \\<Longrightarrow> f (Pre D a) = Pre E (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> f (Pre D a) = Pre E (f a)", "apply (frule_tac E = E and a = a and f = f in ord_isom_Pre1, assumption+,\n       frule_tac a = a in Pre_element, assumption+, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; ord_isom D E f;\n     ExPre E (f a); Pre D a \\<in> carrier D; Pre D a \\<prec> a;\n     \\<not> (\\<exists>y\\<in>carrier D.\n                Pre D a \\<prec> y \\<and> y \\<prec> a)\\<rbrakk>\n    \\<Longrightarrow> f (Pre D a) = Pre E (f a)", "apply (frule Worder.Order[of \"E\"], \n        frule  ord_isom_mem[of \"E\" \"f\" \"a\"], assumption+,\n        frule  ord_isom_mem[of \"E\" \"f\" \"Pre D a\"], assumption+,\n        simp add:ord_isom_less[of \"E\" \"f\" \"Pre D a\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; ord_isom D E f;\n     ExPre E (f a); Pre D a \\<in> carrier D;\n     f (Pre D a) \\<prec>\\<^bsub>E\\<^esub> f a;\n     \\<forall>y\\<in>carrier D.\n        Pre D a \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n     Order E; f a \\<in> carrier E; f (Pre D a) \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> f (Pre D a) = Pre E (f a)", "apply (simp add:ord_isom_convert[of E f \"Pre D a\" a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; a \\<in> carrier D; ExPre D a; ord_isom D E f;\n     ExPre E (f a); Pre D a \\<in> carrier D;\n     f (Pre D a) \\<prec>\\<^bsub>E\\<^esub> f a;\n     \\<forall>z\\<in>carrier E.\n        f (Pre D a) \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n        \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a;\n     Order E; f a \\<in> carrier E; f (Pre D a) \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> f (Pre D a) = Pre E (f a)", "apply (rule Worder.UniquePre[THEN sym, of \"E\" \"f a\" \"f (Pre D a)\"],\n        assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \"Transfinite induction\""], ["", "lemma (in Worder) transfinite_induction:\"\\<lbrakk>minimum_elem D (carrier D) s0; P s0; \\<forall>t\\<in>carrier D. ((\\<forall>u\\<in> segment D t. P u) \\<longrightarrow> P t)\\<rbrakk> \\<Longrightarrow> \\<forall>x\\<in>carrier D. P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n     \\<forall>t\\<in>carrier D.\n        (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D. P x", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n     \\<forall>t\\<in>carrier D.\n        (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n     \\<exists>x\\<in>carrier D. \\<not> P x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule bex_nonempty_set[of \"carrier D\"],\n        frule nonempty_set_sub[of \"carrier D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n     \\<forall>t\\<in>carrier D.\n        (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n     \\<exists>x\\<in>carrier D. \\<not> P x;\n     {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n     {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac ex_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n     \\<forall>t\\<in>carrier D.\n        (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n     \\<exists>x\\<in>carrier D. \\<not> P x;\n     {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n     {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D;\n     \\<forall>X.\n        X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac a = \"{x \\<in> carrier D. \\<not> P x}\" in forall_spec,\n        simp,\n        thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n     \\<forall>t\\<in>carrier D.\n        (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n     \\<exists>x\\<in>carrier D. \\<not> P x;\n     {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n     {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D;\n     \\<exists>x. minimum_elem D {x \\<in> carrier D. \\<not> P x} x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (thin_tac \"\\<exists>x\\<in>carrier D. \\<not> P x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n     \\<forall>t\\<in>carrier D.\n        (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n     {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n     {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D;\n     \\<exists>x. minimum_elem D {x \\<in> carrier D. \\<not> P x} x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n        \\<forall>t\\<in>carrier D.\n           (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n        {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n        {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D;\n        minimum_elem D {x \\<in> carrier D. \\<not> P x} x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac d = x in less_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n        \\<forall>t\\<in>carrier D.\n           (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n        {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n        {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D;\n        minimum_elem D {x \\<in> carrier D. \\<not> P x} x;\n        \\<forall>a.\n           a \\<prec> x \\<and> a \\<in> carrier D \\<longrightarrow>\n           \\<not> \\<not> P a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac X = \"{x \\<in> carrier D. \\<not> P x}\" and a = x in minimum_elem_mem,\n         assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n        \\<forall>t\\<in>carrier D.\n           (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n        {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n        {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D;\n        minimum_elem D {x \\<in> carrier D. \\<not> P x} x;\n        \\<forall>a.\n           a \\<prec> x \\<and> a \\<in> carrier D \\<longrightarrow>\n           \\<not> \\<not> P a;\n        x \\<in> {x \\<in> carrier D. \\<not> P x}\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = x and A = \"{x \\<in> carrier D. \\<not> P x}\" and B = \"carrier D\"\n          in subsetD, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n        \\<forall>t\\<in>carrier D.\n           (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t;\n        {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n        {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D;\n        minimum_elem D {x \\<in> carrier D. \\<not> P x} x;\n        \\<forall>a.\n           a \\<prec> x \\<and> a \\<in> carrier D \\<longrightarrow>\n           \\<not> \\<not> P a;\n        x \\<in> {x \\<in> carrier D. \\<not> P x}; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = x in bspec, assumption+,\n         thin_tac \"\\<forall>t\\<in>carrier D. (\\<forall>u\\<in>segment D t. P u) \\<longrightarrow> P t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>minimum_elem D (carrier D) s0; P s0;\n        {x \\<in> carrier D. \\<not> P x} \\<noteq> {};\n        {x \\<in> carrier D. \\<not> P x} \\<subseteq> carrier D;\n        minimum_elem D {x \\<in> carrier D. \\<not> P x} x;\n        \\<forall>a.\n           a \\<prec> x \\<and> a \\<in> carrier D \\<longrightarrow>\n           \\<not> \\<not> P a;\n        x \\<in> {x \\<in> carrier D. \\<not> P x}; x \\<in> carrier D;\n        (\\<forall>u\\<in>segment D x. P u) \\<longrightarrow> P x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:minimum_elem_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>P s0; \\<exists>x. x \\<in> carrier D \\<and> \\<not> P x;\n        \\<forall>a.\n           a \\<prec> x \\<and> a \\<in> carrier D \\<longrightarrow> P a;\n        x \\<in> carrier D; \\<exists>x\\<in>segment D x. \\<not> P x;\n        s0 \\<in> carrier D; \\<forall>x\\<in>carrier D. s0 \\<preceq> x;\n        \\<not> P x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and> \\<not> P xa \\<longrightarrow>\n           x \\<preceq> xa\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule bexE, simp add:segment_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \\<open>\\<open>Ordered_set2\\<close>. Lemmas to prove Zorn's lemma.\\<close>"], ["", "definition\n  adjunct_ord ::\"[_ , 'a] \\<Rightarrow> _\" where\n  \"adjunct_ord D a = D \\<lparr>carrier := carrier D \\<union> {a},\n                       rel := {(x,y). (x, y) \\<in> rel D \\<or> \n                                     (x \\<in> (carrier D \\<union> {a}) \\<and> y = a)}\\<rparr> \""], ["", "lemma (in Order) carrier_adjunct_ord:\n        \"carrier (adjunct_ord D a) = carrier D \\<union> {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (adjunct_ord D a) = carrier D \\<union> {a}", "by (simp add:adjunct_ord_def)"], ["", "lemma (in Order) Order_adjunct_ord:\"a \\<notin> carrier D \\<Longrightarrow> \n                                    Order (adjunct_ord D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow> Order (adjunct_ord D a)", "apply (cut_tac closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     rel D \\<subseteq> carrier D \\<times> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (adjunct_ord D a)", "apply (rule Order.intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     rel D \\<subseteq> carrier D \\<times> carrier D\\<rbrakk>\n    \\<Longrightarrow> rel (adjunct_ord D a)\n                      \\<subseteq> carrier (adjunct_ord D a) \\<times>\n                                  carrier (adjunct_ord D a)\n 2. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (rule subsetI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        x \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (adjunct_ord D a) \\<times>\n                                 carrier (adjunct_ord D a)\n 2. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (unfold split_paired_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, b)\n                         \\<in> carrier (adjunct_ord D a) \\<times>\n                               carrier (adjunct_ord D a)\n 2. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa \\<in> carrier (adjunct_ord D a) \\<and>\n                         b \\<in> carrier (adjunct_ord D a)\n 2. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (simp add:adjunct_ord_def insert_absorb)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or>\n        (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a\\<rbrakk>\n       \\<Longrightarrow> (aa = a \\<or> aa \\<in> carrier D) \\<and>\n                         (b = a \\<or> b \\<in> carrier D)\n 2. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (simp add:carrier_adjunct_ord)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa = a \\<or> aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 2. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (simp add:adjunct_ord_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel (adjunct_ord D a)\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (simp add:adjunct_ord_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, aa) \\<in> rel D \\<or> aa = a\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (simp add:refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, aa) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (simp add:adjunct_ord_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa = a \\<or> aa \\<in> carrier D; b = a \\<or> b \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a;\n        (b, aa) \\<in> rel D \\<or> aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (erule disjE)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        (aa, b) \\<in> rel D; (b, aa) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        (aa, b) \\<in> rel D; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa = a; b = a; b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, aa) \\<in> rel D \\<or> aa = a;\n        aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 5. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 6. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply simp+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (a, b) \\<in> rel D \\<or> b = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; (a, b) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (frule_tac c = \"(a, b)\" in subsetD[of \"rel D\" \"carrier D \\<times> carrier D\"],\n         assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; (a, b) \\<in> rel D;\n        (a, b) \\<in> carrier D \\<times> carrier D\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (erule disjE)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; (aa, b) \\<in> rel D; (b, aa) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; (aa, b) \\<in> rel D; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D; b = a;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, aa) \\<in> rel D \\<or> aa = a;\n        aa \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 5. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (cut_tac closed, simp+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D; aa \\<in> carrier D; b = a;\n        (aa, a) \\<in> rel D; (a, aa) \\<in> rel D;\n        rel D \\<subseteq> carrier D \\<times> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = a\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; (aa, b) \\<in> rel D; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D; b = a;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, aa) \\<in> rel D \\<or> aa = a;\n        aa \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 5. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (frule_tac c = \"(a, aa)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; (aa, b) \\<in> rel D; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D; b = a;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, aa) \\<in> rel D \\<or> aa = a;\n        aa \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (frule_tac c = \"(aa, b)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D; b = a;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, aa) \\<in> rel D \\<or> aa = a;\n        aa \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; b = a; (b, aa) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; b = a; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, aa) \\<in> rel D \\<or> aa = a;\n        aa \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (frule_tac c = \"(b, aa)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; b = a; (b, aa) \\<in> rel D;\n        (b, aa) \\<in> carrier D \\<times> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; b = a; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, aa) \\<in> rel D \\<or> aa = a;\n        aa \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply simp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, aa) \\<in> rel D \\<or> aa = a;\n        aa \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (erule disjE)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; (aa, b) \\<in> rel D; (b, aa) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; (aa, b) \\<in> rel D; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D;\n        b \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (rule antisym, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; (aa, b) \\<in> rel D; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D;\n        b \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (frule_tac c = \"(aa, b)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; (aa, b) \\<in> rel D; aa = a;\n        (aa, b) \\<in> carrier D \\<times> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D;\n        b \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, aa) \\<in> rel D \\<or> aa = a; aa \\<in> carrier D;\n        b \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; b = a; (b, aa) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 2. \\<And>aa b.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; b = a; aa = a\\<rbrakk>\n       \\<Longrightarrow> aa = b\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (frule_tac c = \"(b, aa)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+,\n         simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a);\n        c \\<in> carrier (adjunct_ord D a);\n        (aa, b) \\<in> rel (adjunct_ord D a);\n        (b, c) \\<in> rel (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel (adjunct_ord D a)", "apply (simp add:adjunct_ord_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        aa = a \\<or> aa \\<in> carrier D; b = a \\<or> b \\<in> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        c = a; (aa, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        c = a; (aa, b) \\<in> rel D; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b = a; c = a; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa = a; b = a; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 5. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 6. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        c = a; (aa, b) \\<in> rel D; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b = a; c = a; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa = a; b = a; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 5. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b = a; c = a; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa = a; b = a; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa = a; b = a; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b = a; c \\<in> carrier D;\n        (aa, b) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b = a; c \\<in> carrier D;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b = a; c \\<in> carrier D;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        c \\<in> carrier D; b = a; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        c \\<in> carrier D; b = a; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (frule_tac c = \"(b, c)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        c \\<in> carrier D; b = a; (b, c) \\<in> rel D;\n        (b, c) \\<in> carrier D \\<times> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        c \\<in> carrier D; b = a; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a; b = a;\n        c \\<in> carrier D; b = a; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa = a; b \\<in> carrier D; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D;\n        c \\<in> carrier D; (aa, b) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D;\n        c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D;\n        c \\<in> carrier D; (a, b) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D;\n        c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; c \\<in> carrier D; (a, b) \\<in> rel D;\n        (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; c \\<in> carrier D; (a, b) \\<in> rel D;\n        c = a\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D;\n        c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (frule_tac c = \"(a, b)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; c \\<in> carrier D; (a, b) \\<in> rel D;\n        c = a\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D;\n        c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (frule_tac c = \"(a, b)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa = a; b \\<in> carrier D;\n        c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa = a;\n        b \\<in> carrier D; c \\<in> carrier D; b = a; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        b = a \\<or> b \\<in> carrier D; c = a \\<or> c \\<in> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (a, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (a, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D; b = a;\n        c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (a, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D; b = a;\n        c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (a, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D; b = a;\n        c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; c \\<in> carrier D; (a, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; c \\<in> carrier D; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (frule_tac c = \"(a, c)\" in subsetD[of \"rel D\" \n                              \"carrier D \\<times> carrier D\"], assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b = a; c \\<in> carrier D; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        c = a \\<or> c \\<in> carrier D; (aa, b) \\<in> rel D \\<or> b = a;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c = a; (aa, b) \\<in> rel D;\n        (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c = a; (aa, b) \\<in> rel D; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c = a; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 4. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c = a; (aa, b) \\<in> rel D; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c = a; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c = a; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (aa, b) \\<in> rel D \\<or> b = a; (b, c) \\<in> rel D \\<or> c = a;\n        aa \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; (aa, b) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; (aa, b) \\<in> rel D;\n        (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; (aa, b) \\<in> rel D;\n        c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (frule_tac a = aa and b = b and c = c in trans, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; (aa, b) \\<in> rel D;\n        (b, c) \\<in> rel D; (aa, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; (aa, b) \\<in> rel D;\n        c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 3. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; (aa, b) \\<in> rel D;\n        c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        (b, c) \\<in> rel D \\<or> c = a; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; b = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; b = a;\n        (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a\n 2. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; b = a; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b c.\n       \\<lbrakk>a \\<notin> carrier D;\n        rel D \\<subseteq> carrier D \\<times> carrier D; aa \\<in> carrier D;\n        b \\<in> carrier D; c \\<in> carrier D; b = a; c = a\\<rbrakk>\n       \\<Longrightarrow> (aa, c) \\<in> rel D \\<or> c = a", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) adjunct_ord_large_a:\"\\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk> \\<Longrightarrow> \n                             \\<forall>x\\<in>carrier D. x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D.\n                         x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a", "apply (subst oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> a \\<and>\n                         x \\<noteq> a", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> a\n 2. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> a", "apply (simp add:ole_def adjunct_ord_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> a", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma carr_Ssegment_adjunct_ord:\"\\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk> \\<Longrightarrow> \n                 carrier D = (Ssegment (adjunct_ord D a) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> carrier D = Ssegment (adjunct_ord D a) a", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> carrier D \\<subseteq> Ssegment (adjunct_ord D a) a\n 2. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Ssegment (adjunct_ord D a) a \\<subseteq> carrier D", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment (adjunct_ord D a) a\n 2. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Ssegment (adjunct_ord D a) a \\<subseteq> carrier D", "apply (simp add:Ssegment_def Order.carrier_adjunct_ord)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a\n 2. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Ssegment (adjunct_ord D a) a \\<subseteq> carrier D", "apply (simp add:Order.adjunct_ord_large_a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Ssegment (adjunct_ord D a) a \\<subseteq> carrier D", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D;\n        x \\<in> Ssegment (adjunct_ord D a) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply (simp add:Ssegment_def Order.carrier_adjunct_ord)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D;\n        x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a \\<and>\n        (x = a \\<or> x \\<in> carrier D)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D;\n        x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a;\n        x = a \\<or> x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply (erule disjE, simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; a \\<notin> carrier D;\n        x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) adjunct_ord_selfD:\"a \\<notin> carrier D \\<Longrightarrow>\n          D = Iod (adjunct_ord D a) (carrier D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow>\n    D = Iod (adjunct_ord D a) (carrier D)", "apply (simp add:Iod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow>\n    D = adjunct_ord D a\n    \\<lparr>carrier := carrier D,\n       rel :=\n         {(aa, b).\n          (aa, b) \\<in> rel (adjunct_ord D a) \\<and>\n          aa \\<in> carrier D \\<and> b \\<in> carrier D}\\<rparr>", "apply (simp add:adjunct_ord_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow>\n    D = D\n    \\<lparr>rel :=\n              {(aa, b).\n               ((aa, b) \\<in> rel D \\<or>\n                (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n               aa \\<in> carrier D \\<and> b \\<in> carrier D}\\<rparr>", "apply (subgoal_tac \"rel D = {(aa, b).\n              ((aa, b) \\<in> rel D \\<or> (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n              aa \\<in> carrier D \\<and> b \\<in> carrier D}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     rel D =\n     {(aa, b).\n      ((aa, b) \\<in> rel D \\<or>\n       (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n      aa \\<in> carrier D \\<and> b \\<in> carrier D}\\<rbrakk>\n    \\<Longrightarrow> D = D\n                      \\<lparr>rel :=\n                                {(aa, b).\n                                 ((aa, b) \\<in> rel D \\<or>\n                                  (aa = a \\<or> aa \\<in> carrier D) \\<and>\n                                  b = a) \\<and>\n                                 aa \\<in> carrier D \\<and>\n                                 b \\<in> carrier D}\\<rparr>\n 2. a \\<notin> carrier D \\<Longrightarrow>\n    rel D =\n    {(aa, b).\n     ((aa, b) \\<in> rel D \\<or>\n      (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n     aa \\<in> carrier D \\<and> b \\<in> carrier D}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow>\n    rel D =\n    {(aa, b).\n     ((aa, b) \\<in> rel D \\<or>\n      (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n     aa \\<in> carrier D \\<and> b \\<in> carrier D}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<notin> carrier D \\<Longrightarrow>\n    rel D\n    \\<subseteq> {(aa, b).\n                 ((aa, b) \\<in> rel D \\<or>\n                  (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n                 aa \\<in> carrier D \\<and> b \\<in> carrier D}\n 2. a \\<notin> carrier D \\<Longrightarrow>\n    {(aa, b).\n     ((aa, b) \\<in> rel D \\<or>\n      (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n     aa \\<in> carrier D \\<and> b \\<in> carrier D}\n    \\<subseteq> rel D", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<notin> carrier D; x \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {(aa, b).\n                                  ((aa, b) \\<in> rel D \\<or>\n                                   (aa = a \\<or> aa \\<in> carrier D) \\<and>\n                                   b = a) \\<and>\n                                  aa \\<in> carrier D \\<and>\n                                  b \\<in> carrier D}\n 2. a \\<notin> carrier D \\<Longrightarrow>\n    {(aa, b).\n     ((aa, b) \\<in> rel D \\<or>\n      (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n     aa \\<in> carrier D \\<and> b \\<in> carrier D}\n    \\<subseteq> rel D", "apply (cut_tac closed,\n        frule_tac c = x in subsetD[of \"rel D\" \"carrier D \\<times> carrier D\"],\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<notin> carrier D; x \\<in> rel D;\n        rel D \\<subseteq> carrier D \\<times> carrier D;\n        x \\<in> carrier D \\<times> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {(aa, b).\n                                  ((aa, b) \\<in> rel D \\<or>\n                                   (aa = a \\<or> aa \\<in> carrier D) \\<and>\n                                   b = a) \\<and>\n                                  aa \\<in> carrier D \\<and>\n                                  b \\<in> carrier D}\n 2. a \\<notin> carrier D \\<Longrightarrow>\n    {(aa, b).\n     ((aa, b) \\<in> rel D \\<or>\n      (aa = a \\<or> aa \\<in> carrier D) \\<and> b = a) \\<and>\n     aa \\<in> carrier D \\<and> b \\<in> carrier D}\n    \\<subseteq> rel D", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_adjunct_ord:\"\\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk> \\<Longrightarrow> \n          D = SIod (adjunct_ord D a) (Ssegment (adjunct_ord D a) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> D =\n                      SIod (adjunct_ord D a) (Ssegment (adjunct_ord D a) a)", "apply (simp add: carr_Ssegment_adjunct_ord[THEN sym, of \"D\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> D = SIod (adjunct_ord D a) (carrier D)", "apply (frule Order.Order_adjunct_ord[of \"D\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = SIod (adjunct_ord D a) (carrier D)", "apply (cut_tac Order.carrier_adjunct_ord[THEN sym, of \"D\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     carrier D \\<union> {a} = carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = SIod (adjunct_ord D a) (carrier D)\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply (cut_tac Un_upper1[of \"carrier D\" \"{a}\"], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = SIod (adjunct_ord D a) (carrier D)\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply (subst SIod_self_le[THEN sym, of \"adjunct_ord D a\" \"D\"],\n        assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>carrier D.\n                         \\<forall>b\\<in>carrier D.\n                            aa \\<preceq>\\<^bsub>D\\<^esub> b =\n                            aa \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> b\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = D\n 3. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply (rule ballI)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n        insert a (carrier D) = carrier (adjunct_ord D a);\n        carrier D \\<subseteq> carrier (adjunct_ord D a); aa \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b =\n                         aa \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> b\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = D\n 3. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply (frule_tac c = aa in subsetD[of \"carrier D\" \"carrier (adjunct_ord D a)\"],\n        assumption,\n       frule_tac c = b in subsetD[of \"carrier D\" \"carrier (adjunct_ord D a)\"],\n        assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n        insert a (carrier D) = carrier (adjunct_ord D a);\n        carrier D \\<subseteq> carrier (adjunct_ord D a); aa \\<in> carrier D;\n        b \\<in> carrier D; aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b =\n                         aa \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> b\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = D\n 3. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply (simp add:Order.le_rel[of \"adjunct_ord D a\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n        insert a (carrier D) = carrier (adjunct_ord D a);\n        carrier D \\<subseteq> carrier (adjunct_ord D a); aa \\<in> carrier D;\n        b \\<in> carrier D; aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b =\n                         ((aa, b) \\<in> rel (adjunct_ord D a))\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = D\n 3. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply (subst adjunct_ord_def, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n        insert a (carrier D) = carrier (adjunct_ord D a);\n        carrier D \\<subseteq> carrier (adjunct_ord D a); aa \\<in> carrier D;\n        b \\<in> carrier D; aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b =\n                         ((aa, b) \\<in> rel D \\<or> b = a)\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = D\n 3. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply (case_tac \"b = a\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n        insert a (carrier D) = carrier (adjunct_ord D a);\n        carrier D \\<subseteq> carrier (adjunct_ord D a); aa \\<in> carrier D;\n        b \\<in> carrier D; aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a); b \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b =\n                         ((aa, b) \\<in> rel D \\<or> b = a)\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = D\n 3. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n        insert a (carrier D) = carrier (adjunct_ord D a);\n        carrier D \\<subseteq> carrier (adjunct_ord D a); aa \\<in> carrier D;\n        b \\<in> carrier D; aa \\<in> carrier (adjunct_ord D a);\n        b \\<in> carrier (adjunct_ord D a); b \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b =\n                         ((aa, b) \\<in> rel D)\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = D\n 3. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply (simp add:Order.le_rel[of \"D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> D = D\n 2. \\<lbrakk>Order D; a \\<notin> carrier D; Order (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order D", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Torder_adjunction:\"\\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X)\\<rbrakk> \\<Longrightarrow> Torder (Iod D (X \\<union> {a}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D (X \\<union> {a}))", "apply (frule insert_sub[of \"X\" \"carrier D\" \"a\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n     insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D (X \\<union> {a}))", "apply (subst Torder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n     insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (X \\<union> {a})) \\<and>\n                      Torder_axioms (Iod D (X \\<union> {a}))", "apply (frule singleton_sub[of \"a\" \"carrier D\"],\n       frule Un_least[of \"X\" \"carrier D\" \"{a}\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (X \\<union> {a})) \\<and>\n                      Torder_axioms (Iod D (X \\<union> {a}))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (X \\<union> {a}))\n 2. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (Iod D (X \\<union> {a}))", "apply (simp add:Iod_Order[of \"insert a X\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (Iod D (X \\<union> {a}))", "apply (subst Torder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa b.\n                         aa \\<in> carrier\n                                   (Iod D\n                                     (X \\<union> {a})) \\<longrightarrow>\n                         b \\<in> carrier\n                                  (Iod D (X \\<union> {a})) \\<longrightarrow>\n                         aa \\<preceq>\\<^bsub>Iod D (X \\<union> {a})\\<^esub>\n                         b \\<or>\n                         b \\<preceq>\\<^bsub>Iod D (X \\<union> {a})\\<^esub>\n                         aa", "apply ((rule allI)+, (rule impI)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n        insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n        X \\<union> {a} \\<subseteq> carrier D;\n        aa \\<in> carrier (Iod D (X \\<union> {a}));\n        b \\<in> carrier (Iod D (X \\<union> {a}))\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>Iod D (X \\<union> {a})\\<^esub>\n                         b \\<or>\n                         b \\<preceq>\\<^bsub>Iod D (X \\<union> {a})\\<^esub>\n                         aa", "apply (simp only:Iod_carrier, simp add:Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n        aa = a \\<or> aa \\<in> X; b = a \\<or> b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq> b \\<or> b \\<preceq> aa", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n        b = a \\<or> b \\<in> X; aa = a\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n        b = a \\<or> b \\<in> X; aa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq> b \\<or> b \\<preceq> aa", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X); aa = a;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> a\n 2. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X); aa = a;\n        b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 3. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n        b = a \\<or> b \\<in> X; aa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq> b \\<or> b \\<preceq> aa", "apply (simp add:le_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X); aa = a;\n        b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n        b = a \\<or> b \\<in> X; aa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq> b \\<or> b \\<preceq> aa", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X);\n        b = a \\<or> b \\<in> X; aa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq> b \\<or> b \\<preceq> aa", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Torder (Iod D X); aa \\<in> X;\n        b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq> b \\<or> b \\<preceq> aa", "apply (simp add:Torder_def, simp add:Torder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a;\n        Order (Iod D X) \\<and>\n        (\\<forall>a.\n            a \\<in> carrier (Iod D X) \\<longrightarrow>\n            (\\<forall>b.\n                b \\<in> carrier (Iod D X) \\<longrightarrow>\n                a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or>\n                b \\<preceq>\\<^bsub>Iod D X\\<^esub> a));\n        aa \\<in> X; b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq> b \\<or> b \\<preceq> aa", "apply (simp add:Iod_carrier, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; aa \\<in> X; b \\<in> X;\n        Order (Iod D X);\n        \\<forall>a.\n           a \\<in> X \\<longrightarrow>\n           (\\<forall>b.\n               b \\<in> X \\<longrightarrow>\n               a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or>\n               b \\<preceq>\\<^bsub>Iod D X\\<^esub> a)\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq> b \\<or> b \\<preceq> aa", "apply (frule_tac a = aa in forall_spec, assumption,\n        thin_tac \"\\<forall>a. a \\<in> X \\<longrightarrow> (\\<forall>b. b \\<in> X \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D X\\<^esub> a)\",\n        frule_tac a = b in forall_spec, assumption,\n        thin_tac \"\\<forall>b. b \\<in> X \\<longrightarrow> aa \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D X\\<^esub> aa\",\n        simp add:Iod_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Torder_Sadjunction:\"\\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X)\\<rbrakk> \\<Longrightarrow> Torder (SIod D (X \\<union> {a}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Torder (SIod D X)\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D (X \\<union> {a}))", "apply (frule insert_sub[of \"X\" \"carrier D\" \"a\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n     insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D (X \\<union> {a}))", "apply (subst Torder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n     insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (SIod D (X \\<union> {a})) \\<and>\n                      Torder_axioms (SIod D (X \\<union> {a}))", "apply (frule singleton_sub[of \"a\" \"carrier D\"],\n       frule Un_least[of \"X\" \"carrier D\" \"{a}\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (SIod D (X \\<union> {a})) \\<and>\n                      Torder_axioms (SIod D (X \\<union> {a}))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (SIod D (X \\<union> {a}))\n 2. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (SIod D (X \\<union> {a}))", "apply (simp add:SIod_Order[of _ \"insert a X\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (SIod D (X \\<union> {a}))", "apply (subst Torder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n     insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n     X \\<union> {a} \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa b.\n                         aa \\<in> carrier\n                                   (SIod D\n                                     (X \\<union> {a})) \\<longrightarrow>\n                         b \\<in> carrier\n                                  (SIod D\n                                    (X \\<union> {a})) \\<longrightarrow>\n                         aa \\<preceq>\\<^bsub>SIod D (X \\<union> {a})\\<^esub>\n                         b \\<or>\n                         b \\<preceq>\\<^bsub>SIod D (X \\<union> {a})\\<^esub>\n                         aa", "apply ((rule allI)+, (rule impI)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        insert a X \\<subseteq> carrier D; {a} \\<subseteq> carrier D;\n        X \\<union> {a} \\<subseteq> carrier D;\n        aa \\<in> carrier (SIod D (X \\<union> {a}));\n        b \\<in> carrier (SIod D (X \\<union> {a}))\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>SIod D (X \\<union> {a})\\<^esub>\n                         b \\<or>\n                         b \\<preceq>\\<^bsub>SIod D (X \\<union> {a})\\<^esub>\n                         aa", "apply (simp only:SIod_carrier, simp add:SIod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        aa = a \\<or> aa \\<in> X; b = a \\<or> b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> aa", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        b = a \\<or> b \\<in> X; aa = a\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> a\n 2. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        b = a \\<or> b \\<in> X; aa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> aa", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        aa = a; b = a\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> a\n 2. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        aa = a; b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> a\n 3. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        b = a \\<or> b \\<in> X; aa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> aa", "apply (simp add:Order.le_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        aa = a; b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> a\n 2. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        b = a \\<or> b \\<in> X; aa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> aa", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        b = a \\<or> b \\<in> X; aa \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> aa", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Torder (SIod D X);\n        aa \\<in> X; b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> aa", "apply (simp add:Torder_def, simp add:Torder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D X) \\<and>\n        (\\<forall>a.\n            a \\<in> carrier (SIod D X) \\<longrightarrow>\n            (\\<forall>b.\n                b \\<in> carrier (SIod D X) \\<longrightarrow>\n                a \\<preceq>\\<^bsub>SIod D X\\<^esub> b \\<or>\n                b \\<preceq>\\<^bsub>SIod D X\\<^esub> a));\n        aa \\<in> X; b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> aa", "apply (simp add:SIod_carrier, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; aa \\<in> X;\n        b \\<in> X; Order (SIod D X);\n        \\<forall>a.\n           a \\<in> X \\<longrightarrow>\n           (\\<forall>b.\n               b \\<in> X \\<longrightarrow>\n               a \\<preceq>\\<^bsub>SIod D X\\<^esub> b \\<or>\n               b \\<preceq>\\<^bsub>SIod D X\\<^esub> a)\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> aa", "apply (frule_tac a = aa in forall_spec, assumption,\n       thin_tac \"\\<forall>a. a \\<in> X \\<longrightarrow> (\\<forall>b. b \\<in> X \\<longrightarrow> a \\<preceq>\\<^bsub>SIod D X\\<^esub> b \\<or> b \\<preceq>\\<^bsub>SIod D X\\<^esub> a)\",\n       frule_tac a = b in forall_spec, assumption,\n       thin_tac \"\\<forall>b. b \\<in> X \\<longrightarrow> aa \\<preceq>\\<^bsub>SIod D X\\<^esub> b \\<or> b \\<preceq>\\<^bsub>SIod D X\\<^esub> aa\",\n        simp add:SIod_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) Torder_adjunct_ord:\"a \\<notin> carrier D \\<Longrightarrow> \n                                       Torder (adjunct_ord D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow> Torder (adjunct_ord D a)", "apply (frule Order_adjunct_ord[of \"a\"],\n       cut_tac carrier_adjunct_ord[THEN sym, of a],\n       cut_tac Un_upper1[of \"carrier D\" \"{a}\"], simp,\n       frule Order.Torder_adjunction[of \"adjunct_ord D a\" \"carrier D\" a],\n       assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier (adjunct_ord D a)\n 2. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D.\n                         x \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> a\n 3. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod (adjunct_ord D a) (carrier D))\n 4. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Torder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (adjunct_ord D a)", "apply (simp add:carrier_adjunct_ord)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D.\n                         x \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> a\n 2. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod (adjunct_ord D a) (carrier D))\n 3. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Torder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (adjunct_ord D a)", "apply (cut_tac adjunct_ord_large_a[of a],\n        rule ballI, \n        frule_tac x = x in bspec, assumption,\n              thin_tac \"\\<forall>x\\<in>carrier D. x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a\",\n        cut_tac insertI1[of a \"carrier D\"], simp,\n        frule_tac c = x in subsetD[of \"carrier D\" \"carrier (adjunct_ord D a)\"],\n         assumption+,\n        simp add:Order.less_imp_le, rule Order,\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod (adjunct_ord D a) (carrier D))\n 2. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Torder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (adjunct_ord D a)", "apply (simp add:adjunct_ord_selfD[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Torder D\n 2. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Torder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (adjunct_ord D a)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Torder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (adjunct_ord D a)\n 2. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (simp add:Order.Iod_self[THEN sym, of \"adjunct_ord D a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> carrier D; Order (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (unfold_locales)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) well_ord_adjunction:\"\\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X)\\<rbrakk> \\<Longrightarrow> Worder (Iod D (X \\<union> {a}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D (X \\<union> {a}))", "apply (frule insert_sub[of \"X\" \"carrier D\" \"a\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n     insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D (X \\<union> {a}))", "apply (subst Worder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n     insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D (X \\<union> {a})) \\<and>\n                      Worder_axioms (Iod D (X \\<union> {a}))", "apply (simp add:Iod_Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D (insert a X)) \\<and>\n                      Worder_axioms (Iod D (insert a X))", "apply (frule_tac Torder_adjunction[of X a], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D X)\n 2. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n     Torder (Iod D (X \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D (insert a X)) \\<and>\n                      Worder_axioms (Iod D (insert a X))", "apply (simp add:Worder.Torder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n     Torder (Iod D (X \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D (insert a X)) \\<and>\n                      Worder_axioms (Iod D (insert a X))", "apply (simp add:Torder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n     Order (Iod D (insert a X)) \\<and>\n     Torder_axioms (Iod D (insert a X))\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (insert a X))", "apply (subst Worder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n     Order (Iod D (insert a X)) \\<and>\n     Torder_axioms (Iod D (insert a X))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Xa.\n                         Xa \\<subseteq> carrier (Iod D (insert a X)) \\<and>\n                         Xa \\<noteq> {} \\<longrightarrow>\n                         Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> carrier (Iod D (insert a X)) \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X))\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X))\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (cut_tac insert_inc1[of \"X\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (case_tac \"Xa \\<subseteq> X\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (simp only:Worder_def, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        Xa \\<subseteq> X; Torder (Iod D X); Worder_axioms (Iod D X);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (\n        simp only:Worder_axioms_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        Xa \\<subseteq> X; Torder (Iod D X);\n        \\<forall>Xa.\n           Xa \\<subseteq> carrier (Iod D X) \\<and>\n           Xa \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (Iod D X) Xa x);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (frule_tac a = Xa in forall_spec,\n        thin_tac \"\\<forall>Xa. Xa \\<subseteq> carrier (Iod D X) \\<and> Xa \\<noteq> {} \\<longrightarrow>\n               (\\<exists>x. minimum_elem (Iod D X) Xa x)\",\n        simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        Xa \\<subseteq> X; Torder (Iod D X);\n        \\<forall>Xa.\n           Xa \\<subseteq> carrier (Iod D X) \\<and>\n           Xa \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (Iod D X) Xa x);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        \\<exists>x. minimum_elem (Iod D X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (thin_tac \"\\<forall>Xa. Xa \\<subseteq> carrier (Iod D X) \\<and> Xa \\<noteq> {} \\<longrightarrow>\n               (\\<exists>x. minimum_elem (Iod D X) Xa x)\",\n        erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        Xa \\<subseteq> X; Torder (Iod D X); Xa \\<subseteq> insert a X;\n        Xa \\<noteq> {}; minimum_elem (Iod D X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (frule_tac X = Xa and a = x in Order.minimum_elem_sub[of \n         \"Iod D (insert a X)\" \"X\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        Xa \\<subseteq> X; Torder (Iod D X); Xa \\<subseteq> insert a X;\n        Xa \\<noteq> {}; minimum_elem (Iod D X) Xa x\\<rbrakk>\n       \\<Longrightarrow> X \\<subseteq> carrier (Iod D (insert a X))\n 2. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        Xa \\<subseteq> X; Torder (Iod D X); Xa \\<subseteq> insert a X;\n        Xa \\<noteq> {}; minimum_elem (Iod D X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Xa \\<subseteq> X\n 3. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        Xa \\<subseteq> X; Torder (Iod D X); Xa \\<subseteq> insert a X;\n        Xa \\<noteq> {}; minimum_elem (Iod D X) Xa x;\n        minimum_elem (Iod D (insert a X)) Xa x =\n        minimum_elem (Iod (Iod D (insert a X)) X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 4. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (cut_tac insert_inc1[of \"X\" \"a\"], simp add:Iod_carrier, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        Xa \\<subseteq> X; Torder (Iod D X); Xa \\<subseteq> insert a X;\n        Xa \\<noteq> {}; minimum_elem (Iod D X) Xa x;\n        minimum_elem (Iod D (insert a X)) Xa x =\n        minimum_elem (Iod (Iod D (insert a X)) X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (cut_tac insert_inc1[of \"X\" \"a\"],\n        simp add:Iod_sub_sub)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); Xa \\<subseteq> X;\n        Torder (Iod D X); Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        minimum_elem (Iod D X) Xa x; minimum_elem (Iod D (insert a X)) Xa x;\n        X \\<subseteq> insert a X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (erule conjE,\n       frule_tac A = Xa in insert_diff[of _ \"a\" \"X\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        Xa - {a} \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (case_tac \"Xa - {a} = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} = {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (frule_tac A = Xa in nonempty_ex, erule exE, simp, \n        frule_tac c = x and A = Xa and B = \"{a}\" in subsetD, assumption+,\n        simp, \n        frule_tac A = Xa in singleton_sub[of \"a\"],\n        frule_tac A = Xa and B = \"{a}\" in equalityI, assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; a \\<notin> X; x = a; Xa = {a}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) {a})\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; a \\<notin> X; x = a; Xa = {a}\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D (insert a X)\\<^esub> a\n 2. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (cut_tac insert_inc2[of \"a\" \"X\"],\n        simp add:Iod_le le_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Worder (Iod D X);\n        Order (Iod D (insert a X)); Torder_axioms (Iod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (simp only:Worder_def, (erule conjE)+,\n        simp only:Worder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        \\<not> Xa \\<subseteq> X; Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        Xa - {a} \\<subseteq> X; Xa - {a} \\<noteq> {}; Torder (Iod D X);\n        \\<forall>Xa.\n           Xa \\<subseteq> carrier (Iod D X) \\<and>\n           Xa \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (Iod D X) Xa x)\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (frule_tac a = \"Xa - {a}\" in forall_spec, \n        thin_tac \"\\<forall>Xa. Xa \\<subseteq> carrier (Iod D X) \\<and> Xa \\<noteq> {} \\<longrightarrow>\n               (\\<exists>x. minimum_elem (Iod D X) Xa x)\", simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        \\<not> Xa \\<subseteq> X; Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        Xa - {a} \\<subseteq> X; Xa - {a} \\<noteq> {}; Torder (Iod D X);\n        \\<forall>Xa.\n           Xa \\<subseteq> carrier (Iod D X) \\<and>\n           Xa \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (Iod D X) Xa x);\n        \\<exists>x. minimum_elem (Iod D X) (Xa - {a}) x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (thin_tac \"\\<forall>Xa. Xa \\<subseteq> carrier (Iod D X) \\<and> Xa \\<noteq> {} \\<longrightarrow>\n               (\\<exists>x. minimum_elem (Iod D X) Xa x)\", erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq> a; Order (Iod D (insert a X));\n        Torder_axioms (Iod D (insert a X)); X \\<subseteq> insert a X;\n        \\<not> Xa \\<subseteq> X; Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        Xa - {a} \\<subseteq> X; Xa - {a} \\<noteq> {}; Torder (Iod D X);\n        minimum_elem (Iod D X) (Xa - {a}) x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (insert a X)) Xa)", "apply (frule_tac Y = Xa and x = x in augmented_set_minimum[of \"X\" \"a\"],\n        assumption+, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma well_ord_Sadjunction:\"\\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X)\\<rbrakk> \\<Longrightarrow> Worder (SIod D (X \\<union> {a}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Worder (SIod D X)\\<rbrakk>\n    \\<Longrightarrow> Worder (SIod D (X \\<union> {a}))", "apply (frule insert_sub[of \"X\" \"carrier D\" \"a\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n     insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (SIod D (X \\<union> {a}))", "apply (subst Worder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n     insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D (X \\<union> {a})) \\<and>\n                      Worder_axioms (SIod D (X \\<union> {a}))", "apply (simp add:SIod_Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Worder (SIod D X)\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D (insert a X)) \\<and>\n                      Worder_axioms (SIod D (insert a X))", "apply (frule Torder_Sadjunction[of D X a], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Worder (SIod D X)\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D X)\n 2. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n     Torder (SIod D (X \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D (insert a X)) \\<and>\n                      Worder_axioms (SIod D (insert a X))", "apply (simp add:Worder.Torder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n     Torder (SIod D (X \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D (insert a X)) \\<and>\n                      Worder_axioms (SIod D (insert a X))", "apply (simp add:Torder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n     Order (SIod D (insert a X)) \\<and>\n     Torder_axioms (SIod D (insert a X))\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (SIod D (insert a X))", "apply (subst Worder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n     Order (SIod D (insert a X)) \\<and>\n     Torder_axioms (SIod D (insert a X))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Xa.\n                         Xa \\<subseteq> carrier (SIod D (insert a X)) \\<and>\n                         Xa \\<noteq> {} \\<longrightarrow>\n                         Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> carrier (SIod D (insert a X)) \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X));\n        Torder_axioms (SIod D (insert a X))\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X));\n        Torder_axioms (SIod D (insert a X))\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (cut_tac insert_inc1[of \"X\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (case_tac \"Xa \\<subseteq> X\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (simp only:Worder_def, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X; Torder (SIod D X);\n        Worder_axioms (SIod D X); Xa \\<subseteq> insert a X;\n        Xa \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (\n        simp only:Worder_axioms_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X; Torder (SIod D X);\n        \\<forall>Xa.\n           Xa \\<subseteq> carrier (SIod D X) \\<and>\n           Xa \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (SIod D X) Xa x);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (frule_tac a = Xa in forall_spec,\n        thin_tac \"\\<forall>Xa. Xa \\<subseteq> carrier (SIod D X) \\<and> Xa \\<noteq> {} \\<longrightarrow>\n               (\\<exists>x. minimum_elem (SIod D X) Xa x)\",\n        simp add:SIod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X; Torder (SIod D X);\n        \\<forall>Xa.\n           Xa \\<subseteq> carrier (SIod D X) \\<and>\n           Xa \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (SIod D X) Xa x);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        \\<exists>x. minimum_elem (SIod D X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (thin_tac \"\\<forall>Xa. Xa \\<subseteq> carrier (SIod D X) \\<and> Xa \\<noteq> {} \\<longrightarrow>\n               (\\<exists>x. minimum_elem (SIod D X) Xa x)\",\n        erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X; Torder (SIod D X);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        minimum_elem (SIod D X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (frule_tac X = Xa and a = x in minimum_elem_Ssub[of \n         \"SIod D (insert a X)\" \"X\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X; Torder (SIod D X);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        minimum_elem (SIod D X) Xa x\\<rbrakk>\n       \\<Longrightarrow> X \\<subseteq> carrier (SIod D (insert a X))\n 2. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X; Torder (SIod D X);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        minimum_elem (SIod D X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Xa \\<subseteq> X\n 3. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X; Torder (SIod D X);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        minimum_elem (SIod D X) Xa x;\n        minimum_elem (SIod D (insert a X)) Xa x =\n        minimum_elem (SIod (SIod D (insert a X)) X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 4. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (cut_tac insert_inc1[of \"X\" \"a\"], simp add:SIod_carrier, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; Xa \\<subseteq> X; Torder (SIod D X);\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        minimum_elem (SIod D X) Xa x;\n        minimum_elem (SIod D (insert a X)) Xa x =\n        minimum_elem (SIod (SIod D (insert a X)) X) Xa x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (cut_tac insert_inc1[of \"X\" \"a\"],\n        simp add:SIod_sub_sub)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        Xa \\<subseteq> X; Torder (SIod D X); Xa \\<subseteq> insert a X;\n        Xa \\<noteq> {}; minimum_elem (SIod D X) Xa x;\n        minimum_elem (SIod D (insert a X)) Xa x;\n        X \\<subseteq> insert a X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Xa \\<subseteq> insert a X \\<and> Xa \\<noteq> {};\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (erule conjE, frule_tac A = Xa in insert_diff[of _ \"a\" \"X\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {};\n        Xa - {a} \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (case_tac \"Xa - {a} = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} = {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (frule_tac A = Xa in nonempty_ex, erule exE, simp, \n        frule_tac c = x and A = Xa and B = \"{a}\" in subsetD, assumption+,\n        simp, \n        frule_tac A = Xa in singleton_sub[of \"a\"],\n        frule_tac A = Xa and B = \"{a}\" in equalityI, assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; a \\<notin> X; x = a; Xa = {a}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) {a})\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; a \\<notin> X; x = a; Xa = {a}\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>SIod D (insert a X)\\<^esub> a\n 2. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (cut_tac insert_inc2[of \"a\" \"X\"],\n        simp add:SIod_le Order.le_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a; Worder (SIod D X);\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (simp only:Worder_def, (erule conjE)+,\n        simp only:Worder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}; Torder (SIod D X);\n        \\<forall>Xa.\n           Xa \\<subseteq> carrier (SIod D X) \\<and>\n           Xa \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (SIod D X) Xa x)\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (frule_tac a = \"Xa - {a}\" in forall_spec, \n        thin_tac \"\\<forall>Xa. Xa \\<subseteq> carrier (SIod D X) \\<and> Xa \\<noteq> {} \\<longrightarrow>\n               (\\<exists>x. minimum_elem (SIod D X) Xa x)\", simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}; Torder (SIod D X);\n        \\<forall>Xa.\n           Xa \\<subseteq> carrier (SIod D X) \\<and>\n           Xa \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (SIod D X) Xa x);\n        \\<exists>x. minimum_elem (SIod D X) (Xa - {a}) x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (thin_tac \"\\<forall>Xa. Xa \\<subseteq> carrier (SIod D X) \\<and> Xa \\<noteq> {} \\<longrightarrow>\n               (\\<exists>x. minimum_elem (SIod D X) Xa x)\", erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Xa x.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Order (SIod D (insert a X)); Torder_axioms (SIod D (insert a X));\n        X \\<subseteq> insert a X; \\<not> Xa \\<subseteq> X;\n        Xa \\<subseteq> insert a X; Xa \\<noteq> {}; Xa - {a} \\<subseteq> X;\n        Xa - {a} \\<noteq> {}; Torder (SIod D X);\n        minimum_elem (SIod D X) (Xa - {a}) x\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (SIod D (insert a X)) Xa)", "apply (frule_tac Y = Xa and x = x in augmented_Sset_minimum[of \"D\" \"X\" \"a\"],\n        assumption+, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Worder_adjunct_ord:\"a \\<notin> carrier D \\<Longrightarrow> \n                                       Worder (adjunct_ord D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow> Worder (adjunct_ord D a)", "apply (frule Torder_adjunct_ord[of a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> carrier D; Torder (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder (adjunct_ord D a)", "apply (intro_locales)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D; Torder (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Order (adjunct_ord D a)\n 2. \\<lbrakk>a \\<notin> carrier D; Torder (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (adjunct_ord D a)\n 3. \\<lbrakk>a \\<notin> carrier D; Torder (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (simp add:Torder_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D; Torder (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (adjunct_ord D a)\n 2. \\<lbrakk>a \\<notin> carrier D; Torder (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (simp add:Torder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> carrier D; Torder (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (cut_tac carrier_adjunct_ord[THEN sym, of a],\n       cut_tac Un_upper1[of \"carrier D\" \"{a}\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> carrier D; Torder (adjunct_ord D a);\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (simp add:Torder_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (cut_tac insertI1[of a \"carrier D\" ])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D)\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (frule Order.well_ord_adjunction[of \"adjunct_ord D a\" \"carrier D\" a],\n        assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier (adjunct_ord D a)\n 2. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D.\n                         x \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> a\n 3. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D)\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod (adjunct_ord D a) (carrier D))\n 4. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D);\n     Worder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (frule sym, thin_tac \"insert a (carrier D) = carrier (adjunct_ord D a)\",\n        simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D.\n                         x \\<preceq>\\<^bsub>adjunct_ord D a\\<^esub> a\n 2. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D)\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod (adjunct_ord D a) (carrier D))\n 3. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D);\n     Worder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (cut_tac adjunct_ord_large_a[of a],\n        rule ballI, \n        frule_tac x = x in bspec, assumption,\n              thin_tac \"\\<forall>x\\<in>carrier D. x \\<prec>\\<^bsub>adjunct_ord D a\\<^esub> a\",\n        cut_tac insertI1[of a \"carrier D\"], simp,\n        frule_tac c = x in subsetD[of \"carrier D\" \"carrier (adjunct_ord D a)\"],\n         assumption+,\n        simp add:Order.less_imp_le, rule Order,\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D)\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod (adjunct_ord D a) (carrier D))\n 2. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D);\n     Worder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "apply (simp add:adjunct_ord_selfD[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder D\n 2. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D);\n     Worder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> insert a (carrier D);\n     Worder (Iod (adjunct_ord D a) (carrier D \\<union> {a}))\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (adjunct_ord D a)\n 2. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (simp add:Order.Iod_self[THEN sym, of \"adjunct_ord D a\"] Worder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> carrier D;\n     insert a (carrier D) = carrier (adjunct_ord D a);\n     carrier D \\<subseteq> carrier (adjunct_ord D a);\n     Order (adjunct_ord D a); Torder_axioms (adjunct_ord D a);\n     a \\<in> carrier (adjunct_ord D a)\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply unfold_locales"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \"Zorn's lemma\""], ["", "definition\n  Chain :: \"_ \\<Rightarrow> 'a set \\<Rightarrow> bool\" where\n  \"Chain D C \\<longleftrightarrow> C \\<subseteq> carrier D \\<and> Torder (Iod D C)\""], ["", "definition\n  upper_bound :: \"[_, 'a set, 'a] \\<Rightarrow> bool\"\n    (\"(3ub\\<index>/ _/ _)\" [100,101]100) where\n  \"ub\\<^bsub>D\\<^esub> S b \\<longleftrightarrow> b \\<in> carrier D \\<and> (\\<forall>s\\<in>S. s \\<preceq>\\<^bsub>D\\<^esub> b)\""], ["", "definition\n  \"inductive_set\" :: \"_ \\<Rightarrow> bool\" where\n  \"inductive_set D \\<longleftrightarrow> (\\<forall>C. (Chain D C \\<longrightarrow> (\\<exists>b. ub\\<^bsub>D\\<^esub> C b)))\""], ["", "definition\n  maximal_element :: \"[_, 'a] \\<Rightarrow> bool\"  (\"(maximal\\<index>/ _)\" [101]100) where\n  \"maximal\\<^bsub>D\\<^esub> m \\<longleftrightarrow> m \\<in> carrier D \\<and> (\\<forall>b\\<in>carrier D. m \\<preceq>\\<^bsub>D\\<^esub> b \\<longrightarrow> m = b)\""], ["", "definition\n  upper_bounds::\"[_, 'a set] \\<Rightarrow> 'a set\" where\n  \"upper_bounds D H = {x. ub\\<^bsub>D\\<^esub> H x}\""], ["", "definition\n  Sup :: \"[_, 'a set] \\<Rightarrow> 'a\" where\n  \"Sup D X = (THE x. minimum_elem D (upper_bounds D X) x)\""], ["", "definition\n  S_inductive_set :: \"_ \\<Rightarrow> bool\" where\n  \"S_inductive_set D \\<longleftrightarrow> (\\<forall>C. Chain D C \\<longrightarrow> \n    (\\<exists>x\\<in>carrier D. minimum_elem D (upper_bounds D C) x))\""], ["", "lemma (in Order) mem_upper_bounds:\"\\<lbrakk>X \\<subseteq> carrier D; b \\<in> carrier D; \n                 \\<forall>x\\<in>X. x \\<preceq> b\\<rbrakk> \\<Longrightarrow> ub X b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> ub X b", "apply (simp add:upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Torder_Chain:\"\\<lbrakk>X \\<subseteq> carrier D; Torder (Iod D X)\\<rbrakk>\n       \\<Longrightarrow> Chain D X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; Torder (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> Chain D X", "apply (simp add:Chain_def Torder_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Chain_Torder:\"Chain D X \\<Longrightarrow> \n                                   Torder (Iod D X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chain D X \\<Longrightarrow> Torder (Iod D X)", "apply (simp add:Chain_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Chain_sub:\"Chain D X \\<Longrightarrow> X \\<subseteq> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chain D X \\<Longrightarrow> X \\<subseteq> carrier D", "apply (simp add:Chain_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Chain_sub_Chain:\"\\<lbrakk>Chain D X; Y \\<subseteq> X \\<rbrakk> \\<Longrightarrow> Chain D Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Chain D X; Y \\<subseteq> X\\<rbrakk> \\<Longrightarrow> Chain D Y", "apply (frule Chain_sub[of \"X\"],\n       frule Chain_Torder[of \"X\"],\n       frule Torder.Iod_Torder[of \"Iod D X\" \"Y\"], simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Chain D X; Y \\<subseteq> X; X \\<subseteq> carrier D;\n     Torder (Iod D X); Torder (Iod (Iod D X) Y)\\<rbrakk>\n    \\<Longrightarrow> Chain D Y", "apply (simp add:Iod_sub_sub[of \"Y\" \"X\"],\n       frule subset_trans[of \"Y\" \"X\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Chain D X; Y \\<subseteq> X; X \\<subseteq> carrier D;\n     Torder (Iod D X); Torder (Iod D Y); Y \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Chain D Y", "apply (simp add:Torder_Chain[of \"Y\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) upper_bounds_sub:\"X \\<subseteq> carrier D \\<Longrightarrow> \n                           upper_bounds D X \\<subseteq> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> carrier D \\<Longrightarrow>\n    upper_bounds D X \\<subseteq> carrier D", "by (rule subsetI, simp add:upper_bounds_def upper_bound_def)"], ["", "lemma (in Order) Sup:\"\\<lbrakk>X \\<subseteq> carrier D; minimum_elem D (upper_bounds D X) a\\<rbrakk> \\<Longrightarrow>                        Sup D X = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (upper_bounds D X) a\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X = a", "apply (subst Sup_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (upper_bounds D X) a\\<rbrakk>\n    \\<Longrightarrow> The (minimum_elem D (upper_bounds D X)) = a", "apply (rule the_equality, assumption,\n       rule_tac ?a1.0 = x in minimum_elem_unique[of \"upper_bounds D X\" _ \"a\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        minimum_elem D (upper_bounds D X) a;\n        minimum_elem D (upper_bounds D X) x\\<rbrakk>\n       \\<Longrightarrow> upper_bounds D X \\<subseteq> carrier D\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        minimum_elem D (upper_bounds D X) a;\n        minimum_elem D (upper_bounds D X) x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D (upper_bounds D X) x\n 3. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        minimum_elem D (upper_bounds D X) a;\n        minimum_elem D (upper_bounds D X) x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D (upper_bounds D X) a", "apply (rule subsetI, thin_tac \"minimum_elem D (upper_bounds D X) a\",\n        thin_tac \"minimum_elem D (upper_bounds D X) x\",\n        simp add:upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        minimum_elem D (upper_bounds D X) a;\n        minimum_elem D (upper_bounds D X) x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D (upper_bounds D X) x\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        minimum_elem D (upper_bounds D X) a;\n        minimum_elem D (upper_bounds D X) x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D (upper_bounds D X) a", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Sup_mem:\"\\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b\\<rbrakk> \\<Longrightarrow> \n                  Sup D X \\<in> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> carrier D", "apply (frule upper_bounds_sub[of \"X\"],\n       frule minimum_elem_mem[of \"upper_bounds D X\" \"Sup D X\"],\n       simp add:Sup_def, rule theI')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n     upper_bounds D X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!x. minimum_elem D (upper_bounds D X) x\n 2. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n     upper_bounds D X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<in> upper_bounds D X\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> carrier D", "apply (rule ex_ex1I)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n     upper_bounds D X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. minimum_elem D (upper_bounds D X) x\n 2. \\<And>x y.\n       \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n        upper_bounds D X \\<subseteq> carrier D;\n        minimum_elem D (upper_bounds D X) x;\n        minimum_elem D (upper_bounds D X) y\\<rbrakk>\n       \\<Longrightarrow> x = y\n 3. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n     upper_bounds D X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<in> upper_bounds D X\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> carrier D", "apply (cut_tac ex_minimum)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n     upper_bounds D X \\<subseteq> carrier D;\n     \\<forall>X.\n        X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. minimum_elem D (upper_bounds D X) x\n 2. \\<And>x y.\n       \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n        upper_bounds D X \\<subseteq> carrier D;\n        minimum_elem D (upper_bounds D X) x;\n        minimum_elem D (upper_bounds D X) y\\<rbrakk>\n       \\<Longrightarrow> x = y\n 3. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n     upper_bounds D X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<in> upper_bounds D X\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> carrier D", "apply (frule_tac a = \"upper_bounds D X\" in forall_spec,\n        thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\",\n        simp, erule exE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        upper_bounds D X \\<subseteq> carrier D; ub X b\\<rbrakk>\n       \\<Longrightarrow> upper_bounds D X \\<noteq> {}\n 2. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n     upper_bounds D X \\<subseteq> carrier D;\n     \\<forall>X.\n        X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x. minimum_elem D X x);\n     \\<exists>x. minimum_elem D (upper_bounds D X) x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. minimum_elem D (upper_bounds D X) x\n 3. \\<And>x y.\n       \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n        upper_bounds D X \\<subseteq> carrier D;\n        minimum_elem D (upper_bounds D X) x;\n        minimum_elem D (upper_bounds D X) y\\<rbrakk>\n       \\<Longrightarrow> x = y\n 4. \\<lbrakk>X \\<subseteq> carrier D; \\<exists>b. ub X b;\n     upper_bounds D X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<in> upper_bounds D X\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> carrier D", "apply (rule_tac x = b in nonempty[of _ \"upper_bounds D X\"],\n       simp add:upper_bounds_def, assumption,\n       rule_tac ?a1.0 = x and ?a2.0 = y in minimum_elem_unique[of \n         \"upper_bounds D X\"], assumption+,\n       simp add:upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_sup:\"\\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk> \\<Longrightarrow>\n                             minimum_elem D (upper_bounds D X) (Sup D X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D (upper_bounds D X) (Algebra2.Sup D X)", "apply (simp add:S_inductive_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>C.\n                Chain D C \\<longrightarrow>\n                (\\<exists>x\\<in>carrier D.\n                    minimum_elem D (upper_bounds D C) x);\n     Chain D X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D (upper_bounds D X) (Algebra2.Sup D X)", "apply (frule_tac a = X in forall_spec, assumption,\n        thin_tac \"\\<forall>C. Chain D C \\<longrightarrow> (\\<exists>x\\<in>carrier D. minimum_elem D \n                     (upper_bounds D C) x)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Chain D X;\n     \\<exists>x\\<in>carrier D. minimum_elem D (upper_bounds D X) x\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D (upper_bounds D X) (Algebra2.Sup D X)", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Chain D X; x \\<in> carrier D;\n        minimum_elem D (upper_bounds D X) x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D (upper_bounds D X)\n                          (Algebra2.Sup D X)", "apply (frule Chain_sub[of \"X\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Chain D X; x \\<in> carrier D;\n        minimum_elem D (upper_bounds D X) x;\n        X \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D (upper_bounds D X)\n                          (Algebra2.Sup D X)", "apply (frule_tac a = x in  Sup[of \"X\" ], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Chain D X; x \\<in> carrier D;\n        minimum_elem D (upper_bounds D X) x; X \\<subseteq> carrier D;\n        Algebra2.Sup D X = x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D (upper_bounds D X)\n                          (Algebra2.Sup D X)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) adjunct_Chain:\"\\<lbrakk>Chain D X; b \\<in> carrier D; \\<forall>x\\<in>X. x \\<preceq> b\\<rbrakk> \\<Longrightarrow>\n                 Chain D (insert b X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Chain D X; b \\<in> carrier D;\n     \\<forall>x\\<in>X. x \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> Chain D (insert b X)", "apply (simp add:Chain_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; \\<forall>x\\<in>X. x \\<preceq> b;\n     X \\<subseteq> carrier D; Torder (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D (insert b X))", "apply (frule Torder_adjunction[of X b], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; \\<forall>x\\<in>X. x \\<preceq> b;\n     X \\<subseteq> carrier D; Torder (Iod D X);\n     Torder (Iod D (X \\<union> {b}))\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D (insert b X))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_sup_mem:\"\\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk> \\<Longrightarrow>\n                             Sup D X \\<in> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> carrier D", "apply (frule_tac  X = X in S_inductive_sup, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     minimum_elem D (upper_bounds D X) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> carrier D", "apply (simp add:minimum_elem_def, (erule conjE)+,\n       simp add:upper_bounds_def, simp add:upper_bound_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_Sup_min_bounds:\"\\<lbrakk>S_inductive_set D; Chain D X;\n       ub X b\\<rbrakk> \\<Longrightarrow>  Sup D X \\<preceq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X; ub X b\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<preceq> b", "apply (frule S_inductive_sup[of \"X\"], assumption+,\n       simp add:minimum_elem_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X; ub X b;\n     Algebra2.Sup D X \\<in> upper_bounds D X;\n     \\<forall>x\\<in>upper_bounds D X. Algebra2.Sup D X \\<preceq> x\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<preceq> b", "apply (frule_tac x = b in bspec,\n       simp add:upper_bounds_def, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_sup_bound:\"\\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk> \\<Longrightarrow>\n                                        \\<forall>x\\<in>X. x \\<preceq> (Sup D X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>X. x \\<preceq> Algebra2.Sup D X", "apply (frule_tac X = X in S_inductive_sup, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     minimum_elem D (upper_bounds D X) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>X. x \\<preceq> Algebra2.Sup D X", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        minimum_elem D (upper_bounds D X) (Algebra2.Sup D X);\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> Algebra2.Sup D X", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        Algebra2.Sup D X \\<in> upper_bounds D X \\<and>\n        (\\<forall>x\\<in>upper_bounds D X. Algebra2.Sup D X \\<preceq> x);\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> Algebra2.Sup D X", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X; x \\<in> X;\n        Algebra2.Sup D X \\<in> upper_bounds D X;\n        \\<forall>x\\<in>upper_bounds D X.\n           Algebra2.Sup D X \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> Algebra2.Sup D X", "apply (thin_tac \"\\<forall>x\\<in>upper_bounds D X.  Sup D X \\<preceq> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X; x \\<in> X;\n        Algebra2.Sup D X \\<in> upper_bounds D X\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> Algebra2.Sup D X", "apply (simp add:upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_Sup_in_ChainTr:\n \"\\<lbrakk>S_inductive_set D; Chain D X; c \\<in> carrier (Iod D (insert (Sup D X) X)); \n  Sup D X \\<notin> X;\n   \\<forall>y\\<in>carrier (Iod D (insert (Sup D X) X)). \n    c \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> Sup D X\\<rbrakk> \\<Longrightarrow> \n    c \\<in> upper_bounds D X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     c \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Algebra2.Sup D X \\<notin> X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X\\<rbrakk>\n    \\<Longrightarrow> c \\<in> upper_bounds D X", "apply (subst upper_bounds_def, simp add:upper_bound_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     c \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Algebra2.Sup D X \\<notin> X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X\\<rbrakk>\n    \\<Longrightarrow> c \\<in> carrier D \\<and>\n                      (\\<forall>s\\<in>X. s \\<preceq> c)", "apply (frule Chain_sub[of X],\n       frule S_inductive_sup_mem[of X], assumption+,\n       frule insert_sub[of X \"carrier D\" \"Sup D X\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     c \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Algebra2.Sup D X \\<notin> X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n     X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> c \\<in> carrier D \\<and>\n                      (\\<forall>s\\<in>X. s \\<preceq> c)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     c \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Algebra2.Sup D X \\<notin> X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n     X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> c \\<in> carrier D\n 2. \\<lbrakk>S_inductive_set D; Chain D X;\n     c \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Algebra2.Sup D X \\<notin> X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n     X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s\\<in>X. s \\<preceq> c", "apply (simp add:Iod_carrier,\n       frule Chain_sub[of X],\n       frule insert_sub[of X \"carrier D\" \"Sup D X\"], assumption,\n       erule disjE, simp, simp add:subsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     c \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Algebra2.Sup D X \\<notin> X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n     X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s\\<in>X. s \\<preceq> c", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        c \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n        Algebra2.Sup D X \\<notin> X;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n           c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                  Algebra2.Sup D X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        s \\<in> X\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> c", "apply (simp add:Iod_carrier, (erule conjE)+,\n        frule S_inductive_sup_bound[of X], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        c = Algebra2.Sup D X \\<or> c \\<in> X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        \\<forall>y\\<in>X.\n           c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                  Algebra2.Sup D X;\n        \\<forall>x\\<in>X. x \\<preceq> Algebra2.Sup D X\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> c", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        \\<forall>y\\<in>X.\n           c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                  Algebra2.Sup D X;\n        \\<forall>x\\<in>X. x \\<preceq> Algebra2.Sup D X; c \\<in> X\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> c", "apply (frule_tac x = s in bspec, assumption,\n        thin_tac \"\\<forall>y\\<in>X. c \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> y \\<longrightarrow>\n               \\<not> y \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> Sup D X\",\n        frule_tac x = s in bspec, assumption,\n        thin_tac \"\\<forall>x\\<in>X. x \\<preceq> Sup D X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> c", "apply (frule insert_sub[of X \"carrier D\" \"Sup D X\"], assumption+,\n        cut_tac subset_insertI[of X \"Sup D X\"],\n        frule_tac c = s in subsetD[of X \"insert (Sup D X) X\"], assumption+,\n        frule_tac c = c in subsetD[of X \"insert (Sup D X) X\"], assumption+,\n        frule Iod_Order[of \"insert (Sup D X) X\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        s \\<in> insert (Algebra2.Sup D X) X;\n        c \\<in> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X))\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> c", "apply (subst Iod_le[THEN sym, of \"insert (Sup D X) X\"], assumption+,\n        rule contrapos_pp, (simp del:insert_subset)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Torder_adjunction [of \"X\" \"Sup D X\"], assumption+,\n        rule S_inductive_sup_bound[of X], assumption+, simp add:Chain_Torder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (X \\<union> {Algebra2.Sup D X}))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = s and b = c in \n                  Torder.not_le_less[of \"Iod D (X \\<union> {Sup D X})\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (X \\<union> {Algebra2.Sup D X}))\\<rbrakk>\n       \\<Longrightarrow> s \\<in> carrier\n                                  (Iod D (X \\<union> {Algebra2.Sup D X}))\n 2. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (X \\<union> {Algebra2.Sup D X}))\\<rbrakk>\n       \\<Longrightarrow> c \\<in> carrier\n                                  (Iod D (X \\<union> {Algebra2.Sup D X}))\n 3. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (X \\<union> {Algebra2.Sup D X}));\n        (\\<not> s \\<preceq>\\<^bsub>Iod D (X \\<union> {Algebra2.Sup D X})\\<^esub>\n                c) =\n        c \\<prec>\\<^bsub>Iod D (X \\<union> {Algebra2.Sup D X})\\<^esub>\n        s\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_carrier, simp add:subsetD,\n        simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        Algebra2.Sup D X \\<longrightarrow>\n        \\<not> Algebra2.Sup D\n                X \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (X \\<union> {Algebra2.Sup D X}));\n        (\\<not> s \\<preceq>\\<^bsub>Iod D (X \\<union> {Algebra2.Sup D X})\\<^esub>\n                c) =\n        c \\<prec>\\<^bsub>Iod D (X \\<union> {Algebra2.Sup D X})\\<^esub>\n        s\\<rbrakk>\n       \\<Longrightarrow> False", "apply (thin_tac \"c \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> Sup D X \\<longrightarrow>\n         \\<not> Sup D X \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> Sup D X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X; c \\<in> X;\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s \\<longrightarrow>\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (X \\<union> {Algebra2.Sup D X}));\n        (\\<not> s \\<preceq>\\<^bsub>Iod D (X \\<union> {Algebra2.Sup D X})\\<^esub>\n                c) =\n        c \\<prec>\\<^bsub>Iod D (X \\<union> {Algebra2.Sup D X})\\<^esub>\n        s\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp del:insert_sub,\n        frule_tac a = s in \n        Torder.not_less_le[of \"Iod D (insert (Sup D X) X)\" _ \"Sup D X\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X; c \\<in> X;\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (insert (Algebra2.Sup D X) X));\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s\\<rbrakk>\n       \\<Longrightarrow> s \\<in> carrier\n                                  (Iod D (insert (Algebra2.Sup D X) X))\n 2. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X; c \\<in> X;\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (insert (Algebra2.Sup D X) X));\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D X\n                         \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X))\n 3. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X; c \\<in> X;\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (insert (Algebra2.Sup D X) X));\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub> s;\n        (\\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                Algebra2.Sup D X) =\n        Algebra2.Sup D\n         X \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule insert_sub[of X \"carrier D\" \"Sup D X\"], assumption, \n        simp add:Iod_carrier subsetD,\n        frule insert_sub[of X \"carrier D\" \"Sup D X\"], assumption,\n        simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X; c \\<in> X;\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<preceq> Algebra2.Sup D X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (insert (Algebra2.Sup D X) X));\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub> s;\n        (\\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                Algebra2.Sup D X) =\n        Algebra2.Sup D\n         X \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X; c \\<in> X;\n        Algebra2.Sup D\n         X \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        s;\n        s \\<preceq> Algebra2.Sup D X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X));\n        \\<not> s \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               c;\n        Torder (Iod D (insert (Algebra2.Sup D X) X));\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub> s;\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X; c \\<in> X; Algebra2.Sup D X \\<preceq> s;\n        s \\<preceq> Algebra2.Sup D X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X)); \\<not> s \\<preceq> c;\n        Torder (Iod D (insert (Algebra2.Sup D X) X));\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub> s;\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = s in subsetD[of X \"carrier D\"], assumption+,\n        frule_tac a = s and b = \"Sup D X\" in le_antisym, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D; Algebra2.Sup D X \\<in> carrier D;\n        s \\<in> X; c \\<in> X; Algebra2.Sup D X \\<preceq> s;\n        s \\<preceq> Algebra2.Sup D X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Order (Iod D (insert (Algebra2.Sup D X) X)); \\<not> s \\<preceq> c;\n        Torder (Iod D (insert (Algebra2.Sup D X) X));\n        c \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub> s;\n        \\<not> s \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n        s \\<in> carrier D; s = Algebra2.Sup D X\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_Sup_in_Chain:\"\\<lbrakk>S_inductive_set D; Chain D X;\n       ExPre (Iod D (insert (Sup D X) X)) (Sup D X)\\<rbrakk> \\<Longrightarrow> Sup D X \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> X", "apply (frule S_inductive_sup_mem[of X], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> X", "apply (frule Chain_sub[of X],\n       frule insert_sub[of X \"carrier D\" \"Sup D X\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X \\<in> X", "apply (rule contrapos_pp, (simp del:insert_subset)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule Iod_Order[of \"insert (Sup D X) X\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule Order.Pre_element[of \"Iod D (insert (Sup D X) X)\" \"Sup D X\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X))\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X\n                      \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X))\n 2. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X))\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n 3. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X)) \\<and>\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X \\<and>\n     \\<not> (\\<exists>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n                Pre (Iod D (insert (Algebra2.Sup D X) X))\n                 (Algebra2.Sup D\n                   X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                y \\<and>\n                y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X))\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n 2. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X)) \\<and>\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X \\<and>\n     \\<not> (\\<exists>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n                Pre (Iod D (insert (Algebra2.Sup D X) X))\n                 (Algebra2.Sup D\n                   X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                y \\<and>\n                y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X)) \\<and>\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X \\<and>\n     \\<not> (\\<exists>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n                Pre (Iod D (insert (Algebra2.Sup D X) X))\n                 (Algebra2.Sup D\n                   X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                y \\<and>\n                y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply ((erule conjE)+, simp del:insert_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        Pre (Iod D (insert (Algebra2.Sup D X) X))\n         (Algebra2.Sup D\n           X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule S_inductive_Sup_in_ChainTr[of X \n               \"Pre (Iod D (insert (Sup D X) X)) (Sup D X)\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        Pre (Iod D (insert (Algebra2.Sup D X) X))\n         (Algebra2.Sup D\n           X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> upper_bounds D X\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:upper_bounds_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D X) X)).\n        Pre (Iod D (insert (Algebra2.Sup D X) X))\n         (Algebra2.Sup D\n           X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n               Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X))\n           (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule S_inductive_Sup_min_bounds[of X \n               \"Pre (Iod D (insert (Sup D X) X)) (Sup D X)\"], assumption+,\n         thin_tac \"\\<forall>y\\<in>carrier (Iod D (insert (Sup D X) X)).\n        Pre (Iod D (insert (Sup D X) X)) (Sup D X) \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub>\n        y \\<longrightarrow>  \\<not> y \\<prec>\\<^bsub>Iod D (insert (Sup D X) X)\\<^esub> Sup D X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule Order.less_le_trans[of \"Iod D (insert (Sup D X) X)\" \n      \"Pre (Iod D (insert (Sup D X) X)) (Sup D X)\"\n      \"Sup D X\" \"Pre (Iod D (insert (Sup D X) X)) (Sup D X)\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n                      \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X))\n 2. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X\n                      \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X))\n 3. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n                      \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X))\n 4. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D\n                         X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                      Algebra2.Sup D X\n 5. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D\n                       X \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                      Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n 6. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X\n                      \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X))\n 2. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n                      \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X))\n 3. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D\n                         X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                      Algebra2.Sup D X\n 4. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D\n                       X \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                      Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n 5. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule insert_sub[of X \"carrier D\" \"Sup D X\"], assumption,\n        simp add:Iod_carrier)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n                      \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X))\n 2. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D\n                         X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                      Algebra2.Sup D X\n 3. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D\n                       X \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                      Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n 4. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D\n                       X \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                      Pre (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n 2. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule insert_sub[of X \"carrier D\" \"Sup D X\"], assumption,\n        simp add:Iod_carrier Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     ExPre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n     Algebra2.Sup D X \\<notin> X;\n     Order (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Algebra2.Sup D X;\n     ub X Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Algebra2.Sup D X \\<preceq>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X);\n     Pre (Iod D (insert (Algebra2.Sup D X) X))\n      (Algebra2.Sup D\n        X) \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n     Pre (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:oless_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_bounds_compare:\"\\<lbrakk>S_inductive_set D; Chain D X1;\n       Chain D X2; X1 \\<subseteq> X2\\<rbrakk> \\<Longrightarrow> upper_bounds D X2 \\<subseteq> upper_bounds D X1 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X1; Chain D X2;\n     X1 \\<subseteq> X2\\<rbrakk>\n    \\<Longrightarrow> upper_bounds D X2 \\<subseteq> upper_bounds D X1", "apply (rule subsetI,\n       simp add:upper_bounds_def upper_bound_def,\n       erule conjE, rule ballI,\n       frule_tac c = s in subsetD[of \"X1\" \"X2\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s.\n       \\<lbrakk>S_inductive_set D; Chain D X1; Chain D X2;\n        X1 \\<subseteq> X2; x \\<in> carrier D;\n        \\<forall>s\\<in>X2. s \\<preceq> x; s \\<in> X1; s \\<in> X2\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_sup_compare:\"\\<lbrakk>S_inductive_set D; Chain D X1;\n       Chain D X2; X1 \\<subseteq> X2\\<rbrakk> \\<Longrightarrow> Sup D X1 \\<preceq>  Sup D X2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X1; Chain D X2;\n     X1 \\<subseteq> X2\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X1 \\<preceq> Algebra2.Sup D X2", "apply (frule S_inductive_bounds_compare[of \"X1\" \"X2\"], assumption+,\n        frule Chain_sub[of \"X1\"], frule Chain_sub[of \"X2\"],\n        frule upper_bounds_sub[of \"X1\"], frule upper_bounds_sub[of \"X2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X1; Chain D X2; X1 \\<subseteq> X2;\n     upper_bounds D X2 \\<subseteq> upper_bounds D X1;\n     X1 \\<subseteq> carrier D; X2 \\<subseteq> carrier D;\n     upper_bounds D X1 \\<subseteq> carrier D;\n     upper_bounds D X2 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D X1 \\<preceq> Algebra2.Sup D X2", "apply (rule_tac s = \"Sup D X2\" and t = \"Sup D X1\" in \n       compare_minimum_elements[of \"upper_bounds D X2\" \"upper_bounds D X1\"],\n       assumption+,\n       simp add:S_inductive_sup, simp add:S_inductive_sup)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  Wa :: \"[_, 'a set, 'a \\<Rightarrow> 'a, 'a] \\<Rightarrow> bool\" where\n  \"Wa D W g a \\<longleftrightarrow> W \\<subseteq> carrier D \\<and> Worder (Iod D W) \\<and> a \\<in> W \\<and> (\\<forall>x\\<in>W. a \\<preceq>\\<^bsub>D\\<^esub> x) \\<and> \n    (\\<forall>x\\<in>W. (if (ExPre (Iod D W) x) then  g (Pre (Iod D W) x) = x else\n    (if a \\<noteq> x then Sup D (segment (Iod D W) x) = x else a = a)))\""], ["", "definition \n  WWa :: \"[_, 'a \\<Rightarrow> 'a, 'a] \\<Rightarrow> 'a set set\" where\n  \"WWa D g a = {W. Wa D W g a}\""], ["", "lemma (in Order) mem_of_WWa:\"\\<lbrakk>W \\<subseteq> carrier D; Worder (Iod D W); a \\<in> W;\n  (\\<forall>x\\<in>W. a \\<preceq> x); \n  (\\<forall>x\\<in>W. (if (ExPre (Iod D W) x) then  g (Pre (Iod D W) x) = x else\n  (if a \\<noteq> x then Sup D (segment (Iod D W) x) = x else a = a)))\\<rbrakk> \\<Longrightarrow>\n       W \\<in> WWa D g a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W \\<subseteq> carrier D; Worder (Iod D W); a \\<in> W;\n     \\<forall>x\\<in>W. a \\<preceq> x;\n     \\<forall>x\\<in>W.\n        if ExPre (Iod D W) x then g (Pre (Iod D W) x) = x\n        else if a \\<noteq> x then Algebra2.Sup D (segment (Iod D W) x) = x\n             else a = a\\<rbrakk>\n    \\<Longrightarrow> W \\<in> WWa D g a", "by (simp add:WWa_def, simp add:Wa_def)"], ["", "lemma (in Order) mem_WWa_then:\"W \\<in> WWa D g a \\<Longrightarrow> W \\<subseteq> carrier D \\<and> \n  Worder (Iod D W) \\<and> a \\<in> W \\<and> (\\<forall>x\\<in>W. a \\<preceq> x) \\<and> \n  (\\<forall>x\\<in>W. (if (ExPre (Iod D W) x) then  g (Pre (Iod D W) x) = x else\n  (if a \\<noteq> x then Sup D (segment (Iod D W) x) = x else a = a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<in> WWa D g a \\<Longrightarrow>\n    W \\<subseteq> carrier D \\<and>\n    Worder (Iod D W) \\<and>\n    a \\<in> W \\<and>\n    (\\<forall>x\\<in>W. a \\<preceq> x) \\<and>\n    (\\<forall>x\\<in>W.\n        if ExPre (Iod D W) x then g (Pre (Iod D W) x) = x\n        else if a \\<noteq> x then Algebra2.Sup D (segment (Iod D W) x) = x\n             else a = a)", "by (simp add:WWa_def Wa_def)"], ["", "lemma (in Order) mem_wwa_Worder:\"W \\<in> WWa D g a \\<Longrightarrow> Worder (Iod D W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<in> WWa D g a \\<Longrightarrow> Worder (Iod D W)", "by (simp add:WWa_def Wa_def)"], ["", "lemma (in Order) mem_WWa_sub_carrier:\"W \\<in> WWa D g a \\<Longrightarrow> W \\<subseteq> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<in> WWa D g a \\<Longrightarrow> W \\<subseteq> carrier D", "by (simp add:WWa_def Wa_def)"], ["", "lemma (in Order) Union_WWa_sub_carrier:\"\\<Union> (WWa D g a) \\<subseteq> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (WWa D g a) \\<subseteq> carrier D", "by (rule Union_least[of \"WWa D g a\" \"carrier D\"], simp add:mem_WWa_sub_carrier)"], ["", "lemma (in Order) mem_WWa_inc_a:\"W \\<in> WWa D g a \\<Longrightarrow> a \\<in> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<in> WWa D g a \\<Longrightarrow> a \\<in> W", "by (simp add:WWa_def Wa_def)"], ["", "lemma (in Order) mem_WWa_Chain:\"W \\<in> WWa D g a \\<Longrightarrow> Chain D W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<in> WWa D g a \\<Longrightarrow> Chain D W", "apply (simp add:Chain_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<in> WWa D g a \\<Longrightarrow>\n    W \\<subseteq> carrier D \\<and> Torder (Iod D W)", "apply (simp add:mem_WWa_sub_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<in> WWa D g a \\<Longrightarrow> Torder (Iod D W)", "apply (frule mem_wwa_Worder[of \"W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W \\<in> WWa D g a; Worder (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D W)", "apply (simp add:Worder.Torder)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Sup_adjunct_Sup:\"\\<lbrakk>S_inductive_set D; \n      f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x; \n      W \\<in> WWa D f a; Sup D W \\<notin> W\\<rbrakk>\n      \\<Longrightarrow> Sup D (insert (Sup D W) W) = Sup D W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D (insert (Algebra2.Sup D W) W) =\n                      Algebra2.Sup D W", "(** use \n             le_antisym\nAt first applying le_antisym, we see following four items should be proved.\n             Sup D W \\<in> carrier D\n             Sup D (insert (Sup D W) W) \\<in> carrier D\n             Sup D W \\<preceq> Sup D (insert (Sup D W) W)\n             Sup D (insert (Sup D W) W) \\<preceq> Sup D W\nTo show Sup D W \\<in> carrier D, we apply S_inductive_Sup_mem.     \n **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D (insert (Algebra2.Sup D W) W) =\n                      Algebra2.Sup D W", "apply (frule mem_WWa_Chain[of \"W\"],\n       frule S_inductive_sup_bound[of \"W\"], assumption,\n       frule mem_wwa_Worder[of \"W\"],\n       frule mem_WWa_sub_carrier[of \"W\"],\n       frule S_inductive_sup_mem[of \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W; Chain D W;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W; Worder (Iod D W);\n     W \\<subseteq> carrier D; Algebra2.Sup D W \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D (insert (Algebra2.Sup D W) W) =\n                      Algebra2.Sup D W", "apply (frule well_ord_adjunction[of \"W\" \"Sup D W\"], assumption+, simp,\n       frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+,\n       frule Worder.Torder[of \"Iod D (insert (Sup D W) W)\"],\n          frule Torder_Chain[of \"insert (Sup D W) W\"], assumption+,\n       frule S_inductive_sup_mem[of \"insert (Sup D W) W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W; Chain D W;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W; Worder (Iod D W);\n     W \\<subseteq> carrier D; Algebra2.Sup D W \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Torder (Iod D (insert (Algebra2.Sup D W) W));\n     Chain D (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D (insert (Algebra2.Sup D W) W) \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D (insert (Algebra2.Sup D W) W) =\n                      Algebra2.Sup D W", "apply (rule le_antisym[of \"Sup D (insert (Sup D W) W)\" \"Sup D W\"], assumption+,\n       rule S_inductive_Sup_min_bounds[of \"insert (Sup D W) W\" \"Sup D W\"],\n             assumption+,\n       simp add:upper_bound_def, simp add:le_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W; Chain D W;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W; Worder (Iod D W);\n     W \\<subseteq> carrier D; Algebra2.Sup D W \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Torder (Iod D (insert (Algebra2.Sup D W) W));\n     Chain D (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D (insert (Algebra2.Sup D W) W) \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D W \\<preceq>\n                      Algebra2.Sup D (insert (Algebra2.Sup D W) W)", "apply (rule S_inductive_sup_compare[of \"W\" \"insert (Sup D W) W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W; Chain D W;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W; Worder (Iod D W);\n     W \\<subseteq> carrier D; Algebra2.Sup D W \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Torder (Iod D (insert (Algebra2.Sup D W) W));\n     Chain D (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D (insert (Algebra2.Sup D W) W) \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> W \\<subseteq> insert (Algebra2.Sup D W) W", "apply (simp add:subset_insertI[of \"W\" \"Sup D W\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr1:\"a \\<in> carrier D \\<Longrightarrow> Worder (Iod D {a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier D \\<Longrightarrow> Worder (Iod D {a})", "apply intro_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. a \\<in> carrier D \\<Longrightarrow> Order (Iod D {a})\n 2. a \\<in> carrier D \\<Longrightarrow> Torder_axioms (Iod D {a})\n 3. a \\<in> carrier D \\<Longrightarrow> Worder_axioms (Iod D {a})", "apply (frule singleton_sub[of \"a\" \"carrier D\"],\n       rule Iod_Order[of \"{a}\"], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<in> carrier D \\<Longrightarrow> Torder_axioms (Iod D {a})\n 2. a \\<in> carrier D \\<Longrightarrow> Worder_axioms (Iod D {a})", "apply (simp add:Torder_axioms_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<in> carrier D \\<Longrightarrow>\n    \\<forall>aa.\n       aa \\<in> carrier (Iod D {a}) \\<longrightarrow>\n       (\\<forall>b.\n           b \\<in> carrier (Iod D {a}) \\<longrightarrow>\n           aa \\<preceq>\\<^bsub>Iod D {a}\\<^esub> b \\<or>\n           b \\<preceq>\\<^bsub>Iod D {a}\\<^esub> aa)\n 2. a \\<in> carrier D \\<Longrightarrow> Worder_axioms (Iod D {a})", "apply (rule allI, rule impI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a \\<in> carrier D; aa \\<in> carrier (Iod D {a});\n        b \\<in> carrier (Iod D {a})\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>Iod D {a}\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>Iod D {a}\\<^esub> aa\n 2. a \\<in> carrier D \\<Longrightarrow> Worder_axioms (Iod D {a})", "apply (simp add:Iod_carrier, simp add:Iod_le le_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier D \\<Longrightarrow> Worder_axioms (Iod D {a})", "apply (simp add:Worder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier D \\<Longrightarrow>\n    \\<forall>X.\n       X \\<subseteq> carrier (Iod D {a}) \\<and>\n       X \\<noteq> {} \\<longrightarrow>\n       (\\<exists>x. minimum_elem (Iod D {a}) X x)", "apply (rule allI, rule impI, erule conjE, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>a \\<in> carrier D; X \\<subseteq> {a}; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod D {a}) X x", "apply (frule_tac A = X in nonempty_ex, erule exE,\n        frule_tac c = x and A = X and B = \"{a}\" in subsetD, assumption+,\n        simp, \n        frule_tac A = X in singleton_sub[of \"a\"],\n        frule_tac A = X and B = \"{a}\" in equalityI, assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>a \\<in> carrier D; x = a; X = {a}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D {a}) {a})", "apply (simp add:minimum_elem_def Iod_le le_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr2:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n                         \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow> {a} \\<in> WWa D f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x\\<rbrakk>\n    \\<Longrightarrow> {a} \\<in> WWa D f a", "apply (simp add:WWa_def Wa_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x\\<rbrakk>\n    \\<Longrightarrow> (ExPre (Iod D {a}) a \\<longrightarrow>\n                       Worder (Iod D {a}) \\<and>\n                       a \\<preceq> a \\<and>\n                       f (Pre (Iod D {a}) a) = a) \\<and>\n                      (\\<not> ExPre (Iod D {a}) a \\<longrightarrow>\n                       Worder (Iod D {a}) \\<and> a \\<preceq> a)", "apply (simp add:Not_ExPre[of \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D {a}) \\<and> a \\<preceq> a", "apply (simp add:BNTr1 le_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr2_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow> \\<forall>x\\<in>W. a \\<preceq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W. a \\<preceq> x", "by (rule ballI, simp add:WWa_def Wa_def)"], ["", "lemma (in Order) BNTr3:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow> minimum_elem (Iod D W) W a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D W) W a", "(** a \\<in> W is required by minimum_elem_def and Iod_le *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D W) W a", "apply (frule mem_WWa_inc_a[of W])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     a \\<in> W\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D W) W a", "apply (subst minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     a \\<in> W\\<rbrakk>\n    \\<Longrightarrow> a \\<in> W \\<and>\n                      Ball W ((\\<preceq>\\<^bsub>Iod D W\\<^esub>) a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     a \\<in> W\\<rbrakk>\n    \\<Longrightarrow> Ball W ((\\<preceq>\\<^bsub>Iod D W\\<^esub>) a)", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; a \\<in> W; x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D W\\<^esub> x", "apply (frule mem_WWa_sub_carrier[of W f a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; a \\<in> W; x \\<in> W;\n        W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D W\\<^esub> x", "apply (frule BNTr2_1[of f a W], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; a \\<in> W; x \\<in> W; W \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. a \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D W\\<^esub> x", "apply (simp add:Iod_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Adjunct_segment_sub:\"\\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk> \\<Longrightarrow>\n       segment (Iod D (insert (Sup D X) X)) (Sup D X) \\<subseteq>  X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n                      \\<subseteq> X", "apply (frule S_inductive_sup_mem[of \"X\"], assumption+,\n        frule Chain_sub[of \"X\"],\n        frule insert_sub[of \"X\" \"carrier D\" \"Sup D X\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<in> carrier D;\n     X \\<subseteq> carrier D;\n     insert (Algebra2.Sup D X) X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X)\n                      \\<subseteq> X", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n        insert (Algebra2.Sup D X) X \\<subseteq> carrier D;\n        x \\<in> segment (Iod D (insert (Algebra2.Sup D X) X))\n                 (Algebra2.Sup D X)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply (simp add:segment_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n        x \\<in> (if Algebra2.Sup D X\n                    \\<notin> carrier (Iod D (insert (Algebra2.Sup D X) X))\n                 then carrier (Iod D (insert (Algebra2.Sup D X) X))\n                 else {x. x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                          Algebra2.Sup D X \\<and>\n                          x \\<in> carrier\n                                   (Iod D\n                                     (insert (Algebra2.Sup D X)\n X))})\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply (case_tac \"Sup D X \\<notin> carrier (Iod D (insert (Sup D X) X))\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D X) X));\n        Algebra2.Sup D X\n        \\<notin> carrier (Iod D (insert (Algebra2.Sup D X) X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n        x \\<in> (if Algebra2.Sup D X\n                    \\<notin> carrier (Iod D (insert (Algebra2.Sup D X) X))\n                 then carrier (Iod D (insert (Algebra2.Sup D X) X))\n                 else {x. x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                          Algebra2.Sup D X \\<and>\n                          x \\<in> carrier\n                                   (Iod D (insert (Algebra2.Sup D X) X))});\n        \\<not> Algebra2.Sup D X\n               \\<notin> carrier\n                         (Iod D (insert (Algebra2.Sup D X) X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X;\n        Algebra2.Sup D X \\<in> carrier D; X \\<subseteq> carrier D;\n        x \\<in> (if Algebra2.Sup D X\n                    \\<notin> carrier (Iod D (insert (Algebra2.Sup D X) X))\n                 then carrier (Iod D (insert (Algebra2.Sup D X) X))\n                 else {x. x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                          Algebra2.Sup D X \\<and>\n                          x \\<in> carrier\n                                   (Iod D (insert (Algebra2.Sup D X) X))});\n        \\<not> Algebra2.Sup D X\n               \\<notin> carrier\n                         (Iod D (insert (Algebra2.Sup D X) X))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply (simp add:Iod_carrier, erule conjE, simp add:oless_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Adjunct_segment_eq:\"\\<lbrakk>S_inductive_set D; Chain D X;\n                Sup D X \\<notin> X\\<rbrakk> \\<Longrightarrow>\n       segment (Iod D (insert (Sup D X) X)) (Sup D X) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X;\n     Algebra2.Sup D X \\<notin> X\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X) =\n                      X", "apply (frule Chain_sub[of \"X\"],\n       frule Adjunct_segment_sub[of \"X\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n     X \\<subseteq> carrier D;\n     segment (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<subseteq> X\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (insert (Algebra2.Sup D X) X))\n                       (Algebra2.Sup D X) =\n                      X", "apply (rule equalityI, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n     X \\<subseteq> carrier D;\n     segment (Iod D (insert (Algebra2.Sup D X) X)) (Algebra2.Sup D X)\n     \\<subseteq> X\\<rbrakk>\n    \\<Longrightarrow> X \\<subseteq> segment\n                                     (Iod D (insert (Algebra2.Sup D X) X))\n                                     (Algebra2.Sup D X)", "apply (frule S_inductive_sup_mem[of \"X\"], assumption+,\n       frule insert_sub[of \"X\" \"carrier D\" \"Sup D X\"], assumption+,\n       rule subsetI,\n       simp add:segment_def Iod_carrier,\n       cut_tac subset_insertI[of \"X\" \"Sup D X\"],\n       cut_tac insertI1[of \"Sup D X\" \"X\"],\n       frule_tac c = x in subsetD[of \"X\" \"insert (Sup D X) X\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D;\n        {x. x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n            Algebra2.Sup D X \\<and>\n            (x = Algebra2.Sup D X \\<or> x \\<in> X)}\n        \\<subseteq> X;\n        Algebra2.Sup D X \\<in> carrier D; x \\<in> X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        Algebra2.Sup D X \\<in> insert (Algebra2.Sup D X) X;\n        x \\<in> insert (Algebra2.Sup D X) X\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n                         Algebra2.Sup D X", "apply (simp add:Iod_less[of \"insert (Sup D X) X\"],\n       frule S_inductive_sup_bound[of \"X\"], assumption+,\n       frule_tac x = x in bspec, assumption+,\n       thin_tac \"\\<forall>x\\<in>X. x \\<preceq> Sup D X\",\n       simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D; Chain D X; Algebra2.Sup D X \\<notin> X;\n        X \\<subseteq> carrier D;\n        {x. x \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D X) X)\\<^esub>\n            Algebra2.Sup D X \\<and>\n            x \\<noteq> Algebra2.Sup D X \\<and>\n            (x = Algebra2.Sup D X \\<or> x \\<in> X)}\n        \\<subseteq> X;\n        Algebra2.Sup D X \\<in> carrier D; x \\<in> X;\n        X \\<subseteq> insert (Algebra2.Sup D X) X;\n        x \\<preceq> Algebra2.Sup D X\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Algebra2.Sup D X", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  fixp :: \"['a \\<Rightarrow> 'a, 'a] \\<Rightarrow> bool\" where\n  \"fixp f a \\<longleftrightarrow> f a = a\""], ["", "(** a is a fixed point of f **)"], ["", "lemma (in Order) fixp_same:\"\\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1; \n b \\<in> carrier D; ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n \\<forall>u\\<in>segment (Iod D W1) t. fixp g u\\<rbrakk> \\<Longrightarrow> \n          segment (Iod D W1) t = segment (Iod D W2) (g t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (frule Iod_Order[of \"W1\"],\n        frule Iod_Order[of \"W2\"],\n        frule Order.segment_sub[of \"Iod D W1\" \"t\"],\n        frule Order.segment_sub[of \"Iod D W2\" \"b\"],\n        frule Order.Iod_Order[of \"Iod D W2\" \"segment (Iod D W2) b\"], \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> carrier (Iod D W1);\n     segment (Iod D W2) b \\<subseteq> carrier (Iod D W2);\n     Order (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (frule Order.ord_isom_segment_segment[of \"Iod D W1\" \n               \"Iod (Iod D W2) (segment (Iod D W2) b)\" g t], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> carrier (Iod D W1);\n     segment (Iod D W2) b \\<subseteq> carrier (Iod D W2);\n     Order (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> t \\<in> carrier (Iod D W1)\n 2. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> carrier (Iod D W1);\n     segment (Iod D W2) b \\<subseteq> carrier (Iod D W2);\n     Order (Iod (Iod D W2) (segment (Iod D W2) b));\n     ord_isom (Iod (Iod D W1) (segment (Iod D W1) t))\n      (Iod (Iod (Iod D W2) (segment (Iod D W2) b))\n        (segment (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)))\n      (restrict g\n        (carrier (Iod (Iod D W1) (segment (Iod D W1) t))))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (simp add:Iod_carrier, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b));\n     ord_isom (Iod (Iod D W1) (segment (Iod D W1) t))\n      (Iod (Iod (Iod D W2) (segment (Iod D W2) b))\n        (segment (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)))\n      (restrict g\n        (carrier (Iod (Iod D W1) (segment (Iod D W1) t))))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (frule Order.ord_isom_mem[of \"Iod D W1\" \n              \"Iod (Iod D W2) (segment (Iod D W2) b)\" g t], assumption+,\n               simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b));\n     ord_isom (Iod (Iod D W1) (segment (Iod D W1) t))\n      (Iod (Iod (Iod D W2) (segment (Iod D W2) b))\n        (segment (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)))\n      (restrict g (carrier (Iod (Iod D W1) (segment (Iod D W1) t))));\n     g t \\<in> carrier (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (frule Order.Iod_segment_segment[of \"Iod D W2\" \"g t\" b],\n                           assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b));\n     ord_isom (Iod (Iod D W1) (segment (Iod D W1) t))\n      (Iod (Iod D W2) (segment (Iod D W2) (g t)))\n      (restrict g (carrier (Iod (Iod D W1) (segment (Iod D W1) t))));\n     g t \\<in> carrier (Iod (Iod D W2) (segment (Iod D W2) b));\n     Iod (Iod (Iod D W2) (segment (Iod D W2) b))\n      (segment (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)) =\n     Iod (Iod D W2) (segment (Iod D W2) (g t))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (simp add:Iod_sub_sub[of \"segment (Iod D W1) t\" W1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod (Iod D W2) (segment (Iod D W2) (g t)))\n      (restrict g (carrier (Iod D (segment (Iod D W1) t))));\n     g t \\<in> carrier (Iod (Iod D W2) (segment (Iod D W2) b));\n     Iod (Iod (Iod D W2) (segment (Iod D W2) b))\n      (segment (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)) =\n     Iod (Iod D W2) (segment (Iod D W2) (g t))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (frule Order.segment_sub [of \"Iod (Iod D W2) \n                                        (segment (Iod D W2) b)\" \"g t\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod (Iod D W2) (segment (Iod D W2) (g t)))\n      (restrict g (carrier (Iod D (segment (Iod D W1) t))));\n     g t \\<in> carrier (Iod (Iod D W2) (segment (Iod D W2) b));\n     Iod (Iod (Iod D W2) (segment (Iod D W2) b))\n      (segment (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)) =\n     Iod (Iod D W2) (segment (Iod D W2) (g t));\n     segment (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)\n     \\<subseteq> carrier (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (simp add:Iod_sub_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod (Iod D W2) (segment (Iod D W2) (g t)))\n      (restrict g (carrier (Iod D (segment (Iod D W1) t))));\n     g t \\<in> carrier (Iod D (segment (Iod D W2) b));\n     Iod (Iod D (segment (Iod D W2) b))\n      (segment (Iod D (segment (Iod D W2) b)) (g t)) =\n     Iod (Iod D W2) (segment (Iod D W2) (g t));\n     segment (Iod D (segment (Iod D W2) b)) (g t)\n     \\<subseteq> carrier (Iod D (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (frule subset_trans[of \"segment (Iod D W2) b\" W2 \"carrier D\"],\n                     assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod (Iod D W2) (segment (Iod D W2) (g t)))\n      (restrict g (carrier (Iod D (segment (Iod D W1) t))));\n     g t \\<in> carrier (Iod D (segment (Iod D W2) b));\n     Iod (Iod D (segment (Iod D W2) b))\n      (segment (Iod D (segment (Iod D W2) b)) (g t)) =\n     Iod (Iod D W2) (segment (Iod D W2) (g t));\n     segment (Iod D (segment (Iod D W2) b)) (g t)\n     \\<subseteq> carrier (Iod D (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod (Iod D W2) (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     Iod (Iod D (segment (Iod D W2) b))\n      (segment (Iod D (segment (Iod D W2) b)) (g t)) =\n     Iod (Iod D W2) (segment (Iod D W2) (g t));\n     segment (Iod D (segment (Iod D W2) b)) (g t)\n     \\<subseteq> segment (Iod D W2) b;\n     segment (Iod D W2) b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (frule Order.segment_sub[of \"Iod D W2\" \"g t\"], \n              simp add:Iod_carrier[of W2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod (Iod D W2) (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     Iod (Iod D (segment (Iod D W2) b))\n      (segment (Iod D (segment (Iod D W2) b)) (g t)) =\n     Iod (Iod D W2) (segment (Iod D W2) (g t));\n     segment (Iod D (segment (Iod D W2) b)) (g t)\n     \\<subseteq> segment (Iod D W2) b;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> W2\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (simp add:Iod_sub_sub[of \"segment (Iod D W2) (g t)\" W2],\n              thin_tac \"Iod (Iod D (segment (Iod D W2) b))\n                       (segment (Iod D (segment (Iod D W2) b)) (g t)) =\n                        Iod D (segment (Iod D W2) (g t))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod D (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     segment (Iod D (segment (Iod D W2) b)) (g t)\n     \\<subseteq> segment (Iod D W2) b;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> W2\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (frule subset_trans[of \"segment (Iod D W1) t\" W1 \"carrier D\"],\n              assumption+,\n              frule subset_trans[of \"segment (Iod D W2) (g t)\" W2 \"carrier D\"],\n              assumption+,\n              frule Iod_Order[of \"segment (Iod D W1) t\"],\n              frule Iod_Order[of \"segment (Iod D W2) (g t)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n     Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod D (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     segment (Iod D (segment (Iod D W2) b)) (g t)\n     \\<subseteq> segment (Iod D W2) b;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> W2;\n     segment (Iod D W1) t \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W1) t));\n     Order (Iod D (segment (Iod D W2) (g t)))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (thin_tac \"segment (Iod D (segment (Iod D W2) b)) (g t) \\<subseteq>\n                          segment (Iod D W2) b\",\n              thin_tac \"segment (Iod D W2) b \\<subseteq> carrier D\",\n              thin_tac \"segment (Iod D W2) (g t) \\<subseteq> W2\",\n              thin_tac \"ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D; \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n     Order (Iod D W1); Order (Iod D W2);\n     segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod D (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     segment (Iod D W1) t \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W1) t));\n     Order (Iod D (segment (Iod D W2) (g t)))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t = segment (Iod D W2) (g t)", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D; \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n     Order (Iod D W1); Order (Iod D W2);\n     segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod D (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     segment (Iod D W1) t \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W1) t));\n     Order (Iod D (segment (Iod D W2) (g t)))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W1) t\n                      \\<subseteq> segment (Iod D W2) (g t)\n 2. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D; \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n     Order (Iod D W1); Order (Iod D W2);\n     segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod D (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     segment (Iod D W1) t \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W1) t));\n     Order (Iod D (segment (Iod D W2) (g t)))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W2) (g t)\n                      \\<subseteq> segment (Iod D W1) t", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D W2) (g t)\n 2. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D; \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n     Order (Iod D W1); Order (Iod D W2);\n     segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod D (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     segment (Iod D W1) t \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W1) t));\n     Order (Iod D (segment (Iod D W2) (g t)))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W2) (g t)\n                      \\<subseteq> segment (Iod D W1) t", "apply (frule_tac a = x in Order.ord_isom_mem[of \"Iod D (segment (Iod D W1) t)\"\n       \"Iod D (segment (Iod D W2) (g t))\" \n         \"restrict g (carrier (Iod D (segment (Iod D W1) t)))\"], assumption+,\n        simp add:Iod_carrier, simp add:Iod_carrier, simp add:fixp_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. g u = u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W1) t;\n        (if x \\<in> carrier (Iod D (segment (Iod D W1) t)) then g x\n         else undefined)\n        \\<in> carrier (Iod D (segment (Iod D W2) (g t)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D W2) (g t)\n 2. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D; \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n     Order (Iod D W1); Order (Iod D W2);\n     segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod D (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     segment (Iod D W1) t \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W1) t));\n     Order (Iod D (segment (Iod D W2) (g t)))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W2) (g t)\n                      \\<subseteq> segment (Iod D W1) t", "apply (metis Order.Iod_carrier [OF Order_axioms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D; t \\<in> W1;\n     b \\<in> carrier D; \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n     Order (Iod D W1); Order (Iod D W2);\n     segment (Iod D W1) t \\<subseteq> W1;\n     segment (Iod D W2) b \\<subseteq> W2;\n     Order (Iod D (segment (Iod D W2) b));\n     ord_isom (Iod D (segment (Iod D W1) t))\n      (Iod D (segment (Iod D W2) (g t)))\n      (restrict g (segment (Iod D W1) t));\n     g t \\<in> segment (Iod D W2) b;\n     segment (Iod D W1) t \\<subseteq> carrier D;\n     segment (Iod D W2) (g t) \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W1) t));\n     Order (Iod D (segment (Iod D W2) (g t)))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W2) (g t)\n                      \\<subseteq> segment (Iod D W1) t", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D W1) t", "apply (frule_tac b = x in Order.ord_isom_surj[of \n         \"Iod D (segment (Iod D W1) t)\" \"Iod D (segment (Iod D W2) (g t))\" \n         \"restrict g (carrier (Iod D (segment (Iod D W1) t)))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t)\\<rbrakk>\n       \\<Longrightarrow> Order (Iod D (segment (Iod D W2) (g t)))\n 2. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t)\\<rbrakk>\n       \\<Longrightarrow> ord_isom (Iod D (segment (Iod D W1) t))\n                          (Iod D (segment (Iod D W2) (g t)))\n                          (restrict g\n                            (carrier (Iod D (segment (Iod D W1) t))))\n 3. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D (segment (Iod D W2) (g t)))\n 4. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t);\n        \\<exists>a\\<in>carrier (Iod D (segment (Iod D W1) t)).\n           x =\n           restrict g (carrier (Iod D (segment (Iod D W1) t))) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D W1) t", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t)\\<rbrakk>\n       \\<Longrightarrow> ord_isom (Iod D (segment (Iod D W1) t))\n                          (Iod D (segment (Iod D W2) (g t)))\n                          (restrict g\n                            (carrier (Iod D (segment (Iod D W1) t))))\n 2. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D (segment (Iod D W2) (g t)))\n 3. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t);\n        \\<exists>a\\<in>carrier (Iod D (segment (Iod D W1) t)).\n           x =\n           restrict g (carrier (Iod D (segment (Iod D W1) t))) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D W1) t", "apply (metis Order.Iod_carrier [OF Order_axioms])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D (segment (Iod D W2) (g t)))\n 2. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t);\n        \\<exists>a\\<in>carrier (Iod D (segment (Iod D W1) t)).\n           x =\n           restrict g (carrier (Iod D (segment (Iod D W1) t))) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D W1) t", "apply (metis Order.Iod_carrier [OF Order_axioms] Order.segment_free [OF Order_axioms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        t \\<in> W1; b \\<in> carrier D;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u; Order (Iod D W1);\n        Order (Iod D W2); segment (Iod D W1) t \\<subseteq> W1;\n        segment (Iod D W2) b \\<subseteq> W2;\n        Order (Iod D (segment (Iod D W2) b));\n        ord_isom (Iod D (segment (Iod D W1) t))\n         (Iod D (segment (Iod D W2) (g t)))\n         (restrict g (segment (Iod D W1) t));\n        g t \\<in> segment (Iod D W2) b;\n        segment (Iod D W1) t \\<subseteq> carrier D;\n        segment (Iod D W2) (g t) \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) t));\n        Order (Iod D (segment (Iod D W2) (g t)));\n        x \\<in> segment (Iod D W2) (g t);\n        \\<exists>a\\<in>carrier (Iod D (segment (Iod D W1) t)).\n           x =\n           restrict g (carrier (Iod D (segment (Iod D W1) t))) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D W1) t", "apply (metis Order.Iod_carrier [OF Order_axioms] fixp_def restrict_apply)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr4_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g\\<rbrakk> \\<Longrightarrow> \n     \\<forall>x\\<in>W1. g x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x", "apply (frule mem_wwa_Worder[of \"W1\" \"f\" \"a\"],\n        frule mem_wwa_Worder[of \"W2\" \"f\" \"a\"],\n        frule Worder.Order[of \"Iod D W2\"],\n        frule mem_WWa_sub_carrier[of \"W2\" \"f\" \"a\"],\n        frule mem_WWa_sub_carrier[of \"W1\" \"f\" \"a\"],\n        cut_tac  Worder.segment_Worder[of \"Iod D W2\" \"b\"],\n        simp add:Worder.Order)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (cut_tac Order.segment_sub[of \"Iod D W2\" \"b\"],\n                   simp add:Iod_carrier,\n         frule subset_trans[of \"segment (Iod D W2) b\" \"W2\" \"carrier D\"],\n                   assumption+,\n         frule Iod_Order[of \"segment (Iod D W2) b\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule Worder.Order[of \"Iod D W1\"],\n         frule Order.ord_isom_onto[of \"Iod D W1\" \n                      \"Iod D (segment (Iod D W2) b)\" \"g\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` carrier (Iod D W1) =\n     carrier (Iod D (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "(** transfinite induction **)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` carrier (Iod D W1) =\n     carrier (Iod D (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule Order.ord_isom_minimum[of \"Iod D W1\" \n         \"Iod D (segment (Iod D W2) b)\" \"g\" \"W1\" \"a\"], assumption+,\n         simp add:Iod_carrier, simp add:Iod_carrier mem_WWa_inc_a,\n         simp add:BNTr3)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` carrier (Iod D W1) = carrier (Iod D (segment (Iod D W2) b));\n     minimum_elem (Iod D (segment (Iod D W2) b)) (g ` W1) (g a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule Order.ord_isom_onto[of \"Iod D W1\" \n                      \"Iod D (segment (Iod D W2) b)\" \"g\"], assumption+,\n        simp add:Iod_carrier, frule Worder.Torder[of \"Iod D W2\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b;\n     minimum_elem (Iod D (segment (Iod D W2) b)) (segment (Iod D W2) b)\n      (g a);\n     Torder (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (simp add:minimum_elem_sub[THEN sym, of \"segment (Iod D W2) b\" \n                           \"segment (Iod D W2) b\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b;\n     minimum_elem D (segment (Iod D W2) b) (g a); Torder (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (simp add:minimum_elem_sub[of \"W2\" \"segment (Iod D W2) b\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b;\n     minimum_elem (Iod D W2) (segment (Iod D W2) b) (g a);\n     Torder (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule Torder.minimum_segment_of_sub[of \"Iod D W2\" \"W2\" \"b\" \"g a\"],\n        simp add:Iod_carrier, cut_tac subset_self[of \"W2\"],\n        simp add:Iod_sub_sub[of \"W2\" \"W2\"],\n         thin_tac \"minimum_elem (Iod D W2) (segment (Iod D W2) b) (g a)\",\n        frule BNTr3[of \"f\" \"a\" \"W2\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 (g a); minimum_elem (Iod D W2) W2 a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule Worder.Order[of \"Iod D W2\"],\n        frule Order.minimum_elem_unique[of \"Iod D W2\" \"W2\" \"g a\" \"a\"],\n         simp add:Iod_carrier, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod D (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 (g a); minimum_elem (Iod D W2) W2 a;\n     Order (Iod D W2); g a = a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (simp add:Iod_sub_sub[THEN sym, of \"segment (Iod D W2) b\" \"W2\"],\n        frule Worder.transfinite_induction[of \"Iod D W1\" \"a\" \"fixp g\"],\n        simp add:Iod_carrier, simp add:BNTr3, simp add:fixp_def,\n        rule ballI, rule impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n        t \\<in> carrier (Iod D W1);\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac a = t in Worder_ord_isom_mem[of \"Iod D W1\" \n          \"Iod (Iod D W2) (segment (Iod D W2) b)\" \"g\"], assumption+,\n        frule Iod_carrier[THEN sym, of \"W2\"],\n        frule subset_trans[of \"segment (Iod D W2) b\" \"W2\" \n                        \"carrier (Iod D W2)\"], simp,\n        thin_tac \"W2 = carrier (Iod D W2)\",\n        simp add:Order.Iod_carrier[of \"Iod D W2\" \"segment (Iod D W2) b\"],\n        frule_tac c = \"g t\" in subsetD[of \"segment (Iod D W2) b\" \n                                   \"carrier (Iod D W2)\"], assumption+,\n        simp add:Iod_carrier)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (case_tac \"t = a\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t = a\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (simp add:fixp_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (case_tac \"ExPre (Iod D W1) t\",\n        frule_tac a = t in Worder.ord_isom_Pre1[of \"Iod D W1\" \n                  \"Iod (Iod D W2) (segment (Iod D W2) b)\" _ \"g\"], assumption+,\n        simp add:Iod_carrier, assumption+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac a = t in Worder.ord_isom_Pre2[of \"Iod D W1\"\n            \"Iod (Iod D W2) (segment (Iod D W2) b)\" _ \"g\"], assumption+,\n       simp add:Iod_carrier, assumption+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) =\n        Pre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac a = t in Order.Pre_in_segment[of \"Iod D W1\"],\n        simp add:Iod_carrier, assumption)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) =\n        Pre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        Pre (Iod D W1) t \\<in> segment (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac x = \"Pre (Iod D W1) t\" in bspec, assumption,\n        thin_tac \"\\<forall>u\\<in>segment (Iod D W1) t. fixp g u\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) =\n        Pre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        Pre (Iod D W1) t \\<in> segment (Iod D W1) t;\n        fixp g (Pre (Iod D W1) t)\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (simp add:fixp_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) = Pre (Iod D W1) t;\n        Pre (Iod D W1) t \\<in> segment (Iod D W1) t;\n        Pre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t) =\n        Pre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> g t = t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac a = \"g t\" in Worder.Pre_segment[of \"Iod D W2\" _ \"b\"],\n        simp add:Iod_carrier, assumption+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) = Pre (Iod D W1) t;\n        Pre (Iod D W1) t \\<in> segment (Iod D W1) t;\n        Pre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t) =\n        Pre (Iod D W1) t;\n        ExPre (Iod D W2) (g t) \\<and>\n        Pre (Iod D W2) (g t) =\n        Pre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)\\<rbrakk>\n       \\<Longrightarrow> g t = t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (rotate_tac -2, frule sym, thin_tac \"Pre (Iod D W1) t =\n         Pre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)\", simp,\n        thin_tac \"Pre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t) =\n         Pre (Iod D W1) t\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>ExPre (Iod D W2) (g t) \\<and>\n                Pre (Iod D W2) (g t) = Pre (Iod D W1) t;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) = Pre (Iod D W1) t;\n        Pre (Iod D W1) t \\<in> segment (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> g t = t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (erule conjE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) = Pre (Iod D W1) t;\n        Pre (Iod D W1) t \\<in> segment (Iod D W1) t; ExPre (Iod D W2) (g t);\n        Pre (Iod D W2) (g t) = Pre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> g t = t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (simp add:WWa_def Wa_def, (erule conjE)+,\n        thin_tac \"\\<forall>x\\<in>W1. a \\<preceq> x\", thin_tac \"\\<forall>x\\<in>W2. a \\<preceq> x\",\n        thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) = Pre (Iod D W1) t;\n        Pre (Iod D W1) t \\<in> segment (Iod D W1) t; ExPre (Iod D W2) (g t);\n        Pre (Iod D W2) (g t) = Pre (Iod D W1) t; a \\<in> W1; a \\<in> W2;\n        \\<forall>x\\<in>W1.\n           if ExPre (Iod D W1) x then f (Pre (Iod D W1) x) = x\n           else if a \\<noteq> x\n                then Algebra2.Sup D (segment (Iod D W1) x) = x else a = a;\n        \\<forall>x\\<in>W2.\n           if ExPre (Iod D W2) x then f (Pre (Iod D W2) x) = x\n           else if a \\<noteq> x\n                then Algebra2.Sup D (segment (Iod D W2) x) = x\n                else a = a\\<rbrakk>\n       \\<Longrightarrow> g t = t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac x = t in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>W1.\n            if ExPre (Iod D W1) x then f (Pre (Iod D W1) x) = x\n            else if a \\<noteq> x then Sup D (segment (Iod D W1) x) = x else a = a\",\n        frule_tac x = \"g t\" in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>W2.\n            if ExPre (Iod D W2) x then f (Pre (Iod D W2) x) = x\n            else if a \\<noteq> x then Sup D (segment (Iod D W2) x) = x else a = a\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        ExPre (Iod D W1) t;\n        ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        g (Pre (Iod D W1) t) = Pre (Iod D W1) t;\n        Pre (Iod D W1) t \\<in> segment (Iod D W1) t; ExPre (Iod D W2) (g t);\n        Pre (Iod D W2) (g t) = Pre (Iod D W1) t; a \\<in> W1; a \\<in> W2;\n        if ExPre (Iod D W1) t then f (Pre (Iod D W1) t) = t\n        else if a \\<noteq> t then Algebra2.Sup D (segment (Iod D W1) t) = t\n             else a = a;\n        if ExPre (Iod D W2) (g t) then f (Pre (Iod D W2) (g t)) = g t\n        else if a \\<noteq> g t\n             then Algebra2.Sup D (segment (Iod D W2) (g t)) = g t\n             else a = a\\<rbrakk>\n       \\<Longrightarrow> g t = t\n 2. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac a = t in Worder.ord_isom_Pre11[of \"Iod D W1\"\n                 \"Iod (Iod D W2) (segment (Iod D W2) b)\" _ \"g\"], assumption+,\n        simp add:Iod_carrier, assumption, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t);\n        \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac a = \"g t\" in Worder.segment_Expre[of \"Iod D W2\" _ \"b\"],\n        assumption, simp,\n        thin_tac \"\\<not> ExPre (Iod (Iod D W2) (segment (Iod D W2) b)) (g t)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W2) (g t); \\<not> ExPre (Iod D W1) t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (simp add:WWa_def Wa_def, (erule conjE)+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W2) (g t); \\<not> ExPre (Iod D W1) t;\n        a \\<in> W1; a \\<in> W2; \\<forall>x\\<in>W1. a \\<preceq> x;\n        \\<forall>x\\<in>W1.\n           if ExPre (Iod D W1) x then f (Pre (Iod D W1) x) = x\n           else if a \\<noteq> x\n                then Algebra2.Sup D (segment (Iod D W1) x) = x else a = a;\n        \\<forall>x\\<in>W2. a \\<preceq> x;\n        \\<forall>x\\<in>W2.\n           if ExPre (Iod D W2) x then f (Pre (Iod D W2) x) = x\n           else if a \\<noteq> x\n                then Algebra2.Sup D (segment (Iod D W2) x) = x\n                else a = a\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (rotate_tac -3,\n        frule_tac x = t in bspec, assumption,\n        thin_tac \"\\<forall>x\\<in>W1.\n            if ExPre (Iod D W1) x then f (Pre (Iod D W1) x) = x\n            else if a \\<noteq> x then Sup D (segment (Iod D W1) x) = x else a = a\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>\\<forall>x\\<in>W2. a \\<preceq> x;\n        \\<forall>x\\<in>W2.\n           if ExPre (Iod D W2) x then f (Pre (Iod D W2) x) = x\n           else if a \\<noteq> x\n                then Algebra2.Sup D (segment (Iod D W2) x) = x else a = a;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W2) (g t); \\<not> ExPre (Iod D W1) t;\n        a \\<in> W1; a \\<in> W2; \\<forall>x\\<in>W1. a \\<preceq> x;\n        if ExPre (Iod D W1) t then f (Pre (Iod D W1) t) = t\n        else if a \\<noteq> t then Algebra2.Sup D (segment (Iod D W1) t) = t\n             else a = a\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (rotate_tac 1,\n        frule_tac x = \"g t\" in bspec, assumption,\n        thin_tac \"\\<forall>x\\<in>W2.\n            if ExPre (Iod D W2) x then f (Pre (Iod D W2) x) = x\n            else if a \\<noteq> x then Sup D (segment (Iod D W2) x) = x else a = a\",\n        simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2; t \\<noteq> a;\n        \\<not> ExPre (Iod D W2) (g t); \\<not> ExPre (Iod D W1) t;\n        a \\<in> W1; a \\<in> W2; \\<forall>x\\<in>W1. a \\<preceq> x;\n        Algebra2.Sup D (segment (Iod D W1) t) = t;\n        \\<forall>x\\<in>W2. a \\<preceq> x;\n        if a \\<noteq> g t\n        then Algebra2.Sup D (segment (Iod D W2) (g t)) = g t\n        else a = a\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac t = t and s = a in not_sym, thin_tac \" t \\<noteq> a\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2;\n        \\<not> ExPre (Iod D W2) (g t); \\<not> ExPre (Iod D W1) t;\n        a \\<in> W1; a \\<in> W2; \\<forall>x\\<in>W1. a \\<preceq> x;\n        Algebra2.Sup D (segment (Iod D W1) t) = t;\n        \\<forall>x\\<in>W2. a \\<preceq> x;\n        if a \\<noteq> g t\n        then Algebra2.Sup D (segment (Iod D W2) (g t)) = g t else a = a;\n        a \\<noteq> t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac b = t in Order.ord_isom_inj[of \"Iod D W1\" \n                \"Iod (Iod D W2) (segment (Iod D W2) b)\" \"g\" \"a\"], assumption+,\n                simp add:Iod_carrier, simp add:Iod_carrier, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n        minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a; t \\<in> W1;\n        \\<forall>u\\<in>segment (Iod D W1) t. fixp g u;\n        g t \\<in> segment (Iod D W2) b; g t \\<in> W2;\n        \\<not> ExPre (Iod D W2) (g t); \\<not> ExPre (Iod D W1) t;\n        a \\<in> W1; a \\<in> W2; \\<forall>x\\<in>W1. a \\<preceq> x;\n        Algebra2.Sup D (segment (Iod D W1) t) = t;\n        \\<forall>x\\<in>W2. a \\<preceq> x;\n        Algebra2.Sup D (segment (Iod D W2) (g t)) = g t; a \\<noteq> g t;\n        a \\<noteq> t\\<rbrakk>\n       \\<Longrightarrow> fixp g t\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (frule_tac t1 = t in fixp_same[THEN sym, of \"W1\" \"W2\" _ \"b\" \"g\"], \n        assumption+, simp, simp add:fixp_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n     segment (Iod D W2) b \\<subseteq> W2;\n     segment (Iod D W2) b \\<subseteq> carrier D;\n     Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n     g ` W1 = segment (Iod D W2) b; Torder (Iod D W2);\n     minimum_elem (Iod D W2) W2 a; Order (Iod D W2); g a = a;\n     \\<forall>x\\<in>carrier (Iod D W1). fixp g x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>W1. g x = x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (rule ballI,\n        frule_tac x = x in bspec,\n        simp add:subsetD[of \"W1\" \"carrier D\"], \n        simp add:Iod_carrier fixp_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n     W1 \\<subseteq> carrier D;\n     Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D W2)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n     Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D W2)", "apply (simp add:Worder.Order, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr4_2:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n       b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n       ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\\<rbrakk> \\<Longrightarrow> \n       W1 = segment (Iod D W2) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n     ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (simp add:ord_equiv_def,\n       erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) fa\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (rename_tac g)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule mem_wwa_Worder[of \"W1\" \"f\" \"a\"],\n        frule mem_wwa_Worder[of \"W2\" \"f\" \"a\"],\n        frule Worder.Order[of \"Iod D W2\"],\n        frule mem_WWa_sub_carrier[of \"W2\" \"f\" \"a\"],\n        frule mem_WWa_sub_carrier[of \"W1\" \"f\" \"a\"],\n        cut_tac a = b in Worder.segment_Worder[of \"Iod D W2\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n        W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule Worder.Order[of \"Iod D W1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n        W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b));\n        Order (Iod D W1)\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule_tac D = \"Iod (Iod D W2) (segment (Iod D W2) b)\" in  Worder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n        W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule Worder.Order[of \"Iod D W2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); Order (Iod D W2);\n        W2 \\<subseteq> carrier D; W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b));\n        Order (Iod D W2)\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule_tac a = b in Order.segment_sub[of \"Iod D W2\"], \n        simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule_tac A = \"segment (Iod D W2) b\" in subset_trans[of _ \"W2\"\n         \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule_tac T = \"segment (Iod D W2) b\" in Iod_Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W2) b))\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule_tac E = \"Iod D (segment (Iod D W2) b)\" and f = g in  \n        Order.ord_isom_func[of \"Iod D W1\" ], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W2) b));\n        g \\<in> carrier (Iod D W1) \\<rightarrow>\n                carrier (Iod D (segment (Iod D W2) b))\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule_tac f = g in Order.ord_isom_onto[of \"Iod D W1\" \n                            \"Iod D (segment (Iod D W2) b)\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W2) b));\n        g \\<in> carrier (Iod D W1) \\<rightarrow>\n                carrier (Iod D (segment (Iod D W2) b));\n        g ` carrier (Iod D W1) =\n        carrier (Iod D (segment (Iod D W2) b))\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (simp only:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W2) b));\n        g \\<in> W1 \\<rightarrow> segment (Iod D W2) b;\n        g ` W1 = segment (Iod D W2) b\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (frule_tac b = b and g = g in BNTr4_1[of \"f\" \"a\" _ \"W1\" \"W2\"],\n                  assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>g.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n        W2 \\<in> WWa D f a;\n        ord_isom (Iod D W1) (Iod D (segment (Iod D W2) b)) g;\n        Worder (Iod D W1); Worder (Iod D W2); W2 \\<subseteq> carrier D;\n        W1 \\<subseteq> carrier D;\n        Worder (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W1);\n        Order (Iod (Iod D W2) (segment (Iod D W2) b)); Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2;\n        segment (Iod D W2) b \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W2) b));\n        g \\<in> W1 \\<rightarrow> segment (Iod D W2) b;\n        g ` W1 = segment (Iod D W2) b; \\<forall>x\\<in>W1. g x = x\\<rbrakk>\n       \\<Longrightarrow> W1 = segment (Iod D W2) b", "apply (simp add:image_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr4:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;  a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; \n       \\<exists>b\\<in>carrier D. ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\\<rbrakk> \\<Longrightarrow> \n       W1 \\<subseteq> W2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a;\n     \\<exists>b\\<in>carrier D.\n        ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; b \\<in> carrier D;\n        ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (rename_tac b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; b \\<in> carrier D;\n        ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule_tac b = b in BNTr4_2[of \"f\" \"a\" _ \"W1\" \"W2\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; b \\<in> carrier D;\n        ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b));\n        W1 = segment (Iod D W2) b\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule mem_WWa_sub_carrier[of \"W2\" \"f\" \"a\"],\n        frule Iod_Order[of \"W2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; b \\<in> carrier D;\n        ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b));\n        W1 = segment (Iod D W2) b; W2 \\<subseteq> carrier D;\n        Order (Iod D W2)\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule_tac a = b in Order.segment_sub[of \"Iod D W2\"],\n        simp add:Iod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Iod_same:\"A = B \\<Longrightarrow> Iod D A = Iod D B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B \\<Longrightarrow> Iod D A = Iod D B", "by simp"], ["", "lemma (in Order) eq_ord_equivTr:\"\\<lbrakk>ord_equiv D E; E = F\\<rbrakk> \\<Longrightarrow> ord_equiv D F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ord_equiv D E; E = F\\<rbrakk> \\<Longrightarrow> ord_equiv D F", "by simp"], ["", "lemma (in Order) BNTr5:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n      \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n      ord_equiv (Iod D W1) (Iod D W2)\\<rbrakk> \\<Longrightarrow> W1 \\<subseteq> W2 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; ord_equiv (Iod D W1) (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule mem_WWa_sub_carrier[of \"W1\" \"f\" \"a\"], \n        frule mem_WWa_sub_carrier[of \"W2\" \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; ord_equiv (Iod D W1) (Iod D W2);\n     W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2", "apply (case_tac \"W2 = carrier D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; ord_equiv (Iod D W1) (Iod D W2);\n     W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n     W2 = carrier D\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; ord_equiv (Iod D W1) (Iod D W2);\n     W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n     W2 \\<noteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; ord_equiv (Iod D W1) (Iod D W2);\n     W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n     W2 \\<noteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule not_sym, thin_tac \"W2 \\<noteq> carrier D\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; ord_equiv (Iod D W1) (Iod D W2);\n     W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n     carrier D \\<noteq> W2\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule sets_not_eq[of \"carrier D\" \"W2\"], assumption, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule Iod_Order[of \"W2\"], \n        frule Iod_Order[of \"W1\"],\n        frule Iod_carrier[THEN sym, of \"W2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        W2 = carrier (Iod D W2)\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule_tac a = aa and A = W2 and B = \"carrier (Iod D W2)\" in \n              eq_set_not_inc, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        W2 = carrier (Iod D W2); aa \\<notin> carrier (Iod D W2)\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (thin_tac \"W2 = carrier (Iod D W2)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        aa \\<notin> carrier (Iod D W2)\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (frule_tac a = aa in Order.segment_free[of \"Iod D W2\"],\n          assumption, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        segment (Iod D W2) aa = W2\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2", "apply (rule BNTr4[of f a W1 W2], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        segment (Iod D W2) aa = W2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))", "(** key **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        segment (Iod D W2) aa = W2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))", "apply (frule_tac a = aa in Order.segment_free[of \"Iod D W2\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        segment (Iod D W2) aa = W2\\<rbrakk>\n       \\<Longrightarrow> aa \\<notin> carrier (Iod D W2)\n 2. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        segment (Iod D W2) aa = W2;\n        segment (Iod D W2) aa = carrier (Iod D W2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1);\n        segment (Iod D W2) aa = W2;\n        segment (Iod D W2) aa = carrier (Iod D W2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))", "apply (simp only:Iod_carrier, \n         rotate_tac -1, frule sym, thin_tac \"segment (Iod D W2) aa = W2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1); W2 = W2;\n        W2 = segment (Iod D W2) aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))", "apply (frule_tac B = \"segment (Iod D W2) aa\" in \n                   Iod_same[of W2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1); W2 = W2;\n        W2 = segment (Iod D W2) aa;\n        Iod D W2 = Iod D (segment (Iod D W2) aa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))", "apply (frule_tac F = \"Iod D (segment (Iod D W2) aa)\" in \n         Order.eq_ord_equivTr[of \"Iod D W1\" \"Iod D W2\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a;\n        ord_equiv (Iod D W1) (Iod D W2); W1 \\<subseteq> carrier D;\n        W2 \\<subseteq> carrier D; carrier D \\<noteq> W2; aa \\<in> carrier D;\n        aa \\<notin> W2; Order (Iod D W2); Order (Iod D W1); W2 = W2;\n        W2 = segment (Iod D W2) aa;\n        Iod D W2 = Iod D (segment (Iod D W2) aa);\n        ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) aa))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr6:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n\\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; W1 \\<subset> W2\\<rbrakk> \\<Longrightarrow> \n (\\<exists>b\\<in>carrier (Iod D W2). ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (frule mem_wwa_Worder[of \"W1\" \"f\" \"a\"],\n       frule mem_wwa_Worder[of \"W2\" \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (frule_tac D = \"Iod D W1\" and E = \"Iod D W2\" in Worder.Word_compare, \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     (\\<exists>a\\<in>carrier (Iod D W1).\n         ord_equiv (Iod (Iod D W1) (segment (Iod D W1) a)) (Iod D W2)) \\<or>\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "(** key 1 **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     (\\<exists>a\\<in>carrier (Iod D W1).\n         ord_equiv (Iod (Iod D W1) (segment (Iod D W1) a)) (Iod D W2)) \\<or>\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     \\<exists>a\\<in>carrier (Iod D W1).\n        ord_equiv (Iod (Iod D W1) (segment (Iod D W1) a))\n         (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (erule bexE,\n         frule_tac a = aa in Worder.segment_Worder[of \"Iod D W1\"],\n         frule_tac S = \"Iod (Iod D W1) (segment (Iod D W1) aa)\" in\n           Worder_sym[of _ \"Iod D W2\"], assumption+,\n     thin_tac \"ord_equiv (Iod (Iod D W1) (segment (Iod D W1) aa)) (Iod D W2)\",\n         frule BNTr4[of \"f\" \"a\" \"W2\" \"W1\"], assumption+,\n         frule mem_WWa_sub_carrier[of \"W1\"],\n         simp add:Iod_carrier,\n         frule_tac c = aa in subsetD[of \"W1\" \"carrier D\"], assumption+,\n         frule Iod_Order[of \"W1\"],\n         frule_tac a = aa in Order.segment_sub[of \"Iod D W1\"],\n                  simp add:Iod_carrier)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; W1 \\<subset> W2;\n        Worder (Iod D W1); Worder (Iod D W2); aa \\<in> W1;\n        Worder (Iod (Iod D W1) (segment (Iod D W1) aa));\n        ord_equiv (Iod D W2) (Iod (Iod D W1) (segment (Iod D W1) aa));\n        W1 \\<subseteq> carrier D; aa \\<in> carrier D; Order (Iod D W1);\n        segment (Iod D W1) aa \\<subseteq> W1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W2)\n                             (Iod D (segment (Iod D W1) b))\n 2. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; W1 \\<subset> W2;\n        Worder (Iod D W1); Worder (Iod D W2); aa \\<in> carrier (Iod D W1);\n        Worder (Iod (Iod D W1) (segment (Iod D W1) aa));\n        ord_equiv (Iod D W2) (Iod (Iod D W1) (segment (Iod D W1) aa));\n        W2 \\<subseteq> W1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (frule_tac S = \"segment (Iod D W1) aa\" and T = W1 in Iod_sub_sub,\n                  assumption+, simp, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; W1 \\<subset> W2;\n        Worder (Iod D W1); Worder (Iod D W2); aa \\<in> carrier (Iod D W1);\n        Worder (Iod (Iod D W1) (segment (Iod D W1) aa));\n        ord_equiv (Iod D W2) (Iod (Iod D W1) (segment (Iod D W1) aa));\n        W2 \\<subseteq> W1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (simp add:subset_contr[of \"W1\" \"W2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2); ord_equiv (Iod D W1) (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     \\<exists>b\\<in>carrier (Iod D W2).\n        ord_equiv (Iod D W1)\n         (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (frule Worder_sym[of \"Iod D W1\" \"Iod D W2\"], assumption+,\n          thin_tac \"ord_equiv (Iod D W1) (Iod D W2)\",\n        frule BNTr5[of \"f\" \"a\" \"W2\" \"W1\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2); ord_equiv (Iod D W2) (Iod D W1);\n     W2 \\<subseteq> W1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     \\<exists>b\\<in>carrier (Iod D W2).\n        ord_equiv (Iod D W1)\n         (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (simp add:subset_contr[of \"W1\" \"W2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2; Worder (Iod D W1);\n     Worder (Iod D W2);\n     \\<exists>b\\<in>carrier (Iod D W2).\n        ord_equiv (Iod D W1)\n         (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))", "apply (erule bexE,\n       frule mem_WWa_sub_carrier[of \"W2\"],\n       simp add:Iod_carrier,\n       frule_tac c = b in subsetD[of \"W2\" \"carrier D\"], assumption+,\n       frule Iod_Order[of \"W2\"],\n       frule_tac a = b in Order.segment_sub[of \"Iod D W2\"],\n       simp add:Iod_carrier,\n       frule_tac S = \"segment (Iod D W2) b\" and T = W2 in Iod_sub_sub,\n                  assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; W1 \\<subset> W2;\n        Worder (Iod D W1); Worder (Iod D W2); b \\<in> W2;\n        ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b));\n        W2 \\<subseteq> carrier D; b \\<in> carrier D; Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2;\n        Iod (Iod D W2) (segment (Iod D W2) b) =\n        Iod D (segment (Iod D W2) b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>W2.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr6_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n\\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; W1 \\<subset> W2\\<rbrakk> \\<Longrightarrow> \n (\\<exists>b\\<in>carrier (Iod D W2). W1 = (segment (Iod D W2) b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; W1 \\<subset> W2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier (Iod D W2).\n                         W1 = segment (Iod D W2) b", "by (frule_tac BNTr6[of \"f\" \"a\" \"W1\" \"W2\"], assumption+, erule bexE,\n       frule mem_WWa_sub_carrier[of \"W2\"], simp add:Iod_carrier,\n       frule_tac c = b in subsetD[of \"W2\" \"carrier D\"], assumption+,\n       frule_tac b = b in BNTr4_2[of \"f\" \"a\" _ \"W1\" \"W2\"], assumption+,\n       blast)"], ["", "lemma (in Order) BNTr7:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n      \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W1 \\<in> WWa D f a; W2 \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow> \n                W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (frule mem_wwa_Worder[of \"W1\" \"f\" \"a\"],\n       frule mem_wwa_Worder[of \"W2\" \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (frule_tac D = \"Iod D W1\" and E = \"Iod D W2\" in Worder.Word_compare, \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     (\\<exists>a\\<in>carrier (Iod D W1).\n         ord_equiv (Iod (Iod D W1) (segment (Iod D W1) a)) (Iod D W2)) \\<or>\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (erule disjE, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; Worder (Iod D W1);\n        Worder (Iod D W2); aa \\<in> carrier (Iod D W1);\n        ord_equiv (Iod (Iod D W1) (segment (Iod D W1) aa))\n         (Iod D W2)\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (frule mem_WWa_sub_carrier[of \"W1\"],\n       frule mem_WWa_sub_carrier[of \"W2\"],\n       frule Iod_Order[of \"W1\"],\n       frule Iod_Order[of \"W2\"],\n       frule_tac a = aa in Order.segment_sub[of \"Iod D W1\"],\n                  simp add:Iod_carrier,\n       frule_tac S = \"segment (Iod D W1) aa\" and T = W1 in Iod_sub_sub,\n                  assumption+, simp,\n       thin_tac \"Iod (Iod D W1) (segment (Iod D W1) aa) =\n          Iod D (segment (Iod D W1) aa)\",\n       frule_tac A = \"segment (Iod D W1) aa\" in subset_trans[of _ \"W1\" \n          \"carrier D\"], assumption+,\n       frule_tac T = \"segment (Iod D W1) aa\" in Iod_Order)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; Worder (Iod D W1);\n        Worder (Iod D W2); aa \\<in> W1;\n        ord_equiv (Iod D (segment (Iod D W1) aa)) (Iod D W2);\n        W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        Order (Iod D W1); Order (Iod D W2);\n        segment (Iod D W1) aa \\<subseteq> W1;\n        segment (Iod D W1) aa \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) aa))\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (frule_tac D = \"Iod D (segment (Iod D W1) aa)\" in \n           Order.ord_equiv_sym[of _ \"Iod D W2\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; Worder (Iod D W1);\n        Worder (Iod D W2); aa \\<in> W1;\n        ord_equiv (Iod D (segment (Iod D W1) aa)) (Iod D W2);\n        W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        Order (Iod D W1); Order (Iod D W2);\n        segment (Iod D W1) aa \\<subseteq> W1;\n        segment (Iod D W1) aa \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) aa));\n        ord_equiv (Iod D W2) (Iod D (segment (Iod D W1) aa))\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (frule_tac c = aa in subsetD[of \"W1\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; Worder (Iod D W1);\n        Worder (Iod D W2); aa \\<in> W1;\n        ord_equiv (Iod D (segment (Iod D W1) aa)) (Iod D W2);\n        W1 \\<subseteq> carrier D; W2 \\<subseteq> carrier D;\n        Order (Iod D W1); Order (Iod D W2);\n        segment (Iod D W1) aa \\<subseteq> W1;\n        segment (Iod D W1) aa \\<subseteq> carrier D;\n        Order (Iod D (segment (Iod D W1) aa));\n        ord_equiv (Iod D W2) (Iod D (segment (Iod D W1) aa));\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (frule BNTr4[of \"f\" \"a\" \"W2\" \"W1\"], assumption+, blast, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2) \\<or>\n     (\\<exists>b\\<in>carrier (Iod D W2).\n         ord_equiv (Iod D W1)\n          (Iod (Iod D W2) (segment (Iod D W2) b)))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     ord_equiv (Iod D W1) (Iod D W2)\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     \\<exists>b\\<in>carrier (Iod D W2).\n        ord_equiv (Iod D W1)\n         (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (simp add:BNTr5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     \\<exists>b\\<in>carrier (Iod D W2).\n        ord_equiv (Iod D W1)\n         (Iod (Iod D W2) (segment (Iod D W2) b))\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (frule mem_WWa_sub_carrier[of \"W2\"], simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     \\<exists>b\\<in>W2.\n        ord_equiv (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b));\n     W2 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (frule BNTr4[of \"f\" \"a\" \"W1\" \"W2\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     \\<exists>b\\<in>W2.\n        ord_equiv (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b));\n     W2 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                         ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     \\<exists>b\\<in>W2.\n        ord_equiv (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b));\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> W2\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply (erule bexE,\n       frule mem_WWa_sub_carrier[of \"W2\"],\n       simp add:Iod_carrier,\n       frule_tac c = b in subsetD[of \"W2\" \"carrier D\"], assumption+,\n       frule Iod_Order[of \"W2\"],\n       frule_tac a = b in Order.segment_sub[of \"Iod D W2\"],\n       simp add:Iod_carrier,\n       frule_tac S = \"segment (Iod D W2) b\" and T = W2 in Iod_sub_sub,\n          assumption+, simp,\n       frule_tac c = b in subsetD[of \"W2\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W1 \\<in> WWa D f a; W2 \\<in> WWa D f a; Worder (Iod D W1);\n        Worder (Iod D W2); b \\<in> W2;\n        ord_equiv (Iod D W1) (Iod D (segment (Iod D W2) b));\n        W2 \\<subseteq> carrier D; b \\<in> carrier D; Order (Iod D W2);\n        segment (Iod D W2) b \\<subseteq> W2;\n        Iod (Iod D W2) (segment (Iod D W2) b) =\n        Iod D (segment (Iod D W2) b);\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b\\<in>carrier D.\n                            ord_equiv (Iod D W1)\n                             (Iod D (segment (Iod D W2) b))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     \\<exists>b\\<in>W2.\n        ord_equiv (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b));\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> W2\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W1 \\<in> WWa D f a;\n     W2 \\<in> WWa D f a; Worder (Iod D W1); Worder (Iod D W2);\n     \\<exists>b\\<in>W2.\n        ord_equiv (Iod D W1) (Iod (Iod D W2) (segment (Iod D W2) b));\n     W2 \\<subseteq> carrier D; W1 \\<subseteq> W2\\<rbrakk>\n    \\<Longrightarrow> W1 \\<subseteq> W2 \\<or> W2 \\<subseteq> W1", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W; W \\<in> WWa D f a; xa \\<in> \\<Union> (WWa D f a);\n         xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x\\<rbrakk> \\<Longrightarrow> xa \\<in> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; xa \\<in> \\<Union> (WWa D f a);\n     xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x\\<rbrakk>\n    \\<Longrightarrow> xa \\<in> W", "apply (cut_tac Union_WWa_sub_carrier[of \"f\" \"a\"],\n       frule_tac X = W and C = \"WWa D f a\" and A = x in UnionI, assumption+,\n       simp del:Union_iff add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D;\n     x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n    \\<Longrightarrow> xa \\<in> W", "apply (simp only:Union_iff[of \"xa\" \"WWa D f a\"], erule bexE, rename_tac W')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a;\n        xa \\<in> W'\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (frule_tac ?W1.0 = W and ?W2.0 = W' in BNTr7[of \"f\" \"a\"],\n           assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subseteq> W' \\<or> W' \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (case_tac \"W' \\<subseteq> W\", simp add:subsetD[of _ \"W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subseteq> W' \\<or> W' \\<subseteq> W;\n        \\<not> W' \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (simp del:Union_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subseteq> W'; W' \\<noteq> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (frule_tac B = W' in psubsetI[of \"W\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subseteq> W'; W' \\<noteq> W\\<rbrakk>\n       \\<Longrightarrow> W \\<noteq> W'\n 2. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subseteq> W'; W' \\<noteq> W; W \\<subset> W'\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (rule not_sym, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subseteq> W'; W' \\<noteq> W; W \\<subset> W'\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (thin_tac \"W \\<subseteq> W'\", thin_tac \"W' \\<noteq> W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subset> W'\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (frule_tac ?W2.0 = W' in BNTr6_1[of \"f\" \"a\" \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subset> W';\n        \\<exists>b\\<in>carrier (Iod D W'). W = segment (Iod D W') b\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W' b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subset> W'; b \\<in> carrier (Iod D W');\n        W = segment (Iod D W') b\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (frule_tac W = W' in mem_WWa_sub_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W' b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<prec> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xa \\<in> W';\n        W \\<subset> W'; b \\<in> carrier (Iod D W');\n        W = segment (Iod D W') b; W' \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> W", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W' b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> segment (Iod D W') b; segment (Iod D W') b \\<in> WWa D f a;\n        xa \\<prec> x; \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X; W' \\<in> WWa D f a;\n        xa \\<in> W'; segment (Iod D W') b \\<subset> W'; b \\<in> W';\n        W = segment (Iod D W') b; W' \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> segment (Iod D W') b", "apply (frule_tac c = b and A = W' in subsetD[of _ \"carrier D\"], \n                            assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W' b.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> segment (Iod D W') b; segment (Iod D W') b \\<in> WWa D f a;\n        xa \\<prec> x; \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X; W' \\<in> WWa D f a;\n        xa \\<in> W'; segment (Iod D W') b \\<subset> W'; b \\<in> W';\n        W = segment (Iod D W') b; W' \\<subseteq> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> segment (Iod D W') b", "apply (frule_tac W = W' and a = b and y = xa and x = x in segment_inc_less,\n          assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_1_1:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n       \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W; W \\<in> WWa D f a; xa \\<in> \\<Union> (WWa D f a);\n         xa \\<prec> x\\<rbrakk> \\<Longrightarrow> xa \\<in> W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x\\<rbrakk>\n    \\<Longrightarrow> xa \\<in> W", "apply (cut_tac Union_WWa_sub_carrier[of \"f\" \"a\"],\n       frule Iod_Order[of \"\\<Union> (WWa D f a)\"],\n       frule Iod_less[THEN sym, of \"\\<Union> (WWa D f a)\" \"xa\" \"x\"], assumption+,\n       rule UnionI[of \"W\" \"WWa D f a\" \"x\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D;\n     Order (Iod D (\\<Union> (WWa D f a)));\n     xa \\<prec> x =\n     xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x\\<rbrakk>\n    \\<Longrightarrow> xa \\<in> W", "apply (simp del:Union_iff, rule BNTr7_1, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_2:\" \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n    \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> \\<Union>(WWa D f a); ExPre (Iod D (\\<Union>(WWa D f a))) x \\<rbrakk>\n  \\<Longrightarrow> \\<forall>W\\<in>WWa D f a. (x \\<in> W \\<longrightarrow> ExPre (Iod D W) x )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     x \\<in> \\<Union> (WWa D f a);\n     ExPre (Iod D (\\<Union> (WWa D f a))) x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>W\\<in>WWa D f a.\n                         x \\<in> W \\<longrightarrow> ExPre (Iod D W) x", "apply (cut_tac Union_WWa_sub_carrier[of \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     x \\<in> \\<Union> (WWa D f a); ExPre (Iod D (\\<Union> (WWa D f a))) x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>W\\<in>WWa D f a.\n                         x \\<in> W \\<longrightarrow> ExPre (Iod D W) x", "apply (rule ballI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> \\<Union> (WWa D f a);\n        ExPre (Iod D (\\<Union> (WWa D f a))) x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> ExPre (Iod D W) x", "apply (simp only:ExPre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<exists>xa.\n           xa \\<in> carrier (Iod D (\\<Union> (WWa D f a))) \\<and>\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x \\<and>\n           \\<not> (\\<exists>y\\<in>carrier (Iod D (\\<Union> (WWa D f a))).\n                      xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                      y \\<and>\n                      y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                      x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (erule exE, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> carrier (Iod D (\\<Union> (WWa D f a)));\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>carrier (Iod D (\\<Union> (WWa D f a))).\n                   xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   y \\<and>\n                   y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (simp only:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a);\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n                   xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   y \\<and>\n                   y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (frule_tac X = W and C = \"WWa D f a\" and A = x in UnionI, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a);\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n                   xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   y \\<and>\n                   y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x);\n        x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (simp del:Union_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a);\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<forall>y\\<in>WWa D f a.\n           \\<forall>y\\<in>y.\n              xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n              y \\<longrightarrow>\n              \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                     x;\n        x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            (\\<forall>y\\<in>carrier (Iod D W).\n                                xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (frule_tac x = W in bspec, assumption,\n        thin_tac \"\\<forall>y\\<in>WWa D f a.\n           \\<forall>y\\<in>y. xa \\<prec>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a);\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                  x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            (\\<forall>y\\<in>carrier (Iod D W).\n                                xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (frule_tac W = W and xa = xa in BNTr7_1[of \"f\" \"a\" \"x\"], assumption+,\n        frule_tac W = W in mem_WWa_sub_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a);\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            (\\<forall>y\\<in>carrier (Iod D W).\n                                xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (simp del:Union_iff add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            (\\<forall>y\\<in>carrier (Iod D W).\n                                xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (subgoal_tac \"\\<forall>y\\<in>W. xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D;\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            (\\<forall>y\\<in>carrier (Iod D W).\n                                xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\n 2. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>W.\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                            y \\<longrightarrow>\n                            \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x", "apply (simp only:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D;\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> W \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            (\\<forall>y\\<in>W.\n                                xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                                y \\<longrightarrow>\n                                \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\n 2. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>W.\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                            y \\<longrightarrow>\n                            \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x", "apply (subgoal_tac \"xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\", blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D;\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>W.\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                            y \\<longrightarrow>\n                            \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x", "apply (simp add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>W.\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                            y \\<longrightarrow>\n                            \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x", "apply (rule ballI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa y.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        xa \\<in> W; W \\<subseteq> carrier D; y \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> y\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x", "apply (frule_tac x = y in bspec, assumption,\n        thin_tac \"\\<forall>y\\<in>W. xa \\<prec>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> x\",\n        frule_tac X = W and C = \"WWa D f a\" and A = y in UnionI, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W xa y.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<in> WWa D f a;\n        x \\<in> W; xa \\<in> \\<Union> (WWa D f a); xa \\<prec> x;\n        x \\<in> \\<Union> (WWa D f a); xa \\<in> W; W \\<subseteq> carrier D;\n        y \\<in> W; xa \\<prec>\\<^bsub>Iod D W\\<^esub> y;\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        y \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x", "apply (simp add:Iod_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_3:\" \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n    \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> \\<Union>(WWa D f a); ExPre (Iod D (\\<Union>(WWa D f a))) x \\<rbrakk>\n  \\<Longrightarrow> \\<forall>W\\<in>WWa D f a. (x \\<in> W \\<longrightarrow> Pre (Iod D (\\<Union>(WWa D f a))) x = Pre (Iod D W) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     x \\<in> \\<Union> (WWa D f a);\n     ExPre (Iod D (\\<Union> (WWa D f a))) x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>W\\<in>WWa D f a.\n                         x \\<in> W \\<longrightarrow>\n                         Pre (Iod D (\\<Union> (WWa D f a))) x =\n                         Pre (Iod D W) x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> \\<Union> (WWa D f a);\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> W \\<longrightarrow>\n                         Pre (Iod D (\\<Union> (WWa D f a))) x =\n                         Pre (Iod D W) x", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> \\<Union> (WWa D f a);\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (\\<Union> (WWa D f a))) x =\n                         Pre (Iod D W) x", "apply (rule_tac s = \"Pre (Iod D W) x\" in \n                   sym[of _ \"Pre (Iod D (\\<Union>(WWa D f a))) x\"],\n        frule_tac W = W in mem_wwa_Worder,\n        frule_tac W = W in mem_WWa_sub_carrier,\n        frule BNTr7_2[of \"f\" \"a\" \"x\"], assumption+,\n        frule_tac x = W in bspec, assumption,\n        thin_tac \"\\<forall>W\\<in>WWa D f a. x \\<in> W \\<longrightarrow> ExPre (Iod D W) x\",\n        simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; Worder (Iod D W); W \\<subseteq> carrier D;\n        ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D W) x =\n                         Pre (Iod D (\\<Union> (WWa D f a))) x", "apply (rule_tac D = \"Iod D W\" and a = x and \n        ?a1.0 = \"Pre (Iod D (\\<Union>(WWa D f a))) x\" in Worder.UniquePre,\n        assumption,\n        simp add:Iod_carrier, assumption, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; Worder (Iod D W); W \\<subseteq> carrier D;\n        ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (\\<Union> (WWa D f a))) x \\<in> W \\<and>\n                         Pre (Iod D (\\<Union> (WWa D f a)))\n                          x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                         x \\<and>\n                         (\\<forall>y\\<in>W.\n                             Pre (Iod D (\\<Union> (WWa D f a)))\n                              x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                             y \\<longrightarrow>\n                             \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (frule_tac D = \"Iod D W\" in Worder.Order,\n         frule_tac D = \"Iod D W\" and a = x in Order.Pre_element,\n         simp add:Iod_carrier, assumption,\n         (erule conjE)+, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; Worder (Iod D W); W \\<subseteq> carrier D;\n        ExPre (Iod D W) x; Order (Iod D W); Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>W.\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (\\<Union> (WWa D f a))) x \\<in> W \\<and>\n                         Pre (Iod D (\\<Union> (WWa D f a)))\n                          x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                         x \\<and>\n                         (\\<forall>y\\<in>W.\n                             Pre (Iod D (\\<Union> (WWa D f a)))\n                              x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                             y \\<longrightarrow>\n                             \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (cut_tac Union_WWa_sub_carrier[of \"f\" \"a\"],\n         frule Iod_Order[of \"\\<Union>(WWa D f a)\"],\n         frule_tac X = W and A = x in UnionI[of _ \"WWa D f a\"], assumption+,\n         frule_tac D = \"Iod D (\\<Union>(WWa D f a))\" and a = x in Order.Pre_element,\n         simp del:Union_iff add:Iod_carrier, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; Worder (Iod D W); W \\<subseteq> carrier D;\n        ExPre (Iod D W) x; Order (Iod D W); Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>W.\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); x \\<in> \\<Union> (WWa D f a);\n        Pre (Iod D (\\<Union> (WWa D f a))) x\n        \\<in> carrier (Iod D (\\<Union> (WWa D f a))) \\<and>\n        Pre (Iod D (\\<Union> (WWa D f a)))\n         x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n        x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D (\\<Union> (WWa D f a))).\n                   Pre (Iod D (\\<Union> (WWa D f a)))\n                    x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   y \\<and>\n                   y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   x)\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (\\<Union> (WWa D f a))) x \\<in> W \\<and>\n                         Pre (Iod D (\\<Union> (WWa D f a)))\n                          x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                         x \\<and>\n                         (\\<forall>y\\<in>W.\n                             Pre (Iod D (\\<Union> (WWa D f a)))\n                              x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                             y \\<longrightarrow>\n                             \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; Worder (Iod D W); W \\<subseteq> carrier D;\n        ExPre (Iod D W) x; Order (Iod D W); Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>W.\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); x \\<in> \\<Union> (WWa D f a);\n        Pre (Iod D (\\<Union> (WWa D f a))) x\n        \\<in> carrier (Iod D (\\<Union> (WWa D f a)));\n        Pre (Iod D (\\<Union> (WWa D f a)))\n         x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n        x;\n        \\<not> (\\<exists>y\\<in>carrier (Iod D (\\<Union> (WWa D f a))).\n                   Pre (Iod D (\\<Union> (WWa D f a)))\n                    x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   y \\<and>\n                   y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   x)\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (\\<Union> (WWa D f a))) x \\<in> W \\<and>\n                         Pre (Iod D (\\<Union> (WWa D f a)))\n                          x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                         x \\<and>\n                         (\\<forall>y\\<in>W.\n                             Pre (Iod D (\\<Union> (WWa D f a)))\n                              x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                             y \\<longrightarrow>\n                             \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (frule_tac W = W and xa = \"Pre (Iod D (\\<Union>(WWa D f a))) x\" in \n        BNTr7_1[of \"f\" \"a\" \"x\"], assumption+,\n        simp only:Iod_carrier, assumption,\n        simp del:Union_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; Worder (Iod D W); W \\<subseteq> carrier D;\n        ExPre (Iod D W) x; Order (Iod D W); Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>W.\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); x \\<in> \\<Union> (WWa D f a);\n        Pre (Iod D (\\<Union> (WWa D f a))) x\n        \\<in> carrier (Iod D (\\<Union> (WWa D f a)));\n        Pre (Iod D (\\<Union> (WWa D f a)))\n         x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n        x;\n        \\<forall>y\\<in>carrier (Iod D (\\<Union> (WWa D f a))).\n           Pre (Iod D (\\<Union> (WWa D f a)))\n            x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        Pre (Iod D (\\<Union> (WWa D f a))) x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (\\<Union> (WWa D f a)))\n                          x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                         x \\<and>\n                         (\\<forall>y\\<in>W.\n                             Pre (Iod D (\\<Union> (WWa D f a)))\n                              x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                             y \\<longrightarrow>\n                             \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)", "apply (rule conjI,\n       simp del:Union_iff add:Iod_carrier Iod_less,\n       rule ballI,\n       frule_tac X = W and A = y in UnionI[of _ \"WWa D f a\"], assumption+,\n       thin_tac \"\\<forall>y\\<in>W. Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W y.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; Worder (Iod D W); W \\<subseteq> carrier D;\n        ExPre (Iod D W) x; Order (Iod D W); Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); x \\<in> \\<Union> (WWa D f a);\n        Pre (Iod D (\\<Union> (WWa D f a))) x\n        \\<in> carrier (Iod D (\\<Union> (WWa D f a)));\n        Pre (Iod D (\\<Union> (WWa D f a)))\n         x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n        x;\n        \\<forall>y\\<in>carrier (Iod D (\\<Union> (WWa D f a))).\n           Pre (Iod D (\\<Union> (WWa D f a)))\n            x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        Pre (Iod D (\\<Union> (WWa D f a))) x \\<in> W; y \\<in> W;\n        y \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (\\<Union> (WWa D f a)))\n                          x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                         y \\<longrightarrow>\n                         \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x", "apply (simp only:Iod_carrier,\n        frule_tac x = y in bspec, assumption,\n        thin_tac \"\\<forall>y\\<in>\\<Union>(WWa D f a).\n              Pre (Iod D (\\<Union>(WWa D f a))) x \\<prec>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> y \\<longrightarrow>\n              \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W y.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; Worder (Iod D W); W \\<subseteq> carrier D;\n        ExPre (Iod D W) x; Order (Iod D W); Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); x \\<in> \\<Union> (WWa D f a);\n        Pre (Iod D (\\<Union> (WWa D f a))) x \\<in> \\<Union> (WWa D f a);\n        Pre (Iod D (\\<Union> (WWa D f a)))\n         x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n        x;\n        Pre (Iod D (\\<Union> (WWa D f a))) x \\<in> W; y \\<in> W;\n        y \\<in> \\<Union> (WWa D f a);\n        Pre (Iod D (\\<Union> (WWa D f a)))\n         x \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n        y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n               x\\<rbrakk>\n       \\<Longrightarrow> Pre (Iod D (\\<Union> (WWa D f a)))\n                          x \\<prec>\\<^bsub>Iod D W\\<^esub>\n                         y \\<longrightarrow>\n                         \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x", "apply (simp del:Union_iff add:Iod_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_4:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n         \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;  W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow> \n         ExPre (Iod D (\\<Union>(WWa D f a))) x = ExPre (Iod D W) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (\\<Union> (WWa D f a))) x =\n                      ExPre (Iod D W) x", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; ExPre (Iod D (\\<Union> (WWa D f a))) x\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D W) x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; ExPre (Iod D W) x\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (\\<Union> (WWa D f a))) x", "apply (frule BNTr7_2[of \"f\" \"a\" \"x\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; ExPre (Iod D (\\<Union> (WWa D f a))) x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> \\<Union> (WWa D f a)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; ExPre (Iod D (\\<Union> (WWa D f a))) x\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (\\<Union> (WWa D f a))) x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; ExPre (Iod D (\\<Union> (WWa D f a))) x;\n     \\<forall>W\\<in>WWa D f a.\n        x \\<in> W \\<longrightarrow> ExPre (Iod D W) x\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D W) x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; ExPre (Iod D W) x\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (\\<Union> (WWa D f a))) x", "apply (frule_tac X = W and A = x in UnionI[of _ \"WWa D f a\"], assumption+,\n        simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; ExPre (Iod D W) x\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (\\<Union> (WWa D f a))) x", "apply (simp only:ExPre_def, erule exE, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> carrier (Iod D W);\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier\n(Iod D (\\<Union> (WWa D f a))) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\n       \\<in>carrier (Iod D (\\<Union> (WWa D f a))).\n xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x)", "apply (cut_tac Union_WWa_sub_carrier[of \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> carrier (Iod D W);\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier\n(Iod D (\\<Union> (WWa D f a))) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\n       \\<in>carrier (Iod D (\\<Union> (WWa D f a))).\n xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x)", "apply (frule mem_WWa_sub_carrier[of \"W\"], simp only:Iod_carrier,\n       frule Iod_Order[of \"W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>W.\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> \\<Union> (WWa D f a) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x)", "apply (\n       frule Iod_Order[of \"\\<Union>(WWa D f a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>W.\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> \\<Union> (WWa D f a) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x)", "apply (\n       simp only:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W; xa \\<prec> x;\n        \\<not> (\\<exists>y\\<in>W.\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> \\<Union> (WWa D f a) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x)", "apply (frule_tac X = W and A = xa in UnionI[of _ \"WWa D f a\"], assumption+,\n       frule_tac X = W and A = x in UnionI[of _ \"WWa D f a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W; xa \\<prec> x;\n        \\<not> (\\<exists>y\\<in>W.\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> \\<Union> (WWa D f a) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x)", "apply (frule_tac T1 = \"\\<Union>(WWa D f a)\" and a1 = xa and b1 = x in \n                                Iod_less[THEN sym], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W; xa \\<prec> x;\n        \\<not> (\\<exists>y\\<in>W.\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a);\n        xa \\<prec> x =\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> \\<Union> (WWa D f a) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x)", "apply (subgoal_tac \" \\<not> (\\<exists>y\\<in>\\<Union>(WWa D f a).\n                       xa \\<prec>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> y \\<and> y \\<prec>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> x)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W; xa \\<prec> x;\n        \\<not> (\\<exists>y\\<in>W.\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a);\n        xa \\<prec> x =\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n                   xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   y \\<and>\n                   y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                   x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> \\<Union> (WWa D f a) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x)\n 2. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W; xa \\<prec> x;\n        \\<not> (\\<exists>y\\<in>W.\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a);\n        xa \\<prec> x =\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n                                    xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                                    x)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W; xa \\<prec> x;\n        \\<not> (\\<exists>y\\<in>W.\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a);\n        xa \\<prec> x =\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<exists>y\\<in>\\<Union> (WWa D f a).\n                                    xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                                    x)", "apply (rule contrapos_pp, (simp del:Union_iff)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a);\n        xa \\<prec> x;\n        \\<exists>y\\<in>WWa D f a.\n           \\<exists>y\\<in>y.\n              xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n              y \\<and>\n              y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n              x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule bexE, rename_tac xa W', erule bexE, erule conjE,\n        frule_tac X = W' and A = y in UnionI[of _ \"WWa D f a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa W' y.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a);\n        xa \\<prec> x; W' \\<in> WWa D f a; y \\<in> W';\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y;\n        y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        y \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac xa = y in BNTr7_1[of \"f\" \"a\" \"x\" \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa W' y.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a);\n        xa \\<prec> x; W' \\<in> WWa D f a; y \\<in> W';\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y;\n        y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        y \\<in> \\<Union> (WWa D f a); y \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = y in bspec, assumption+,\n        thin_tac \"\\<forall>y\\<in>W. xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa W' y.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a; xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D W); Order (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> \\<Union> (WWa D f a); x \\<in> \\<Union> (WWa D f a);\n        xa \\<prec> x; W' \\<in> WWa D f a; y \\<in> W';\n        xa \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> y;\n        y \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> x;\n        y \\<in> \\<Union> (WWa D f a); y \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_5:\" \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n           \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W; W \\<in> WWa D f a\\<rbrakk>\n          \\<Longrightarrow> (segment (Iod D (\\<Union>(WWa D f a))) x) = segment (Iod D W) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (\\<Union> (WWa D f a))) x =\n                      segment (Iod D W) x", "apply (cut_tac Union_WWa_sub_carrier[of \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (\\<Union> (WWa D f a))) x =\n                      segment (Iod D W) x", "apply (frule_tac W = W in mem_WWa_sub_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; \\<Union> (WWa D f a) \\<subseteq> carrier D;\n     W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (\\<Union> (WWa D f a))) x =\n                      segment (Iod D W) x", "apply (frule Iod_Order[of \"\\<Union>(WWa D f a)\"],\n       frule Iod_Order[of \"W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; \\<Union> (WWa D f a) \\<subseteq> carrier D;\n     W \\<subseteq> carrier D; Order (Iod D (\\<Union> (WWa D f a)));\n     Order (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (\\<Union> (WWa D f a))) x =\n                      segment (Iod D W) x", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; \\<Union> (WWa D f a) \\<subseteq> carrier D;\n     W \\<subseteq> carrier D; Order (Iod D (\\<Union> (WWa D f a)));\n     Order (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (\\<Union> (WWa D f a))) x\n                      \\<subseteq> segment (Iod D W) x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; \\<Union> (WWa D f a) \\<subseteq> carrier D;\n     W \\<subseteq> carrier D; Order (Iod D (\\<Union> (WWa D f a)));\n     Order (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (\\<Union> (WWa D f a))) x", "apply (rule subsetI,\n       frule Order.segment_sub[of \"Iod D (\\<Union>(WWa D f a))\" \"x\"],\n       frule_tac c = xa in subsetD[of \"segment (Iod D (\\<Union>(WWa D f a))) x\" \n                            \"carrier (Iod D (\\<Union>(WWa D f a)))\"], assumption+,\n       frule_tac X = W and A = x in UnionI[of _ \"WWa D f a\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); Order (Iod D W);\n        xa \\<in> segment (Iod D (\\<Union> (WWa D f a))) x;\n        segment (Iod D (\\<Union> (WWa D f a))) x\n        \\<subseteq> carrier (Iod D (\\<Union> (WWa D f a)));\n        xa \\<in> carrier (Iod D (\\<Union> (WWa D f a)));\n        x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> segment (Iod D W) x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; \\<Union> (WWa D f a) \\<subseteq> carrier D;\n     W \\<subseteq> carrier D; Order (Iod D (\\<Union> (WWa D f a)));\n     Order (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (\\<Union> (WWa D f a))) x", "apply (frule_tac a1 = xa in Order.segment_inc[THEN sym, \n                             of \"Iod D (\\<Union>(WWa D f a))\" _ \"x\"],\n        assumption, simp add:Iod_carrier, simp del:Union_iff,\n        frule_tac xa = xa in BNTr7_1[of \"f\" \"a\" \"x\"], assumption+,\n        simp only:Iod_carrier, assumption, simp only:Iod_carrier,\n        simp only:Iod_less,\n        frule_tac a1 = xa in Iod_less[THEN sym, of \"W\" _ \"x\"], \n                   assumption+, simp del:Union_iff,\n        subst Order.segment_inc[THEN sym, of \"Iod D W\" _ \"x\"], assumption+,\n        simp add:Iod_carrier, simp add:Iod_carrier, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; x \\<in> W;\n     W \\<in> WWa D f a; \\<Union> (WWa D f a) \\<subseteq> carrier D;\n     W \\<subseteq> carrier D; Order (Iod D (\\<Union> (WWa D f a)));\n     Order (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (\\<Union> (WWa D f a))) x", "apply (rule subsetI,\n        frule_tac a1 = xa in Order.segment_inc[THEN sym, of \"Iod D W\" _ \"x\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); Order (Iod D W);\n        xa \\<in> segment (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> carrier (Iod D W)\n 2. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); Order (Iod D W);\n        xa \\<in> segment (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D W)\n 3. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; W \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a))); Order (Iod D W);\n        xa \\<in> segment (Iod D W) x;\n        (xa \\<in> segment (Iod D W) x) =\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> segment (Iod D (\\<Union> (WWa D f a))) x", "apply (frule Order.segment_sub[of \"Iod D W\" \"x\"],\n      rule_tac c = xa in subsetD[of \"segment (Iod D W) x\" \"carrier (Iod D W)\"],\n       assumption+, simp only:Iod_carrier,\n      frule_tac W = W in mem_WWa_sub_carrier, frule Iod_Order[of \"W\"],\n      frule Order.segment_sub[of \"Iod D W\" \"x\"], simp only:Iod_carrier,\n      frule_tac c = xa in subsetD[of \"segment (Iod D W) x\" \"W\"],\n             simp add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        x \\<in> W; W \\<in> WWa D f a;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; True;\n        Order (Iod D (\\<Union> (WWa D f a))); True;\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        (xa \\<in> segment (Iod D W) x) = True; W \\<subseteq> carrier D;\n        Order (Iod D W); segment (Iod D W) x \\<subseteq> W;\n        xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> segment (Iod D (\\<Union> (WWa D f a))) x", "apply (frule_tac X = W and A = xa in UnionI[of _ \"WWa D f a\"], assumption+,\n         frule_tac X = W and A = x in UnionI[of _ \"WWa D f a\"], assumption+,\n         subst Order.segment_inc[THEN sym, of \"Iod D (\\<Union>(WWa D f a))\" _ \"x\"],\n         assumption+, simp only:Iod_carrier, simp only:Iod_carrier,\n         simp only:Iod_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_6:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk>  \\<Longrightarrow> a \\<in> \\<Union>(WWa D f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)", "apply (frule BNTr2[of \"f\" \"a\"], assumption+,\n       frule UnionI[of \"{a}\" \"WWa D f a\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; {a} \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> {a}\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; {a} \\<in> WWa D f a;\n     a \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)", "apply (simp, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_7:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); \\<exists>xa. Wa D xa f a \\<and> x \\<in> xa\\<rbrakk> \\<Longrightarrow> \n      x \\<in> \\<Union>(WWa D f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<exists>xa. Wa D xa f a \\<and> x \\<in> xa\\<rbrakk>\n    \\<Longrightarrow> x \\<in> \\<Union> (WWa D f a)", "apply (subst Union_iff[of \"x\" \"WWa D f a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<exists>xa. Wa D xa f a \\<and> x \\<in> xa\\<rbrakk>\n    \\<Longrightarrow> Bex (WWa D f a) ((\\<in>) x)", "apply (subst WWa_def, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_8:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); \\<exists>xa. Wa D xa f a \\<and> x \\<in> xa\\<rbrakk> \\<Longrightarrow> x \\<in> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<exists>xa. Wa D xa f a \\<and> x \\<in> xa\\<rbrakk>\n    \\<Longrightarrow> x \\<in> carrier D", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        Wa D xa f a \\<and> x \\<in> xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply (rename_tac W, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>W.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; Wa D W f a;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply (rule_tac A = W and B = \"carrier D\" and c = x in subsetD,\n        rule_tac W = W in mem_WWa_sub_carrier[of _ \"f\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>W.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; Wa D W f a;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> W \\<in> WWa D f a\n 2. \\<And>W.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; Wa D W f a;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> x \\<in> W", "apply (simp add:WWa_def, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_9:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n           \\<forall>x\\<in>carrier D. x \\<preceq> (f x); x \\<in> \\<Union>(WWa D f a) \\<rbrakk> \\<Longrightarrow> x \\<in> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> carrier D", "by (cut_tac Union_WWa_sub_carrier[of \"f\" \"a\"],\n       rule subsetD[of \"\\<Union>(WWa D f a)\" \"carrier D\" \"x\"], assumption+)"], ["", "lemma (in Order) BNTr7_10:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a; Sup D W \\<notin> W\\<rbrakk> \\<Longrightarrow>\n                \\<not> ExPre (Iod D (insert (Sup D W) W)) (Sup D W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> \\<not> ExPre (Iod D (insert (Algebra2.Sup D W) W))\n                              (Algebra2.Sup D W)", "apply (frule mem_WWa_sub_carrier[of \"W\" \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<not> ExPre (Iod D (insert (Algebra2.Sup D W) W))\n                              (Algebra2.Sup D W)", "apply (frule mem_WWa_Chain[of \"W\" \"f\" \"a\"],\n       frule S_inductive_sup_mem[of \"W\"], assumption+,\n       frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+,\n       cut_tac insertI1[of \"Sup D W\" \"W\"],\n       cut_tac subset_insertI[of \"W\" \"Sup D W\"],\n       frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n     W \\<subseteq> insert (Algebra2.Sup D W) W;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<not> ExPre (Iod D (insert (Algebra2.Sup D W) W))\n                              (Algebra2.Sup D W)", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     W \\<subseteq> insert (Algebra2.Sup D W) W;\n     ExPre (Iod D (insert (Algebra2.Sup D W) W)) (Algebra2.Sup D W)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:ExPre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     W \\<subseteq> insert (Algebra2.Sup D W) W;\n     \\<exists>x.\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W)) \\<and>\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W \\<and>\n        (\\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n            x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n            y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                   Algebra2.Sup D W)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule exE, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule forball_contra[of \"carrier (Iod D (insert (Sup D W) W))\" _ _ _\n       \"(=) (Sup D W)\"],\n       thin_tac \"\\<forall>y\\<in>carrier (Iod D (insert (Sup D W) W)).\n            x \\<prec>\\<^bsub>Iod D (insert (Sup D W) W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert (Sup D W) W)\\<^esub> Sup D W\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>carrier\n   (Iod D (insert (Algebra2.Sup D W) W)).\n                            y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                            Algebra2.Sup D W \\<or>\n                            Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule well_ord_adjunction[of \"W\" \"Sup D W\"], assumption+,\n       simp add:S_inductive_sup_bound[of \"W\"],\n       simp add:mem_wwa_Worder[of \"W\"],\n       frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+,\n              frule Worder.Torder[of \"Iod D (W \\<union> {Sup D W})\"], simp,\n       frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+,\n              frule Torder_Chain[of \"insert (Sup D W) W\"], assumption+,\n       frule S_inductive_sup_bound[of \"insert (Sup D W) W\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n           x \\<preceq> Algebra2.Sup D (insert (Algebra2.Sup D W) W)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>carrier\n   (Iod D (insert (Algebra2.Sup D W) W)).\n                            y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                            Algebra2.Sup D W \\<or>\n                            Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n           x \\<preceq> Algebra2.Sup D (insert (Algebra2.Sup D W) W)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>insert (Algebra2.Sup D W) W.\n                            y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                            Algebra2.Sup D W \\<or>\n                            Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n           x \\<preceq> Algebra2.Sup D (insert (Algebra2.Sup D W) W);\n        y \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                         Algebra2.Sup D W \\<or>\n                         Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rotate_tac -2,\n       frule_tac x = y in bspec, assumption+,\n       thin_tac \"\\<forall>x\\<in>insert (Sup D W) W. x \\<preceq> Sup D (insert (Sup D W) W)\",\n       cut_tac insertI1[of \"Sup D W\" \"W\"],\n       simp only:Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>y \\<in> insert (Algebra2.Sup D W) W; S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> insert (Algebra2.Sup D W) W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        y \\<preceq> Algebra2.Sup D (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> y \\<prec> Algebra2.Sup D W \\<or>\n                         Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Sup_adjunct_Sup, erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        Chain D (insert (Algebra2.Sup D W) W); y \\<preceq> Algebra2.Sup D W;\n        y = Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> y \\<prec> Algebra2.Sup D W \\<or>\n                         Algebra2.Sup D W = y\n 2. \\<And>x y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        Chain D (insert (Algebra2.Sup D W) W); y \\<preceq> Algebra2.Sup D W;\n        y \\<in> W\\<rbrakk>\n       \\<Longrightarrow> y \\<prec> Algebra2.Sup D W \\<or>\n                         Algebra2.Sup D W = y\n 3. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule sym, thin_tac \"y = Sup D W\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        Chain D (insert (Algebra2.Sup D W) W); y \\<preceq> Algebra2.Sup D W;\n        y \\<in> W\\<rbrakk>\n       \\<Longrightarrow> y \\<prec> Algebra2.Sup D W \\<or>\n                         Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = y in subsetD[of \"W\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        Chain D (insert (Algebra2.Sup D W) W); y \\<preceq> Algebra2.Sup D W;\n        y \\<in> W; y \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> y \\<prec> Algebra2.Sup D W \\<or>\n                         Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = y and b = \"Sup D W\" in le_imp_less_or_eq, assumption+,\n       simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        Chain D (insert (Algebra2.Sup D W) W);\n        y \\<prec> Algebra2.Sup D W \\<or> y = Algebra2.Sup D W; y \\<in> W;\n        y \\<in> carrier D; y \\<preceq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> y \\<prec> Algebra2.Sup D W \\<or>\n                         Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (\n       thin_tac \"y \\<preceq> Sup D W\",\n       thin_tac \"x = Sup D W \\<or> x \\<in> W\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        Chain D (insert (Algebra2.Sup D W) W);\n        y \\<prec> Algebra2.Sup D W \\<or> y = Algebra2.Sup D W; y \\<in> W;\n        y \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> y \\<prec> Algebra2.Sup D W \\<or>\n                         Algebra2.Sup D W = y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (thin_tac \"\\<forall>y\\<in>carrier (Iod D (insert (Sup D W) W)).\n            x \\<prec>\\<^bsub>Iod D (insert (Sup D W) W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert (Sup D W) W)\\<^esub> Sup D W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> carrier (Iod D (insert (Algebra2.Sup D W) W));\n        x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        Algebra2.Sup D W;\n        \\<forall>y\\<in>carrier (Iod D (insert (Algebra2.Sup D W) W)).\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+,\n       cut_tac insertI1[of \"Sup D W\" \"W\"],\n       simp only:Iod_carrier Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<in> insert (Algebra2.Sup D W) W; x \\<prec> Algebra2.Sup D W;\n        \\<forall>y\\<in>insert (Algebra2.Sup D W) W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y \\<or>\n           Algebra2.Sup D W = y;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule mem_wwa_Worder[of \"W\"],\n       frule S_inductive_sup_bound[of \"W\"], assumption+,\n       frule well_ord_adjunction[of \"W\" \"Sup D W\"], assumption+,\n       frule Worder.Torder[of \"Iod D (W \\<union> {Sup D W})\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        \\<forall>y\\<in>W.\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           Algebra2.Sup D W = y;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule forball_contra1,\n       thin_tac \"\\<forall>y\\<in>W. x \\<prec>\\<^bsub>Iod D (insert (Sup D W) W)\\<^esub> y \\<longrightarrow> Sup D W = y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>W. Algebra2.Sup D W \\<noteq> y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        \\<forall>y\\<in>W.\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           Algebra2.Sup D W = y;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W)); y \\<in> W\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D W \\<noteq> y\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        \\<forall>y\\<in>W.\n           x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n           y \\<longrightarrow>\n           Algebra2.Sup D W = y;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac b = x in S_inductive_Sup_min_bounds[of \"W\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y\\<rbrakk>\n       \\<Longrightarrow> ub W x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:upper_bound_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D \\<and>\n                         (\\<forall>s\\<in>W. s \\<preceq> x)\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE, simp add:oless_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D \\<and>\n                         (\\<forall>s\\<in>W. s \\<preceq> x)\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:subsetD[of \"W\" \"carrier D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>W. s \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        x \\<in> W; s \\<in> W\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n        thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n        W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        x \\<in> W; s \\<in> W\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = s in bspec, assumption+,\n        thin_tac \"\\<forall>y\\<in>W. \\<not> x \\<prec>\\<^bsub>Iod D (insert (Sup D W) W)\\<^esub> y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n        W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W)); x \\<in> W; s \\<in> W;\n        \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n               s\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = x in subsetD[of \"W\" \"insert (Sup D W) W\"], assumption+,\n        frule_tac c = s in subsetD[of \"W\" \"insert (Sup D W) W\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n        W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W)); x \\<in> W; s \\<in> W;\n        \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n               s;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        s \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_not_less_le Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x = Algebra2.Sup D W \\<or> x \\<in> W; x \\<prec> Algebra2.Sup D W;\n        Worder (Iod D W); \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE, simp add:oless_def,\n        frule_tac c = x in subsetD[of \"W\" \"insert (Sup D W) W\"], assumption+,\n        cut_tac insertI1[of \"Sup D W\" \"W\"],\n        frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D W \\<preceq> x; x \\<in> W;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a1 = \"Sup D W\" and b1 = x in Iod_le[THEN sym, \n                   of \"insert (Sup D W) W\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D\n         W \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        x;\n        x \\<in> W; Algebra2.Sup D W \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = x in subsetD[of \"W\" \"insert (Sup D W) W\"], assumption+,\n        cut_tac insertI1[of \"Sup D W\" \"W\"],\n        frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        Algebra2.Sup D\n         W \\<preceq>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n        x;\n        x \\<in> W; Algebra2.Sup D W \\<preceq> x;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:Iod_not_less_le[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n               Algebra2.Sup D W;\n        x \\<in> W; Algebra2.Sup D W \\<preceq> x;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = x in subsetD[of \"W\" \"insert (Sup D W) W\"], assumption+,\n        cut_tac insertI1[of \"Sup D W\" \"W\"],\n        frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        x \\<prec> Algebra2.Sup D W; Worder (Iod D W);\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        Torder (Iod D (insert (Algebra2.Sup D W) W));\n        \\<forall>y\\<in>W.\n           \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n                  y;\n        \\<not> x \\<prec>\\<^bsub>Iod D (insert (Algebra2.Sup D W) W)\\<^esub>\n               Algebra2.Sup D W;\n        x \\<in> W; Algebra2.Sup D W \\<preceq> x;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_11:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n a \\<in> carrier D; b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a; \n \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W\\<rbrakk> \\<Longrightarrow>\n ExPre (Iod D (insert b W)) x = ExPre (Iod D W) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (insert b W)) x = ExPre (Iod D W) x", "apply (case_tac \"b \\<in> W\",\n         simp add:insert_absorb[of \"b\" \"W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (insert b W)) x = ExPre (Iod D W) x", "apply (frule mem_WWa_sub_carrier[of \"W\"],\n       frule subsetD[of \"W\" \"carrier D\" \"x\"], assumption+,\n       frule mem_wwa_Worder[of \"W\"],\n       frule mem_WWa_Chain[of \"W\" \"f\" \"a\"],\n       frule well_ord_adjunction[of \"W\" \"b\"], assumption+,\n       frule insert_sub[of \"W\" \"carrier D\" \"b\"], assumption+,\n       cut_tac insertI1[of \"b\" \"W\"],\n       cut_tac subset_insertI[of \"W\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (W \\<union> {b}));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (insert b W)) x = ExPre (Iod D W) x", "apply (simp del:insert_iff insert_subset add:Un_commute,\n       frule Worder.Torder[of \"Iod D (insert b W)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (insert b W)) x = ExPre (Iod D W) x", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     ExPre (Iod D (insert b W)) x\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D W) x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     ExPre (Iod D W) x\\<rbrakk>\n    \\<Longrightarrow> ExPre (Iod D (insert b W)) x", "apply (frule subsetD[of \"W\" \"insert b W\" \"x\"], assumption+,\n        frule Iod_Order[of \"insert b W\"],\n        unfold ExPre_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D (insert b W)) \\<and>\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                   xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n     x \\<in> insert b W; Order (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D W) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                         \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                                    xa \\<prec>\\<^bsub>Iod D W\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (erule exE, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                   xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D W) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                            \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (rule contrapos_pp, (simp del:insert_iff insert_subset)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (frule_tac a = xa in forall_spec,\n        thin_tac \"\\<forall>xa. xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow> xa \\<in> carrier (Iod D W) \\<longrightarrow>\n               (\\<exists>y\\<in>carrier (Iod D W). xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (simp only:Iod_carrier)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W)); xa \\<in> insert b W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>insert b W.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (simp del:insert_subset)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa = b \\<or> xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (cut_tac insertI1[of \"b\" \"W\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa = b \\<or> xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa = b\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 3. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<and>\n        (\\<forall>y\\<in>W.\n            b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa = b\\<rbrakk>\n       \\<Longrightarrow> b \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 3. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; W \\<in> WWa D f a;\n        \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n        W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n        Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<and>\n        (\\<forall>y\\<in>W.\n            b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa = b\\<rbrakk>\n       \\<Longrightarrow> b \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 3. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (frule_tac x = x in bspec, assumption,\n        thin_tac \"\\<forall>x\\<in>W. x \\<preceq> b\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; W \\<in> WWa D f a; x \\<in> W; b \\<notin> W;\n        W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n        Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<and>\n        (\\<forall>y\\<in>W.\n            b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa = b; x \\<preceq> b\\<rbrakk>\n       \\<Longrightarrow> b \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 3. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (frule subsetD[of \"W\" \"insert b W\" \"x\"], assumption+,\n        frule Iod_carrier[THEN sym, of \"insert b W\"], \n        frule eq_set_inc[of \"x\" \"insert b W\" \"carrier (Iod D (insert b W))\"],\n                      assumption,\n        frule eq_set_inc[of \"b\" \"insert b W\" \"carrier (Iod D (insert b W))\"],\n                      assumption,\n        frule Torder.not_le_less[THEN sym, of \"Iod D (insert b W)\" \"x\" \"b\"], \n                      assumption+,\n        thin_tac \"insert b W = carrier (Iod D (insert b W))\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; W \\<in> WWa D f a; x \\<in> W; b \\<notin> W;\n        W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n        Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<and>\n        (\\<forall>y\\<in>W.\n            b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa = b; x \\<preceq> b; x \\<in> insert b W;\n        x \\<in> carrier (Iod D (insert b W));\n        b \\<in> carrier (Iod D (insert b W));\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x =\n        (\\<not> x \\<preceq>\\<^bsub>Iod D (insert b W)\\<^esub> b)\\<rbrakk>\n       \\<Longrightarrow> b \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 3. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (simp del:insert_iff insert_subset add:Iod_le)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        Torder (Iod D (insert b W)); Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        b \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<in> carrier (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D (insert b W)).\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D W) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D W).\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> carrier (Iod D W) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D W).\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (frule_tac c = xa in subsetD[of \"W\" \"insert b W\"], assumption+,\n         frule subsetD[of \"W\" \"insert b W\" \"x\"], assumption+,\n         simp only:Iod_less, simp only:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W)); xa \\<in> insert b W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>insert b W.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (cut_tac a = xa in insert_iff[of _ \"b\" \"W\"],\n          simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa = b \\<or> xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W; xa = b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (frule Iod_carrier[THEN sym, of \"insert b W\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W; xa = b;\n        insert b W = carrier (Iod D (insert b W))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (frule_tac a = b in eq_set_inc[of _ \"insert b W\" \n                     \"carrier (Iod D (insert b W))\"], assumption+,\n         frule_tac a = x in eq_set_inc[of _ \"insert b W\" \n                     \"carrier (Iod D (insert b W))\"], assumption+,\n         thin_tac \"insert b W = carrier (Iod D (insert b W))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W; xa = b; b \\<in> carrier (Iod D (insert b W));\n        x \\<in> carrier (Iod D (insert b W))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (simp del:insert_iff insert_subset add:Torder.not_le_less[THEN sym, \n           of \"Iod D (insert b W)\" \"x\" \"b\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        \\<not> x \\<preceq>\\<^bsub>Iod D (insert b W)\\<^esub> b;\n        \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<and>\n        (\\<forall>y\\<in>W.\n            b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa = b; b \\<in> carrier (Iod D (insert b W));\n        x \\<in> carrier (Iod D (insert b W))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (rotate_tac 5,\n         frule_tac x = x in bspec, assumption,\n         thin_tac \"\\<forall>x\\<in>W. x \\<preceq> b\", simp add:Iod_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        (xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n         \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x) \\<and>\n        (\\<forall>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n            \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n           xa \\<in> W \\<longrightarrow>\n           (\\<exists>y\\<in>W.\n               xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> W \\<longrightarrow>\n        (\\<exists>y\\<in>W.\n            xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n        xa \\<in> insert b W; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (thin_tac \"xa \\<in> insert b W\", erule conjE,\n         simp del:insert_iff insert_subset,\n         thin_tac \"\\<forall>xa. xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<longrightarrow>\n               xa \\<in> W \\<longrightarrow> (\\<exists>y\\<in>W. xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and> y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<exists>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n           y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n        \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (erule bexE, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x; xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n        \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        \\<forall>y\\<in>W.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        y \\<in> W; xa \\<prec>\\<^bsub>Iod D W\\<^esub> y;\n        y \\<prec>\\<^bsub>Iod D W\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n         thin_tac \"\\<forall>x\\<in>W. x \\<preceq> b\",\n         frule_tac x = y in bspec, assumption,\n         thin_tac \"\\<forall>y\\<in>W. xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\",\n         frule_tac c = xa in subsetD[of \"W\" \"insert b W\"], assumption+,\n         frule_tac c = y in subsetD[of \"W\" \"insert b W\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; W \\<in> WWa D f a; x \\<in> W; b \\<notin> W;\n        W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n        Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        x \\<in> insert b W; Order (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x; xa \\<in> W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> b \\<longrightarrow>\n        \\<not> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        y \\<in> W; xa \\<prec>\\<^bsub>Iod D W\\<^esub> y;\n        y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        xa \\<in> insert b W; y \\<in> insert b W\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (simp del:insert_iff insert_subset add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     W \\<subseteq> carrier D; x \\<in> carrier D; Worder (Iod D W);\n     Chain D W; Worder (Iod D (insert b W));\n     insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n     W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n     \\<exists>xa.\n        xa \\<in> carrier (Iod D W) \\<and>\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa.\n                         xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                         xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         \\<not> (\\<exists>y\n    \\<in>carrier (Iod D (insert b W)).\n                                    xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    y \\<and>\n                                    y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                    x)", "apply (erule exE, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        xa \\<in> carrier (Iod D W); xa \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                   xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                   y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<in> carrier (Iod D (insert b W)) \\<and>\n                            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                            x \\<and>\n                            \\<not> (\\<exists>y\n       \\<in>carrier (Iod D (insert b W)).\n xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)", "apply (rule contrapos_pp, (simp del:insert_iff insert_subset)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        xa \\<in> carrier (Iod D W); xa \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D W).\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D (insert b W)) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n               xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = xa in forall_spec,\n        simp only:Iod_carrier,\n        frule_tac c = xa in subsetD[of \"W\" \"insert b W\"], assumption+,\n        frule_tac c = x in subsetD[of \"W\" \"insert b W\"], assumption+,\n        simp add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W));\n        xa \\<in> carrier (Iod D W); xa \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D W).\n           xa \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> carrier (Iod D (insert b W)) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n               xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> carrier (Iod D (insert b W)) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n            xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:Iod_carrier,\n        frule_tac c = xa in subsetD[of \"W\" \"insert b W\"], assumption,\n        simp del:insert_iff insert_subset add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<prec> b \\<and>\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n        (\\<exists>y\\<in>W.\n            xa \\<prec> y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W; xa \\<prec> b;\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W;\n        \\<exists>y\\<in>W.\n           xa \\<prec> y \\<and>\n           y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (\n        frule_tac a = xa in forall_spec,\n        thin_tac \"\\<forall>xa. xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow> xa \\<in> insert b W \\<longrightarrow>\n       xa \\<prec> b \\<and> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or> (\\<exists>y\\<in>W. xa \\<prec> y \\<and> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        xa \\<in> insert b W; xa \\<prec> b;\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W; xa \\<prec> b;\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        xa \\<in> insert b W \\<longrightarrow>\n        xa \\<prec> b \\<and>\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n        (\\<exists>y\\<in>W.\n            xa \\<prec> y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W;\n        \\<exists>y\\<in>W.\n           xa \\<prec> y \\<and>\n           y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n        frule_tac x = x in bspec, assumption,\n        thin_tac \"\\<forall>x\\<in>W. x \\<preceq> b\",\n        frule_tac c = xa in subsetD[of \"W\" \"insert b W\"], assumption+, \n        frule_tac c = x in subsetD[of \"W\" \"insert b W\"], assumption+,\n        simp only:Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W; xa \\<prec> b;\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        xa \\<in> insert b W \\<longrightarrow>\n        xa \\<prec> b \\<and>\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n        (\\<exists>y\\<in>W.\n            xa \\<prec> y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W;\n        \\<exists>y\\<in>W.\n           xa \\<prec> y \\<and>\n           y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (thin_tac \"\\<forall>xa. xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow> xa \\<in> insert b W \\<longrightarrow>\n       xa \\<prec> b \\<and> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or> (\\<exists>y\\<in>W. xa \\<prec> y \\<and> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        xa \\<in> insert b W; xa \\<prec> b;\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        xa \\<in> insert b W \\<longrightarrow>\n        xa \\<prec> b \\<and>\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n        (\\<exists>y\\<in>W.\n            xa \\<prec> y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W;\n        \\<exists>y\\<in>W.\n           xa \\<prec> y \\<and>\n           y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        xa \\<in> insert b W; xa \\<prec> b;\n        b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow>\n           xa \\<in> insert b W \\<longrightarrow>\n           xa \\<prec> b \\<and>\n           b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or>\n           (\\<exists>y\\<in>W.\n               xa \\<prec> y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x);\n        xa \\<in> insert b W;\n        \\<exists>y\\<in>W.\n           xa \\<prec> y \\<and>\n           y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n        frule_tac x = x in bspec, assumption,\n        thin_tac \"\\<forall>x\\<in>W. x \\<preceq> b\",\n        frule_tac subsetD[of \"W\" \"insert b W\" \"x\"], assumption+,\n        frule_tac c = xa in subsetD[of \"W\" \"insert b W\"], assumption+,\n        frule Iod_carrier[THEN sym, of \"insert b W\"], \n        frule eq_set_inc[of \"x\" \"insert b W\" \"carrier (Iod D (insert b W))\"],\n                      assumption,\n        frule eq_set_inc[of \"b\" \"insert b W\" \"carrier (Iod D (insert b W))\"],\n                      assumption,\n        frule Torder.not_le_less[THEN sym, of \"Iod D (insert b W)\" \"x\" \"b\"], \n                      assumption+,\n        thin_tac \"insert b W = carrier (Iod D (insert b W))\",\n        simp add:Iod_le,\n        thin_tac \"\\<forall>xa. xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<longrightarrow> xa \\<in> insert b W \\<longrightarrow>\n      xa \\<prec> b \\<and> b \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<or> (\\<exists>y\\<in>W. xa \\<prec> y \\<and> y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; W \\<subseteq> carrier D; x \\<in> carrier D;\n        Worder (Iod D W); Chain D W; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; b \\<in> insert b W;\n        W \\<subseteq> insert b W; Torder (Iod D (insert b W)); xa \\<in> W;\n        xa \\<prec> x;\n        \\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x;\n        xa \\<in> insert b W;\n        \\<exists>y\\<in>W.\n           xa \\<prec> y \\<and>\n           y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule bexE, erule conjE,\n        thin_tac \"\\<forall>x\\<in>W. x \\<preceq> b\",\n        frule_tac x = y in bspec, assumption,\n        thin_tac \"\\<forall>y\\<in>W. xa \\<prec> y \\<longrightarrow> \\<not> y \\<prec> x\",\n        frule_tac c = y in subsetD[of \"W\" \"insert b W\"], assumption+,\n        frule_tac c = x in subsetD[of \"W\" \"insert b W\"], assumption+,\n        simp add:Iod_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_12:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n a \\<in> carrier D; b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a; \n \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x\\<rbrakk> \\<Longrightarrow> \n        Pre (Iod D (insert b W)) x = Pre (Iod D W) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert b W)) x = Pre (Iod D W) x", "apply (case_tac \"b \\<in> W\", simp only:insert_absorb)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert b W)) x = Pre (Iod D W) x", "apply (frule mem_WWa_Chain[of \"W\"], \n       frule mem_wwa_Worder[of \"W\"],\n       frule mem_WWa_sub_carrier[of \"W\"],\n       frule well_ord_adjunction[of \"W\" \"b\"], assumption+,\n       simp add:Un_commute[of \"W\" \"{b}\"],\n       frule insert_sub[of \"W\" \"carrier D\" \"b\"], assumption+,\n       cut_tac subset_insertI[of \"W\" \"b\"],\n       frule subsetD[of \"W\" \"insert b W\" \"x\"], assumption+,\n       cut_tac insertI1[of \"b\" \"W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W;\n     b \\<in> insert b W\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D (insert b W)) x = Pre (Iod D W) x", "apply (rule Worder.UniquePre[of \"Iod D (insert b W)\" \"x\" \n                    \"Pre (Iod D W) x\"], assumption+,\n       simp add:Iod_carrier,\n       subst BNTr7_11[of \"f\" \"a\" \"b\" \"W\" \"x\"], assumption+,\n       frule Worder.Order[of \"Iod D W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D W) x\n                      \\<in> carrier (Iod D (insert b W)) \\<and>\n                      Pre (Iod D W)\n                       x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                      x \\<and>\n                      \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                                 Pre (Iod D W)\n                                  x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 x)", "apply (frule Order.Pre_element[of \"Iod D W\" \"x\"],\n       simp add:Iod_carrier, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W);\n     Pre (Iod D W) x \\<in> carrier (Iod D W) \\<and>\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D W) x\n                      \\<in> carrier (Iod D (insert b W)) \\<and>\n                      Pre (Iod D W)\n                       x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                      x \\<and>\n                      \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                                 Pre (Iod D W)\n                                  x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 x)", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D W) x\n                      \\<in> carrier (Iod D (insert b W)) \\<and>\n                      Pre (Iod D W)\n                       x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                      x \\<and>\n                      \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                                 Pre (Iod D W)\n                                  x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 x)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D W) x \\<in> carrier (Iod D (insert b W))\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D W)\n                       x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                      x \\<and>\n                      \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                                 Pre (Iod D W)\n                                  x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 x)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D W)\n                       x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                      x \\<and>\n                      \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                                 Pre (Iod D W)\n                                  x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 x)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D W)\n                       x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                      x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                                 Pre (Iod D W)\n                                  x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 x)", "apply (simp only:Iod_carrier,\n        frule subsetD[of \"W\" \"insert b W\" \"x\"], assumption+,\n        frule subsetD[of \"W\" \"insert b W\" \"Pre (Iod D W) x\"], \n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> W;\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>W.\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x);\n     x \\<in> insert b W; Pre (Iod D W) x \\<in> insert b W\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D W)\n                       x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                      x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                                 Pre (Iod D W)\n                                  x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 x)", "apply (simp only:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<not> (\\<exists>y\\<in>carrier (Iod D W).\n                Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<and>\n                y \\<prec>\\<^bsub>Iod D W\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>y\\<in>carrier (Iod D (insert b W)).\n                                 Pre (Iod D W)\n                                  x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                                 x)", "apply (rule contrapos_pp, (simp del:insert_iff insert_subset)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; ExPre (Iod D W) x;\n     b \\<notin> W; Chain D W; Worder (Iod D W); W \\<subseteq> carrier D;\n     Worder (Iod D (insert b W)); insert b W \\<subseteq> carrier D;\n     W \\<subseteq> insert b W; x \\<in> insert b W; b \\<in> insert b W;\n     Order (Iod D W); Pre (Iod D W) x \\<in> carrier (Iod D W);\n     Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<forall>y\\<in>carrier (Iod D W).\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow>\n        \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n     \\<exists>y\\<in>carrier (Iod D (insert b W)).\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n        y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        ExPre (Iod D W) x; b \\<notin> W; Chain D W; Worder (Iod D W);\n        W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        x \\<in> insert b W; b \\<in> insert b W; Order (Iod D W);\n        Pre (Iod D W) x \\<in> carrier (Iod D W);\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>carrier (Iod D W).\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        y \\<in> carrier (Iod D (insert b W));\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n        y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:Iod_carrier,\n        frule subsetD[of \"W\" \"insert b W\" \"Pre (Iod D W) x\"], \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        ExPre (Iod D W) x; b \\<notin> W; Chain D W; Worder (Iod D W);\n        W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        x \\<in> insert b W; b \\<in> insert b W; Order (Iod D W);\n        Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>W.\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        y \\<in> insert b W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n        y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        Pre (Iod D W) x \\<in> insert b W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac a = y in insert_iff[of _ \"b\" \"W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        ExPre (Iod D W) x; b \\<notin> W; Chain D W; Worder (Iod D W);\n        W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        x \\<in> insert b W; b \\<in> insert b W; Order (Iod D W);\n        Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>W.\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        y \\<in> insert b W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n        y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        Pre (Iod D W) x \\<in> insert b W;\n        (y \\<in> insert b W) = (y = b \\<or> y \\<in> W)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac P = \"y \\<in> insert b W\" and Q = \"y = b \\<or> y \\<in> W\" in \n        eq_prop, assumption+,\n        thin_tac \"(y \\<in> insert b W) = (y = b \\<or> y \\<in> W)\",\n        thin_tac \"y \\<in> insert b W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        ExPre (Iod D W) x; b \\<notin> W; Chain D W; Worder (Iod D W);\n        W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        x \\<in> insert b W; b \\<in> insert b W; Order (Iod D W);\n        Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>W.\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n        y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        Pre (Iod D W) x \\<in> insert b W; y = b \\<or> y \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE,\n        thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n        frule_tac x = x in bspec, assumption,\n        thin_tac \"\\<forall>x\\<in>W. x \\<preceq> b\", erule conjE,\n        frule Iod_carrier[THEN sym, of \"insert b W\"],\n        frule eq_set_inc[of \"x\" \"insert b W\" \"carrier (Iod D (insert b W))\"],\n                      assumption,\n        frule eq_set_inc[of \"b\" \"insert b W\" \"carrier (Iod D (insert b W))\"],\n                      assumption,\n        thin_tac \"insert b W = carrier (Iod D (insert b W))\",\n        simp del:insert_iff insert_subset,\n        frule Worder.Torder[of \"Iod D (insert b W)\"],\n         frule Torder.not_le_less[THEN sym, of \"Iod D (insert b W)\" \"x\" \"b\"], \n                      assumption+, simp add:Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        ExPre (Iod D W) x; b \\<notin> W; Chain D W; Worder (Iod D W);\n        W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        insert b W \\<subseteq> carrier D; W \\<subseteq> insert b W;\n        x \\<in> insert b W; b \\<in> insert b W; Order (Iod D W);\n        Pre (Iod D W) x \\<in> W;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        \\<forall>y\\<in>W.\n           Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub>\n           y \\<longrightarrow>\n           \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x;\n        Pre (Iod D W) x \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> y \\<and>\n        y \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        Pre (Iod D W) x \\<in> insert b W; y \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rotate_tac -4,\n        frule_tac x = y in bspec, assumption,\n        thin_tac \"\\<forall>y\\<in>W. Pre (Iod D W) x \\<prec>\\<^bsub>Iod D W\\<^esub> y \\<longrightarrow> \\<not> y \\<prec>\\<^bsub>Iod D W\\<^esub> x\",\n        frule_tac c = y in subsetD[of \"W\" \"insert b W\"], assumption,\n        simp add:Iod_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_13:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n   a \\<in> carrier D; b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a; \n   \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W\\<rbrakk> \\<Longrightarrow> \n        (segment (Iod D (insert b W)) x) = segment (Iod D W) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (insert b W)) x = segment (Iod D W) x", "apply (case_tac \"b \\<in> W\", simp add:insert_absorb)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (insert b W)) x = segment (Iod D W) x", "apply (frule mem_wwa_Worder[of \"W\"],\n       frule mem_WWa_sub_carrier[of \"W\"],\n       frule mem_WWa_Chain[of \"W\"],\n       frule insert_sub[of \"W\" \"carrier D\" \"b\"], assumption+,\n       frule well_ord_adjunction[of \"W\" \"b\"], assumption+,\n       simp del:insert_subset add:Un_commute,\n       cut_tac subset_insertI[of \"W\" \"b\"],\n       cut_tac insertI1[of \"b\" \"W\"],\n       frule Worder.Torder[of \"Iod D (insert b W)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (insert b W)) x = segment (Iod D W) x", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (insert b W)) x\n                      \\<subseteq> segment (Iod D W) x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (insert b W)) x", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W));\n        xa \\<in> segment (Iod D (insert b W)) x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> segment (Iod D W) x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (insert b W)) x", "apply (simp del:insert_iff insert_subset add:segment_def Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W));\n        xa \\<in> (if x \\<notin> insert b W then carrier (Iod D (insert b W))\n                  else {xa.\n                        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                        x \\<and>\n                        xa \\<in> carrier (Iod D (insert b W))})\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                         xa \\<in> W\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (insert b W)) x", "apply (frule subsetD[of \"W\" \"insert b W\" \"x\"], assumption+,\n        simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x \\<and>\n        xa \\<in> carrier (Iod D (insert b W));\n        x \\<in> insert b W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                         xa \\<in> W\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (insert b W)) x", "apply (erule conjE, simp only:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W)); x \\<in> insert b W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x;\n        xa \\<in> insert b W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                         xa \\<in> W\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (insert b W)) x", "apply (cut_tac a = xa in insert_iff[of _ \"b\" \"W\"],\n        frule_tac P = \"xa \\<in> insert b W\" and Q = \"xa = b \\<or> xa \\<in> W\" in \n        eq_prop, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W)); x \\<in> insert b W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x; xa \\<in> insert b W;\n        (xa \\<in> insert b W) = (xa = b \\<or> xa \\<in> W);\n        xa = b \\<or> xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                         xa \\<in> W\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (insert b W)) x", "apply (thin_tac \"(xa \\<in> insert b W) = (xa = b \\<or> xa \\<in> W)\",\n       erule disjE, simp del:insert_iff insert_subset,\n       frule Iod_carrier[THEN sym, of \"insert b W\"], \n       frule eq_set_inc[of \"x\" \"insert b W\" \"carrier (Iod D (insert b W))\"],\n                      assumption,\n       frule eq_set_inc[of \"b\" \"insert b W\" \"carrier (Iod D (insert b W))\"],\n                      assumption,\n       thin_tac \"insert b W = carrier (Iod D (insert b W))\",\n       frule Torder.not_le_less[THEN sym, of \"Iod D (insert b W)\" \"x\" \"b\"],\n       assumption+, simp add:Iod_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W)); x \\<in> insert b W;\n        xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub> x; xa \\<in> insert b W;\n        xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                         xa \\<in> W\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (insert b W)) x", "apply (frule_tac c = xa in subsetD[of \"W\" \"insert b W\"], assumption+,\n       frule_tac c = x in subsetD[of \"W\" \"insert b W\"], assumption+,\n       simp add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n     \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W; b \\<notin> W;\n     Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n     insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n     W \\<subseteq> insert b W; b \\<in> insert b W;\n     Torder (Iod D (insert b W))\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D W) x\n                      \\<subseteq> segment (Iod D (insert b W)) x", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W)); xa \\<in> segment (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> segment (Iod D (insert b W)) x", "apply (simp del:insert_iff insert_subset add:segment_def,\n        simp only:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W));\n        xa \\<in> (if \\<not> True then W\n                  else {xa.\n                        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and>\n                        xa \\<in> W})\\<rbrakk>\n       \\<Longrightarrow> (x \\<notin> insert b W \\<longrightarrow>\n                          xa \\<in> insert b W) \\<and>\n                         (x \\<in> insert b W \\<longrightarrow>\n                          xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                          x \\<and>\n                          xa \\<in> insert b W)", "apply (frule_tac subsetD[of \"W\" \"insert b W\" \"x\"], assumption+,\n        simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        b \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        W \\<in> WWa D f a; \\<forall>x\\<in>W. x \\<preceq> b; x \\<in> W;\n        b \\<notin> W; Worder (Iod D W); W \\<subseteq> carrier D; Chain D W;\n        insert b W \\<subseteq> carrier D; Worder (Iod D (insert b W));\n        W \\<subseteq> insert b W; b \\<in> insert b W;\n        Torder (Iod D (insert b W));\n        xa \\<prec>\\<^bsub>Iod D W\\<^esub> x \\<and> xa \\<in> W;\n        x \\<in> insert b W\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>Iod D (insert b W)\\<^esub>\n                         x \\<and>\n                         xa \\<in> insert b W", "apply (erule conjE,\n        frule_tac c = xa in subsetD[of \"W\" \"insert b W\"], assumption+,\n        simp add:Iod_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_14:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow>\n            (insert (Sup D W) W) \\<in> WWa D f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> insert (Algebra2.Sup D W) W \\<in> WWa D f a", "apply (case_tac \"Sup D W \\<in> W\",\n       simp add:insert_absorb[of \"Sup D W\" \"W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> insert (Algebra2.Sup D W) W \\<in> WWa D f a", "apply (frule mem_WWa_sub_carrier[of \"W\" \"f\" \"a\"],\n       frule mem_WWa_Chain[of \"W\" \"f\" \"a\"],\n       frule S_inductive_sup_mem[of \"W\"], assumption+,\n       frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+,\n       rule mem_of_WWa [of \"insert (Sup D W) W\" \"a\" \"f\"], assumption+,\n       frule S_inductive_sup_bound[of \"W\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D (insert (Algebra2.Sup D W) W))\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> insert (Algebra2.Sup D W) W\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n                         a \\<preceq> x\n 4. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n                         if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (frule well_ord_adjunction[of \"W\" \"Sup D W\"], assumption+,\n       simp add:mem_wwa_Worder, simp,\n       frule mem_WWa_inc_a[of \"W\" \"f\" \"a\"], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n                         a \\<preceq> x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n                         if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n                         if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (simp add:WWa_def Wa_def, (erule conjE)+, erule disjE,\n        frule S_inductive_sup_bound[of \"W\"], assumption+,\n        simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Algebra2.Sup D W \\<notin> W;\n     W \\<subseteq> carrier D; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (Algebra2.Sup D W) W.\n                         if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (simp only:insert_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x = Algebra2.Sup D W \\<or> x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x = Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (frule mem_WWa_inc_a[of \"W\" \"f\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x = Algebra2.Sup D W; a \\<in> W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (frule not_eq_outside [of \"Sup D W\" \"W\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x = Algebra2.Sup D W; a \\<in> W;\n        \\<forall>b\\<in>W. b \\<noteq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (rotate_tac -1, \n       frule_tac x = a in bspec, assumption+,\n       thin_tac \"\\<forall>b\\<in>W. b \\<noteq> Sup D W\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x = Algebra2.Sup D W; a \\<in> W;\n        a \\<noteq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (frule BNTr7_10[of \"f\" \"a\" \"W\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x = Algebra2.Sup D W; a \\<in> W; a \\<noteq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D (insert (Algebra2.Sup D W) W))\n                (Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (simp del:insert_iff insert_subset add:Adjunct_segment_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (frule S_inductive_sup_bound[of \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (subst BNTr7_11[of \"f\" \"a\" \"Sup D W\" \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D W) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (case_tac \"ExPre (Iod D W) x\",\n        subst BNTr7_12[of \"f\" \"a\" \"Sup D W\" \"W\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D W) x then f (Pre (Iod D W) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D W) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (simp del:insert_iff insert_subset add:WWa_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; Wa D W f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> f (Pre (Iod D W) x) = x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D W) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (unfold Wa_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D W) x\n                         then f (Pre (Iod D (insert (Algebra2.Sup D W) W))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (Algebra2.Sup D W) W)) x) =\n                                   x\n                              else a = a", "apply (simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> x \\<longrightarrow>\n                         Algebra2.Sup D\n                          (segment (Iod D (insert (Algebra2.Sup D W) W))\n                            x) =\n                         x", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D W) x; a \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D\n                          (segment (Iod D (insert (Algebra2.Sup D W) W))\n                            x) =\n                         x", "apply (subst BNTr7_13[of \"f\" \"a\" \"Sup D W\" \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Algebra2.Sup D W \\<notin> W; W \\<subseteq> carrier D; Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D; x \\<in> W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D W) x; a \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D (segment (Iod D W) x) = x", "apply (simp add:WWa_def Wa_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_15:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a;\n     f (Sup D W) \\<noteq> Sup D W\\<rbrakk> \\<Longrightarrow>\n     ExPre (Iod D (insert (f (Sup D W)) (insert (Sup D W) W))) (f (Sup D W))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a;\n     f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W\\<rbrakk>\n    \\<Longrightarrow> ExPre\n                       (Iod D\n                         (insert (f (Algebra2.Sup D W))\n                           (insert (Algebra2.Sup D W) W)))\n                       (f (Algebra2.Sup D W))", "apply (simp add:ExPre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a;\n     f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<in> carrier\n                                  (Iod D\n                                    (insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W))) \\<and>\n                         x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n                         f (Algebra2.Sup D W) \\<and>\n                         (\\<forall>y\\<in>carrier\n    (Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))).\n                             x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n                             y \\<longrightarrow>\n                             \\<not> y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n                                    f (Algebra2.Sup D W))", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule BNTr7_14[of \"f\" \"a\" \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule mem_WWa_sub_carrier[of \"insert (Sup D W) W\" \"f\" \"a\"],\n      frule mem_WWa_Chain[of \"insert (Sup D W) W\" \"f\" \"a\"],\n      frule mem_wwa_Worder[of \"insert (Sup D W) W\" \"f\" \"a\"],\n      frule mem_WWa_Chain[of \"W\" \"f\" \"a\"],\n      frule S_inductive_sup_mem[of \"W\"], assumption+,\n      frule funcset_mem[of \"f\" \"carrier D\" \"carrier D\" \"Sup D W\"], assumption+,\n      frule insert_sub[of \"insert (Sup D W) W\" \"carrier D\" \"f (Sup D W)\"], \n         assumption+,\n      frule S_inductive_sup_bound[of \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule well_ord_adjunction[of \"insert (Sup D W) W\" \"f (Sup D W)\"], \n       assumption+,\n       rule ballI,\n       simp only:insert_iff, erule disjE, simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        \\<forall>x.\n           x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n           f (Algebra2.Sup D W) \\<longrightarrow>\n           x \\<in> carrier\n                    (Iod D\n                      (insert (f (Algebra2.Sup D W))\n                        (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier\n                            (Iod D\n                              (insert (f (Algebra2.Sup D W))\n                                (insert (Algebra2.Sup D W) W))).\n               x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n               y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n               f (Algebra2.Sup D W));\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W; x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> f (Algebra2.Sup D W)\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D (insert (Algebra2.Sup D W) W))\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D\n        (insert (Algebra2.Sup D W) W \\<union>\n         {f (Algebra2.Sup D W)}))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac x = \"Sup D W\" in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        \\<forall>x.\n           x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n           f (Algebra2.Sup D W) \\<longrightarrow>\n           x \\<in> carrier\n                    (Iod D\n                      (insert (f (Algebra2.Sup D W))\n                        (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier\n                            (Iod D\n                              (insert (f (Algebra2.Sup D W))\n                                (insert (Algebra2.Sup D W) W))).\n               x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n               y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n               f (Algebra2.Sup D W));\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W; x \\<in> W;\n        Algebra2.Sup D W \\<preceq> f (Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> f (Algebra2.Sup D W)\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D (insert (Algebra2.Sup D W) W))\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D\n        (insert (Algebra2.Sup D W) W \\<union>\n         {f (Algebra2.Sup D W)}))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (\n       rotate_tac -3,\n       frule_tac x = x in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> W; Algebra2.Sup D W \\<preceq> f (Algebra2.Sup D W);\n        S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        \\<forall>x.\n           x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n           f (Algebra2.Sup D W) \\<longrightarrow>\n           x \\<in> carrier\n                    (Iod D\n                      (insert (f (Algebra2.Sup D W))\n                        (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n           (\\<exists>y\\<in>carrier\n                            (Iod D\n                              (insert (f (Algebra2.Sup D W))\n                                (insert (Algebra2.Sup D W) W))).\n               x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n               y \\<and>\n               y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n               f (Algebra2.Sup D W));\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> f (Algebra2.Sup D W)\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D (insert (Algebra2.Sup D W) W))\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D\n        (insert (Algebra2.Sup D W) W \\<union>\n         {f (Algebra2.Sup D W)}))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (\n       frule mem_WWa_sub_carrier[of \"W\"],\n       frule_tac c = x in subsetD[of \"W\" \"carrier D\"], assumption+,\n       rule_tac a = x in le_trans[of _ \"Sup D W\" \"f (Sup D W)\"], assumption+,\n       cut_tac insertI1[of \"Sup D W\" \"W\"],\n       cut_tac insertI1[of \"f (Sup D W)\" \"insert (Sup D W) W\"],\n       cut_tac subset_insertI[of \"insert (Sup D W) W\" \"f (Sup D W)\"],\n       frule subsetD[of \"insert (Sup D W) W\" \"insert (f (Sup D W)) \n               (insert (Sup D W) W)\" \"Sup D W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D (insert (Algebra2.Sup D W) W \\<union> {f (Algebra2.Sup D W)}));\n     Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n     f (Algebra2.Sup D W)\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     insert (Algebra2.Sup D W) W\n     \\<subseteq> insert (f (Algebra2.Sup D W))\n                  (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> insert (f (Algebra2.Sup D W))\n            (insert (Algebra2.Sup D W) W)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac a = \"Sup D W\" in forall_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D (insert (Algebra2.Sup D W) W \\<union> {f (Algebra2.Sup D W)}));\n     Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n     f (Algebra2.Sup D W)\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     insert (Algebra2.Sup D W) W\n     \\<subseteq> insert (f (Algebra2.Sup D W))\n                  (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> insert (f (Algebra2.Sup D W))\n            (insert (Algebra2.Sup D W) W)\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D\n                       W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n                      f (Algebra2.Sup D W)\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D (insert (Algebra2.Sup D W) W \\<union> {f (Algebra2.Sup D W)}));\n     Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n     f (Algebra2.Sup D W)\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     insert (Algebra2.Sup D W) W\n     \\<subseteq> insert (f (Algebra2.Sup D W))\n                  (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> carrier\n            (Iod D\n              (insert (f (Algebra2.Sup D W))\n                (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n     (\\<exists>y\\<in>carrier\n                      (Iod D\n                        (insert (f (Algebra2.Sup D W))\n                          (insert (Algebra2.Sup D W) W))).\n         Algebra2.Sup D\n          W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n         y \\<and>\n         y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n         f (Algebra2.Sup D W))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac x = \"Sup D W\" in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n       frule not_sym, \n       thin_tac \"f (Sup D W) \\<noteq> Sup D W\",\n       simp del:insert_iff insert_subset \n             add:le_imp_less_or_eq[of \"Sup D W\" \"f (Sup D W)\"],\n       simp only:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     \\<forall>x.\n        x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W) \\<longrightarrow>\n        x \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n        (\\<exists>y\\<in>carrier\n                         (Iod D\n                           (insert (f (Algebra2.Sup D W))\n                             (insert (Algebra2.Sup D W) W))).\n            x \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            y \\<and>\n            y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n            f (Algebra2.Sup D W));\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D (insert (Algebra2.Sup D W) W \\<union> {f (Algebra2.Sup D W)}));\n     Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n     f (Algebra2.Sup D W)\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     insert (Algebra2.Sup D W) W\n     \\<subseteq> insert (f (Algebra2.Sup D W))\n                  (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> carrier\n            (Iod D\n              (insert (f (Algebra2.Sup D W))\n                (insert (Algebra2.Sup D W) W))) \\<longrightarrow>\n     (\\<exists>y\\<in>carrier\n                      (Iod D\n                        (insert (f (Algebra2.Sup D W))\n                          (insert (Algebra2.Sup D W) W))).\n         Algebra2.Sup D\n          W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n         y \\<and>\n         y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n         f (Algebra2.Sup D W))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (thin_tac \"\\<forall>x. x \\<prec>\\<^bsub>Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\\<^esub> f (Sup D W) \\<longrightarrow>\n         x \\<in> carrier (Iod D (insert (f (Sup D W)) (insert (Sup D W) W))) \\<longrightarrow>\n         (\\<exists>y\\<in>carrier (Iod D (insert (f (Sup D W)) (insert (Sup D W) W))).\n             x \\<prec>\\<^bsub>Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\\<^esub> y \\<and>\n             y \\<prec>\\<^bsub>Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\\<^esub>\n             f (Sup D W))\",\n      simp only:Iod_carrier,\n      frule True_then[of \"\\<exists>y\\<in>insert (f (Sup D W)) (insert (Sup D W) W).\n         Sup D W \\<prec>\\<^bsub>Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\\<^esub> y \\<and>\n         y \\<prec>\\<^bsub>Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\\<^esub> f (Sup D W)\"],\n      thin_tac \"True \\<longrightarrow>\n      (\\<exists>y\\<in>insert (f (Sup D W)) (insert (Sup D W) W).\n         Sup D W \\<prec>\\<^bsub>Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\\<^esub> y \\<and>\n         y \\<prec>\\<^bsub>Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\\<^esub> f (Sup D W))\",\n       erule bexE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder\n         (Iod D\n           (insert (Algebra2.Sup D W) W \\<union> {f (Algebra2.Sup D W)}));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        y \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac a = y in insert_iff[of _ \"f (Sup D W)\" \"insert (Sup D W) W\"],\n       frule_tac P = \"y \\<in> insert (f (Sup D W)) (insert (Sup D W) W)\" and\n                 Q = \"y = f (Sup D W) \\<or> y \\<in> insert (Sup D W) W\" in eq_prop,\n       assumption+,\n       thin_tac \"y \\<in> insert (f (Sup D W)) (insert (Sup D W) W)\",\n       thin_tac \"(y \\<in> insert (f (Sup D W)) (insert (Sup D W) W)) =\n         (y = f (Sup D W) \\<or> y \\<in> insert (Sup D W) W)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder\n         (Iod D\n           (insert (Algebra2.Sup D W) W \\<union> {f (Algebra2.Sup D W)}));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y = f (Algebra2.Sup D W) \\<or>\n        y \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE, simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder\n         (Iod D\n           (insert (Algebra2.Sup D W) W \\<union> {f (Algebra2.Sup D W)}));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac a = y in insert_iff[of _ \"Sup D W\" \"W\"],\n       frule_tac P = \"y \\<in> insert (Sup D W) W\" and\n                 Q = \"y = (Sup D W) \\<or> y \\<in> W\" in eq_prop, assumption+,\n       thin_tac \"y \\<in> insert (Sup D W) W\",\n       thin_tac \"y \\<in> insert (Sup D W) W = (y = (Sup D W) \\<or> y \\<in> W)\",\n       erule disjE, simp add:oless_def,\n       simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = y in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> W; y \\<preceq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = \"Sup D W\" in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n       cut_tac subset_insertI[of \"W\" \"Sup D W\"],\n       frule_tac c = y in subsetD[of \"W\" \"insert (Sup D W) W\"], assumption+,\n       frule_tac c = y in subsetD[of \"insert (Sup D W) W\"\n                  \"insert (f (Sup D W)) (insert (Sup D W) W)\"], assumption+,\n       frule_tac Worder.Torder[of \"Iod D (insert (f (Sup D W)) \n                                         (insert (Sup D W) W))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> W; y \\<preceq> Algebra2.Sup D W;\n        Algebra2.Sup D W \\<preceq> f (Algebra2.Sup D W);\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        y \\<in> insert (Algebra2.Sup D W) W;\n        y \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Torder\n         (Iod D\n           (insert (f (Algebra2.Sup D W))\n             (insert (Algebra2.Sup D W) W)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a1 = y in Torder.not_le_less[THEN sym, of \n       \"Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\" _ \"Sup D W\"],\n       simp add:Iod_carrier, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> W; y \\<preceq> Algebra2.Sup D W;\n        Algebra2.Sup D W \\<preceq> f (Algebra2.Sup D W);\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        y \\<in> insert (Algebra2.Sup D W) W;\n        y \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Torder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y =\n        (\\<not> y \\<preceq>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n                Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_16:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a; \n     f (Sup D W) \\<noteq> (Sup D W)\\<rbrakk> \\<Longrightarrow>\n     Pre (Iod D (insert (f (Sup D W)) (insert (Sup D W) W))) (f (Sup D W)) = \n          (Sup D W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a;\n     f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D\n                            (insert (f (Algebra2.Sup D W))\n                              (insert (Algebra2.Sup D W) W)))\n                       (f (Algebra2.Sup D W)) =\n                      Algebra2.Sup D W", "apply (frule BNTr7_14[of \"f\" \"a\" \"W\"], assumption+,\n      frule mem_WWa_sub_carrier[of \"insert (Sup D W) W\" \"f\" \"a\"],\n      frule mem_WWa_Chain[of \"insert (Sup D W) W\" \"f\" \"a\"],\n      frule mem_wwa_Worder[of \"insert (Sup D W) W\" \"f\" \"a\"],\n      frule mem_WWa_Chain[of \"W\" \"f\" \"a\"],\n      frule S_inductive_sup_mem[of \"W\"], assumption+,\n      frule funcset_mem[of \"f\" \"carrier D\" \"carrier D\" \"Sup D W\"], assumption+,\n      frule insert_sub[of \"insert (Sup D W) W\" \"carrier D\" \"f (Sup D W)\"], \n         assumption+,\n      frule S_inductive_sup_bound[of \"W\"], assumption+,\n      frule well_ord_adjunction[of \"insert (Sup D W) W\" \"f (Sup D W)\"], \n      assumption+, rule ballI,\n      simp only:insert_iff, erule disjE, simp del:insert_iff insert_subset,\n      frule_tac x = \"Sup D W\" in bspec, assumption,\n      thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n      rotate_tac -3,\n      frule_tac x = x in bspec, assumption,\n      thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\",\n      frule mem_WWa_sub_carrier[of \"W\"],\n      frule_tac c = x in subsetD[of \"W\" \"carrier D\"], assumption+,\n      rule_tac a = x in le_trans[of _ \"Sup D W\" \"f (Sup D W)\"], assumption+,\n      cut_tac insertI1[of \"Sup D W\" \"W\"],\n      cut_tac insertI1[of \"f (Sup D W)\" \"insert (Sup D W) W\"],\n      cut_tac subset_insertI[of \"insert (Sup D W) W\" \"f (Sup D W)\"],\n      frule subsetD[of \"insert (Sup D W) W\" \"insert (f (Sup D W)) \n               (insert (Sup D W) W)\" \"Sup D W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D (insert (Algebra2.Sup D W) W \\<union> {f (Algebra2.Sup D W)}));\n     Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n     f (Algebra2.Sup D W)\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     insert (Algebra2.Sup D W) W\n     \\<subseteq> insert (f (Algebra2.Sup D W))\n                  (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> insert (f (Algebra2.Sup D W))\n            (insert (Algebra2.Sup D W) W)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D\n                            (insert (f (Algebra2.Sup D W))\n                              (insert (Algebra2.Sup D W) W)))\n                       (f (Algebra2.Sup D W)) =\n                      Algebra2.Sup D W", "apply (simp only:Un_commute[of \"insert (Sup D W) W\" \"{f (Sup D W)}\"],\n          simp only:insert_is_Un[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n     Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n     f (Algebra2.Sup D W)\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     insert (Algebra2.Sup D W) W\n     \\<subseteq> insert (f (Algebra2.Sup D W))\n                  (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> insert (f (Algebra2.Sup D W))\n            (insert (Algebra2.Sup D W) W)\\<rbrakk>\n    \\<Longrightarrow> Pre (Iod D\n                            (insert (f (Algebra2.Sup D W))\n                              (insert (Algebra2.Sup D W) W)))\n                       (f (Algebra2.Sup D W)) =\n                      Algebra2.Sup D W", "apply (rule Worder.UniquePre[of \"Iod D (insert (f (Sup D W)) \n       (insert (Sup D W) W))\" \"f (Sup D W)\" \"Sup D W\"], assumption+,\n       simp only:Iod_carrier,\n       rule BNTr7_15, assumption+,\n       rule conjI, simp only:Iod_carrier, rule conjI, simp only:Iod_less,\n       frule_tac x = \"Sup D W\" in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\", frule not_sym, \n       thin_tac \"f (Sup D W) \\<noteq> Sup D W\", simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n     Algebra2.Sup D W \\<in> carrier D; f (Algebra2.Sup D W) \\<in> carrier D;\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D;\n     \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n     Worder\n      (Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n     Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n     f (Algebra2.Sup D W)\n     \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n     insert (Algebra2.Sup D W) W\n     \\<subseteq> insert (f (Algebra2.Sup D W))\n                  (insert (Algebra2.Sup D W) W);\n     Algebra2.Sup D W\n     \\<in> insert (f (Algebra2.Sup D W))\n            (insert (Algebra2.Sup D W) W)\\<rbrakk>\n    \\<Longrightarrow> \\<not> (\\<exists>y\n \\<in>carrier\n       (Iod D\n         (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))).\n                                 Algebra2.Sup D\n                                  W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n                                 y \\<and>\n                                 y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n                                 f (Algebra2.Sup D W))", "apply (rule contrapos_pp, (simp del:insert_iff insert_subset)+,\n       erule bexE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        y \\<in> carrier\n                 (Iod D\n                   (insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp only:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        y \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (\n       cut_tac a = y in insert_iff[of _ \"f (Sup D W)\" \"insert (Sup D W) W\"],\n       frule_tac P = \"y \\<in> insert (f (Sup D W)) (insert (Sup D W) W)\" and \n        Q = \"y = f (Sup D W) \\<or> y \\<in> insert (Sup D W) W\" in eq_prop,\n        assumption,\n       thin_tac \"y \\<in> insert (f (Sup D W)) (insert (Sup D W) W)\",\n       thin_tac \"y \\<in> insert (f (Sup D W)) (insert (Sup D W) W) =\n                (y = f (Sup D W) \\<or> y \\<in> insert (Sup D W) W)\",\n       erule disjE, simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (\n       cut_tac a = y in insert_iff[of _ \"Sup D W\" \"W\"],\n       frule_tac P = \"y \\<in> insert (Sup D W) W\" and \n        Q = \"y = (Sup D W) \\<or> y \\<in> W\" in eq_prop, assumption,\n       thin_tac \"y \\<in> insert (Sup D W) W\",\n       thin_tac \"y \\<in> (insert (Sup D W) W) = (y = (Sup D W) \\<or> y \\<in> W)\",\n       erule disjE, simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = y in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\",\n       cut_tac subset_insertI[of \"W\" \"Sup D W\"],\n       frule_tac c = y in subsetD[of \"W\" \"insert (Sup D W) W\"], assumption,\n       frule Worder.Torder[of \"Iod D (insert (f (Sup D W)) \n                                     (insert (Sup D W) W))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> W; y \\<preceq> Algebra2.Sup D W;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        y \\<in> insert (Algebra2.Sup D W) W;\n        Torder\n         (Iod D\n           (insert (f (Algebra2.Sup D W))\n             (insert (Algebra2.Sup D W) W)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule mem_WWa_sub_carrier[of \"W\"],\n       frule_tac c = y in subsetD[of \"W\" \"carrier D\"], assumption+,\n       frule_tac c = y in subsetD[of \"insert (Sup D W) W\" \n             \"insert (f (Sup D W)) (insert (Sup D W) W)\"], assumption+,\n       frule_tac a1 = y in Torder.not_le_less[THEN sym, \n        of \"Iod D (insert (f (Sup D W)) (insert (Sup D W) W))\" _ \"Sup D W\"],\n       simp add:Iod_carrier, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        Worder (Iod D (insert (Algebra2.Sup D W) W)); Chain D W;\n        Algebra2.Sup D W \\<in> carrier D;\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        Worder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        Algebra2.Sup D W \\<in> insert (Algebra2.Sup D W) W;\n        f (Algebra2.Sup D W)\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        insert (Algebra2.Sup D W) W\n        \\<subseteq> insert (f (Algebra2.Sup D W))\n                     (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D W\n        \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y;\n        y \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        f (Algebra2.Sup D W);\n        y \\<in> W; y \\<preceq> Algebra2.Sup D W;\n        W \\<subseteq> insert (Algebra2.Sup D W) W;\n        y \\<in> insert (Algebra2.Sup D W) W;\n        Torder\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)));\n        W \\<subseteq> carrier D; y \\<in> carrier D;\n        y \\<in> insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W);\n        Algebra2.Sup D\n         W \\<prec>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n        y =\n        (\\<not> y \\<preceq>\\<^bsub>Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))\\<^esub>\n                Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr7_17:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n      a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a\\<rbrakk> \\<Longrightarrow>\n          (insert (f (Sup D W)) (insert (Sup D W) W)) \\<in> WWa D f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> insert (f (Algebra2.Sup D W))\n                       (insert (Algebra2.Sup D W) W)\n                      \\<in> WWa D f a", "apply (frule mem_WWa_Chain[of \"W\"],\n       frule S_inductive_sup_mem[of \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> insert (f (Algebra2.Sup D W))\n                       (insert (Algebra2.Sup D W) W)\n                      \\<in> WWa D f a", "apply (case_tac \"f (Sup D W) = Sup D W\",\n       simp add:insert_absorb, simp add: BNTr7_14,\n       frule not_sym, thin_tac \"f (Sup D W) \\<noteq> Sup D W\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W)\\<rbrakk>\n    \\<Longrightarrow> insert (f (Algebra2.Sup D W))\n                       (insert (Algebra2.Sup D W) W)\n                      \\<in> WWa D f a", "apply (frule BNTr7_14[of \"f\" \"a\" \"W\"], assumption+,\n      frule mem_WWa_sub_carrier[of \"insert (Sup D W) W\" \"f\" \"a\"],\n      frule mem_WWa_Chain[of \"insert (Sup D W) W\" \"f\" \"a\"],\n      frule funcset_mem[of \"f\" \"carrier D\" \"carrier D\" \"Sup D W\"], assumption+,\n      frule mem_wwa_Worder[of \"insert (Sup D W) W\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W))\\<rbrakk>\n    \\<Longrightarrow> insert (f (Algebra2.Sup D W))\n                       (insert (Algebra2.Sup D W) W)\n                      \\<in> WWa D f a", "apply (frule insert_sub[of \"insert (Sup D W) W\" \"carrier D\" \"f (Sup D W)\"], \n        assumption+,\n       rule mem_of_WWa [of \"(insert (f (Sup D W)) (insert (Sup D W) W))\" \"a\"\n        \"f\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder\n                       (Iod D\n                         (insert (f (Algebra2.Sup D W))\n                           (insert (Algebra2.Sup D W) W)))\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> insert (f (Algebra2.Sup D W))\n                               (insert (Algebra2.Sup D W) W)\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         a \\<preceq> x\n 4. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (frule well_ord_adjunction[of \"insert (Sup D W) W\" \"f (Sup D W)\"],\n        assumption+, \n       frule S_inductive_sup_bound[of \"W\"], assumption+,\n             rule ballI, \n             simp only:insert_iff, erule disjE, simp,\n       frule_tac x = x in bspec, assumption,\n             thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\",\n       frule_tac x = \"Sup D W\" in bspec, assumption,\n             thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n       frule mem_WWa_sub_carrier[of \"W\"],\n       frule_tac c = x in subsetD[of \"W\" \"carrier D\"], assumption+,\n       rule_tac a = x in le_trans[of _ \"Sup D W\" \"f (Sup D W)\"], \n             assumption+, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> insert (f (Algebra2.Sup D W))\n                               (insert (Algebra2.Sup D W) W)\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         a \\<preceq> x\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (frule mem_WWa_inc_a[of \"insert (Sup D W) W\" \"f\" \"a\"],\n       simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         a \\<preceq> x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (f (Algebra2.Sup D W))\n                 (insert (Algebra2.Sup D W) W)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (frule BNTr2_1[of \"f\" \"a\" \"insert (Sup D W) W\"], assumption+,\n        cut_tac a = x in insert_iff[of _ \"f (Sup D W)\" \"insert (Sup D W) W\"],\n        frule_tac P = \"x \\<in> insert (f (Sup D W)) (insert (Sup D W) W)\" and \n         Q = \"x = (f (Sup D W)) \\<or> x \\<in> (insert (Sup D W) W)\" in eq_prop, \n                             assumption+,\n        thin_tac \"x \\<in> insert (f (Sup D W)) (insert (Sup D W) W)\",  \n        thin_tac \"(x \\<in> insert (f (Sup D W)) (insert (Sup D W) W)) =\n         (x = f (Sup D W) \\<or> x \\<in> insert (Sup D W) W)\",\n        erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>insert (Algebra2.Sup D W) W. a \\<preceq> x;\n        x = f (Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>insert (Algebra2.Sup D W) W. a \\<preceq> x;\n        x \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (frule_tac x = \"Sup D W\" in bspec, assumption,\n        thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n        frule_tac x = \"Sup D W\" in bspec, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>insert (Algebra2.Sup D W) W. a \\<preceq> x;\n        x = f (Algebra2.Sup D W);\n        Algebra2.Sup D W \\<preceq> f (Algebra2.Sup D W);\n        a \\<preceq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>insert (Algebra2.Sup D W) W. a \\<preceq> x;\n        x \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 3. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (\n        thin_tac \"\\<forall>x\\<in>insert (Sup D W) W. a \\<preceq> x\",\n        simp add:le_trans[of \"a\" \"Sup D W\" \"f (Sup D W)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        \\<forall>x\\<in>insert (Algebra2.Sup D W) W. a \\<preceq> x;\n        x \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 2. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (frule_tac x = x in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>insert (Sup D W) W. a \\<preceq> x\",\n       simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     W \\<in> WWa D f a; Chain D W; Algebra2.Sup D W \\<in> carrier D;\n     Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n     insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n     insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n     Chain D (insert (Algebra2.Sup D W) W);\n     f (Algebra2.Sup D W) \\<in> carrier D;\n     Worder (Iod D (insert (Algebra2.Sup D W) W));\n     insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n     \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>insert (f (Algebra2.Sup D W))\n(insert (Algebra2.Sup D W) W).\n                         if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (f (Algebra2.Sup D W))\n                 (insert (Algebra2.Sup D W) W)\\<rbrakk>\n       \\<Longrightarrow> if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (cut_tac a = x in insert_iff[of _ \"f (Sup D W)\" \"insert (Sup D W) W\"],\n        frule_tac P = \"x \\<in> insert (f (Sup D W)) (insert (Sup D W) W)\" and \n         Q = \"x = (f (Sup D W)) \\<or> x \\<in> (insert (Sup D W) W)\" in eq_prop, \n                             assumption+,\n        thin_tac \"x \\<in> insert (f (Sup D W)) (insert (Sup D W) W)\",  \n        thin_tac \"(x \\<in> insert (f (Sup D W)) (insert (Sup D W) W)) =\n         (x = f (Sup D W) \\<or> x \\<in> insert (Sup D W) W)\",\n        erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x = f (Algebra2.Sup D W)\\<rbrakk>\n       \\<Longrightarrow> if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (frule not_sym, thin_tac \"Sup D W \\<noteq> f (Sup D W)\",\n       frule BNTr7_15[of \"f\" \"a\" \"W\"], assumption+,\n       simp del:insert_iff insert_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x = f (Algebra2.Sup D W);\n        f (Algebra2.Sup D W) \\<noteq> Algebra2.Sup D W;\n        ExPre\n         (Iod D\n           (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n         (f (Algebra2.Sup D W))\\<rbrakk>\n       \\<Longrightarrow> f (Pre (Iod D\n                                  (insert (f (Algebra2.Sup D W))\n                                    (insert (Algebra2.Sup D W) W)))\n                             (f (Algebra2.Sup D W))) =\n                         f (Algebra2.Sup D W)\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W\\<rbrakk>\n       \\<Longrightarrow> if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (subst BNTr7_16[of \"f\" \"a\" \"W\"], assumption+, simp,\n       frule S_inductive_sup_bound[of \"W\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> if ExPre\n                             (Iod D\n                               (insert (f (Algebra2.Sup D W))\n                                 (insert (Algebra2.Sup D W) W)))\n                             x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (subst BNTr7_11[of \"f\" \"a\" \"f (Sup D W)\" \n                         \"insert (Sup D W) W\"], assumption+,\n       rule ballI,\n       thin_tac \"x \\<in> insert (Sup D W) W\", simp only:insert_iff,\n       erule disjE,\n       frule_tac x = \"Sup D W\" in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n       simp add:le_antisym,\n       frule_tac x = xa in bspec, assumption+,\n       thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\",\n       frule_tac x = \"Sup D W\" in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n       frule mem_WWa_sub_carrier[of \"W\"],\n       frule_tac c = xa in subsetD[of \"W\" \"carrier D\"], assumption+,\n       rule_tac a = xa in le_trans[of _ \"Sup D W\" \"f (Sup D W)\"],\n       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (case_tac \"ExPre (Iod D (insert (Sup D W) W)) x\",\n       simp del:insert_iff insert_subset,\n       subst BNTr7_12[of \"f\" \"a\" \"f (Sup D W)\" \"insert (Sup D W) W\"],\n                assumption+,\n       rule ballI, thin_tac \"x \\<in> insert (Sup D W) W\",\n              simp only:insert_iff, erule disjE,\n         frule_tac x = \"Sup D W\" in bspec, assumption,\n         thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n         simp add:le_antisym,\n         frule_tac x = xa in bspec, assumption+,\n              thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\",\n         frule_tac x = \"Sup D W\" in bspec, assumption,\n              thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n         frule mem_WWa_sub_carrier[of \"W\"],\n         frule_tac c = xa in subsetD[of \"W\" \"carrier D\"], assumption+,\n         rule_tac a = xa in le_trans[of _ \"Sup D W\" \"f (Sup D W)\"],\n               assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\\<rbrakk>\n       \\<Longrightarrow> f (Pre (Iod D (insert (Algebra2.Sup D W) W)) x) = x\n 2. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (frule mem_WWa_then[of \"insert (Sup D W) W\" \"f\" \"a\"],\n              (erule conjE)+,\n              thin_tac \"\\<forall>x\\<in>insert (Sup D W) W. a \\<preceq> x\",\n              frule_tac x = x in bspec, assumption,\n              thin_tac \"\\<forall>x\\<in>insert (Sup D W) W.\n            if ExPre (Iod D (insert (Sup D W) W)) x\n            then f (Pre (Iod D (insert (Sup D W) W)) x) = x\n            else if a \\<noteq> x\n                 then Sup D (segment (Iod D (insert (Sup D W) W)) x) = x\n                 else a = a\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (insert (Algebra2.Sup D W) W)) x\n                         then f (Pre (Iod D\n (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)))\n                                  x) =\n                              x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment\n(Iod D (insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W))) x) =\n                                   x\n                              else a = a", "apply (simp del:insert_iff insert_subset, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D (insert (Algebra2.Sup D W) W)) x;\n        a \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D\n                          (segment\n                            (Iod D\n                              (insert (f (Algebra2.Sup D W))\n                                (insert (Algebra2.Sup D W) W)))\n                            x) =\n                         x", "apply (subst BNTr7_13[of \"f\" \"a\" \"f (Sup D W)\" \"insert (Sup D W) W\"],\n               assumption+,\n         rule ballI, thin_tac \"x \\<in> insert (Sup D W) W\",\n              simp only:insert_iff,\n         erule disjE,\n         frule_tac x = \"Sup D W\" in bspec, assumption,\n              thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n         simp add:le_antisym,\n         frule_tac x = xa in bspec, assumption+,\n              thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\",\n         frule_tac x = \"Sup D W\" in bspec, assumption,\n              thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\",\n              frule mem_WWa_sub_carrier[of \"W\"],\n              frule_tac c = xa in subsetD[of \"W\" \"carrier D\"], assumption+,\n              rule_tac a = xa in le_trans[of _ \"Sup D W\" \"f (Sup D W)\"],\n               assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S_inductive_set D;\n        f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> f x; W \\<in> WWa D f a;\n        Chain D W; Algebra2.Sup D W \\<in> carrier D;\n        Algebra2.Sup D W \\<noteq> f (Algebra2.Sup D W);\n        insert (Algebra2.Sup D W) W \\<in> WWa D f a;\n        insert (Algebra2.Sup D W) W \\<subseteq> carrier D;\n        Chain D (insert (Algebra2.Sup D W) W);\n        f (Algebra2.Sup D W) \\<in> carrier D;\n        Worder (Iod D (insert (Algebra2.Sup D W) W));\n        insert (f (Algebra2.Sup D W)) (insert (Algebra2.Sup D W) W)\n        \\<subseteq> carrier D;\n        x \\<in> insert (Algebra2.Sup D W) W;\n        \\<forall>x\\<in>W. x \\<preceq> Algebra2.Sup D W;\n        \\<not> ExPre (Iod D (insert (Algebra2.Sup D W) W)) x;\n        a \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D\n                          (segment (Iod D (insert (Algebra2.Sup D W) W))\n                            x) =\n                         x", "apply (frule mem_WWa_then[of \"insert (Sup D W) W\" \"f\" \"a\"],\n              (erule conjE)+,\n              thin_tac \"\\<forall>x\\<in>insert (Sup D W) W. a \\<preceq> x\",\n             frule_tac x = x in bspec, assumption,\n              thin_tac \"\\<forall>x\\<in>insert (Sup D W) W.\n            if ExPre (Iod D (insert (Sup D W) W)) x\n            then f (Pre (Iod D (insert (Sup D W) W)) x) = x\n            else if a \\<noteq> x\n                 then Sup D (segment (Iod D (insert (Sup D W) W)) x) = x\n                 else a = a\", simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr8:\"\\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \n          \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow>  \\<Union> (WWa D f a) \\<in> (WWa D f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (WWa D f a) \\<in> WWa D f a", "apply (cut_tac Union_WWa_sub_carrier[of \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (WWa D f a) \\<in> WWa D f a", "apply (rule mem_of_WWa[of \"\\<Union>(WWa D f a)\" \"a\" \"f\"], simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (Iod D (\\<Union> (WWa D f a)))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:Worder_def Torder_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (\\<Union> (WWa D f a))) \\<and>\n                      Torder_axioms (Iod D (\\<Union> (WWa D f a))) \\<and>\n                      Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:Iod_Order[of \"\\<Union>(WWa D f a)\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (Iod D (\\<Union> (WWa D f a))) \\<and>\n                      Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms (Iod D (\\<Union> (WWa D f a)))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:Torder_axioms_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa.\n                         aa \\<in> carrier\n                                   (Iod D\n                                     (\\<Union>\n (WWa D f a))) \\<longrightarrow>\n                         (\\<forall>b.\n                             b \\<in> carrier\n(Iod D (\\<Union> (WWa D f a))) \\<longrightarrow>\n                             aa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                             b \\<or>\n                             b \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                             aa)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply ((rule allI, rule impI)+, simp add:Iod_carrier,\n         (erule bexE)+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa b X Xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; X \\<in> WWa D f a;\n        aa \\<in> X; Xa \\<in> WWa D f a; b \\<in> Xa\\<rbrakk>\n       \\<Longrightarrow> aa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         b \\<or>\n                         b \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         aa\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (rename_tac b c X1 X2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>b c X1 X2.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; X1 \\<in> WWa D f a;\n        b \\<in> X1; X2 \\<in> WWa D f a; c \\<in> X2\\<rbrakk>\n       \\<Longrightarrow> b \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         c \\<or>\n                         c \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         b\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac ?W1.0 = X1 and ?W2.0 = X2 in BNTr7[of \"f\" \"a\"],\n           assumption+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>b c X1 X2.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; X1 \\<in> WWa D f a;\n        b \\<in> X1; X2 \\<in> WWa D f a; c \\<in> X2;\n        X1 \\<subseteq> X2 \\<or> X2 \\<subseteq> X1\\<rbrakk>\n       \\<Longrightarrow> b \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         c \\<or>\n                         c \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         b\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (erule disjE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>b c X1 X2.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; X1 \\<in> WWa D f a;\n        b \\<in> X1; X2 \\<in> WWa D f a; c \\<in> X2;\n        X1 \\<subseteq> X2\\<rbrakk>\n       \\<Longrightarrow> b \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         c \\<or>\n                         c \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         b\n 2. \\<And>b c X1 X2.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; X1 \\<in> WWa D f a;\n        b \\<in> X1; X2 \\<in> WWa D f a; c \\<in> X2;\n        X2 \\<subseteq> X1\\<rbrakk>\n       \\<Longrightarrow> b \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         c \\<or>\n                         c \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         b\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 6. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply ((frule_tac c = b and A = X1 and B = X2 in subsetD, assumption+),\n        (frule_tac W = X2 in mem_wwa_Worder[of _ \"f\" \"a\"]),\n        (simp add:Worder_def Torder_def, (erule conjE)+,\n         simp add:Torder_axioms_def),\n\n       (frule_tac W = X1 in  mem_WWa_sub_carrier[of _ \"f\" \"a\"],\n        frule_tac W = X2 in  mem_WWa_sub_carrier[of _ \"f\" \"a\"],\n        simp add:Iod_carrier),\n       (frule_tac a = b in forall_spec, assumption,\n        thin_tac \"\\<forall>a. a \\<in> X2 \\<longrightarrow> (\\<forall>b. b \\<in> X2 \\<longrightarrow>\n                                a \\<preceq>\\<^bsub>Iod D X2\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D X2\\<^esub> a)\",\n        frule_tac a = c in forall_spec, assumption,\n        thin_tac \"\\<forall>ba. ba \\<in> X2 \\<longrightarrow> b \\<preceq>\\<^bsub>Iod D X2\\<^esub> ba \\<or> ba \\<preceq>\\<^bsub>Iod D X2\\<^esub> b\",\n        frule_tac X = X1 and A = b in UnionI[of _ \"WWa D f a\"], assumption+,\n        frule_tac X = X2 and A = c in UnionI[of _ \"WWa D f a\"], assumption+,\n        simp add:Iod_le))"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>b c X1 X2.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D; X1 \\<in> WWa D f a;\n        b \\<in> X1; X2 \\<in> WWa D f a; c \\<in> X2;\n        X2 \\<subseteq> X1\\<rbrakk>\n       \\<Longrightarrow> b \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         c \\<or>\n                         c \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                         b\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac c = c and A = X2 and B = X1 in subsetD, assumption+,\n        frule_tac W = X1 in mem_wwa_Worder[of _ \"f\" \"a\"],\n        (simp add:Worder_def Torder_def, (erule conjE)+,\n         simp add:Torder_axioms_def),\n\n        (frule_tac W = X2 in  mem_WWa_sub_carrier[of _ \"f\" \"a\"],\n         frule_tac W = X1 in  mem_WWa_sub_carrier[of _ \"f\" \"a\"],\n         simp add:Iod_carrier,\n         frule_tac a = b in forall_spec, assumption),\n        thin_tac \"\\<forall>a. a \\<in> X1 \\<longrightarrow> (\\<forall>b. b \\<in> X1 \\<longrightarrow>\n                                a \\<preceq>\\<^bsub>Iod D X1\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D X1\\<^esub> a)\",\n        (frule_tac a = c in forall_spec, assumption,\n         thin_tac \"\\<forall>ba. ba \\<in> X1 \\<longrightarrow> b \\<preceq>\\<^bsub>Iod D X1\\<^esub> ba \\<or> ba \\<preceq>\\<^bsub>Iod D X1\\<^esub> b\",\n         frule_tac X = X1 and A = b in UnionI[of _ \"WWa D f a\"], assumption+,\n         frule_tac X = X1 and A = c in UnionI[of _ \"WWa D f a\"], assumption+),\n        simp add:Iod_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (Iod D (\\<Union> (WWa D f a)))\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (subst Worder_axioms_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>X.\n                         X \\<subseteq> carrier\n  (Iod D (\\<Union> (WWa D f a))) \\<and>\n                         X \\<noteq> {} \\<longrightarrow>\n                         Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> carrier (Iod D (\\<Union> (WWa D f a)));\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac A = X in nonempty_ex, erule exE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> carrier (Iod D (\\<Union> (WWa D f a))); X \\<noteq> {};\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp only:Iod_carrier,\n        frule_tac c = x and A = X and B = \"\\<Union>(WWa D f a)\" in subsetD,\n        assumption, simp, erule bexE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x Xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        Xa \\<in> WWa D f a; x \\<in> Xa\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (rename_tac X x W)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac W = W in mem_wwa_Worder[of _ \"f\" \"a\"],\n        simp add:Worder_def Torder_def, erule conjE,\n        simp add:Worder_axioms_def, erule conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>X.\n           X \\<subseteq> carrier (Iod D W) \\<and>\n           X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem (Iod D W) X x)\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac a = \"X \\<inter> W\" in forall_spec,\n        thin_tac \"\\<forall>X. X \\<subseteq> carrier (Iod D W) \\<and> X \\<noteq> {} \\<longrightarrow>\n            (\\<exists>x. minimum_elem (Iod D W) X x)\",\n        frule_tac W = W in mem_WWa_sub_carrier[of _ \"f\" \"a\"],\n        simp only:Iod_carrier, simp add:Int_lower2, blast,\n        thin_tac \"\\<forall>X. X \\<subseteq> carrier (Iod D W) \\<and> X \\<noteq> {} \\<longrightarrow>\n            (\\<exists>x. minimum_elem (Iod D W) X x)\", erule exE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        minimum_elem (Iod D W) (X \\<inter> W) xa\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac W = W in mem_WWa_sub_carrier)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); minimum_elem (Iod D W) (X \\<inter> W) xa;\n        W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac D = \"Iod D W\" and X = \"X \\<inter> W\" and a = xa in \n                      Order.minimum_elem_mem)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); minimum_elem (Iod D W) (X \\<inter> W) xa;\n        W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> X \\<inter> W \\<subseteq> carrier (Iod D W)\n 2. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); minimum_elem (Iod D W) (X \\<inter> W) xa;\n        W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> minimum_elem (Iod D W) (X \\<inter> W) xa\n 3. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); minimum_elem (Iod D W) (X \\<inter> W) xa;\n        W \\<subseteq> carrier D; xa \\<in> X \\<inter> W\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 6. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); minimum_elem (Iod D W) (X \\<inter> W) xa;\n        W \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> minimum_elem (Iod D W) (X \\<inter> W) xa\n 2. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); minimum_elem (Iod D W) (X \\<inter> W) xa;\n        W \\<subseteq> carrier D; xa \\<in> X \\<inter> W\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); minimum_elem (Iod D W) (X \\<inter> W) xa;\n        W \\<subseteq> carrier D; xa \\<in> X \\<inter> W\\<rbrakk>\n       \\<Longrightarrow> Ex (minimum_elem (Iod D (\\<Union> (WWa D f a))) X)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (rule contrapos_pp, (simp del:Union_iff)+, erule conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); minimum_elem (Iod D W) (X \\<inter> W) xa;\n        W \\<subseteq> carrier D;\n        \\<forall>x. \\<not> minimum_elem (Iod D (\\<Union> (WWa D f a))) X x;\n        xa \\<in> X; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D;\n        \\<forall>x.\n           x \\<in> X \\<longrightarrow>\n           (\\<exists>xa\\<in>X.\n               \\<not> x \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n                      xa);\n        xa \\<in> X; xa \\<in> W\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac a = xa in forall_spec, assumption+,\n        thin_tac \"\\<forall>x. x \\<in> X \\<longrightarrow> (\\<exists>xa\\<in>X. \\<not> x \\<preceq>\\<^bsub>Iod D (\\<Union>(WWa D f a))\\<^esub> xa)\",\n        erule bexE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub>\n               xb\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac c = xb and A = X and B = \"\\<Union>(WWa D f a)\" in subsetD,\n                 assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> xb;\n        xb \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (cut_tac A = xb and C = \"WWa D f a\" in Union_iff, simp del:Union_iff,\n       erule bexE, rename_tac X x W xa xb W',\n       frule_tac ?W1.0 = W and ?W2.0 = W' in BNTr7[of \"f\" \"a\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> xb;\n        xb \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xb \\<in> W';\n        W \\<subseteq> W' \\<or> W' \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (case_tac \"W' \\<subseteq> W\",\n        frule_tac c = xb and A = W' and B = W in subsetD, assumption+,\n        rotate_tac 4,\n        frule_tac x = xb in bspec, simp,\n        thin_tac \"\\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {};\n        x \\<in> X; W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W); W \\<subseteq> carrier D; xa \\<in> X;\n        xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> xb;\n        xb \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xb \\<in> W';\n        W \\<subseteq> W' \\<or> W' \\<subseteq> W; W' \\<subseteq> W;\n        xb \\<in> W; f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        xa \\<preceq>\\<^bsub>Iod D W\\<^esub> xb\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> xb;\n        xb \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xb \\<in> W';\n        W \\<subseteq> W' \\<or> W' \\<subseteq> W;\n        \\<not> W' \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule Iod_Order[of \"\\<Union>(WWa D f a)\"], \n        frule_tac X = W and A = xa in UnionI[of _ \"WWa D f a\"], assumption+,\n        simp del:Union_iff add:Iod_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> xb;\n        xb \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xb \\<in> W';\n        W \\<subseteq> W' \\<or> W' \\<subseteq> W;\n        \\<not> W' \\<subseteq> W\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp del:Union_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> xb;\n        xb \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xb \\<in> W';\n        W \\<subseteq> W'; W' \\<noteq> W\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac c = xa and A = W and B = W' in subsetD, assumption+,\n        frule_tac X = W' and A = xa in UnionI[of _ \"WWa D f a\"], assumption+,\n        frule_tac X = W' and A = xb in UnionI[of _ \"WWa D f a\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> xb;\n        xb \\<in> \\<Union> (WWa D f a); W' \\<in> WWa D f a; xb \\<in> W';\n        W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a);\n        xb \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp only:Iod_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq> xb; True; W' \\<in> WWa D f a; xb \\<in> W';\n        W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a);\n        xb \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac W = W' in mem_wwa_Worder,\n        frule_tac D = \"Iod D W'\" in Worder.Torder,\n        frule_tac D = \"Iod D W'\" in Worder.Order)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq> xb; True; W' \\<in> WWa D f a; xb \\<in> W';\n        W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a); xb \\<in> \\<Union> (WWa D f a);\n        Worder (Iod D W'); Torder (Iod D W'); Order (Iod D W')\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac W = W' in mem_WWa_sub_carrier,\n        frule_tac T1 = W' and a1 = xa and b1 = xb in Iod_le[THEN sym],\n        assumption+, simp del:Union_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb; W' \\<in> WWa D f a;\n        xb \\<in> W'; W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a); xb \\<in> \\<Union> (WWa D f a);\n        Worder (Iod D W'); Torder (Iod D W'); Order (Iod D W');\n        W' \\<subseteq> carrier D; \\<not> xa \\<preceq> xb\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac D = \"Iod D W'\" and a = xa and b = xb in Torder.not_le_less)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb; W' \\<in> WWa D f a;\n        xb \\<in> W'; W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a); xb \\<in> \\<Union> (WWa D f a);\n        Worder (Iod D W'); Torder (Iod D W'); Order (Iod D W');\n        W' \\<subseteq> carrier D; \\<not> xa \\<preceq> xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> carrier (Iod D W')\n 2. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb; W' \\<in> WWa D f a;\n        xb \\<in> W'; W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a); xb \\<in> \\<Union> (WWa D f a);\n        Worder (Iod D W'); Torder (Iod D W'); Order (Iod D W');\n        W' \\<subseteq> carrier D; \\<not> xa \\<preceq> xb\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> carrier (Iod D W')\n 3. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb; W' \\<in> WWa D f a;\n        xb \\<in> W'; W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a); xb \\<in> \\<Union> (WWa D f a);\n        Worder (Iod D W'); Torder (Iod D W'); Order (Iod D W');\n        W' \\<subseteq> carrier D; \\<not> xa \\<preceq> xb;\n        (\\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb) =\n        xb \\<prec>\\<^bsub>Iod D W'\\<^esub> xa\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 6. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb; W' \\<in> WWa D f a;\n        xb \\<in> W'; W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a); xb \\<in> \\<Union> (WWa D f a);\n        Worder (Iod D W'); Torder (Iod D W'); Order (Iod D W');\n        W' \\<subseteq> carrier D; \\<not> xa \\<preceq> xb\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> carrier (Iod D W')\n 2. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb; W' \\<in> WWa D f a;\n        xb \\<in> W'; W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a); xb \\<in> \\<Union> (WWa D f a);\n        Worder (Iod D W'); Torder (Iod D W'); Order (Iod D W');\n        W' \\<subseteq> carrier D; \\<not> xa \\<preceq> xb;\n        (\\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb) =\n        xb \\<prec>\\<^bsub>Iod D W'\\<^esub> xa\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 5. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        \\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb; W' \\<in> WWa D f a;\n        xb \\<in> W'; W \\<subseteq> W'; W' \\<noteq> W; xa \\<in> W';\n        xa \\<in> \\<Union> (WWa D f a); xb \\<in> \\<Union> (WWa D f a);\n        Worder (Iod D W'); Torder (Iod D W'); Order (Iod D W');\n        W' \\<subseteq> carrier D; \\<not> xa \\<preceq> xb;\n        (\\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb) =\n        xb \\<prec>\\<^bsub>Iod D W'\\<^esub> xa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp del:Union_iff add:Iod_less, thin_tac \"\\<not> xa \\<preceq> xb\", \n        thin_tac \"\\<not> xa \\<preceq>\\<^bsub>Iod D W'\\<^esub> xb\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        xb \\<prec> xa; W' \\<in> WWa D f a; xb \\<in> W'; W \\<subseteq> W';\n        W' \\<noteq> W; xa \\<in> W'; xa \\<in> \\<Union> (WWa D f a);\n        xb \\<in> \\<Union> (WWa D f a); Worder (Iod D W'); Torder (Iod D W');\n        Order (Iod D W'); W' \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule Iod_Order[of \"\\<Union>(WWa D f a)\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        xb \\<prec> xa; W' \\<in> WWa D f a; xb \\<in> W'; W \\<subseteq> W';\n        W' \\<noteq> W; xa \\<in> W'; xa \\<in> \\<Union> (WWa D f a);\n        xb \\<in> \\<Union> (WWa D f a); Worder (Iod D W'); Torder (Iod D W');\n        Order (Iod D W'); W' \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a)))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac a1 = xb and b1 = xa in Iod_less[THEN sym, of \"\\<Union> (WWa D f a)\"],\n        assumption+, simp del:Union_iff,\n        frule_tac x = xa and xa = xb and W = W in BNTr7_1[of \"f\" \"a\"], \n                        assumption+,\n        frule_tac a1 = xb and b1 = xa and T1 = W in Iod_less[THEN sym],\n           assumption+, simp del:Union_iff,\n        frule_tac W = W in mem_wwa_Worder,\n          frule_tac D = \"Iod D W\" in Worder.Torder)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X x W xa xb W'.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        X \\<subseteq> \\<Union> (WWa D f a); X \\<noteq> {}; x \\<in> X;\n        W \\<in> WWa D f a; x \\<in> W; Order (Iod D W);\n        Torder_axioms (Iod D W);\n        \\<forall>x\\<in>X \\<inter> W. xa \\<preceq>\\<^bsub>Iod D W\\<^esub> x;\n        W \\<subseteq> carrier D; xa \\<in> X; xa \\<in> W; xb \\<in> X;\n        xb \\<prec>\\<^bsub>Iod D (\\<Union> (WWa D f a))\\<^esub> xa;\n        W' \\<in> WWa D f a; xb \\<in> W'; W \\<subseteq> W'; W' \\<noteq> W;\n        xa \\<in> W'; xa \\<in> \\<Union> (WWa D f a);\n        xb \\<in> \\<Union> (WWa D f a); Worder (Iod D W'); Torder (Iod D W');\n        Order (Iod D W'); W' \\<subseteq> carrier D;\n        Order (Iod D (\\<Union> (WWa D f a)));\n        xb \\<prec>\\<^bsub>Iod D W\\<^esub> xa; xb \\<in> W; xb \\<prec> xa;\n        Worder (Iod D W); Torder (Iod D W)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 4. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac D1 = \"Iod D W\" and a1 = xa and b1 = xb in \n            Torder.not_le_less[THEN sym],\n          simp add:Iod_carrier, simp add:Iod_carrier, simp del:Union_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> \\<Union> (WWa D f a)\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 3. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (rule BNTr7_6, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a). a \\<preceq> x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (cut_tac A = x in Union_iff[of _ \"WWa D f a\"], simp del:Union_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X;\n        x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (erule bexE, rename_tac x W)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a); W \\<in> WWa D f a; x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x\n 2. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:WWa_def Wa_def[of \"D\" _ \"f\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<Union> (WWa D f a).\n                         if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (case_tac \"ExPre (Iod D (\\<Union>(WWa D f a))) x\", simp,\n       erule bexE, rename_tac x W,\n       frule_tac X = W and A = x in UnionI[of _ \"WWa D f a\"], assumption+,\n       frule_tac x = x in BNTr7_2[of \"f\" \"a\"], assumption+,\n       frule_tac x = W in bspec, assumption,\n         thin_tac \"\\<forall>W\\<in>WWa D f a. x \\<in> W \\<longrightarrow> ExPre (Iod D W) x\",\n         simp del:Union_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; x \\<in> \\<Union> (WWa D f a); ExPre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n 2. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<not> ExPre (Iod D (\\<Union> (WWa D f a))) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (frule_tac x = x in BNTr7_3[of \"f\" \"a\"], assumption+,\n         frule_tac x = W in bspec, assumption,\n         thin_tac \"\\<forall>W\\<in>WWa D f a.\n              x \\<in> W \\<longrightarrow> Pre (Iod D (\\<Union>(WWa D f a))) x = Pre (Iod D W) x\",\n         simp del:Union_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        ExPre (Iod D (\\<Union> (WWa D f a))) x; W \\<in> WWa D f a;\n        x \\<in> W; x \\<in> \\<Union> (WWa D f a); ExPre (Iod D W) x;\n        Pre (Iod D (\\<Union> (WWa D f a))) x = Pre (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> f (Pre (Iod D W) x) = x\n 2. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<not> ExPre (Iod D (\\<Union> (WWa D f a))) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp add:WWa_def Wa_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<not> ExPre (Iod D (\\<Union> (WWa D f a))) x\\<rbrakk>\n       \\<Longrightarrow> if ExPre (Iod D (\\<Union> (WWa D f a))) x\n                         then f (Pre (Iod D (\\<Union> (WWa D f a))) x) = x\n                         else if a \\<noteq> x\n                              then Algebra2.Sup D\n                                    (segment (Iod D (\\<Union> (WWa D f a)))\nx) =\n                                   x\n                              else a = a", "apply (simp del:Union_iff, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        x \\<in> \\<Union> (WWa D f a);\n        \\<not> ExPre (Iod D (\\<Union> (WWa D f a))) x; a \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D\n                          (segment (Iod D (\\<Union> (WWa D f a))) x) =\n                         x", "apply (cut_tac A = x in Union_iff[of _ \"WWa D f a\"], simp del:Union_iff,\n        erule bexE, rename_tac x W,\n        frule_tac x = x and W = W in  BNTr7_5[of \"f\" \"a\" _], assumption+,\n        simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<Union> (WWa D f a) \\<subseteq> carrier D;\n        \\<not> ExPre (Iod D (\\<Union> (WWa D f a))) x; a \\<noteq> x;\n        \\<exists>X\\<in>WWa D f a. x \\<in> X; W \\<in> WWa D f a; x \\<in> W;\n        segment (Iod D (\\<Union> (WWa D f a))) x =\n        segment (Iod D W) x\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D (segment (Iod D W) x) = x", "apply (frule_tac x = x and W = W in BNTr7_4[of \"f\" \"a\"], assumption+,\n        simp del:Union_iff,\n        thin_tac \"\\<Union>(WWa D f a) \\<subseteq> carrier D\",\n        thin_tac \"\\<exists>X\\<in>WWa D f a. x \\<in> X\",\n        thin_tac \"segment (Iod D (\\<Union>(WWa D f a))) x = segment (Iod D W) x\",\n        thin_tac \"\\<not> ExPre (Iod D (\\<Union>(WWa D f a))) x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x W.\n       \\<lbrakk>f \\<in> carrier D \\<rightarrow> carrier D;\n        a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n        \\<not> ExPre (Iod D W) x; a \\<noteq> x; W \\<in> WWa D f a;\n        x \\<in> W\\<rbrakk>\n       \\<Longrightarrow> Algebra2.Sup D (segment (Iod D W) x) = x", "apply (simp add:WWa_def Wa_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*\nlemma (in Order) BNTr9:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n           a \\<in> carrier D;  \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow> \n            insert (Sup D (\\<Union>(WWa D f a))) (\\<Union>(WWa D f a)) \\<in> WWa D f a\"\napply (frule BNTr8[of \"f\" \"a\"], assumption+,\n       rule BNTr7_14[of \"f\" \"a\" \"\\<Union>(WWa D f a)\"], assumption+)\ndone\n\nlemma (in Order) S_inductive_postSup_outside:\" \\<lbrakk>S_inductive_set D; \n       Chain D X; b \\<in> carrier D; Sup D X \\<prec> b\\<rbrakk> \\<Longrightarrow> b \\<notin> X\"\napply (frule S_inductive_sup_mem[of \"X\"], assumption+)\napply (rule contrapos_pp, simp+)\napply (frule S_inductive_sup_bound[of \"X\"], assumption,\n       frule_tac a = b in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>X. x \\<preceq> Sup D X\",\n       frule less_imp_le[of \"Sup D X\" \"b\"], assumption+)\napply (frule le_antisym[of \"Sup D X\" \"b\"], assumption+, simp add:oless_def)\ndone\n\nlemma (in Order) S_inductive_adjunct_postSup_mem_WWa:\"\\<lbrakk>S_inductive_set D;\n      \\<forall>x\\<in>carrier D. x \\<preceq> (f x); W \\<in> WWa D f a; b \\<in> carrier D; (Sup D W) \\<prec> b\\<rbrakk>\n       \\<Longrightarrow>  insert b (insert (Sup D W) W) \\<in> WWa D f a\"\napply (frule mem_WWa_sub_carrier[of \"W\"],\n       frule mem_WWa_Chain[of \"W\"],\n       frule mem_wwa_Worder[of \"W\"],\n       frule S_inductive_sup_mem[of \"W\"], assumption+)\napply (rule mem_of_WWa[of \"insert b (insert (Sup D W) W)\" \"a\" \"f\"],\n       rule insert_sub[of \"insert (Sup D W) W\" \"carrier D\" \"b\"],\n       rule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+) \napply (frule S_inductive_sup_bound[of \"W\"], assumption+,\n       frule insert_sub[of \"W\" \"carrier D\" \"Sup D W\"], assumption+)\napply (frule well_ord_adjunction[of \"W\" \"Sup D W\"], assumption+)\napply (frule well_ord_adjunction[of \"insert (Sup D W) W\" \"b\"], assumption+)\n   apply (rule ballI, simp, erule disjE, simp add:less_imp_le,\n          frule_tac a = x in bspec, assumption,\n          thin_tac \"\\<forall>x\\<in>W. x \\<preceq> Sup D W\")\n   apply (frule_tac c = x in subsetD[of \"W\" \"carrier D\"], assumption+,\n          frule less_imp_le[of \"Sup D W\" \"b\"], assumption+,\n          frule_tac a = x in le_trans[of _ \"Sup D W\" \"b\"], assumption+,\n          simp add:Un_commute[of \"W\" \"{Sup D W}\"],\n          simp add:Un_commute[of \"insert (Sup D W) W\" \"{b}\"])\n apply (cut_tac subset_insertI[of \"W\" \"Sup D W\"],\n        cut_tac subset_insertI[of \"insert (Sup D W) W\" \"b\"],\n        frule mem_WWa_inc_a[of \"W\"], \n        frule subsetD[of \"W\" \"insert (Sup D W) W\" \"a\"], assumption+,\n        frule subsetD[of \"insert (Sup D W) W\" \"insert b (insert (Sup D W) W)\" \n                       \"a\"], assumption+)\n apply (rule ballI) apply simp\n apply (erule disjE, simp,\n        frule less_imp_le[of \"Sup D W\" \"b\"], assumption+,\n        frule S_inductive_sup_bound[of \"W\"], assumption,\n        frule mem_WWa_inc_a[of \"W\"], \n        frule_tac a = a in bspec, assumption,\n        frule subsetD[of \"W\" \"carrier D\" \"a\"], assumption+,\n        rule le_trans[of \"a\" \"Sup D W\" \"b\"], assumption+)\n apply (erule disjE, simp,\n        frule mem_WWa_inc_a[of \"W\"], \n        frule S_inductive_sup_bound[of \"W\"], assumption,\n        simp, simp  add:WWa_def Wa_def)\n apply (rule ballI)\n apply (simp only:insert_iff)\n apply (erule disjE)*)"], ["", "lemma (in Order) BNTr10:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n   a \\<in> carrier D;  \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow>\n                   (Sup D (\\<Union>(WWa D f a))) \\<in> (\\<Union>(WWa D f a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D (\\<Union> (WWa D f a))\n                      \\<in> \\<Union> (WWa D f a)", "apply (frule_tac f = f and a = a in BNTr8, assumption+,\n       frule BNTr7_14[of \"f\" \"a\" \"\\<Union>(WWa D f a)\"], assumption+,\n       frule mem_family_sub_Un[of \"insert (Sup D (\\<Union>(WWa D f a))) (\\<Union>(WWa D f a))\"\n          \"WWa D f a\"],\n       cut_tac insertI1[of \"Sup D (\\<Union>(WWa D f a))\" \"\\<Union>(WWa D f a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<in> WWa D f a;\n     insert (Algebra2.Sup D (\\<Union> (WWa D f a))) (\\<Union> (WWa D f a))\n     \\<in> WWa D f a;\n     insert (Algebra2.Sup D (\\<Union> (WWa D f a))) (\\<Union> (WWa D f a))\n     \\<subseteq> \\<Union> (WWa D f a);\n     Algebra2.Sup D (\\<Union> (WWa D f a))\n     \\<in> insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n            (\\<Union> (WWa D f a))\\<rbrakk>\n    \\<Longrightarrow> Algebra2.Sup D (\\<Union> (WWa D f a))\n                      \\<in> \\<Union> (WWa D f a)", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) BNTr11:\"\\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D; \n                 a \\<in> carrier D;  \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow> \n                   f (Sup D (\\<Union>(WWa D f a))) = (Sup D (\\<Union>(WWa D f a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x\\<rbrakk>\n    \\<Longrightarrow> f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n                      Algebra2.Sup D (\\<Union> (WWa D f a))", "apply (frule_tac f = f and a = a in BNTr8, assumption+,\n       frule mem_WWa_Chain[of \"\\<Union>(WWa D f a)\"],\n       frule BNTr10[of \"f\" \"a\"], assumption+,\n       frule S_inductive_sup_mem[of \"\\<Union>(WWa D f a)\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<in> WWa D f a; Chain D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> \\<Union> (WWa D f a);\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n                      Algebra2.Sup D (\\<Union> (WWa D f a))", "apply (frule BNTr7_17[of \"f\" \"a\" \"\\<Union>(WWa D f a)\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<in> WWa D f a; Chain D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> \\<Union> (WWa D f a);\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> carrier D;\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<in> WWa D f a\\<rbrakk>\n    \\<Longrightarrow> f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n                      Algebra2.Sup D (\\<Union> (WWa D f a))", "apply (cut_tac insertI1[of \"f (Sup D (\\<Union>(WWa D f a)) )\" \"insert (Sup D (\\<Union>(WWa D f a))) (\\<Union>(WWa D f a))\"],\n       frule mem_family_sub_Un[of \"insert (f (Sup D (\\<Union>(WWa D f a))))\n      (insert (Sup D (\\<Union>(WWa D f a))) (\\<Union>(WWa D f a)))\" \"(WWa D f a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<in> WWa D f a; Chain D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> \\<Union> (WWa D f a);\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> carrier D;\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<in> WWa D f a;\n     f (Algebra2.Sup D (\\<Union> (WWa D f a)))\n     \\<in> insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n            (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n              (\\<Union> (WWa D f a)));\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<subseteq> \\<Union> (WWa D f a)\\<rbrakk>\n    \\<Longrightarrow> f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n                      Algebra2.Sup D (\\<Union> (WWa D f a))", "apply (frule subsetD[of \"insert (f (Sup D (\\<Union>(WWa D f a)))) \n        (insert (Sup D (\\<Union>(WWa D f a))) (\\<Union>(WWa D f a)))\" \"\\<Union>(WWa D f a)\" \"f (Sup D (\\<Union>(WWa D f a)))\"],\n         assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<in> WWa D f a; Chain D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> \\<Union> (WWa D f a);\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> carrier D;\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<in> WWa D f a;\n     f (Algebra2.Sup D (\\<Union> (WWa D f a)))\n     \\<in> insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n            (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n              (\\<Union> (WWa D f a)));\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<subseteq> \\<Union> (WWa D f a);\n     f (Algebra2.Sup D (\\<Union> (WWa D f a)))\n     \\<in> \\<Union> (WWa D f a)\\<rbrakk>\n    \\<Longrightarrow> f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n                      Algebra2.Sup D (\\<Union> (WWa D f a))", "apply (frule S_inductive_sup_bound[of \"\\<Union>(WWa D f a)\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<in> WWa D f a; Chain D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> \\<Union> (WWa D f a);\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> carrier D;\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<in> WWa D f a;\n     f (Algebra2.Sup D (\\<Union> (WWa D f a)))\n     \\<in> insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n            (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n              (\\<Union> (WWa D f a)));\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<subseteq> \\<Union> (WWa D f a);\n     f (Algebra2.Sup D (\\<Union> (WWa D f a))) \\<in> \\<Union> (WWa D f a);\n     \\<forall>x\\<in>\\<Union> (WWa D f a).\n        x \\<preceq> Algebra2.Sup D (\\<Union> (WWa D f a))\\<rbrakk>\n    \\<Longrightarrow> f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n                      Algebra2.Sup D (\\<Union> (WWa D f a))", "apply (frule_tac x = \"f (Sup D (\\<Union>(WWa D f a)))\" in bspec,\n       assumption,\n       thin_tac \"\\<forall>x\\<in>\\<Union>(WWa D f a). x \\<preceq> Sup D (\\<Union>(WWa D f a))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<in> WWa D f a; Chain D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> \\<Union> (WWa D f a);\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> carrier D;\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<in> WWa D f a;\n     f (Algebra2.Sup D (\\<Union> (WWa D f a)))\n     \\<in> insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n            (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n              (\\<Union> (WWa D f a)));\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<subseteq> \\<Union> (WWa D f a);\n     f (Algebra2.Sup D (\\<Union> (WWa D f a))) \\<in> \\<Union> (WWa D f a);\n     f (Algebra2.Sup D (\\<Union> (WWa D f a))) \\<preceq>\n     Algebra2.Sup D (\\<Union> (WWa D f a))\\<rbrakk>\n    \\<Longrightarrow> f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n                      Algebra2.Sup D (\\<Union> (WWa D f a))", "apply (frule_tac x = \"Sup D (\\<Union>(WWa D f a))\" in bspec, assumption,\n       thin_tac \"\\<forall>x\\<in>carrier D. x \\<preceq> f x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<Union> (WWa D f a) \\<in> WWa D f a;\n     Chain D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> \\<Union> (WWa D f a);\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> carrier D;\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<in> WWa D f a;\n     f (Algebra2.Sup D (\\<Union> (WWa D f a)))\n     \\<in> insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n            (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n              (\\<Union> (WWa D f a)));\n     insert (f (Algebra2.Sup D (\\<Union> (WWa D f a))))\n      (insert (Algebra2.Sup D (\\<Union> (WWa D f a)))\n        (\\<Union> (WWa D f a)))\n     \\<subseteq> \\<Union> (WWa D f a);\n     f (Algebra2.Sup D (\\<Union> (WWa D f a))) \\<in> \\<Union> (WWa D f a);\n     f (Algebra2.Sup D (\\<Union> (WWa D f a))) \\<preceq>\n     Algebra2.Sup D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<preceq>\n     f (Algebra2.Sup D (\\<Union> (WWa D f a)))\\<rbrakk>\n    \\<Longrightarrow> f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n                      Algebra2.Sup D (\\<Union> (WWa D f a))", "apply (frule funcset_mem[of \"f\" \"carrier D\" \"carrier D\" \"Sup D (\\<Union>(WWa D f a))\"],\n       assumption+,\n       rule le_antisym[of \"f (Sup D (\\<Union>(WWa D f a)))\" \"Sup D (\\<Union>(WWa D f a))\"], \n        assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Bourbaki_Nakayama:\"\\<lbrakk>S_inductive_set D; \n      f \\<in> carrier D \\<rightarrow> carrier D; a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> (f x)\\<rbrakk> \\<Longrightarrow>\n      \\<exists>x0\\<in>carrier D. f x0 = x0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x0\\<in>carrier D. f x0 = x0", "apply (frule BNTr8[of \"f\" \"a\"], assumption+,\n       frule mem_WWa_Chain[of \"\\<Union>(WWa D f a)\" \"f\" \"a\"],\n       frule S_inductive_sup_mem[of \"\\<Union>(WWa D f a)\"], assumption+,\n       frule BNTr11[of \"f\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; f \\<in> carrier D \\<rightarrow> carrier D;\n     a \\<in> carrier D; \\<forall>x\\<in>carrier D. x \\<preceq> f x;\n     \\<Union> (WWa D f a) \\<in> WWa D f a; Chain D (\\<Union> (WWa D f a));\n     Algebra2.Sup D (\\<Union> (WWa D f a)) \\<in> carrier D;\n     f (Algebra2.Sup D (\\<Union> (WWa D f a))) =\n     Algebra2.Sup D (\\<Union> (WWa D f a))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x0\\<in>carrier D. f x0 = x0", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  maxl_fun :: \" _  \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"maxl_fun D = (\\<lambda>x\\<in>carrier D. if \\<exists>y. y\\<in>(upper_bounds D {x}) \\<and> y \\<noteq> x then\n    SOME z. z \\<in> (upper_bounds D {x}) \\<and> z \\<noteq> x else x)\""], ["", "lemma (in Order) maxl_funTr:\"\\<lbrakk>x \\<in> carrier D; \n      \\<exists>y. y \\<in> upper_bounds D {x} \\<and> y \\<noteq> x\\<rbrakk> \\<Longrightarrow> \n      (SOME z. z \\<in> upper_bounds D {x} \\<and> z \\<noteq> x) \\<in> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier D;\n     \\<exists>y. y \\<in> upper_bounds D {x} \\<and> y \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> (SOME z.\n                          z \\<in> upper_bounds D {x} \\<and> z \\<noteq> x)\n                      \\<in> carrier D", "apply (rule someI2_ex, assumption+,\n       simp add:upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) maxl_fun_func:\"maxl_fun D \\<in> carrier D \\<rightarrow> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maxl_fun D \\<in> carrier D \\<rightarrow> carrier D", "by (simp add:maxl_fun_def maxl_funTr)"], ["", "lemma (in Order) maxl_fun_gt:\"\\<lbrakk>x \\<in> carrier D; \n      \\<exists>y\\<in> carrier D.  x \\<preceq> y \\<and> x \\<noteq> y \\<rbrakk> \\<Longrightarrow> \n          x \\<preceq> (maxl_fun D x) \\<and> (maxl_fun D x) \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier D;\n     \\<exists>y\\<in>carrier D. x \\<preceq> y \\<and> x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> x \\<preceq> maxl_fun D x \\<and>\n                      maxl_fun D x \\<noteq> x", "apply (simp add:maxl_fun_def upper_bounds_def upper_bound_def,\n       rule conjI, rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> carrier D;\n     \\<exists>y\\<in>carrier D. x \\<preceq> y \\<and> x \\<noteq> y;\n     \\<exists>y.\n        y \\<in> carrier D \\<and> x \\<preceq> y \\<and> y \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> x \\<preceq>\n                      (SOME z.\n                          z \\<in> carrier D \\<and>\n                          x \\<preceq> z \\<and> z \\<noteq> x) \\<and>\n                      (SOME z.\n                          z \\<in> carrier D \\<and>\n                          x \\<preceq> z \\<and> z \\<noteq> x) \\<noteq>\n                      x\n 2. \\<lbrakk>x \\<in> carrier D;\n     \\<exists>y\\<in>carrier D. x \\<preceq> y \\<and> x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y.\n                         x \\<preceq> y \\<and>\n                         y \\<in> carrier D \\<and> y \\<noteq> x", "apply (rule someI2_ex, assumption+, simp,\n       erule bexE, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) maxl_fun_maxl:\"\\<lbrakk>x \\<in> carrier D; maxl_fun D x = x \\<rbrakk>\n      \\<Longrightarrow> maximal x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier D; maxl_fun D x = x\\<rbrakk>\n    \\<Longrightarrow> maximal x", "apply (rule contrapos_pp, simp+, simp add:maximal_element_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier D; maxl_fun D x = x;\n     \\<exists>b\\<in>carrier D. x \\<preceq> b \\<and> x \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule maxl_fun_gt[of \"x\"], assumption, erule conjE, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) maxl_fun_asc:\"\\<forall>x\\<in>carrier D. x \\<preceq> (maxl_fun D x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>carrier D. x \\<preceq> maxl_fun D x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> carrier D \\<Longrightarrow> x \\<preceq> maxl_fun D x", "apply (simp add:maxl_fun_def, rule conjI, rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> carrier D;\n        \\<exists>y. y \\<in> upper_bounds D {x} \\<and> y \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq>\n                         (SOME z.\n                             z \\<in> upper_bounds D {x} \\<and> z \\<noteq> x)\n 2. \\<And>x.\n       x \\<in> carrier D \\<Longrightarrow>\n       (\\<forall>y.\n           y \\<in> upper_bounds D {x} \\<longrightarrow>\n           y = x) \\<longrightarrow>\n       x \\<preceq> x", "apply (rule someI2_ex, assumption, simp add:upper_bounds_def upper_bound_def,\n        rule impI, rule le_refl, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) S_inductive_maxl:\"\\<lbrakk>S_inductive_set D; carrier D \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n          \\<exists>m. maximal m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S_inductive_set D; carrier D \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. maximal m", "apply (frule nonempty_ex [of \"carrier D\"],\n       erule exE, rename_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>S_inductive_set D; carrier D \\<noteq> {};\n        a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. maximal m", "apply (cut_tac maxl_fun_asc, cut_tac maxl_fun_func,\n        frule_tac a = a in Bourbaki_Nakayama[of \"maxl_fun D\" _], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>S_inductive_set D; carrier D \\<noteq> {}; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> maxl_fun D x;\n        maxl_fun D \\<in> carrier D \\<rightarrow> carrier D;\n        \\<exists>x0\\<in>carrier D. maxl_fun D x0 = x0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. maximal m", "apply (erule bexE,\n        frule_tac x = x0 in maxl_fun_maxl, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x0.\n       \\<lbrakk>S_inductive_set D; carrier D \\<noteq> {}; a \\<in> carrier D;\n        \\<forall>x\\<in>carrier D. x \\<preceq> maxl_fun D x;\n        maxl_fun D \\<in> carrier D \\<rightarrow> carrier D;\n        x0 \\<in> carrier D; maxl_fun D x0 = x0; maximal x0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m. maximal m", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) maximal_mem:\"maximal m \\<Longrightarrow> m \\<in> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maximal m \\<Longrightarrow> m \\<in> carrier D", "by (simp add:maximal_element_def)"], ["", "definition\n  Chains :: \" _  \\<Rightarrow> ('a set) set\" where\n  \"Chains D == {C. Chain D C}\""], ["", "definition\n  family_Torder::\" _  \\<Rightarrow> ('a set) Order\"\n    (\"(fTo _)\" [999]1000) where\n  \"fTo D = \\<lparr>carrier = Chains D , rel = {Z. Z \\<in> (Chains D) \\<times> (Chains D) \\<and> (fst Z) \\<subseteq> (snd Z)}\\<rparr>\""], ["", "lemma (in Order) Chain_mem_fTo:\"Chain D C \\<Longrightarrow> C \\<in> carrier (fTo D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chain D C \\<Longrightarrow> C \\<in> carrier fTo D", "by (simp add:family_Torder_def Chains_def)"], ["", "lemma (in Order) fTOrder:\"Order (fTo D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order fTo D", "apply (subst Order_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rel fTo D \\<subseteq> carrier fTo D \\<times> carrier fTo D \\<and>\n     (\\<forall>a.\n         a \\<in> carrier fTo D \\<longrightarrow>\n         (a, a) \\<in> rel fTo D)) \\<and>\n    (\\<forall>a b.\n        a \\<in> carrier fTo D \\<longrightarrow>\n        b \\<in> carrier fTo D \\<longrightarrow>\n        (a, b) \\<in> rel fTo D \\<longrightarrow>\n        (b, a) \\<in> rel fTo D \\<longrightarrow> a = b) \\<and>\n    (\\<forall>a b c.\n        a \\<in> carrier fTo D \\<longrightarrow>\n        b \\<in> carrier fTo D \\<longrightarrow>\n        c \\<in> carrier fTo D \\<longrightarrow>\n        (a, b) \\<in> rel fTo D \\<longrightarrow>\n        (b, c) \\<in> rel fTo D \\<longrightarrow> (a, c) \\<in> rel fTo D)", "apply (simp add:family_Torder_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       a \\<in> Algebra2.Chains D \\<longrightarrow>\n       (\\<forall>b.\n           b \\<in> Algebra2.Chains D \\<longrightarrow>\n           (\\<forall>c.\n               c \\<in> Algebra2.Chains D \\<longrightarrow>\n               a \\<subseteq> b \\<longrightarrow>\n               b \\<subseteq> c \\<longrightarrow> a \\<subseteq> c))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) fTo_Order_sub:\"\\<lbrakk>A \\<in> carrier (fTo D); B \\<in> carrier (fTo D)\\<rbrakk>\n         \\<Longrightarrow> (A \\<preceq>\\<^bsub>(fTo D)\\<^esub> B) = (A \\<subseteq> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier fTo D; B \\<in> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> A \\<preceq>\\<^bsub>fTo D\\<^esub> B = (A \\<subseteq> B)", "by (subst ole_def, simp add:family_Torder_def)"], ["", "lemma (in Order) mem_fTo_Chain:\"X \\<in> carrier (fTo D) \\<Longrightarrow> Chain D X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> carrier fTo D \\<Longrightarrow> Chain D X", "by (simp add:family_Torder_def Chains_def)"], ["", "lemma (in Order) mem_fTo_sub_carrier:\"X \\<in> carrier (fTo D) \\<Longrightarrow> X \\<subseteq> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> carrier fTo D \\<Longrightarrow> X \\<subseteq> carrier D", "by (frule mem_fTo_Chain[of \"X\"], simp add:Chain_sub)"], ["", "lemma (in Order) Un_fTo_Chain:\"Chain (fTo D) CC \\<Longrightarrow> Chain D (\\<Union> CC)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chain fTo D CC \\<Longrightarrow> Chain D (\\<Union> CC)", "apply (cut_tac fTOrder,\n       frule Order.Chain_sub[of \"fTo D\" \"CC\"], assumption+,\n       cut_tac family_subset_Un_sub[of \"CC\" \"carrier D\"],\n       subst Chain_def, simp, simp add:Torder_def, simp add:Iod_Order,\n       simp add:Torder_axioms_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Chain fTo D CC; Order fTo D; CC \\<subseteq> carrier fTo D;\n     \\<Union> CC \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<in> carrier\n                                  (Iod D (\\<Union> CC)) \\<longrightarrow>\n                         (\\<forall>b.\n                             b \\<in> carrier\n(Iod D (\\<Union> CC)) \\<longrightarrow>\n                             a \\<preceq>\\<^bsub>Iod D (\\<Union> CC)\\<^esub>\n                             b \\<or>\n                             b \\<preceq>\\<^bsub>Iod D (\\<Union> CC)\\<^esub>\n                             a)\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply ((rule allI, rule impI)+, simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Chain fTo D CC; Order fTo D; CC \\<subseteq> carrier fTo D;\n        \\<Union> CC \\<subseteq> carrier D; \\<exists>X\\<in>CC. a \\<in> X;\n        \\<exists>X\\<in>CC. b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D (\\<Union> CC)\\<^esub>\n                         b \\<or>\n                         b \\<preceq>\\<^bsub>Iod D (\\<Union> CC)\\<^esub> a\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply ((erule bexE)+,\n        frule_tac A = X in mem_family_sub_Un[of _ \"CC\"],\n        frule_tac A = Xa in mem_family_sub_Un[of _ \"CC\"],\n        frule_tac c = a and A = X in subsetD[of _ \"\\<Union>CC\"], assumption+,\n        frule_tac c = b and A = Xa in subsetD[of _ \"\\<Union>CC\"], assumption+,\n        simp only:Iod_le,\n        frule_tac c = X in subsetD[of \"CC\" \"carrier fTo D\"], assumption+,\n        frule_tac c = Xa in subsetD[of \"CC\" \"carrier fTo D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b X Xa.\n       \\<lbrakk>Chain fTo D CC; Order fTo D; CC \\<subseteq> carrier fTo D;\n        \\<Union> CC \\<subseteq> carrier D; X \\<in> CC; a \\<in> X;\n        Xa \\<in> CC; b \\<in> Xa; X \\<subseteq> \\<Union> CC;\n        Xa \\<subseteq> \\<Union> CC; a \\<in> \\<Union> CC;\n        b \\<in> \\<Union> CC; X \\<in> carrier fTo D;\n        Xa \\<in> carrier fTo D\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply (simp add:Chain_def Torder_def Torder_axioms_def,\n        thin_tac \"\\<exists>X\\<in>CC. a \\<in> X\", thin_tac \"\\<exists>X\\<in>CC. b \\<in> X\",\n        (erule conjE)+,\n        frule_tac a = X in forall_spec,\n        simp only:Order.Iod_carrier[of \"fTo D\" \"CC\"],\n        thin_tac \"\\<forall>a. a \\<in> carrier (Iod (fTo D) CC) \\<longrightarrow>\n            (\\<forall>b. b \\<in> carrier (Iod (fTo D) CC) \\<longrightarrow>\n                 a \\<preceq>\\<^bsub>Iod (fTo D) CC\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod (fTo D) CC\\<^esub> a)\",\n        frule_tac a = Xa in forall_spec,\n        simp only:Order.Iod_carrier[of \"fTo D\" \"CC\"],\n        thin_tac \"\\<forall>b. b \\<in> carrier (Iod (fTo D) CC) \\<longrightarrow>\n            X \\<preceq>\\<^bsub>Iod (fTo D) CC\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod (fTo D) CC\\<^esub> X\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b X Xa.\n       \\<lbrakk>Order fTo D; CC \\<subseteq> carrier fTo D;\n        \\<Union> CC \\<subseteq> carrier D; X \\<in> CC; a \\<in> X;\n        Xa \\<in> CC; b \\<in> Xa; X \\<subseteq> \\<Union> CC;\n        Xa \\<subseteq> \\<Union> CC; X \\<in> carrier fTo D;\n        Xa \\<in> carrier fTo D; Order (Iod fTo D CC);\n        X \\<preceq>\\<^bsub>Iod fTo D CC\\<^esub> Xa \\<or>\n        Xa \\<preceq>\\<^bsub>Iod fTo D CC\\<^esub> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply (simp add:Order.Iod_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b X Xa.\n       \\<lbrakk>Order fTo D; CC \\<subseteq> carrier fTo D;\n        \\<Union> CC \\<subseteq> carrier D; X \\<in> CC; a \\<in> X;\n        Xa \\<in> CC; b \\<in> Xa; X \\<subseteq> \\<Union> CC;\n        Xa \\<subseteq> \\<Union> CC; X \\<in> carrier fTo D;\n        Xa \\<in> carrier fTo D; Order (Iod fTo D CC);\n        X \\<preceq>\\<^bsub>fTo D\\<^esub> Xa \\<or>\n        Xa \\<preceq>\\<^bsub>fTo D\\<^esub> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply (simp add:fTo_Order_sub)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b X Xa.\n       \\<lbrakk>Order fTo D; CC \\<subseteq> carrier fTo D;\n        \\<Union> CC \\<subseteq> carrier D; X \\<in> CC; a \\<in> X;\n        Xa \\<in> CC; b \\<in> Xa; X \\<subseteq> \\<Union> CC;\n        Xa \\<subseteq> \\<Union> CC; X \\<in> carrier fTo D;\n        Xa \\<in> carrier fTo D; Order (Iod fTo D CC);\n        X \\<subseteq> Xa \\<or> Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply (frule_tac X = X in mem_fTo_Chain,\n          frule_tac X = Xa in mem_fTo_Chain,\n          frule_tac X = X in Chain_Torder,\n          frule_tac X = Xa in Chain_Torder,\n          frule_tac X = X in Chain_sub,\n          frule_tac X = Xa in Chain_sub)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b X Xa.\n       \\<lbrakk>Order fTo D; CC \\<subseteq> carrier fTo D;\n        \\<Union> CC \\<subseteq> carrier D; X \\<in> CC; a \\<in> X;\n        Xa \\<in> CC; b \\<in> Xa; X \\<subseteq> \\<Union> CC;\n        Xa \\<subseteq> \\<Union> CC; X \\<in> carrier fTo D;\n        Xa \\<in> carrier fTo D; Order (Iod fTo D CC);\n        X \\<subseteq> Xa \\<or> Xa \\<subseteq> X; Chain D X; Chain D Xa;\n        Torder (Iod D X); Torder (Iod D Xa); X \\<subseteq> carrier D;\n        Xa \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply (simp add:Torder_def Torder_axioms_def, (erule conjE)+, \n         simp only:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b X Xa.\n       \\<lbrakk>Order fTo D; CC \\<subseteq> carrier fTo D;\n        \\<Union> CC \\<subseteq> carrier D; X \\<in> CC; a \\<in> X;\n        Xa \\<in> CC; b \\<in> Xa; X \\<subseteq> \\<Union> CC;\n        Xa \\<subseteq> \\<Union> CC; X \\<in> carrier fTo D;\n        Xa \\<in> carrier fTo D; Order (Iod fTo D CC);\n        X \\<subseteq> Xa \\<or> Xa \\<subseteq> X; Chain D X; Chain D Xa;\n        X \\<subseteq> carrier D; Xa \\<subseteq> carrier D; Order (Iod D X);\n        \\<forall>a.\n           a \\<in> X \\<longrightarrow>\n           (\\<forall>b.\n               b \\<in> X \\<longrightarrow>\n               a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or>\n               b \\<preceq>\\<^bsub>Iod D X\\<^esub> a);\n        Order (Iod D Xa);\n        \\<forall>a.\n           a \\<in> Xa \\<longrightarrow>\n           (\\<forall>b.\n               b \\<in> Xa \\<longrightarrow>\n               a \\<preceq>\\<^bsub>Iod D Xa\\<^esub> b \\<or>\n               b \\<preceq>\\<^bsub>Iod D Xa\\<^esub> a)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply (erule disjE,\n      frule_tac c = a and A = X and B = Xa in subsetD, assumption+,\n      thin_tac \"\\<forall>a. a \\<in> X \\<longrightarrow> (\\<forall>b. b \\<in> X \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D X\\<^esub> a)\",\n      frule_tac a = a in forall_spec,\n      thin_tac \"\\<forall>a. a \\<in> Xa \\<longrightarrow> (\\<forall>b. b \\<in> Xa \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D Xa\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D Xa\\<^esub> a)\",\n      assumption,\n      thin_tac \"\\<forall>a. a \\<in> Xa \\<longrightarrow> (\\<forall>b. b \\<in> Xa \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D Xa\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D Xa\\<^esub> a)\",\n      frule_tac a = b in forall_spec, assumption,\n      thin_tac \"\\<forall>b. b \\<in> Xa \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D Xa\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D Xa\\<^esub> a\",\n      simp add:Iod_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b X Xa.\n       \\<lbrakk>Order fTo D; CC \\<subseteq> carrier fTo D;\n        \\<Union> CC \\<subseteq> carrier D; X \\<in> CC; a \\<in> X;\n        Xa \\<in> CC; b \\<in> Xa; X \\<subseteq> \\<Union> CC;\n        Xa \\<subseteq> \\<Union> CC; X \\<in> carrier fTo D;\n        Xa \\<in> carrier fTo D; Order (Iod fTo D CC); Chain D X; Chain D Xa;\n        X \\<subseteq> carrier D; Xa \\<subseteq> carrier D; Order (Iod D X);\n        \\<forall>a.\n           a \\<in> X \\<longrightarrow>\n           (\\<forall>b.\n               b \\<in> X \\<longrightarrow>\n               a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or>\n               b \\<preceq>\\<^bsub>Iod D X\\<^esub> a);\n        Order (Iod D Xa);\n        \\<forall>a.\n           a \\<in> Xa \\<longrightarrow>\n           (\\<forall>b.\n               b \\<in> Xa \\<longrightarrow>\n               a \\<preceq>\\<^bsub>Iod D Xa\\<^esub> b \\<or>\n               b \\<preceq>\\<^bsub>Iod D Xa\\<^esub> a);\n        Xa \\<subseteq> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a\n 2. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply (\n      frule_tac c = b and A = Xa and B = X in subsetD, assumption+,\n      thin_tac \"\\<forall>a. a \\<in> Xa \\<longrightarrow> (\\<forall>b. b \\<in> Xa \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D Xa\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D Xa\\<^esub> a)\",\n      frule_tac a = a in forall_spec,\n      thin_tac \"\\<forall>a. a \\<in> X \\<longrightarrow> (\\<forall>b. b \\<in> X \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D X\\<^esub> a)\",\n      assumption,\n      thin_tac \"\\<forall>a. a \\<in> X \\<longrightarrow> (\\<forall>b. b \\<in> X \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D X\\<^esub> a)\",\n      frule_tac a = b in forall_spec, assumption,\n      thin_tac \"\\<forall>b. b \\<in> X \\<longrightarrow> a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or> b \\<preceq>\\<^bsub>Iod D X\\<^esub> a\",\n      simp add:Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Chain fTo D CC; Order fTo D;\n     CC \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>CC. A \\<subseteq> carrier D", "apply (rule ballI,\n        frule_tac c = A in subsetD[of \"CC\" \"carrier (fTo D)\"], assumption+,\n        rule mem_fTo_sub_carrier, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Un_fTo_Chain_mem_fTo:\"Chain (fTo D) CC \\<Longrightarrow>\n                  (\\<Union> CC) \\<in> carrier (fTo D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chain fTo D CC \\<Longrightarrow> \\<Union> CC \\<in> carrier fTo D", "apply (frule Un_fTo_Chain[of \"CC\"], thin_tac \"Chain (fTo D) CC\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Chain D (\\<Union> CC) \\<Longrightarrow> \\<Union> CC \\<in> carrier fTo D", "apply (simp add:family_Torder_def Chains_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Un_upper_bound:\"Chain (fTo D) C \\<Longrightarrow>\n                  \\<Union>C \\<in> upper_bounds (fTo D) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chain fTo D C \\<Longrightarrow> \\<Union> C \\<in> upper_bounds fTo D C", "apply (simp add:upper_bounds_def upper_bound_def,\n       simp add:Un_fTo_Chain_mem_fTo)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Chain fTo D C \\<Longrightarrow>\n    \\<forall>s\\<in>C. s \\<preceq>\\<^bsub>fTo D\\<^esub> \\<Union> C", "apply (rule ballI,\n       simp add:ole_def,\n       subst family_Torder_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>Chain fTo D C; s \\<in> C\\<rbrakk>\n       \\<Longrightarrow> s \\<in> Algebra2.Chains D \\<and>\n                         \\<Union> C \\<in> Algebra2.Chains D \\<and>\n                         s \\<subseteq> \\<Union> C", "apply (cut_tac fTOrder,\n       frule Order.Chain_sub[of \"fTo D\" \"C\"], assumption,\n       frule_tac c = s in subsetD[of \"C\" \"carrier (fTo D)\"], assumption+,\n       cut_tac Un_fTo_Chain_mem_fTo[of \"C\"],\n       simp add:mem_fTo_Chain Chains_def,\n       rule_tac A = s in mem_family_sub_Un[of _ \"C\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>Chain fTo D C; s \\<in> C; Order fTo D;\n        C \\<subseteq> carrier fTo D; s \\<in> carrier fTo D\\<rbrakk>\n       \\<Longrightarrow> Chain fTo D C", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) fTo_conditional_inc_C:\"C \\<in> carrier (fTo D) \\<Longrightarrow> \n        C \\<in> carrier (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> carrier fTo D \\<Longrightarrow>\n    C \\<in> carrier (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})", "apply (cut_tac fTOrder,\n       cut_tac conditional_subset[of \"carrier (fTo D)\" \"(\\<subseteq>) C\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D; Order fTo D;\n     {x \\<in> carrier fTo D. C \\<subseteq> x}\n     \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> C \\<in> carrier\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})", "apply (simp add:Order.Iod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) fTo_conditional_Un_Chain_mem1:\" \\<lbrakk>C \\<in> carrier (fTo D); \n     Chain (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca; Ca \\<noteq> {}\\<rbrakk> \\<Longrightarrow>\n      \\<Union>Ca \\<in> upper_bounds (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca\n                      \\<in> upper_bounds\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             Ca", "apply (cut_tac fTOrder,\n       cut_tac conditional_subset[of \"carrier (fTo D)\" \"(\\<subseteq>) C\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D;\n     {x \\<in> carrier fTo D. C \\<subseteq> x}\n     \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca\n                      \\<in> upper_bounds\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             Ca", "apply (simp add:upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca\n                      \\<in> carrier\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D.\n                                C \\<subseteq> S}) \\<and>\n                      (\\<forall>s\\<in>Ca.\n                          s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n                          \\<Union> Ca)", "apply (subgoal_tac \"\\<Union>Ca \\<in>carrier (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S})\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D;\n     \\<Union> Ca\n     \\<in> carrier\n            (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca\n                      \\<in> carrier\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D.\n                                C \\<subseteq> S}) \\<and>\n                      (\\<forall>s\\<in>Ca.\n                          s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n                          \\<Union> Ca)\n 2. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca\n                      \\<in> carrier\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D;\n     \\<Union> Ca\n     \\<in> carrier\n            (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s\\<in>Ca.\n                         s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n                         \\<Union> Ca\n 2. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca\n                      \\<in> carrier\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {}; Order fTo D;\n        \\<Union> Ca\n        \\<in> carrier (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        s \\<in> Ca\\<rbrakk>\n       \\<Longrightarrow> s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n                         \\<Union> Ca\n 2. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca\n                      \\<in> carrier\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})", "apply (force simp add: Chain_def Order.Iod_carrier Order.Iod_le Union_upper fTo_Order_sub subset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca\n                      \\<in> carrier\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})", "apply (simp add:Order.Iod_carrier[of \"fTo D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca \\<in> carrier fTo D \\<and>\n                      C \\<subseteq> \\<Union> Ca", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<Union> Ca \\<in> carrier fTo D\n 2. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> C \\<subseteq> \\<Union> Ca", "apply (rule Un_fTo_Chain_mem_fTo[of \"Ca\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> Chain fTo D Ca\n 2. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> C \\<subseteq> \\<Union> Ca", "apply (force simp add: Chain_def Order.Iod_carrier Order.Iod_sub_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}; Order fTo D\\<rbrakk>\n    \\<Longrightarrow> C \\<subseteq> \\<Union> Ca", "apply (simp add:Chain_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D; Ca \\<noteq> {}; Order fTo D;\n     Ca \\<subseteq> carrier\n                     (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n     Torder\n      (Iod (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca)\\<rbrakk>\n    \\<Longrightarrow> C \\<subseteq> \\<Union> Ca", "apply (rule sub_Union[of \"Ca\" \"C\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D; Ca \\<noteq> {}; Order fTo D;\n     Ca \\<subseteq> carrier\n                     (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n     Torder\n      (Iod (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>X\\<in>Ca. C \\<subseteq> X", "using Order.Iod_carrier"], ["proof (prove)\nusing this:\n  \\<lbrakk>Order ?D; ?T \\<subseteq> carrier ?D\\<rbrakk>\n  \\<Longrightarrow> carrier (Iod ?D ?T) = ?T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D; Ca \\<noteq> {}; Order fTo D;\n     Ca \\<subseteq> carrier\n                     (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n     Torder\n      (Iod (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>X\\<in>Ca. C \\<subseteq> X", "by fastforce"], ["", "lemma (in Order) fTo_conditional_min1:\" \\<lbrakk>C \\<in> carrier (fTo D); \n     Chain (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca; Ca \\<noteq> {}\\<rbrakk> \\<Longrightarrow>\n      minimum_elem (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S})\n        (upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca) (\\<Union>Ca)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> minimum_elem\n                       (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                       (upper_bounds\n                         (Iod fTo D\n                           {S \\<in> carrier fTo D. C \\<subseteq> S})\n                         Ca)\n                       (\\<Union> Ca)", "apply (frule fTo_conditional_Un_Chain_mem1[of \"C\" \"Ca\"], assumption+,\n       simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca \\<noteq> {};\n     \\<Union> Ca\n     \\<in> upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n            Ca\\<rbrakk>\n    \\<Longrightarrow> Ball\n                       (upper_bounds\n                         (Iod fTo D\n                           {S \\<in> carrier fTo D. C \\<subseteq> S})\n                         Ca)\n                       ((\\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>)\n                         (\\<Union> Ca))", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca\n        \\<in> upper_bounds\n               (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        x \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          Ca \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n                         x", "apply (simp add:upper_bounds_def upper_bound_def, (erule conjE)+,\n        cut_tac fTOrder,\n        cut_tac conditional_subset[of \"carrier (fTo D)\" \"(\\<subseteq>) C\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca\n        \\<in> carrier (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           \\<Union> Ca;\n        x \\<in> carrier\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           x;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x}\n        \\<subseteq> carrier fTo D\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          Ca \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n                         x", "apply (simp only:Order.Iod_carrier,\n        simp only:Order.Iod_le[of \"fTo D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           \\<Union> Ca;\n        x \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           x;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x}\n        \\<subseteq> carrier fTo D\\<rbrakk>\n       \\<Longrightarrow> \\<Union> Ca \\<preceq>\\<^bsub>fTo D\\<^esub> x", "apply (frule_tac c = \"\\<Union>Ca\" in subsetD[of \"{S \\<in> carrier fTo D. C \\<subseteq> S}\"\n         \"carrier (fTo D)\"], assumption+,\n        frule_tac c = x in subsetD[of \"{S \\<in> carrier fTo D. C \\<subseteq> S}\"\n         \"carrier (fTo D)\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           \\<Union> Ca;\n        x \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           x;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        \\<Union> Ca \\<in> carrier fTo D; x \\<in> carrier fTo D\\<rbrakk>\n       \\<Longrightarrow> \\<Union> Ca \\<preceq>\\<^bsub>fTo D\\<^esub> x", "apply (subst Order.fTo_Order_sub, rule Order_axioms, assumption, simp,\n         rule_tac C = Ca and B = x in family_subset_Un_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           \\<Union> Ca;\n        x \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           x;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        \\<Union> Ca \\<in> carrier fTo D; x \\<in> carrier fTo D\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A\\<in>Ca. A \\<subseteq> x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           \\<Union> Ca;\n        x \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           x;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        \\<Union> Ca \\<in> carrier fTo D; x \\<in> carrier fTo D;\n        A \\<in> Ca\\<rbrakk>\n       \\<Longrightarrow> A \\<subseteq> x", "apply (thin_tac \"\\<forall>s\\<in>Ca. s \\<preceq>\\<^bsub>Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}\\<^esub> \\<Union>Ca\",\n         frule_tac x = A in bspec, assumption,\n         thin_tac \"\\<forall>s\\<in>Ca. s \\<preceq>\\<^bsub>Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}\\<^esub> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        x \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S}; Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        \\<Union> Ca \\<in> carrier fTo D; x \\<in> carrier fTo D; A \\<in> Ca;\n        A \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n        x\\<rbrakk>\n       \\<Longrightarrow> A \\<subseteq> x", "apply (frule Order.Iod_Order[of \"fTo D\" \"{S \\<in> carrier fTo D. C \\<subseteq> S}\"],\n                      assumption,\n         frule Order.Chain_sub[of \"Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}\"\n           \"Ca\"], assumption,\n         simp only:Order.Iod_carrier[of \"fTo D\" \"{S \\<in> carrier fTo D. C \\<subseteq> S}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        x \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S}; Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        \\<Union> Ca \\<in> carrier fTo D; x \\<in> carrier fTo D; A \\<in> Ca;\n        A \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n        x;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        Ca \\<subseteq> {S \\<in> carrier fTo D. C \\<subseteq> S}\\<rbrakk>\n       \\<Longrightarrow> A \\<subseteq> x", "apply (frule_tac c = x in subsetD[of \"{x \\<in> carrier fTo D. C \\<subseteq> x}\"\n                             \"carrier (fTo D)\"], simp,\n         frule_tac c = A in subsetD[of \"Ca\" \"{x \\<in> carrier fTo D. C \\<subseteq> x}\"],\n                              assumption+,\n         frule_tac a = A and b = x in Order.Iod_le[of \"fTo D\" \n                   \"{x \\<in> carrier fTo D. C \\<subseteq> x}\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {};\n        \\<Union> Ca \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        x \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S}; Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        \\<Union> Ca \\<in> carrier fTo D; x \\<in> carrier fTo D; A \\<in> Ca;\n        A \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n        x;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        Ca \\<subseteq> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        x \\<in> carrier fTo D;\n        A \\<in> {x \\<in> carrier fTo D. C \\<subseteq> x};\n        A \\<preceq>\\<^bsub>Iod fTo D {x \\<in> carrier fTo D. C \\<subseteq> x}\\<^esub>\n        x =\n        A \\<preceq>\\<^bsub>fTo D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> A \\<subseteq> x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<noteq> {}; C \\<subseteq> \\<Union> Ca; C \\<subseteq> x;\n        Order fTo D; \\<Union> Ca \\<in> carrier fTo D; A \\<in> Ca;\n        A \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        Ca \\<subseteq> {S \\<in> carrier fTo D. C \\<subseteq> S};\n        x \\<in> carrier fTo D; A \\<in> carrier fTo D \\<and> C \\<subseteq> A;\n        A \\<preceq>\\<^bsub>Iod fTo D {x \\<in> carrier fTo D. C \\<subseteq> x}\\<^esub>\n        x\\<rbrakk>\n       \\<Longrightarrow> A \\<subseteq> x", "apply (simp add:fTo_Order_sub)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) fTo_conditional_Un_Chain_mem2:\" \\<lbrakk>C \\<in> carrier (fTo D); \n       Chain (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca; Ca = {}\\<rbrakk> \\<Longrightarrow>\n       C \\<in> upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca = {}\\<rbrakk>\n    \\<Longrightarrow> C \\<in> upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca", "apply (cut_tac fTOrder,\n       cut_tac conditional_subset[of \"carrier (fTo D)\" \"(\\<subseteq>) C\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca; Ca = {};\n     Order fTo D;\n     {x \\<in> carrier fTo D. C \\<subseteq> x}\n     \\<subseteq> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> C \\<in> upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca", "apply (simp add:upper_bounds_def upper_bound_def, simp add:Order.Iod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) fTo_conditional_min2:\" \\<lbrakk>C \\<in> carrier (fTo D); \n     Chain (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca; Ca = {}\\<rbrakk> \\<Longrightarrow>\n      minimum_elem (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S})\n        (upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca) C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n     Ca = {}\\<rbrakk>\n    \\<Longrightarrow> minimum_elem\n                       (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                       (upper_bounds\n                         (Iod fTo D\n                           {S \\<in> carrier fTo D. C \\<subseteq> S})\n                         Ca)\n                       C", "apply (simp add:minimum_elem_def upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) {};\n     Ca = {}\\<rbrakk>\n    \\<Longrightarrow> C \\<in> carrier\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D.\n                                  C \\<subseteq> S}) \\<and>\n                      (\\<forall>x\\<in>carrier\n (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                          C \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n                          x)", "apply (cut_tac fTOrder,\n       cut_tac conditional_subset[of \"carrier (fTo D)\" \"(\\<subseteq>) C\"],\n       simp add:Order.Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) {}; Ca = {};\n     Order fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> carrier fTo D \\<and>\n                         C \\<subseteq> x \\<longrightarrow>\n                         C \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n                         x", "by (auto simp add: Order.Iod_le fTo_Order_sub)"], ["", "lemma (in Order) fTo_S_inductive:\"S_inductive_set (fTo D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_inductive_set fTo D", "apply (simp add:S_inductive_set_def,\n       rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       Chain fTo D C \\<Longrightarrow>\n       \\<exists>x\\<in>carrier fTo D.\n          minimum_elem fTo D (upper_bounds fTo D C) x", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>Chain fTo D C;\n        \\<forall>x\\<in>carrier fTo D.\n           \\<not> minimum_elem fTo D (upper_bounds fTo D C) x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:minimum_elem_def,\n        frule_tac CC = C in Un_fTo_Chain_mem_fTo,\n        frule_tac x = \"\\<Union>C\" in bspec, assumption,\n         thin_tac \"\\<forall>x\\<in>carrier (fTo D).\n            x \\<in> upper_bounds (fTo D) C \\<longrightarrow>\n            (\\<exists>xa\\<in>upper_bounds (fTo D) C. \\<not> x \\<preceq>\\<^bsub>(fTo D)\\<^esub> xa)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C.\n       \\<lbrakk>Chain fTo D C; \\<Union> C \\<in> carrier fTo D;\n        \\<Union> C \\<in> upper_bounds fTo D C \\<longrightarrow>\n        (\\<exists>x\\<in>upper_bounds fTo D C.\n            \\<not> \\<Union> C \\<preceq>\\<^bsub>fTo D\\<^esub> x)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac C = C in Un_upper_bound, simp,\n        erule bexE,\n        thin_tac \"\\<Union>C \\<in> upper_bounds (fTo D) C\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C x.\n       \\<lbrakk>Chain fTo D C; \\<Union> C \\<in> carrier fTo D;\n        x \\<in> upper_bounds fTo D C;\n        \\<not> \\<Union> C \\<preceq>\\<^bsub>fTo D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:upper_bounds_def upper_bound_def,\n        erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C x.\n       \\<lbrakk>Chain fTo D C; \\<Union> C \\<in> carrier fTo D;\n        \\<not> \\<Union> C \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        x \\<in> carrier fTo D;\n        \\<forall>s\\<in>C. s \\<preceq>\\<^bsub>fTo D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac C = C and B = x in family_subset_Un_sub)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C x.\n       \\<lbrakk>Chain fTo D C; \\<Union> C \\<in> carrier fTo D;\n        \\<not> \\<Union> C \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        x \\<in> carrier fTo D;\n        \\<forall>s\\<in>C. s \\<preceq>\\<^bsub>fTo D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>A\\<in>C. A \\<subseteq> x\n 2. \\<And>C x.\n       \\<lbrakk>Chain fTo D C; \\<Union> C \\<in> carrier fTo D;\n        \\<not> \\<Union> C \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        x \\<in> carrier fTo D;\n        \\<forall>s\\<in>C. s \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        \\<Union> C \\<subseteq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C x A.\n       \\<lbrakk>Chain fTo D C; \\<Union> C \\<in> carrier fTo D;\n        \\<not> \\<Union> C \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        x \\<in> carrier fTo D;\n        \\<forall>s\\<in>C. s \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        A \\<in> C\\<rbrakk>\n       \\<Longrightarrow> A \\<subseteq> x\n 2. \\<And>C x.\n       \\<lbrakk>Chain fTo D C; \\<Union> C \\<in> carrier fTo D;\n        \\<not> \\<Union> C \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        x \\<in> carrier fTo D;\n        \\<forall>s\\<in>C. s \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        \\<Union> C \\<subseteq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = A in bspec, assumption,\n        thin_tac \"\\<forall>s\\<in>C. s \\<preceq>\\<^bsub>fTo D\\<^esub> x\",\n        cut_tac fTOrder,\n        frule_tac X = C in Order.Chain_sub[of \"fTo D\"], assumption+,\n        frule_tac c = A and A = C in subsetD[of _ \"carrier (fTo D)\"],\n                        assumption+,\n        simp add:fTo_Order_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C x.\n       \\<lbrakk>Chain fTo D C; \\<Union> C \\<in> carrier fTo D;\n        \\<not> \\<Union> C \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        x \\<in> carrier fTo D;\n        \\<forall>s\\<in>C. s \\<preceq>\\<^bsub>fTo D\\<^esub> x;\n        \\<Union> C \\<subseteq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:fTo_Order_sub)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) conditional_min_upper_bound:\" \\<lbrakk>C \\<in> carrier (fTo D);\n      Chain (Iod (fTo D) {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca\\<rbrakk> \\<Longrightarrow> \n      \\<exists>X. minimum_elem (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S})\n         (upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca\\<rbrakk>\n    \\<Longrightarrow> \\<exists>X.\n                         minimum_elem\n                          (Iod fTo D\n                            {S \\<in> carrier fTo D. C \\<subseteq> S})\n                          (upper_bounds\n                            (Iod fTo D\n                              {S \\<in> carrier fTo D. C \\<subseteq> S})\n                            Ca)\n                          X", "apply (case_tac \"Ca = {}\",\n        frule fTo_conditional_min2[of \"C\"], assumption+, blast,\n        frule fTo_conditional_min1[of \"C\"], assumption+, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Hausdorff_acTr:\"C \\<in> carrier (fTo D) \\<Longrightarrow>\n       S_inductive_set (Iod (fTo D) {S. S \\<in> (carrier (fTo D)) \\<and>  C \\<subseteq> S})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> carrier fTo D \\<Longrightarrow>\n    S_inductive_set (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})", "apply (simp add:S_inductive_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> carrier fTo D \\<Longrightarrow>\n    \\<forall>Ca.\n       Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n        Ca \\<longrightarrow>\n       (\\<exists>x\\<in>carrier\n                        (Iod fTo D\n                          {S \\<in> carrier fTo D. C \\<subseteq> S}).\n           minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n            (upper_bounds\n              (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca)\n            x)", "apply (rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (frule_tac Ca = Ca in conditional_min_upper_bound[of \"C\"],\n         assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        \\<exists>X.\n           minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n            (upper_bounds\n              (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca)\n            X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (erule exE, cut_tac fTOrder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (cut_tac conditional_subset[of \"carrier (fTo D)\" \"(\\<subseteq>) C\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x}\n        \\<subseteq> carrier fTo D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (frule Order.Iod_Order[of \"fTo D\" \"{S \\<in> carrier fTo D. C \\<subseteq> S}\"],\n          assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (frule_tac X = \"upper_bounds (Iod (fTo D) \n                              {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca\"\n   and a = X in \n   Order.minimum_elem_mem[of \"Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> upper_bounds\n                          (Iod fTo D\n                            {S \\<in> carrier fTo D. C \\<subseteq> S})\n                          Ca\n                         \\<subseteq> carrier\n(Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n 2. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> minimum_elem\n                          (Iod fTo D\n                            {S \\<in> carrier fTo D. C \\<subseteq> S})\n                          (upper_bounds\n                            (Iod fTo D\n                              {S \\<in> carrier fTo D. C \\<subseteq> S})\n                            Ca)\n                          X\n 3. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (simp only:Order.Iod_carrier)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> upper_bounds\n                          (Iod fTo D\n                            {S \\<in> carrier fTo D. C \\<subseteq> S})\n                          Ca\n                         \\<subseteq> {S \\<in> carrier fTo D.\nC \\<subseteq> S}\n 2. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> minimum_elem\n                          (Iod fTo D\n                            {S \\<in> carrier fTo D. C \\<subseteq> S})\n                          (upper_bounds\n                            (Iod fTo D\n                              {S \\<in> carrier fTo D. C \\<subseteq> S})\n                            Ca)\n                          X\n 3. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (rule subsetI,\n        thin_tac \"minimum_elem (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S})\n         (upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca) X\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Ca X x.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        x \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {S \\<in> carrier fTo D. C \\<subseteq> S}\n 2. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> minimum_elem\n                          (Iod fTo D\n                            {S \\<in> carrier fTo D. C \\<subseteq> S})\n                          (upper_bounds\n                            (Iod fTo D\n                              {S \\<in> carrier fTo D. C \\<subseteq> S})\n                            Ca)\n                          X\n 3. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (simp add:upper_bounds_def upper_bound_def, erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Ca x.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Order fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        x \\<in> carrier\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        \\<forall>s\\<in>Ca.\n           s \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier fTo D \\<and> C \\<subseteq> x\n 2. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> minimum_elem\n                          (Iod fTo D\n                            {S \\<in> carrier fTo D. C \\<subseteq> S})\n                          (upper_bounds\n                            (Iod fTo D\n                              {S \\<in> carrier fTo D. C \\<subseteq> S})\n                            Ca)\n                          X\n 3. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (simp add:Order.Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> minimum_elem\n                          (Iod fTo D\n                            {S \\<in> carrier fTo D. C \\<subseteq> S})\n                          (upper_bounds\n                            (Iod fTo D\n                              {S \\<in> carrier fTo D. C \\<subseteq> S})\n                            Ca)\n                          X\n 2. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x", "apply (subgoal_tac \"X\\<in>carrier (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) \")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        X \\<in> carrier\n                 (Iod fTo D\n                   {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>carrier\n   (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n                            minimum_elem\n                             (Iod fTo D\n                               {S \\<in> carrier fTo D. C \\<subseteq> S})\n                             (upper_bounds\n                               (Iod fTo D\n                                 {S \\<in> carrier fTo D. C \\<subseteq> S})\n                               Ca)\n                             x\n 2. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> X \\<in> carrier\n                                  (Iod fTo D\n                                    {S \\<in> carrier fTo D.\n                                     C \\<subseteq> S})", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n                 Ca\\<rbrakk>\n       \\<Longrightarrow> X \\<in> carrier\n                                  (Iod fTo D\n                                    {S \\<in> carrier fTo D.\n                                     C \\<subseteq> S})", "apply (frule_tac X = Ca in Order.Chain_sub[of \"Iod (fTo D) \n        {S \\<in> carrier (fTo D). C \\<subseteq> S}\"], assumption,\n        frule_tac X = Ca in Order.upper_bounds_sub[of \n         \"Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        minimum_elem (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n         (upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S})\n           Ca)\n         X;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<subseteq> carrier\n                        (Iod fTo D\n                          {S \\<in> carrier fTo D. C \\<subseteq> S});\n        upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca\n        \\<subseteq> carrier\n                     (Iod fTo D\n                       {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> carrier\n                                  (Iod fTo D\n                                    {S \\<in> carrier fTo D.\n                                     C \\<subseteq> S})", "apply (thin_tac \"minimum_elem (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S})\n         (upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}) Ca) X\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Ca X.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        Chain (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Order fTo D;\n        {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n        Order (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        X \\<in> upper_bounds\n                 (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca;\n        Ca \\<subseteq> carrier\n                        (Iod fTo D\n                          {S \\<in> carrier fTo D. C \\<subseteq> S});\n        upper_bounds (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}) Ca\n        \\<subseteq> carrier\n                     (Iod fTo D\n                       {S \\<in> carrier fTo D. C \\<subseteq> S})\\<rbrakk>\n       \\<Longrightarrow> X \\<in> carrier\n                                  (Iod fTo D\n                                    {S \\<in> carrier fTo D.\n                                     C \\<subseteq> S})", "apply (rule_tac A = \"upper_bounds (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S})\n        Ca\" and B = \"carrier (Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S})\" and \n        c = X  in subsetD, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma  satisfy_cond_mem_set:\"\\<lbrakk> x \\<in> A; P x \\<rbrakk> \\<Longrightarrow> x \\<in> {y \\<in> A. P y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; P x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> {y \\<in> A. P y}", "by blast"], ["", "lemma (in Order) maximal_conditional_maximal:\" \\<lbrakk>C \\<in> carrier (fTo D);\n       maximal\\<^bsub>Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}\\<^esub> m\\<rbrakk> \\<Longrightarrow> maximal\\<^bsub>(fTo D)\\<^esub> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     maximal\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n     m\\<rbrakk>\n    \\<Longrightarrow> maximal\\<^bsub>fTo D\\<^esub> m", "apply (unfold maximal_element_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     m \\<in> carrier (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n     \\<forall>b\\<in>carrier\n                     (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}).\n        m \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n        b \\<longrightarrow>\n        m = b\\<rbrakk>\n    \\<Longrightarrow> m \\<in> carrier fTo D \\<and>\n                      (\\<forall>b\\<in>carrier fTo D.\n                          m \\<preceq>\\<^bsub>fTo D\\<^esub>\n                          b \\<longrightarrow>\n                          m = b)", "apply (cut_tac conditional_subset[of \"carrier (fTo D)\" \"(\\<subseteq>) C\"],\n       cut_tac fTOrder,\n       frule Order.Iod_Order[of \"fTo D\" \"{x \\<in> carrier fTo D. C \\<subseteq> x}\"],\n       assumption+,\n       simp only:Order.Iod_carrier,\n       frule subsetD[of \"{S \\<in> carrier fTo D. C \\<subseteq> S}\" \n              \"carrier (fTo D)\" \"m\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D; C \\<subseteq> m;\n     \\<forall>b.\n        b \\<in> carrier fTo D \\<and> C \\<subseteq> b \\<longrightarrow>\n        m \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n        b \\<longrightarrow>\n        m = b;\n     Order fTo D;\n     Order (Iod fTo D {x \\<in> carrier fTo D. C \\<subseteq> x});\n     m \\<in> carrier fTo D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>carrier fTo D.\n                         m \\<preceq>\\<^bsub>fTo D\\<^esub>\n                         b \\<longrightarrow>\n                         m = b", "apply (rule ballI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>C \\<in> carrier fTo D; C \\<subseteq> m;\n        \\<forall>b.\n           b \\<in> carrier fTo D \\<and> C \\<subseteq> b \\<longrightarrow>\n           m \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n           b \\<longrightarrow>\n           m = b;\n        Order fTo D;\n        Order (Iod fTo D {x \\<in> carrier fTo D. C \\<subseteq> x});\n        m \\<in> carrier fTo D; b \\<in> carrier fTo D;\n        m \\<preceq>\\<^bsub>fTo D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> m = b", "apply (simp only:fTo_Order_sub,\n        frule_tac a = b in forall_spec, simp,\n        thin_tac \"\\<forall>b. b \\<in> carrier (fTo D) \\<and> C \\<subseteq> b \\<longrightarrow>\n             m \\<preceq>\\<^bsub>Iod (fTo D) {S \\<in> carrier (fTo D). C \\<subseteq> S}\\<^esub> b \\<longrightarrow> m = b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>C \\<in> carrier fTo D; C \\<subseteq> m; Order fTo D;\n        Order (Iod fTo D {x \\<in> carrier fTo D. C \\<subseteq> x});\n        m \\<in> carrier fTo D; b \\<in> carrier fTo D; m \\<subseteq> b;\n        m \\<preceq>\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n        b \\<longrightarrow>\n        m = b\\<rbrakk>\n       \\<Longrightarrow> m = b", "by (simp add: Order.Iod_le fTo_Order_sub)"], ["", "lemma (in Order) Hausdorff_ac:\"C \\<in> carrier (fTo D) \\<Longrightarrow> \n                    \\<exists>M\\<in>carrier (fTo D). C \\<subseteq> M \\<and> maximal\\<^bsub>(fTo D)\\<^esub> M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<in> carrier fTo D \\<Longrightarrow>\n    \\<exists>M\\<in>carrier fTo D.\n       C \\<subseteq> M \\<and> maximal\\<^bsub>fTo D\\<^esub> M", "apply (frule_tac Hausdorff_acTr[of \"C\"],\n       cut_tac conditional_subset[of \"carrier (fTo D)\" \"(\\<subseteq>) C\"],\n       cut_tac fTOrder,\n       frule Order.Iod_Order[of \"fTo D\" \"{x \\<in> carrier fTo D. C \\<subseteq> x}\"],\n       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<in> carrier fTo D;\n     S_inductive_set (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n     {x \\<in> carrier fTo D. C \\<subseteq> x} \\<subseteq> carrier fTo D;\n     Order fTo D;\n     Order (Iod fTo D {x \\<in> carrier fTo D. C \\<subseteq> x})\\<rbrakk>\n    \\<Longrightarrow> \\<exists>M\\<in>carrier fTo D.\n                         C \\<subseteq> M \\<and>\n                         maximal\\<^bsub>fTo D\\<^esub> M", "apply (frule Order.S_inductive_maxl[of \"Iod (fTo D) \n              {S \\<in> carrier (fTo D). C \\<subseteq> S}\"], assumption+,\n       frule fTo_conditional_inc_C[of \"C\"], simp add:nonempty,\n       erule exE,\n       frule_tac m = m in Order.maximal_mem[of \n             \"Iod (fTo D) {x \\<in> carrier (fTo D). C \\<subseteq> x}\"], assumption+,\n       simp add:Order.Iod_carrier, erule conjE,\n       frule_tac m = m in maximal_conditional_maximal[of \"C\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>C \\<in> carrier fTo D;\n        S_inductive_set\n         (Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S});\n        Order fTo D;\n        Order (Iod fTo D {x \\<in> carrier fTo D. C \\<subseteq> x});\n        maximal\\<^bsub>Iod fTo D {S \\<in> carrier fTo D. C \\<subseteq> S}\\<^esub>\n        m;\n        m \\<in> carrier fTo D; C \\<subseteq> m;\n        maximal\\<^bsub>fTo D\\<^esub> m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M\\<in>carrier fTo D.\n                            C \\<subseteq> M \\<and>\n                            maximal\\<^bsub>fTo D\\<^esub> M", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(** g_Zorn_lemma is the Zorn's lemma in general ordered set **)"], ["", "lemma (in Order) Zorn_lemmaTr:\"\\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n           maximal\\<^bsub>fTo D\\<^esub> M; b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b \\<rbrakk> \\<Longrightarrow>\n            maximal b \\<and> b \\<in> upper_bounds D C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n     maximal\\<^bsub>fTo D\\<^esub> M; b \\<in> carrier D;\n     \\<forall>s\\<in>M. s \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> maximal b \\<and> b \\<in> upper_bounds D C", "apply (simp add:upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n     maximal\\<^bsub>fTo D\\<^esub> M; b \\<in> carrier D;\n     \\<forall>s\\<in>M. s \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> maximal b \\<and> (\\<forall>s\\<in>C. s \\<preceq> b)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n     maximal\\<^bsub>fTo D\\<^esub> M; b \\<in> carrier D;\n     \\<forall>s\\<in>M. s \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> maximal b\n 2. \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n     maximal\\<^bsub>fTo D\\<^esub> M; b \\<in> carrier D;\n     \\<forall>s\\<in>M. s \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s\\<in>C. s \\<preceq> b", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n     maximal\\<^bsub>fTo D\\<^esub> M; b \\<in> carrier D;\n     \\<forall>s\\<in>M. s \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s\\<in>C. s \\<preceq> b\n 2. \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n     maximal\\<^bsub>fTo D\\<^esub> M; b \\<in> carrier D;\n     \\<forall>s\\<in>M. s \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> maximal b", "apply (rule ballI, simp add:subsetD,\n        rule contrapos_pp, simp+, simp add:maximal_element_def,\n        erule bexE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n        \\<forall>b\\<in>carrier fTo D.\n           M \\<preceq>\\<^bsub>fTo D\\<^esub> b \\<longrightarrow> M = b;\n        b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b;\n        ba \\<in> carrier D; b \\<preceq> ba; b \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac X = M in mem_fTo_Chain,\n        frule_tac X = M and b = ba in adjunct_Chain, assumption+,\n        rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ba x.\n       \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n        \\<forall>b\\<in>carrier fTo D.\n           M \\<preceq>\\<^bsub>fTo D\\<^esub> b \\<longrightarrow> M = b;\n        b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b;\n        ba \\<in> carrier D; b \\<preceq> ba; b \\<noteq> ba; Chain D M;\n        x \\<in> M\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> ba\n 2. \\<And>ba.\n       \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n        \\<forall>b\\<in>carrier fTo D.\n           M \\<preceq>\\<^bsub>fTo D\\<^esub> b \\<longrightarrow> M = b;\n        b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b;\n        ba \\<in> carrier D; b \\<preceq> ba; b \\<noteq> ba; Chain D M;\n        Chain D (insert ba M)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = x in bspec, assumption+,\n        thin_tac \"\\<forall>s\\<in>M. s \\<preceq> b\",\n        frule_tac X = M in Chain_sub,\n        frule_tac c = x in subsetD[of \"M\" \"carrier D\"], assumption+,\n        rule_tac a = x and b = b and c = ba in le_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n        \\<forall>b\\<in>carrier fTo D.\n           M \\<preceq>\\<^bsub>fTo D\\<^esub> b \\<longrightarrow> M = b;\n        b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b;\n        ba \\<in> carrier D; b \\<preceq> ba; b \\<noteq> ba; Chain D M;\n        Chain D (insert ba M)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac B = M and a = ba in subset_insertI,\n        cut_tac a = ba in insertI1[of _ \"M\"], \n        cut_tac C = \"insert ba M\" in Chain_mem_fTo, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n        \\<forall>b\\<in>carrier fTo D.\n           M \\<preceq>\\<^bsub>fTo D\\<^esub> b \\<longrightarrow> M = b;\n        b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b;\n        ba \\<in> carrier D; b \\<preceq> ba; b \\<noteq> ba; Chain D M;\n        Chain D (insert ba M); M \\<subseteq> insert ba M;\n        ba \\<in> insert ba M; insert ba M \\<in> carrier fTo D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = \"insert ba M\" in bspec, assumption,\n        thin_tac \"\\<forall>b\\<in>carrier fTo D. M \\<preceq>\\<^bsub>fTo D\\<^esub> b \\<longrightarrow> M = b\",\n        simp del:insert_iff insert_subset add:fTo_Order_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n        b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b;\n        ba \\<in> carrier D; b \\<preceq> ba; b \\<noteq> ba; Chain D M;\n        ba \\<in> M; M = insert ba M\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = ba in bspec, assumption,\n        thin_tac \"\\<forall>s\\<in>M. s \\<preceq> b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>Chain D C; M \\<in> carrier fTo D; C \\<subseteq> M;\n        b \\<in> carrier D; ba \\<in> carrier D; b \\<preceq> ba;\n        b \\<noteq> ba; Chain D M; ba \\<in> M; M = insert ba M;\n        ba \\<preceq> b\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = b and b = ba in le_antisym, assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) g_Zorn_lemma1:\"\\<lbrakk>inductive_set D; Chain D C\\<rbrakk> \\<Longrightarrow> \\<exists>m. maximal m \\<and> m \\<in> upper_bounds D C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inductive_set D; Chain D C\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. maximal m \\<and> m \\<in> upper_bounds D C", "apply (frule Chain_mem_fTo [of \"C\"],\n       frule Hausdorff_ac[of \"C\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inductive_set D; Chain D C; C \\<in> carrier fTo D;\n     \\<exists>M\\<in>carrier fTo D.\n        C \\<subseteq> M \\<and> maximal\\<^bsub>fTo D\\<^esub> M\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m. maximal m \\<and> m \\<in> upper_bounds D C", "apply (erule bexE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       \\<lbrakk>inductive_set D; Chain D C; C \\<in> carrier fTo D;\n        M \\<in> carrier fTo D; C \\<subseteq> M;\n        maximal\\<^bsub>fTo D\\<^esub> M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            maximal m \\<and> m \\<in> upper_bounds D C", "apply (frule_tac X = M in mem_fTo_Chain)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       \\<lbrakk>inductive_set D; Chain D C; C \\<in> carrier fTo D;\n        M \\<in> carrier fTo D; C \\<subseteq> M;\n        maximal\\<^bsub>fTo D\\<^esub> M; Chain D M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            maximal m \\<and> m \\<in> upper_bounds D C", "apply (simp add:inductive_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       \\<lbrakk>\\<forall>C.\n                   Chain D C \\<longrightarrow> (\\<exists>b. ub C b);\n        Chain D C; C \\<in> carrier fTo D; M \\<in> carrier fTo D;\n        C \\<subseteq> M; maximal\\<^bsub>fTo D\\<^esub> M; Chain D M\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            maximal m \\<and> m \\<in> upper_bounds D C", "apply (frule_tac a = M in forall_spec, assumption,\n        thin_tac \"\\<forall>C. Chain D C \\<longrightarrow> (\\<exists>b. ub C b)\",\n        erule exE, simp add:upper_bound_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M b.\n       \\<lbrakk>Chain D C; C \\<in> carrier fTo D; M \\<in> carrier fTo D;\n        C \\<subseteq> M; maximal\\<^bsub>fTo D\\<^esub> M; Chain D M;\n        b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            maximal m \\<and> m \\<in> upper_bounds D C", "apply (frule_tac M = M and b = b in Zorn_lemmaTr[of \"C\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M b.\n       \\<lbrakk>Chain D C; C \\<in> carrier fTo D; M \\<in> carrier fTo D;\n        C \\<subseteq> M; maximal\\<^bsub>fTo D\\<^esub> M; Chain D M;\n        b \\<in> carrier D; \\<forall>s\\<in>M. s \\<preceq> b;\n        maximal b \\<and> b \\<in> upper_bounds D C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            maximal m \\<and> m \\<in> upper_bounds D C", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) g_Zorn_lemma2:\"\\<lbrakk>inductive_set D; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow> \n                 \\<exists>m\\<in>carrier D. maximal m \\<and> a \\<preceq> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inductive_set D; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m\\<in>carrier D.\n                         maximal m \\<and> a \\<preceq> m", "apply (frule BNTr1 [of \"a\"],\n       frule singleton_sub[of \"a\" \"carrier D\"],\n       frule_tac  X = \"{a}\" in Torder_Chain,\n       simp add:Worder.Torder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inductive_set D; a \\<in> carrier D; Worder (Iod D {a});\n     {a} \\<subseteq> carrier D; Chain D {a}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m\\<in>carrier D.\n                         maximal m \\<and> a \\<preceq> m", "apply (frule_tac C = \"{a}\" in g_Zorn_lemma1, assumption+,\n       erule exE, erule conjE,\n       simp add:upper_bounds_def upper_bound_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>inductive_set D; a \\<in> carrier D; Worder (Iod D {a});\n        Chain D {a}; maximal m;\n        m \\<in> carrier D \\<and> a \\<preceq> m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m\\<in>carrier D.\n                            maximal m \\<and> a \\<preceq> m", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) g_Zorn_lemma3:\"inductive_set D \\<Longrightarrow> \\<exists>m\\<in>carrier D. maximal m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inductive_set D \\<Longrightarrow> \\<exists>m\\<in>carrier D. maximal m", "apply (cut_tac Iod_empty_Torder,\n       cut_tac empty_subsetI[of \"carrier D\"],\n       frule Torder_Chain[of \"{}\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inductive_set D; Torder (Iod D {}); {} \\<subseteq> carrier D;\n     Chain D {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m\\<in>carrier D. maximal m", "apply (frule_tac  C = \"{}\" in g_Zorn_lemma1, assumption+,\n       simp add:upper_bounds_def upper_bound_def,\n       blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "chapter \"Group Theory. Focused on Jordan Hoelder theorem\""], ["", "section \"Definition of a Group\""], ["", "record 'a Group = \"'a carrier\" + \n  top      :: \"['a, 'a ] \\<Rightarrow> 'a\" (infixl \"\\<cdot>\\<index>\" 70)\n  iop      :: \"'a  \\<Rightarrow>  'a\" (\"\\<rho>\\<index> _\" [81] 80)\n  one     :: \"'a\"   (\"\\<one>\\<index>\")"], ["", "locale Group =\n fixes G (structure)\n assumes top_closed: \"top G \\<in> carrier G \\<rightarrow> carrier G \\<rightarrow> carrier G\"\n and     tassoc : \"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n         (a \\<cdot> b) \\<cdot> c = a \\<cdot> (b \\<cdot> c)\"\n and     iop_closed:\"iop G \\<in> carrier G \\<rightarrow> carrier G\"\n and     l_i :\"a \\<in> carrier G \\<Longrightarrow>  (\\<rho> a) \\<cdot> a = \\<one>\"\n and     unit_closed: \"\\<one> \\<in> carrier G\"\n and     l_unit:\"a \\<in> carrier G \\<Longrightarrow> \\<one> \\<cdot> a = a\""], ["", "lemma (in Group) mult_closed:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n           a \\<cdot> b \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<in> carrier G", "apply (cut_tac top_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n     (\\<cdot>)\n     \\<in> carrier G \\<rightarrow>\n           carrier G \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<in> carrier G", "apply (frule funcset_mem[of \"(\\<cdot>)\" \"carrier G\" \"carrier G \\<rightarrow> carrier G\" \"a\"],\n       assumption+,\n       frule funcset_mem[of \"(\\<cdot>) a\" \"carrier G\" \"carrier G\" \"b\"],\n       assumption+ )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) i_closed:\"a \\<in> carrier G \\<Longrightarrow> (\\<rho> a) \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier G \\<Longrightarrow> \\<rho> a \\<in> carrier G", "apply  (cut_tac iop_closed,\n       frule funcset_mem[of \"iop G\" \"carrier G\" \"carrier G\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier G;\n     iop G \\<in> carrier G \\<rightarrow> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G\n 2. \\<lbrakk>a \\<in> carrier G;\n     iop G \\<in> carrier G \\<rightarrow> carrier G;\n     \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<in> carrier G", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) r_mult_eqn:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n       c \\<in> carrier G; a = b\\<rbrakk> \\<Longrightarrow> a \\<cdot> c = b \\<cdot> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> c = b \\<cdot> c", "by simp"], ["", "lemma (in Group) l_mult_eqn:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n       c \\<in> carrier G; a = b\\<rbrakk> \\<Longrightarrow> c \\<cdot> a = c \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> c \\<cdot> a = c \\<cdot> b", "by simp"], ["", "lemma (in Group) r_i:\"a \\<in> carrier G \\<Longrightarrow>\n                    a \\<cdot> (\\<rho> a) = \\<one> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier G \\<Longrightarrow> a \\<cdot> \\<rho> a = \\<one>", "apply (frule mult_closed[of \"a\" \"\\<rho> a\"],\n       simp add:i_closed,\n       cut_tac l_unit[of \"a\"],\n       cut_tac unit_closed,\n       frule mult_closed[of \"\\<one>\" \"a\"], assumption+,\n       frule i_closed[of \"a\"],\n       frule mult_closed[of \"\\<rho> a\" \"a\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G;\n     \\<one> \\<cdot> a = a; \\<one> \\<in> carrier G;\n     \\<one> \\<cdot> a \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> a = \\<one>\n 2. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G", "apply (frule r_mult_eqn[of \"(\\<rho> a) \\<cdot> a\" \"\\<one>\" \"\\<rho> a\"], assumption+,\n        simp add:l_i,\n        simp add:l_unit[of \"\\<rho> a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G;\n     \\<one> \\<cdot> a = a; \\<one> \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<cdot> \\<rho> a = \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> a = \\<one>\n 2. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G", "(* (i i a) from the left  *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G;\n     \\<one> \\<cdot> a = a; \\<one> \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<cdot> \\<rho> a = \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> a = \\<one>\n 2. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G", "apply (frule i_closed[of \"a\"],\n        frule i_closed[of \"\\<rho> a\"],\n        frule mult_closed[of \"\\<rho> a\" \"a\"], assumption+,\n        frule mult_closed[of \"(\\<rho> a) \\<cdot> a\" \"\\<rho> a\"], assumption+,\n        frule l_mult_eqn[of \"(\\<rho> a) \\<cdot> a \\<cdot> (\\<rho> a)\" \"\\<rho> a\" \"\\<rho> (\\<rho> a)\"],\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G;\n     \\<one> \\<cdot> a = a; \\<one> \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<cdot> \\<rho> a = \\<rho> a;\n     \\<rho> a \\<in> carrier G; \\<rho> (\\<rho> a) \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<cdot> \\<rho> a \\<in> carrier G;\n     \\<rho> (\\<rho> a) \\<cdot> (\\<rho> a \\<cdot> a \\<cdot> \\<rho> a) =\n     \\<rho> (\\<rho> a) \\<cdot> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> a = \\<one>\n 2. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G", "apply (thin_tac \"(\\<rho> a) \\<cdot> a \\<cdot> (\\<rho> a) = (\\<rho> a)\",\n        simp add:l_i[of \"\\<rho> a\"],\n        simp add:tassoc[THEN sym, of \"\\<rho> (\\<rho> a)\" \"(\\<rho> a) \\<cdot> a\" \"\\<rho> a\"],\n        simp add:tassoc[THEN sym, of \"\\<rho> (\\<rho> a)\" \"\\<rho> a\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G;\n     \\<one> \\<cdot> a = a; \\<one> \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> (\\<rho> a) \\<in> carrier G; \\<rho> a \\<cdot> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<cdot> \\<rho> a \\<in> carrier G;\n     \\<rho> (\\<rho> a) \\<cdot> \\<rho> a \\<cdot> a \\<cdot> \\<rho> a =\n     \\<one>\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> a = \\<one>\n 2. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G", "apply (simp add:l_i[of \"\\<rho> a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; a \\<cdot> \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) r_unit:\"a \\<in> carrier G \\<Longrightarrow> a \\<cdot> \\<one> = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier G \\<Longrightarrow> a \\<cdot> \\<one> = a", "apply (cut_tac unit_closed,\n       frule i_closed[of \"a\"],\n       frule mult_closed[of \"a\" \"\\<one>\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; \\<one> \\<in> carrier G;\n     \\<rho> a \\<in> carrier G; a \\<cdot> \\<one> \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<one> = a", "apply (cut_tac l_i[THEN sym, of \"a\"],\n       simp,\n       thin_tac \"\\<one> = \\<rho> a \\<cdot> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier G; \\<rho> a \\<cdot> a \\<in> carrier G;\n     \\<rho> a \\<in> carrier G;\n     a \\<cdot> (\\<rho> a \\<cdot> a) \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> (\\<rho> a \\<cdot> a) = a\n 2. \\<lbrakk>a \\<in> carrier G; \\<one> \\<in> carrier G;\n     \\<rho> a \\<in> carrier G; a \\<cdot> \\<one> \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G", "apply (simp add:tassoc[THEN sym] r_i l_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; \\<one> \\<in> carrier G;\n     \\<rho> a \\<in> carrier G; a \\<cdot> \\<one> \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier G", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) l_i_unique:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; \n       b \\<cdot> a = \\<one> \\<rbrakk> \\<Longrightarrow> (\\<rho> a) = b \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> a = \\<one>\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a = b", "apply (cut_tac unit_closed,\n       frule i_closed[of \"a\"],\n       frule mult_closed[of \"b\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; b \\<cdot> a = \\<one>;\n     \\<one> \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     b \\<cdot> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a = b", "apply (frule r_mult_eqn[of \"b \\<cdot> a\" \"\\<one>\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; b \\<cdot> a = \\<one>;\n     \\<one> \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     b \\<cdot> a \\<in> carrier G;\n     b \\<cdot> a \\<cdot> \\<rho> a = \\<one> \\<cdot> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a = b", "apply (thin_tac \"b \\<cdot> a = \\<one>\",\n       simp add:tassoc[of \"b\" \"a\" \"\\<rho> a\"] r_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; \\<one> \\<in> carrier G;\n     \\<rho> a \\<in> carrier G; b \\<cdot> a \\<in> carrier G;\n     b \\<cdot> \\<one> = \\<one> \\<cdot> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a = b", "apply (simp add:l_unit r_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) l_i_i:\"a \\<in> carrier G \\<Longrightarrow> (\\<rho> (\\<rho> a)) \\<cdot> (\\<rho> a) = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier G \\<Longrightarrow>\n    \\<rho> (\\<rho> a) \\<cdot> \\<rho> a = \\<one>", "by (frule i_closed[of \"a\"],\n       cut_tac l_i[of \"\\<rho> a\"], assumption+)"], ["", "lemma (in Group) l_div_eqn:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n        a \\<cdot> x = a \\<cdot> y \\<rbrakk> \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n     a \\<cdot> x = a \\<cdot> y\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (frule mult_closed[of \"a\" \"x\"], assumption+,\n       frule mult_closed[of \"a\" \"y\"], assumption+,\n       frule i_closed[of \"a\"],\n       frule l_mult_eqn[of \"a \\<cdot> x\" \"a \\<cdot> y\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n     a \\<cdot> x = a \\<cdot> y; a \\<cdot> x \\<in> carrier G;\n     a \\<cdot> y \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> (a \\<cdot> x) =\n     \\<rho> a \\<cdot> (a \\<cdot> y)\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (thin_tac \"a \\<cdot> x = a \\<cdot> y\",\n       simp add:tassoc[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n     a \\<cdot> x \\<in> carrier G; a \\<cdot> y \\<in> carrier G;\n     \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> a \\<cdot> x = \\<rho> a \\<cdot> a \\<cdot> y\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (simp add:l_i l_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) r_div_eqn:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n   x \\<cdot> a = y \\<cdot> a \\<rbrakk> \\<Longrightarrow> x = y \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n     x \\<cdot> a = y \\<cdot> a\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (frule mult_closed[of \"x\" \"a\"], assumption+,\n       frule mult_closed[of \"y\" \"a\"], assumption+,\n       frule i_closed[of \"a\"],\n       frule r_mult_eqn[of \"x \\<cdot> a\" \"y \\<cdot> a\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n     x \\<cdot> a = y \\<cdot> a; x \\<cdot> a \\<in> carrier G;\n     y \\<cdot> a \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     x \\<cdot> a \\<cdot> \\<rho> a = y \\<cdot> a \\<cdot> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (thin_tac \"x \\<cdot> a =  y \\<cdot> a\",\n        simp add:tassoc, simp add:r_i r_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) l_mult_eqn1:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;  y \\<in> carrier G;\n        (\\<rho> a) \\<cdot> x = (\\<rho> a) \\<cdot> y\\<rbrakk>  \\<Longrightarrow> x = y \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; y \\<in> carrier G;\n     \\<rho> a \\<cdot> x = \\<rho> a \\<cdot> y\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (frule i_closed[of \"a\"], rule l_div_eqn[of \"\\<rho> a\" \"x\" \"y\"], assumption+)"], ["", "lemma (in Group) tOp_assocTr41:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n       d \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d = a \\<cdot> b \\<cdot> (c \\<cdot> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     d \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d =\n                      a \\<cdot> b \\<cdot> (c \\<cdot> d)", "by (frule mult_closed[of \"a\" \"b\"], assumption+, \n                                   simp add:tassoc[of \"a \\<cdot> b\" \"c\" \"d\"])"], ["", "lemma (in Group) tOp_assocTr42:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n      d \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d = a \\<cdot> (b \\<cdot> c)\\<cdot> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     d \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d =\n                      a \\<cdot> (b \\<cdot> c) \\<cdot> d", "by (simp add:tassoc[of \"a\" \"b\" \"c\"])"], ["", "lemma (in Group) tOp_assocTr44:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n      d \\<in> carrier G \\<rbrakk> \\<Longrightarrow> (\\<rho> a) \\<cdot> b \\<cdot> ((\\<rho> c) \\<cdot> d) = \n                                         (\\<rho>  a) \\<cdot> ((b \\<cdot> (\\<rho> c)) \\<cdot> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     d \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> b \\<cdot> (\\<rho> c \\<cdot> d) =\n                      \\<rho> a \\<cdot> (b \\<cdot> \\<rho> c \\<cdot> d)", "apply (frule i_closed[of \"a\"],\n       frule i_closed[of \"c\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     d \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> c \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> b \\<cdot> (\\<rho> c \\<cdot> d) =\n                      \\<rho> a \\<cdot> (b \\<cdot> \\<rho> c \\<cdot> d)", "apply (simp add:tassoc[of \"b\" \"\\<rho> c\" \"d\"],\n       frule mult_closed[of \"\\<rho> c\" \"d\"], assumption+,\n       simp add:tassoc[THEN sym, of \"\\<rho> a\" \"b\" \"(\\<rho> c) \\<cdot> d\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) tOp_assocTr45:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G; \nd \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d = a \\<cdot> (b \\<cdot> (c \\<cdot> d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     d \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d =\n                      a \\<cdot> (b \\<cdot> (c \\<cdot> d))", "apply (frule mult_closed[of \"c\" \"d\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     d \\<in> carrier G; c \\<cdot> d \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d =\n                      a \\<cdot> (b \\<cdot> (c \\<cdot> d))", "apply (simp add:tassoc[of \"a\" \"b\" \"c \\<cdot> d\", THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G;\n     d \\<in> carrier G; c \\<cdot> d \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> c \\<cdot> d =\n                      a \\<cdot> b \\<cdot> (c \\<cdot> d)", "apply (simp add:tOp_assocTr41)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) one_unique:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;  x \\<cdot> a = x\\<rbrakk> \\<Longrightarrow> \n                                a = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; x \\<cdot> a = x\\<rbrakk>\n    \\<Longrightarrow> a = \\<one>", "apply (frule mult_closed[of \"x\" \"a\"], assumption+,\n       frule i_closed[of \"x\"],\n       frule l_mult_eqn[of \"x \\<cdot> a\" \"x\" \"\\<rho> x\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; x \\<cdot> a = x;\n     x \\<cdot> a \\<in> carrier G; \\<rho> x \\<in> carrier G;\n     \\<rho> x \\<cdot> (x \\<cdot> a) = \\<rho> x \\<cdot> x\\<rbrakk>\n    \\<Longrightarrow> a = \\<one>", "apply (thin_tac \"x \\<cdot> a = x\",\n       simp add:tassoc[THEN sym, of \"\\<rho> x\" \"x\" \"a\"],\n       simp add:l_i l_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) i_one:\"\\<rho> \\<one> = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho> \\<one> = \\<one>", "by  (cut_tac unit_closed, frule l_i[of \"\\<one>\"],\n     frule i_closed[of \"\\<one>\"], simp add:r_unit)"], ["", "lemma (in Group) eqn_inv1:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; a = (\\<rho> x) \\<rbrakk> \\<Longrightarrow> \n                       x = (\\<rho> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; a = \\<rho> x\\<rbrakk>\n    \\<Longrightarrow> x = \\<rho> a", "apply (frule i_closed[of \"x\"],\n       frule l_mult_eqn[of \"a\" \"\\<rho> x\" \"x\"], assumption+,\n       thin_tac \"a = \\<rho> x\", simp add:r_i,\n       simp add:l_i_unique[of \"a\" \"x\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) eqn_inv2:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;  x \\<cdot> a = x \\<cdot> (\\<rho> x)\\<rbrakk> \\<Longrightarrow>\n                        x = (\\<rho> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;\n     x \\<cdot> a = x \\<cdot> \\<rho> x\\<rbrakk>\n    \\<Longrightarrow> x = \\<rho> a", "apply (rule eqn_inv1, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;\n     x \\<cdot> a = x \\<cdot> \\<rho> x\\<rbrakk>\n    \\<Longrightarrow> a = \\<rho> x", "apply (rule l_div_eqn[of \"x\" \"a\" \"\\<rho> x\"], assumption+,\n       simp add:i_closed, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) r_one_unique:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; a \\<cdot> x = a\\<rbrakk>  \\<Longrightarrow>\n                                 x = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; a \\<cdot> x = a\\<rbrakk>\n    \\<Longrightarrow> x = \\<one>", "apply (frule mult_closed[of \"a\" \"x\"], assumption+,\n       frule i_closed[of \"a\"],\n       frule l_mult_eqn[of \"a \\<cdot> x\" \"a\" \"\\<rho> a\"], assumption+,\n       thin_tac \"a \\<cdot> x = a\",\n       simp add:tassoc[THEN sym] l_i l_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) r_i_unique:\"\\<lbrakk>a \\<in> carrier G; x \\<in> carrier G; a \\<cdot> x = \\<one>\\<rbrakk> \\<Longrightarrow>\n                             x = (\\<rho> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; x \\<in> carrier G;\n     a \\<cdot> x = \\<one>\\<rbrakk>\n    \\<Longrightarrow> x = \\<rho> a", "apply (cut_tac unit_closed,\n       frule mult_closed[of \"a\" \"x\"], assumption+,\n       frule i_closed[of \"x\"],\n       frule r_mult_eqn[of \"a \\<cdot> x\" \"\\<one>\" \"\\<rho> x\"], assumption+,\n       thin_tac \"a \\<cdot> x = \\<one>\",\n       simp add:tassoc[of \"a\" \"x\" \"\\<rho> x\"] r_i r_unit l_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier G; \\<one> \\<in> carrier G;\n     \\<rho> x \\<cdot> x \\<in> carrier G; \\<rho> x \\<in> carrier G;\n     a = \\<rho> x\\<rbrakk>\n    \\<Longrightarrow> x = \\<rho> (\\<rho> x)", "apply (simp add:eqn_inv1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) iop_i_i:\"a \\<in> carrier G  \\<Longrightarrow> \\<rho> (\\<rho> a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier G \\<Longrightarrow> \\<rho> (\\<rho> a) = a", "apply (frule i_closed[of \"a\"], frule i_closed[of \"\\<rho> a\"],\n       frule l_i[of \"\\<rho> a\"],\n       frule mult_closed[of \"\\<rho> (\\<rho> a)\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> (\\<rho> a) \\<in> carrier G;\n     \\<rho> (\\<rho> a) \\<cdot> \\<rho> a = \\<one>;\n     \\<rho> (\\<rho> a) \\<cdot> \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<rho> (\\<rho> a) = a", "apply (cut_tac unit_closed,\n       frule r_mult_eqn[of \"\\<rho> (\\<rho> a) \\<cdot> \\<rho> a\" \"\\<one>\" \"a\"], assumption+,\n       thin_tac \"\\<rho> (\\<rho> a) \\<cdot> \\<rho> a = \\<one>\",\n       simp only:tassoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> (\\<rho> a) \\<in> carrier G;\n     \\<rho> (\\<rho> a) \\<cdot> \\<rho> a \\<in> carrier G;\n     \\<one> \\<in> carrier G;\n     \\<rho> (\\<rho> a) \\<cdot> (\\<rho> a \\<cdot> a) =\n     \\<one> \\<cdot> a\\<rbrakk>\n    \\<Longrightarrow> \\<rho> (\\<rho> a) = a", "apply (simp add:l_i r_unit l_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) i_ab:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                            \\<rho> (a \\<cdot> b) = (\\<rho> b) \\<cdot> (\\<rho> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<rho> (a \\<cdot> b) = \\<rho> b \\<cdot> \\<rho> a", "apply (frule mult_closed[of \"a\" \"b\"], assumption+,\n       frule i_closed[of \"a \\<cdot> b\"],\n       frule i_closed[of \"a\"], frule i_closed[of \"b\"],\n       frule l_div_eqn[of \"a \\<cdot> b\" \"\\<rho> (a \\<cdot> b)\" \"(\\<rho> b) \\<cdot> (\\<rho> a)\"], assumption+,\n       simp add:mult_closed, simp add:r_i[of \"a \\<cdot> b\"],\n       simp add:tOp_assocTr41[THEN sym], simp add:tOp_assocTr42,\n       simp add:r_i r_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n     a \\<cdot> b \\<in> carrier G; \\<rho> (a \\<cdot> b) \\<in> carrier G;\n     \\<rho> a \\<in> carrier G; \\<rho> b \\<in> carrier G;\n     \\<rho> (a \\<cdot> b) = \\<rho> b \\<cdot> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> \\<rho> (a \\<cdot> b) = \\<rho> b \\<cdot> \\<rho> a", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sol_eq_l:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; x \\<in> carrier G;\n                   a \\<cdot> x = b\\<rbrakk> \\<Longrightarrow> x = (\\<rho> a) \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; x \\<in> carrier G;\n     a \\<cdot> x = b\\<rbrakk>\n    \\<Longrightarrow> x = \\<rho> a \\<cdot> b", "apply (frule mult_closed[of \"a\" \"x\"], assumption+,\n       frule i_closed[of \"a\"],\n       frule l_mult_eqn[of \"a \\<cdot> x\" \"b\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; x \\<in> carrier G;\n     a \\<cdot> x = b; a \\<cdot> x \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> (a \\<cdot> x) = \\<rho> a \\<cdot> b\\<rbrakk>\n    \\<Longrightarrow> x = \\<rho> a \\<cdot> b", "apply (thin_tac \"a \\<cdot> x = b\",\n       simp add:tassoc[THEN sym],\n       simp add:l_i l_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sol_eq_r:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; x \\<in> carrier G; \n       x \\<cdot> a = b \\<rbrakk> \\<Longrightarrow>  x = b \\<cdot> (\\<rho> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; x \\<in> carrier G;\n     x \\<cdot> a = b\\<rbrakk>\n    \\<Longrightarrow> x = b \\<cdot> \\<rho> a", "apply (frule mult_closed[of \"x\" \"a\"], assumption+,\n       frule i_closed[of \"a\"],\n       frule r_mult_eqn[of \"x \\<cdot> a\" \"b\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; x \\<in> carrier G;\n     x \\<cdot> a = b; x \\<cdot> a \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     x \\<cdot> a \\<cdot> \\<rho> a = b \\<cdot> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> x = b \\<cdot> \\<rho> a", "apply (thin_tac \"x \\<cdot> a = b\",\n       simp add:tassoc,\n       simp add:r_i r_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) r_div_eq:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; a \\<cdot> (\\<rho> b) = \\<one>\\<rbrakk> \\<Longrightarrow>\n                            a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n     a \\<cdot> \\<rho> b = \\<one>\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (frule i_closed[of \"b\"],\n       frule mult_closed[of \"a\" \"\\<rho> b\"], assumption+,\n       cut_tac unit_closed,\n       frule r_mult_eqn[of \"a \\<cdot> (\\<rho> b)\" \"\\<one>\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n     a \\<cdot> \\<rho> b = \\<one>; \\<rho> b \\<in> carrier G;\n     a \\<cdot> \\<rho> b \\<in> carrier G; \\<one> \\<in> carrier G;\n     a \\<cdot> \\<rho> b \\<cdot> b = \\<one> \\<cdot> b\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (thin_tac \"a \\<cdot> \\<rho> b = \\<one>\",\n       simp add:tassoc l_i r_i, simp add:l_unit r_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) l_div_eq:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; (\\<rho> a) \\<cdot> b = \\<one>\\<rbrakk> \\<Longrightarrow>\n                               a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> a \\<cdot> b = \\<one>\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (frule i_closed[of \"a\"],\n       frule mult_closed[of \"\\<rho> a\" \"b\"], assumption+,\n       cut_tac unit_closed,\n       frule l_mult_eqn[of \"(\\<rho> a) \\<cdot> b\" \"\\<one>\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> a \\<cdot> b = \\<one>; \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> b \\<in> carrier G; \\<one> \\<in> carrier G;\n     a \\<cdot> (\\<rho> a \\<cdot> b) = a \\<cdot> \\<one>\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (thin_tac \"\\<rho> a \\<cdot> b = \\<one>\",\n       simp add:tassoc[THEN sym] r_i l_unit r_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) i_m_closed:\"\\<lbrakk>a \\<in> carrier G ; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n              (\\<rho> a) \\<cdot> b \\<in> carrier G \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> b \\<in> carrier G", "by (rule mult_closed,\n       simp add:i_closed, assumption)"], ["", "section \"Subgroups\""], ["", "definition\n  sg ::\"[_ , 'a set ] \\<Rightarrow> bool\"  (\"_ \\<guillemotright> _ \" [60, 61]60) where\n  \"G \\<guillemotright> H \\<longleftrightarrow> H \\<noteq> {} \\<and> H \\<subseteq> carrier G \\<and> (\\<forall>a \\<in> H. \\<forall>b \\<in> H. a \\<cdot>\\<^bsub>G\\<^esub> (\\<rho>\\<^bsub>G\\<^esub> b) \\<in> H)\""], ["", "(** SG is a set satisfying the condition above. In math textbooks this is \n  called a subgroup and it is also taken as a group with induced structure.**)"], ["", "definition\n   Gp :: \"_ \\<Rightarrow> 'a set \\<Rightarrow> _\"        (\"(\\<natural>\\<index>_)\" 70) where\n   \"\\<natural>\\<^bsub>G\\<^esub>H \\<equiv> G \\<lparr> carrier := H, top := top G, iop := iop G, one := one G\\<rparr>\""], ["", "(** Gp G H is a group with carrier H, where H is sg **)"], ["", "definition\n  rcs :: \"[_ , 'a set, 'a] \\<Rightarrow> 'a set\" (infix \"\\<bullet>\\<index>\" 70) where\n  \"H \\<bullet>\\<^bsub>G\\<^esub> a = {b. \\<exists> h \\<in> H. h \\<cdot>\\<^bsub>G\\<^esub> a = b}\""], ["", "definition\n  lcs :: \"[_ , 'a, 'a set] \\<Rightarrow> 'a set\" (infix \"\\<diamondsuit>\\<index>\" 70) where\n  \"a \\<diamondsuit>\\<^bsub>G\\<^esub> H = {b. \\<exists> h \\<in> H. a \\<cdot>\\<^bsub>G\\<^esub> h = b}\""], ["", "definition\n  nsg :: \"_ \\<Rightarrow> 'a set \\<Rightarrow> bool\"    (\"_ \\<triangleright> _\" [60,61]60) where\n  \"G \\<triangleright> H \\<longleftrightarrow> G \\<guillemotright> H \\<and> (\\<forall>x \\<in> carrier G. H \\<bullet>\\<^bsub>G\\<^esub> x = x \\<diamondsuit>\\<^bsub>G\\<^esub> H)\""], ["", "definition\n  set_rcs :: \"[_ , 'a set] \\<Rightarrow> 'a set set\" where\n  \"set_rcs G H = {C. \\<exists>a \\<in> carrier G. C = H \\<bullet>\\<^bsub>G\\<^esub> a}\""], ["", "definition\n  c_iop :: \"[_ , 'a set]  \\<Rightarrow> 'a set \\<Rightarrow> 'a set\" where\n  \"c_iop G H = (\\<lambda>X\\<in>set_rcs G H. {z. \\<exists> x \\<in> X . \\<exists>h \\<in> H. h \\<cdot>\\<^bsub>G\\<^esub> (\\<rho>\\<^bsub>G\\<^esub> x) = z})\""], ["", "definition\n  c_top :: \"[_, 'a set] \\<Rightarrow> (['a set, 'a set] \\<Rightarrow> 'a set)\" where\n  \"c_top G H = (\\<lambda>X\\<in>set_rcs G H. \\<lambda>Y\\<in>set_rcs G H. \n    {z. \\<exists>x \\<in> X. \\<exists> y \\<in> Y. x \\<cdot>\\<^bsub>G\\<^esub> y = z})\""], ["", "lemma (in Group) sg_subset:\"G \\<guillemotright> H \\<Longrightarrow> H \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> H \\<subseteq> carrier G", "by (simp add:sg_def)"], ["", "lemma (in Group) one_Gp_one:\"G \\<guillemotright> H \\<Longrightarrow> \\<one>\\<^bsub>(Gp G H)\\<^esub> = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow>\n    \\<one>\\<^bsub>\\<natural>H\\<^esub> = \\<one>", "by (simp add:Gp_def)"], ["", "lemma (in Group) carrier_Gp:\"G \\<guillemotright> H \\<Longrightarrow> (carrier (\\<natural>H)) = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> carrier (\\<natural>H) = H", "by (simp add:Gp_def)"], ["", "lemma (in Group) sg_subset_elem:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H \\<rbrakk> \\<Longrightarrow> h \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> h \\<in> carrier G", "by (frule sg_subset [of \"H\"], simp only:subsetD)"], ["", "lemma (in Group) sg_mult_closedr:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> carrier G; h \\<in> H\\<rbrakk> \\<Longrightarrow>\n                x \\<cdot> h \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> carrier G; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> h \\<in> carrier G", "apply (frule sg_subset_elem [of \"H\" \"h\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> carrier G; h \\<in> H;\n     h \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> h \\<in> carrier G", "apply (simp add:mult_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sg_mult_closedl:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> carrier G; h \\<in> H\\<rbrakk> \\<Longrightarrow>\n                    h \\<cdot> x \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> carrier G; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> h \\<cdot> x \\<in> carrier G", "apply (frule sg_subset_elem[of \"H\" \"h\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> carrier G; h \\<in> H;\n     h \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> h \\<cdot> x \\<in> carrier G", "apply (simp add:mult_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sg_condTr1:\"\\<lbrakk>H \\<subseteq> carrier G; H \\<noteq> {};\n                  \\<forall>a. \\<forall>b. a \\<in> H \\<and> b \\<in> H \\<longrightarrow>  a \\<cdot> (\\<rho> b) \\<in> H\\<rbrakk> \\<Longrightarrow> \\<one> \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<subseteq> carrier G; H \\<noteq> {};\n     \\<forall>a b.\n        a \\<in> H \\<and> b \\<in> H \\<longrightarrow>\n        a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<one> \\<in> H", "apply (frule  nonempty_ex [of \"H\"], erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>H \\<subseteq> carrier G; H \\<noteq> {};\n        \\<forall>a b.\n           a \\<in> H \\<and> b \\<in> H \\<longrightarrow>\n           a \\<cdot> \\<rho> b \\<in> H;\n        x \\<in> H\\<rbrakk>\n       \\<Longrightarrow> \\<one> \\<in> H", "apply (frule_tac x = x in spec,\n       thin_tac \"\\<forall>a b. a \\<in> H \\<and> b \\<in> H \\<longrightarrow> a \\<cdot> \\<rho> b \\<in> H\",\n       frule_tac x = x in spec,\n       thin_tac \"\\<forall>b. x \\<in> H \\<and> b \\<in> H \\<longrightarrow> x \\<cdot> \\<rho> b \\<in> H\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>H \\<subseteq> carrier G; H \\<noteq> {}; x \\<in> H;\n        x \\<in> H \\<and> x \\<in> H \\<longrightarrow>\n        x \\<cdot> \\<rho> x \\<in> H\\<rbrakk>\n       \\<Longrightarrow> \\<one> \\<in> H", "apply (frule_tac c = x in subsetD[of \"H\" \"carrier G\"], assumption+,\n       simp add:r_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sg_unit_closed:\"G \\<guillemotright> H \\<Longrightarrow> \\<one> \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> \\<one> \\<in> H", "apply (simp add:sg_def, (erule conjE)+,\n       rule sg_condTr1, assumption+, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sg_i_closed:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H\\<rbrakk> \\<Longrightarrow> (\\<rho> x) \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> x \\<in> H", "apply (frule sg_unit_closed,\n       frule sg_subset_elem[of \"H\" \"x\"], assumption,\n       simp add:sg_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> H; \\<one> \\<in> H; x \\<in> carrier G; H \\<noteq> {};\n     H \\<subseteq> carrier G;\n     \\<forall>a\\<in>H. \\<forall>b\\<in>H. a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> x \\<in> H", "apply (frule_tac x = \\<one> in bspec, assumption,\n       rotate_tac -1,\n       frule_tac x = x in bspec, assumption,\n       thin_tac \"\\<forall>b\\<in>H. \\<one> \\<cdot> \\<rho> b \\<in> H\",\n       thin_tac \"\\<forall>a\\<in>H. \\<forall>b\\<in>H. a \\<cdot> \\<rho> b \\<in> H\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> H; \\<one> \\<in> H; x \\<in> carrier G; H \\<noteq> {};\n     H \\<subseteq> carrier G; \\<one> \\<cdot> \\<rho> x \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> x \\<in> H", "apply (frule i_closed[of \"x\"],\n       simp add:l_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sg_mult_closed:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H; y \\<in> H\\<rbrakk> \\<Longrightarrow>\n                                       x \\<cdot> y \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> H; y \\<in> H\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<in> H", "apply (frule sg_i_closed[of \"H\" \"y\"], assumption,\n       simp add:sg_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> H; y \\<in> H; \\<rho> y \\<in> H; H \\<noteq> {};\n     H \\<subseteq> carrier G;\n     \\<forall>a\\<in>H. \\<forall>b\\<in>H. a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<in> H", "apply (frule_tac x = x in bspec, assumption,\n       rotate_tac -1,\n       frule_tac x = \"\\<rho> y\" in bspec, assumption,\n       thin_tac \"\\<forall>b\\<in>H. x \\<cdot> \\<rho> b \\<in> H\",\n       thin_tac \"\\<forall>a\\<in>H. \\<forall>b\\<in>H. a \\<cdot> \\<rho> b \\<in> H\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> H; y \\<in> H; \\<rho> y \\<in> H; H \\<noteq> {};\n     H \\<subseteq> carrier G; x \\<cdot> \\<rho> (\\<rho> y) \\<in> H\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<in> H", "apply (frule subsetD[of \"H\" \"carrier G\"], assumption+,\n      simp add:iop_i_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsg_sg: \"G \\<triangleright> H \\<Longrightarrow> G \\<guillemotright> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> H \\<Longrightarrow> G \\<guillemotright> H", "by (simp add:nsg_def)"], ["", "lemma (in Group) nsg_subset:\"G \\<triangleright> N  \\<Longrightarrow> N \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow> N \\<subseteq> carrier G", "apply (simp add:nsg_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> N ;\n     \\<forall>x\\<in>carrier G. N \\<bullet> x = x \\<diamondsuit> N\\<rbrakk>\n    \\<Longrightarrow> N \\<subseteq> carrier G", "apply (simp add:sg_subset)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsg_lr_cst_eq:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                                     a \\<diamondsuit> N = N \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<diamondsuit> N = N \\<bullet> a", "by (simp add: nsg_def)"], ["", "lemma (in Group) sg_i_m_closed:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> H ; b \\<in> H\\<rbrakk> \\<Longrightarrow> (\\<rho> a) \\<cdot> b \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> H; b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> b \\<in> H", "apply (rule sg_mult_closed, assumption+,\n       simp add:sg_i_closed, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sg_m_i_closed:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> H ; b \\<in> H \\<rbrakk> \\<Longrightarrow> a \\<cdot> (\\<rho> b) \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> H; b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> b \\<in> H", "apply (simp add:sg_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  sg_gen :: \"[_ , 'a set] \\<Rightarrow> 'a set\" where\n  \"sg_gen G A = \\<Inter>{H. G \\<guillemotright> H \\<and> A \\<subseteq> H}\""], ["", "lemma (in Group) smallest_sg_gen:\"\\<lbrakk>A \\<subseteq> carrier G; G \\<guillemotright> H; A \\<subseteq> H\\<rbrakk> \\<Longrightarrow>\n                                   sg_gen G A \\<subseteq> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> carrier G; G \\<guillemotright> H ;\n     A \\<subseteq> H\\<rbrakk>\n    \\<Longrightarrow> sg_gen G A \\<subseteq> H", "apply (simp add:sg_gen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> carrier G; G \\<guillemotright> H ;\n     A \\<subseteq> H\\<rbrakk>\n    \\<Longrightarrow> \\<Inter>\n                       {H. G \\<guillemotright> H  \\<and> A \\<subseteq> H}\n                      \\<subseteq> H", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) special_sg_G: \"G \\<guillemotright> (carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> carrier G", "apply (simp add:sg_def,\n       cut_tac unit_closed, simp add:nonempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> \\<in> carrier G \\<Longrightarrow>\n    \\<forall>a\\<in>carrier G.\n       \\<forall>b\\<in>carrier G. a \\<cdot> \\<rho> b \\<in> carrier G", "apply ((rule ballI)+, simp add:mult_closed i_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) special_sg_self: \"G = \\<natural>(carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G = \\<natural>carrier G", "by (simp add:Gp_def)"], ["", "lemma (in Group) special_sg_e: \"G \\<guillemotright> {\\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> {\\<one>}", "apply (simp add:sg_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one> \\<in> carrier G \\<and> \\<one> \\<cdot> \\<rho> \\<one> = \\<one>", "apply (simp add:unit_closed i_one l_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) inter_sgs:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K\\<rbrakk> \\<Longrightarrow> G \\<guillemotright> (H \\<inter> K)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K \\<rbrakk>\n    \\<Longrightarrow> G \\<guillemotright> H \\<inter> K", "apply (frule sg_unit_closed[of \"H\"],\n       frule sg_unit_closed[of \"K\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ; \\<one> \\<in> H;\n     \\<one> \\<in> K\\<rbrakk>\n    \\<Longrightarrow> G \\<guillemotright> H \\<inter> K", "apply (simp add:sg_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<noteq> {} \\<and>\n             H \\<subseteq> carrier G \\<and>\n             (\\<forall>a\\<in>H.\n                 \\<forall>b\\<in>H. a \\<cdot> \\<rho> b \\<in> H);\n     K \\<noteq> {} \\<and>\n     K \\<subseteq> carrier G \\<and>\n     (\\<forall>a\\<in>K. \\<forall>b\\<in>K. a \\<cdot> \\<rho> b \\<in> K);\n     \\<one> \\<in> H; \\<one> \\<in> K\\<rbrakk>\n    \\<Longrightarrow> H \\<inter> K \\<noteq> {} \\<and>\n                      H \\<inter> K \\<subseteq> carrier G", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) subg_generated:\"A \\<subseteq> carrier G  \\<Longrightarrow> G \\<guillemotright> (sg_gen G A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> carrier G \\<Longrightarrow>\n    G \\<guillemotright> sg_gen G A", "apply (simp add:sg_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> carrier G \\<Longrightarrow>\n    sg_gen G A \\<noteq> {} \\<and>\n    sg_gen G A \\<subseteq> carrier G \\<and>\n    (\\<forall>a\\<in>sg_gen G A.\n        \\<forall>b\\<in>sg_gen G A. a \\<cdot> \\<rho> b \\<in> sg_gen G A)", "apply (rule conjI,\n       simp add:sg_gen_def,\n       rule ex_nonempty, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. A \\<subseteq> carrier G \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>xa.\n          G \\<guillemotright> xa  \\<and> A \\<subseteq> xa \\<longrightarrow>\n          x \\<in> xa\n 2. A \\<subseteq> carrier G \\<Longrightarrow>\n    sg_gen G A \\<subseteq> carrier G \\<and>\n    (\\<forall>a\\<in>sg_gen G A.\n        \\<forall>b\\<in>sg_gen G A. a \\<cdot> \\<rho> b \\<in> sg_gen G A)", "apply (rule contrapos_pp, simp+,\n        frule_tac x = \\<one> in spec,\n        thin_tac \"\\<forall>x. \\<exists>xa. G \\<guillemotright> xa  \\<and> A \\<subseteq> xa \\<and> x \\<notin> xa\",\n        erule exE, (erule conjE)+,\n        frule_tac H = x in sg_unit_closed, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> carrier G \\<Longrightarrow>\n    sg_gen G A \\<subseteq> carrier G \\<and>\n    (\\<forall>a\\<in>sg_gen G A.\n        \\<forall>b\\<in>sg_gen G A. a \\<cdot> \\<rho> b \\<in> sg_gen G A)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. A \\<subseteq> carrier G \\<Longrightarrow>\n    sg_gen G A \\<subseteq> carrier G\n 2. A \\<subseteq> carrier G \\<Longrightarrow>\n    \\<forall>a\\<in>sg_gen G A.\n       \\<forall>b\\<in>sg_gen G A. a \\<cdot> \\<rho> b \\<in> sg_gen G A", "apply (cut_tac special_sg_G,\n        simp add:sg_gen_def,\n        rule subsetI,\n        blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> carrier G \\<Longrightarrow>\n    \\<forall>a\\<in>sg_gen G A.\n       \\<forall>b\\<in>sg_gen G A. a \\<cdot> \\<rho> b \\<in> sg_gen G A", "apply ((rule ballI)+,\n       simp add:sg_gen_def,\n       rule allI, rule impI,\n       frule_tac a = x in forall_spec, assumption,\n       thin_tac \"\\<forall>x. G \\<guillemotright> x  \\<and> A \\<subseteq> x \\<longrightarrow> a \\<in> x\",\n       frule_tac a = x in forall_spec, assumption,\n       thin_tac \"\\<forall>x. G \\<guillemotright> x  \\<and> A \\<subseteq> x \\<longrightarrow> b \\<in> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x.\n       \\<lbrakk>A \\<subseteq> carrier G;\n        G \\<guillemotright> x  \\<and> A \\<subseteq> x; a \\<in> x;\n        b \\<in> x\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> \\<rho> b \\<in> x", "apply (simp add:sg_m_i_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  Qg :: \"[_ , 'a set] \\<Rightarrow> \n         \\<lparr>carrier:: 'a set set, top:: ['a set, 'a set] \\<Rightarrow> 'a set,\n           iop:: 'a set \\<Rightarrow> 'a set, one:: 'a set \\<rparr>\" where\n  \"Qg G H = \\<lparr>carrier = set_rcs G H, top = c_top G H, iop = c_iop G H, one = H \\<rparr>\""], ["", "definition\n  Pj :: \"[_ , 'a set] \\<Rightarrow>  ( 'a => 'a set)\" where\n  \"Pj G H = (\\<lambda>x \\<in> carrier G. H \\<bullet>\\<^bsub>G\\<^esub> x)\""], ["", "no_notation inverse_divide (infixl \"'/\" 70)"], ["", "abbreviation\n  QGRP :: \"([('a, 'more) Group_scheme, 'a set] => ('a set) Group)\"\n    (infixl \"'/\" 70) where\n  \"G / H == Qg G H\""], ["", "definition\n  gHom ::\"[('a, 'more) Group_scheme, ('b, 'more1) Group_scheme] \\<Rightarrow> \n           ('a  \\<Rightarrow> 'b) set\" where\n  \"gHom G F = {f. (f \\<in> extensional (carrier G) \\<and> f \\<in> carrier G \\<rightarrow> carrier F) \\<and>\n       (\\<forall>x \\<in> carrier G. \\<forall>y \\<in> carrier G. f (x \\<cdot>\\<^bsub>G\\<^esub> y) = (f x) \\<cdot>\\<^bsub>F\\<^esub> (f y))}\""], ["", "definition\n  gkernel ::\"[('a, 'more) Group_scheme , ('b, 'more1) Group_scheme, 'a \\<Rightarrow> 'b]\n            \\<Rightarrow> 'a set\" where\n  \"gkernel G F f = {x. (x \\<in> carrier G) \\<and> (f x = \\<one>\\<^bsub>F\\<^esub>)}\""], ["", "definition\n  iim :: \"[('a, 'more) Group_scheme, ('b, 'more1) Group_scheme, 'a \\<Rightarrow> 'b, \n            'b set]  \\<Rightarrow> 'a set\" where\n  \"iim G F f K = {x. (x \\<in> carrier G) \\<and> (f x \\<in> K)}\""], ["", "abbreviation\n  GKER :: \"[('a, 'more) Group_scheme, ('b, 'more1) Group_scheme, 'a \\<Rightarrow> 'b ] \\<Rightarrow> 'a set\"\n    (\"(3gker\\<^bsub>_,_\\<^esub> _)\" [88,88,89]88) where\n  \"gker\\<^bsub>G,F\\<^esub> f == gkernel G F f\""], ["", "definition\n  gsurjec :: \"[('a, 'more) Group_scheme, ('b, 'more1) Group_scheme, \n             'a \\<Rightarrow> 'b] \\<Rightarrow> bool\"  (\"(3gsurj\\<^bsub>_,_\\<^esub> _)\" [88,88,89]88) where\n  \"gsurj\\<^bsub>F,G\\<^esub> f \\<longleftrightarrow> f \\<in> gHom F G \\<and> surj_to f (carrier F) (carrier G)\""], ["", "definition\n  ginjec :: \"[('a, 'more) Group_scheme, ('b, 'more1) Group_scheme, \n             'a \\<Rightarrow> 'b]  \\<Rightarrow> bool\"    (\"(3ginj\\<^bsub>_,_\\<^esub> _)\" [88,88,89]88) where\n  \"ginj\\<^bsub>F,G\\<^esub> f \\<longleftrightarrow> f \\<in> gHom F G \\<and> inj_on f (carrier F)\""], ["", "definition\n  gbijec :: \"[('a, 'm) Group_scheme, ('b, 'm1) Group_scheme, 'a \\<Rightarrow> 'b]\n             \\<Rightarrow> bool\"       (\"(3gbij\\<^bsub>_,_\\<^esub> _)\" [88,88,89]88) where\n  \"gbij\\<^bsub>F,G\\<^esub> f \\<longleftrightarrow> gsurj\\<^bsub>F,G\\<^esub> f \\<and> ginj\\<^bsub>F,G\\<^esub> f\""], ["", "definition\n  Ug :: \"_  \\<Rightarrow>  ('a, 'more) Group_scheme\" where\n  \"Ug G = \\<natural>\\<^bsub>G\\<^esub> {\\<one>\\<^bsub>G\\<^esub>}\""], ["", "definition\n  Ugp :: \"_ \\<Rightarrow> bool\" where\n  \"Ugp G == Group G \\<and> carrier G = {\\<one>\\<^bsub>G\\<^esub>}\""], ["", "definition\n  isomorphic :: \"[('a, 'm) Group_scheme, ('b, 'm1) Group_scheme]\n                         \\<Rightarrow> bool\"   (infix \"\\<cong>\" 100) where\n  \"F \\<cong> G \\<longleftrightarrow> (\\<exists>f. gbij\\<^bsub>F,G\\<^esub> f)\""], ["", "definition\n  constghom :: \"[('a, 'm) Group_scheme, ('b, 'm1) Group_scheme] \n                           \\<Rightarrow> ('a \\<Rightarrow> 'b)\"  (\"('1'\\<^bsub>_,_\\<^esub>)\" [88,89]88) where\n  \"1\\<^bsub>F,G\\<^esub> = (\\<lambda>x\\<in>carrier F. \\<one>\\<^bsub>G\\<^esub>)\""], ["", "definition\n  cmpghom :: \"[('a, 'm) Group_scheme, 'b \\<Rightarrow> 'c, 'a \\<Rightarrow> 'b] \\<Rightarrow> 'a \\<Rightarrow> 'c\" where\n  \"cmpghom F g f = compose (carrier F) g f\""], ["", "abbreviation\n  GCOMP :: \"['b \\<Rightarrow> 'c, ('a, 'm) Group_scheme, 'a \\<Rightarrow> 'b] \\<Rightarrow> 'a \\<Rightarrow> 'c\"\n    (\"(3_ \\<circ>\\<^bsub>_\\<^esub> _)\" [88, 88, 89]88) where\n  \"g \\<circ>\\<^bsub>F\\<^esub> f == cmpghom F g f\""], ["", "lemma Group_Ugp:\"Ugp G \\<Longrightarrow> Group G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ugp G \\<Longrightarrow> Group G", "by (simp add:Ugp_def)"], ["", "lemma (in Group) r_mult_in_sg:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> carrier G; x \\<cdot> a \\<in> H\\<rbrakk>\n                              \\<Longrightarrow> \\<exists>h \\<in> H. h \\<cdot> (\\<rho> a) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; x \\<in> carrier G;\n     x \\<cdot> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<exists>h\\<in>H. h \\<cdot> \\<rho> a = x", "apply (frule inEx[of \"x \\<cdot> a\" \"H\"],\n       erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        x \\<in> carrier G; x \\<cdot> a \\<in> H; y \\<in> H;\n        y = x \\<cdot> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>H. h \\<cdot> \\<rho> a = x", "apply (rotate_tac -1, frule sym, thin_tac \"y = x \\<cdot> a\",\n       frule_tac h = y in sg_subset_elem[of \"H\"], assumption+,\n       frule_tac b1 = y in sol_eq_r[THEN sym, of \"a\" _ \"x\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        x \\<in> carrier G; x \\<cdot> a \\<in> H; y \\<in> H; x \\<cdot> a = y;\n        y \\<in> carrier G; y \\<cdot> \\<rho> a = x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>H. h \\<cdot> \\<rho> a = x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) r_unit_sg:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> h \\<cdot> \\<one> = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> h \\<cdot> \\<one> = h", "by (frule sg_subset_elem [of \"H\" \"h\"], assumption,\n       simp add:r_unit)"], ["", "lemma (in Group) sg_l_unit:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> \\<one> \\<cdot> h = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<one> \\<cdot> h = h", "by (frule sg_subset_elem [of \"H\" \"h\"], assumption+, simp add:l_unit)"], ["", "lemma (in Group) sg_l_i:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H \\<rbrakk> \\<Longrightarrow> (\\<rho> x) \\<cdot> x = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> x \\<cdot> x = \\<one>", "by (frule sg_subset_elem[of \"H\" \"x\"], assumption+,\n       simp add:l_i)"], ["", "lemma (in Group) sg_tassoc:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H; y \\<in> H; z \\<in> H\\<rbrakk> \\<Longrightarrow>\n                  x \\<cdot> y \\<cdot> z = x \\<cdot> (y \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> H; y \\<in> H;\n     z \\<in> H\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<cdot> z = x \\<cdot> (y \\<cdot> z)", "apply (frule sg_subset_elem[of \"H\" \"x\"], assumption+,\n       frule sg_subset_elem[of \"H\" \"y\"], assumption+,\n       frule sg_subset_elem[of \"H\" \"z\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> H; y \\<in> H; z \\<in> H;\n     x \\<in> carrier G; y \\<in> carrier G; z \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<cdot> z = x \\<cdot> (y \\<cdot> z)", "apply (simp add:tassoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sg_condition:\"\\<lbrakk>H \\<subseteq> carrier G; H \\<noteq> {};\n       \\<forall>a. \\<forall>b. a \\<in> H \\<and> b \\<in> H \\<longrightarrow>  a \\<cdot> (\\<rho> b) \\<in> H\\<rbrakk> \\<Longrightarrow> G \\<guillemotright> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<subseteq> carrier G; H \\<noteq> {};\n     \\<forall>a b.\n        a \\<in> H \\<and> b \\<in> H \\<longrightarrow>\n        a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> G \\<guillemotright> H", "by (simp add:sg_def)"], ["", "definition\n  Gimage :: \"[('a, 'm) Group_scheme, ('b, 'm1) Group_scheme, 'a  \\<Rightarrow> 'b] \\<Rightarrow>\n                         ('b, 'm1) Group_scheme\" where\n  \"Gimage F G f = Gp G (f `(carrier F))\""], ["", "abbreviation\n  GIMAGE :: \"[('a, 'm) Group_scheme, ('b, 'm1) Group_scheme,\n        'a \\<Rightarrow> 'b ] \\<Rightarrow> ('b, 'm1) Group_scheme\"    (\"(3Img\\<^bsub>_,_\\<^esub> _)\" [88,88,89]88) where\n  \"Img\\<^bsub>F,G\\<^esub> f == Gimage F G f\""], ["", "lemma (in Group) Group_Gp:\"G \\<guillemotright> H \\<Longrightarrow> Group (\\<natural> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> Group (\\<natural>H)", "apply (simp add:Group_def Gp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow>\n    (\\<cdot>) \\<in> H \\<rightarrow> H \\<rightarrow> H \\<and>\n    (\\<forall>a.\n        a \\<in> H \\<longrightarrow>\n        (\\<forall>b.\n            b \\<in> H \\<longrightarrow>\n            (\\<forall>c.\n                c \\<in> H \\<longrightarrow>\n                a \\<cdot> b \\<cdot> c = a \\<cdot> (b \\<cdot> c)))) \\<and>\n    iop G \\<in> H \\<rightarrow> H \\<and>\n    (\\<forall>a.\n        a \\<in> H \\<longrightarrow> \\<rho> a \\<cdot> a = \\<one>) \\<and>\n    \\<one> \\<in> H \\<and>\n    (\\<forall>a. a \\<in> H \\<longrightarrow> \\<one> \\<cdot> a = a)", "apply (simp add:sg_tassoc sg_l_i sg_unit_closed sg_l_unit\n         sg_mult_closed sg_i_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Gp_carrier:\"G \\<guillemotright> H \\<Longrightarrow> carrier (Gp G H) = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> carrier (\\<natural>H) = H", "by (simp add:Gp_def)"], ["", "lemma (in Group) sg_sg:\"\\<lbrakk>G \\<guillemotright> K; G \\<guillemotright> H; H \\<subseteq> K\\<rbrakk> \\<Longrightarrow> Gp G K \\<guillemotright> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> K ; G \\<guillemotright> H ;\n     H \\<subseteq> K\\<rbrakk>\n    \\<Longrightarrow> \\<natural>K \\<guillemotright> H", "apply (simp add:sg_def [of \"Gp G K\" \"H\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> K ; G \\<guillemotright> H ;\n     H \\<subseteq> K\\<rbrakk>\n    \\<Longrightarrow> H \\<noteq> {} \\<and>\n                      H \\<subseteq> carrier (\\<natural>K) \\<and>\n                      (\\<forall>a\\<in>H.\n                          \\<forall>b\\<in>H.\n                             a \\<cdot>\\<^bsub>\\<natural>K\\<^esub>\n                             \\<rho>\\<^bsub>\\<natural>K\\<^esub> b\n                             \\<in> H)", "apply (rule conjI, simp add:sg_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> K ; G \\<guillemotright> H ;\n     H \\<subseteq> K\\<rbrakk>\n    \\<Longrightarrow> H \\<subseteq> carrier (\\<natural>K) \\<and>\n                      (\\<forall>a\\<in>H.\n                          \\<forall>b\\<in>H.\n                             a \\<cdot>\\<^bsub>\\<natural>K\\<^esub>\n                             \\<rho>\\<^bsub>\\<natural>K\\<^esub> b\n                             \\<in> H)", "apply (simp add:Gp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> K ; G \\<guillemotright> H ;\n     H \\<subseteq> K\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>H.\n                         \\<forall>b\\<in>H. a \\<cdot> \\<rho> b \\<in> H", "apply ((rule ballI)+, simp add:sg_m_i_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) sg_subset_of_subG:\"\\<lbrakk>G \\<guillemotright> K; Gp G K \\<guillemotright> H\\<rbrakk> \\<Longrightarrow> H \\<subseteq> K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> K ;\n     \\<natural>K \\<guillemotright> H \\<rbrakk>\n    \\<Longrightarrow> H \\<subseteq> K", "by (simp add:sg_def[of \"\\<natural> K\"], simp add:Gp_def)"], ["", "lemma const_ghom:\"\\<lbrakk>Group F; Group G\\<rbrakk> \\<Longrightarrow> 1\\<^bsub>F,G\\<^esub> \\<in> gHom F G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Group F; Group G\\<rbrakk>\n    \\<Longrightarrow> 1\\<^bsub>F,G\\<^esub> \\<in> gHom F G", "apply (simp add:gHom_def constghom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Group F; Group G\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>carrier F. \\<one>\\<^bsub>G\\<^esub>)\n                      \\<in> carrier F \\<rightarrow> carrier G \\<and>\n                      (\\<forall>x\\<in>carrier F.\n                          \\<forall>y\\<in>carrier F.\n                             (x \\<cdot>\\<^bsub>F\\<^esub> y\n                              \\<in> carrier F \\<longrightarrow>\n                              \\<one>\\<^bsub>G\\<^esub> =\n                              \\<one>\\<^bsub>G\\<^esub> \\<cdot>\\<^bsub>G\\<^esub>\n                              \\<one>\\<^bsub>G\\<^esub>) \\<and>\n                             (x \\<cdot>\\<^bsub>F\\<^esub> y\n                              \\<notin> carrier F \\<longrightarrow>\n                              undefined =\n                              \\<one>\\<^bsub>G\\<^esub> \\<cdot>\\<^bsub>G\\<^esub>\n                              \\<one>\\<^bsub>G\\<^esub>))", "apply (simp add:Pi_def Group.unit_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Group F; Group G\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier F.\n                         \\<forall>y\\<in>carrier F.\n                            (x \\<cdot>\\<^bsub>F\\<^esub> y\n                             \\<in> carrier F \\<longrightarrow>\n                             \\<one>\\<^bsub>G\\<^esub> =\n                             \\<one>\\<^bsub>G\\<^esub> \\<cdot>\\<^bsub>G\\<^esub>\n                             \\<one>\\<^bsub>G\\<^esub>) \\<and>\n                            (x \\<cdot>\\<^bsub>F\\<^esub> y\n                             \\<notin> carrier F \\<longrightarrow>\n                             undefined =\n                             \\<one>\\<^bsub>G\\<^esub> \\<cdot>\\<^bsub>G\\<^esub>\n                             \\<one>\\<^bsub>G\\<^esub>)", "apply ((rule ballI)+, \n       cut_tac Group.unit_closed[of \"G\"],\n       simp add:Group.mult_closed Group.l_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Group F; Group G; x \\<in> carrier F;\n        y \\<in> carrier F\\<rbrakk>\n       \\<Longrightarrow> Group G", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) const_gbij:\"gbij\\<^bsub>(\\<natural> {\\<one>}),(\\<natural> {\\<one>})\\<^esub> (1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gbij\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub> (1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>)", "apply (cut_tac special_sg_e,\n       frule Group_Gp[of \"{\\<one>}\"],\n       frule const_ghom[of \"\\<natural> {\\<one>}\" \"\\<natural> {\\<one>}\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> {\\<one>} ; Group (\\<natural>{\\<one>});\n     1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>\n     \\<in> gHom (\\<natural>{\\<one>}) (\\<natural>{\\<one>})\\<rbrakk>\n    \\<Longrightarrow> gbij\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub> (1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>)", "apply (simp add:gbijec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> {\\<one>} ; Group (\\<natural>{\\<one>});\n     1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>\n     \\<in> gHom (\\<natural>{\\<one>}) (\\<natural>{\\<one>})\\<rbrakk>\n    \\<Longrightarrow> gsurj\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub> (1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>) \\<and>\n                      ginj\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub> (1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>)", "apply (rule conjI, simp add:gsurjec_def,\n       simp add:surj_to_def Gp_def constghom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> {\\<one>} ; Group (\\<natural>{\\<one>});\n     1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>\n     \\<in> gHom (\\<natural>{\\<one>}) (\\<natural>{\\<one>})\\<rbrakk>\n    \\<Longrightarrow> ginj\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub> (1\\<^bsub>(\\<natural>{\\<one>}),(\\<natural>{\\<one>})\\<^esub>)", "apply (simp add:ginjec_def inj_on_def Gp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) unit_Groups_isom:\" (\\<natural> {\\<one>}) \\<cong> (\\<natural> {\\<one>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<natural>{\\<one>}) \\<cong> (\\<natural>{\\<one>})", "apply (unfold isomorphic_def,\n       cut_tac const_gbij, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ugp_const_gHom:\"\\<lbrakk>Ugp G; Ugp E\\<rbrakk> \\<Longrightarrow> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>) \\<in> gHom G E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                      \\<in> gHom G E", "apply (simp add:gHom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                      \\<in> carrier G \\<rightarrow> carrier E \\<and>\n                      (\\<forall>x\\<in>carrier G.\n                          \\<forall>y\\<in>carrier G.\n                             (x \\<cdot>\\<^bsub>G\\<^esub> y\n                              \\<in> carrier G \\<longrightarrow>\n                              \\<one>\\<^bsub>E\\<^esub> =\n                              \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                              \\<one>\\<^bsub>E\\<^esub>) \\<and>\n                             (x \\<cdot>\\<^bsub>G\\<^esub> y\n                              \\<notin> carrier G \\<longrightarrow>\n                              undefined =\n                              \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                              \\<one>\\<^bsub>E\\<^esub>))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                      \\<in> carrier G \\<rightarrow> carrier E\n 2. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier G.\n                         \\<forall>y\\<in>carrier G.\n                            (x \\<cdot>\\<^bsub>G\\<^esub> y\n                             \\<in> carrier G \\<longrightarrow>\n                             \\<one>\\<^bsub>E\\<^esub> =\n                             \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                             \\<one>\\<^bsub>E\\<^esub>) \\<and>\n                            (x \\<cdot>\\<^bsub>G\\<^esub> y\n                             \\<notin> carrier G \\<longrightarrow>\n                             undefined =\n                             \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                             \\<one>\\<^bsub>E\\<^esub>)", "apply (rule Pi_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Ugp G; Ugp E; x \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                          x\n                         \\<in> carrier E\n 2. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier G.\n                         \\<forall>y\\<in>carrier G.\n                            (x \\<cdot>\\<^bsub>G\\<^esub> y\n                             \\<in> carrier G \\<longrightarrow>\n                             \\<one>\\<^bsub>E\\<^esub> =\n                             \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                             \\<one>\\<^bsub>E\\<^esub>) \\<and>\n                            (x \\<cdot>\\<^bsub>G\\<^esub> y\n                             \\<notin> carrier G \\<longrightarrow>\n                             undefined =\n                             \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                             \\<one>\\<^bsub>E\\<^esub>)", "apply (simp add:Group.unit_closed[of \"E\"] Ugp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier G.\n                         \\<forall>y\\<in>carrier G.\n                            (x \\<cdot>\\<^bsub>G\\<^esub> y\n                             \\<in> carrier G \\<longrightarrow>\n                             \\<one>\\<^bsub>E\\<^esub> =\n                             \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                             \\<one>\\<^bsub>E\\<^esub>) \\<and>\n                            (x \\<cdot>\\<^bsub>G\\<^esub> y\n                             \\<notin> carrier G \\<longrightarrow>\n                             undefined =\n                             \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                             \\<one>\\<^bsub>E\\<^esub>)", "apply (simp add:Ugp_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Group G; carrier G = {\\<one>\\<^bsub>G\\<^esub>}; Group E;\n     carrier E = {\\<one>\\<^bsub>E\\<^esub>}\\<rbrakk>\n    \\<Longrightarrow> (\\<one>\\<^bsub>G\\<^esub> \\<cdot>\\<^bsub>G\\<^esub>\n                       \\<one>\\<^bsub>G\\<^esub> =\n                       \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow>\n                       \\<one>\\<^bsub>E\\<^esub> =\n                       \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                       \\<one>\\<^bsub>E\\<^esub>) \\<and>\n                      (\\<one>\\<^bsub>G\\<^esub> \\<cdot>\\<^bsub>G\\<^esub>\n                       \\<one>\\<^bsub>G\\<^esub> \\<noteq>\n                       \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow>\n                       undefined =\n                       \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                       \\<one>\\<^bsub>E\\<^esub>)", "apply (cut_tac Group.unit_closed[of \"G\"], cut_tac Group.unit_closed[of \"E\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Group G; carrier G = {\\<one>\\<^bsub>G\\<^esub>}; Group E;\n     carrier E = {\\<one>\\<^bsub>E\\<^esub>};\n     \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G;\n     \\<one>\\<^bsub>E\\<^esub> \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> (\\<one>\\<^bsub>G\\<^esub> \\<cdot>\\<^bsub>G\\<^esub>\n                       \\<one>\\<^bsub>G\\<^esub> =\n                       \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow>\n                       \\<one>\\<^bsub>E\\<^esub> =\n                       \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                       \\<one>\\<^bsub>E\\<^esub>) \\<and>\n                      (\\<one>\\<^bsub>G\\<^esub> \\<cdot>\\<^bsub>G\\<^esub>\n                       \\<one>\\<^bsub>G\\<^esub> \\<noteq>\n                       \\<one>\\<^bsub>G\\<^esub> \\<longrightarrow>\n                       undefined =\n                       \\<one>\\<^bsub>E\\<^esub> \\<cdot>\\<^bsub>E\\<^esub>\n                       \\<one>\\<^bsub>E\\<^esub>)\n 2. \\<lbrakk>Group G; carrier G = {\\<one>\\<^bsub>G\\<^esub>}; Group E;\n     carrier E = {\\<one>\\<^bsub>E\\<^esub>};\n     \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> Group E\n 3. \\<lbrakk>Group G; carrier G = {\\<one>\\<^bsub>G\\<^esub>}; Group E;\n     carrier E = {\\<one>\\<^bsub>E\\<^esub>}\\<rbrakk>\n    \\<Longrightarrow> Group G", "apply (simp add:Group.l_unit)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Group G; carrier G = {\\<one>\\<^bsub>G\\<^esub>}; Group E;\n     carrier E = {\\<one>\\<^bsub>E\\<^esub>};\n     \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> Group E\n 2. \\<lbrakk>Group G; carrier G = {\\<one>\\<^bsub>G\\<^esub>}; Group E;\n     carrier E = {\\<one>\\<^bsub>E\\<^esub>}\\<rbrakk>\n    \\<Longrightarrow> Group G", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ugp_const_gbij:\"\\<lbrakk>Ugp G; Ugp E\\<rbrakk> \\<Longrightarrow> gbij\\<^bsub>G,E\\<^esub> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> gbij\\<^bsub>G,E\\<^esub> (\\<lambda>x\\<in>carrier G.\n            \\<one>\\<^bsub>E\\<^esub>)", "apply (simp add:gbijec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> gsurj\\<^bsub>G,E\\<^esub> (\\<lambda>x\\<in>carrier G.\n             \\<one>\\<^bsub>E\\<^esub>) \\<and>\n                      ginj\\<^bsub>G,E\\<^esub> (\\<lambda>x\\<in>carrier G.\n            \\<one>\\<^bsub>E\\<^esub>)", "apply (simp add:gsurjec_def ginjec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                      \\<in> gHom G E \\<and>\n                      surj_to\n                       (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                       (carrier G) (carrier E) \\<and>\n                      (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                      \\<in> gHom G E \\<and>\n                      inj_on (\\<lambda>x. \\<one>\\<^bsub>E\\<^esub>)\n                       (carrier G)", "apply (simp add:Ugp_const_gHom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                       (carrier G) (carrier E) \\<and>\n                      inj_on (\\<lambda>x. \\<one>\\<^bsub>E\\<^esub>)\n                       (carrier G)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> surj_to\n                       (\\<lambda>x\\<in>carrier G. \\<one>\\<^bsub>E\\<^esub>)\n                       (carrier G) (carrier E)\n 2. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> inj_on (\\<lambda>x. \\<one>\\<^bsub>E\\<^esub>)\n                       (carrier G)", "apply (simp add:surj_to_def, simp add:Ugp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> inj_on (\\<lambda>x. \\<one>\\<^bsub>E\\<^esub>)\n                       (carrier G)", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier G.\n                         \\<forall>y\\<in>carrier G. x = y", "apply ((rule ballI)+, simp add:Ugp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ugps_isomorphic:\"\\<lbrakk>Ugp G; Ugp E\\<rbrakk> \\<Longrightarrow> G \\<cong> E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk> \\<Longrightarrow> G \\<cong> E", "apply (simp add:isomorphic_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f. gbij\\<^bsub>G,E\\<^esub> f", "apply (frule_tac Ugp_const_gbij[of \"G\" \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ugp G; Ugp E;\n     gbij\\<^bsub>G,E\\<^esub> (\\<lambda>x\\<in>carrier G.\n                                 \\<one>\\<^bsub>E\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f. gbij\\<^bsub>G,E\\<^esub> f", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Gp_mult_induced:\"\\<lbrakk>G \\<guillemotright> L; a \\<in> L; b \\<in> L\\<rbrakk>  \\<Longrightarrow>  \n                          a \\<cdot>\\<^bsub>(Gp G L)\\<^esub> b = a \\<cdot> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> L ; a \\<in> L; b \\<in> L\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot>\\<^bsub>\\<natural>L\\<^esub> b = a \\<cdot> b", "by (simp add:Gp_def)"], ["", "lemma (in Group) sg_i_induced:\"\\<lbrakk>G \\<guillemotright> L; a \\<in> L\\<rbrakk>  \\<Longrightarrow> \\<rho>\\<^bsub>(Gp G L)\\<^esub> a = \\<rho> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> L ; a \\<in> L\\<rbrakk>\n    \\<Longrightarrow> \\<rho>\\<^bsub>\\<natural>L\\<^esub> a = \\<rho> a", "by (simp add:Gp_def)"], ["", "lemma (in Group) Gp_mult_induced1:\"\\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K; a \\<in> H \\<inter> K; b \\<in> H \\<inter> K\\<rbrakk> \n          \\<Longrightarrow> a \\<cdot>\\<^bsub>\\<natural>(H \\<inter> K)\\<^esub> b = a \\<cdot>\\<^bsub>(\\<natural>H)\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     a \\<in> H \\<inter> K; b \\<in> H \\<inter> K\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot>\\<^bsub>\\<natural>H \\<inter> K\\<^esub> b =\n                      a \\<cdot>\\<^bsub>\\<natural>H\\<^esub> b", "by (simp add:Gp_def)"], ["", "lemma (in Group) Gp_mult_induced2:\"\\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K; a \\<in> H \\<inter> K; b \\<in> H \\<inter> K\\<rbrakk> \n          \\<Longrightarrow> a \\<cdot>\\<^bsub>\\<natural>(H \\<inter> K)\\<^esub> b = a \\<cdot>\\<^bsub>(\\<natural>K)\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     a \\<in> H \\<inter> K; b \\<in> H \\<inter> K\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot>\\<^bsub>\\<natural>H \\<inter> K\\<^esub> b =\n                      a \\<cdot>\\<^bsub>\\<natural>K\\<^esub> b", "by (simp add:Gp_def)"], ["", "lemma (in Group) sg_i_induced1:\"\\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K; a \\<in> H \\<inter> K\\<rbrakk> \n                                     \\<Longrightarrow>  \\<rho>\\<^bsub>\\<natural>(H \\<inter> K)\\<^esub> a = \\<rho>\\<^bsub>(\\<natural>H)\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     a \\<in> H \\<inter> K\\<rbrakk>\n    \\<Longrightarrow> \\<rho>\\<^bsub>\\<natural>H \\<inter> K\\<^esub> a =\n                      \\<rho>\\<^bsub>\\<natural>H\\<^esub> a", "by (simp add:Gp_def)"], ["", "lemma (in Group) sg_i_induced2:\"\\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K; a \\<in> H \\<inter> K\\<rbrakk> \n          \\<Longrightarrow>  \\<rho>\\<^bsub>\\<natural>(H \\<inter> K)\\<^esub> a = \\<rho>\\<^bsub>\\<natural>K\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     a \\<in> H \\<inter> K\\<rbrakk>\n    \\<Longrightarrow> \\<rho>\\<^bsub>\\<natural>H \\<inter> K\\<^esub> a =\n                      \\<rho>\\<^bsub>\\<natural>K\\<^esub> a", "by (simp add:Gp_def)"], ["", "lemma (in Group) subg_sg_sg:\"\\<lbrakk>G \\<guillemotright> K; (Gp G K) \\<guillemotright> H \\<rbrakk> \\<Longrightarrow> G \\<guillemotright> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> K ;\n     \\<natural>K \\<guillemotright> H \\<rbrakk>\n    \\<Longrightarrow> G \\<guillemotright> H", "apply (frule sg_subset_of_subG[of \"K\" \"H\"], assumption+,\n       simp add:sg_def [of _ \"H\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> K ;\n     H \\<noteq> {} \\<and>\n     H \\<subseteq> carrier (\\<natural>K) \\<and>\n     (\\<forall>a\\<in>H.\n         \\<forall>b\\<in>H.\n            a \\<cdot>\\<^bsub>\\<natural>K\\<^esub>\n            \\<rho>\\<^bsub>\\<natural>K\\<^esub> b\n            \\<in> H);\n     H \\<subseteq> K\\<rbrakk>\n    \\<Longrightarrow> H \\<subseteq> carrier G \\<and>\n                      (\\<forall>a\\<in>H.\n                          \\<forall>b\\<in>H. a \\<cdot> \\<rho> b \\<in> H)", "apply (simp add:Gp_def[of _ \"K\"],\n       frule sg_subset[of \"K\"], simp add:subset_trans[of \"H\" \"K\" \"carrier G\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Gp_inherited:\"\\<lbrakk>G \\<guillemotright> K; G \\<guillemotright> L; K \\<subseteq> L\\<rbrakk> \\<Longrightarrow> \n                                Gp (Gp G L) K = Gp G K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> K ; G \\<guillemotright> L ;\n     K \\<subseteq> L\\<rbrakk>\n    \\<Longrightarrow> \\<natural>\\<^bsub>\\<natural>L\\<^esub>K = \\<natural>K", "by (simp add:Gp_def)"], ["", "section \"Cosets\""], ["", "(* left cosets *)"], ["", "lemma (in Group) mem_lcs:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> a \\<diamondsuit> H\\<rbrakk>  \\<Longrightarrow> \n                          x \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     x \\<in> a \\<diamondsuit> H\\<rbrakk>\n    \\<Longrightarrow> x \\<in> carrier G", "by (simp add: lcs_def, erule bexE,\n       frule_tac h = h in sg_mult_closedr[of \"H\" \"a\"], assumption+, simp)"], ["", "lemma (in Group) lcs_subset:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<diamondsuit> H \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<diamondsuit> H \\<subseteq> carrier G", "apply (simp add:lcs_def,\n       rule subsetI, simp, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        a \\<cdot> h = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier G", "apply (frule_tac h = h in sg_subset_elem[of \"H\"], assumption+,\n       frule_tac a = a and b = h in mult_closed, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        a \\<cdot> h = x; h \\<in> carrier G;\n        a \\<cdot> h \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier G", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) a_in_lcs:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<in> a \\<diamondsuit> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> a \\<diamondsuit> H", "apply (simp add: lcs_def,\n       rule bexI [of _ \"\\<one>\"],\n       subst r_unit, assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<one> \\<in> H", "apply (simp add:sg_unit_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) eq_lcs1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n         x \\<in> a \\<diamondsuit> H; a \\<diamondsuit> H = b \\<diamondsuit> H\\<rbrakk> \\<Longrightarrow>  x \\<in> b \\<diamondsuit> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     x \\<in> a \\<diamondsuit> H;\n     a \\<diamondsuit> H = b \\<diamondsuit> H\\<rbrakk>\n    \\<Longrightarrow> x \\<in> b \\<diamondsuit> H", "by simp"], ["", "lemma (in Group) eq_lcs2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                            a \\<diamondsuit> H = b \\<diamondsuit> H\\<rbrakk> \\<Longrightarrow> a \\<in> b \\<diamondsuit> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<diamondsuit> H = b \\<diamondsuit> H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> b \\<diamondsuit> H", "by (frule a_in_lcs[of \"H\" \"a\"], assumption+, simp)"], ["", "lemma (in Group) lcs_mem_ldiv:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n                                  (a \\<in> b \\<diamondsuit> H) = ((\\<rho> b) \\<cdot> a \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> (a \\<in> b \\<diamondsuit> H) =\n                      (\\<rho> b \\<cdot> a \\<in> H)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<in> b \\<diamondsuit> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> b \\<cdot> a \\<in> H\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> b \\<cdot> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> b \\<diamondsuit> H", "apply (simp add: lcs_def, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; h \\<in> H; b \\<cdot> h = a\\<rbrakk>\n       \\<Longrightarrow> \\<rho> b \\<cdot> a \\<in> H\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> b \\<cdot> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> b \\<diamondsuit> H", "apply (frule_tac x = h in sol_eq_l[of \"b\" \"a\"], assumption+,\n       simp add:sg_subset_elem[of \"H\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; h \\<in> H; b \\<cdot> h = a;\n        h = \\<rho> b \\<cdot> a\\<rbrakk>\n       \\<Longrightarrow> \\<rho> b \\<cdot> a \\<in> H\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> b \\<cdot> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> b \\<diamondsuit> H", "apply (thin_tac \"b \\<cdot> h = a\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> b \\<cdot> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> b \\<diamondsuit> H", "apply (frule_tac x = \"(\\<rho> b) \\<cdot> a\" and A = H in inEx,\n       erule bexE,\n       frule_tac h = y in sg_subset_elem[of \"H\"], assumption+,\n       frule sg_subset_elem[of \"H\" \"(\\<rho> b) \\<cdot> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; \\<rho> b \\<cdot> a \\<in> H; y \\<in> H;\n        y = \\<rho> b \\<cdot> a; y \\<in> carrier G;\n        \\<rho> b \\<cdot> a \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> a \\<in> b \\<diamondsuit> H", "apply (frule_tac a = y in l_mult_eqn[of _ \"(\\<rho> b) \\<cdot> a\" \"b\"], assumption+,\n       frule i_closed[of \"b\"],\n       thin_tac \"y = \\<rho> b \\<cdot> a\",\n       simp add:tassoc[THEN sym], simp add:r_i l_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; \\<rho> b \\<cdot> a \\<in> H; y \\<in> H;\n        y \\<in> carrier G; \\<rho> b \\<cdot> a \\<in> carrier G;\n        b \\<cdot> y = a; \\<rho> b \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> a \\<in> b \\<diamondsuit> H", "apply (rotate_tac -2, frule sym, thin_tac \"b \\<cdot> y = a\", simp add:lcs_def,\n       blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*\nlemma (in Group) lcsTr4:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n x \\<in> carrier G\\<rbrakk> \\<Longrightarrow> (i ((i a) \\<cdot> b)) \\<cdot> ((i a) \\<cdot> x) = (i b) \\<cdot> x\"\napply (frule i_closed[of \"a\"], frule i_closed[of \"b\"],\n       simp add:i_ab[of \"i a\" \"b\"])\napply (frule mult_closed[of \"i a\" \"x\"], assumption+,\n       simp add:iop_i_i,\n       simp add:tassoc[of \"i b\" \"a\" \"(i a) \\<cdot> x\"],\n       simp add:tassoc[THEN sym, of \"a\" \"i a\" \"x\"] r_i l_unit)\ndone *)"], ["", "lemma (in Group) lcsTr5:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                 (\\<rho> a) \\<cdot> b \\<in> H; x \\<in> a \\<diamondsuit> H\\<rbrakk> \\<Longrightarrow> ((\\<rho> b) \\<cdot> x) \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> a \\<cdot> b \\<in> H; x \\<in> a \\<diamondsuit> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> b \\<cdot> x \\<in> H", "apply (frule mem_lcs[of \"H\" \"a\" \"x\"], assumption+,\n       subst lcs_mem_ldiv[THEN sym, of \"H\" \"x\" \"b\"], assumption+,\n       simp add:lcs_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; \\<rho> a \\<cdot> b \\<in> H; x \\<in> carrier G;\n        h \\<in> H; a \\<cdot> h = x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>H. b \\<cdot> h = x", "apply (frule_tac h = h in sg_subset_elem[of \"H\"], assumption+,\n       frule_tac x = h in sol_eq_l[of \"a\" \"x\"], assumption+,\n       frule sg_i_m_closed[of \"H\" \"(\\<rho> a) \\<cdot> b\" \"(\\<rho> a) \\<cdot> x\"], assumption+,\n       rotate_tac -1, frule sym, thin_tac \"h = \\<rho> a \\<cdot> x\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; \\<rho> a \\<cdot> b \\<in> H; x \\<in> carrier G;\n        h \\<in> H; a \\<cdot> h = x; h \\<in> carrier G;\n        h = \\<rho> a \\<cdot> x;\n        \\<rho> (\\<rho> a \\<cdot> b) \\<cdot> (\\<rho> a \\<cdot> x)\n        \\<in> H\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>H. b \\<cdot> h = x", "apply (frule i_closed[of \"a\"],\n       simp add:i_ab iop_i_i, frule i_closed[of \"b\"],\n       simp add:tassoc[of \"\\<rho> b\" \"a\"],\n       simp add:tassoc[THEN sym, of \"a\" \"\\<rho> a\" \"x\"] r_i l_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; \\<rho> a \\<cdot> b \\<in> H; x \\<in> carrier G;\n        \\<rho> a \\<cdot> x \\<in> H; \\<rho> a \\<cdot> x \\<in> carrier G;\n        h = \\<rho> a \\<cdot> x; \\<rho> b \\<cdot> x \\<in> H;\n        \\<rho> a \\<in> carrier G; \\<rho> b \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>H. b \\<cdot> h = x", "apply (frule inEx[of \"(\\<rho> b) \\<cdot> x\"], erule bexE,\n       rotate_tac -1, frule sym, thin_tac \"y = \\<rho> b \\<cdot> x\",\n       frule_tac b = y in sol_eq_l[of \"\\<rho> b\" _ \"x\"],\n       simp add:sg_subset_elem, assumption+,\n       simp add:iop_i_i, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) lcsTr6:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                         (\\<rho> a) \\<cdot> b \\<in> H; x \\<in> a \\<diamondsuit> H\\<rbrakk> \\<Longrightarrow>  x \\<in> b \\<diamondsuit> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> a \\<cdot> b \\<in> H; x \\<in> a \\<diamondsuit> H\\<rbrakk>\n    \\<Longrightarrow> x \\<in> b \\<diamondsuit> H", "by (frule lcsTr5[of \"H\" \"a\" \"b\" \"x\"], assumption+,\n       subst lcs_mem_ldiv, assumption+, rule mem_lcs, assumption+)"], ["", "lemma (in Group) lcs_Unit1:\"G \\<guillemotright> H \\<Longrightarrow> \\<one> \\<diamondsuit> H = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> \\<one> \\<diamondsuit> H = H", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. G \\<guillemotright> H  \\<Longrightarrow>\n    \\<one> \\<diamondsuit> H \\<subseteq> H\n 2. G \\<guillemotright> H  \\<Longrightarrow>\n    H \\<subseteq> \\<one> \\<diamondsuit> H", "apply (rule subsetI, simp add:lcs_def, erule bexE,\n       frule_tac h = h in sg_subset_elem[of \"H\"], assumption+,\n       simp add:l_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow>\n    H \\<subseteq> \\<one> \\<diamondsuit> H", "apply (rule subsetI,\n       simp add:lcs_def,\n       frule_tac h = x in sg_subset_elem[of \"H\"], assumption+,\n       frule_tac a = x in l_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; x \\<in> H; x \\<in> carrier G;\n        \\<one> \\<cdot> x = x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>H. \\<one> \\<cdot> h = x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) lcs_Unit2:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> h \\<diamondsuit> H = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> h \\<diamondsuit> H = H", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> h \\<diamondsuit> H \\<subseteq> H\n 2. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<subseteq> h \\<diamondsuit> H", "apply (rule subsetI, simp add:lcs_def, erule bexE,\n       frule_tac x = h and y = ha in sg_mult_closed, assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<subseteq> h \\<diamondsuit> H", "apply (rule subsetI,\n       simp add:lcs_def,\n       rule_tac  x = \"(\\<rho> h) \\<cdot> x\" in bexI[of _ _ \"H\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; h \\<in> H; x \\<in> H\\<rbrakk>\n       \\<Longrightarrow> h \\<cdot> (\\<rho> h \\<cdot> x) = x\n 2. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; h \\<in> H; x \\<in> H\\<rbrakk>\n       \\<Longrightarrow> \\<rho> h \\<cdot> x \\<in> H", "apply (frule sg_subset_elem[of \"H\" \"h\"], assumption+,\n       frule i_closed[of \"h\"],\n       frule_tac h = x in sg_subset_elem[of \"H\"], assumption+,\n       simp add:tassoc[THEN sym, of \"h\" \"\\<rho> h\"] r_i l_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; h \\<in> H; x \\<in> H\\<rbrakk>\n       \\<Longrightarrow> \\<rho> h \\<cdot> x \\<in> H", "apply (simp add:sg_i_m_closed[of \"H\" \"h\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) lcsTr7:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G; (\\<rho> a) \\<cdot> b \\<in> H\\<rbrakk>\n                        \\<Longrightarrow> a \\<diamondsuit> H \\<subseteq>  b \\<diamondsuit> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> a \\<cdot> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<diamondsuit> H \\<subseteq> b \\<diamondsuit> H", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; \\<rho> a \\<cdot> b \\<in> H;\n        x \\<in> a \\<diamondsuit> H\\<rbrakk>\n       \\<Longrightarrow> x \\<in> b \\<diamondsuit> H", "apply (simp add:lcsTr6 [of \"H\" \"a\" \"b\" _])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) lcsTr8:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; h \\<in> H\\<rbrakk> \\<Longrightarrow> a \\<cdot> h \\<in> a \\<diamondsuit> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> h \\<in> a \\<diamondsuit> H", "apply (simp add:lcs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ha\\<in>H. a \\<cdot> ha = a \\<cdot> h", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) lcs_tool1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n      (\\<rho> a) \\<cdot> b \\<in> H\\<rbrakk> \\<Longrightarrow> (\\<rho> b) \\<cdot> a \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> a \\<cdot> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> b \\<cdot> a \\<in> H", "by (frule sg_i_closed [of \"H\" \"(\\<rho> a) \\<cdot> b\"], assumption+,\n       frule i_closed[of \"a\"], simp add:i_ab iop_i_i)"], ["", "theorem (in Group) lcs_eq:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n           ((\\<rho> a) \\<cdot> b \\<in> H) = (a \\<diamondsuit> H = b \\<diamondsuit> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> (\\<rho> a \\<cdot> b \\<in> H) =\n                      (a \\<diamondsuit> H = b \\<diamondsuit> H)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     \\<rho> a \\<cdot> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<diamondsuit> H = b \\<diamondsuit> H\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<diamondsuit> H = b \\<diamondsuit> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> b \\<in> H", "apply ((rule equalityI),\n        (rule lcsTr7 [of \"H\" \"a\" \"b\"], assumption+),\n        (frule lcs_tool1 [of \"H\" \"a\" \"b\"], assumption+),\n        (rule lcsTr7 [of \"H\" \"b\" \"a\"], assumption+))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<diamondsuit> H = b \\<diamondsuit> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> b \\<in> H", "apply (subst lcs_mem_ldiv[THEN sym, of \"H\" \"b\" \"a\"], assumption+,\n       simp add:a_in_lcs[of \"H\" \"b\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_subset:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> H \\<bullet> a \\<subseteq> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a \\<subseteq> carrier G", "apply (rule subsetI,\n       simp add:rcs_def, erule bexE,\n       frule_tac h = h in sg_mult_closedl[of \"H\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        h \\<cdot> a = x; h \\<cdot> a \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier G", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) mem_rcs:\"\\<lbrakk>G \\<guillemotright> H; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow> \\<exists>h\\<in>H. h \\<cdot> a = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; x \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>h\\<in>H. h \\<cdot> a = x", "by (simp add:rcs_def)"], ["", "lemma (in Group) rcs_subset_elem:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> H \\<bullet> a\\<rbrakk>  \\<Longrightarrow> \n                                                        x \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     x \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> x \\<in> carrier G", "apply (simp add:rcs_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        h \\<cdot> a = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier G", "apply (frule_tac h = h in sg_mult_closedl[of \"H\" \"a\"], assumption+,\n       simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_in_set_rcs:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n          H \\<bullet> a \\<in> set_rcs G H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a \\<in> set_rcs G H", "apply (simp add:set_rcs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa\\<in>carrier G.\n                         H \\<bullet> a = H \\<bullet> aa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcsTr0:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                         H \\<bullet> (a \\<cdot> b) \\<in> set_rcs G H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> (a \\<cdot> b) \\<in> set_rcs G H", "apply (rule rcs_in_set_rcs [of \"H\" \"a \\<cdot> b\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<in> carrier G", "apply (simp add:mult_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) a_in_rcs:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<in> H \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<in> H \\<bullet> a", "apply (simp add: rcs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<exists>h\\<in>H. h \\<cdot> a = a", "apply (frule l_unit[of \"a\"],\n       frule sg_unit_closed[of \"H\"], blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_nonempty:\"\\<lbrakk>G \\<guillemotright> H; X \\<in> set_rcs G H\\<rbrakk> \\<Longrightarrow> X \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; X \\<in> set_rcs G H\\<rbrakk>\n    \\<Longrightarrow> X \\<noteq> {}", "apply (simp add:set_rcs_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        X = H \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> X \\<noteq> {}", "apply (frule_tac a = a in a_in_rcs[of \"H\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        X = H \\<bullet> a; a \\<in> H \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> H \\<bullet> a \\<noteq> {}", "apply (simp add:nonempty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_tool0:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n      a \\<cdot> (\\<rho> b) \\<in> H\\<rbrakk> \\<Longrightarrow> b \\<cdot> (\\<rho> a) \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> \\<rho> a \\<in> H", "by (frule sg_i_closed [of \"H\" \"a \\<cdot> ( \\<rho> b)\"], assumption+,\n       frule i_closed[of \"b\"], simp add:i_ab iop_i_i)"], ["", "lemma (in Group) rcsTr1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n         x \\<in> H \\<bullet> a; H \\<bullet> a = H \\<bullet> b\\<rbrakk> \\<Longrightarrow> x \\<in> H \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     x \\<in> H \\<bullet> a; H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> x \\<in> H \\<bullet> b", "by simp"], ["", "lemma (in Group) rcs_eqTr:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                             H \\<bullet> a = H \\<bullet> b\\<rbrakk> \\<Longrightarrow> a \\<in> H \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> a \\<in> H \\<bullet> b", "apply (rule rcsTr1, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> a \\<in> H \\<bullet> a\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a = H \\<bullet> b", "apply (rule a_in_rcs, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_eqTr1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n           (a \\<in> H \\<bullet> b) =  (a \\<cdot> (\\<rho> b) \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> (a \\<in> H \\<bullet> b) = (a \\<cdot> \\<rho> b \\<in> H)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<in> H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> b \\<in> H\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> H \\<bullet> b", "apply (simp add:rcs_def, erule bexE,\n       frule_tac h = h in sg_subset_elem[of \"H\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; h \\<in> H; h \\<cdot> b = a;\n        h \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> \\<rho> b \\<in> H\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> H \\<bullet> b", "apply (frule_tac x = h in sol_eq_r[of \"b\" \"a\" _], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> H \\<bullet> b", "apply (frule inEx[of \"a \\<cdot> (\\<rho> b)\" \"H\"], erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; a \\<cdot> \\<rho> b \\<in> H; y \\<in> H;\n        y = a \\<cdot> \\<rho> b\\<rbrakk>\n       \\<Longrightarrow> a \\<in> H \\<bullet> b", "apply (frule_tac h = y in sg_subset_elem[of \"H\"], assumption+,\n       frule i_closed[of \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; a \\<cdot> \\<rho> b \\<in> H; y \\<in> H;\n        y = a \\<cdot> \\<rho> b; y \\<in> carrier G;\n        \\<rho> b \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> a \\<in> H \\<bullet> b", "apply (rotate_tac -3, frule sym, thin_tac \"y = a \\<cdot> \\<rho> b\",\n       frule_tac b = y in sol_eq_r[of \"\\<rho> b\" _ \"a\"], assumption+,\n       simp add:iop_i_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> carrier G; \\<rho> b \\<in> carrier G;\n        G \\<guillemotright> H ; y \\<cdot> b \\<in> carrier G;\n        b \\<in> carrier G; y \\<in> H; y \\<cdot> b \\<cdot> \\<rho> b = y;\n        a = y \\<cdot> b\\<rbrakk>\n       \\<Longrightarrow> y \\<cdot> b \\<in> H \\<bullet> b", "apply (simp add:rcs_def, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcsTr2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> H \\<bullet> (\\<rho> a)\\<rbrakk> \\<Longrightarrow> \n                          b \\<cdot> a \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     b \\<in> H \\<bullet> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> a \\<in> H", "apply (frule i_closed[of \"a\"],\n       frule_tac rcs_subset_elem[of \"H\" \"\\<rho> a\" \"b\"], assumption+,\n       frule rcs_eqTr1[of \"H\" \"b\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     b \\<in> H \\<bullet> \\<rho> a; \\<rho> a \\<in> carrier G;\n     b \\<in> carrier G;\n     (b \\<in> H \\<bullet> \\<rho> a) =\n     (b \\<cdot> \\<rho> (\\<rho> a) \\<in> H)\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> a \\<in> H", "apply (simp add:iop_i_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcsTr5:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n       b \\<cdot> (\\<rho> a) \\<in> H; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow> x \\<cdot> (\\<rho> b) \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H; x \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> \\<rho> b \\<in> H", "apply (frule rcs_subset_elem[of \"H\" \"a\" \"x\"], assumption+,\n       simp add:rcs_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; b \\<cdot> \\<rho> a \\<in> H; x \\<in> carrier G;\n        h \\<in> H; h \\<cdot> a = x\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> \\<rho> b \\<in> H", "apply (frule_tac h = h in sg_subset_elem[of \"H\"], assumption,\n       frule_tac a = h and b = a in mult_closed, assumption+,\n       frule i_closed[of \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; b \\<cdot> \\<rho> a \\<in> H; x \\<in> carrier G;\n        h \\<in> H; h \\<cdot> a = x; h \\<in> carrier G;\n        h \\<cdot> a \\<in> carrier G; \\<rho> b \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> \\<rho> b \\<in> H", "apply (frule_tac a = \"h \\<cdot> a\" in r_mult_eqn[of _ \"x\" \"\\<rho> b\"], assumption+,\n       thin_tac \"h \\<cdot> a = x\",\n       simp add:tassoc[of _ \"a\" \"\\<rho> b\"],\n       frule_tac x = h in sg_mult_closed[of \"H\" _ \"a \\<cdot> (\\<rho> b)\"], assumption+,\n       rule rcs_tool0[of \"H\" \"b\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; b \\<cdot> \\<rho> a \\<in> H; x \\<in> carrier G;\n        h \\<in> H; h \\<in> carrier G; h \\<cdot> a \\<in> carrier G;\n        \\<rho> b \\<in> carrier G;\n        h \\<cdot> (a \\<cdot> \\<rho> b) = x \\<cdot> \\<rho> b;\n        h \\<cdot> (a \\<cdot> \\<rho> b) \\<in> H\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> \\<rho> b \\<in> H", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcsTr6:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G;\n                  b \\<cdot> (\\<rho> a) \\<in> H ; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow> x \\<in> H \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H; x \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> x \\<in> H \\<bullet> b", "apply (frule  rcsTr5 [of \"H\" \"a\" \"b\" \"x\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H; x \\<in> H \\<bullet> a;\n     x \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> x \\<in> H \\<bullet> b", "apply (subst rcs_eqTr1[of \"H\" \"x\" \"b\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H; x \\<in> H \\<bullet> a;\n     x \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> x \\<in> carrier G\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H; x \\<in> H \\<bullet> a;\n     x \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier G\n 3. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H; x \\<in> H \\<bullet> a;\n     x \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> \\<rho> b \\<in> H", "apply (rule rcs_subset_elem[of \"H\" \"a\" \"x\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_Unit1:\"G \\<guillemotright> H \\<Longrightarrow>  H \\<bullet> \\<one> = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> H \\<bullet> \\<one> = H", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. G \\<guillemotright> H  \\<Longrightarrow>\n    H \\<bullet> \\<one> \\<subseteq> H\n 2. G \\<guillemotright> H  \\<Longrightarrow>\n    H \\<subseteq> H \\<bullet> \\<one>", "apply (rule subsetI,\n       simp add:rcs_def, erule bexE,\n       frule_tac h = h in sg_subset_elem[of \"H\"], assumption+,\n       simp add:r_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow>\n    H \\<subseteq> H \\<bullet> \\<one>", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; x \\<in> H\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H \\<bullet> \\<one>", "apply (simp add:rcs_def,\n       frule_tac h = x in sg_subset_elem[of \"H\"], assumption+,\n       frule_tac a = x in r_unit, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) unit_rcs_in_set_rcs:\"G \\<guillemotright> H \\<Longrightarrow> H \\<in> set_rcs G H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> H \\<in> set_rcs G H", "apply (cut_tac unit_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; \\<one> \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> H \\<in> set_rcs G H", "apply (frule rcs_in_set_rcs[of \"H\" \"\\<one>\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; \\<one> \\<in> carrier G;\n     H \\<bullet> \\<one> \\<in> set_rcs G H\\<rbrakk>\n    \\<Longrightarrow> H \\<in> set_rcs G H", "apply (simp add:rcs_Unit1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_Unit2:\"\\<lbrakk>G \\<guillemotright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> H \\<bullet> h = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> h = H", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> h \\<subseteq> H\n 2. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<subseteq> H \\<bullet> h", "apply (rule subsetI,\n        simp add:rcs_def, erule bexE,\n        frule_tac x = ha and y = h in sg_mult_closed[of \"H\"], assumption+,\n        simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<subseteq> H \\<bullet> h", "apply (rule subsetI,\n       simp add:rcs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; h \\<in> H; x \\<in> H\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ha\\<in>H. ha \\<cdot> h = x", "apply (frule_tac h = h in sg_subset_elem[of \"H\"], assumption+,\n       frule_tac h = x in sg_subset_elem[of \"H\"], assumption+,\n       frule i_closed[of \"h\"],\n       frule_tac a = x in tassoc[of _ \"\\<rho> h\" \"h\"], assumption+,\n       simp add:l_i r_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; h \\<in> H; x \\<in> H;\n        h \\<in> carrier G; x \\<in> carrier G; \\<rho> h \\<in> carrier G;\n        x \\<cdot> \\<rho> h \\<cdot> h = x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ha\\<in>H. ha \\<cdot> h = x", "apply (frule_tac a = x in sg_m_i_closed[of \"H\" _ \"h\"], assumption+,\n       blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcsTr7:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G; b \\<cdot> (\\<rho> a) \\<in> H\\<rbrakk>\n                         \\<Longrightarrow> H \\<bullet> a  \\<subseteq>  H \\<bullet> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a \\<subseteq> H \\<bullet> b", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G; b \\<cdot> \\<rho> a \\<in> H;\n        x \\<in> H \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H \\<bullet> b", "apply (rule rcsTr6[of \"H\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_tool1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G; \n      b \\<cdot> (\\<rho> a) \\<in> H\\<rbrakk> \\<Longrightarrow>  a \\<cdot> (\\<rho> b) \\<in> H \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> b \\<in> H", "apply (frule sg_i_closed[of \"H\" \"b \\<cdot> (\\<rho> a)\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H;\n     \\<rho> (b \\<cdot> \\<rho> a) \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> b \\<in> H", "apply (frule i_closed[of \"a\"], simp add:i_ab iop_i_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_tool2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G;  x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                               \\<exists> h \\<in> H. h \\<cdot> a = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     x \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>h\\<in>H. h \\<cdot> a = x", "apply (simp add:rcs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem (in Group) rcs_eq:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                            (b \\<cdot> (\\<rho> a) \\<in> H) = (H \\<bullet> a = H \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> (b \\<cdot> \\<rho> a \\<in> H) =\n                      (H \\<bullet> a = H \\<bullet> b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a = H \\<bullet> b\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> \\<rho> a \\<in> H", "apply (rule equalityI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a \\<subseteq> H \\<bullet> b\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> b \\<subseteq> H \\<bullet> a\n 3. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> \\<rho> a \\<in> H", "apply (frule rcsTr7[of \"H\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> b \\<subseteq> H \\<bullet> a\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> \\<rho> a \\<in> H", "apply (frule rcs_tool1[of \"H\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> H; a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> b \\<subseteq> H \\<bullet> a\n 2. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> \\<rho> a \\<in> H", "apply (rule rcsTr7[of \"H\" \"b\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> \\<rho> a \\<in> H", "apply (frule a_in_rcs[of \"H\" \"a\"], assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b; a \\<in> H \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> \\<rho> a \\<in> H", "apply (simp add:rcs_eqTr1[of \"H\" \"a\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a = H \\<bullet> b; a \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> \\<rho> a \\<in> H", "apply (rule rcs_tool1, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_eq1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                                           H \\<bullet> a = H \\<bullet> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     x \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a = H \\<bullet> x", "apply (frule rcs_subset_elem[of \"H\" \"a\" \"x\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     x \\<in> H \\<bullet> a; x \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a = H \\<bullet> x", "apply (subst rcs_eq[THEN sym, of \"H\" \"a\" \"x\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     x \\<in> H \\<bullet> a; x \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> \\<rho> a \\<in> H", "apply (subst rcs_eqTr1[THEN sym, of \"H\" \"x\" \"a\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_eq2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G;  b \\<in> carrier G; \n                           (H \\<bullet> a) \\<inter> (H \\<bullet> b) \\<noteq> {}\\<rbrakk> \\<Longrightarrow> (H \\<bullet> a) = (H \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; b \\<in> carrier G;\n     H \\<bullet> a \\<inter> (H \\<bullet> b) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a = H \\<bullet> b", "apply (frule nonempty_int [of \"H \\<bullet> a\" \"H \\<bullet> b\"], erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G;\n        H \\<bullet> a \\<inter> (H \\<bullet> b) \\<noteq> {};\n        x \\<in> H \\<bullet> a \\<inter> (H \\<bullet> b)\\<rbrakk>\n       \\<Longrightarrow> H \\<bullet> a = H \\<bullet> b", "apply (simp, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G;\n        H \\<bullet> a \\<inter> (H \\<bullet> b) \\<noteq> {};\n        x \\<in> H \\<bullet> a; x \\<in> H \\<bullet> b\\<rbrakk>\n       \\<Longrightarrow> H \\<bullet> a = H \\<bullet> b", "apply (frule_tac x = x in rcs_eq1[of \"H\" \"a\"], assumption+,\n       frule_tac x = x in rcs_eq1[of \"H\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n        b \\<in> carrier G;\n        H \\<bullet> a \\<inter> (H \\<bullet> b) \\<noteq> {};\n        x \\<in> H \\<bullet> a; x \\<in> H \\<bullet> b;\n        H \\<bullet> a = H \\<bullet> x;\n        H \\<bullet> b = H \\<bullet> x\\<rbrakk>\n       \\<Longrightarrow> H \\<bullet> a = H \\<bullet> b", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_meet:\"\\<lbrakk>G \\<guillemotright> H; X \\<in> set_rcs G H; Y \\<in> set_rcs G H;\n                               X \\<inter> Y \\<noteq> {}\\<rbrakk> \\<Longrightarrow> X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; X \\<in> set_rcs G H;\n     Y \\<in> set_rcs G H; X \\<inter> Y \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> X = Y", "apply (simp add:set_rcs_def, (erule bexE)+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>G \\<guillemotright> H ;\n        H \\<bullet> a \\<inter> (H \\<bullet> aa) \\<noteq> {};\n        a \\<in> carrier G; X = H \\<bullet> a; aa \\<in> carrier G;\n        Y = H \\<bullet> aa\\<rbrakk>\n       \\<Longrightarrow> H \\<bullet> a = H \\<bullet> aa", "apply (rule_tac a = a and b = aa in rcs_eq2[of \"H\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcsTr8:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; h \\<in> H; x \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                      h \\<cdot> x \\<in> H \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n     x \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> h \\<cdot> x \\<in> H \\<bullet> a", "apply (frule rcs_subset_elem[of \"H\" \"a\" \"x\"], assumption+,\n       frule sg_subset_elem[of \"H\" \"h\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n     x \\<in> H \\<bullet> a; x \\<in> carrier G; h \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> h \\<cdot> x \\<in> H \\<bullet> a", "apply (simp add:rcs_def, erule bexE,\n       frule_tac h = ha in sg_subset_elem[of \"H\"], assumption+,\n       frule_tac a = ha and b = a in mult_closed, assumption,\n       frule_tac a = \"ha \\<cdot> a\" and b = x and c = h in l_mult_eqn, assumption+,\n       thin_tac \"ha \\<cdot> a = x\", simp add:tassoc[THEN sym, of \"h\" _ \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ha.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        x \\<in> carrier G; h \\<in> carrier G; ha \\<in> H;\n        ha \\<in> carrier G; ha \\<cdot> a \\<in> carrier G;\n        h \\<cdot> ha \\<cdot> a = h \\<cdot> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ha\\<in>H. ha \\<cdot> a = h \\<cdot> x", "apply (frule_tac x = h and y = ha in sg_mult_closed[of \"H\"], assumption+,\n       blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcsTr9:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; h \\<in> H; (\\<rho> x) \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                          h \\<cdot> (\\<rho> x) \\<in> H \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n     \\<rho> x \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> h \\<cdot> \\<rho> x \\<in> H \\<bullet> a", "by (insert rcsTr8 [of \"H\" \"a\" \"h\" \"\\<rho> x\"], simp)"], ["", "lemma (in Group) rcsTr10:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> H \\<bullet> a; y \\<in> H \\<bullet> a\\<rbrakk> \\<Longrightarrow>\n                          x \\<cdot> (\\<rho> y) \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     x \\<in> H \\<bullet> a; y \\<in> H \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> \\<rho> y \\<in> H", "apply (simp add:rcs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     \\<exists>h\\<in>H. h \\<cdot> a = x;\n     \\<exists>h\\<in>H. h \\<cdot> a = y\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> \\<rho> y \\<in> H", "apply (erule bexE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h ha.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        h \\<cdot> a = x; ha \\<in> H; ha \\<cdot> a = y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> \\<rho> y \\<in> H", "apply (rotate_tac -1, frule sym, thin_tac \"ha \\<cdot> a = y\",\n       frule sym, thin_tac \"h \\<cdot> a = x\", simp,\n       thin_tac \"y = ha \\<cdot> a\", thin_tac \"x = h \\<cdot> a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h ha.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        ha \\<in> H\\<rbrakk>\n       \\<Longrightarrow> h \\<cdot> a \\<cdot> \\<rho> (ha \\<cdot> a) \\<in> H", "apply (frule_tac h = ha in sg_subset_elem[of \"H\"], assumption+,\n       frule_tac h = h in sg_subset_elem[of \"H\"], assumption+,\n       simp add:i_ab)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h ha.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        ha \\<in> H; ha \\<in> carrier G; h \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> h \\<cdot> a \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha)\n                         \\<in> H", "apply (frule_tac a = a in i_closed, frule_tac a = ha in i_closed,\n       simp add:tOp_assocTr41[THEN sym], simp add:tOp_assocTr42,\n       simp add:r_i r_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h ha.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        ha \\<in> H; ha \\<in> carrier G; h \\<in> carrier G;\n        \\<rho> a \\<in> carrier G; \\<rho> ha \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> h \\<cdot> \\<rho> ha \\<in> H", "apply (simp add:sg_m_i_closed[of \"H\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) PrSubg4_2:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; x \\<in> H \\<bullet> (\\<rho> a)\\<rbrakk> \\<Longrightarrow> \n       x \\<in> {z. \\<exists>v\\<in>(H \\<bullet> a). \\<exists>h\\<in>H. h \\<cdot> (\\<rho> v) = z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     x \\<in> H \\<bullet> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> x \\<in> {z. \\<exists>v\\<in>H \\<bullet> a.\n                                     \\<exists>h\\<in>H.\n  h \\<cdot> \\<rho> v = z}", "apply (simp add:rcs_def[of _ \"H\" \"\\<rho> a\"], erule bexE,\n       frule_tac h = h in sg_subset_elem[of \"H\"], assumption+,\n       frule i_closed[of \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H;\n        h \\<cdot> \\<rho> a = x; h \\<in> carrier G;\n        \\<rho> a \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v\\<in>H \\<bullet> a.\n                            \\<exists>h\\<in>H. h \\<cdot> \\<rho> v = x", "apply (frule a_in_rcs[of \"H\" \"a\"], assumption, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_fixed:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; H \\<bullet> a = H\\<rbrakk>  \\<Longrightarrow> a \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G;\n     H \\<bullet> a = H\\<rbrakk>\n    \\<Longrightarrow> a \\<in> H", "by (frule a_in_rcs[of \"H\" \"a\"], assumption+, simp)"], ["", "lemma (in Group) rcs_fixed1:\"\\<lbrakk>G \\<guillemotright> H; a \\<in> carrier G; h \\<in> H\\<rbrakk> \\<Longrightarrow>\n                                               H \\<bullet> a = (H \\<bullet> (h \\<cdot> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> a = H \\<bullet> (h \\<cdot> a)", "apply (rule rcs_eq1[of \"H\" \"a\" \"h \\<cdot> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; a \\<in> carrier G; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> h \\<cdot> a \\<in> H \\<bullet> a", "apply (simp add:rcs_def, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) rcs_fixed2:\"G \\<guillemotright> H \\<Longrightarrow> \\<forall>h\\<in>H. H \\<bullet> h = H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow>\n    \\<forall>h\\<in>H. H \\<bullet> h = H", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<guillemotright> H ; h \\<in> H\\<rbrakk>\n       \\<Longrightarrow> H \\<bullet> h = H", "apply (simp add:rcs_Unit2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Gp_rcs:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K; H \\<subseteq> K; x \\<in> K\\<rbrakk> \\<Longrightarrow>\n                                   H \\<bullet>\\<^bsub>(Gp G K)\\<^esub> x = (H \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     H \\<subseteq> K; x \\<in> K\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet>\\<^bsub>\\<natural>K\\<^esub> x =\n                      H \\<bullet> x", "by (simp add:rcs_def, simp add:Gp_def)"], ["", "lemma (in Group) subg_lcs:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K; H \\<subseteq> K; x \\<in> K\\<rbrakk> \\<Longrightarrow>\n                                   x \\<diamondsuit>\\<^bsub>(Gp G K)\\<^esub> H = x \\<diamondsuit> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     H \\<subseteq> K; x \\<in> K\\<rbrakk>\n    \\<Longrightarrow> x \\<diamondsuit>\\<^bsub>\\<natural>K\\<^esub> H =\n                      x \\<diamondsuit> H", "by (simp add:lcs_def, simp add:Gp_def)"], ["", "section \"Normal subgroups and Quotient groups\""], ["", "lemma (in Group) nsg1:\"\\<lbrakk>G \\<guillemotright> H; b \\<in> carrier G; h \\<in> H;\n       \\<forall>a\\<in> carrier G. \\<forall>h\\<in>H. (a \\<cdot> h)\\<cdot> (\\<rho> a) \\<in> H\\<rbrakk> \\<Longrightarrow> b \\<cdot> h \\<cdot> (\\<rho> b) \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; b \\<in> carrier G; h \\<in> H;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> b \\<cdot> h \\<cdot> \\<rho> b \\<in> H", "by blast"], ["", "lemma (in Group) nsg2:\"\\<lbrakk>G \\<guillemotright> H; b \\<in> carrier G; h \\<in> H;  \n       \\<forall>a\\<in>carrier G. \\<forall>h\\<in>H. (a \\<cdot> h) \\<cdot> (\\<rho> a) \\<in> H\\<rbrakk> \\<Longrightarrow>  (\\<rho> b) \\<cdot> h \\<cdot> b \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; b \\<in> carrier G; h \\<in> H;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> b \\<cdot> h \\<cdot> b \\<in> H", "apply (frule i_closed[of \"b\"], \n       frule_tac x = \"\\<rho> b\" in bspec, assumption,\n       thin_tac \"\\<forall>a\\<in>carrier G. \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H\",\n       frule_tac x = h in bspec, assumption,\n       thin_tac \"\\<forall>h\\<in>H. \\<rho> b \\<cdot> h \\<cdot> \\<rho> (\\<rho> b) \\<in> H\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; b \\<in> carrier G; h \\<in> H;\n     \\<rho> b \\<in> carrier G;\n     \\<rho> b \\<cdot> h \\<cdot> \\<rho> (\\<rho> b) \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<rho> b \\<cdot> h \\<cdot> b \\<in> H", "apply (simp add:iop_i_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsg_subset_elem:\"\\<lbrakk>G \\<triangleright> H; h \\<in> H\\<rbrakk> \\<Longrightarrow> h \\<in> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> H; h \\<in> H\\<rbrakk>\n    \\<Longrightarrow> h \\<in> carrier G", "by (insert nsg_sg[of \"H\"], simp add:sg_subset_elem)"], ["", "lemma (in Group) nsg_l_rcs_eq:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow> a \\<diamondsuit> N = N \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<diamondsuit> N = N \\<bullet> a", "by (simp add: nsg_def)"], ["", "lemma (in Group) sg_nsg1:\"\\<lbrakk>G \\<guillemotright> H; \\<forall>a\\<in> carrier G. \\<forall>h\\<in>H. (a \\<cdot> h)\\<cdot> (\\<rho> a) \\<in> H;\n                 b \\<in> carrier G \\<rbrakk> \\<Longrightarrow> H \\<bullet> b =  b \\<diamondsuit> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> b = b \\<diamondsuit> H", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> b \\<subseteq> b \\<diamondsuit> H\n 2. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> b \\<diamondsuit> H \\<subseteq> H \\<bullet> b", "(* H \\<bullet> b \\<subseteq> b \\<diamondsuit> H  *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> H \\<bullet> b \\<subseteq> b \\<diamondsuit> H\n 2. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> b \\<diamondsuit> H \\<subseteq> H \\<bullet> b", "apply (rule subsetI, simp add:rcs_def, erule bexE, frule i_closed[of \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ;\n        \\<forall>a\\<in>carrier G.\n           \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n        b \\<in> carrier G; h \\<in> H; h \\<cdot> b = x;\n        \\<rho> b \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> b \\<diamondsuit> H\n 2. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> b \\<diamondsuit> H \\<subseteq> H \\<bullet> b", "apply (frule_tac x = \"\\<rho> b\" in bspec, assumption,\n         thin_tac \"\\<forall>a\\<in>carrier G. \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H\",\n         frule_tac x = h in bspec, assumption,\n         thin_tac \"\\<forall>h\\<in>H. \\<rho> b \\<cdot> h \\<cdot> \\<rho> (\\<rho> b) \\<in> H\",\n         simp add:iop_i_i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ; b \\<in> carrier G; h \\<in> H;\n        h \\<cdot> b = x; \\<rho> b \\<in> carrier G;\n        \\<rho> b \\<cdot> h \\<cdot> b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> x \\<in> b \\<diamondsuit> H\n 2. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> b \\<diamondsuit> H \\<subseteq> H \\<bullet> b", "apply (frule_tac h = h in sg_mult_closedl[of \"H\" \"b\"], assumption+, simp,\n         frule_tac h = h in sg_subset_elem[of \"H\"], assumption+,\n         simp only:tassoc[of \"\\<rho> b\" _ \"b\"], thin_tac \"h \\<cdot> b = x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ; b \\<in> carrier G; h \\<in> H;\n        \\<rho> b \\<in> carrier G; \\<rho> b \\<cdot> x \\<in> H;\n        x \\<in> carrier G; h \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> b \\<diamondsuit> H\n 2. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> b \\<diamondsuit> H \\<subseteq> H \\<bullet> b", "apply (subst lcs_mem_ldiv[of \"H\" _ \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> b \\<diamondsuit> H \\<subseteq> H \\<bullet> b", "apply (rule subsetI, simp add:lcs_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ;\n        \\<forall>a\\<in>carrier G.\n           \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H;\n        b \\<in> carrier G; h \\<in> H; b \\<cdot> h = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H \\<bullet> b", "apply (frule_tac x = b in bspec, assumption,\n         thin_tac \"\\<forall>a\\<in>carrier G. \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H\",\n         frule_tac x = h in bspec, assumption,\n         thin_tac \"\\<forall>h\\<in>H.  b \\<cdot> h \\<cdot> (\\<rho> b) \\<in> H\",\n         simp add:iop_i_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ; b \\<in> carrier G; h \\<in> H;\n        b \\<cdot> h = x; x \\<cdot> \\<rho> b \\<in> H\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H \\<bullet> b", "apply (frule_tac h = h in sg_mult_closedr[of \"H\" \"b\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h.\n       \\<lbrakk>G \\<guillemotright> H ; b \\<in> carrier G; h \\<in> H;\n        b \\<cdot> h = x; x \\<cdot> \\<rho> b \\<in> H;\n        x \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H \\<bullet> b", "apply (subst rcs_eqTr1[of \"H\" _ \"b\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) cond_nsg:\"\\<lbrakk>G \\<guillemotright> H; \\<forall>a\\<in>carrier G. \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> (\\<rho> a) \\<in> H \\<rbrakk>\n                            \\<Longrightarrow> G \\<triangleright> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> G \\<triangleright> H", "apply (subst nsg_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ;\n     \\<forall>a\\<in>carrier G.\n        \\<forall>h\\<in>H. a \\<cdot> h \\<cdot> \\<rho> a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier G.\n                         H \\<bullet> x = x \\<diamondsuit> H", "apply (rule ballI, rule sg_nsg1, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) special_nsg_e:\"G \\<guillemotright> H \\<Longrightarrow> Gp G H \\<triangleright> {\\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow>\n    \\<natural>H \\<triangleright> {\\<one>}", "apply (simp add:nsg_def,\n       frule Group_Gp[of \"H\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; Group (\\<natural>H)\\<rbrakk>\n    \\<Longrightarrow> \\<natural>H \\<guillemotright> {\\<one>}  \\<and>\n                      (\\<forall>x\\<in>carrier (\\<natural>H).\n                          {\\<one>} \\<bullet>\\<^bsub>\\<natural>H\\<^esub> x =\n                          x \\<diamondsuit>\\<^bsub>\\<natural>H\\<^esub>\n                          {\\<one>})", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<guillemotright> H ; Group (\\<natural>H)\\<rbrakk>\n    \\<Longrightarrow> \\<natural>H \\<guillemotright> {\\<one>} \n 2. \\<lbrakk>G \\<guillemotright> H ; Group (\\<natural>H)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier (\\<natural>H).\n                         {\\<one>} \\<bullet>\\<^bsub>\\<natural>H\\<^esub> x =\n                         x \\<diamondsuit>\\<^bsub>\\<natural>H\\<^esub>\n                         {\\<one>}", "apply (frule Group.special_sg_e[of \"\\<natural>H\"],\n       simp add:one_Gp_one[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; Group (\\<natural>H)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier (\\<natural>H).\n                         {\\<one>} \\<bullet>\\<^bsub>\\<natural>H\\<^esub> x =\n                         x \\<diamondsuit>\\<^bsub>\\<natural>H\\<^esub>\n                         {\\<one>}", "apply (rule ballI,\n       simp add:lcs_def rcs_def, simp add:Gp_def,\n       frule_tac h = x in sg_subset_elem[of \"H\"], assumption+,\n       simp add:l_unit r_unit)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) special_nsg_G:\"G \\<triangleright> (carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> carrier G", "apply (simp add:nsg_def,\n       simp add:special_sg_G)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>carrier G.\n       carrier G \\<bullet> x = x \\<diamondsuit> carrier G", "apply (rule ballI, rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       carrier G \\<bullet> x \\<subseteq> x \\<diamondsuit> carrier G\n 2. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<diamondsuit> carrier G \\<subseteq> carrier G \\<bullet> x", "apply (rule subsetI,\n       simp add:rcs_def lcs_def, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa h.\n       \\<lbrakk>x \\<in> carrier G; h \\<in> carrier G;\n        h \\<cdot> x = xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>carrier G. x \\<cdot> h = xa\n 2. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<diamondsuit> carrier G \\<subseteq> carrier G \\<bullet> x", "apply (frule_tac a = h and b = x in mult_closed, assumption+,\n       frule_tac a = x in i_closed,\n       frule_tac a1 = x and b1 = \"\\<rho> x\" and c1 = \"h \\<cdot> x\" in tassoc[THEN sym],\n                 assumption+, simp add:r_i l_unit,\n       frule_tac a = \"\\<rho> x\" and b = xa in mult_closed, assumption+, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<diamondsuit> carrier G \\<subseteq> carrier G \\<bullet> x", "apply (rule subsetI, simp add:rcs_def lcs_def, erule bexE,\n       frule_tac a = x and b = h in mult_closed, assumption+,\n       frule_tac a = x in i_closed,\n       frule_tac a = \"x \\<cdot> h\"  and b = \"\\<rho> x\" and c = x in tassoc,\n                 assumption+, simp add:l_i r_unit,\n       frule_tac a = xa and b = \"\\<rho> x\" in mult_closed, assumption+,\n       blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) special_nsg_G1:\"G \\<guillemotright> H \\<Longrightarrow> Gp G H \\<triangleright> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<guillemotright> H  \\<Longrightarrow> \\<natural>H \\<triangleright> H", "apply (frule Group_Gp[of \"H\"], frule Group.special_nsg_G[of \"\\<natural>H\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; Group (\\<natural>H);\n     \\<natural>H \\<triangleright> carrier (\\<natural>H)\\<rbrakk>\n    \\<Longrightarrow> \\<natural>H \\<triangleright> H", "apply (simp add:Gp_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgTr0:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; b \\<in> N \\<bullet> a \\<rbrakk>\n                        \\<Longrightarrow>  (a \\<cdot> (\\<rho> b) \\<in> N) \\<and> ((\\<rho> a) \\<cdot> b \\<in> N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<in> N \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> \\<rho> b \\<in> N \\<and>\n                      \\<rho> a \\<cdot> b \\<in> N", "apply (frule nsg_sg[of \"N\"],\n       frule rcs_eqTr1[of \"N\" \"b\" \"a\"], assumption+, simp,\n       frule i_closed[of \"a\"], \n       frule sg_i_closed[of \"N\" \"b \\<cdot> \\<rho> a\"], assumption, simp add:i_ab iop_i_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> N; G \\<guillemotright> N ;\n     b \\<in> N \\<bullet> a; \\<rho> a \\<in> carrier G;\n     a \\<cdot> \\<rho> b \\<in> N\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> b \\<in> N", "apply (simp add:nsg_l_rcs_eq[THEN sym, of \"N\" \"a\"],\n       subst lcs_mem_ldiv[THEN sym, of \"N\" \"b\" \"a\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgTr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; b \\<cdot> (\\<rho> a) \\<in> N\\<rbrakk>\n                         \\<Longrightarrow> (\\<rho> b) \\<cdot> a \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<cdot> \\<rho> a \\<in> N\\<rbrakk>\n    \\<Longrightarrow> \\<rho> b \\<cdot> a \\<in> N", "apply (frule nsg_sg[of \"N\"],\n       simp add:rcs_eqTr1[THEN sym, of \"N\" \"b\" \"a\"],\n       simp add:nsg_l_rcs_eq[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     b \\<in> a \\<diamondsuit> N; G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> \\<rho> b \\<cdot> a \\<in> N", "apply (simp add:lcs_mem_ldiv[of \"N\" \"b\" \"a\"],\n       rule lcs_tool1, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgTr2:\"\\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; a1 \\<in> carrier G; \n       b1 \\<in> carrier G \\<rbrakk> \\<Longrightarrow> (a \\<cdot> b) \\<cdot> (\\<rho> (a1 \\<cdot> b1)) = \n                          a \\<cdot> (((b \\<cdot> (\\<rho> b1)) \\<cdot> ((\\<rho> a1) \\<cdot> a)) \\<cdot> (\\<rho> a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; a1 \\<in> carrier G;\n     b1 \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) =\n                      a \\<cdot>\n                      (b \\<cdot> \\<rho> b1 \\<cdot>\n                       (\\<rho> a1 \\<cdot> a) \\<cdot>\n                       \\<rho> a)", "apply (frule i_closed[of \"a1\"], frule i_closed[of \"b1\"],\n       frule i_closed[of \"a\"],\n       frule mult_closed[of \"b\" \"\\<rho> b1\"], assumption+,\n       frule mult_closed[of \"\\<rho> a1\" \"a\"], assumption+,\n       subst tassoc[of \"b \\<cdot> (\\<rho> b1)\" \"(\\<rho> a1) \\<cdot> a\" \"\\<rho> a\"], assumption+,\n       simp add:tassoc[of \"\\<rho> a1\" \"a\" \"\\<rho> a\"] r_i r_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier G; b \\<in> carrier G; a1 \\<in> carrier G;\n     b1 \\<in> carrier G; \\<rho> a1 \\<in> carrier G;\n     \\<rho> b1 \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     b \\<cdot> \\<rho> b1 \\<in> carrier G;\n     \\<rho> a1 \\<cdot> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) =\n                      a \\<cdot> (b \\<cdot> \\<rho> b1 \\<cdot> \\<rho> a1)", "apply (simp add:i_ab,\n       subst tassoc[of \"a\" \"b\" \"(\\<rho> b1) \\<cdot> (\\<rho> a1)\"], assumption+,\n       rule mult_closed, assumption+,\n       simp add:tassoc[THEN sym, of \"b\" \"\\<rho> b1\" \"\\<rho> a1\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgPr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk> \\<Longrightarrow>\n                                                 a \\<cdot> (h \\<cdot> (\\<rho> a)) \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> (h \\<cdot> \\<rho> a) \\<in> N", "apply (frule nsg_sg[of \"N\"], \n       frule sg_subset_elem[of \"N\" \"h\"], assumption+,\n       frule i_closed[of \"a\"],\n       frule rcs_fixed1[THEN sym, of \"N\" \"\\<rho> a\" \"h\"], assumption+, \n       frule mult_closed[of \"h\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N;\n     G \\<guillemotright> N ; h \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     N \\<bullet> (h \\<cdot> \\<rho> a) = N \\<bullet> \\<rho> a;\n     h \\<cdot> \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> (h \\<cdot> \\<rho> a) \\<in> N", "apply (frule a_in_rcs[of \"N\" \"h \\<cdot> (\\<rho> a)\"], assumption+, simp,\n       thin_tac \"N \\<bullet> (h \\<cdot> \\<rho> a) = N \\<bullet> \\<rho> a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N;\n     G \\<guillemotright> N ; h \\<in> carrier G; \\<rho> a \\<in> carrier G;\n     h \\<cdot> \\<rho> a \\<in> carrier G;\n     h \\<cdot> \\<rho> a \\<in> N \\<bullet> \\<rho> a\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> (h \\<cdot> \\<rho> a) \\<in> N", "apply (simp add:nsg_l_rcs_eq[THEN sym, of \"N\" \"\\<rho> a\"],\n       simp add:lcs_mem_ldiv[of \"N\" \"h \\<cdot> (\\<rho> a)\" \"\\<rho> a\"] iop_i_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgPr1_1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G ; h \\<in> N\\<rbrakk> \\<Longrightarrow> \n                              (a \\<cdot> h) \\<cdot> (\\<rho> a) \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> h \\<cdot> \\<rho> a \\<in> N", "apply (frule nsgPr1[of \"N\" \"a\" \"h\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N;\n     a \\<cdot> (h \\<cdot> \\<rho> a) \\<in> N\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> h \\<cdot> \\<rho> a \\<in> N", "apply (frule nsg_sg[of \"N\"],\n       frule sg_subset_elem[of \"N\" \"h\"], assumption+,\n       frule i_closed[of \"a\"],\n       simp add:tassoc[THEN sym, of \"a\" \"h\" \"\\<rho> a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgPr2:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk> \\<Longrightarrow>\n                                   (\\<rho> a) \\<cdot> (h \\<cdot> a) \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> (h \\<cdot> a) \\<in> N", "apply (frule i_closed[of \"a\"],\n       frule nsgPr1[of \"N\" \"\\<rho> a\" \"h\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N;\n     \\<rho> a \\<in> carrier G;\n     \\<rho> a \\<cdot> (h \\<cdot> \\<rho> (\\<rho> a)) \\<in> N\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> (h \\<cdot> a) \\<in> N", "apply (simp add:iop_i_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgPr2_1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk> \\<Longrightarrow>\n                                              (\\<rho> a) \\<cdot> h \\<cdot> a \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; h \\<in> N\\<rbrakk>\n    \\<Longrightarrow> \\<rho> a \\<cdot> h \\<cdot> a \\<in> N", "apply (frule i_closed[of \"a\"],\n       frule  nsgPr1_1[of \"N\" \"\\<rho> a\" \"h\"], assumption+, simp add:iop_i_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgTr3:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; \na1 \\<in> carrier G; b1 \\<in> carrier G;  a \\<cdot> (\\<rho> a1) \\<in> N; b \\<cdot> (\\<rho> b1) \\<in> N\\<rbrakk> \\<Longrightarrow> \n                  (a \\<cdot> b) \\<cdot> (\\<rho> (a1 \\<cdot> b1)) \\<in> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     a1 \\<in> carrier G; b1 \\<in> carrier G; a \\<cdot> \\<rho> a1 \\<in> N;\n     b \\<cdot> \\<rho> b1 \\<in> N\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) \\<in> N", "apply (frule nsg_sg[of \"N\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     a1 \\<in> carrier G; b1 \\<in> carrier G; a \\<cdot> \\<rho> a1 \\<in> N;\n     b \\<cdot> \\<rho> b1 \\<in> N; G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) \\<in> N", "apply (frule  nsgTr2 [of \"a\" \"b\" \"a1\" \"b1\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     a1 \\<in> carrier G; b1 \\<in> carrier G; a \\<cdot> \\<rho> a1 \\<in> N;\n     b \\<cdot> \\<rho> b1 \\<in> N; G \\<guillemotright> N ;\n     a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) =\n     a \\<cdot>\n     (b \\<cdot> \\<rho> b1 \\<cdot> (\\<rho> a1 \\<cdot> a) \\<cdot>\n      \\<rho> a)\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) \\<in> N", "apply (frule  nsgTr1 [of \"N\" \"a1\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     a1 \\<in> carrier G; b1 \\<in> carrier G; a \\<cdot> \\<rho> a1 \\<in> N;\n     b \\<cdot> \\<rho> b1 \\<in> N; G \\<guillemotright> N ;\n     a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) =\n     a \\<cdot>\n     (b \\<cdot> \\<rho> b1 \\<cdot> (\\<rho> a1 \\<cdot> a) \\<cdot> \\<rho> a);\n     \\<rho> a \\<cdot> a1 \\<in> N\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) \\<in> N", "apply (frule i_closed[of \"a\"],\n       frule sg_i_closed [of \"N\" \"(\\<rho> a) \\<cdot> a1\"], assumption+, \n        simp add:i_ab[of \"\\<rho> a\" \"a1\"] iop_i_i,\n       frule sg_mult_closed[of \"N\" \"b \\<cdot> (\\<rho> b1)\" \"(\\<rho> a1) \\<cdot> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     a1 \\<in> carrier G; b1 \\<in> carrier G; a \\<cdot> \\<rho> a1 \\<in> N;\n     b \\<cdot> \\<rho> b1 \\<in> N; G \\<guillemotright> N ;\n     a \\<cdot> b \\<cdot> \\<rho> (a1 \\<cdot> b1) =\n     a \\<cdot>\n     (b \\<cdot> \\<rho> b1 \\<cdot> (\\<rho> a1 \\<cdot> a) \\<cdot> \\<rho> a);\n     \\<rho> a \\<cdot> a1 \\<in> N; \\<rho> a \\<in> carrier G;\n     \\<rho> a1 \\<cdot> a \\<in> N;\n     b \\<cdot> \\<rho> b1 \\<cdot> (\\<rho> a1 \\<cdot> a) \\<in> N\\<rbrakk>\n    \\<Longrightarrow> a \\<cdot>\n                      (b \\<cdot> \\<rho> b1 \\<cdot>\n                       (\\<rho> a1 \\<cdot> a) \\<cdot>\n                       \\<rho> a)\n                      \\<in> N", "apply (rule nsgPr1[of \"N\" \"a\" \"b \\<cdot> (\\<rho> b1) \\<cdot> ((\\<rho> a1) \\<cdot> a)\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsg_in_Gp:\"\\<lbrakk>G \\<triangleright> N; G \\<guillemotright> H; N \\<subseteq> H\\<rbrakk> \\<Longrightarrow> (Gp G H) \\<triangleright> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; G \\<guillemotright> H ;\n     N \\<subseteq> H\\<rbrakk>\n    \\<Longrightarrow> \\<natural>H \\<triangleright> N", "apply (frule Group_Gp [of \"H\"],\n       frule nsg_sg[of \"N\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; G \\<guillemotright> H ; N \\<subseteq> H;\n     Group (\\<natural>H); G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> \\<natural>H \\<triangleright> N", "apply (rule Group.cond_nsg [of \"\\<natural>H\" \"N\"], assumption+,\n       simp add:sg_sg[of \"H\" \"N\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; G \\<guillemotright> H ; N \\<subseteq> H;\n     Group (\\<natural>H); G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier (\\<natural>H).\n                         \\<forall>h\\<in>N.\n                            a \\<cdot>\\<^bsub>\\<natural>H\\<^esub>\n                            h \\<cdot>\\<^bsub>\\<natural>H\\<^esub>\n                            \\<rho>\\<^bsub>\\<natural>H\\<^esub> a\n                            \\<in> N", "apply (rule ballI, rule ballI,\n       (subst Gp_def)+, simp add:Gp_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a h.\n       \\<lbrakk>G \\<triangleright> N; G \\<guillemotright> H ;\n        N \\<subseteq> H; Group (\\<natural>H); G \\<guillemotright> N ;\n        a \\<in> H; h \\<in> N\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot> h \\<cdot> \\<rho> a \\<in> N", "apply (frule_tac h = a in sg_subset_elem[of \"H\"], assumption+,\n       rule_tac a = a and h = h in nsgPr1_1[of \"N\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) nsgTr4:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;  x \\<in> N \\<bullet> a\\<rbrakk> \\<Longrightarrow> \n                            (\\<rho> x) \\<in> N \\<bullet> (\\<rho> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     x \\<in> N \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> \\<rho> x \\<in> N \\<bullet> \\<rho> a", "apply (frule nsgTr0 [of \"N\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     x \\<in> N \\<bullet> a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> N \\<bullet> a\n 2. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; x \\<in> N \\<bullet> a;\n     a \\<cdot> \\<rho> a \\<in> N \\<and> \\<rho> a \\<cdot> a \\<in> N\\<rbrakk>\n    \\<Longrightarrow> \\<rho> x \\<in> N \\<bullet> \\<rho> a", "apply (frule nsg_sg[of \"N\"], rule a_in_rcs[of \"N\"], assumption+,\n       thin_tac \"a \\<cdot> \\<rho> a \\<in> N \\<and> \\<rho> a \\<cdot> a \\<in> N\",\n       frule nsg_sg[of \"N\"],\n       frule rcs_subset_elem[of \"N\" \"a\" \"x\"], assumption+,\n       simp add:rcs_eqTr1[of \"N\" \"x\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     x \\<cdot> \\<rho> a \\<in> N; G \\<guillemotright> N ;\n     x \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> \\<rho> x \\<in> N \\<bullet> \\<rho> a", "apply (frule nsgTr1[of \"N\" \"a\" \"x\"], assumption+,\n       frule i_closed[of \"x\"],\n       subst rcs_eqTr1[of \"N\" \"\\<rho> x\" \"\\<rho> a\"], assumption+,\n       simp add:i_closed, simp add:iop_i_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_topTr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; \n       a1 \\<in> carrier G; b1 \\<in> carrier G; N \\<bullet> a = N \\<bullet> a1; N \\<bullet> b = N \\<bullet> b1\\<rbrakk> \\<Longrightarrow> \n                      N \\<bullet> (a \\<cdot> b) = N \\<bullet> (a1 \\<cdot> b1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     a1 \\<in> carrier G; b1 \\<in> carrier G; N \\<bullet> a = N \\<bullet> a1;\n     N \\<bullet> b = N \\<bullet> b1\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> (a \\<cdot> b) =\n                      N \\<bullet> (a1 \\<cdot> b1)", "apply (frule nsg_sg[of \"N\"],\n       frule mult_closed[of \"a\" \"b\"], assumption+,\n       frule mult_closed[of \"a1\" \"b1\"], assumption+,\n       simp add:rcs_eq[THEN sym, of \"N\" \"a\" \"a1\"],\n       simp add:rcs_eq[THEN sym, of \"N\" \"b\" \"b1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     a1 \\<in> carrier G; b1 \\<in> carrier G; a1 \\<cdot> \\<rho> a \\<in> N;\n     b1 \\<cdot> \\<rho> b \\<in> N; G \\<guillemotright> N ;\n     a \\<cdot> b \\<in> carrier G; a1 \\<cdot> b1 \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> (a \\<cdot> b) =\n                      N \\<bullet> (a1 \\<cdot> b1)", "apply (subst rcs_eq[THEN sym, of \"N\" \"a \\<cdot> b\" \"a1 \\<cdot> b1\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     a1 \\<in> carrier G; b1 \\<in> carrier G; a1 \\<cdot> \\<rho> a \\<in> N;\n     b1 \\<cdot> \\<rho> b \\<in> N; G \\<guillemotright> N ;\n     a \\<cdot> b \\<in> carrier G; a1 \\<cdot> b1 \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> a1 \\<cdot> b1 \\<cdot> \\<rho> (a \\<cdot> b) \\<in> N", "apply (rule nsgTr3[of \"N\" \"a1\" \"b1\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_topTr2:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; a1 \\<in> carrier G;\n                 N \\<bullet> a = N \\<bullet> a1 \\<rbrakk> \\<Longrightarrow> N \\<bullet> (\\<rho> a) = N \\<bullet> (\\<rho> a1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; a1 \\<in> carrier G;\n     N \\<bullet> a = N \\<bullet> a1\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> \\<rho> a = N \\<bullet> \\<rho> a1", "apply (frule nsg_sg[of \"N\"], \n       simp add:rcs_eq[THEN sym, of \"N\" \"a\" \"a1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; a1 \\<in> carrier G;\n     a1 \\<cdot> \\<rho> a \\<in> N; G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> \\<rho> a = N \\<bullet> \\<rho> a1", "apply (subst rcs_eq[THEN sym, of \"N\" \"\\<rho> a\" \"\\<rho> a1\"], assumption+,\n       simp add:i_closed, simp add:i_closed, simp add:iop_i_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; a1 \\<in> carrier G;\n     a1 \\<cdot> \\<rho> a \\<in> N; G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> \\<rho> a1 \\<cdot> a \\<in> N", "apply (rule nsgTr1[of \"N\" \"a\" \"a1\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_iop_welldefTr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                         c_iop G N (N \\<bullet> a) \\<subseteq>  N \\<bullet> (\\<rho> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_iop G N (N \\<bullet> a)\n                      \\<subseteq> N \\<bullet> \\<rho> a", "apply (frule nsg_sg[of \"N\"],\n       frule i_closed[of \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N ; \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_iop G N (N \\<bullet> a)\n                      \\<subseteq> N \\<bullet> \\<rho> a", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G;\n        x \\<in> c_iop G N (N \\<bullet> a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (simp add:c_iop_def rcs_in_set_rcs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G;\n        \\<exists>xa\\<in>N \\<bullet> a.\n           \\<exists>h\\<in>N. h \\<cdot> \\<rho> xa = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (erule bexE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa h.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G;\n        xa \\<in> N \\<bullet> a; h \\<in> N; h \\<cdot> \\<rho> xa = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (simp add:rcs_def[of _ \"N\" \"a\"], erule bexE,\n       rotate_tac -1, frule sym, thin_tac \"ha \\<cdot> a = xa\", simp,\n       thin_tac \"xa = ha \\<cdot> a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa h ha.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G; h \\<in> N;\n        h \\<cdot> \\<rho> (ha \\<cdot> a) = x; ha \\<in> N\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (frule_tac h = ha in sg_subset_elem[of \"N\"], assumption+,\n       frule_tac a = ha and b = a in mult_closed, assumption+,\n       frule_tac a = \"ha \\<cdot> a\" in i_closed,\n       frule_tac h = h in sg_subset_elem[of \"N\"], assumption+,\n       frule_tac a = h and b = \"\\<rho> (ha \\<cdot> a)\" in mult_closed, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa h ha.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G; h \\<in> N;\n        h \\<cdot> \\<rho> (ha \\<cdot> a) = x; ha \\<in> N; ha \\<in> carrier G;\n        ha \\<cdot> a \\<in> carrier G; \\<rho> (ha \\<cdot> a) \\<in> carrier G;\n        h \\<in> carrier G;\n        h \\<cdot> \\<rho> (ha \\<cdot> a) \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (frule_tac a = \"h \\<cdot> \\<rho> (ha \\<cdot> a)\" and b = x in r_mult_eqn[of _ _ \n       \"a \\<cdot> (\\<rho> a)\"], simp, simp add:r_i unit_closed, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa h ha.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G; h \\<in> N;\n        h \\<cdot> \\<rho> (ha \\<cdot> a) = x; ha \\<in> N; ha \\<in> carrier G;\n        ha \\<cdot> a \\<in> carrier G; \\<rho> (ha \\<cdot> a) \\<in> carrier G;\n        h \\<in> carrier G; h \\<cdot> \\<rho> (ha \\<cdot> a) \\<in> carrier G;\n        h \\<cdot> \\<rho> (ha \\<cdot> a) \\<cdot> (a \\<cdot> \\<rho> a) =\n        x \\<cdot> (a \\<cdot> \\<rho> a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (frule_tac a = \"h \\<cdot> \\<rho> (ha \\<cdot> a)\" in tassoc[of _ \"a\" \"\\<rho> a\"], assumption+,\n       frule_tac a = \"h \\<cdot> \\<rho> (ha \\<cdot> a)\" and A = \"carrier G\" and b = x in \n                 eq_elem_in, assumption+,\n       thin_tac \"h \\<cdot> \\<rho> (ha \\<cdot> a) = x\", simp,\n       thin_tac \"h \\<cdot> \\<rho> (ha \\<cdot> a) \\<cdot> (a \\<cdot> \\<rho> a) = x \\<cdot> (a \\<cdot> \\<rho> a)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h ha.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G; h \\<in> N;\n        ha \\<in> N; ha \\<in> carrier G; ha \\<cdot> a \\<in> carrier G;\n        \\<rho> (ha \\<cdot> a) \\<in> carrier G; h \\<in> carrier G;\n        h \\<cdot> \\<rho> (ha \\<cdot> a) \\<in> carrier G;\n        h \\<cdot> \\<rho> (ha \\<cdot> a) \\<cdot> a \\<cdot> \\<rho> a =\n        x \\<cdot> (a \\<cdot> \\<rho> a);\n        x \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (frule_tac a = h and b = \"\\<rho> (ha \\<cdot> a)\" and c = a in tassoc, assumption+,\n       simp, thin_tac \"h \\<cdot> \\<rho> (ha \\<cdot> a) \\<cdot> a = h \\<cdot> (\\<rho> (ha \\<cdot> a) \\<cdot> a)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h ha.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G; h \\<in> N;\n        ha \\<in> N; ha \\<in> carrier G; ha \\<cdot> a \\<in> carrier G;\n        \\<rho> (ha \\<cdot> a) \\<in> carrier G; h \\<in> carrier G;\n        h \\<cdot> \\<rho> (ha \\<cdot> a) \\<in> carrier G;\n        h \\<cdot> (\\<rho> (ha \\<cdot> a) \\<cdot> a) \\<cdot> \\<rho> a =\n        x \\<cdot> (a \\<cdot> \\<rho> a);\n        x \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (simp add:i_ab r_i r_unit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h ha.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G; h \\<in> N;\n        ha \\<in> N; ha \\<in> carrier G; ha \\<cdot> a \\<in> carrier G;\n        \\<rho> a \\<cdot> \\<rho> ha \\<in> carrier G; h \\<in> carrier G;\n        h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha) \\<in> carrier G;\n        h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a) \\<cdot> \\<rho> a =\n        x;\n        x \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> \\<rho> a", "apply (frule_tac x = ha in sg_i_closed[of \"N\"], assumption+,\n       frule sym, thin_tac \"h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a) \\<cdot> \\<rho> a = x\", simp,\n       thin_tac \"x = h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a) \\<cdot> \\<rho> a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h ha.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G; h \\<in> N;\n        ha \\<in> N; ha \\<in> carrier G; ha \\<cdot> a \\<in> carrier G;\n        \\<rho> a \\<cdot> \\<rho> ha \\<in> carrier G; h \\<in> carrier G;\n        h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha) \\<in> carrier G;\n        h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a) \\<cdot> \\<rho> a\n        \\<in> carrier G;\n        \\<rho> ha \\<in> N\\<rbrakk>\n       \\<Longrightarrow> h \\<cdot>\n                         (\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a) \\<cdot>\n                         \\<rho> a\n                         \\<in> N \\<bullet> \\<rho> a", "apply (frule_tac h = \"\\<rho> ha\" in nsgPr2_1[of \"N\" \"a\"], assumption+,\n       frule_tac x = h and y = \"\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a\" in sg_mult_closed, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h ha.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; \\<rho> a \\<in> carrier G; h \\<in> N;\n        ha \\<in> N; ha \\<in> carrier G; ha \\<cdot> a \\<in> carrier G;\n        \\<rho> a \\<cdot> \\<rho> ha \\<in> carrier G; h \\<in> carrier G;\n        h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha) \\<in> carrier G;\n        h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a) \\<cdot> \\<rho> a\n        \\<in> carrier G;\n        \\<rho> ha \\<in> N; \\<rho> a \\<cdot> \\<rho> ha \\<cdot> a \\<in> N;\n        h \\<cdot> (\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a) \\<in> N\\<rbrakk>\n       \\<Longrightarrow> h \\<cdot>\n                         (\\<rho> a \\<cdot> \\<rho> ha \\<cdot> a) \\<cdot>\n                         \\<rho> a\n                         \\<in> N \\<bullet> \\<rho> a", "apply (simp add:rcs_def, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_iop_welldefTr2:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                                   N \\<bullet> (\\<rho> a) \\<subseteq>  c_iop G N (N \\<bullet> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> \\<rho> a\n                      \\<subseteq> c_iop G N (N \\<bullet> a)", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        x \\<in> N \\<bullet> \\<rho> a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> c_iop G N (N \\<bullet> a)", "apply (frule nsg_sg[of \"N\"],\n        frule i_closed[of \"a\"],\n        frule_tac x = x in rcs_subset_elem[of \"N\" \"\\<rho> a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        x \\<in> N \\<bullet> \\<rho> a; G \\<guillemotright> N ;\n        \\<rho> a \\<in> carrier G; x \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<in> c_iop G N (N \\<bullet> a)", "apply (simp add:c_iop_def,\n       simp add:rcs_in_set_rcs[of \"N\" \"a\"],\n       simp add:rcs_def[of _ \"N\" \"\\<rho> a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        \\<exists>h\\<in>N. h \\<cdot> \\<rho> a = x; G \\<guillemotright> N ;\n        \\<rho> a \\<in> carrier G; x \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>N \\<bullet> a.\n                            \\<exists>h\\<in>N. h \\<cdot> \\<rho> xa = x", "apply (frule a_in_rcs[of \"N\" \"a\"], assumption, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_iop_welldef:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                 c_iop G N (N \\<bullet> a) =  N \\<bullet> (\\<rho> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_iop G N (N \\<bullet> a) = N \\<bullet> \\<rho> a", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_iop G N (N \\<bullet> a)\n                      \\<subseteq> N \\<bullet> \\<rho> a\n 2. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> \\<rho> a\n                      \\<subseteq> c_iop G N (N \\<bullet> a)", "apply (simp only:c_iop_welldefTr1[of \"N\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> \\<rho> a\n                      \\<subseteq> c_iop G N (N \\<bullet> a)", "apply (simp only:c_iop_welldefTr2[of \"N\" \"a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_top_welldefTr1:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; \n          b \\<in> carrier G; x \\<in> N \\<bullet> a; y \\<in> N \\<bullet> b\\<rbrakk> \\<Longrightarrow> x \\<cdot> y \\<in> N \\<bullet> (a \\<cdot> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     x \\<in> N \\<bullet> a; y \\<in> N \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<in> N \\<bullet> (a \\<cdot> b)", "apply (frule nsg_sg[of \"N\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     x \\<in> N \\<bullet> a; y \\<in> N \\<bullet> b;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<in> N \\<bullet> (a \\<cdot> b)", "apply (frule_tac x = x in rcs_subset_elem[of \"N\" \"a\"], assumption+,\n       frule_tac x = y in rcs_subset_elem[of \"N\" \"b\"], assumption+,\n       frule rcs_eqTr1[of \"N\" \"x\" \"a\"], assumption+,\n       frule rcs_eqTr1[of \"N\" \"y\" \"b\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     x \\<cdot> \\<rho> a \\<in> N; y \\<cdot> \\<rho> b \\<in> N;\n     G \\<guillemotright> N ; x \\<in> carrier G; y \\<in> carrier G;\n     x \\<in> N \\<bullet> a; y \\<in> N \\<bullet> b\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<in> N \\<bullet> (a \\<cdot> b)", "apply (frule_tac mult_closed[of \"a\" \"b\"], assumption+,\n       frule_tac mult_closed[of \"x\" \"y\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     x \\<cdot> \\<rho> a \\<in> N; y \\<cdot> \\<rho> b \\<in> N;\n     G \\<guillemotright> N ; x \\<in> carrier G; y \\<in> carrier G;\n     x \\<in> N \\<bullet> a; y \\<in> N \\<bullet> b;\n     a \\<cdot> b \\<in> carrier G; x \\<cdot> y \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<in> N \\<bullet> (a \\<cdot> b)", "apply (subst rcs_eqTr1[of \"N\" \"x \\<cdot> y\" \"a \\<cdot> b\"], assumption+,\n       rule nsgTr3[of \"N\" \"x\" \"y\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_top_welldefTr2:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G \\<rbrakk> \n                       \\<Longrightarrow> c_top G N (N \\<bullet> a) (N \\<bullet> b) \\<subseteq>  N \\<bullet> (a \\<cdot> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_top G N (N \\<bullet> a) (N \\<bullet> b)\n                      \\<subseteq> N \\<bullet> (a \\<cdot> b)", "apply (frule nsg_sg[of \"N\"],\n       simp add:c_top_def, simp add:rcs_in_set_rcs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> {z. \\<exists>x\\<in>N \\<bullet> a.\n                             \\<exists>y\\<in>N \\<bullet> b. x \\<cdot> y = z}\n                      \\<subseteq> N \\<bullet> (a \\<cdot> b)", "apply (rule subsetI, simp, (erule bexE)+,\n       frule_tac x = xa and y = y in c_top_welldefTr1[of \"N\" \"a\" \"b\"], \n       assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_top_welldefTr4:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; \n      x \\<in> N \\<bullet> (a \\<cdot> b)\\<rbrakk> \\<Longrightarrow> x \\<in> c_top G N (N \\<bullet> a) (N \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     x \\<in> N \\<bullet> (a \\<cdot> b)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> c_top G N (N \\<bullet> a) (N \\<bullet> b)", "apply (frule nsg_sg[of \"N\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     x \\<in> N \\<bullet> (a \\<cdot> b); G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> x \\<in> c_top G N (N \\<bullet> a) (N \\<bullet> b)", "apply (simp add:c_top_def, simp add:rcs_in_set_rcs,\n       simp add:rcs_def[of _ \"N\" \"a \\<cdot> b\"], erule bexE,\n       frule_tac h = h in sg_subset_elem[of \"N\"], assumption+,\n       simp add:tassoc[THEN sym, of _ \"a\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n        G \\<guillemotright> N ; h \\<in> N; h \\<cdot> a \\<cdot> b = x;\n        h \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>N \\<bullet> a.\n                            \\<exists>y\\<in>N \\<bullet> b. xa \\<cdot> y = x", "apply (frule a_in_rcs[of \"N\" \"b\"], assumption,\n       frule_tac h1 = h in rcs_fixed1[THEN sym, of \"N\" \"a\"], assumption+,\n       frule_tac a = h and b = a in mult_closed, assumption+,\n       frule_tac a = \"h \\<cdot> a\" in a_in_rcs[of \"N\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>h.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n        G \\<guillemotright> N ; h \\<in> N; h \\<cdot> a \\<cdot> b = x;\n        h \\<in> carrier G; b \\<in> N \\<bullet> b;\n        N \\<bullet> (h \\<cdot> a) = N \\<bullet> a;\n        h \\<cdot> a \\<in> carrier G;\n        h \\<cdot> a \\<in> N \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>N \\<bullet> a.\n                            \\<exists>y\\<in>N \\<bullet> b. xa \\<cdot> y = x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) c_top_welldefTr5:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n                             N \\<bullet> (a \\<cdot> b) \\<subseteq> c_top G N (N \\<bullet> a) (N \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> (a \\<cdot> b)\n                      \\<subseteq> c_top G N (N \\<bullet> a) (N \\<bullet> b)", "by (rule subsetI,\n       rule c_top_welldefTr4[of \"N\" \"a\" \"b\" _], assumption+)"], ["", "lemma (in Group) c_top_welldef:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G\\<rbrakk> \\<Longrightarrow> \n                 N \\<bullet> (a \\<cdot> b) = c_top G N (N \\<bullet> a) (N \\<bullet> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> (a \\<cdot> b) =\n                      c_top G N (N \\<bullet> a) (N \\<bullet> b)", "by (rule equalityI, simp only:c_top_welldefTr5, simp only:c_top_welldefTr2)"], ["", "lemma (in Group) Qg_unitTr:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                            c_top G N N (N \\<bullet> a) = N \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_top G N N (N \\<bullet> a) = N \\<bullet> a", "apply (frule nsg_sg[of \"N\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> c_top G N N (N \\<bullet> a) = N \\<bullet> a", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> c_top G N N (N \\<bullet> a) \\<subseteq> N \\<bullet> a\n 2. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> a \\<subseteq> c_top G N N (N \\<bullet> a)", "apply (rule subsetI, simp add:c_top_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ;\n        x \\<in> (if N \\<in> set_rcs G N\n                 then \\<lambda>Y\\<in>set_rcs G N.\n                         {z. \\<exists>x\\<in>N.\n                                \\<exists>y\\<in>Y. x \\<cdot> y = z}\n                 else undefined)\n                 (N \\<bullet> a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> a\n 2. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> a \\<subseteq> c_top G N N (N \\<bullet> a)", "apply (simp add:unit_rcs_in_set_rcs rcs_in_set_rcs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ;\n        \\<exists>xa\\<in>N.\n           \\<exists>y\\<in>N \\<bullet> a. xa \\<cdot> y = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> a\n 2. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> a \\<subseteq> c_top G N N (N \\<bullet> a)", "apply (erule bexE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa y.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; xa \\<in> N; y \\<in> N \\<bullet> a;\n        xa \\<cdot> y = x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> N \\<bullet> a\n 2. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> a \\<subseteq> c_top G N N (N \\<bullet> a)", "apply (simp add:rcs_def, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa y h.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; xa \\<in> N; xa \\<cdot> y = x; h \\<in> N;\n        h \\<cdot> a = y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>h\\<in>N. h \\<cdot> a = x\n 2. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> a \\<subseteq> c_top G N N (N \\<bullet> a)", "apply (frule sym, thin_tac \"xa \\<cdot> y = x\", frule sym, thin_tac \"h \\<cdot> a = y\",\n        simp, thin_tac \"x = xa \\<cdot> (h \\<cdot> a)\", thin_tac \"y = h \\<cdot> a\",\n       frule_tac h = xa in sg_subset_elem[of \"N\"], assumption+,\n       frule_tac h = h in sg_subset_elem[of \"N\"], assumption+,\n       simp add:tassoc[THEN sym],\n       frule_tac x = xa and y = h in  sg_mult_closed[of \"N\"], assumption+,\n       blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     G \\<guillemotright> N \\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> a \\<subseteq> c_top G N N (N \\<bullet> a)", "apply (rule subsetI,\n       simp add:c_top_def, simp add:unit_rcs_in_set_rcs rcs_in_set_rcs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        G \\<guillemotright> N ; x \\<in> N \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>N.\n                            \\<exists>y\\<in>N \\<bullet> a. xa \\<cdot> y = x", "apply (frule_tac x = x in mem_rcs [of \"N\" _ \"a\"], assumption, erule bexE,\n       frule a_in_rcs[of \"N\" \"a\"], assumption, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_unit:\"G \\<triangleright> N  \\<Longrightarrow> \\<forall>x\\<in>set_rcs G N. c_top G N N x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    \\<forall>x\\<in>set_rcs G N. c_top G N N x = x", "by (rule ballI,\n       simp add:set_rcs_def, erule bexE, simp,\n       simp add:Qg_unitTr)"], ["", "lemma (in Group) Qg_iTr:\"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk> \\<Longrightarrow>\n                         c_top G N (c_iop G N (N \\<bullet> a)) (N \\<bullet> a) = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_top G N (c_iop G N (N \\<bullet> a))\n                       (N \\<bullet> a) =\n                      N", "apply (simp add:c_iop_welldef [of \"N\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_top G N (N \\<bullet> \\<rho> a) (N \\<bullet> a) = N", "apply (frule i_closed[of \"a\"],\n       simp add:c_top_welldef[THEN sym, of \"N\" \"\\<rho> a\" \"a\"],\n       simp add:l_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n     \\<rho> a \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> \\<one> = N", "apply (frule nsg_sg[of \"N\"],\n       simp add:rcs_Unit1[of \"N\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_i:\"G \\<triangleright> N  \\<Longrightarrow>\n                         \\<forall>x \\<in> set_rcs G N. c_top G N (c_iop G N x) x = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    \\<forall>x\\<in>set_rcs G N. c_top G N (c_iop G N x) x = N", "apply (rule ballI, simp add:set_rcs_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        x = N \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> c_top G N (c_iop G N x) x = N", "apply (simp add:Qg_iTr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_tassocTr:\n  \"\\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G; c \\<in> carrier G \\<rbrakk> \\<Longrightarrow> \n   c_top G N (N \\<bullet> a) (c_top G N (N \\<bullet> b) (N \\<bullet> c)) = \n                           c_top G N (c_top G N (N \\<bullet> a) (N \\<bullet> b)) (N \\<bullet> c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     c \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> c_top G N (N \\<bullet> a)\n                       (c_top G N (N \\<bullet> b) (N \\<bullet> c)) =\n                      c_top G N (c_top G N (N \\<bullet> a) (N \\<bullet> b))\n                       (N \\<bullet> c)", "apply (frule mult_closed[of \"b\" \"c\"], assumption+,\n       frule mult_closed[of \"a\" \"b\"], assumption+,\n       simp add:c_top_welldef[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; b \\<in> carrier G;\n     c \\<in> carrier G; b \\<cdot> c \\<in> carrier G;\n     a \\<cdot> b \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> (a \\<cdot> (b \\<cdot> c)) =\n                      N \\<bullet> (a \\<cdot> b \\<cdot> c)", "apply (simp add:tassoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_tassoc: \"G \\<triangleright> N \\<Longrightarrow>\n\\<forall>X\\<in>set_rcs G N. \\<forall>Y\\<in>set_rcs G N. \\<forall>Z\\<in>set_rcs G N. c_top G N X (c_top G N Y Z) \n                                   = c_top G N (c_top G N X Y) Z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    \\<forall>X\\<in>set_rcs G N.\n       \\<forall>Y\\<in>set_rcs G N.\n          \\<forall>Z\\<in>set_rcs G N.\n             c_top G N X (c_top G N Y Z) = c_top G N (c_top G N X Y) Z", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X Y Z.\n       \\<lbrakk>G \\<triangleright> N; X \\<in> set_rcs G N;\n        Y \\<in> set_rcs G N; Z \\<in> set_rcs G N\\<rbrakk>\n       \\<Longrightarrow> c_top G N X (c_top G N Y Z) =\n                         c_top G N (c_top G N X Y) Z", "apply (simp add:set_rcs_def, (erule bexE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X Y Z a aa ab.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; X = N \\<bullet> a;\n        aa \\<in> carrier G; Y = N \\<bullet> aa; ab \\<in> carrier G;\n        Z = N \\<bullet> ab\\<rbrakk>\n       \\<Longrightarrow> c_top G N X (c_top G N Y Z) =\n                         c_top G N (c_top G N X Y) Z", "apply (simp add:Qg_tassocTr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_top:\"G \\<triangleright> N \\<Longrightarrow> \n                 c_top G N : set_rcs G N \\<rightarrow> set_rcs G N \\<rightarrow> set_rcs G N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    c_top G N\n    \\<in> set_rcs G N \\<rightarrow> set_rcs G N \\<rightarrow> set_rcs G N", "apply (rule Pi_I, rule Pi_I, simp add:set_rcs_def, (erule bexE)+,\n       simp add:c_top_welldef[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa a aa.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G; x = N \\<bullet> a;\n        aa \\<in> carrier G; xa = N \\<bullet> aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ab\\<in>carrier G.\n                            N \\<bullet> (a \\<cdot> aa) = N \\<bullet> ab", "apply (metis mult_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_top_closed:\"\\<lbrakk>G \\<triangleright> N; A \\<in> set_rcs G N; B \\<in> set_rcs G N\\<rbrakk> \\<Longrightarrow>\n                                   c_top G N A B \\<in> set_rcs G N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; A \\<in> set_rcs G N;\n     B \\<in> set_rcs G N\\<rbrakk>\n    \\<Longrightarrow> c_top G N A B \\<in> set_rcs G N", "apply (frule Qg_top[of \"N\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; A \\<in> set_rcs G N; B \\<in> set_rcs G N;\n     c_top G N\n     \\<in> set_rcs G N \\<rightarrow>\n           set_rcs G N \\<rightarrow> set_rcs G N\\<rbrakk>\n    \\<Longrightarrow> c_top G N A B \\<in> set_rcs G N", "apply (frule funcset_mem [of \"c_top G N\" \"set_rcs G N\" _ \"A\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; A \\<in> set_rcs G N; B \\<in> set_rcs G N;\n     c_top G N\n     \\<in> set_rcs G N \\<rightarrow> set_rcs G N \\<rightarrow> set_rcs G N;\n     c_top G N A \\<in> set_rcs G N \\<rightarrow> set_rcs G N\\<rbrakk>\n    \\<Longrightarrow> c_top G N A B \\<in> set_rcs G N", "apply (rule funcset_mem[of \"c_top G N A\" \"set_rcs G N\" \"set_rcs G N\" \"B\"],\n           assumption, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_iop: \"G \\<triangleright> N \\<Longrightarrow>\n               c_iop G N :set_rcs G N \\<rightarrow> set_rcs G N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    c_iop G N \\<in> set_rcs G N \\<rightarrow> set_rcs G N", "apply (rule Pi_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>G \\<triangleright> N; x \\<in> set_rcs G N\\<rbrakk>\n       \\<Longrightarrow> c_iop G N x \\<in> set_rcs G N", "apply (simp add:set_rcs_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        x = N \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier G.\n                            c_iop G N x = N \\<bullet> a", "apply (simp add:c_iop_welldef)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        x = N \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa\\<in>carrier G.\n                            N \\<bullet> \\<rho> a = N \\<bullet> aa", "apply (frule_tac a = a in i_closed, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_iop_closed:\"\\<lbrakk>G \\<triangleright> N; A \\<in> set_rcs G N\\<rbrakk> \\<Longrightarrow>\n                                   c_iop G N A \\<in> set_rcs G N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; A \\<in> set_rcs G N\\<rbrakk>\n    \\<Longrightarrow> c_iop G N A \\<in> set_rcs G N", "by (frule Qg_iop[of \"N\"],\n       erule funcset_mem, assumption)"], ["", "lemma (in Group) Qg_unit_closed: \"G \\<triangleright> N \\<Longrightarrow>  N \\<in> set_rcs G N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow> N \\<in> set_rcs G N", "by (frule nsg_sg[of \"N\"],\n       simp only:unit_rcs_in_set_rcs)"], ["", "theorem (in Group) Group_Qg:\"G \\<triangleright> N \\<Longrightarrow>  Group (Qg G N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow> Group (G / N)", "apply (frule Qg_top [of \"N\"], frule Qg_iop [of \"N\"],\n       frule Qg_unit[of \"N\"], frule Qg_i[of \"N\" ],\n       frule Qg_tassoc[of \"N\"], frule Qg_unit_closed[of \"N\" ])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N;\n     c_top G N\n     \\<in> set_rcs G N \\<rightarrow> set_rcs G N \\<rightarrow> set_rcs G N;\n     c_iop G N \\<in> set_rcs G N \\<rightarrow> set_rcs G N;\n     \\<forall>x\\<in>set_rcs G N. c_top G N N x = x;\n     \\<forall>x\\<in>set_rcs G N. c_top G N (c_iop G N x) x = N;\n     \\<forall>X\\<in>set_rcs G N.\n        \\<forall>Y\\<in>set_rcs G N.\n           \\<forall>Z\\<in>set_rcs G N.\n              c_top G N X (c_top G N Y Z) = c_top G N (c_top G N X Y) Z;\n     N \\<in> set_rcs G N\\<rbrakk>\n    \\<Longrightarrow> Group (G / N)", "apply (simp add:Qg_def Group_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Qg_one:\"G \\<triangleright> N \\<Longrightarrow> one (G / N) = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow> \\<one>\\<^bsub>G / N\\<^esub> = N", "by (simp add:Qg_def)"], ["", "lemma (in Group) Qg_carrier:\"carrier (G / (N::'a set)) = set_rcs G N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (G / N) = set_rcs G N", "by (simp add:Qg_def)"], ["", "(** only a trick *)"], ["", "lemma (in Group) Qg_unit_group:\"G \\<triangleright> N \\<Longrightarrow> \n                        (set_rcs G N = {N}) = (carrier G = N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    (set_rcs G N = {N}) = (carrier G = N)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>G \\<triangleright> N; set_rcs G N = {N}\\<rbrakk>\n    \\<Longrightarrow> carrier G = N\n 2. \\<lbrakk>G \\<triangleright> N; carrier G = N\\<rbrakk>\n    \\<Longrightarrow> set_rcs G N = {N}", "apply (rule contrapos_pp, simp+,\n       frule nsg_sg[of \"N\"],\n       frule sg_subset[of \"N\"],\n       frule sets_not_eq[of \"carrier G\" \"N\"], assumption, erule bexE,\n       frule_tac a = a in rcs_in_set_rcs[of \"N\"], assumption+,\n       simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>G \\<triangleright> N; set_rcs G N = {N};\n        carrier G \\<noteq> N; G \\<guillemotright> N ;\n        N \\<subseteq> carrier G; a \\<in> carrier G; a \\<notin> N;\n        N \\<bullet> a = N\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>G \\<triangleright> N; carrier G = N\\<rbrakk>\n    \\<Longrightarrow> set_rcs G N = {N}", "apply (frule_tac a = a in a_in_rcs[of \"N\"], assumption+,\n        simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; carrier G = N\\<rbrakk>\n    \\<Longrightarrow> set_rcs G N = {N}", "apply (simp add:set_rcs_def, frule nsg_sg[of \"N\"],\n       frule rcs_fixed2[of \"N\"], frule_tac sg_unit_closed[of \"N\"], blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Gp_Qg:\"G \\<triangleright> N \\<Longrightarrow> Gp(G / N) (carrier(G / N)) = G / N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    \\<natural>\\<^bsub>G / N\\<^esub>carrier (G / N) = G / N", "by (simp add:Gp_def Qg_def)"], ["", "lemma (in Group) Pj_hom0:\"\\<lbrakk>G \\<triangleright> N; x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n                 \\<Longrightarrow> Pj G N (x \\<cdot> y) = (Pj G N x) \\<cdot>\\<^bsub>(G / N)\\<^esub> (Pj G N y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; x \\<in> carrier G;\n     y \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> Pj G N (x \\<cdot> y) =\n                      Pj G N x \\<cdot>\\<^bsub>G / N\\<^esub> Pj G N y", "apply (simp add:Pj_def mult_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; x \\<in> carrier G;\n     y \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> N \\<bullet> (x \\<cdot> y) =\n                      N \\<bullet> x \\<cdot>\\<^bsub>G / N\\<^esub>\n                      (N \\<bullet> y)", "apply (simp add:Qg_def, simp add:c_top_welldef)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Pj_ghom:\"G \\<triangleright> N \\<Longrightarrow> (Pj G N) \\<in> gHom G (G / N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow> Pj G N \\<in> gHom G (G / N)", "apply (simp add:gHom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    Pj G N \\<in> extensional (carrier G) \\<and>\n    Pj G N \\<in> carrier G \\<rightarrow> carrier (G / N) \\<and>\n    (\\<forall>x\\<in>carrier G.\n        \\<forall>y\\<in>carrier G.\n           Pj G N (x \\<cdot> y) =\n           Pj G N x \\<cdot>\\<^bsub>G / N\\<^esub> Pj G N y)", "apply (rule conjI,\n       simp add:restrict_def Pj_def extensional_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    Pj G N \\<in> carrier G \\<rightarrow> carrier (G / N) \\<and>\n    (\\<forall>x\\<in>carrier G.\n        \\<forall>y\\<in>carrier G.\n           Pj G N (x \\<cdot> y) =\n           Pj G N x \\<cdot>\\<^bsub>G / N\\<^esub> Pj G N y)", "apply (rule conjI, simp add:Pi_def,\n       rule allI, rule impI,\n       simp add:Qg_def set_rcs_def, simp add:Pj_def, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    \\<forall>x\\<in>carrier G.\n       \\<forall>y\\<in>carrier G.\n          Pj G N (x \\<cdot> y) =\n          Pj G N x \\<cdot>\\<^bsub>G / N\\<^esub> Pj G N y", "apply ((rule ballI)+, simp add:Pj_hom0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) Pj_mem:\"\\<lbrakk>G \\<triangleright> N; x \\<in> carrier G\\<rbrakk> \\<Longrightarrow> (Pj G N) x = N \\<bullet> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<triangleright> N; x \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> Pj G N x = N \\<bullet> x", "by (simp add:Pj_def)"], ["", "lemma (in Group) Pj_gsurjec:\"G \\<triangleright> N \\<Longrightarrow> gsurjec G (G/N) (Pj G N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    gsurj\\<^bsub>G,(G / N)\\<^esub> Pj G N", "apply (simp add:gsurjec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    Pj G N \\<in> gHom G (G / N) \\<and>\n    surj_to (Pj G N) (carrier G) (carrier (G / N))", "apply (simp add:Pj_ghom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<triangleright> N \\<Longrightarrow>\n    surj_to (Pj G N) (carrier G) (carrier (G / N))", "apply (rule surj_to_test[of \"Pj G N\" \"carrier G\" \"carrier (G / N)\"],\n       frule Pj_ghom[of \"N\"], simp add:gHom_def,\n       rule ballI,\n       simp add:Qg_def set_rcs_def, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>G \\<triangleright> N; a \\<in> carrier G;\n        b = N \\<bullet> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier G. Pj G N a = b", "apply (frule_tac x = a in Pj_mem[of \"N\"], assumption, simp, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Group) lcs_in_Gp:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K; K \\<subseteq> H; a \\<in> H\\<rbrakk>  \\<Longrightarrow> \n                                       a \\<diamondsuit> K = a \\<diamondsuit>\\<^bsub>(Gp G H)\\<^esub> K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     K \\<subseteq> H; a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> a \\<diamondsuit> K =\n                      a \\<diamondsuit>\\<^bsub>\\<natural>H\\<^esub> K", "by (simp add:lcs_def, simp add:Gp_def)"], ["", "lemma (in Group) rcs_in_Gp:\"\\<lbrakk>G \\<guillemotright> H; G \\<guillemotright> K; K \\<subseteq> H; a \\<in> H \\<rbrakk>  \\<Longrightarrow>\n                              K \\<bullet> a = K \\<bullet>\\<^bsub>(Gp G H)\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     K \\<subseteq> H; a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> K \\<bullet> a =\n                      K \\<bullet>\\<^bsub>\\<natural>H\\<^esub> a", "apply (simp add:rcs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<guillemotright> H ; G \\<guillemotright> K ;\n     K \\<subseteq> H; a \\<in> H\\<rbrakk>\n    \\<Longrightarrow> {b. \\<exists>h\\<in>K. h \\<cdot> a = b} =\n                      {b. \\<exists>h\\<in>K.\n                             h \\<cdot>\\<^bsub>\\<natural>H\\<^esub> a = b}", "apply (simp add:Gp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}