{"file_name": "/home/qj213/afp-2021-10-22/thys/Group-Ring-Module/Algebra1.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Group-Ring-Module", "problem_names": ["lemma True_then:\"True \\<longrightarrow> P \\<Longrightarrow> P\"", "lemma ex_conjI:\"\\<lbrakk>P c; Q c\\<rbrakk> \\<Longrightarrow> \\<exists>c. P c \\<and> Q c\"", "lemma forall_spec:\"\\<lbrakk> \\<forall>b. P b \\<longrightarrow> Q b; P a\\<rbrakk> \\<Longrightarrow> Q a\"", "lemma a_b_exchange:\"\\<lbrakk>a; a = b\\<rbrakk> \\<Longrightarrow> b\"", "lemma eq_prop:\"\\<lbrakk> P; P = Q\\<rbrakk> \\<Longrightarrow> Q\"", "lemma forball_contra:\"\\<lbrakk>\\<forall>y\\<in>A. P x y \\<longrightarrow> \\<not> Q y; \\<forall>y\\<in>A. Q y \\<or> R y\\<rbrakk> \\<Longrightarrow> \n                    \\<forall>y\\<in>A. (\\<not> P x y) \\<or> R y\"", "lemma forball_contra1:\"\\<lbrakk>\\<forall>y\\<in>A. P x y \\<longrightarrow> Q y; \\<forall>y\\<in>A. \\<not> Q y\\<rbrakk> \\<Longrightarrow> \\<forall>y\\<in>A. \\<not> P x y\"", "lemma nat_nonzero_pos:\"(a::nat) \\<noteq> 0 \\<Longrightarrow> 0 < a\"", "lemma add_both:\"(a::nat) = b \\<Longrightarrow> a + c = b + c\"", "lemma add_bothl:\"a = b \\<Longrightarrow> c + a = c + b\"", "lemma diff_Suc:\"(n::nat) \\<le> m \\<Longrightarrow> m - n + Suc 0 = Suc m - n\"", "lemma le_convert:\"\\<lbrakk>a = b; a \\<le> c\\<rbrakk> \\<Longrightarrow> b \\<le> c\"", "lemma ge_convert:\"\\<lbrakk>a = b; c \\<le> a\\<rbrakk> \\<Longrightarrow> c \\<le> b\"", "lemma less_convert:\"\\<lbrakk> a = b; c < b \\<rbrakk> \\<Longrightarrow> c < a\"", "lemma ineq_conv1:\"\\<lbrakk>a = b; a < c\\<rbrakk> \\<Longrightarrow> b < c\"", "lemma diff_Suc_pos:\"0 < a - Suc 0 \\<Longrightarrow>  0 < a\"", "lemma minus_SucSuc:\"a - Suc (Suc 0) = a - Suc 0 - Suc 0\"", "lemma Suc_Suc_Tr:\"Suc (Suc 0) \\<le> n \\<Longrightarrow> Suc (n - Suc (Suc 0)) = n - Suc 0\"", "lemma Suc_Suc_less:\"Suc 0 < a \\<Longrightarrow> Suc (a - Suc (Suc 0)) < a\"", "lemma diff_zero_eq:\"n = (0::nat) \\<Longrightarrow> m = m - n\"", "lemma Suc_less_le:\"x < Suc n \\<Longrightarrow> x \\<le> n\"", "lemma less_le_diff:\"x < n \\<Longrightarrow> x \\<le> n - Suc 0\"", "lemma le_pre_le:\"x \\<le> n - Suc 0 \\<Longrightarrow> x \\<le> n\"", "lemma nat_not_less:\"\\<not> (m::nat) < n \\<Longrightarrow> n \\<le> m\"", "lemma less_neq:\"n < (m::nat) \\<Longrightarrow> n \\<noteq> m\"", "lemma less_le_diff1:\"n \\<noteq> 0 \\<Longrightarrow> ((m::nat) < n) = (m \\<le> (n - Suc 0))\"", "lemma nat_not_less1:\"n \\<noteq> 0 \\<Longrightarrow> (\\<not> (m::nat) < n) = (\\<not> m \\<le> (n - Suc 0))\"", "lemma nat_eq_le:\"m = (n::nat) \\<Longrightarrow> m \\<le> n\"", "lemma non_zero_int:\" (n::int) \\<noteq> 0 \\<Longrightarrow> 0 < n \\<or> n < 0\"", "lemma zgt_0_zge_1:\"(0::int) < z \\<Longrightarrow> 1 \\<le> z\"", "lemma not_zle:\"(\\<not> (n::int) \\<le> m) =  (m < n)\"", "lemma not_zless:\"(\\<not> (n::int) < m) = (m \\<le> n)\"", "lemma zle_imp_zless_or_eq:\"(n::int) \\<le> m \\<Longrightarrow> n < m \\<or> n = m\"", "lemma zminus_zadd_cancel:\" - z + (z + w) = (w::int)\"", "lemma int_neq_iff:\"((w::int) \\<noteq> z) = (w < z) \\<or> (z < w)\"", "lemma zless_imp_zle:\"(z::int) < z' \\<Longrightarrow> z \\<le> z'\"", "lemma zdiff:\"z - (w::int) = z + (- w)\"", "lemma zle_zless_trans:\"\\<lbrakk> (i::int) \\<le> j; j < k\\<rbrakk> \\<Longrightarrow> i < k\"", "lemma zless_zle_trans:\"\\<lbrakk> (i::int) < j; j \\<le> k\\<rbrakk> \\<Longrightarrow> i < k\"", "lemma zless_neq:\"(i::int) < j \\<Longrightarrow> i \\<noteq> j\"", "lemma int_mult_mono:\"\\<lbrakk> i < j; (0::int) < k \\<rbrakk> \\<Longrightarrow> k * i < k * j\"", "lemma int_mult_le:\"\\<lbrakk>i \\<le> j; (0::int) \\<le> k\\<rbrakk> \\<Longrightarrow> k * i \\<le> k * j\"", "lemma int_mult_le1:\"\\<lbrakk>i \\<le> j; (0::int) \\<le> k\\<rbrakk> \\<Longrightarrow> i * k \\<le> j * k\"", "lemma zmult_zminus_right:\"(w::int) * (- z) = - (w * z)\"", "lemma zmult_zle_mono1_neg:\"\\<lbrakk>(i::int) \\<le> j; k \\<le> 0\\<rbrakk> \\<Longrightarrow> j * k \\<le> i * k\"", "lemma zmult_zless_mono_neg:\"\\<lbrakk>(i::int) < j; k < 0\\<rbrakk> \\<Longrightarrow> j * k < i * k\"", "lemma zmult_neg_neg:\"\\<lbrakk>i < (0::int); j < 0 \\<rbrakk> \\<Longrightarrow> 0 < i * j\"", "lemma zmult_pos_pos:\"\\<lbrakk>(0::int) < i; 0 < j\\<rbrakk> \\<Longrightarrow> 0 < i * j\"", "lemma zmult_pos_neg:\"\\<lbrakk>(0::int) < i; j < 0\\<rbrakk> \\<Longrightarrow> i * j < 0\"", "lemma zmult_neg_pos:\"\\<lbrakk>i < (0::int); 0 < j\\<rbrakk> \\<Longrightarrow> i * j < 0\"", "lemma zle:\"((z::int) \\<le> w) = (\\<not> (w < z))\"", "lemma times_1_both:\"\\<lbrakk>(0::int) < z; z * z' = 1\\<rbrakk> \\<Longrightarrow> z = 1 \\<and> z' = 1\"", "lemma zminus_minus:\"i - - (j::int) = i + j\"", "lemma zminus_minus_pos:\"(n::int) < 0 \\<Longrightarrow> 0 < - n\"", "lemma zadd_zle_mono:\"\\<lbrakk>w' \\<le> w; z' \\<le> (z::int)\\<rbrakk> \\<Longrightarrow> w' + z' \\<le> w + z\"", "lemma zmult_zle_mono:\"\\<lbrakk>i \\<le> (j::int); 0 < k\\<rbrakk> \\<Longrightarrow> k * i \\<le>  k * j\"", "lemma zmult_zle_mono_r:\"\\<lbrakk>i \\<le> (j::int); 0 < k\\<rbrakk> \\<Longrightarrow> i * k \\<le> j * k\"", "lemma pos_zmult_pos:\"\\<lbrakk> 0 \\<le> (a::int); 0 < (b::int)\\<rbrakk> \\<Longrightarrow> a \\<le> a * b\"", "lemma pos_mult_l_gt:\"\\<lbrakk>(0::int) < w; i \\<le> j; 0 \\<le> i\\<rbrakk> \\<Longrightarrow> i \\<le> w * j\"", "lemma  pos_mult_r_gt:\"\\<lbrakk>(0::int) < w; i \\<le> j; 0 \\<le> i\\<rbrakk> \\<Longrightarrow> i \\<le> j * w\"", "lemma mult_pos_iff:\"\\<lbrakk>(0::int) < i; 0 \\<le> i * j \\<rbrakk> \\<Longrightarrow> 0 \\<le> j\"", "lemma zmult_eq:\"\\<lbrakk>(0::int) < w; z = z'\\<rbrakk> \\<Longrightarrow> w * z = w * z'\"", "lemma zmult_eq_r:\"\\<lbrakk>(0::int) < w; z = z'\\<rbrakk> \\<Longrightarrow> z * w =  z' * w\"", "lemma zdiv_eq_l:\"\\<lbrakk>(0::int) < w; z * w  = z' * w \\<rbrakk> \\<Longrightarrow> z = z'\"", "lemma zdiv_eq_r:\"\\<lbrakk>(0::int) < w; w * z  = w * z' \\<rbrakk> \\<Longrightarrow> z = z'\"", "lemma int_nat_minus:\"0 < (n::int) \\<Longrightarrow> nat (n - 1) = (nat n) - 1\"", "lemma int_nat_add:\"\\<lbrakk>0 < (n::int); 0 < (m::int)\\<rbrakk> \\<Longrightarrow> (nat (n - 1)) + (nat (m - 1)) + (Suc 0) = nat (n + m - 1)\"", "lemma int_equation:\"(x::int) = y + z \\<Longrightarrow> x - y = z\"", "lemma int_pos_mult_monor:\"\\<lbrakk> 0 < (n::int); 0 \\<le> n * m \\<rbrakk> \\<Longrightarrow> 0 \\<le> m\"", "lemma int_pos_mult_monol:\"\\<lbrakk> 0 < (m::int); 0 \\<le> n * m \\<rbrakk> \\<Longrightarrow> 0 \\<le> n\"", "lemma zdiv_positive:\"\\<lbrakk>(0::int) \\<le> a; 0 < b\\<rbrakk> \\<Longrightarrow> 0 \\<le> a div b\"", "lemma zdiv_pos_mono_r:\"\\<lbrakk> (0::int) < w; w * z \\<le> w * z'\\<rbrakk> \\<Longrightarrow> z \\<le> z'\"", "lemma zdiv_pos_mono_l:\"\\<lbrakk> (0::int) < w; z * w \\<le> z' * w\\<rbrakk> \\<Longrightarrow> z \\<le> z'\"", "lemma zdiv_pos_pos_l:\"\\<lbrakk> (0::int) < w; 0 \\<le> z * w\\<rbrakk> \\<Longrightarrow> 0 \\<le> z\"", "lemma inEx:\"x \\<in> A \\<Longrightarrow> \\<exists>y\\<in>A. y = x\"", "lemma inEx_rev:\" \\<exists>y\\<in>A. y = x \\<Longrightarrow> x \\<in> A\"", "lemma nonempty_ex:\"A \\<noteq> {} \\<Longrightarrow> \\<exists>x. x \\<in> A\"", "lemma ex_nonempty:\"\\<exists>x. x \\<in> A \\<Longrightarrow> A \\<noteq> {}\"", "lemma not_eq_outside:\"a \\<notin> A \\<Longrightarrow> \\<forall>b\\<in>A. b \\<noteq> a\"", "lemma ex_nonempty_set:\"\\<exists>a. P a \\<Longrightarrow> {x. P x} \\<noteq> {}\"", "lemma nonempty: \"x \\<in> A \\<Longrightarrow> A \\<noteq> {}\"", "lemma subset_self:\"A \\<subseteq> A\"", "lemma conditional_subset:\"{x\\<in>A. P x} \\<subseteq> A\"", "lemma bsubsetTr:\"{x. x \\<in> A \\<and> P x} \\<subseteq> A\"", "lemma sets_not_eq:\"\\<lbrakk>A \\<noteq> B; B \\<subseteq> A\\<rbrakk> \\<Longrightarrow> \\<exists>a\\<in>A. a \\<notin> B\"", "lemma diff_nonempty:\"\\<lbrakk>A \\<noteq> B; B \\<subseteq> A\\<rbrakk> \\<Longrightarrow> A - B \\<noteq> {}\"", "lemma sub_which1:\"\\<lbrakk>A \\<subseteq> B \\<or> B \\<subseteq> A; x \\<in> A; x \\<notin> B\\<rbrakk> \\<Longrightarrow> B \\<subseteq> A\"", "lemma sub_which2:\"\\<lbrakk>A \\<subseteq> B \\<or> B \\<subseteq> A; x \\<notin> A; x \\<in> B\\<rbrakk> \\<Longrightarrow> A \\<subseteq> B\"", "lemma nonempty_int: \"A \\<inter> B \\<noteq> {} \\<Longrightarrow> \\<exists>x. x \\<in> A \\<inter> B \"", "lemma no_meet1:\"A \\<inter> B = {}\\<Longrightarrow> \\<forall>a \\<in> A. a \\<notin> B\"", "lemma no_meet2:\"A \\<inter> B = {}\\<Longrightarrow> \\<forall>a \\<in> B. a \\<notin> A\"", "lemma elem_some:\"x \\<in> A \\<Longrightarrow> \\<exists>y\\<in>A. x = y\"", "lemma singleton_sub:\"a \\<in> A \\<Longrightarrow> {a} \\<subseteq> A\"", "lemma eq_elem_in: \"\\<lbrakk> a \\<in> A; a = b \\<rbrakk> \\<Longrightarrow> b \\<in> A\"", "lemma eq_set_inc: \"\\<lbrakk> a \\<in> A; A = B \\<rbrakk> \\<Longrightarrow> a \\<in> B\"", "lemma eq_set_not_inc:\"\\<lbrakk>a \\<notin> A; A = B \\<rbrakk> \\<Longrightarrow> a \\<notin> B\"", "lemma int_subsets: \"\\<lbrakk> A1 \\<subseteq> A; B1 \\<subseteq> B \\<rbrakk> \\<Longrightarrow> A1 \\<inter> B1 \\<subseteq> A \\<inter> B\"", "lemma inter_mono:\"A \\<subseteq> B \\<Longrightarrow> A \\<inter> C \\<subseteq> B \\<inter> C\"", "lemma sub_Un1:\"B \\<subseteq>  B \\<union> C\"", "lemma sub_Un2:\"C \\<subseteq>  B \\<union> C\"", "lemma subset_contr:\"\\<lbrakk> A \\<subset> B; B \\<subseteq> A \\<rbrakk> \\<Longrightarrow> False\"", "lemma psubset_contr:\"\\<lbrakk> A \\<subset> B; B \\<subset> A \\<rbrakk> \\<Longrightarrow> False\"", "lemma eqsets_sub:\"A = B \\<Longrightarrow> A \\<subseteq> B\"", "lemma not_subseteq:\" \\<not> A \\<subseteq> B \\<Longrightarrow> \\<exists>a \\<in> A. a \\<notin> B\"", "lemma in_un1:\"\\<lbrakk> x \\<in> A \\<union> B; x \\<notin> B \\<rbrakk> \\<Longrightarrow> x \\<in> A\"", "lemma proper_subset:\"\\<lbrakk>A \\<subseteq> B; x \\<notin> A; x \\<in> B\\<rbrakk> \\<Longrightarrow> A \\<noteq> B\"", "lemma in_un2:\"\\<lbrakk> x \\<in> A \\<union> B; x \\<notin> A \\<rbrakk> \\<Longrightarrow> x \\<in> B\"", "lemma diff_disj:\"x \\<notin> A \\<Longrightarrow> A - {x} = A\"", "lemma in_diff:\"\\<lbrakk>x \\<noteq> a; x \\<in> A\\<rbrakk> \\<Longrightarrow> x \\<in> A - {a}\"", "lemma in_diff1:\"x \\<in> A - {a} \\<Longrightarrow> x \\<noteq> a\"", "lemma sub_inserted1:\"\\<lbrakk>Y \\<subseteq> insert a X; \\<not> Y \\<subseteq> X\\<rbrakk> \\<Longrightarrow> a \\<notin> X \\<and> a \\<in> Y\"", "lemma sub_inserted2:\"\\<lbrakk>Y \\<subseteq> insert a X; \\<not> Y \\<subseteq> X\\<rbrakk> \\<Longrightarrow> Y = (Y - {a}) \\<union> {a}\"", "lemma insert_sub:\"\\<lbrakk> A \\<subseteq> B; a \\<in> B\\<rbrakk> \\<Longrightarrow> (insert a A) \\<subseteq> B\"", "lemma insert_diff:\"A \\<subseteq> (insert b B) \\<Longrightarrow> A - {b} \\<subseteq> B\"", "lemma insert_inc1:\"A \\<subseteq> insert a A\"", "lemma insert_inc2:\"a \\<in> insert a A\"", "lemma nonempty_some:\"A \\<noteq> {} \\<Longrightarrow> (SOME x. x \\<in> A) \\<in> A\"", "lemma mem_family_sub_Un:\"A \\<in> C \\<Longrightarrow> A \\<subseteq> \\<Union> C\"", "lemma sub_Union:\"\\<exists>X\\<in>C. A \\<subseteq> X \\<Longrightarrow> A \\<subseteq> \\<Union> C\"", "lemma family_subset_Un_sub:\"\\<forall>A\\<in>C. A \\<subseteq> B \\<Longrightarrow> \\<Union> C \\<subseteq> B\"", "lemma in_set_with_P:\"P x \\<Longrightarrow> x \\<in> {y. P y}\"", "lemma sub_single:\"\\<lbrakk>A \\<noteq> {}; A \\<subseteq> {a}\\<rbrakk> \\<Longrightarrow> A = {a}\"", "lemma not_sub_single:\"\\<lbrakk>A \\<noteq> {}; A \\<noteq> {a}\\<rbrakk> \\<Longrightarrow> \\<not> A \\<subseteq> {a}\"", "lemma not_sub:\"\\<not> A \\<subseteq> B \\<Longrightarrow> \\<exists>a. a\\<in>A \\<and> a \\<notin> B\"", "lemma eq_fun:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; f = g \\<rbrakk> \\<Longrightarrow> g \\<in> A \\<rightarrow> B\"", "lemma eq_fun_eq_val:\" f = g \\<Longrightarrow> f x = g x\"", "lemma eq_elems_eq_val:\"x = y \\<Longrightarrow> f x = f y\"", "lemma cmp_fun:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C \\<rbrakk> \\<Longrightarrow> cmp g f \\<in> A \\<rightarrow> C\"", "lemma cmp_fun_image:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C \\<rbrakk> \\<Longrightarrow> \n                          (cmp g f) ` A =  g ` (f ` A)\"", "lemma cmp_fun_sub_image:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C; A1 \\<subseteq> A\\<rbrakk> \\<Longrightarrow> \n                          (cmp g f) ` A1 =  g ` (f ` A1)\"", "lemma restrict_fun_eq:\"\\<forall>x\\<in>A. f x = g x \\<Longrightarrow> (\\<lambda>x\\<in>A. f x) = (\\<lambda>x\\<in>A. g x)\"", "lemma funcset_mem: \"\\<lbrakk>f \\<in> A \\<rightarrow> B; x \\<in> A\\<rbrakk> \\<Longrightarrow> f x \\<in> B\"", "lemma img_subset:\"f \\<in> A \\<rightarrow> B \\<Longrightarrow> f ` A \\<subseteq> B\"", "lemma funcset_mem1:\"\\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; x \\<in> A\\<rbrakk> \\<Longrightarrow> f x \\<in> B\"", "lemma func_to_img:\"f \\<in> A \\<rightarrow> B \\<Longrightarrow> f \\<in> A \\<rightarrow> f ` A\"", "lemma restrict_in_funcset: \"\\<forall>x\\<in> A. f x \\<in> B \\<Longrightarrow> \n                                     (\\<lambda>x\\<in>A. f x)\\<in> A \\<rightarrow> B\"", "lemma funcset_eq:\"\\<lbrakk> f \\<in> extensional A; g \\<in> extensional A; \\<forall>x\\<in>A. f x = g x \\<rbrakk> \\<Longrightarrow>  f = g\"", "lemma eq_funcs:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> A \\<rightarrow> B; f = g; x \\<in> A\\<rbrakk> \\<Longrightarrow> f x = g x\"", "lemma restriction_of_domain:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> \n  restrict f A1 \\<in> A1 \\<rightarrow> B\"", "lemma restrict_restrict:\"\\<lbrakk> restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow>\n      restrict (restrict f A) A1 = restrict f A1\"", "lemma restr_restr_eq:\"\\<lbrakk> restrict f A \\<in> A \\<rightarrow> B; restrict f A = restrict g A;\nA1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> restrict f A1 = restrict g A1\"", "lemma funcTr:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; g \\<in> A \\<rightarrow> B; f = g; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a = g a\"", "lemma funcTr1:\"\\<lbrakk>f = g; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a = g a\"", "lemma restrictfun_im:\"\\<lbrakk> (restrict f A) \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow>\n       (restrict f A) ` A1 = f ` A1\"", "lemma mem_in_image:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a \\<in> f ` A \"", "lemma mem_in_image1:\"\\<lbrakk> \\<forall>l\\<in>A. f l \\<in> B; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a \\<in> f ` A \"", "lemma mem_in_image2:\"a \\<in> A \\<Longrightarrow> f a \\<in> f ` A\"", "lemma mem_in_image3:\"b \\<in> f ` A \\<Longrightarrow> \\<exists>a \\<in> A. b = f a\"", "lemma elem_in_image2: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A; x \\<in> A1\\<rbrakk> \\<Longrightarrow> f x \\<in> f` A1\"", "lemma funcs_nonempty:\"\\<lbrakk> A \\<noteq> {}; B \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (A \\<rightarrow> B) \\<noteq> {}\"", "lemma idmap_funcs: \"idmap A \\<in> A \\<rightarrow> A\"", "lemma l_idmap_comp: \"\\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk> \\<Longrightarrow> \n                   compose A (idmap B) f = f\"", "lemma r_idmap_comp:\"\\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk> \\<Longrightarrow> \n                                   compose A f (idmap A) = f\"", "lemma extend_fun: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; B \\<subseteq> B1 \\<rbrakk> \\<Longrightarrow> f \\<in> A \\<rightarrow> B1\"", "lemma restrict_fun: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> restrict f A1 \\<in> A1 \\<rightarrow> B\"", "lemma set_of_hom: \"\\<forall>x \\<in> A. f x \\<in> B \\<Longrightarrow> restrict f A \\<in> A \\<rightarrow> B\"", "lemma composition : \"\\<lbrakk> f \\<in> A \\<rightarrow>  B; g \\<in> B \\<rightarrow> C\\<rbrakk> \\<Longrightarrow> (compose A g f) \\<in> A \\<rightarrow>  C\"", "lemma comp_assoc:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C; h \\<in> C \\<rightarrow> D \\<rbrakk> \\<Longrightarrow>\n     compose A h (compose A g f) = compose A (compose B h g) f\"", "lemma restrictfun_inj: \"\\<lbrakk> inj_on f A; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> inj_on (restrict f A1) A1\"", "lemma restrict_inj:\"\\<lbrakk>inj_on f A; A1 \\<subseteq> A\\<rbrakk> \\<Longrightarrow> inj_on f A1\"", "lemma injective:\"\\<lbrakk> inj_on f A; x \\<in> A; y \\<in> A; x \\<noteq> y \\<rbrakk> \\<Longrightarrow> f x \\<noteq> f y\"", "lemma injective_iff:\"\\<lbrakk> inj_on f A; x \\<in> A; y \\<in> A\\<rbrakk> \\<Longrightarrow> \n                        (x = y) = (f x = f y)\"", "lemma injfun_elim_image:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk> \\<Longrightarrow>\n                f ` (A - {x}) = (f ` A) - {f x}\"", "lemma cmp_inj:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C; inj_on f A; inj_on g B \\<rbrakk> \\<Longrightarrow>\n         inj_on (cmp g f) A\"", "lemma cmp_assoc:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C; h \\<in> C \\<rightarrow> D; x \\<in> A\\<rbrakk> \\<Longrightarrow>\n                          (cmp h (cmp g f)) x  = (cmp (cmp h g) f) x\"", "lemma bivar_fun: \"\\<lbrakk> f \\<in> A \\<rightarrow> (B \\<rightarrow> C); a \\<in> A \\<rbrakk> \\<Longrightarrow> f a \\<in> B \\<rightarrow> C\"", "lemma bivar_fun_mem: \"\\<lbrakk> f \\<in> A \\<rightarrow> (B \\<rightarrow> C); a \\<in> A; b \\<in> B \\<rbrakk> \\<Longrightarrow> f a b \\<in> C\"", "lemma bivar_func_eq:\"\\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<rbrakk> \\<Longrightarrow>\n                         (\\<lambda>x\\<in>A. \\<lambda>y\\<in>B. f x y) =  (\\<lambda>x\\<in>A. \\<lambda>y\\<in>B. g x y)\"", "lemma set_image: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A; A2 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> \n            f`(A1 \\<inter> A2) \\<subseteq> (f` A1) \\<inter> (f` A2)\"", "lemma image_sub: \"\\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> (f`A1) \\<subseteq> B\"", "lemma image_sub0: \"f \\<in> A \\<rightarrow> B \\<Longrightarrow> (f`A) \\<subseteq> B\"", "lemma image_nonempty:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A; A1 \\<noteq> {} \\<rbrakk> \\<Longrightarrow> f ` A1 \\<noteq> {}\"", "lemma im_set_mono: \"\\<lbrakk>f \\<in>A \\<rightarrow> B; A1 \\<subseteq> A2; A2 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> (f ` A1) \\<subseteq> (f ` A2)\"", "lemma im_set_un:\"\\<lbrakk> f\\<in>A \\<rightarrow> B; A1 \\<subseteq> A; A2 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> \n             f`(A1 \\<union> A2) = (f`A1) \\<union> (f`A2)\"", "lemma im_set_un1:\"\\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; A = A1 \\<union> A2\\<rbrakk> \\<Longrightarrow> \n                                f `(A1 \\<union> A2) = f `(A1) \\<union> f `(A2)\"", "lemma im_set_un2:\"A = A1 \\<union> A2 \\<Longrightarrow>  f `A = f `(A1) \\<union> f `(A2)\"", "lemma invim: \"\\<lbrakk> f:A \\<rightarrow> B; B1 \\<subseteq> B \\<rbrakk> \\<Longrightarrow> invim f A B1 \\<subseteq> A\"", "lemma setim_cmpfn: \"\\<lbrakk> f:A \\<rightarrow> B; g:B \\<rightarrow> C; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> \n               (compose A g f)` A1 = g`(f` A1)\"", "lemma surj_to_test:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; \\<forall>b\\<in>B. \\<exists>a\\<in>A. f a = b \\<rbrakk> \\<Longrightarrow>\n                                                  surj_to f A B\"", "lemma surj_to_image:\"f \\<in> A \\<rightarrow> B \\<Longrightarrow> surj_to f A (f ` A)\"", "lemma surj_to_el:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; surj_to f A B \\<rbrakk> \\<Longrightarrow> \\<forall>b\\<in>B. \\<exists>a\\<in>A. f a = b\"", "lemma surj_to_el1:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; surj_to f A B; b\\<in>B\\<rbrakk> \\<Longrightarrow> \\<exists>a\\<in>A. f a = b\"", "lemma surj_to_el2:\"\\<lbrakk>surj_to f A B; b \\<in> B\\<rbrakk> \\<Longrightarrow> \\<exists>a\\<in>A. f a = b\"", "lemma compose_surj: \"\\<lbrakk>f:A \\<rightarrow> B; surj_to f A B; g : B \\<rightarrow> C; surj_to g B C \\<rbrakk> \n                         \\<Longrightarrow> surj_to (compose A g f) A C \"", "lemma cmp_surj: \"\\<lbrakk>f:A \\<rightarrow> B; surj_to f A B; g : B \\<rightarrow> C; surj_to g B C \\<rbrakk> \n                         \\<Longrightarrow> surj_to (cmp g f) A C \"", "lemma inj_onTr0:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; x \\<in> A; y \\<in> A; inj_on f A; f x = f y\\<rbrakk> \\<Longrightarrow> x = y\"", "lemma inj_onTr1:\"\\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x = f y\\<rbrakk>  \\<Longrightarrow> x = y\"", "lemma inj_onTr2:\"\\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x \\<noteq> f y\\<rbrakk>  \\<Longrightarrow> x \\<noteq> y\"", "lemma comp_inj: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; g \\<in> B \\<rightarrow> C; inj_on g B \\<rbrakk> \n              \\<Longrightarrow> inj_on (compose A g f) A \"", "lemma cmp_inj_1: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; g \\<in> B \\<rightarrow> C; inj_on g B \\<rbrakk> \n              \\<Longrightarrow> inj_on (cmp g f) A \"", "lemma cmp_inj_2: \"\\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A; \\<forall>k\\<in>B. g k \\<in> C; inj_on g B \\<rbrakk> \n              \\<Longrightarrow> inj_on (cmp g f) A \"", "lemma invfun_mem:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B; b \\<in> B \\<rbrakk> \n                      \\<Longrightarrow>  (invfun A B f) b \\<in> A\"", "lemma inv_func:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk> \n                      \\<Longrightarrow>  (invfun A B f) \\<in> B \\<rightarrow> A\"", "lemma invfun_r:\"\\<lbrakk> f\\<in>A \\<rightarrow> B; inj_on f A; surj_to f A B; b \\<in> B \\<rbrakk> \n                      \\<Longrightarrow> f ((invfun A B f) b) = b\"", "lemma invfun_l:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B; a \\<in> A\\<rbrakk> \n                      \\<Longrightarrow> (invfun A B f) (f a) = a\"", "lemma invfun_inj:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk> \n                      \\<Longrightarrow>  inj_on (invfun A B f) B\"", "lemma invfun_surj:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk> \n                      \\<Longrightarrow>  surj_to (invfun A B f) B A \"", "lemma idmap_bij:\"bij_to (idmap A) A A\"", "lemma bij_invfun:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B\\<rbrakk> \\<Longrightarrow>\n                              bij_to (invfun A B f) B A\"", "lemma l_inv_invfun:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk> \n                      \\<Longrightarrow> compose A (invfun A B f) f = idmap A\"", "lemma invfun_mem1:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; b \\<in> B\\<rbrakk> \\<Longrightarrow>\n                 (invfun A B f) b \\<in> A\"", "lemma invfun_r1:\"\\<lbrakk> f\\<in>A \\<rightarrow> B; bij_to f A B; b \\<in> B \\<rbrakk> \n                      \\<Longrightarrow> f ((invfun A B f) b) = b\"", "lemma invfun_l1:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; a \\<in> A\\<rbrakk> \n                      \\<Longrightarrow> (invfun A B f) (f a) = a\"", "lemma compos_invfun_r:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; g \\<in> A \\<rightarrow> C; h \\<in> B \\<rightarrow> C;\n       g \\<in> extensional A; compose B g (invfun A B f) = h\\<rbrakk> \\<Longrightarrow> \n       g = compose A h f\"", "lemma compos_invfun_l:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; g \\<in> C \\<rightarrow> B; h \\<in> C \\<rightarrow> A;\n       compose C (invfun A B f) g = h; g \\<in> extensional C \\<rbrakk> \\<Longrightarrow> \n                     g = compose C f h\"", "lemma invfun_set:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; C \\<subseteq> B\\<rbrakk> \\<Longrightarrow>\n                f ` ((invfun A B f)` C) = C\"", "lemma compos_bij:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; g \\<in> B \\<rightarrow> C; bij_to g B C\\<rbrakk> \\<Longrightarrow>\n                   bij_to (compose A g f) A C\"", "lemma nat_pos:\"0 \\<le> (l::nat)\"", "lemma Suc_pos:\"Suc k \\<le> r \\<Longrightarrow> 0 < r\"", "lemma nat_pos2:\"(k::nat) < r \\<Longrightarrow> 0 < r\"", "lemma eq_le_not:\"\\<lbrakk>(a::nat) \\<le> b; \\<not> a < b \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma im_of_constmap:\"(constmap {0} {a}) ` {0} = {a}\"", "lemma noteq_le_less:\"\\<lbrakk> m \\<le> (n::nat); m \\<noteq> n \\<rbrakk> \\<Longrightarrow> m < n\"", "lemma nat_not_le_less:\"(\\<not> (n::nat) \\<le> m) = (m < n)\"", "lemma self_le:\"(n::nat) \\<le> n\"", "lemma n_less_Suc:\"(n::nat) < Suc n\"", "lemma less_diff_pos:\"i < (n::nat) \\<Longrightarrow> 0 < n - i\"", "lemma less_diff_Suc:\"i < (n::nat) \\<Longrightarrow> n - (Suc i) = (n - i) - (Suc 0)\"", "lemma less_pre_n:\"0 < n \\<Longrightarrow> n - Suc 0 < n\"", "lemma Nset_inc_0:\"(0::nat) \\<in> {i. i \\<le> n}\"", "lemma Nset_1:\"{i. i \\<le> Suc 0} = {0, Suc 0}\"", "lemma Nset_1_1:\"(k \\<le> Suc 0) = (k = 0 \\<or> k = Suc 0)\"", "lemma Nset_2:\"{i, j} = {j, i}\"", "lemma Nset_nonempty:\"{i. i \\<le> (n::nat)} \\<noteq> {}\"", "lemma Nset_le:\"x \\<in> {i. i \\<le> n} \\<Longrightarrow> x \\<le> n\"", "lemma n_in_Nsetn:\"(n::nat) \\<in> {i. i \\<le> n}\"", "lemma Nset_pre:\"\\<lbrakk> (x::nat) \\<in> {i. i \\<le> (Suc n)}; x \\<noteq> Suc n \\<rbrakk> \\<Longrightarrow> x \\<in> {i. i \\<le> n}\"", "lemma Nset_pre1:\"{i. i \\<le> (Suc n)} - {Suc n} = {i. i \\<le> n}\"", "lemma le_Suc_mem_Nsetn:\"x \\<le> Suc n \\<Longrightarrow> x - Suc 0 \\<in> {i. i \\<le> n}\"", "lemma le_Suc_diff_le:\"x \\<le> Suc n \\<Longrightarrow> x - Suc 0 \\<le> n\"", "lemma Nset_not_pre:\"\\<lbrakk> x \\<notin> {i. i \\<le> n}; x \\<in> {i. i \\<le> (Suc n)}\\<rbrakk> \\<Longrightarrow> x = Suc n\"", "lemma mem_of_Nset:\"x \\<le> (n::nat) \\<Longrightarrow> x \\<in> {i. i \\<le> n}\"", "lemma less_mem_of_Nset:\"x < (n::nat) \\<Longrightarrow> x \\<in> {i. i \\<le> n}\"", "lemma Nset_nset:\"{i. i \\<le> (Suc (n + m))} = {i. i \\<le> n} \\<union> \n                                            nset (Suc n) (Suc (n + m))\"", "lemma Nset_nset_1:\"\\<lbrakk>0 < n; i < n\\<rbrakk> \\<Longrightarrow> {j. j \\<le> n} = {j. j \\<le> i} \\<union> \n                                                           nset (Suc i) n\"", "lemma Nset_img0:\"\\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B; (f (Suc n)) \\<in> f ` {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                   f ` {j. j \\<le> Suc n} = f ` {j. j \\<le> n}\"", "lemma Nset_img:\"f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B \\<Longrightarrow>\n         insert (f (Suc n)) (f ` {j. j \\<le> n}) = f ` {j. j \\<le> Suc n}\"", "lemma nasc_seq_mem:\"\\<lbrakk>(a::nat) \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                        (nasc_seq A a n) \\<in> A\"", "lemma nasc_seqn:\"\\<lbrakk>(a::nat) \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                               (nasc_seq A a n) < (nasc_seq A a (Suc n))\"", "lemma nasc_seqn1:\"\\<lbrakk>(a::nat) \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                             Suc (nasc_seq A a n) \\<le> (nasc_seq A a (Suc n))\"", "lemma ubs_ex_n_maxTr:\"\\<lbrakk>(a::nat) \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk>\n      \\<Longrightarrow>  (a + n) \\<le> (nasc_seq A a n)\"", "lemma ubs_ex_n_max:\"\\<lbrakk>A \\<noteq> {}; A \\<subseteq> {i. i \\<le> (n::nat)}\\<rbrakk> \\<Longrightarrow> \n                                      \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\"", "lemma n_max:\"\\<lbrakk>A \\<subseteq> {i. i \\<le> (n::nat)}; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n                    (n_max A) \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> (n_max A))\"", "lemma n_max_eq_sets:\"\\<lbrakk>A = B; A \\<noteq> {}; \\<exists>n. A \\<subseteq> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                          n_max A = n_max B\"", "lemma skip_mem:\"l \\<in> {i. i \\<le> n} \\<Longrightarrow> (skip i l) \\<in> {i. i \\<le> (Suc n)}\"", "lemma skip_fun:\"(skip i) \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> (Suc n)}\"", "lemma skip_im_Tr0:\"x \\<in> {i. i \\<le> n} \\<Longrightarrow> skip 0 x = Suc x\"", "lemma skip_im_Tr0_1:\"0 < y \\<Longrightarrow> skip 0 (y - Suc 0) = y\"", "lemma skip_im_Tr1:\"\\<lbrakk> i \\<in> {i. i \\<le> (Suc n)}; 0 < i; x \\<le> i - Suc 0 \\<rbrakk> \\<Longrightarrow>\n           skip i x = x\"", "lemma skip_im_Tr1_1:\"\\<lbrakk> i \\<in> {i. i \\<le> (Suc n)}; 0 < i; x < i\\<rbrakk> \\<Longrightarrow>\n                       skip i x = x\"", "lemma skip_im_Tr1_2:\"\\<lbrakk> i \\<le> (Suc n); x < i\\<rbrakk> \\<Longrightarrow>  skip i x = x\"", "lemma skip_im_Tr2:\"\\<lbrakk> 0 < i; i \\<in> {i. i \\<le> (Suc n)}; i \\<le> x\\<rbrakk> \\<Longrightarrow>\n      skip i x = Suc x\"", "lemma skip_im_Tr2_1:\"\\<lbrakk>i \\<in> {i. i \\<le> (Suc n)}; i \\<le> x\\<rbrakk> \\<Longrightarrow>\n                             skip i x = Suc x\"", "lemma skip_im_Tr3:\"x \\<in> {i. i \\<le> n} \\<Longrightarrow> skip (Suc n) x = x\"", "lemma skip_im_Tr4:\"\\<lbrakk>x \\<le> Suc n; 0 < x\\<rbrakk> \\<Longrightarrow> x - Suc 0 \\<le> n\"", "lemma skip_fun_im:\"i \\<in> {j. j \\<le> (Suc n)} \\<Longrightarrow> \n              (skip i) ` {j. j \\<le> n} = ({j. j \\<le> (Suc n)} - {i})\"", "lemma skip_fun_im1:\"\\<lbrakk>i \\<in> {j. j \\<le> (Suc n)}; x \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n                      (skip i) x \\<in> ({j. j \\<le> (Suc n)} - {i})\"", "lemma skip_id:\"l < i \\<Longrightarrow> skip i l = l\"", "lemma Suc_neq:\"\\<lbrakk>0 < i; i - Suc 0 < l\\<rbrakk> \\<Longrightarrow> i \\<noteq> Suc l\"", "lemma skip_il_neq_i:\"skip i l \\<noteq> i\"", "lemma skip_inj:\"\\<lbrakk>i \\<in> {k. k \\<le> n}; j \\<in> {k. k \\<le> n}; i \\<noteq> j\\<rbrakk> \\<Longrightarrow> \n                         skip k i \\<noteq> skip k j\"", "lemma le_imp_add_int:\" i \\<le> (j::nat) \\<Longrightarrow> \\<exists>k. j = i + k\"", "lemma jointfun_hom0:\"\\<lbrakk> f \\<in> {j. j \\<le> n} \\<rightarrow> A; g \\<in> {k. k \\<le> m} \\<rightarrow> B \\<rbrakk> \\<Longrightarrow> \n        (jointfun n f m g) \\<in> {l. l \\<le> (Suc (n + m))} \\<rightarrow>  (A \\<union> B)\"", "lemma jointfun_mem:\"\\<lbrakk>\\<forall>j \\<le> (n::nat). f j \\<in> A; \\<forall>j \\<le> m. g j \\<in> B; \n             l \\<le> (Suc (n + m))\\<rbrakk> \\<Longrightarrow> (jointfun n f m g) l \\<in> (A \\<union> B)\"", "lemma jointfun_inj:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B; inj_on f {j. j \\<le> n};\n      b \\<notin> f ` {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n      inj_on (jointfun n f 0 (\\<lambda>k\\<in>{0::nat}. b)) {j. j \\<le> Suc n}\"", "lemma slide_hom:\"i \\<le> j \\<Longrightarrow> (slide i) \\<in> {l. l \\<le> (j - i)} \\<rightarrow> nset i j\"", "lemma slide_mem:\"\\<lbrakk> i \\<le> j; l \\<in> {k. k \\<le> (j - i)}\\<rbrakk> \\<Longrightarrow> slide i l \\<in> nset i j\"", "lemma slide_iM:\"(slide i) ` {l. 0 \\<le> l} = {k. i \\<le> k}\"", "lemma jointfun_hom:\"\\<lbrakk> f \\<in> {i. i \\<le> n} \\<rightarrow> A; g \\<in> {j. j \\<le> m} \\<rightarrow> B \\<rbrakk> \\<Longrightarrow> \n                   (jointfun n f m g) \\<in> {j. j \\<le> (Suc (n + m))} \\<rightarrow> A \\<union> B\"", "lemma im_jointfunTr1:\"(jointfun n f m g) ` {i. i \\<le> n} = f ` {i. i \\<le> n}\"", "lemma im_jointfunTr2:\"(jointfun n f m g) ` (nset (Suc n) (Suc (n + m))) = \n                       g ` ({j. j \\<le> m})\"", "lemma im_jointfun:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A; g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk> \\<Longrightarrow> \n    (jointfun n f m g) `({j. j \\<le> (Suc (n + m))}) = \n                           f `{j. j \\<le> n} \\<union> g `{j. j \\<le>  m}\"", "lemma im_jointfun1:\"(jointfun n f m g) `({j. j \\<le> (Suc (n + m))}) = \n                                      f `{j. j \\<le> n} \\<union> g ` {j. j \\<le> m}\"", "lemma jointfun_surj:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A; surj_to f {j. j \\<le> (n::nat)} A; \n      g \\<in> {j. j \\<le> (m::nat)} \\<rightarrow> B; surj_to g {j. j \\<le> m} B\\<rbrakk> \\<Longrightarrow> \n       surj_to (jointfun n f m g) {j. j \\<le> Suc (n + m)} (A \\<union> B)\"", "lemma Nset_un:\"{j. j \\<le> (Suc n)} = {j. j \\<le> n} \\<union> {Suc n}\"", "lemma Nsetn_sub: \"{j. j \\<le> n} \\<subseteq> {j. j \\<le> (Suc n)}\"", "lemma Nset_pre_sub:\"(0::nat) < k \\<Longrightarrow> {j. j \\<le> (k - Suc 0)} \\<subseteq> {j. j \\<le> k}\"", "lemma Nset_pre_un:\"(0::nat) < k \\<Longrightarrow> {j. j \\<le> k} = {j. j \\<le> (k - Suc 0)} \\<union> {k}\"", "lemma Nsetn_sub_mem:\" l \\<in> {j. j \\<le> n} \\<Longrightarrow> l \\<in> {j. j \\<le> (Suc n)}\"", "lemma Nsetn_sub_mem1:\"\\<forall>j. j \\<in> {j. j \\<le> n} \\<longrightarrow> j \\<in> {j. j \\<le> (Suc n)}\"", "lemma Nset_Suc:\"{j. j \\<le> (Suc n)} = insert (Suc n) {j. j \\<le> n}\"", "lemma nsetnm_sub_mem:\"\\<forall>j. j \\<in>nset n (n + m) \\<longrightarrow> j \\<in> nset n (Suc (n + m))\"", "lemma Nset_0:\"{j. j \\<le> (0::nat)} = {0}\"", "lemma Nset_Suc0:\"{i. i \\<le> (Suc 0)} = {0, Suc 0}\"", "lemma Nset_Suc_Suc:\"Suc (Suc 0) \\<le> n \\<Longrightarrow>\n       {j. j \\<le> (n - Suc (Suc 0))} = {j. j \\<le> n} - {n - Suc 0, n}\"", "lemma func_pre:\"f \\<in> {j. j \\<le> (Suc n)} \\<rightarrow> A \\<Longrightarrow> f \\<in> {j. j \\<le> n} \\<rightarrow> A\"", "lemma image_Nset_Suc:\"f ` ({j. j \\<le> (Suc n)}) =\n                             insert (f (Suc n)) (f ` {j. j \\<le> n})\"", "lemma ndec_seq_mem:\"\\<lbrakk>a \\<in> (A::nat set); \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                        (ndec_seq A a n) \\<in> A\"", "lemma ndec_seqn:\"\\<lbrakk>a \\<in> (A::nat set);\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                       (ndec_seq A a (Suc n)) < (ndec_seq A a n)\"", "lemma ndec_seqn1:\"\\<lbrakk>a \\<in> (A::nat set); \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                       (ndec_seq A a (Suc n)) \\<le> (ndec_seq A a n) - 1\"", "lemma ex_NleastTr:\"\\<lbrakk>a \\<in> (A::nat set); \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                        (ndec_seq A a n) \\<le> (a - n)\"", "lemma nat_le:\"((a::nat) - (a + 1)) \\<le> 0\"", "lemma ex_Nleast:\"(A::nat set) \\<noteq> {} \\<Longrightarrow> \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\"", "lemma Nleast:\"(A::nat set) \\<noteq> {} \\<Longrightarrow> Nleast A \\<in> A \\<and> (\\<forall>x\\<in>A. (Nleast A) \\<le> x)\"", "lemma jointgd_tool1:\" 0 < i \\<Longrightarrow> 0 \\<le> i - Suc 0\"", "lemma jointgd_tool2:\" 0 < i \\<Longrightarrow> i = Suc (i - Suc 0)\"", "lemma jointgd_tool3:\"\\<lbrakk>0 < i;  i \\<le> m\\<rbrakk> \\<Longrightarrow> i - Suc 0 \\<le> (m - Suc 0)\"", "lemma jointgd_tool4:\"n < i \\<Longrightarrow> i - n = Suc( i - Suc n)\"", "lemma pos_prec_less:\"0 < i \\<Longrightarrow> i - Suc 0 < i\"", "lemma Un_less_Un:\"\\<lbrakk>f \\<in> {j. j \\<le> (Suc n)} \\<rightarrow> (X::'a set set); \n        A \\<subseteq> \\<Union>(f ` {j. j \\<le> (Suc n)}); \n       i \\<in> {j. j \\<le> (Suc n)}; j \\<in> {l. l \\<le> (Suc n)}; i \\<noteq> j \\<and> f i \\<subseteq> f j\\<rbrakk>\n       \\<Longrightarrow> A \\<subseteq> \\<Union>(compose {j. j \\<le> n} f (skip i) ` {j. j \\<le> n})\"", "lemma linorder_linear1:\"(m::int) < n \\<or> n \\<le> m\"", "lemma dec_seq_mem:\"\\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                        (dec_seq A a n) \\<in> A\"", "lemma dec_seqn:\"\\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                       (dec_seq A a (Suc n)) < (dec_seq A a n)\"", "lemma dec_seqn1:\"\\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                       (dec_seq A a (Suc n)) \\<le> (dec_seq A a n) - 1\"", "lemma lbs_ex_ZleastTr:\"\\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                        (dec_seq A a n) \\<le> (a - int(n))\"", "lemma big_int_less:\"a - int(nat(abs(a) + abs(N) + 1)) < N\"", "lemma lbs_ex_Zleast:\"\\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n\\<rbrakk> \\<Longrightarrow> \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\"", "lemma Zleast:\"\\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n\\<rbrakk> \\<Longrightarrow> Zleast A \\<in> A \\<and>\n               (\\<forall>x\\<in>A. (Zleast A) \\<le> x)\"", "lemma less_convert1:\"\\<lbrakk> a = c; a < b \\<rbrakk> \\<Longrightarrow> c < b\"", "lemma less_convert2:\"\\<lbrakk>a = b; b < c\\<rbrakk> \\<Longrightarrow> a < c\"", "lemma ant_z_in_Ainteg:\"(z::int, 0) \\<in> Ainteg\"", "lemma ant_inf_in_Ainteg:\"((0::int), 1) \\<in> Ainteg\"", "lemma ant_minf_in_Ainteg:\"((0::int), -1) \\<in> Ainteg\"", "lemma ant_0_in_Ainteg:\"((0::int), 0) \\<in> Ainteg\"", "lemma an_0[simp]:\"an 0 = 0\"", "lemma an_1[simp]:\"an 1 = 1\"", "lemma mem_ant:\"(a::ant) = -\\<infinity> \\<or> (\\<exists>(z::int). a = ant z) \\<or> a = \\<infinity>\"", "lemma minf:\"-\\<infinity> = Abs_Ainteg((0,-1))\"", "lemma z_neq_inf[simp]:\"(ant z) \\<noteq> \\<infinity> \"", "lemma z_neq_minf[simp]:\"(ant z) \\<noteq> -\\<infinity>\"", "lemma minf_neq_inf[simp]:\"-\\<infinity> \\<noteq> \\<infinity>\"", "lemma a_ipi[simp]:\"\\<infinity> + \\<infinity> = \\<infinity>\"", "lemma a_zpi[simp]:\"(ant z) + \\<infinity>  = \\<infinity>\"", "lemma a_ipz[simp]:\" \\<infinity> + (ant z) = \\<infinity>\"", "lemma a_zpz:\"(ant m) + (ant n) = ant (m + n)\"", "lemma a_mpi[simp]:\"-\\<infinity> + \\<infinity>  = 0\"", "lemma a_ipm[simp]:\"\\<infinity> + (-\\<infinity>) = 0\"", "lemma a_mpm[simp]:\"-\\<infinity> + (-\\<infinity>) = -\\<infinity>\"", "lemma a_mpz[simp]:\"-\\<infinity> + (ant m) = -\\<infinity>\"", "lemma a_zpm[simp]:\"(ant m) + (-\\<infinity>) = -\\<infinity>\"", "lemma a_mdi[simp]:\"-\\<infinity> - \\<infinity>  = - \\<infinity>\"", "lemma a_zdz:\"(ant m) - (ant n) = ant (m - n)\"", "lemma a_i_i[simp]:\"\\<infinity> * \\<infinity> = \\<infinity>\"", "lemma a_0_i[simp]:\"0 * \\<infinity> = 0\"", "lemma a_i_0[simp]:\"\\<infinity> * 0 = 0\"", "lemma a_0_m[simp]:\"0 * (-\\<infinity>) = 0\"", "lemma a_m_0[simp]:\"(-\\<infinity>) * 0 = 0\"", "lemma a_m_i[simp]:\"(-\\<infinity>) * \\<infinity> = -\\<infinity>\"", "lemma a_i_m[simp]:\"\\<infinity> * (-\\<infinity>) = - \\<infinity>\"", "lemma a_pos_i[simp]:\"0 < m \\<Longrightarrow> (ant m) * \\<infinity> = \\<infinity>\"", "lemma a_i_pos[simp]:\"0 < m \\<Longrightarrow> \\<infinity> * (ant m) = \\<infinity>\"", "lemma a_neg_i[simp]:\"m < 0 \\<Longrightarrow> (ant m) * \\<infinity> = -\\<infinity>\"", "lemma a_i_neg[simp]:\"m < 0 \\<Longrightarrow> \\<infinity> * (ant m) = -\\<infinity>\"", "lemma a_z_z:\"(ant m) * (ant n) = ant (m*n)\"", "lemma a_pos_m[simp]:\"0 < m \\<Longrightarrow> (ant m) * (-\\<infinity>) = -\\<infinity>\"", "lemma a_m_pos[simp]:\"0 < m \\<Longrightarrow> (-\\<infinity>) * (ant m) = -\\<infinity>\"", "lemma a_neg_m[simp]:\"m < 0 \\<Longrightarrow> (ant m) * (-\\<infinity>) = \\<infinity>\"", "lemma neg_a_m[simp]:\"m < 0 \\<Longrightarrow> (-\\<infinity>) * (ant m) = \\<infinity>\"", "lemma a_m_m[simp]:\"(-\\<infinity>) * (-\\<infinity>) = \\<infinity>\"", "lemma inj_on_Abs_Ainteg:\"inj_on Abs_Ainteg Ainteg\"", "lemma an_Suc:\"an (Suc n) = an n + 1\"", "lemma aeq_zeq [iff]: \"(ant m = ant n) = (m = n)\"", "lemma aminus:\"- ant m = ant (-m)\"", "lemma aminusZero:\"- ant 0 = ant 0\"", "lemma  ant_0: \"ant 0 = (0::ant)\"", "lemma inf_neq_0[simp]:\"\\<infinity> \\<noteq> 0\"", "lemma zero_neq_inf[simp]:\"0 \\<noteq> \\<infinity>\"", "lemma minf_neq_0[simp]:\"-\\<infinity> \\<noteq> 0\"", "lemma zero_neq_minf[simp]:\"0 \\<noteq> -\\<infinity>\"", "lemma a_minus_zero[simp]:\"-(0::ant) = 0\"", "lemma a_minus_minus: \"- (- z) = (z::ant)\"", "lemma aminus_0: \"- (- 0) = (0::ant)\"", "lemma a_a_z_0:\"\\<lbrakk> 0 < z; a * ant z = 0\\<rbrakk> \\<Longrightarrow> a = 0\"", "lemma adiv_eq:\"\\<lbrakk> z \\<noteq> 0; a * (ant z) = b * (ant z)\\<rbrakk> \\<Longrightarrow> a = b\"", "lemma aminus_add_distrib: \"- (z + w) = (- z) + (- w::ant)\"", "lemma aadd_commute:\"(x::ant) + y = y + x\"", "lemma z_in_aug_inf:\"ant z \\<in> Z\\<^sub>\\<infinity>\"", "lemma Zero_in_aug_inf:\"0 \\<in> Z\\<^sub>\\<infinity>\"", "lemma z_in_aug_minf:\"ant z \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\"", "lemma mem_aug_minf:\"a \\<in> Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow> a = - \\<infinity> \\<or> (\\<exists>z. a = ant z)\"", "lemma minus_an_in_aug_minf:\" - an n \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>\"", "lemma Zero_in_aug_minf:\"0 \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\"", "lemma aadd_assoc_i: \"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>; z \\<in> Z\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> (x + y) + z = x + (y + z)\"", "lemma aadd_assoc_m: \"\\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; z \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> \n                                 (x + y) + z = x + (y + z)\"", "lemma aadd_0_r: \"x + (0::ant) = x\"", "lemma aadd_0_l: \"(0::ant) + x = x\"", "lemma aadd_minus_inv: \"(- x) + x = (0::ant)\"", "lemma aadd_minus_r: \"x + (- x) = (0::ant)\"", "lemma ant_minus_inj:\"ant z \\<noteq> ant w \\<Longrightarrow> - ant z \\<noteq> - ant w\"", "lemma aminus_mult_minus: \"(- (ant z)) * (ant w) = - ((ant z) * (ant w))\"", "lemma amult_commute: \"(x::ant) * y = y * x\"", "lemma z_le_i[simp]:\"(ant x) \\<le> \\<infinity> \"", "lemma z_less_i[simp]:\"(ant x) < \\<infinity> \"", "lemma m_le_z:\"-\\<infinity> \\<le> (ant x) \"", "lemma m_less_z[simp]:\"-\\<infinity> < (ant x)\"", "lemma noninf_mem_Z:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; x \\<noteq> \\<infinity>\\<rbrakk> \\<Longrightarrow> \\<exists>(z::int). x = ant z\"", "lemma z_mem_Z:\"ant z \\<in> Z\\<^sub>\\<infinity>\"", "lemma inf_ge_any[simp]:\"x \\<le> \\<infinity>\"", "lemma zero_lt_inf:\"0 < \\<infinity>\"", "lemma minf_le_any[simp]:\"-\\<infinity> \\<le> x\"", "lemma minf_less_0:\"-\\<infinity> < 0\"", "lemma ale_antisym[simp]:\"\\<lbrakk>(x::ant) \\<le> y; y \\<le> x \\<rbrakk> \\<Longrightarrow> x = y\"", "lemma x_gt_inf[simp]:\"\\<infinity> \\<le> x \\<Longrightarrow> x = \\<infinity>\"", "lemma Zinf_pOp_closed:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> x + y \\<in> Z\\<^sub>\\<infinity>\"", "lemma Zminf_pOp_closed:\"\\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> x + y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\"", "lemma amult_distrib1:\"(ant z) \\<noteq> 0 \\<Longrightarrow> \n             (a + b) * (ant z) = a * (ant z) + b * (ant z)\"", "lemma amult_0_r:\"(ant z) * 0 = 0\"", "lemma amult_0_l:\"0 * (ant z) = 0\"", "lemma asprod_pos_inf[simp]:\"0 < m \\<Longrightarrow> m *\\<^sub>a \\<infinity> = \\<infinity>\"", "lemma asprod_neg_inf[simp]:\"m < 0 \\<Longrightarrow> m *\\<^sub>a \\<infinity> = -\\<infinity>\"", "lemma asprod_pos_minf[simp]:\"0 < m \\<Longrightarrow> m *\\<^sub>a (-\\<infinity>) = (-\\<infinity>)\"", "lemma asprod_neg_minf[simp]:\"m < 0 \\<Longrightarrow> m *\\<^sub>a (-\\<infinity>) = \\<infinity>\"", "lemma asprod_mult:\" m *\\<^sub>a (ant n) = ant(m * n)\"", "lemma asprod_1:\"1 *\\<^sub>a x = x\"", "lemma agsprod_assoc_a:\"m *\\<^sub>a (n *\\<^sub>a (ant x)) = (m * n) *\\<^sub>a (ant x)\"", "lemma agsprod_assoc:\"\\<lbrakk>m \\<noteq> 0; n \\<noteq> 0\\<rbrakk> \\<Longrightarrow> m *\\<^sub>a (n *\\<^sub>a x) = (m * n) *\\<^sub>a x\"", "lemma asprod_distrib1:\"m \\<noteq> 0 \\<Longrightarrow> m *\\<^sub>a (x + y) = (m *\\<^sub>a x) + (m *\\<^sub>a y)\"", "lemma asprod_0_x[simp]:\"0 *\\<^sub>a x = 0\"", "lemma asprod_n_0:\"n *\\<^sub>a 0 = 0\"", "lemma asprod_distrib2:\"\\<lbrakk>0 < i; 0 < j\\<rbrakk> \\<Longrightarrow> (i + j) *\\<^sub>a x = (i *\\<^sub>a x) + (j *\\<^sub>a x)\"", "lemma asprod_minus:\"x \\<noteq> -\\<infinity> \\<and> x \\<noteq> \\<infinity> \\<Longrightarrow> - z *\\<^sub>a x = z *\\<^sub>a (- x)\"", "lemma asprod_div_eq:\"\\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y\\<rbrakk> \\<Longrightarrow> x = y\"", "lemma asprod_0:\"\\<lbrakk>z \\<noteq> 0; z *\\<^sub>a x = 0 \\<rbrakk> \\<Longrightarrow> x = 0\"", "lemma asp_z_Z:\"z *\\<^sub>a ant x \\<in> Z\\<^sub>\\<infinity>\"", "lemma tna_ant:\" tna (ant z) = z\"", "lemma ant_tna:\"x \\<noteq> \\<infinity> \\<and> x \\<noteq> -\\<infinity> \\<Longrightarrow>  ant (tna x) = x\"", "lemma ant_sol:\"\\<lbrakk>a \\<in> Z\\<^sub>\\<infinity>; b \\<in> Z\\<^sub>\\<infinity>; c \\<in> Z\\<^sub>\\<infinity>; b \\<noteq> \\<infinity>; a = b + c\\<rbrakk> \\<Longrightarrow> a - b = c\"", "lemma zneq_aneq:\"(n \\<noteq> m) = ((ant n) \\<noteq> (ant m))\"", "lemma ale:\"(n \\<le> m) = ((ant n) \\<le>(ant m))\"", "lemma aless:\"(n < m) = ((ant n) < (ant m))\"", "lemma ale_refl: \"w \\<le> (w::ant)\"", "lemma aeq_ale:\"(a::ant) = b \\<Longrightarrow> a \\<le> b\"", "lemma ale_trans: \"\\<lbrakk> (i::ant) \\<le> j; j \\<le> k \\<rbrakk> \\<Longrightarrow> i \\<le> k\"", "lemma aless_le_not_le: \"((w::ant) < z) = (w \\<le> z \\<and> \\<not> z \\<le> w)\"", "lemma ale_linear: \"(z::ant) \\<le> w \\<or> w \\<le> z\"", "lemmas aless_linear = less_linear [where 'a = ant]", "lemma ant_eq_0_conv [simp]: \"(ant n = 0) = (n = 0)\"", "lemma aless_zless: \"(ant m < ant n) = (m<n)\"", "lemma a0_less_int_conv [simp]: \"(0 < ant n) = (0 < n)\"", "lemma a0_less_1: \"0 < (1::ant)\"", "lemma a0_neq_1 [simp]: \"0 \\<noteq> (1::ant)\"", "lemma ale_zle [simp]: \"((ant i) \\<le> (ant j)) = (i\\<le>j)\"", "lemma ant_1 [simp]: \"ant 1 = 1\"", "lemma zpos_apos:\"(0 \\<le> n) = (0 \\<le> (ant n))\"", "lemma zposs_aposss:\"(0 < n) = (0 < (ant n))\"", "lemma an_nat_pos[simp]:\"0 \\<le> an n\"", "lemma amult_one_l:\" 1 * (x::ant) = x\"", "lemma amult_one_r:\"(x::ant)* 1 = x\"", "lemma amult_eq_eq_r:\"\\<lbrakk>z \\<noteq> 0;  a * ant z = b * ant z\\<rbrakk> \\<Longrightarrow> a = b\"", "lemma amult_eq_eq_l:\"\\<lbrakk>z \\<noteq> 0;  (ant z) * a = (ant z) * b\\<rbrakk> \\<Longrightarrow> a = b\"", "lemma amult_pos:\"\\<lbrakk>0 < b; 0 \\<le> x\\<rbrakk>  \\<Longrightarrow> x \\<le> (b *\\<^sub>a x)\"", "lemma asprod_amult:\"0 < z \\<Longrightarrow> z *\\<^sub>a x = (ant z) * x\"", "lemma amult_pos1:\"\\<lbrakk>0 < b; 0 \\<le> x\\<rbrakk>  \\<Longrightarrow> x \\<le> ((ant b) * x)\"", "lemma amult_pos_mono_l:\"0 < w \\<Longrightarrow> (((ant w) * x) \\<le> ((ant w) * y)) =  (x \\<le> y)\"", "lemma amult_pos_mono_r:\"0 < w \\<Longrightarrow> ((x * (ant w)) \\<le> (y * (ant w))) =  (x \\<le> y)\"", "lemma apos_neq_minf:\"0 \\<le> a \\<Longrightarrow> a \\<noteq> -\\<infinity>\"", "lemma asprod_pos_mono:\"0 < w \\<Longrightarrow> ((w *\\<^sub>a x) \\<le> (w *\\<^sub>a y)) =  (x \\<le> y)\"", "lemma a_inv:\"(a::ant) + b = 0 \\<Longrightarrow> a = -b\"", "lemma asprod_pos_pos:\"0 \\<le> x \\<Longrightarrow> 0 \\<le> int n *\\<^sub>a x\"", "lemma asprod_1_x[simp]:\"1 *\\<^sub>a x = x\"", "lemma asprod_n_1[simp]:\"n *\\<^sub>a 1 = ant n\"", "lemma aless_imp_le:\" x < (y::ant) \\<Longrightarrow> x \\<le> y\"", "lemma gt_a0_ge_1:\"(0::ant) < x \\<Longrightarrow> 1 \\<le> x\"", "lemma gt_a0_ge_aN:\"\\<lbrakk>0 < x; N \\<noteq> 0\\<rbrakk>  \\<Longrightarrow> (ant (int N)) \\<le> (int N) *\\<^sub>a x\"", "lemma aless_le_trans:\"\\<lbrakk>(x::ant) < y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x < z\"", "lemma ale_less_trans:\"\\<lbrakk>(x::ant) \\<le> y; y < z\\<rbrakk> \\<Longrightarrow> x < z\"", "lemma aless_trans:\"\\<lbrakk>(x::ant) < y; y < z\\<rbrakk> \\<Longrightarrow> x < z\"", "lemma ale_neq_less:\"\\<lbrakk> (x::ant)\\<le> y; x \\<noteq> y\\<rbrakk> \\<Longrightarrow> x < y\"", "lemma aneg_le:\"(\\<not> (x::ant) \\<le> y) = (y  <  x)\"", "lemma aneg_less:\"(\\<not> x < (y::ant)) = (y \\<le> x)\"", "lemma aadd_le_mono:\"x \\<le> (y::ant) \\<Longrightarrow> x + z \\<le> y + z\"", "lemma aadd_less_mono_z:\"(x::ant) < y \\<Longrightarrow> (x + (ant z)) < (y + (ant z))\"", "lemma aless_le_suc[simp]:\"(a::ant) < b \\<Longrightarrow> a + 1 \\<le> b\"", "lemma aposs_le_1:\"(0::ant) < x \\<Longrightarrow> 1 \\<le> x\"", "lemma pos_in_aug_inf:\"(0::ant) \\<le> x \\<Longrightarrow> x \\<in> Z\\<^sub>\\<infinity>\"", "lemma aug_inf_noninf_is_z:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; x \\<noteq> \\<infinity>\\<rbrakk> \\<Longrightarrow> \\<exists>z. x = ant z\"", "lemma aadd_two_pos:\"\\<lbrakk>0 \\<le> (x::ant); 0 \\<le> y\\<rbrakk> \\<Longrightarrow> 0 \\<le> x + y\"", "lemma aadd_pos_poss:\"\\<lbrakk>(0::ant) \\<le> x; 0 < y\\<rbrakk> \\<Longrightarrow> 0 < (x + y)\"", "lemma aadd_poss_pos:\"\\<lbrakk>(0::ant) < x; 0 \\<le> y\\<rbrakk> \\<Longrightarrow> 0 < (x + y)\"", "lemma aadd_pos_le:\"0 \\<le> (a::ant) \\<Longrightarrow> b \\<le> a + b\"", "lemma aadd_poss_less:\"\\<lbrakk>b \\<noteq> \\<infinity>; b \\<noteq> -\\<infinity>; 0 < a\\<rbrakk>  \\<Longrightarrow> b < a + b\"", "lemma ale_neg:\"(0::ant) \\<le> x \\<Longrightarrow> (- x) \\<le> 0\"", "lemma ale_diff_pos:\"(x::ant) \\<le> y \\<Longrightarrow> 0 \\<le> (y - x)\"", "lemma aless_diff_poss:\"(x::ant) < y \\<Longrightarrow> 0 < (y - x)\"", "lemma ale_minus:\" (x::ant) \\<le> y \\<Longrightarrow> - y \\<le> - x\"", "lemma aless_minus:\"(x::ant) < y \\<Longrightarrow> - y < - x\"", "lemma aadd_minus_le:\"(a::ant) \\<le> 0 \\<Longrightarrow> a + b \\<le> b\"", "lemma aadd_minus_less:\"\\<lbrakk>b \\<noteq> -\\<infinity> \\<and> b \\<noteq> \\<infinity>; (a::ant) < 0\\<rbrakk> \\<Longrightarrow> a + b < b\"", "lemma an_inj:\"an n = an m \\<Longrightarrow> n = m\"", "lemma nat_eq_an_eq:\"n = m \\<Longrightarrow> an n = an m\"", "lemma aneq_natneq:\"(an n \\<noteq> an m) = (n \\<noteq> m)\"", "lemma ale_natle:\" (an n \\<le> an m) = (n \\<le> m)\"", "lemma aless_natless:\"(an n < an m) = (n < m)\"", "lemma na_an:\"na (an n) = n\"", "lemma asprod_ge:\n  \"0 < b \\<Longrightarrow> N \\<noteq> 0 \\<Longrightarrow> an N \\<le> int N *\\<^sub>a b\"", "lemma an_npn:\"an (n + m) = an n + an m\"", "lemma an_ndn:\"n \\<le> m \\<Longrightarrow> an (m - n) = an m - an n\"", "lemma amin_ge:\"x \\<le> amin x y \\<or> y \\<le> amin x y\"", "lemma amin_le_l:\"amin x y \\<le> x\"", "lemma amin_le_r:\"amin x y \\<le> y\"", "lemma amax_le:\"amax x y \\<le> x \\<or> amax x y \\<le> y\"", "lemma amax_le_n:\"\\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> amax x y \\<le> n\"", "lemma amax_ge_l:\"x \\<le> amax x y\"", "lemma amax_ge_r:\"y \\<le> amax x y\"", "lemma amin_mem_i:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> amin x y \\<in> Z\\<^sub>\\<infinity>\"", "lemma amax_mem_m:\"\\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> amax x y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\"", "lemma amin_commute:\"amin x y = amin y x\"", "lemma amin_mult_pos:\"0 < z \\<Longrightarrow> amin (z *\\<^sub>a x) (z *\\<^sub>a y) = z *\\<^sub>a amin x y\"", "lemma amin_amult_pos:\"0 < z \\<Longrightarrow> \n         amin ((ant z) * x) ((ant z) * y) = (ant z) * amin x y\"", "lemma times_amin:\"\\<lbrakk>0 < a; amin (x * (ant a)) (y * (ant a)) \\<le> z * (ant a)\\<rbrakk> \\<Longrightarrow>\n                     amin x y \\<le> z\"", "lemma Amin_memTr:\"f \\<in> {i. i \\<le> n} \\<rightarrow> Z\\<^sub>\\<infinity>  \\<longrightarrow> Amin n f \\<in>  Z\\<^sub>\\<infinity>\"", "lemma Amin_mem:\"f \\<in> {i. i \\<le> n} \\<rightarrow>  Z\\<^sub>\\<infinity> \\<Longrightarrow> Amin n f \\<in>  Z\\<^sub>\\<infinity>\"", "lemma Amax_memTr:\"f \\<in> {i. i \\<le> n} \\<rightarrow> Z\\<^sub>-\\<^sub>\\<infinity>  \\<longrightarrow> Amax n f \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>\"", "lemma Amax_mem:\"f \\<in> {i. i \\<le> n} \\<rightarrow>  Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow> Amax n f \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>\"", "lemma Amin_mem_mem:\"\\<forall>j\\<le> n. f j \\<in> Z\\<^sub>\\<infinity> \\<Longrightarrow> Amin n f \\<in> Z\\<^sub>\\<infinity>\"", "lemma Amax_mem_mem:\"\\<forall>j \\<le> n. f j \\<in> Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow> Amax n f \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\"", "lemma Amin_leTr:\"f \\<in> {i. i \\<le> n} \\<rightarrow>  Z\\<^sub>\\<infinity> \\<longrightarrow> (\\<forall>j\\<in>{i. i \\<le> n}. Amin n f \\<le> (f j))\"", "lemma Amin_le:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow>  Z\\<^sub>\\<infinity>; j \\<in> {k. k \\<le> n}\\<rbrakk> \\<Longrightarrow> Amin n f \\<le> (f j)\"", "lemma Amax_geTr:\"f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>-\\<^sub>\\<infinity> \\<longrightarrow> (\\<forall>j\\<in>{j. j \\<le> n}. (f j) \\<le> Amax n f)\"", "lemma Amax_ge:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>-\\<^sub>\\<infinity>; j \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n                                                 (f j) \\<le> (Amax n f)\"", "lemma Amin_mem_le:\"\\<lbrakk>\\<forall>j \\<le> n. (f j) \\<in>  Z\\<^sub>\\<infinity>; j \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n                                           (Amin n f) \\<le> (f j)\"", "lemma Amax_mem_le:\"\\<lbrakk>\\<forall>j \\<le> n. (f j) \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>; j \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n                                           (f j) \\<le> (Amax n f)\"", "lemma amin_ge1:\"\\<lbrakk>(z::ant) \\<le> x; z \\<le> y \\<rbrakk> \\<Longrightarrow> z \\<le> amin x y\"", "lemma amin_gt:\"\\<lbrakk>(z::ant) < x; z < y\\<rbrakk> \\<Longrightarrow> z < amin x y\"", "lemma Amin_ge1Tr:\"(\\<forall>j\\<le>(Suc n). (f j) \\<in> Z\\<^sub>\\<infinity> \\<and> z \\<le> (f j)) \\<longrightarrow> \n                                            z \\<le> (Amin (Suc n) f)\"", "lemma Amin_ge1:\"\\<lbrakk> \\<forall>j \\<le> (Suc n). f j \\<in> Z\\<^sub>\\<infinity>; \\<forall>j \\<le> (Suc n). z \\<le> (f j)\\<rbrakk> \\<Longrightarrow> \n                             z \\<le> (Amin (Suc n) f)\"", "lemma amin_trans1:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>; z \\<in> Z\\<^sub>\\<infinity>; z \\<le> x \\<rbrakk> \\<Longrightarrow> \n                           amin z y \\<le> amin x y\"", "lemma inf_in_aug_inf:\"\\<infinity>  \\<in> Z\\<^sub>\\<infinity>\"", "lemma aasc_seq_mem:\"\\<lbrakk>a \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                            (aasc_seq A a n) \\<in> A\"", "lemma aasc_seqn:\"\\<lbrakk>a \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                         (aasc_seq A a n) < (aasc_seq A a (Suc n))\"", "lemma aasc_seqn1:\"\\<lbrakk>a \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                        (aasc_seq A a n) + 1 \\<le> (aasc_seq A a (Suc n))\"", "lemma aubs_ex_n_maxTr:\"\\<lbrakk>a \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                                         (a + an n) \\<le> (aasc_seq A a n)\"", "lemma aubs_ex_AMax:\"\\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\"", "lemma AMax:\"\\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n                    (AMax A) \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> (AMax A))\"", "lemma AMax_mem:\"\\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> (AMax A) \\<in> A\"", "lemma rev_map_nonempty:\"A \\<noteq> {} \\<Longrightarrow> rev_o ` A \\<noteq> {}\"", "lemma rev_map:\"rev_o \\<in> LBset (ant (-z)) \\<rightarrow> UBset (ant z)\"", "lemma albs_ex_AMin:\"\\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\"", "lemma AMin:\"\\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n                    (AMin A) \\<in> A \\<and> (\\<forall>x\\<in>A. (AMin A) \\<le> x)\"", "lemma AMin_mem:\"\\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> (AMin A) \\<in> A\"", "lemma age_plus:\"\\<lbrakk>0 \\<le> (a::ant); 0 \\<le> b; a + b \\<le> c\\<rbrakk> \\<Longrightarrow> a \\<le> c\"", "lemma age_diff_le:\"\\<lbrakk>(a::ant) \\<le> c; 0 \\<le> b\\<rbrakk> \\<Longrightarrow> a - b \\<le> c\"", "lemma adiff_le_adiff:\"a \\<le> (a'::ant) \\<Longrightarrow> a - b \\<le> a' - b\"", "lemma aplus_le_aminus:\"\\<lbrakk> a \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>; b \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>; c \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>; -b \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> \n                 ((a + b) \\<le> (c::ant)) = (a \\<le> c - b)\"", "lemma card_eq:\"A = B \\<Longrightarrow> card A = card B\"", "lemma card0:\"card {} = 0\"", "lemma card_nonzero:\"\\<lbrakk>finite A; card A \\<noteq> 0\\<rbrakk> \\<Longrightarrow> A \\<noteq> {}\"", "lemma finite1:\"finite {a}\"", "lemma card1:\"card {a} = 1\"", "lemma nonempty_card_pos:\"\\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> 0 < card A\"", "lemma nonempty_card_pos1:\"\\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> Suc 0 \\<le> card A\"", "lemma card1_tr0:\"\\<lbrakk> finite A; card A = Suc 0; a \\<in> A \\<rbrakk> \\<Longrightarrow> {a} = A\"", "lemma card1_tr1:\"(constmap {0::nat} {x}) \\<in> {0} \\<rightarrow> {x} \\<and>\n                       surj_to (constmap {0::nat} {x}) {0} {x}\"", "lemma card1_Tr2:\"\\<lbrakk>finite A; card A = Suc 0\\<rbrakk> \\<Longrightarrow> \n                  \\<exists>f. f \\<in> {0::nat} \\<rightarrow> A \\<and> surj_to f {0} A\"", "lemma card2:\"\\<lbrakk> finite A; a \\<in> A; b \\<in> A; a \\<noteq> b \\<rbrakk> \\<Longrightarrow> Suc (Suc 0) \\<le> card A\"", "lemma card2_inc_two:\"\\<lbrakk>0 < (n::nat); x \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                                  \\<exists>y \\<in> {j. j \\<le> n}. x \\<noteq> y\"", "lemma Nset2_prep1:\"\\<lbrakk>finite A; card A = Suc (Suc n) \\<rbrakk> \\<Longrightarrow> \\<exists>x. x\\<in>A\"", "lemma ex_least_set:\"\\<lbrakk>A = {H. finite H \\<and> P H}; H \\<in> A\\<rbrakk> \\<Longrightarrow> \n                       \\<exists>K \\<in> A. (LEAST j. j \\<in> (card ` A)) =  card K\"", "lemma Nset2_prep2:\"x \\<in> A \\<Longrightarrow> A - {x} \\<union> {x} = A\"", "lemma Nset2_finiteTr:\"\\<forall>A. (finite A \\<and>(card A = Suc n) \\<longrightarrow> \n     (\\<exists>f. f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and> surj_to f {i. i \\<le> n} A))\"", "lemma Nset2_finite:\"\\<lbrakk> finite A; card A = Suc n\\<rbrakk> \\<Longrightarrow>\n                       \\<exists>f. f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and> surj_to f {i. i \\<le> n} A \"", "lemma Nset2finite_inj_tr0:\"j \\<in> {i. i \\<le> (n::nat)} \\<Longrightarrow>\n                                     card ({i. i \\<le> n} - {j}) = n\"", "lemma Nset2finite_inj_tr1:\"\\<lbrakk> i \\<le> (n::nat); j \\<le> n; f i = f j; i \\<noteq> j \\<rbrakk> \\<Longrightarrow> \n       f ` ({i. i \\<le> n} - {j}) = f ` {i. i \\<le> n}\"", "lemma Nset2finite_inj:\"\\<lbrakk>finite A; card A = Suc n; surj_to f {i. i \\<le> n} A \\<rbrakk> \\<Longrightarrow> \n        inj_on f {i. i \\<le> n}\"", "lemma Zmax_memTr:\"f \\<in> {i. i \\<le> (n::nat)} \\<rightarrow> (UNIV::int set) \\<longrightarrow>\n                                       Zmax n f \\<in> f ` {i. i \\<le> n}\"", "lemma zmax_ge_r:\"y \\<le> zmax x y\"", "lemma zmax_ge_l:\"x \\<le> zmax x y\"", "lemma Zmax_geTr:\"f \\<in> {j. j \\<le> (n::nat)} \\<rightarrow> (UNIV::int set) \\<longrightarrow> \n                    (\\<forall>j\\<in>{j. j \\<le> n}. (f j) \\<le> Zmax n f)\"", "lemma Zmax_plus1:\"f \\<in> {j. j \\<le> (n::nat)} \\<rightarrow> (UNIV::int set) \\<Longrightarrow>\n           ((Zmax n f) + 1) \\<notin> f ` {j. j \\<le> n}\"", "lemma image_Nsetn_card_pos:\" 0 < card (f ` {i. i \\<le> (n::nat)})\"", "lemma card_image_Nsetn_Suc\n:\"\\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B; \n      f (Suc n) \\<notin> f ` {j. j \\<le> n}\\<rbrakk>  \\<Longrightarrow> \n       card (f ` {j. j \\<le> Suc n}) - Suc 0 = \n                     Suc (card (f ` {j. j \\<le> n}) - Suc 0)\"", "lemma slide_surj:\n  \\<open>surj_to (slide i) {l. l \\<le> (j - i)} (nset i j)\\<close> if \\<open>i < j\\<close> for i j :: nat", "lemma slide_inj:\"i < j \\<Longrightarrow> inj_on (slide i) {k. k \\<le> (j - i)}\"", "lemma card_nset:\"i < (j :: nat) \\<Longrightarrow> card (nset i j) = Suc (j - i)\"", "lemma sliden_hom:\"i < j \\<Longrightarrow> (sliden i) \\<in> nset i j \\<rightarrow>  {k. k \\<le> (j - i)}\"", "lemma slide_sliden:\"(sliden i) (slide i k) = k\"", "lemma sliden_surj:\"i < j \\<Longrightarrow>  surj_to (sliden i) (nset i j) {k. k \\<le> (j - i)}\"", "lemma sliden_inj: \"i < j \\<Longrightarrow>  inj_on (sliden i) (nset i j)\"", "lemma transpos_id:\"\\<lbrakk> i \\<le> n; j \\<le> n; i \\<noteq> j ; x \\<in> {k. k \\<le> n} - {i, j} \\<rbrakk>\n  \\<Longrightarrow> transpos i j x = x\"", "lemma transpos_id_1:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; x \\<noteq> i; x \\<noteq> j\\<rbrakk> \\<Longrightarrow> \n                       transpos i j x = x\"", "lemma transpos_id_2:\"i \\<le> n \\<Longrightarrow> transpos i n (Suc n) = Suc n\"", "lemma transpos_ij_1:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j \\<rbrakk> \\<Longrightarrow>\n                        transpos i j i = j\"", "lemma transpos_ij_2:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \\<Longrightarrow> transpos i j j = i\"", "lemma transpos_hom:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \\<Longrightarrow> \n                          (transpos i j)  \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\"", "lemma transpos_mem:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; l \\<le> n\\<rbrakk> \\<Longrightarrow> \n                           (transpos i j l) \\<le> n\"", "lemma transpos_inj:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \n                          \\<Longrightarrow> inj_on (transpos i j) {i. i \\<le> n}\"", "lemma transpos_surjec:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \n                          \\<Longrightarrow> surj_to (transpos i j) {i. i \\<le> n} {i. i \\<le> n}\"", "lemma comp_transpos:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \\<Longrightarrow>\n      \\<forall>k \\<le> n. (compose {i. i \\<le> n} (transpos i j) (transpos i j)) k = k\"", "lemma comp_transpos_1:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<le> n\\<rbrakk> \\<Longrightarrow>\n                           (transpos i j) ((transpos i j) k) = k\"", "lemma cmp_transpos1:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<le> n\\<rbrakk> \\<Longrightarrow> \n                      (cmp (transpos i j) (transpos i j)) k = k\"", "lemma cmp_transpos:\"\\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> (Suc n)\\<rbrakk> \\<Longrightarrow>\n  (cmp (transpos i n) (cmp (transpos n (Suc n)) (transpos i n))) a =\n               transpos i (Suc n) a\"", "lemma im_Nset_Suc:\"insert (f (Suc n)) (f ` {i. i \\<le> n}) = f ` {i. i\\<le>(Suc n)}\"", "lemma Nset_injTr0:\"\\<lbrakk>f \\<in> {i. i \\<le> (Suc n)} \\<rightarrow> {i. i \\<le> (Suc n)}; \n      inj_on f {i. i \\<le> (Suc n)}; f (Suc n) = Suc n\\<rbrakk> \\<Longrightarrow>\n      f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n} \\<and> inj_on f {i. i \\<le> n}\"", "lemma inj_surj:\"\\<lbrakk>f \\<in> {i. i \\<le> (n::nat)} \\<rightarrow> {i. i \\<le> n}; \n                inj_on f {i. i \\<le> (n::nat)}\\<rbrakk> \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}\"", "lemma Nset_pre_mem:\"\\<lbrakk>f:{i. i\\<le>(Suc n)} \\<rightarrow>{i. i\\<le>(Suc n)}; \n      inj_on f {i. i\\<le>(Suc n)}; f (Suc n) = Suc n; k \\<le> n\\<rbrakk> \\<Longrightarrow> f k \\<in> {i. i\\<le>n}\"", "lemma Nset_injTr1:\"\\<lbrakk> \\<forall>l \\<le>(Suc n). f l \\<le> (Suc n); inj_on f {i. i \\<le> (Suc n)};\n                    f (Suc n) = Suc n \\<rbrakk> \\<Longrightarrow> inj_on f {i. i \\<le> n}\"", "lemma Nset_injTr2:\"\\<lbrakk>\\<forall>l\\<le> (Suc n). f l \\<le> (Suc n); inj_on f {i. i \\<le> (Suc n)}; \n                    f (Suc n) = Suc n\\<rbrakk> \\<Longrightarrow> \\<forall>l \\<le> n. f l \\<le> n\"", "lemma TR_inj_inj:\"\\<lbrakk>\\<forall>l\\<le> (Suc n). f l \\<le> (Suc n); inj_on f {i. i \\<le> (Suc n)};\n                    i \\<le> (Suc n); j \\<le> (Suc n); i < j \\<rbrakk> \\<Longrightarrow>\n      inj_on (compose {i. i \\<le> (Suc n)} (transpos i j) f) {i. i \\<le> (Suc n)}\"", "lemma enumeration:\"\\<lbrakk>f \\<in> {i. i \\<le> (n::nat)} \\<rightarrow> {i. i \\<le> m}; inj_on f {i. i \\<le> n}\\<rbrakk>\n                     \\<Longrightarrow>  n \\<le> m\"", "lemma enumerate_1:\"\\<lbrakk>\\<forall>j \\<le> (n::nat). f j \\<in> A; \\<forall>j \\<le> (m::nat). g j \\<in> A; \n     inj_on f {i. i \\<le> n}; inj_on g {j. j \\<le> m}; f `{j. j \\<le> n} = A; \n     g ` {j. j \\<le> m} = A \\<rbrakk> \\<Longrightarrow> n = m\"", "lemma ninv_hom:\"\\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}; inj_on f {i. i \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                        ninv n f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\"", "lemma ninv_r_inv:\"\\<lbrakk>f \\<in> {i. i \\<le> (n::nat)} \\<rightarrow> {i. i \\<le> n}; inj_on f {i. i \\<le> n}; \n      b \\<le> n\\<rbrakk>  \\<Longrightarrow>  f (ninv n f b) = b \"", "lemma ninv_inj:\"\\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}; inj_on f {i. i \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                                inj_on  (ninv n f) {i. i \\<le> n}\"", "lemma ge2_zmult_pos:\n  \"2 \\<le> m \\<Longrightarrow> 0 < z \\<Longrightarrow> 1 < int m * z\"", "lemma zmult_pos_mono:\"\\<lbrakk> (0::int) < w; w * z \\<le> w * z'\\<rbrakk> \\<Longrightarrow> z \\<le> z'\"", "lemma zmult_pos_mono_r:\n         \"\\<lbrakk>(0::int) < w; z * w \\<le> z' * w\\<rbrakk> \\<Longrightarrow> z \\<le> z'\"", "lemma an_neq_inf:\"an n \\<noteq> \\<infinity>\"", "lemma an_neq_minf:\"an n \\<noteq> -\\<infinity>\"", "lemma  aeq_mult:\"\\<lbrakk>z \\<noteq> 0; a = b\\<rbrakk> \\<Longrightarrow> a * ant z = b * ant z\"", "lemma tna_0[simp]:\"tna 0 = 0\"", "lemma ale_nat_le:\"(an n \\<le> an m) = (n \\<le> m)\"", "lemma aless_nat_less:\"(an n < an m) = (n < m)\"", "lemma apos_natpos:\"\\<lbrakk>a \\<noteq> \\<infinity>; 0 \\<le> a\\<rbrakk> \\<Longrightarrow> 0 \\<le> na a\"", "lemma apos_tna_pos:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n\\<rbrakk> \\<Longrightarrow> 0 \\<le> tna n\"", "lemma apos_na_pos:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n\\<rbrakk> \\<Longrightarrow> 0 \\<le> na n\"", "lemma aposs_tna_poss:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 < n\\<rbrakk> \\<Longrightarrow> 0 < tna n\"", "lemma aposs_na_poss:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 < n\\<rbrakk> \\<Longrightarrow> 0 < na n\"", "lemma nat_0_le: \"0 \\<le> z ==> int (nat z) = z\"", "lemma int_eq:\"m = n \\<Longrightarrow> int m = int n\"", "lemma box_equation:\"\\<lbrakk>a = b; a = c\\<rbrakk> \\<Longrightarrow> b = c\"", "lemma aeq_nat_eq:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n; m \\<noteq> \\<infinity>; 0 \\<le> m\\<rbrakk> \\<Longrightarrow> \n                    (n = m) = (na n = na m)\"", "lemma na_minf:\"na (-\\<infinity>) = 0\"", "lemma an_na:\"\\<lbrakk>a \\<noteq> \\<infinity>; 0 \\<le> a\\<rbrakk> \\<Longrightarrow> an (na a) = a\"", "lemma not_na_le_minf:\"\\<not> (an n \\<le> -\\<infinity> )\"", "lemma not_na_less_minf:\"\\<not> (an n < -\\<infinity>)\"", "lemma not_na_ge_inf:\"\\<not> \\<infinity> \\<le> (an n)\"", "lemma an_na_le:\"j \\<le> an n \\<Longrightarrow> na j \\<le> n\"", "lemma aless_neq :\"(x::ant) < y \\<Longrightarrow> x \\<noteq> y\"", "lemma Order_component:\"(E::'a Order) = \\<lparr> carrier = carrier E, rel = rel E \\<rparr>\"", "lemma Order_comp_eq:\"\\<lbrakk>carrier (E::'a Order) = carrier (F::'a Order);\n                      rel E = rel F\\<rbrakk> \\<Longrightarrow> E = F\"", "lemma (in Order) le_rel:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                           (a \\<preceq> b) = ((a, b) \\<in> rel D)\"", "lemma (in Order) less_imp_le:\n      \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b \\<rbrakk> \\<Longrightarrow> a \\<preceq> b\"", "lemma (in Order) le_refl:\"a \\<in> carrier D \\<Longrightarrow> a \\<preceq> a\"", "lemma (in Order) le_antisym:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; \n      a \\<preceq> b; b \\<preceq> a \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma (in Order) le_trans:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n      a \\<preceq> b; b \\<preceq> c \\<rbrakk> \\<Longrightarrow> a \\<preceq> c\"", "lemma (in Order) less_trans:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D; \n      a \\<prec> b; b \\<prec> c \\<rbrakk> \\<Longrightarrow> a \\<prec> c\"", "lemma (in Order) le_less_trans:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n      a \\<preceq> b; b \\<prec> c \\<rbrakk> \\<Longrightarrow> a \\<prec> c\"", "lemma (in Order) less_le_trans:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n      a \\<prec> b; b \\<preceq> c \\<rbrakk> \\<Longrightarrow> a \\<prec> c\"", "lemma (in Order) le_imp_less_or_eq:\n    \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a \\<preceq> b) = (a \\<prec> b \\<or> a = b)\"", "lemma (in Order) less_neq: \"a \\<prec> b \\<Longrightarrow> a \\<noteq> b\"", "lemma (in Order) le_neq_less: \"\\<lbrakk>a \\<preceq> b; a \\<noteq> b\\<rbrakk> \\<Longrightarrow> a \\<prec> b\"", "lemma (in Order) less_irrefl: \"\\<lbrakk>a \\<in> carrier D; a \\<prec> a\\<rbrakk> \\<Longrightarrow> C\"", "lemma (in Order) less_irrefl': \"a \\<in> carrier D \\<Longrightarrow> \\<not> a \\<prec> a\"", "lemma (in Order) less_asym:\n  \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow> a \\<prec> b \\<Longrightarrow> b \\<prec> a \\<Longrightarrow> C\"", "lemma (in Order) less_asym':\n  \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow> a \\<prec> b \\<Longrightarrow> \\<not> b \\<prec> a\"", "lemma (in Order) gt_than_any_outside:\"\\<lbrakk>A \\<subseteq> carrier D; b \\<in> carrier D;\n       \\<forall>x\\<in>A. x \\<prec> b\\<rbrakk> \\<Longrightarrow> b \\<notin> A\"", "lemma (in Order) Iod_self: \"D = Iod D (carrier D)\"", "lemma SIod_self:\"Order D \\<Longrightarrow> D = SIod D (carrier D)\"", "lemma (in Order) Od_carrier:\"carrier (D\\<lparr>carrier := S, rel := R\\<rparr>) = S\"", "lemma (in Order) Od_rel:\"rel (D\\<lparr>carrier := S, rel := R\\<rparr>) = R\"", "lemma (in Order) Iod_carrier:\n    \"T \\<subseteq> carrier D \\<Longrightarrow> carrier (Iod D T) = T\"", "lemma SIod_carrier:\"\\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> carrier (SIod D T) = T\"", "lemma (in Order) Od_compare:\"(S = S' \\<and> R = R') = (D\\<lparr>carrier := S, rel := R\\<rparr> = D\\<lparr>carrier := S', rel := R'\\<rparr>)\"", "lemma (in Order) Iod_le:\n  \"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk> \\<Longrightarrow> (a \\<preceq>\\<^bsub>Iod D T\\<^esub> b) = (a \\<preceq> b)\"", "lemma SIod_le:\"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk> \\<Longrightarrow> \n                     (a \\<preceq>\\<^bsub>SIod D T\\<^esub> b) = (a \\<preceq>\\<^bsub>D\\<^esub> b)\"", "lemma (in Order) Iod_less:\n  \"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk> \\<Longrightarrow> (a \\<prec>\\<^bsub>Iod D T\\<^esub> b) = (a \\<prec> b)\"", "lemma SIod_less:\"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk> \\<Longrightarrow> \n                     (a \\<prec>\\<^bsub>SIod D T\\<^esub> b) = (a \\<prec>\\<^bsub>D\\<^esub> b)\"", "lemma (in Order) Iod_Order:\n    \"T \\<subseteq> carrier D \\<Longrightarrow> Order (Iod D T)\"", "lemma  SIod_Order:\"\\<lbrakk> Order D; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> Order (SIod D T)\"", "lemma (in Order) emptyset_Iod:\"Order (Iod D {})\"", "lemma (in Order) Iod_sub_sub:\n     \"\\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> Iod (Iod D T) S = Iod D S\"", "lemma SIod_sub_sub:\n     \"\\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> SIod (SIod D T) S = SIod D S\"", "lemma rel_SIod:\"\\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D; \n                  \\<forall>a\\<in>carrier E. \\<forall>b\\<in>carrier E. (a \\<preceq>\\<^bsub>E\\<^esub> b) = (a \\<preceq>\\<^bsub>D\\<^esub> b)\\<rbrakk> \\<Longrightarrow>\n                  rel E = rel (SIod D (carrier E))\"", "lemma SIod_self_le:\"\\<lbrakk>Order D; Order E; \n         carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E. \\<forall>b\\<in>carrier E. (a \\<preceq>\\<^bsub>E\\<^esub> b) = (a \\<preceq>\\<^bsub>D\\<^esub> b) \\<rbrakk> \\<Longrightarrow> \n         E = SIod D (carrier E)\"", "lemma (in Order) Iod_empty_Torder:\"Torder (Iod D {})\"", "lemma (in Torder) le_cases:\n  \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; (a \\<preceq> b \\<Longrightarrow> C); (b \\<preceq> a \\<Longrightarrow> C)\\<rbrakk> \\<Longrightarrow> C\"", "lemma (in Torder) Order:\"Order D\"", "lemma (in Torder) less_linear:\n   \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow> a \\<prec> b \\<or> a = b \\<or> b \\<prec> a\"", "lemma (in Torder) not_le_less:\n  \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow>\n    (\\<not> a \\<preceq> b) = (b \\<prec> a)\"", "lemma (in Torder) not_less_le:\n  \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow>\n    (\\<not> a \\<prec> b) = (b \\<preceq> a)\"", "lemma (in Order) Iod_not_le_less:\"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; \n       Torder (Iod D T)\\<rbrakk> \\<Longrightarrow> (\\<not> a \\<preceq>\\<^bsub>(Iod D T)\\<^esub> b) = b \\<prec>\\<^bsub>(Iod D T)\\<^esub> a\"", "lemma (in Order) Iod_not_less_le:\"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; \n       Torder (Iod D T)\\<rbrakk> \\<Longrightarrow> (\\<not> a \\<prec>\\<^bsub>(Iod D T)\\<^esub> b) = b \\<preceq>\\<^bsub>(Iod D T)\\<^esub> a\"", "lemma Order_fs:\"Order (Order_fs A B)\"", "lemma (in Order) ord_inj_func:\"\\<lbrakk>Order E; ord_inj D E f\\<rbrakk> \\<Longrightarrow>\n                      f \\<in> carrier D \\<rightarrow> carrier E\"", "lemma (in Order) ord_isom_func:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n                      f \\<in> carrier D \\<rightarrow> carrier E\"", "lemma (in Order) ord_inj_restrict_isom:\"\\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D T) (Iod E (f ` T)) (restrict f T)\"", "lemma ord_inj_Srestrict_isom:\"\\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D T) (SIod E (f ` T)) (restrict f T)\"", "lemma (in Order) id_ord_isom:\"ord_isom D D (idmap (carrier D))\"", "lemma (in Order) ord_isom_bij_to:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n                            bij_to f (carrier D) (carrier E)\"", "lemma (in Order) ord_inj_mem:\"\\<lbrakk>Order E; ord_inj D E f; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n        (f a) \\<in> carrier E\"", "lemma (in Order) ord_isom_mem:\"\\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                (f a) \\<in> carrier E\"", "lemma (in Order) ord_isom_surj:\"\\<lbrakk>Order E; ord_isom D E f; b \\<in> carrier E\\<rbrakk> \\<Longrightarrow>\n         \\<exists>a\\<in>carrier D. b = f a\"", "lemma (in Order) ord_isom_surj_forall:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n              \\<forall>b \\<in> carrier E. \\<exists>a\\<in>carrier D. b = f a\"", "lemma (in Order) ord_isom_onto:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n         f ` (carrier D) = carrier E \"", "lemma (in Order) ord_isom_inj_on:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> \n                                              inj_on f (carrier D)\"", "lemma (in Order) ord_isom_inj:\"\\<lbrakk>Order E; ord_isom D E f; \n      a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a = b) = ((f a) = (f b))\"", "lemma (in Order) ord_isom_surj_to:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> \n                                     surj_to f (carrier D) (carrier E)\"", "lemma (in Order) ord_inj_less:\"\\<lbrakk>Order E; ord_inj D E f; a \\<in> carrier D; \n       b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a \\<prec>\\<^bsub>D\\<^esub> b) = ((f a) \\<prec>\\<^bsub>E\\<^esub> (f b))\"", "lemma (in Order) ord_isom_less:\"\\<lbrakk>Order E; ord_isom D E f; \n      a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a \\<prec>\\<^bsub>D\\<^esub> b) = ((f a) \\<prec>\\<^bsub>E\\<^esub> (f b))\"", "lemma (in Order) ord_isom_less_forall:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> \n      \\<forall>a \\<in> carrier D. \\<forall> b \\<in> carrier D. (a \\<prec>\\<^bsub>D\\<^esub> b) = ((f a) \\<prec>\\<^bsub>E\\<^esub> (f b))\"", "lemma (in Order) ord_isom_le:\"\\<lbrakk>Order E; ord_isom D E f; \n      a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a \\<preceq>\\<^bsub>D\\<^esub> b) = ((f a) \\<preceq>\\<^bsub>E\\<^esub> (f b))\"", "lemma (in Order) ord_isom_le_forall:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> \n      \\<forall>a \\<in> carrier D. \\<forall> b \\<in> carrier D. (a \\<preceq> b) = ((f a) \\<preceq>\\<^bsub>E\\<^esub> (f b))\"", "lemma (in Order) ord_isom_convert:\"\\<lbrakk>Order E; ord_isom D E f; \n      x \\<in> carrier D; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (\\<forall>y\\<in>carrier D. (x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)) = \n       (\\<forall>z\\<in>carrier E. ((f x) \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow> \\<not> z \\<prec>\\<^bsub>E\\<^esub> (f a)))\"", "lemma (in Order) ord_isom_sym:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n                   ord_isom E D (invfun (carrier D) (carrier E) f)\"", "lemma (in Order) ord_isom_trans:\"\\<lbrakk>Order E; Order F; ord_isom D E f; \n       ord_isom E F g \\<rbrakk> \\<Longrightarrow>  ord_isom D F (compose (carrier D) g f)\"", "lemma (in Order) ord_equiv:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> ord_equiv D E\"", "lemma (in Order) ord_equiv_isom:\"\\<lbrakk>Order E; ord_equiv D E\\<rbrakk> \\<Longrightarrow> \n       \\<exists>f. ord_isom D E f\"", "lemma (in Order) ord_equiv_reflex:\"ord_equiv D D\"", "lemma (in Order) eq_ord_equiv:\"\\<lbrakk>Order E; D = E\\<rbrakk> \\<Longrightarrow> ord_equiv D E\"", "lemma (in Order) ord_equiv_sym:\"\\<lbrakk>Order E; ord_equiv D E \\<rbrakk> \\<Longrightarrow> ord_equiv E D\"", "lemma (in Order) ord_equiv_trans:\"\\<lbrakk>Order E; Order F; ord_equiv D E; \n       ord_equiv E F\\<rbrakk> \\<Longrightarrow>  ord_equiv D F\"", "lemma (in Order) ord_equiv_box:\"\\<lbrakk>Order E; Order F; ord_equiv D E;\n        ord_equiv D F\\<rbrakk> \\<Longrightarrow> ord_equiv E F\"", "lemma SIod_isom_Iod:\"\\<lbrakk>Order D; T \\<subseteq> carrier D \\<rbrakk> \\<Longrightarrow>\n          ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x)\"", "lemma (in Worder) Order:\"Order D\"", "lemma (in Worder) Torder:\"Torder D\"", "lemma (in Worder) Worder:\"Worder D\"", "lemma (in Worder) equiv_isom:\"\\<lbrakk>Worder E; ord_equiv D E\\<rbrakk> \\<Longrightarrow> \n             \\<exists>f. ord_isom D E f\"", "lemma (in Order) minimum_elem_mem:\"\\<lbrakk>X \\<subseteq> carrier D; minimum_elem D X a\\<rbrakk>\n                              \\<Longrightarrow>  a \\<in> X\"", "lemma (in Order) minimum_elem_unique:\"\\<lbrakk>X \\<subseteq> carrier D; minimum_elem D X a1;\n                    minimum_elem D X a2\\<rbrakk> \\<Longrightarrow> a1 = a2\"", "lemma (in Order) compare_minimum_elements:\"\\<lbrakk>S \\<subseteq> carrier D; T \\<subseteq> carrier D;\n      S \\<subseteq> T; minimum_elem D S s; minimum_elem D T t \\<rbrakk> \\<Longrightarrow> t \\<preceq> s\"", "lemma (in Order) minimum_elem_sub:\"\\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T\\<rbrakk>\n        \\<Longrightarrow> minimum_elem D X a = minimum_elem (Iod D T) X a\"", "lemma minimum_elem_Ssub:\"\\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T\\<rbrakk>\n        \\<Longrightarrow> minimum_elem D X a = minimum_elem (SIod D T) X a\"", "lemma (in Order) augmented_set_minimum:\"\\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n       Y - {a} \\<subseteq> X; y - {a} \\<noteq> {}; minimum_elem (Iod D X) (Y - {a}) x;\n       \\<forall>x\\<in>X. x \\<preceq> a\\<rbrakk> \\<Longrightarrow>  minimum_elem (Iod D (insert a X)) Y x\"", "lemma  augmented_Sset_minimum:\"\\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n       Y - {a} \\<subseteq> X; y - {a} \\<noteq> {}; minimum_elem (SIod D X) (Y - {a}) x;\n       \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a\\<rbrakk> \\<Longrightarrow>  minimum_elem (SIod D (insert a X)) Y x\"", "lemma (in Order) ord_isom_minimum:\"\\<lbrakk>Order E; ord_isom D E f;\nS \\<subseteq> carrier D; a \\<in> carrier D; minimum_elem D S a\\<rbrakk> \\<Longrightarrow>\n              minimum_elem E (f`S) (f a)\"", "lemma (in Worder) pre_minimum:\"\\<lbrakk>T \\<subseteq> carrier D; minimum_elem D T t; \ns \\<in> carrier D; s \\<prec>\\<^bsub>D\\<^esub> t \\<rbrakk> \\<Longrightarrow> \\<not> s \\<in> T\"", "lemma bex_nonempty_subset:\"\\<exists>a. a \\<in> A \\<and> P a \\<Longrightarrow> \n               {x. x \\<in> A \\<and> P x} \\<subseteq> A \\<and> {x. x \\<in> A \\<and> P x} \\<noteq> {}\"", "lemma (in Worder) to_subset:\"\\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f\\<rbrakk> \\<Longrightarrow> \n            \\<forall>a. a \\<in> carrier D \\<longrightarrow> a \\<preceq> (f a)\"", "lemma to_subsetS:\"\\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f\\<rbrakk> \\<Longrightarrow> \n            \\<forall>a. a \\<in> carrier D \\<longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> (f a)\"", "lemma (in Worder) isom_Worder:\"\\<lbrakk>Order T; ord_isom D T f\\<rbrakk> \\<Longrightarrow> Worder T\"", "lemma (in Worder) equiv_Worder:\"\\<lbrakk>Order T; ord_equiv D T\\<rbrakk> \\<Longrightarrow> Worder T\"", "lemma (in Worder) equiv_Worder1:\"\\<lbrakk>Order T; ord_equiv T D\\<rbrakk> \\<Longrightarrow> Worder T\"", "lemma (in Worder) ord_isom_self_id:\"ord_isom D D f \\<Longrightarrow> f = idmap (carrier D)\"", "lemma (in Worder) isom_unique:\"\\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g\\<rbrakk>\n      \\<Longrightarrow> f = g\"", "lemma (in Order) segment_sub:\"segment D a \\<subseteq> carrier D\"", "lemma Ssegment_sub:\"Ssegment D a \\<subseteq> carrier D\"", "lemma (in Order) segment_free:\"a \\<notin> carrier D \\<Longrightarrow> \n                 segment D a = carrier D\"", "lemma Ssegment_free:\"a \\<notin> carrier D \\<Longrightarrow> \n                 Ssegment D a = carrier D\"", "lemma (in Order) segment_sub_sub:\"\\<lbrakk>S \\<subseteq> carrier D; d \\<in> S\\<rbrakk> \\<Longrightarrow> \n                                  segment (Iod D S) d \\<subseteq> segment D d\"", "lemma Ssegment_sub_sub:\"\\<lbrakk>Order D; S \\<subseteq> carrier D; d \\<in> S\\<rbrakk> \\<Longrightarrow> \n                                  Ssegment (SIod D S) d \\<subseteq> Ssegment D d\"", "lemma (in Order) a_notin_segment:\"a \\<notin> segment D a\"", "lemma a_notin_Ssegment:\"a \\<notin> Ssegment D a\"", "lemma (in Order) Iod_carr_segment:\n       \"carrier (Iod D (segment D a)) = segment D a\"", "lemma SIod_carr_Ssegment:\"Order D \\<Longrightarrow>\n        carrier (SIod D (Ssegment D a)) = Ssegment D a\"", "lemma (in Order) segment_inc:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<prec> b) = (a \\<in> segment D b)\"", "lemma Ssegment_inc:\"\\<lbrakk>Order D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<prec>\\<^bsub>D\\<^esub> b) = (a \\<in> Ssegment D b)\"", "lemma (in Order) segment_inc1:\"b \\<in> carrier D \\<Longrightarrow>\n                  (a \\<prec> b \\<and> a \\<in> carrier D) = (a \\<in> segment D b)\"", "lemma Ssegment_inc1:\"\\<lbrakk>Order D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<prec>\\<^bsub>D\\<^esub> b \\<and> a \\<in> carrier D) = (a \\<in> Ssegment D b)\"", "lemma (in Order) segment_inc_if:\"\\<lbrakk>b \\<in> carrier D;a \\<in> segment D b\\<rbrakk> \\<Longrightarrow>\n                                         a \\<prec> b\"", "lemma Ssegment_inc_if:\"\\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk> \\<Longrightarrow>\n                                         a \\<prec>\\<^bsub>D\\<^esub> b\"", "lemma (in Order) segment_inc_less:\"\\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D;\n       y \\<in> W; x \\<in> segment (Iod D W) a; y \\<prec> x\\<rbrakk> \\<Longrightarrow> y \\<in> segment (Iod D W) a\"", "lemma (in Order) segment_order_less:\"\\<forall>b\\<in>carrier D. \\<forall>x\\<in> segment D b. \\<forall>y\\<in> segment D b. (x \\<prec> y) = (x \\<prec>\\<^bsub>(Iod D (segment D b))\\<^esub> y)\"", "lemma Ssegment_order_less:\"Order D \\<Longrightarrow> \n      \\<forall>b\\<in>carrier D. \\<forall>x\\<in> Ssegment D b. \\<forall>y\\<in> Ssegment D b. \n                  (x \\<prec>\\<^bsub>D\\<^esub> y) = (x \\<prec>\\<^bsub>(SIod D (Ssegment D b))\\<^esub> y)\"", "lemma (in Order) segment_order_le:\"\\<forall>b\\<in>carrier D. \\<forall>x\\<in> segment D b. \n      \\<forall>y\\<in> segment D b. (x \\<preceq> y) = (x \\<preceq>\\<^bsub>(Iod D (segment D b))\\<^esub> y)\"", "lemma Ssegment_order_le:\"\\<forall>b\\<in>carrier D. \\<forall>x\\<in> Ssegment D b. \n      \\<forall>y\\<in> Ssegment D b. (x \\<preceq>\\<^bsub>D\\<^esub> y) = (x \\<preceq>\\<^bsub>(SIod D (Ssegment D b))\\<^esub> y)\"", "lemma (in Torder) Iod_Torder:\"X \\<subseteq> carrier D \\<Longrightarrow> Torder (Iod D X)\"", "lemma  SIod_Torder:\"\\<lbrakk>Torder D; X \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> Torder (SIod D X)\"", "lemma (in Order) segment_not_inc:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n      a \\<prec> b\\<rbrakk> \\<Longrightarrow> b \\<notin> segment D a\"", "lemma Ssegment_not_inc:\"\\<lbrakk>Order D; a \\<in> carrier D; b \\<in> carrier D; a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk> \\<Longrightarrow> \n               b \\<notin> Ssegment D a\"", "lemma (in Torder) segment_not_inc_iff:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<preceq> b) =  (b \\<notin> segment D a)\"", "lemma Ssegment_not_inc_iff:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<preceq>\\<^bsub>D\\<^esub> b) =  (b \\<notin> Ssegment D a)\"", "lemma (in Torder) minimum_segment_of_sub:\"\\<lbrakk>X \\<subseteq> carrier D; \n       minimum_elem D (segment (Iod D X) d) m \\<rbrakk> \\<Longrightarrow> minimum_elem D X m\"", "lemma (in Torder) segment_out:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; \n      a \\<prec> b\\<rbrakk> \\<Longrightarrow> segment (Iod D (segment D a)) b = segment D a\"", "lemma (in Torder) segment_minimum_minimum:\"\\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n       minimum_elem (Iod D (segment D d)) (X \\<inter> (segment D d)) m\\<rbrakk> \\<Longrightarrow>\n       minimum_elem D X m\"", "lemma (in Torder) segment_mono:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<prec> b) = (segment D a \\<subset> segment D b)\"", "lemma Ssegment_mono:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<prec>\\<^bsub>D\\<^esub> b) = (Ssegment D a \\<subset> Ssegment D b)\"", "lemma (in Torder) segment_le_mono:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<preceq> b) = (segment D a \\<subseteq> segment D b)\"", "lemma Ssegment_le_mono:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<preceq>\\<^bsub>D\\<^esub> b) = (Ssegment D a \\<subseteq> Ssegment D b)\"", "lemma (in Torder) segment_inj:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a = b) = (segment D a = segment D b)\"", "lemma Ssegment_inj:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a = b) = (Ssegment D a = Ssegment D b)\"", "lemma (in Torder) segment_inj_neq:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<noteq> b) = (segment D a \\<noteq> segment D b)\"", "lemma Ssegment_inj_neq:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<noteq> b) = (Ssegment D a \\<noteq> Ssegment D b)\"", "lemma (in Order) segment_inc_psub:\"\\<lbrakk>x \\<in> segment D a\\<rbrakk> \\<Longrightarrow>\n                                            segment D x \\<subset> segment D a\"", "lemma Ssegment_inc_psub:\"\\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk> \\<Longrightarrow>\n                                            Ssegment D x \\<subset> Ssegment D a\"", "lemma (in Order) segment_segment:\"\\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk> \\<Longrightarrow>\n                  segment (Iod D (segment D b)) a = segment D a\"", "lemma Ssegment_Ssegment:\"\\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk> \\<Longrightarrow>\n                  Ssegment (SIod D (Ssegment D b)) a = Ssegment D a\"", "lemma (in Order) Iod_segment_segment:\"a \\<in> carrier (Iod D (segment D b)) \\<Longrightarrow> \n      Iod (Iod D (segment D b)) (segment (Iod D (segment D b)) a) =\n      Iod D (segment D a)\"", "lemma SIod_Ssegment_Ssegment:\"\\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b))\\<rbrakk> \n     \\<Longrightarrow>\n      SIod (SIod D (Ssegment D b)) (Ssegment (SIod D (Ssegment D b)) a) =\n      SIod D (Ssegment D a)\"", "lemma (in Order) ord_isom_segment_mem:\"\\<lbrakk>Order E; \n      ord_isom D E f; a \\<in> carrier D; x \\<in> segment D a \\<rbrakk> \\<Longrightarrow> \n                     (f x) \\<in> segment E (f a)\"", "lemma ord_isom_Ssegment_mem:\"\\<lbrakk>Order D; Order E; \n      ord_isom D E f; a \\<in> carrier D; x \\<in> Ssegment D a\\<rbrakk> \\<Longrightarrow> \n                     (f x) \\<in> Ssegment E (f a)\"", "lemma (in Order) ord_isom_segment_segment:\"\\<lbrakk>Order E; \n      ord_isom D E f; a \\<in> carrier D \\<rbrakk> \\<Longrightarrow> \n      ord_isom (Iod D (segment D a)) (Iod E (segment E (f a))) \n                                    (\\<lambda>x\\<in>carrier (Iod D (segment D a)). f x)\"", "lemma ord_isom_Ssegment_Ssegment:\"\\<lbrakk>Order D; Order E; \n      ord_isom D E f; a \\<in> carrier D \\<rbrakk> \\<Longrightarrow> \n      ord_isom (SIod D (Ssegment D a)) (SIod E (Ssegment E (f a))) \n                                  (\\<lambda>x\\<in>carrier (SIod D (Ssegment D a)). f x)\"", "lemma (in Order) ord_equiv_segment_segment:\n   \"\\<lbrakk>Order E; ord_equiv D E; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t\\<in>carrier E. ord_equiv (Iod D (segment D a)) (Iod E (segment E t))\"", "lemma ord_equiv_Ssegment_Ssegment:\n  \"\\<lbrakk>Order D; Order E; ord_equiv D E; a \\<in> carrier D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t\\<in>carrier E. ord_equiv (SIod D (Ssegment D a)) (SIod E (Ssegment E t))\"", "lemma (in Order) ord_isom_restricted:\n      \"\\<lbrakk>Order E; ord_isom D E f; D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> \n             ord_isom (Iod D D1) (Iod E (f ` D1)) (\\<lambda>x\\<in>D1. f x)\"", "lemma ord_isom_restrictedS:\n      \"\\<lbrakk>Order D; Order E; ord_isom D E f; D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> \n             ord_isom (SIod D D1) (SIod E (f ` D1)) (\\<lambda>x\\<in>D1. f x)\"", "lemma (in Order) ord_equiv_induced:\n      \"\\<lbrakk>Order E; ord_isom D E f; D1 \\<subseteq> carrier D \\<rbrakk> \\<Longrightarrow> \n                         ord_equiv (Iod D D1) (Iod E (f ` D1))\"", "lemma ord_equiv_inducedS:\n      \"\\<lbrakk>Order D; Order E; ord_isom D E f; D1 \\<subseteq> carrier D \\<rbrakk> \\<Longrightarrow> \n                        ord_equiv (SIod D D1) (SIod E (f ` D1))\"", "lemma (in Order) equiv_induced_by_inj:\"\\<lbrakk>Order E; ord_inj D E f; \n      D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow>  ord_equiv (Iod D D1) (Iod E (f ` D1))\"", "lemma equiv_induced_by_injS:\"\\<lbrakk>Order D; Order E; ord_inj D E f; \n      D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow>  ord_equiv (SIod D D1) (SIod E (f ` D1))\"", "lemma (in Torder) le_segment_segment:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n           (a \\<preceq> b) = (segment (Iod D (segment D b)) a = segment D a)\"", "lemma le_Ssegment_Ssegment:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n           (a \\<preceq>\\<^bsub>D\\<^esub> b) = (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)\"", "lemma (in Torder) inc_segment_segment:\"\\<lbrakk>b \\<in> carrier D;\n      a \\<in> segment D b\\<rbrakk> \\<Longrightarrow> segment (Iod D (segment D b)) a = segment D a\"", "lemma (in Torder) segment_segment:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n      (segment (Iod D (segment D b)) a = segment D a) =\n      ((segment D a) \\<subseteq>  (segment D b))\"", "lemma (in Torder) less_in_Iod:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n      \\<Longrightarrow> (a \\<prec> b) = (a \\<in> carrier (Iod D (segment D b)))\"", "lemma segmap_func:\"segmap D \\<in> carrier D \\<rightarrow> carrier (SS D)\"", "lemma (in Worder) ord_isom_segmap:\" ord_isom D (SS D) (segmap D)\"", "lemma (in Worder) nonequiv_segment:\"a \\<in> carrier D \\<Longrightarrow>\n                                   \\<not> ord_equiv D (Iod D (segment D a))\"", "lemma nonequiv_Ssegment:\"\\<lbrakk>Worder D; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                                   \\<not> ord_equiv D (SIod D (Ssegment D a))\"", "lemma (in Worder) subset_Worder:\" T \\<subseteq> carrier D \\<Longrightarrow>\n                    Worder (Iod D T)\"", "lemma SIod_Worder:\"\\<lbrakk>Worder D; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> Worder (SIod D T)\"", "lemma (in Worder) segment_Worder:\"Worder (Iod D (segment D a))\"", "lemma Ssegment_Worder:\"Worder D \\<Longrightarrow>Worder (SIod D (Ssegment D a))\"", "lemma (in Worder) segment_unique1:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk> \\<Longrightarrow>\n       \\<not> ord_equiv (Iod D (segment D b)) (Iod D (segment D a))\"", "lemma Ssegment_unique1:\"\\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D; a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk> \\<Longrightarrow>\n       \\<not> ord_equiv (SIod D (Ssegment D b)) (SIod D (Ssegment D a))\"", "lemma (in Worder) segment_unique:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n      ord_equiv (Iod D (segment D a)) (Iod D (segment D b)) \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma Ssegment_unique:\"\\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n      ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)) \\<rbrakk> \\<Longrightarrow> a = b\"", "lemma (in Worder) subset_segment:\"\\<lbrakk>T \\<subseteq> carrier D; \n      \\<forall>b\\<in>T. \\<forall>x. x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n      minimum_elem D (carrier D - T) a\\<rbrakk> \\<Longrightarrow> T = segment D a\"", "lemma subset_Ssegment:\"\\<lbrakk>Worder D; T \\<subseteq> carrier D; \n      \\<forall>b\\<in>T. \\<forall>x. x \\<prec>\\<^bsub>D\\<^esub> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n      minimum_elem D (carrier D - T) a\\<rbrakk> \\<Longrightarrow> T = Ssegment D a\"", "lemma (in Worder) segmentTr:\"\\<lbrakk>T \\<subseteq> carrier D; \n         \\<forall>b \\<in> T. (\\<forall>x.  (x \\<prec> b \\<and> x \\<in> (carrier D) \\<longrightarrow> x \\<in> T))\\<rbrakk> \\<Longrightarrow> \n         (T = carrier D) \\<or> (\\<exists>a. a \\<in> (carrier D) \\<and> T = segment D a)\"", "lemma SsegmentTr:\"\\<lbrakk>Worder D; T \\<subseteq> carrier D; \n         \\<forall>b \\<in> T. (\\<forall>x.  (x \\<prec>\\<^bsub>D\\<^esub> b \\<and> x \\<in> (carrier D) \\<longrightarrow> x \\<in> T))\\<rbrakk> \\<Longrightarrow> \n         (T = carrier D) \\<or> (\\<exists>a. a \\<in> (carrier D) \\<and> T = Ssegment D a)\"", "lemma (in Worder) ord_isom_segment_segment:\"\\<lbrakk>Worder E; \n      ord_isom D E f; a \\<in> carrier D \\<rbrakk> \\<Longrightarrow> \n      ord_isom (Iod D (segment D a)) (Iod E (segment E (f a))) \n                                    (\\<lambda>x\\<in>carrier (Iod D (segment D a)). f x)\"", "lemma (in Worder) Tw_func:\"\\<lbrakk>Worder T; \n     \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier T. ord_equiv (Iod D (segment D a)) \n         (Iod T (segment T b))\\<rbrakk> \\<Longrightarrow> Tw\\<^bsub>D,T\\<^esub> \\<in> carrier D \\<rightarrow> carrier T\"", "lemma (in Worder) Tw_mem:\"\\<lbrakk>Worder E; x \\<in> carrier D;\n     \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. ord_equiv (Iod D (segment D a)) \n         (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E\"", "lemma (in Worder) Tw_equiv:\"\\<lbrakk>Worder T; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier T. ord_equiv (Iod D (segment D a)) \n                         (Iod T (segment T b)); x \\<in> carrier D \\<rbrakk> \\<Longrightarrow> \n      ord_equiv (Iod D (segment D x)) (Iod T (segment T ((Tw\\<^bsub>D,T\\<^esub>) x)))\"", "lemma (in Worder) Tw_inj:\"\\<lbrakk>Worder E; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.  ord_equiv (Iod D (segment D a)) \n       (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> inj_on (Tw\\<^bsub>D,E\\<^esub>) (carrier D)\"", "lemma (in Worder) Tw_eq_ord_isom:\"\\<lbrakk>Worder E; \n        \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.\n        ord_equiv (Iod D (segment D a)) (Iod E (segment E b)); a \\<in> carrier D;\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (Tw D E a))) f;\n        x \\<in> segment D a \\<rbrakk> \\<Longrightarrow> f x = Tw D E x\"", "lemma (in Worder) Tw_ord_injTr:\"\\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.\n        ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;  a \\<prec> b\\<rbrakk> \\<Longrightarrow>  \n              Tw D E a \\<prec>\\<^bsub>E\\<^esub> (Tw D E b)\"", "lemma (in Worder) Tw_ord_inj:\"\\<lbrakk>Worder E; \n       \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. ord_equiv (Iod D (segment D a)) \n            (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> ord_inj D E (Tw D E)\"", "lemma (in Worder) ord_isom_restricted_by_Tw:\"\\<lbrakk>Worder E; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.  \n             ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n       D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> \n  ord_isom (Iod D D1) (Iod E ((Tw D E) ` D1)) \n                                  (restrict (Tw D E) D1)\"", "lemma (in Worder) Tw_segment_segment:\"\\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\\<exists>b\\<in>carrier E. \n        ord_equiv (Iod D (segment D a)) (Iod E (segment E b)); a \\<in> carrier D\\<rbrakk>\n     \\<Longrightarrow> Tw D E ` (segment D a) = segment E (Tw D E a)\"", "lemma (in Worder) ord_isom_Tw_segment:\"\\<lbrakk>Worder E; \n \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. \n       ord_equiv (Iod D (segment D a)) (Iod E (segment E b)); a\\<in>carrier D\\<rbrakk> \\<Longrightarrow>\n  ord_isom (Iod D (segment D a)) (Iod E (segment E (Tw D E a))) \n              (restrict (Tw D E) (segment D a))\"", "lemma (in Worder) well_ord_compare1:\"\\<lbrakk>Worder E; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. \n          ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> \n    (ord_equiv D E) \\<or> (\\<exists>c\\<in>carrier E. ord_equiv D (Iod E (segment E c)))\"", "lemma bex_nonempty_set:\"\\<exists>x \\<in> A. P x \\<Longrightarrow> {x. x \\<in> A \\<and> P x } \\<noteq> {}\"", "lemma nonempty_set_sub:\"{x. x \\<in> A \\<and> P x } \\<noteq> {} \\<Longrightarrow> \n                                    {x. x \\<in> A \\<and> P x} \\<subseteq> A\"", "lemma (in Torder) less_minimum:\"\\<lbrakk>minimum_elem D {x. x \\<in> carrier D \\<and> P x} d\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a. (((a \\<prec> d) \\<and> a \\<in> carrier D) \\<longrightarrow>  \\<not> (P a))\"", "lemma (in Torder) segment_minimum_empty:\"\\<lbrakk>X \\<subseteq> carrier D; d \\<in> X\\<rbrakk> \\<Longrightarrow> \n             (minimum_elem D X d) = (segment (Iod D X) d = {})\""], "translations": [["", "lemma True_then:\"True \\<longrightarrow> P \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. True \\<longrightarrow> P \\<Longrightarrow> P", "by simp"], ["", "lemma ex_conjI:\"\\<lbrakk>P c; Q c\\<rbrakk> \\<Longrightarrow> \\<exists>c. P c \\<and> Q c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P c; Q c\\<rbrakk> \\<Longrightarrow> \\<exists>c. P c \\<and> Q c", "by blast"], ["", "lemma forall_spec:\"\\<lbrakk> \\<forall>b. P b \\<longrightarrow> Q b; P a\\<rbrakk> \\<Longrightarrow> Q a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>b. P b \\<longrightarrow> Q b; P a\\<rbrakk>\n    \\<Longrightarrow> Q a", "by simp"], ["", "lemma a_b_exchange:\"\\<lbrakk>a; a = b\\<rbrakk> \\<Longrightarrow> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a; a = b\\<rbrakk> \\<Longrightarrow> b", "by simp"], ["", "lemma eq_prop:\"\\<lbrakk> P; P = Q\\<rbrakk> \\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P; P = Q\\<rbrakk> \\<Longrightarrow> Q", "by simp"], ["", "lemma forball_contra:\"\\<lbrakk>\\<forall>y\\<in>A. P x y \\<longrightarrow> \\<not> Q y; \\<forall>y\\<in>A. Q y \\<or> R y\\<rbrakk> \\<Longrightarrow> \n                    \\<forall>y\\<in>A. (\\<not> P x y) \\<or> R y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>A. P x y \\<longrightarrow> \\<not> Q y;\n     \\<forall>y\\<in>A. Q y \\<or> R y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>A. \\<not> P x y \\<or> R y", "by blast"], ["", "lemma forball_contra1:\"\\<lbrakk>\\<forall>y\\<in>A. P x y \\<longrightarrow> Q y; \\<forall>y\\<in>A. \\<not> Q y\\<rbrakk> \\<Longrightarrow> \\<forall>y\\<in>A. \\<not> P x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>A. P x y \\<longrightarrow> Q y;\n     \\<forall>y\\<in>A. \\<not> Q y\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>A. \\<not> P x y", "by blast"], ["", "section \"Natural numbers and Integers\""], ["", "text\\<open>Elementary properties of natural numbers and integers\\<close>"], ["", "lemma nat_nonzero_pos:\"(a::nat) \\<noteq> 0 \\<Longrightarrow> 0 < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow> 0 < a", "by simp"], ["", "lemma add_both:\"(a::nat) = b \\<Longrightarrow> a + c = b + c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow> a + c = b + c", "by simp"], ["", "lemma add_bothl:\"a = b \\<Longrightarrow> c + a = c + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow> c + a = c + b", "by simp"], ["", "lemma diff_Suc:\"(n::nat) \\<le> m \\<Longrightarrow> m - n + Suc 0 = Suc m - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<Longrightarrow> m - n + Suc 0 = Suc m - n", "by arith"], ["", "lemma le_convert:\"\\<lbrakk>a = b; a \\<le> c\\<rbrakk> \\<Longrightarrow> b \\<le> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = b; a \\<le> c\\<rbrakk> \\<Longrightarrow> b \\<le> c", "by simp"], ["", "lemma ge_convert:\"\\<lbrakk>a = b; c \\<le> a\\<rbrakk> \\<Longrightarrow> c \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = b; c \\<le> a\\<rbrakk> \\<Longrightarrow> c \\<le> b", "by simp"], ["", "lemma less_convert:\"\\<lbrakk> a = b; c < b \\<rbrakk> \\<Longrightarrow> c < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = b; c < b\\<rbrakk> \\<Longrightarrow> c < a", "by auto"], ["", "lemma ineq_conv1:\"\\<lbrakk>a = b; a < c\\<rbrakk> \\<Longrightarrow> b < c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = b; a < c\\<rbrakk> \\<Longrightarrow> b < c", "by simp"], ["", "lemma diff_Suc_pos:\"0 < a - Suc 0 \\<Longrightarrow>  0 < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < a - Suc 0 \\<Longrightarrow> 0 < a", "by simp"], ["", "lemma minus_SucSuc:\"a - Suc (Suc 0) = a - Suc 0 - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - Suc (Suc 0) = a - Suc 0 - Suc 0", "by simp"], ["", "lemma Suc_Suc_Tr:\"Suc (Suc 0) \\<le> n \\<Longrightarrow> Suc (n - Suc (Suc 0)) = n - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc 0) \\<le> n \\<Longrightarrow> Suc (n - Suc (Suc 0)) = n - Suc 0", "by arith"], ["", "lemma Suc_Suc_less:\"Suc 0 < a \\<Longrightarrow> Suc (a - Suc (Suc 0)) < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 < a \\<Longrightarrow> Suc (a - Suc (Suc 0)) < a", "by arith"], ["", "lemma diff_zero_eq:\"n = (0::nat) \\<Longrightarrow> m = m - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> m = m - n", "by simp"], ["", "lemma Suc_less_le:\"x < Suc n \\<Longrightarrow> x \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < Suc n \\<Longrightarrow> x \\<le> n", "by auto"], ["", "lemma less_le_diff:\"x < n \\<Longrightarrow> x \\<le> n - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < n \\<Longrightarrow> x \\<le> n - Suc 0", "by arith"], ["", "lemma le_pre_le:\"x \\<le> n - Suc 0 \\<Longrightarrow> x \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n - Suc 0 \\<Longrightarrow> x \\<le> n", "by arith"], ["", "lemma nat_not_less:\"\\<not> (m::nat) < n \\<Longrightarrow> n \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow> n \\<le> m", "by (rule contrapos_pp, simp+)"], ["", "lemma less_neq:\"n < (m::nat) \\<Longrightarrow> n \\<noteq> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < m \\<Longrightarrow> n \\<noteq> m", "by (simp add:nat_neq_iff[THEN sym, of \"n\" \"m\"])"], ["", "lemma less_le_diff1:\"n \\<noteq> 0 \\<Longrightarrow> ((m::nat) < n) = (m \\<le> (n - Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> (m < n) = (m \\<le> n - Suc 0)", "by arith"], ["", "lemma nat_not_less1:\"n \\<noteq> 0 \\<Longrightarrow> (\\<not> (m::nat) < n) = (\\<not> m \\<le> (n - Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    (\\<not> m < n) = (\\<not> m \\<le> n - Suc 0)", "by arith"], ["", "lemma nat_eq_le:\"m = (n::nat) \\<Longrightarrow> m \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n \\<Longrightarrow> m \\<le> n", "by simp"], ["", "subsection \"Integers\""], ["", "lemma non_zero_int:\" (n::int) \\<noteq> 0 \\<Longrightarrow> 0 < n \\<or> n < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> 0 < n \\<or> n < 0", "by arith"], ["", "lemma zgt_0_zge_1:\"(0::int) < z \\<Longrightarrow> 1 \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < z \\<Longrightarrow> 1 \\<le> z", "by arith"], ["", "lemma not_zle:\"(\\<not> (n::int) \\<le> m) =  (m < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> n \\<le> m) = (m < n)", "by auto"], ["", "lemma not_zless:\"(\\<not> (n::int) < m) = (m \\<le> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> n < m) = (m \\<le> n)", "by auto"], ["", "lemma zle_imp_zless_or_eq:\"(n::int) \\<le> m \\<Longrightarrow> n < m \\<or> n = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<Longrightarrow> n < m \\<or> n = m", "by arith"], ["", "lemma zminus_zadd_cancel:\" - z + (z + w) = (w::int)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - z + (z + w) = w", "by simp"], ["", "lemma int_neq_iff:\"((w::int) \\<noteq> z) = (w < z) \\<or> (z < w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<noteq> z) = (w < z) \\<or> z < w", "by auto"], ["", "lemma zless_imp_zle:\"(z::int) < z' \\<Longrightarrow> z \\<le> z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z < z' \\<Longrightarrow> z \\<le> z'", "by simp"], ["", "lemma zdiff:\"z - (w::int) = z + (- w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z - w = z + - w", "by simp"], ["", "lemma zle_zless_trans:\"\\<lbrakk> (i::int) \\<le> j; j < k\\<rbrakk> \\<Longrightarrow> i < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; j < k\\<rbrakk> \\<Longrightarrow> i < k", "by arith"], ["", "lemma zless_zle_trans:\"\\<lbrakk> (i::int) < j; j \\<le> k\\<rbrakk> \\<Longrightarrow> i < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; j \\<le> k\\<rbrakk> \\<Longrightarrow> i < k", "by arith"], ["", "lemma zless_neq:\"(i::int) < j \\<Longrightarrow> i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow> i \\<noteq> j", "by simp"], ["", "lemma int_mult_mono:\"\\<lbrakk> i < j; (0::int) < k \\<rbrakk> \\<Longrightarrow> k * i < k * j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; 0 < k\\<rbrakk> \\<Longrightarrow> k * i < k * j", "apply (frule zmult_zless_mono2_lemma [of \"i\" \"j\" \"nat k\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < j; 0 < k\\<rbrakk> \\<Longrightarrow> 0 < nat k\n 2. \\<lbrakk>i < j; 0 < k; int (nat k) * i < int (nat k) * j\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; 0 < k; int (nat k) * i < int (nat k) * j\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma int_mult_le:\"\\<lbrakk>i \\<le> j; (0::int) \\<le> k\\<rbrakk> \\<Longrightarrow> k * i \\<le> k * j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; 0 \\<le> k\\<rbrakk>\n    \\<Longrightarrow> k * i \\<le> k * j", "apply (simp add:order_le_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j", "apply (case_tac \"i < j\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0; i < j\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j\n 2. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j", "apply (case_tac \"0 < k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0; i < j; 0 < k\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j\n 2. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0; i < j;\n     \\<not> 0 < k\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j\n 3. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0; i < j;\n     \\<not> 0 < k\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j\n 2. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j \\<or> i = j; 0 < k \\<or> k = 0; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> k * i < k * j \\<or> k = 0 \\<or> i = j", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma int_mult_le1:\"\\<lbrakk>i \\<le> j; (0::int) \\<le> k\\<rbrakk> \\<Longrightarrow> i * k \\<le> j * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; 0 \\<le> k\\<rbrakk>\n    \\<Longrightarrow> i * k \\<le> j * k", "apply (simp add:mult.commute[of _ \"k\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; 0 \\<le> k\\<rbrakk>\n    \\<Longrightarrow> k * i \\<le> k * j", "apply (simp add:int_mult_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_zminus_right:\"(w::int) * (- z) = - (w * z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w * - z = - (w * z)", "apply (insert distrib_left[of \"w\" \"z\" \"-z\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. w * (z + - z) = w * z + w * - z \\<Longrightarrow> w * - z = - (w * z)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_zle_mono1_neg:\"\\<lbrakk>(i::int) \\<le> j; k \\<le> 0\\<rbrakk> \\<Longrightarrow> j * k \\<le> i * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; k \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> j * k \\<le> i * k", "apply (subgoal_tac \"0 \\<le> - k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; k \\<le> 0; 0 \\<le> - k\\<rbrakk>\n    \\<Longrightarrow> j * k \\<le> i * k\n 2. \\<lbrakk>i \\<le> j; k \\<le> 0\\<rbrakk> \\<Longrightarrow> 0 \\<le> - k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; k \\<le> 0\\<rbrakk> \\<Longrightarrow> 0 \\<le> - k\n 2. \\<lbrakk>i \\<le> j; k \\<le> 0; 0 \\<le> - k\\<rbrakk>\n    \\<Longrightarrow> j * k \\<le> i * k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; k \\<le> 0; 0 \\<le> - k\\<rbrakk>\n    \\<Longrightarrow> j * k \\<le> i * k", "apply (frule int_mult_le [of \"i\" \"j\" \"- k\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; k \\<le> 0; 0 \\<le> - k;\n     - k * i \\<le> - k * j\\<rbrakk>\n    \\<Longrightarrow> j * k \\<le> i * k", "apply (simp add:mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_zless_mono_neg:\"\\<lbrakk>(i::int) < j; k < 0\\<rbrakk> \\<Longrightarrow> j * k < i * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; k < 0\\<rbrakk> \\<Longrightarrow> j * k < i * k", "apply (subgoal_tac \"0 < -k\", \n       frule int_mult_mono[of \"i\" \"j\" \"-k\"], assumption+,\n       simp add:mult.commute, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_neg_neg:\"\\<lbrakk>i < (0::int); j < 0 \\<rbrakk> \\<Longrightarrow> 0 < i * j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < 0; j < 0\\<rbrakk> \\<Longrightarrow> 0 < i * j", "apply (frule zmult_zless_mono_neg[of \"i\" \"0\" \"j\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < 0; j < 0; 0 * j < i * j\\<rbrakk>\n    \\<Longrightarrow> 0 < i * j", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_pos_pos:\"\\<lbrakk>(0::int) < i; 0 < j\\<rbrakk> \\<Longrightarrow> 0 < i * j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 < j\\<rbrakk> \\<Longrightarrow> 0 < i * j", "apply (frule int_mult_mono[of \"0\" \"i\" \"j\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 < j; j * 0 < j * i\\<rbrakk>\n    \\<Longrightarrow> 0 < i * j", "apply (simp add:mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_pos_neg:\"\\<lbrakk>(0::int) < i; j < 0\\<rbrakk> \\<Longrightarrow> i * j < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; j < 0\\<rbrakk> \\<Longrightarrow> i * j < 0", "apply (frule zmult_zless_mono_neg[of \"0\" \"i\" \"j\"], assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_neg_pos:\"\\<lbrakk>i < (0::int); 0 < j\\<rbrakk> \\<Longrightarrow> i * j < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < 0; 0 < j\\<rbrakk> \\<Longrightarrow> i * j < 0", "apply (frule int_mult_mono[of \"i\" \"0\" \"j\"], assumption+, \n       simp add:mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zle:\"((z::int) \\<le> w) = (\\<not> (w < z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<le> w) = (\\<not> w < z)", "by auto"], ["", "lemma times_1_both:\"\\<lbrakk>(0::int) < z; z * z' = 1\\<rbrakk> \\<Longrightarrow> z = 1 \\<and> z' = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < z; z * z' = 1\\<rbrakk>\n    \\<Longrightarrow> z = 1 \\<and> z' = 1", "apply (subgoal_tac \"0 < z'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < z; z * z' = 1; 0 < z'\\<rbrakk>\n    \\<Longrightarrow> z = 1 \\<and> z' = 1\n 2. \\<lbrakk>0 < z; z * z' = 1\\<rbrakk> \\<Longrightarrow> 0 < z'", "apply (frule zgt_0_zge_1[of \"z'\"],\n        subgoal_tac \"z' = 1\", simp,\n        subgoal_tac \"1 < z' \\<or> 1 = z'\", thin_tac \"1 \\<le> z'\", thin_tac \"0 < z'\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>0 < z; z * z' = 1; 1 < z' \\<or> 1 = z'\\<rbrakk>\n    \\<Longrightarrow> z' = 1\n 2. \\<lbrakk>0 < z; z * z' = 1; 0 < z'; 1 \\<le> z'\\<rbrakk>\n    \\<Longrightarrow> 1 < z' \\<or> 1 = z'\n 3. \\<lbrakk>0 < z; z * z' = 1\\<rbrakk> \\<Longrightarrow> 0 < z'", "apply (rule contrapos_pp, simp+,\n        frule int_mult_mono[of \"1\" \"z'\" \"z\"], assumption+, simp, arith)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < z; z * z' = 1\\<rbrakk> \\<Longrightarrow> 0 < z'", "apply (rule contrapos_pp, simp+, simp add:zle[THEN sym], \n       frule zless_imp_zle[of \"0\" \"z\"], frule int_mult_le[of \"z'\" \"0\" \"z\"], \n       assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zminus_minus:\"i - - (j::int) = i + j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i - - j = i + j", "by simp"], ["", "lemma zminus_minus_pos:\"(n::int) < 0 \\<Longrightarrow> 0 < - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < 0 \\<Longrightarrow> 0 < - n", "by simp"], ["", "lemma zadd_zle_mono:\"\\<lbrakk>w' \\<le> w; z' \\<le> (z::int)\\<rbrakk> \\<Longrightarrow> w' + z' \\<le> w + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w' \\<le> w; z' \\<le> z\\<rbrakk>\n    \\<Longrightarrow> w' + z' \\<le> w + z", "by simp"], ["", "lemma zmult_zle_mono:\"\\<lbrakk>i \\<le> (j::int); 0 < k\\<rbrakk> \\<Longrightarrow> k * i \\<le>  k * j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; 0 < k\\<rbrakk> \\<Longrightarrow> k * i \\<le> k * j", "apply (case_tac \"i = j\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; 0 < k; i = j\\<rbrakk>\n    \\<Longrightarrow> k * i \\<le> k * j\n 2. \\<lbrakk>i \\<le> j; 0 < k; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> k * i \\<le> k * j", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; 0 < k; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> k * i \\<le> k * j", "apply (frule zle_imp_zless_or_eq[of \"i\" \"j\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; 0 < k; i \\<noteq> j; i < j \\<or> i = j\\<rbrakk>\n    \\<Longrightarrow> k * i \\<le> k * j", "apply (thin_tac \"i \\<le> j\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; i \\<noteq> j; i < j \\<or> i = j\\<rbrakk>\n    \\<Longrightarrow> k * i \\<le> k * j", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_zle_mono_r:\"\\<lbrakk>i \\<le> (j::int); 0 < k\\<rbrakk> \\<Longrightarrow> i * k \\<le> j * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; 0 < k\\<rbrakk> \\<Longrightarrow> i * k \\<le> j * k", "apply (frule zmult_zle_mono[of \"i\" \"j\" \"k\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; 0 < k; k * i \\<le> k * j\\<rbrakk>\n    \\<Longrightarrow> i * k \\<le> j * k", "apply (simp add:mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pos_zmult_pos:\"\\<lbrakk> 0 \\<le> (a::int); 0 < (b::int)\\<rbrakk> \\<Longrightarrow> a \\<le> a * b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> a; 0 < b\\<rbrakk> \\<Longrightarrow> a \\<le> a * b", "apply (case_tac \"a = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<le> a; 0 < b; a = 0\\<rbrakk>\n    \\<Longrightarrow> a \\<le> a * b\n 2. \\<lbrakk>0 \\<le> a; 0 < b; a \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> a \\<le> a * b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> a; 0 < b; a \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> a \\<le> a * b", "apply (frule zle_imp_zless_or_eq[of \"0\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> a; 0 < b; a \\<noteq> 0; 0 < a \\<or> 0 = a\\<rbrakk>\n    \\<Longrightarrow> a \\<le> a * b", "apply (thin_tac \"0 \\<le> a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < b; a \\<noteq> 0; 0 < a \\<or> 0 = a\\<rbrakk>\n    \\<Longrightarrow> a \\<le> a * b", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pos_mult_l_gt:\"\\<lbrakk>(0::int) < w; i \\<le> j; 0 \\<le> i\\<rbrakk> \\<Longrightarrow> i \\<le> w * j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; i \\<le> j; 0 \\<le> i\\<rbrakk>\n    \\<Longrightarrow> i \\<le> w * j", "by (metis not_zless pos_zmult_pos order_trans mult.commute)"], ["", "lemma  pos_mult_r_gt:\"\\<lbrakk>(0::int) < w; i \\<le> j; 0 \\<le> i\\<rbrakk> \\<Longrightarrow> i \\<le> j * w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; i \\<le> j; 0 \\<le> i\\<rbrakk>\n    \\<Longrightarrow> i \\<le> j * w", "apply (frule pos_mult_l_gt[of \"w\" \"i\" \"j\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; i \\<le> j; 0 \\<le> i; i \\<le> w * j\\<rbrakk>\n    \\<Longrightarrow> i \\<le> j * w", "apply (simp add:mult.commute[of \"w\" \"j\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mult_pos_iff:\"\\<lbrakk>(0::int) < i; 0 \\<le> i * j \\<rbrakk> \\<Longrightarrow> 0 \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 \\<le> i * j\\<rbrakk> \\<Longrightarrow> 0 \\<le> j", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 \\<le> i * j; \\<not> 0 \\<le> j\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac linorder_linear[of \"0\" \"j\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 \\<le> i * j; \\<not> 0 \\<le> j;\n     0 \\<le> j \\<or> j \\<le> 0\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 \\<le> i * j; \\<not> 0 \\<le> j\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:not_zle)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 \\<le> i * j; j < 0\\<rbrakk> \\<Longrightarrow> False", "apply (frule int_mult_mono[of \"j\" \"0\" \"i\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 \\<le> i * j; j < 0; i * j < i * 0\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_eq:\"\\<lbrakk>(0::int) < w; z = z'\\<rbrakk> \\<Longrightarrow> w * z = w * z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; z = z'\\<rbrakk> \\<Longrightarrow> w * z = w * z'", "by simp"], ["", "lemma zmult_eq_r:\"\\<lbrakk>(0::int) < w; z = z'\\<rbrakk> \\<Longrightarrow> z * w =  z' * w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; z = z'\\<rbrakk> \\<Longrightarrow> z * w = z' * w", "by simp"], ["", "lemma zdiv_eq_l:\"\\<lbrakk>(0::int) < w; z * w  = z' * w \\<rbrakk> \\<Longrightarrow> z = z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; z * w = z' * w\\<rbrakk> \\<Longrightarrow> z = z'", "by simp"], ["", "lemma zdiv_eq_r:\"\\<lbrakk>(0::int) < w; w * z  = w * z' \\<rbrakk> \\<Longrightarrow> z = z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; w * z = w * z'\\<rbrakk> \\<Longrightarrow> z = z'", "by simp"], ["", "lemma int_nat_minus:\"0 < (n::int) \\<Longrightarrow> nat (n - 1) = (nat n) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> nat (n - 1) = nat n - 1", "by arith"], ["", "lemma int_nat_add:\"\\<lbrakk>0 < (n::int); 0 < (m::int)\\<rbrakk> \\<Longrightarrow> (nat (n - 1)) + (nat (m - 1)) + (Suc 0) = nat (n + m - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; 0 < m\\<rbrakk>\n    \\<Longrightarrow> nat (n - 1) + nat (m - 1) + Suc 0 = nat (n + m - 1)", "by arith"], ["", "lemma int_equation:\"(x::int) = y + z \\<Longrightarrow> x - y = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y + z \\<Longrightarrow> x - y = z", "by simp"], ["", "lemma int_pos_mult_monor:\"\\<lbrakk> 0 < (n::int); 0 \\<le> n * m \\<rbrakk> \\<Longrightarrow> 0 \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; 0 \\<le> n * m\\<rbrakk> \\<Longrightarrow> 0 \\<le> m", "by (rule mult_pos_iff, assumption+)"], ["", "lemma int_pos_mult_monol:\"\\<lbrakk> 0 < (m::int); 0 \\<le> n * m \\<rbrakk> \\<Longrightarrow> 0 \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < m; 0 \\<le> n * m\\<rbrakk> \\<Longrightarrow> 0 \\<le> n", "apply (rule int_pos_mult_monor, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < m; 0 \\<le> n * m\\<rbrakk> \\<Longrightarrow> 0 \\<le> m * n", "apply (simp add:mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zdiv_positive:\"\\<lbrakk>(0::int) \\<le> a; 0 < b\\<rbrakk> \\<Longrightarrow> 0 \\<le> a div b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> a; 0 < b\\<rbrakk> \\<Longrightarrow> 0 \\<le> a div b", "apply (frule_tac a = 0 and a' = a and b = b in zdiv_mono1, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> a; 0 < b; 0 div b \\<le> a div b\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> a div b", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zdiv_pos_mono_r:\"\\<lbrakk> (0::int) < w; w * z \\<le> w * z'\\<rbrakk> \\<Longrightarrow> z \\<le> z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; w * z \\<le> w * z'\\<rbrakk> \\<Longrightarrow> z \\<le> z'", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(** zmult_div_mono to rename **)"], ["", "lemma zdiv_pos_mono_l:\"\\<lbrakk> (0::int) < w; z * w \\<le> z' * w\\<rbrakk> \\<Longrightarrow> z \\<le> z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; z * w \\<le> z' * w\\<rbrakk> \\<Longrightarrow> z \\<le> z'", "apply (simp add:mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zdiv_pos_pos_l:\"\\<lbrakk> (0::int) < w; 0 \\<le> z * w\\<rbrakk> \\<Longrightarrow> 0 \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; 0 \\<le> z * w\\<rbrakk> \\<Longrightarrow> 0 \\<le> z", "by (simp add:mult.commute, frule zdiv_pos_mono_r[of \"w\" \"0\" \"z\"], simp, \n        assumption)"], ["", "section \"Sets\""], ["", "(* Preliminary properties of sets are proved here. Some of them are \n already proved by L. Paulson and others. *)"], ["", "subsection \"A short notes for proof steps\""], ["", "subsection \"Sets\""], ["", "lemma inEx:\"x \\<in> A \\<Longrightarrow> \\<exists>y\\<in>A. y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> \\<exists>y\\<in>A. y = x", "by simp"], ["", "lemma inEx_rev:\" \\<exists>y\\<in>A. y = x \\<Longrightarrow> x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>A. y = x \\<Longrightarrow> x \\<in> A", "by blast"], ["", "lemma nonempty_ex:\"A \\<noteq> {} \\<Longrightarrow> \\<exists>x. x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> \\<exists>x. x \\<in> A", "by blast"], ["", "lemma ex_nonempty:\"\\<exists>x. x \\<in> A \\<Longrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> A \\<Longrightarrow> A \\<noteq> {}", "by blast"], ["", "lemma not_eq_outside:\"a \\<notin> A \\<Longrightarrow> \\<forall>b\\<in>A. b \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow> \\<forall>b\\<in>A. b \\<noteq> a", "by blast"], ["", "lemma ex_nonempty_set:\"\\<exists>a. P a \\<Longrightarrow> {x. P x} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. P a \\<Longrightarrow> {x. P x} \\<noteq> {}", "by blast"], ["", "lemma nonempty: \"x \\<in> A \\<Longrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> A \\<noteq> {}", "by blast"], ["", "lemma subset_self:\"A \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> A", "by simp"], ["", "lemma conditional_subset:\"{x\\<in>A. P x} \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} \\<subseteq> A", "by blast"], ["", "lemma bsubsetTr:\"{x. x \\<in> A \\<and> P x} \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} \\<subseteq> A", "by blast"], ["", "lemma sets_not_eq:\"\\<lbrakk>A \\<noteq> B; B \\<subseteq> A\\<rbrakk> \\<Longrightarrow> \\<exists>a\\<in>A. a \\<notin> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> B; B \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a\\<in>A. a \\<notin> B", "by blast"], ["", "lemma diff_nonempty:\"\\<lbrakk>A \\<noteq> B; B \\<subseteq> A\\<rbrakk> \\<Longrightarrow> A - B \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> B; B \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> A - B \\<noteq> {}", "by blast"], ["", "lemma sub_which1:\"\\<lbrakk>A \\<subseteq> B \\<or> B \\<subseteq> A; x \\<in> A; x \\<notin> B\\<rbrakk> \\<Longrightarrow> B \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B \\<or> B \\<subseteq> A; x \\<in> A;\n     x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> B \\<subseteq> A", "by blast"], ["", "lemma sub_which2:\"\\<lbrakk>A \\<subseteq> B \\<or> B \\<subseteq> A; x \\<notin> A; x \\<in> B\\<rbrakk> \\<Longrightarrow> A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B \\<or> B \\<subseteq> A; x \\<notin> A;\n     x \\<in> B\\<rbrakk>\n    \\<Longrightarrow> A \\<subseteq> B", "by blast"], ["", "lemma nonempty_int: \"A \\<inter> B \\<noteq> {} \\<Longrightarrow> \\<exists>x. x \\<in> A \\<inter> B \""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> B \\<noteq> {} \\<Longrightarrow>\n    \\<exists>x. x \\<in> A \\<inter> B", "by blast"], ["", "lemma no_meet1:\"A \\<inter> B = {}\\<Longrightarrow> \\<forall>a \\<in> A. a \\<notin> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> B = {} \\<Longrightarrow> \\<forall>a\\<in>A. a \\<notin> B", "by blast"], ["", "lemma no_meet2:\"A \\<inter> B = {}\\<Longrightarrow> \\<forall>a \\<in> B. a \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<inter> B = {} \\<Longrightarrow> \\<forall>a\\<in>B. a \\<notin> A", "by blast"], ["", "lemma elem_some:\"x \\<in> A \\<Longrightarrow> \\<exists>y\\<in>A. x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> \\<exists>y\\<in>A. x = y", "by blast"], ["", "lemma singleton_sub:\"a \\<in> A \\<Longrightarrow> {a} \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> A \\<Longrightarrow> {a} \\<subseteq> A", "by blast"], ["", "lemma eq_elem_in: \"\\<lbrakk> a \\<in> A; a = b \\<rbrakk> \\<Longrightarrow> b \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; a = b\\<rbrakk> \\<Longrightarrow> b \\<in> A", "by simp"], ["", "lemma eq_set_inc: \"\\<lbrakk> a \\<in> A; A = B \\<rbrakk> \\<Longrightarrow> a \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A = B\\<rbrakk> \\<Longrightarrow> a \\<in> B", "by simp"], ["", "lemma eq_set_not_inc:\"\\<lbrakk>a \\<notin> A; A = B \\<rbrakk> \\<Longrightarrow> a \\<notin> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> A; A = B\\<rbrakk> \\<Longrightarrow> a \\<notin> B", "by simp"], ["", "lemma int_subsets: \"\\<lbrakk> A1 \\<subseteq> A; B1 \\<subseteq> B \\<rbrakk> \\<Longrightarrow> A1 \\<inter> B1 \\<subseteq> A \\<inter> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A1 \\<subseteq> A; B1 \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> A1 \\<inter> B1 \\<subseteq> A \\<inter> B", "by blast"], ["", "lemma inter_mono:\"A \\<subseteq> B \\<Longrightarrow> A \\<inter> C \\<subseteq> B \\<inter> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> A \\<inter> C \\<subseteq> B \\<inter> C", "by blast"], ["", "lemma sub_Un1:\"B \\<subseteq>  B \\<union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> B \\<union> C", "by blast"], ["", "lemma sub_Un2:\"C \\<subseteq>  B \\<union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<subseteq> B \\<union> C", "by blast"], ["", "lemma subset_contr:\"\\<lbrakk> A \\<subset> B; B \\<subseteq> A \\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subset> B; B \\<subseteq> A\\<rbrakk> \\<Longrightarrow> False", "by blast"], ["", "lemma psubset_contr:\"\\<lbrakk> A \\<subset> B; B \\<subset> A \\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subset> B; B \\<subset> A\\<rbrakk> \\<Longrightarrow> False", "by blast"], ["", "lemma eqsets_sub:\"A = B \\<Longrightarrow> A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B \\<Longrightarrow> A \\<subseteq> B", "by simp"], ["", "lemma not_subseteq:\" \\<not> A \\<subseteq> B \\<Longrightarrow> \\<exists>a \\<in> A. a \\<notin> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A \\<subseteq> B \\<Longrightarrow> \\<exists>a\\<in>A. a \\<notin> B", "by blast"], ["", "lemma in_un1:\"\\<lbrakk> x \\<in> A \\<union> B; x \\<notin> B \\<rbrakk> \\<Longrightarrow> x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A \\<union> B; x \\<notin> B\\<rbrakk>\n    \\<Longrightarrow> x \\<in> A", "by blast"], ["", "lemma proper_subset:\"\\<lbrakk>A \\<subseteq> B; x \\<notin> A; x \\<in> B\\<rbrakk> \\<Longrightarrow> A \\<noteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; x \\<notin> A; x \\<in> B\\<rbrakk>\n    \\<Longrightarrow> A \\<noteq> B", "by blast"], ["", "lemma in_un2:\"\\<lbrakk> x \\<in> A \\<union> B; x \\<notin> A \\<rbrakk> \\<Longrightarrow> x \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A \\<union> B; x \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> x \\<in> B", "by simp"], ["", "lemma diff_disj:\"x \\<notin> A \\<Longrightarrow> A - {x} = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> A \\<Longrightarrow> A - {x} = A", "by auto"], ["", "lemma in_diff:\"\\<lbrakk>x \\<noteq> a; x \\<in> A\\<rbrakk> \\<Longrightarrow> x \\<in> A - {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> a; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> x \\<in> A - {a}", "by simp"], ["", "lemma in_diff1:\"x \\<in> A - {a} \\<Longrightarrow> x \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A - {a} \\<Longrightarrow> x \\<noteq> a", "by simp"], ["", "lemma sub_inserted1:\"\\<lbrakk>Y \\<subseteq> insert a X; \\<not> Y \\<subseteq> X\\<rbrakk> \\<Longrightarrow> a \\<notin> X \\<and> a \\<in> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> insert a X; \\<not> Y \\<subseteq> X\\<rbrakk>\n    \\<Longrightarrow> a \\<notin> X \\<and> a \\<in> Y", "by blast"], ["", "lemma sub_inserted2:\"\\<lbrakk>Y \\<subseteq> insert a X; \\<not> Y \\<subseteq> X\\<rbrakk> \\<Longrightarrow> Y = (Y - {a}) \\<union> {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<subseteq> insert a X; \\<not> Y \\<subseteq> X\\<rbrakk>\n    \\<Longrightarrow> Y = Y - {a} \\<union> {a}", "by blast"], ["", "lemma insert_sub:\"\\<lbrakk> A \\<subseteq> B; a \\<in> B\\<rbrakk> \\<Longrightarrow> (insert a A) \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; a \\<in> B\\<rbrakk>\n    \\<Longrightarrow> insert a A \\<subseteq> B", "by blast"], ["", "lemma insert_diff:\"A \\<subseteq> (insert b B) \\<Longrightarrow> A - {b} \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> insert b B \\<Longrightarrow> A - {b} \\<subseteq> B", "by blast"], ["", "lemma insert_inc1:\"A \\<subseteq> insert a A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> insert a A", "by blast"], ["", "lemma insert_inc2:\"a \\<in> insert a A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> insert a A", "by simp"], ["", "lemma nonempty_some:\"A \\<noteq> {} \\<Longrightarrow> (SOME x. x \\<in> A) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> (SOME x. x \\<in> A) \\<in> A", "apply (frule nonempty_ex[of \"A\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; \\<exists>x. x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (SOME x. x \\<in> A) \\<in> A", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A \\<noteq> {}; \\<exists>x. x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> A\n 2. \\<And>x.\n       \\<lbrakk>A \\<noteq> {}; \\<exists>x. x \\<in> A; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mem_family_sub_Un:\"A \\<in> C \\<Longrightarrow> A \\<subseteq> \\<Union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> C \\<Longrightarrow> A \\<subseteq> \\<Union> C", "by blast"], ["", "lemma sub_Union:\"\\<exists>X\\<in>C. A \\<subseteq> X \\<Longrightarrow> A \\<subseteq> \\<Union> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>X\\<in>C. A \\<subseteq> X \\<Longrightarrow>\n    A \\<subseteq> \\<Union> C", "by blast"], ["", "lemma family_subset_Un_sub:\"\\<forall>A\\<in>C. A \\<subseteq> B \\<Longrightarrow> \\<Union> C \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>C. A \\<subseteq> B \\<Longrightarrow>\n    \\<Union> C \\<subseteq> B", "by blast"], ["", "lemma in_set_with_P:\"P x \\<Longrightarrow> x \\<in> {y. P y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<Longrightarrow> x \\<in> {y. P y}", "by blast"], ["", "lemma sub_single:\"\\<lbrakk>A \\<noteq> {}; A \\<subseteq> {a}\\<rbrakk> \\<Longrightarrow> A = {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> {a}\\<rbrakk>\n    \\<Longrightarrow> A = {a}", "by blast"], ["", "lemma not_sub_single:\"\\<lbrakk>A \\<noteq> {}; A \\<noteq> {a}\\<rbrakk> \\<Longrightarrow> \\<not> A \\<subseteq> {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<noteq> {a}\\<rbrakk>\n    \\<Longrightarrow> \\<not> A \\<subseteq> {a}", "by blast"], ["", "lemma not_sub:\"\\<not> A \\<subseteq> B \\<Longrightarrow> \\<exists>a. a\\<in>A \\<and> a \\<notin> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> A \\<subseteq> B \\<Longrightarrow>\n    \\<exists>a. a \\<in> A \\<and> a \\<notin> B", "by blast"], ["", "section \"Functions\""], ["", "definition\n  cmp :: \"['b \\<Rightarrow> 'c, 'a \\<Rightarrow> 'b] \\<Rightarrow> ('a \\<Rightarrow> 'c)\" where\n  \"cmp g f = (\\<lambda>x. g (f x))\""], ["", "definition\n  idmap :: \"'a set \\<Rightarrow> ('a \\<Rightarrow> 'a)\" where\n  \"idmap A = (\\<lambda>x\\<in>A. x)\""], ["", "definition\n  constmap :: \"['a set, 'b set] \\<Rightarrow> ('a \\<Rightarrow>'b)\" where\n  \"constmap A B = (\\<lambda>x\\<in>A. SOME y. y \\<in> B)\""], ["", "definition\n  invfun :: \"['a set, 'b set, 'a \\<Rightarrow> 'b] \\<Rightarrow> ('b \\<Rightarrow> 'a)\" where\n  \"invfun A B (f :: 'a \\<Rightarrow> 'b) = (\\<lambda>y\\<in>B.(SOME x. (x \\<in> A \\<and> f x = y)))\""], ["", "abbreviation\n  INVFUN :: \"['a \\<Rightarrow> 'b, 'b set, 'a set] \\<Rightarrow> ('b \\<Rightarrow> 'a)\"  (\"(3_\\<inverse>\\<^bsub>_,_\\<^esub>)\" [82,82,83]82) where\n  \"f\\<inverse>\\<^bsub>B,A\\<^esub> == invfun A B f\""], ["", "lemma eq_fun:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; f = g \\<rbrakk> \\<Longrightarrow> g \\<in> A \\<rightarrow> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; f = g\\<rbrakk>\n    \\<Longrightarrow> g \\<in> A \\<rightarrow> B", "by simp"], ["", "lemma eq_fun_eq_val:\" f = g \\<Longrightarrow> f x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g \\<Longrightarrow> f x = g x", "by simp"], ["", "lemma eq_elems_eq_val:\"x = y \\<Longrightarrow> f x = f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> f x = f y", "by simp"], ["", "lemma cmp_fun:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C \\<rbrakk> \\<Longrightarrow> cmp g f \\<in> A \\<rightarrow> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C\\<rbrakk>\n    \\<Longrightarrow> cmp g f \\<in> A \\<rightarrow> C", "by (auto simp add:cmp_def)"], ["", "lemma cmp_fun_image:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C \\<rbrakk> \\<Longrightarrow> \n                          (cmp g f) ` A =  g ` (f ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C\\<rbrakk>\n    \\<Longrightarrow> cmp g f ` A = g ` f ` A", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C\\<rbrakk>\n    \\<Longrightarrow> cmp g f ` A \\<subseteq> g ` f ` A\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C\\<rbrakk>\n    \\<Longrightarrow> g ` f ` A \\<subseteq> cmp g f ` A", "apply (rule subsetI, simp add:image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        \\<exists>xa\\<in>A. x = cmp g f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>x\\<in>A. xa = f x) \\<and> x = g xa\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C\\<rbrakk>\n    \\<Longrightarrow> g ` f ` A \\<subseteq> cmp g f ` A", "apply (erule bexE, simp add:cmp_def, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C\\<rbrakk>\n    \\<Longrightarrow> g ` f ` A \\<subseteq> cmp g f ` A", "apply (rule subsetI, simp add:image_def[of g])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        \\<exists>xa\\<in>A. x = g (f xa)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> cmp g f ` A", "apply (erule bexE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        xa \\<in> A; x = g (f xa)\\<rbrakk>\n       \\<Longrightarrow> g (f xa) \\<in> cmp g f ` A", "apply (simp add:image_def cmp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        xa \\<in> A; x = g (f xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A. g (f xa) = g (f x)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_fun_sub_image:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C; A1 \\<subseteq> A\\<rbrakk> \\<Longrightarrow> \n                          (cmp g f) ` A1 =  g ` (f ` A1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> cmp g f ` A1 = g ` f ` A1", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> cmp g f ` A1 \\<subseteq> g ` f ` A1\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> g ` f ` A1 \\<subseteq> cmp g f ` A1", "apply (rule subsetI, simp add:image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        A1 \\<subseteq> A; \\<exists>xa\\<in>A1. x = cmp g f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>x\\<in>A1. xa = f x) \\<and> x = g xa\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> g ` f ` A1 \\<subseteq> cmp g f ` A1", "apply (erule bexE, simp add:cmp_def, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> g ` f ` A1 \\<subseteq> cmp g f ` A1", "apply (rule subsetI, simp add:image_def[of g])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        A1 \\<subseteq> A; \\<exists>xa\\<in>A1. x = g (f xa)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> cmp g f ` A1", "apply (erule bexE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        A1 \\<subseteq> A; xa \\<in> A1; x = g (f xa)\\<rbrakk>\n       \\<Longrightarrow> g (f xa) \\<in> cmp g f ` A1", "apply (simp add:image_def cmp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        A1 \\<subseteq> A; xa \\<in> A1; x = g (f xa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A1. g (f xa) = g (f x)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma restrict_fun_eq:\"\\<forall>x\\<in>A. f x = g x \\<Longrightarrow> (\\<lambda>x\\<in>A. f x) = (\\<lambda>x\\<in>A. g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. f x = g x \\<Longrightarrow>\n    restrict f A = restrict g A", "apply (simp add:fun_eq_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma funcset_mem: \"\\<lbrakk>f \\<in> A \\<rightarrow> B; x \\<in> A\\<rbrakk> \\<Longrightarrow> f x \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> B", "apply (simp add: Pi_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma img_subset:\"f \\<in> A \\<rightarrow> B \\<Longrightarrow> f ` A \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow> B \\<Longrightarrow> f ` A \\<subseteq> B", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; x \\<in> f ` A\\<rbrakk>\n       \\<Longrightarrow> x \\<in> B", "apply (simp add:image_def, erule bexE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; xa \\<in> A; x = f xa\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> B", "apply (simp add:funcset_mem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma funcset_mem1:\"\\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; x \\<in> A\\<rbrakk> \\<Longrightarrow> f x \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> B", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma func_to_img:\"f \\<in> A \\<rightarrow> B \\<Longrightarrow> f \\<in> A \\<rightarrow> f ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow> B \\<Longrightarrow>\n    f \\<in> A \\<rightarrow> f ` A", "by (simp add:Pi_def)"], ["", "lemma restrict_in_funcset: \"\\<forall>x\\<in> A. f x \\<in> B \\<Longrightarrow> \n                                     (\\<lambda>x\\<in>A. f x)\\<in> A \\<rightarrow> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. f x \\<in> B \\<Longrightarrow>\n    restrict f A \\<in> A \\<rightarrow> B", "apply (simp add:Pi_def restrict_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma funcset_eq:\"\\<lbrakk> f \\<in> extensional A; g \\<in> extensional A; \\<forall>x\\<in>A. f x = g x \\<rbrakk> \\<Longrightarrow>  f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> extensional A; g \\<in> extensional A;\n     \\<forall>x\\<in>A. f x = g x\\<rbrakk>\n    \\<Longrightarrow> f = g", "apply (simp add:extensionalityI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_funcs:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> A \\<rightarrow> B; f = g; x \\<in> A\\<rbrakk> \\<Longrightarrow> f x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> A \\<rightarrow> B; f = g;\n     x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f x = g x", "by simp"], ["", "lemma restriction_of_domain:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> \n  restrict f A1 \\<in> A1 \\<rightarrow> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict f A1 \\<in> A1 \\<rightarrow> B", "by blast"], ["", "lemma restrict_restrict:\"\\<lbrakk> restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow>\n      restrict (restrict f A) A1 = restrict f A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict (restrict f A) A1 = restrict f A1", "apply (rule funcset_eq[of _ \"A1\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict (restrict f A) A1 \\<in> extensional A1\n 2. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict f A1 \\<in> extensional A1\n 3. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A1.\n                         restrict (restrict f A) A1 x = restrict f A1 x", "apply (simp add:restrict_def extensional_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict f A1 \\<in> extensional A1\n 2. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A1.\n                         restrict (restrict f A) A1 x = restrict f A1 x", "apply (simp add:restrict_def extensional_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A1.\n                         restrict (restrict f A) A1 x = restrict f A1 x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n        x \\<in> A1\\<rbrakk>\n       \\<Longrightarrow> restrict (restrict f A) A1 x = restrict f A1 x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n        x \\<in> A1\\<rbrakk>\n       \\<Longrightarrow> x \\<notin> A \\<longrightarrow> undefined = f x", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma restr_restr_eq:\"\\<lbrakk> restrict f A \\<in> A \\<rightarrow> B; restrict f A = restrict g A;\nA1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> restrict f A1 = restrict g A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B;\n     restrict f A = restrict g A; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict f A1 = restrict g A1", "apply (subst restrict_restrict[THEN sym, of \"f\" \"A\" \"B\" \"A1\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B;\n     restrict f A = restrict g A; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict (restrict f A) A1 = restrict g A1", "apply (simp add:restrict_restrict[THEN sym, of \"g\" \"A\" \"B\" \"A1\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma funcTr:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; g \\<in> A \\<rightarrow> B; f = g; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a = g a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> A \\<rightarrow> B; f = g;\n     a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f a = g a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma funcTr1:\"\\<lbrakk>f = g; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a = g a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f = g; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a = g a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma restrictfun_im:\"\\<lbrakk> (restrict f A) \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow>\n       (restrict f A) ` A1 = f ` A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict f A ` A1 = f ` A1", "apply (subgoal_tac \"\\<forall>x\\<in>A1. x \\<in> A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n     \\<forall>x\\<in>A1. x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> restrict f A ` A1 = f ` A1\n 2. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A1. x \\<in> A", "apply (simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A1. x \\<in> A", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>restrict f A \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n        x \\<in> A1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mem_in_image:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a \\<in> f ` A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> f ` A", "apply (simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>A. f a = f x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mem_in_image1:\"\\<lbrakk> \\<forall>l\\<in>A. f l \\<in> B; a \\<in> A\\<rbrakk> \\<Longrightarrow> f a \\<in> f ` A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> f ` A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mem_in_image2:\"a \\<in> A \\<Longrightarrow> f a \\<in> f ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> A \\<Longrightarrow> f a \\<in> f ` A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mem_in_image3:\"b \\<in> f ` A \\<Longrightarrow> \\<exists>a \\<in> A. b = f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> f ` A \\<Longrightarrow> \\<exists>a\\<in>A. b = f a", "by (simp add:image_def)"], ["", "lemma elem_in_image2: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A; x \\<in> A1\\<rbrakk> \\<Longrightarrow> f x \\<in> f` A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n     x \\<in> A1\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> f ` A1", "apply (simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n     x \\<in> A1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>xa\\<in>A1. f x = f xa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma funcs_nonempty:\"\\<lbrakk> A \\<noteq> {}; B \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (A \\<rightarrow> B) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<rightarrow> B \\<noteq> {}", "apply (subgoal_tac \"constmap A B \\<in> A \\<rightarrow> B\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A \\<noteq> {}; B \\<noteq> {};\n     constmap A B \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> A \\<rightarrow> B \\<noteq> {}\n 2. \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> constmap A B \\<in> A \\<rightarrow> B", "apply (simp add:nonempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> constmap A B \\<in> A \\<rightarrow> B", "apply (simp add:Pi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> A \\<longrightarrow> constmap A B x \\<in> B", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A \\<longrightarrow> constmap A B x \\<in> B", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> constmap A B x \\<in> B", "apply (simp add:constmap_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (SOME y. y \\<in> B) \\<in> B", "apply (frule nonempty_ex[of \"B\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}; x \\<in> A;\n        \\<exists>x. x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> (SOME y. y \\<in> B) \\<in> B", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}; x \\<in> A;\n        \\<exists>x. x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a. a \\<in> B\n 2. \\<And>x xa.\n       \\<lbrakk>A \\<noteq> {}; B \\<noteq> {}; x \\<in> A;\n        \\<exists>x. x \\<in> B; xa \\<in> B\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> B", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma idmap_funcs: \"idmap A \\<in> A \\<rightarrow> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idmap A \\<in> A \\<rightarrow> A", "apply (simp add:Pi_def restrict_def idmap_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l_idmap_comp: \"\\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk> \\<Longrightarrow> \n                   compose A (idmap B) f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> compose A (idmap B) f = f", "apply (rule funcset_eq[of _ \"A\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> compose A (idmap B) f \\<in> extensional A\n 2. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> f \\<in> extensional A\n 3. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. compose A (idmap B) f x = f x", "apply (simp add:compose_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> f \\<in> extensional A\n 2. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. compose A (idmap B) f x = f x", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. compose A (idmap B) f x = f x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> compose A (idmap B) f x = f x", "apply (simp add:funcset_mem[of \"f\" \"A\" \"B\"] compose_def idmap_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma r_idmap_comp:\"\\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk> \\<Longrightarrow> \n                                   compose A f (idmap A) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> compose A f (idmap A) = f", "apply (rule funcset_eq[of _ \"A\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> compose A f (idmap A) \\<in> extensional A\n 2. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> f \\<in> extensional A\n 3. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. compose A f (idmap A) x = f x", "apply (simp add:compose_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> f \\<in> extensional A\n 2. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. compose A f (idmap A) x = f x", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. compose A f (idmap A) x = f x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> extensional A; f \\<in> A \\<rightarrow> B;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> compose A f (idmap A) x = f x", "apply (simp add:funcset_mem[of \"f\" \"A\" \"B\"] compose_def idmap_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma extend_fun: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; B \\<subseteq> B1 \\<rbrakk> \\<Longrightarrow> f \\<in> A \\<rightarrow> B1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; B \\<subseteq> B1\\<rbrakk>\n    \\<Longrightarrow> f \\<in> A \\<rightarrow> B1", "apply (simp add:Pi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n     B \\<subseteq> B1\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B1", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        B \\<subseteq> B1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A \\<longrightarrow> f x \\<in> B1", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        B \\<subseteq> B1; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> f x \\<in> B1", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma restrict_fun: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> restrict f A1 \\<in> A1 \\<rightarrow> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> restrict f A1 \\<in> A1 \\<rightarrow> B", "apply (simp add:Pi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. x \\<in> A1 \\<longrightarrow> f x \\<in> B", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        A1 \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A1 \\<longrightarrow> f x \\<in> B", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        A1 \\<subseteq> A; x \\<in> A1\\<rbrakk>\n       \\<Longrightarrow> f x \\<in> B", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_of_hom: \"\\<forall>x \\<in> A. f x \\<in> B \\<Longrightarrow> restrict f A \\<in> A \\<rightarrow> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. f x \\<in> B \\<Longrightarrow>\n    restrict f A \\<in> A \\<rightarrow> B", "apply (simp add:Pi_def restrict_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma composition : \"\\<lbrakk> f \\<in> A \\<rightarrow>  B; g \\<in> B \\<rightarrow> C\\<rbrakk> \\<Longrightarrow> (compose A g f) \\<in> A \\<rightarrow>  C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C\\<rbrakk>\n    \\<Longrightarrow> compose A g f \\<in> A \\<rightarrow> C", "apply (simp add:Pi_def restrict_def compose_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma comp_assoc:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C; h \\<in> C \\<rightarrow> D \\<rbrakk> \\<Longrightarrow>\n     compose A h (compose A g f) = compose A (compose B h g) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     h \\<in> C \\<rightarrow> D\\<rbrakk>\n    \\<Longrightarrow> compose A h (compose A g f) =\n                      compose A (compose B h g) f", "apply (rule funcset_eq[of _ \"A\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     h \\<in> C \\<rightarrow> D\\<rbrakk>\n    \\<Longrightarrow> compose A h (compose A g f) \\<in> extensional A\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     h \\<in> C \\<rightarrow> D\\<rbrakk>\n    \\<Longrightarrow> compose A (compose B h g) f \\<in> extensional A\n 3. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     h \\<in> C \\<rightarrow> D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         compose A h (compose A g f) x =\n                         compose A (compose B h g) f x", "apply (simp add:compose_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     h \\<in> C \\<rightarrow> D\\<rbrakk>\n    \\<Longrightarrow> compose A (compose B h g) f \\<in> extensional A\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     h \\<in> C \\<rightarrow> D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         compose A h (compose A g f) x =\n                         compose A (compose B h g) f x", "apply (simp add:compose_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     h \\<in> C \\<rightarrow> D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         compose A h (compose A g f) x =\n                         compose A (compose B h g) f x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        h \\<in> C \\<rightarrow> D; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> compose A h (compose A g f) x =\n                         compose A (compose B h g) f x", "apply (simp add:funcset_mem[of \"f\" \"A\" \"B\"] compose_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma restrictfun_inj: \"\\<lbrakk> inj_on f A; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> inj_on (restrict f A1) A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> inj_on (restrict f A1) A1", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>A.\n                \\<forall>y\\<in>A. f x = f y \\<longrightarrow> x = y;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A1.\n                         \\<forall>y\\<in>A1.\n                            f x = f y \\<longrightarrow> x = y", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma restrict_inj:\"\\<lbrakk>inj_on f A; A1 \\<subseteq> A\\<rbrakk> \\<Longrightarrow> inj_on f A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> inj_on f A1", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>A.\n                \\<forall>y\\<in>A. f x = f y \\<longrightarrow> x = y;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A1.\n                         \\<forall>y\\<in>A1.\n                            f x = f y \\<longrightarrow> x = y", "apply ((rule ballI)+, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>x\\<in>A.\n                   \\<forall>y\\<in>A. f x = f y \\<longrightarrow> x = y;\n        A1 \\<subseteq> A; x \\<in> A1; y \\<in> A1; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac c = x in subsetD[of \"A1\" \"A\"], assumption+,\n        frule_tac c = y in subsetD[of \"A1\" \"A\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>x\\<in>A.\n                   \\<forall>y\\<in>A. f x = f y \\<longrightarrow> x = y;\n        A1 \\<subseteq> A; x \\<in> A1; y \\<in> A1; f x = f y; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma injective:\"\\<lbrakk> inj_on f A; x \\<in> A; y \\<in> A; x \\<noteq> y \\<rbrakk> \\<Longrightarrow> f x \\<noteq> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> f x \\<noteq> f y", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; x \\<noteq> y;\n     f x = f y\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma injective_iff:\"\\<lbrakk> inj_on f A; x \\<in> A; y \\<in> A\\<rbrakk> \\<Longrightarrow> \n                        (x = y) = (f x = f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (x = y) = (f x = f y)", "apply (rule iffI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x = f y\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x = f y;\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule injective[of \"f\" \"A\" \"x\" \"y\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x = f y; x \\<noteq> y;\n     f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma injfun_elim_image:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk> \\<Longrightarrow>\n                f ` (A - {x}) = (f ` A) - {f x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f ` (A - {x}) = f ` A - {f x}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f ` (A - {x}) \\<subseteq> f ` A - {f x}\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f ` A - {f x} \\<subseteq> f ` (A - {x})", "apply (rule subsetI, simp add:image_def, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xaa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A;\n        xaa \\<in> A - {x}; xa = f xaa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>A. xa = f x) \\<and> xa \\<noteq> f x\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f ` A - {f x} \\<subseteq> f ` (A - {x})", "apply (simp, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xaa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A;\n        xa = f xaa; xaa \\<in> A; xaa \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>A. f xaa = f x) \\<and>\n                         f xaa \\<noteq> f x\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f ` A - {f x} \\<subseteq> f ` (A - {x})", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xaa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A;\n        xa = f xaa; xaa \\<in> A; xaa \\<noteq> x;\n        (\\<forall>x\\<in>A. f xaa \\<noteq> f x) \\<or> f xaa = f x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f ` A - {f x} \\<subseteq> f ` (A - {x})", "apply (erule disjE, simp add:inj_on_def, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xaa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A;\n        xa = f xaa; xaa \\<in> A; xaa \\<noteq> x; f xaa = f x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f ` A - {f x} \\<subseteq> f ` (A - {x})", "apply (frule_tac x = xaa and y = x in injective[of f A ], assumption+,\n        blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f ` A - {f x} \\<subseteq> f ` (A - {x})", "apply (rule subsetI, simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A;\n        (\\<exists>x\\<in>A. xa = f x) \\<and> xa \\<noteq> f x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A - {x}. xa = f x", "apply (rule contrapos_pp, simp+, erule conjE, erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xaa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A;\n        \\<forall>x\\<in>A - {x}. xa \\<noteq> f x; xa \\<noteq> f x;\n        xaa \\<in> A; xa = f xaa\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = xaa in bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa xaa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A;\n        \\<forall>x\\<in>A - {x}. xa \\<noteq> f x; xa \\<noteq> f x;\n        xaa \\<in> A; xa = f xaa\\<rbrakk>\n       \\<Longrightarrow> xaa \\<in> A - {x}\n 2. \\<And>xa xaa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; x \\<in> A;\n        \\<forall>x\\<in>A - {x}. xa \\<noteq> f x; xa \\<noteq> f x;\n        xaa \\<in> A; xa = f xaa; xa \\<noteq> f xaa\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp, rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_inj:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C; inj_on f A; inj_on g B \\<rbrakk> \\<Longrightarrow>\n         inj_on (cmp g f) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     inj_on f A; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> inj_on (cmp g f) A", "apply (simp add:inj_on_def [of \"cmp g f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     inj_on f A; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         \\<forall>y\\<in>A.\n                            cmp g f x = cmp g f y \\<longrightarrow> x = y", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        inj_on f A; inj_on g B; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp g f x = cmp g f y \\<longrightarrow> x = y", "apply (simp add:cmp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        inj_on f A; inj_on g B; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> g (f x) = g (f y) \\<longrightarrow> x = y", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        inj_on f A; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (subgoal_tac \"f x = f y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        inj_on f A; inj_on g B; x \\<in> A; y \\<in> A; g (f x) = g (f y);\n        f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        inj_on f A; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y)\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "apply (simp add:inj_on_def [of \"f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        inj_on f A; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y)\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "apply (frule_tac x = x in funcset_mem [of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        inj_on f A; inj_on g B; x \\<in> A; y \\<in> A; g (f x) = g (f y);\n        f x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "apply (frule_tac x = y in funcset_mem [of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n        inj_on f A; inj_on g B; x \\<in> A; y \\<in> A; g (f x) = g (f y);\n        f x \\<in> B; f y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "apply (simp add:inj_on_def [of \"g\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_assoc:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C; h \\<in> C \\<rightarrow> D; x \\<in> A\\<rbrakk> \\<Longrightarrow>\n                          (cmp h (cmp g f)) x  = (cmp (cmp h g) f) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     h \\<in> C \\<rightarrow> D; x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> cmp h (cmp g f) x = cmp (cmp h g) f x", "apply (simp add:cmp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bivar_fun: \"\\<lbrakk> f \\<in> A \\<rightarrow> (B \\<rightarrow> C); a \\<in> A \\<rbrakk> \\<Longrightarrow> f a \\<in> B \\<rightarrow> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B \\<rightarrow> C; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> B \\<rightarrow> C", "by (simp add:Pi_def)"], ["", "lemma bivar_fun_mem: \"\\<lbrakk> f \\<in> A \\<rightarrow> (B \\<rightarrow> C); a \\<in> A; b \\<in> B \\<rbrakk> \\<Longrightarrow> f a b \\<in> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B \\<rightarrow> C; a \\<in> A;\n     b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> f a b \\<in> C", "apply (frule funcset_mem[of \"f\" \"A\" \"B \\<rightarrow> C\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B \\<rightarrow> C; a \\<in> A;\n     b \\<in> B; f a \\<in> B \\<rightarrow> C\\<rbrakk>\n    \\<Longrightarrow> f a b \\<in> C", "apply (rule funcset_mem[of \"f a\" \"B\" \"C\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bivar_func_eq:\"\\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<rbrakk> \\<Longrightarrow>\n                         (\\<lambda>x\\<in>A. \\<lambda>y\\<in>B. f x y) =  (\\<lambda>x\\<in>A. \\<lambda>y\\<in>B. g x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<Longrightarrow>\n    (\\<lambda>x\\<in>A. restrict (f x) B) =\n    (\\<lambda>x\\<in>A. restrict (g x) B)", "apply (subgoal_tac \"\\<forall>x\\<in>A. (\\<lambda>y\\<in>B. f x y) = (\\<lambda>y\\<in>B. g x y)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n     \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>A. restrict (f x) B) =\n                      (\\<lambda>x\\<in>A. restrict (g x) B)\n 2. \\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<Longrightarrow>\n    \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B", "apply (rule funcset_eq [of _ \"A\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n     \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>A. restrict (f x) B)\n                      \\<in> extensional A\n 2. \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n     \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>A. restrict (g x) B)\n                      \\<in> extensional A\n 3. \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n     \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         (\\<lambda>x\\<in>A. restrict (f x) B) x =\n                         (\\<lambda>x\\<in>A. restrict (g x) B) x\n 4. \\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<Longrightarrow>\n    \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B", "apply (simp add:extensional_def restrict_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n     \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>A. restrict (g x) B)\n                      \\<in> extensional A\n 2. \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n     \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         (\\<lambda>x\\<in>A. restrict (f x) B) x =\n                         (\\<lambda>x\\<in>A. restrict (g x) B) x\n 3. \\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<Longrightarrow>\n    \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B", "apply (simp add:extensional_def restrict_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n     \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         (\\<lambda>x\\<in>A. restrict (f x) B) x =\n                         (\\<lambda>x\\<in>A. restrict (g x) B) x\n 2. \\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<Longrightarrow>\n    \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x\\<in>A. restrict (f x) B) x =\n                         (\\<lambda>x\\<in>A. restrict (g x) B) x\n 2. \\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<Longrightarrow>\n    \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b \\<Longrightarrow>\n    \\<forall>x\\<in>A. restrict (f x) B = restrict (g x) B", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> restrict (f x) B = restrict (g x) B", "apply (rule funcset_eq [of _ \"B\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> restrict (f x) B \\<in> extensional B\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> restrict (g x) B \\<in> extensional B\n 3. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa\\<in>B.\n                            restrict (f x) B xa = restrict (g x) B xa", "apply (simp add:restrict_def extensional_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> restrict (g x) B \\<in> extensional B\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa\\<in>B.\n                            restrict (f x) B xa = restrict (g x) B xa", "apply (simp add:restrict_def extensional_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xa\\<in>B.\n                            restrict (f x) B xa = restrict (g x) B xa", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>a\\<in>A. \\<forall>b\\<in>B. f a b = g a b;\n        x \\<in> A; xa \\<in> B\\<rbrakk>\n       \\<Longrightarrow> restrict (f x) B xa = restrict (g x) B xa", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_image: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A; A2 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> \n            f`(A1 \\<inter> A2) \\<subseteq> (f` A1) \\<inter> (f` A2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n     A2 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> f ` (A1 \\<inter> A2)\n                      \\<subseteq> f ` A1 \\<inter> f ` A2", "apply (simp add: image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n     A2 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> {y. \\<exists>x\\<in>A1 \\<inter> A2. y = f x}\n                      \\<subseteq> {y. \\<exists>x\\<in>A1. y = f x} \\<and>\n                      {y. \\<exists>x\\<in>A1 \\<inter> A2. y = f x}\n                      \\<subseteq> {y. \\<exists>x\\<in>A2. y = f x}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma image_sub: \"\\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> (f`A1) \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> f ` A1 \\<subseteq> B", "by (auto simp add:image_def)"], ["", "lemma image_sub0: \"f \\<in> A \\<rightarrow> B \\<Longrightarrow> (f`A) \\<subseteq> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow> B \\<Longrightarrow> f ` A \\<subseteq> B", "by (simp add:image_sub[of \"f\" \"A\" \"B\" \"A\"])"], ["", "lemma image_nonempty:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A; A1 \\<noteq> {} \\<rbrakk> \\<Longrightarrow> f ` A1 \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n     A1 \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f ` A1 \\<noteq> {}", "by (frule nonempty_some[of \"A1\"], \n       frule elem_in_image2[of \"f\" \"A\" \"B\" \"A1\" \"SOME x. x \\<in> A1\"], \n        assumption+, simp add:nonempty)"], ["", "lemma im_set_mono: \"\\<lbrakk>f \\<in>A \\<rightarrow> B; A1 \\<subseteq> A2; A2 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> (f ` A1) \\<subseteq> (f ` A2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A2;\n     A2 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> f ` A1 \\<subseteq> f ` A2", "apply (simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A2;\n     A2 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> {y. \\<exists>x\\<in>A1. y = f x}\n                      \\<subseteq> {y. \\<exists>x\\<in>A2. y = f x}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma im_set_un:\"\\<lbrakk> f\\<in>A \\<rightarrow> B; A1 \\<subseteq> A; A2 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> \n             f`(A1 \\<union> A2) = (f`A1) \\<union> (f`A2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n     A2 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> f ` (A1 \\<union> A2) = f ` A1 \\<union> f ` A2", "apply (simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; A1 \\<subseteq> A;\n     A2 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> {y. \\<exists>x\\<in>A1 \\<union> A2. y = f x} =\n                      {y. \\<exists>x\\<in>A1. y = f x} \\<union>\n                      {y. \\<exists>x\\<in>A2. y = f x}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma im_set_un1:\"\\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; A = A1 \\<union> A2\\<rbrakk> \\<Longrightarrow> \n                                f `(A1 \\<union> A2) = f `(A1) \\<union> f `(A2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; A = A1 \\<union> A2\\<rbrakk>\n    \\<Longrightarrow> f ` (A1 \\<union> A2) = f ` A1 \\<union> f ` A2", "apply (rule equalityI,\n       rule subsetI, simp add:image_def, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>l\\<in>A1 \\<union> A2. f l \\<in> B;\n        A = A1 \\<union> A2; xa \\<in> A1 \\<union> A2; x = f xa\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>xa\\<in>A1. x = f xa) \\<or>\n                         (\\<exists>xa\\<in>A2. x = f xa)\n 2. \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; A = A1 \\<union> A2\\<rbrakk>\n    \\<Longrightarrow> f ` A1 \\<union> f ` A2\n                      \\<subseteq> f ` (A1 \\<union> A2)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; A = A1 \\<union> A2\\<rbrakk>\n    \\<Longrightarrow> f ` A1 \\<union> f ` A2\n                      \\<subseteq> f ` (A1 \\<union> A2)", "apply (rule subsetI,\n       simp add:image_def, erule disjE, erule bexE, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>l\\<in>A1 \\<union> A2. f l \\<in> B;\n        A = A1 \\<union> A2; \\<exists>xa\\<in>A2. x = f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>A1 \\<union> A2. x = f xa", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>l\\<in>A1 \\<union> A2. f l \\<in> B;\n        A = A1 \\<union> A2; xa \\<in> A2; x = f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>A1 \\<union> A2. x = f xa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma im_set_un2:\"A = A1 \\<union> A2 \\<Longrightarrow>  f `A = f `(A1) \\<union> f `(A2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = A1 \\<union> A2 \\<Longrightarrow> f ` A = f ` A1 \\<union> f ` A2", "apply (rule equalityI,\n       rule subsetI, simp add:image_def, erule bexE, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. A = A1 \\<union> A2 \\<Longrightarrow>\n    f ` A1 \\<union> f ` A2 \\<subseteq> f ` A", "apply (rule subsetI,\n       simp add:image_def, erule disjE, erule bexE, blast, erule bexE, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  invim::\"['a \\<Rightarrow> 'b, 'a set, 'b set] \\<Rightarrow> 'a set\" where\n  \"invim f A B = {x. x\\<in>A \\<and> f x \\<in> B}\""], ["", "lemma invim: \"\\<lbrakk> f:A \\<rightarrow> B; B1 \\<subseteq> B \\<rbrakk> \\<Longrightarrow> invim f A B1 \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; B1 \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> invim f A B1 \\<subseteq> A", "by (auto simp add:invim_def)"], ["", "lemma setim_cmpfn: \"\\<lbrakk> f:A \\<rightarrow> B; g:B \\<rightarrow> C; A1 \\<subseteq> A \\<rbrakk> \\<Longrightarrow> \n               (compose A g f)` A1 = g`(f` A1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> compose A g f ` A1 = g ` f ` A1", "apply (simp add:image_def compose_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     A1 \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> {y. \\<exists>x\\<in>A1 \\<inter> A.\n                             y = g (f x)} \\<union>\n                      {y. y = undefined \\<and>\n                          (\\<exists>x. x \\<in> A1 \\<and> x \\<notin> A)} =\n                      {y. \\<exists>x.\n                             (\\<exists>xa\\<in>A1. x = f xa) \\<and> y = g x}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  surj_to :: \"['a \\<Rightarrow> 'b, 'a set, 'b set] \\<Rightarrow> bool\" where\n  \"surj_to f A B \\<longleftrightarrow> f`A = B\""], ["", "lemma surj_to_test:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; \\<forall>b\\<in>B. \\<exists>a\\<in>A. f a = b \\<rbrakk> \\<Longrightarrow>\n                                                  surj_to f A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B;\n     \\<forall>b\\<in>B. \\<exists>a\\<in>A. f a = b\\<rbrakk>\n    \\<Longrightarrow> surj_to f A B", "by (auto simp add:surj_to_def image_def)"], ["", "lemma surj_to_image:\"f \\<in> A \\<rightarrow> B \\<Longrightarrow> surj_to f A (f ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow> B \\<Longrightarrow> surj_to f A (f ` A)", "apply (rule surj_to_test[of \"f\" \"A\" \"f ` A\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. f \\<in> A \\<rightarrow> B \\<Longrightarrow>\n    f \\<in> A \\<rightarrow> f ` A\n 2. f \\<in> A \\<rightarrow> B \\<Longrightarrow>\n    \\<forall>b\\<in>f ` A. \\<exists>a\\<in>A. f a = b", "apply (rule func_to_img[of \"f\" \"A\" \"B\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow> B \\<Longrightarrow>\n    \\<forall>b\\<in>f ` A. \\<exists>a\\<in>A. f a = b", "apply (rule ballI, simp add:image_def, erule bexE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; x \\<in> A; b = f x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>A. f a = f x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma surj_to_el:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; surj_to f A B \\<rbrakk> \\<Longrightarrow> \\<forall>b\\<in>B. \\<exists>a\\<in>A. f a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>B. \\<exists>a\\<in>A. f a = b", "apply (simp add:surj_to_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B;\n     {y. \\<exists>x\\<in>A. y = f x} = B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>B. \\<exists>a\\<in>A. f a = b", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma surj_to_el1:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; surj_to f A B; b\\<in>B\\<rbrakk> \\<Longrightarrow> \\<exists>a\\<in>A. f a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; surj_to f A B; b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a\\<in>A. f a = b", "apply (simp add:surj_to_el)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma surj_to_el2:\"\\<lbrakk>surj_to f A B; b \\<in> B\\<rbrakk> \\<Longrightarrow> \\<exists>a\\<in>A. f a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>surj_to f A B; b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a\\<in>A. f a = b", "apply (simp add:surj_to_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{y. \\<exists>x\\<in>A. y = f x} = B; b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a\\<in>A. f a = b", "apply (frule sym, thin_tac \"{y. \\<exists>x\\<in>A. y = f x} = B\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>x\\<in>A. b = f x;\n     B = {y. \\<exists>x\\<in>A. y = f x}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a\\<in>A. f a = b", "apply (erule bexE, simp, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma compose_surj: \"\\<lbrakk>f:A \\<rightarrow> B; surj_to f A B; g : B \\<rightarrow> C; surj_to g B C \\<rbrakk> \n                         \\<Longrightarrow> surj_to (compose A g f) A C \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; surj_to f A B;\n     g \\<in> B \\<rightarrow> C; surj_to g B C\\<rbrakk>\n    \\<Longrightarrow> surj_to (compose A g f) A C", "apply (simp add:surj_to_def compose_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; {y. \\<exists>x\\<in>A. y = f x} = B;\n     g \\<in> B \\<rightarrow> C; {y. \\<exists>x\\<in>B. y = g x} = C\\<rbrakk>\n    \\<Longrightarrow> {y. \\<exists>x\\<in>A. y = g (f x)} = C", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_surj: \"\\<lbrakk>f:A \\<rightarrow> B; surj_to f A B; g : B \\<rightarrow> C; surj_to g B C \\<rbrakk> \n                         \\<Longrightarrow> surj_to (cmp g f) A C \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; surj_to f A B;\n     g \\<in> B \\<rightarrow> C; surj_to g B C\\<rbrakk>\n    \\<Longrightarrow> surj_to (cmp g f) A C", "apply (rule surj_to_test, simp add:cmp_fun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; surj_to f A B;\n     g \\<in> B \\<rightarrow> C; surj_to g B C\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>C. \\<exists>a\\<in>A. cmp g f a = b", "apply (rule ballI, simp add:surj_to_def [of \"g\"], frule sym,\n       thin_tac \"g ` B = C\", simp, simp add:image_def,\n       simp add:cmp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; surj_to f A B;\n        \\<exists>x\\<in>B. b = g x;\n        C = {y. \\<exists>x\\<in>B. y = g x}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>A. g (f a) = b", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; surj_to f A B;\n        C = {y. \\<exists>x\\<in>B. y = g x}; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>A. g (f a) = g x", "apply (simp add:surj_to_def, frule sym,\n       thin_tac \" f ` A = B\", simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> {y. \\<exists>x\\<in>A. y = f x};\n        C = {y. \\<exists>x. (\\<exists>xa\\<in>A. x = f xa) \\<and> y = g x};\n        \\<exists>xa\\<in>A. x = f xa;\n        B = {y. \\<exists>x\\<in>A. y = f x}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>A. g (f a) = g x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_onTr0:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; x \\<in> A; y \\<in> A; inj_on f A; f x = f y\\<rbrakk> \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; x \\<in> A; y \\<in> A; inj_on f A;\n     f x = f y\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_onTr1:\"\\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x = f y\\<rbrakk>  \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x = f y\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_onTr2:\"\\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x \\<noteq> f y\\<rbrakk>  \\<Longrightarrow> x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; x \\<in> A; y \\<in> A; f x \\<noteq> f y\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> y", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* premis inj_on can be changed to some condition indicating f to be\n         a function *)"], ["", "lemma comp_inj: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; g \\<in> B \\<rightarrow> C; inj_on g B \\<rbrakk> \n              \\<Longrightarrow> inj_on (compose A g f) A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n     g \\<in> B \\<rightarrow> C; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> inj_on (compose A g f) A", "apply (simp add:inj_on_def [of \"compose A g f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n     g \\<in> B \\<rightarrow> C; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         \\<forall>y\\<in>A.\n                            compose A g f x =\n                            compose A g f y \\<longrightarrow>\n                            x = y", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> compose A g f x = compose A g f y \\<longrightarrow>\n                         x = y", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A;\n        compose A g f x = compose A g f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (rule inj_onTr0 [of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A;\n        compose A g f x = compose A g f y\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "apply (frule funcset_mem [of \"f\" \"A\" \"B\" _], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A;\n        compose A g f x = compose A g f y; f x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "apply (rotate_tac -3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>y \\<in> A; compose A g f x = compose A g f y; f x \\<in> B;\n        f \\<in> A \\<rightarrow> B; inj_on f A; g \\<in> B \\<rightarrow> C;\n        inj_on g B; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "apply (frule funcset_mem [of \"f\" \"A\" \"B\" _], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>y \\<in> A; compose A g f x = compose A g f y; f x \\<in> B;\n        f \\<in> A \\<rightarrow> B; inj_on f A; g \\<in> B \\<rightarrow> C;\n        inj_on g B; x \\<in> A; f y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> f x = f y", "apply (rule inj_onTr0 [of \"g\" \"B\" \"C\" _], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>y \\<in> A; compose A g f x = compose A g f y; f x \\<in> B;\n        f \\<in> A \\<rightarrow> B; inj_on f A; g \\<in> B \\<rightarrow> C;\n        inj_on g B; x \\<in> A; f y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> g (f x) = g (f y)", "apply (simp add:compose_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_inj_1: \"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; g \\<in> B \\<rightarrow> C; inj_on g B \\<rbrakk> \n              \\<Longrightarrow> inj_on (cmp g f) A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n     g \\<in> B \\<rightarrow> C; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> inj_on (cmp g f) A", "apply (simp add:inj_on_def [of \"cmp g f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n     g \\<in> B \\<rightarrow> C; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         \\<forall>y\\<in>A.\n                            cmp g f x = cmp g f y \\<longrightarrow> x = y", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp g f x = cmp g f y \\<longrightarrow> x = y", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A;\n        cmp g f x = cmp g f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add:cmp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = x in funcset_mem [of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y); f x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = y in funcset_mem [of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y); f x \\<in> B; f y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = \"f x\" and y = \"f y\" in inj_onTr1 [of \"g\" \"B\"],\n                       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        g \\<in> B \\<rightarrow> C; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y); f x \\<in> B; f y \\<in> B; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (rule_tac x = x and y = y in inj_onTr1 [of \"f\" \"A\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_inj_2: \"\\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A; \\<forall>k\\<in>B. g k \\<in> C; inj_on g B \\<rbrakk> \n              \\<Longrightarrow> inj_on (cmp g f) A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A;\n     \\<forall>k\\<in>B. g k \\<in> C; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> inj_on (cmp g f) A", "apply (simp add:inj_on_def [of \"cmp g f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A;\n     \\<forall>k\\<in>B. g k \\<in> C; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A.\n                         \\<forall>y\\<in>A.\n                            cmp g f x = cmp g f y \\<longrightarrow> x = y", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A;\n        \\<forall>k\\<in>B. g k \\<in> C; inj_on g B; x \\<in> A;\n        y \\<in> A\\<rbrakk>\n       \\<Longrightarrow> cmp g f x = cmp g f y \\<longrightarrow> x = y", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A;\n        \\<forall>k\\<in>B. g k \\<in> C; inj_on g B; x \\<in> A; y \\<in> A;\n        cmp g f x = cmp g f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add:cmp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A;\n        \\<forall>k\\<in>B. g k \\<in> C; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y)\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = x in funcset_mem1 [of \"A\" \"f\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A;\n        \\<forall>k\\<in>B. g k \\<in> C; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y); f x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = y in funcset_mem1 [of \"A\" \"f\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A;\n        \\<forall>k\\<in>B. g k \\<in> C; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y); f x \\<in> B; f y \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = \"f x\" and y = \"f y\" in inj_onTr1 [of \"g\" \"B\"],\n                       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>l\\<in>A. f l \\<in> B; inj_on f A;\n        \\<forall>k\\<in>B. g k \\<in> C; inj_on g B; x \\<in> A; y \\<in> A;\n        g (f x) = g (f y); f x \\<in> B; f y \\<in> B; f x = f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (rule_tac x = x and y = y in inj_onTr1 [of \"f\" \"A\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_mem:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B; b \\<in> B \\<rbrakk> \n                      \\<Longrightarrow>  (invfun A B f) b \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n     b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) b \\<in> A", "apply (simp add:invfun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n     b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> (SOME x. x \\<in> A \\<and> f x = b) \\<in> A", "apply (simp add:surj_to_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n     {y. \\<exists>x\\<in>A. y = f x} = B; b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> (SOME x. x \\<in> A \\<and> f x = b) \\<in> A", "apply (frule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n     {y. \\<exists>x\\<in>A. y = f x} = B; b \\<in> B;\n     B = {y. \\<exists>x\\<in>A. y = f x}\\<rbrakk>\n    \\<Longrightarrow> (SOME x. x \\<in> A \\<and> f x = b) \\<in> A", "apply (thin_tac \"{y. \\<exists>x\\<in>A. y = f x} = B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; b \\<in> B;\n     B = {y. \\<exists>x\\<in>A. y = f x}\\<rbrakk>\n    \\<Longrightarrow> (SOME x. x \\<in> A \\<and> f x = b) \\<in> A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> {y. \\<exists>x\\<in>A. y = f x};\n     inj_on f A; \\<exists>x\\<in>A. b = f x;\n     B = {y. \\<exists>x\\<in>A. y = f x}\\<rbrakk>\n    \\<Longrightarrow> (SOME x. x \\<in> A \\<and> f x = b) \\<in> A", "apply (thin_tac \"B = {y. \\<exists>x\\<in>A. y = f x}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> {y. \\<exists>x\\<in>A. y = f x};\n     inj_on f A; \\<exists>x\\<in>A. b = f x\\<rbrakk>\n    \\<Longrightarrow> (SOME x. x \\<in> A \\<and> f x = b) \\<in> A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> {y. \\<exists>x\\<in>A. y = f x};\n        inj_on f A; x \\<in> A; b = f x\\<rbrakk>\n       \\<Longrightarrow> (SOME xa. xa \\<in> A \\<and> f xa = f x) \\<in> A", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> {y. \\<exists>x\\<in>A. y = f x};\n        inj_on f A; x \\<in> A; b = f x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a. a \\<in> A \\<and> f a = f x\n 2. \\<And>x xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> {y. \\<exists>x\\<in>A. y = f x};\n        inj_on f A; x \\<in> A; b = f x;\n        xa \\<in> A \\<and> f xa = f x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> A", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> {y. \\<exists>x\\<in>A. y = f x};\n        inj_on f A; x \\<in> A; b = f x;\n        xa \\<in> A \\<and> f xa = f x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inv_func:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk> \n                      \\<Longrightarrow>  (invfun A B f) \\<in> B \\<rightarrow> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> f\\<inverse>\\<^bsub>B,A\\<^esub> \\<in> B \\<rightarrow> A", "apply (simp add:Pi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n     inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> B \\<longrightarrow>\n                         (f\\<inverse>\\<^bsub>B,A\\<^esub>) x \\<in> A", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> B \\<longrightarrow>\n                         (f\\<inverse>\\<^bsub>B,A\\<^esub>) x \\<in> A", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) x \\<in> A", "apply (rule invfun_mem)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> f \\<in> A \\<rightarrow> B\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> inj_on f A\n 3. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> surj_to f A B\n 4. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> B", "apply (rule funcsetI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B; xa \\<in> A\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> B\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> inj_on f A\n 3. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> surj_to f A B\n 4. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> B", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_r:\"\\<lbrakk> f\\<in>A \\<rightarrow> B; inj_on f A; surj_to f A B; b \\<in> B \\<rbrakk> \n                      \\<Longrightarrow> f ((invfun A B f) b) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n     b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) b) = b", "apply (simp add:invfun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n     b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> f (SOME x. x \\<in> A \\<and> f x = b) = b", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n     b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> A \\<and> f a = b\n 2. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        b \\<in> B; x \\<in> A \\<and> f x = b\\<rbrakk>\n       \\<Longrightarrow> f x = b", "apply (simp add:surj_to_def image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n     {y. \\<exists>x\\<in>A. y = f x} = B; b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> A \\<and> f a = b\n 2. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        b \\<in> B; x \\<in> A \\<and> f x = b\\<rbrakk>\n       \\<Longrightarrow> f x = b", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_l:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B; a \\<in> A\\<rbrakk> \n                      \\<Longrightarrow> (invfun A B f) (f a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n     a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) (f a) = a", "apply (simp add:invfun_def Pi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n     inj_on f A; surj_to f A B; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (SOME x. x \\<in> A \\<and> f x = f a) = a", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n     inj_on f A; surj_to f A B; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa. aa \\<in> A \\<and> f aa = f a\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; a \\<in> A;\n        x \\<in> A \\<and> f x = f a\\<rbrakk>\n       \\<Longrightarrow> x = a", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. x \\<in> A \\<longrightarrow> f x \\<in> B;\n        inj_on f A; surj_to f A B; a \\<in> A; x \\<in> A; f x = f a\\<rbrakk>\n       \\<Longrightarrow> x = a", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_inj:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk> \n                      \\<Longrightarrow>  inj_on (invfun A B f) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> inj_on (f\\<inverse>\\<^bsub>B,A\\<^esub>) B", "apply (simp add:inj_on_def [of \"invfun A B f\" \"B\"] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>B.\n                         \\<forall>y\\<in>B.\n                            (f\\<inverse>\\<^bsub>B,A\\<^esub>) x =\n                            (f\\<inverse>\\<^bsub>B,A\\<^esub>)\n                             y \\<longrightarrow>\n                            x = y", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> B; y \\<in> B;\n        (f\\<inverse>\\<^bsub>B,A\\<^esub>) x =\n        (f\\<inverse>\\<^bsub>B,A\\<^esub>) y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac b = y in invfun_r [of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> B; y \\<in> B;\n        (f\\<inverse>\\<^bsub>B,A\\<^esub>) x =\n        (f\\<inverse>\\<^bsub>B,A\\<^esub>) y;\n        f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) y) = y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac b = x in invfun_r [of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> B; y \\<in> B;\n        (f\\<inverse>\\<^bsub>B,A\\<^esub>) x =\n        (f\\<inverse>\\<^bsub>B,A\\<^esub>) y;\n        f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) y) = y;\n        f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) x) = x\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_surj:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk> \n                      \\<Longrightarrow>  surj_to (invfun A B f) B A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> surj_to (f\\<inverse>\\<^bsub>B,A\\<^esub>) B A", "apply (simp add:surj_to_def [of \"invfun A B f\" \"B\" \"A\"] image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> {y. \\<exists>x\\<in>B.\n                             y = (f\\<inverse>\\<^bsub>B,A\\<^esub>) x} =\n                      A", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> {y. \\<exists>x\\<in>B.\n                             y = (f\\<inverse>\\<^bsub>B,A\\<^esub>) x}\n                      \\<subseteq> A\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> A \\<subseteq> {y. \\<exists>x\\<in>B.\n     y = (f\\<inverse>\\<^bsub>B,A\\<^esub>) x}", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> {y. \\<exists>x\\<in>B.\n                       y = (f\\<inverse>\\<^bsub>B,A\\<^esub>) x}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> A \\<subseteq> {y. \\<exists>x\\<in>B.\n     y = (f\\<inverse>\\<^bsub>B,A\\<^esub>) x}", "apply (simp add:CollectI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        \\<exists>xa\\<in>B. x = (f\\<inverse>\\<^bsub>B,A\\<^esub>) xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> A \\<subseteq> {y. \\<exists>x\\<in>B.\n     y = (f\\<inverse>\\<^bsub>B,A\\<^esub>) x}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        xa \\<in> B\\<rbrakk>\n       \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) xa \\<in> A\n 2. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>B.\n                            x = (f\\<inverse>\\<^bsub>B,A\\<^esub>) xa", "apply (simp add:invfun_mem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>B.\n                            x = (f\\<inverse>\\<^bsub>B,A\\<^esub>) xa", "apply (frule funcset_mem [of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> A; f x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>B.\n                            x = (f\\<inverse>\\<^bsub>B,A\\<^esub>) xa", "apply (frule_tac t = x in invfun_l [of \"f\" \"A\" \"B\", THEN sym], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> A; f x \\<in> B;\n        x = (f\\<inverse>\\<^bsub>B,A\\<^esub>) (f x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>B.\n                            x = (f\\<inverse>\\<^bsub>B,A\\<^esub>) xa", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  bij_to :: \"['a \\<Rightarrow> 'b, 'a set, 'b set] \\<Rightarrow> bool\" where\n  \"bij_to f A B \\<longleftrightarrow> surj_to f A B \\<and> inj_on f A\""], ["", "lemma idmap_bij:\"bij_to (idmap A) A A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_to (idmap A) A A", "apply (simp add:bij_to_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. surj_to (idmap A) A A \\<and> inj_on (idmap A) A", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. surj_to (idmap A) A A\n 2. inj_on (idmap A) A", "apply (simp add:surj_to_def, simp add:image_def, simp add:idmap_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (idmap A) A", "apply (simp add:inj_on_def, simp add:idmap_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bij_invfun:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B\\<rbrakk> \\<Longrightarrow>\n                              bij_to (invfun A B f) B A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B\\<rbrakk>\n    \\<Longrightarrow> bij_to (f\\<inverse>\\<^bsub>B,A\\<^esub>) B A", "apply (simp add:bij_to_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B;\n     surj_to f A B \\<and> inj_on f A\\<rbrakk>\n    \\<Longrightarrow> surj_to (f\\<inverse>\\<^bsub>B,A\\<^esub>) B A \\<and>\n                      inj_on (f\\<inverse>\\<^bsub>B,A\\<^esub>) B", "apply (simp add:invfun_inj invfun_surj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma l_inv_invfun:\"\\<lbrakk> f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk> \n                      \\<Longrightarrow> compose A (invfun A B f) f = idmap A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B\\<rbrakk>\n    \\<Longrightarrow> compose A (f\\<inverse>\\<^bsub>B,A\\<^esub>) f = idmap A", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        surj_to f A B\\<rbrakk>\n       \\<Longrightarrow> compose A (f\\<inverse>\\<^bsub>B,A\\<^esub>) f x =\n                         idmap A x", "apply (simp add:compose_def idmap_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A;\n        surj_to f A B\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A \\<longrightarrow>\n                         (f\\<inverse>\\<^bsub>B,A\\<^esub>) (f x) = x", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; inj_on f A; surj_to f A B;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) (f x) = x", "apply (simp add:invfun_l)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_mem1:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; b \\<in> B\\<rbrakk> \\<Longrightarrow>\n                 (invfun A B f) b \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) b \\<in> A", "apply (simp add:bij_to_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; b \\<in> B; surj_to f A B;\n     inj_on f A\\<rbrakk>\n    \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) b \\<in> A", "apply (simp add:invfun_mem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_r1:\"\\<lbrakk> f\\<in>A \\<rightarrow> B; bij_to f A B; b \\<in> B \\<rbrakk> \n                      \\<Longrightarrow> f ((invfun A B f) b) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; b \\<in> B\\<rbrakk>\n    \\<Longrightarrow> f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) b) = b", "apply (simp add:bij_to_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; b \\<in> B; surj_to f A B;\n     inj_on f A\\<rbrakk>\n    \\<Longrightarrow> f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) b) = b", "apply (rule invfun_r, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_l1:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; a \\<in> A\\<rbrakk> \n                      \\<Longrightarrow> (invfun A B f) (f a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) (f a) = a", "apply (simp add:bij_to_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; a \\<in> A; surj_to f A B;\n     inj_on f A\\<rbrakk>\n    \\<Longrightarrow> (f\\<inverse>\\<^bsub>B,A\\<^esub>) (f a) = a", "apply (rule invfun_l, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma compos_invfun_r:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; g \\<in> A \\<rightarrow> C; h \\<in> B \\<rightarrow> C;\n       g \\<in> extensional A; compose B g (invfun A B f) = h\\<rbrakk> \\<Longrightarrow> \n       g = compose A h f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> A \\<rightarrow> C; h \\<in> B \\<rightarrow> C;\n     g \\<in> extensional A;\n     compose B g (f\\<inverse>\\<^bsub>B,A\\<^esub>) = h\\<rbrakk>\n    \\<Longrightarrow> g = compose A h f", "apply (rule funcset_eq[of g A \"compose A h f\"], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> A \\<rightarrow> C; h \\<in> B \\<rightarrow> C;\n     g \\<in> extensional A;\n     compose B g (f\\<inverse>\\<^bsub>B,A\\<^esub>) = h\\<rbrakk>\n    \\<Longrightarrow> compose A h f \\<in> extensional A\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> A \\<rightarrow> C; h \\<in> B \\<rightarrow> C;\n     g \\<in> extensional A;\n     compose B g (f\\<inverse>\\<^bsub>B,A\\<^esub>) = h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. g x = compose A h f x", "apply (simp add:compose_def extensional_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> A \\<rightarrow> C; h \\<in> B \\<rightarrow> C;\n     g \\<in> extensional A;\n     compose B g (f\\<inverse>\\<^bsub>B,A\\<^esub>) = h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. g x = compose A h f x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n        g \\<in> A \\<rightarrow> C; h \\<in> B \\<rightarrow> C;\n        g \\<in> extensional A;\n        compose B g (f\\<inverse>\\<^bsub>B,A\\<^esub>) = h; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> g x = compose A h f x", "apply (frule sym, thin_tac \"compose B g (invfun A B f) = h\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n        g \\<in> A \\<rightarrow> C;\n        compose B g (f\\<inverse>\\<^bsub>B,A\\<^esub>)\n        \\<in> B \\<rightarrow> C;\n        g \\<in> extensional A; x \\<in> A;\n        h = compose B g (f\\<inverse>\\<^bsub>B,A\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> g x =\n                         compose A\n                          (compose B g (f\\<inverse>\\<^bsub>B,A\\<^esub>)) f x", "apply (simp add:compose_def Pi_def invfun_l1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma compos_invfun_l:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; g \\<in> C \\<rightarrow> B; h \\<in> C \\<rightarrow> A;\n       compose C (invfun A B f) g = h; g \\<in> extensional C \\<rbrakk> \\<Longrightarrow> \n                     g = compose C f h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> C \\<rightarrow> B; h \\<in> C \\<rightarrow> A;\n     compose C (f\\<inverse>\\<^bsub>B,A\\<^esub>) g = h;\n     g \\<in> extensional C\\<rbrakk>\n    \\<Longrightarrow> g = compose C f h", "apply (rule funcset_eq[of g C \"compose C f h\"], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> C \\<rightarrow> B; h \\<in> C \\<rightarrow> A;\n     compose C (f\\<inverse>\\<^bsub>B,A\\<^esub>) g = h;\n     g \\<in> extensional C\\<rbrakk>\n    \\<Longrightarrow> compose C f h \\<in> extensional C\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> C \\<rightarrow> B; h \\<in> C \\<rightarrow> A;\n     compose C (f\\<inverse>\\<^bsub>B,A\\<^esub>) g = h;\n     g \\<in> extensional C\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>C. g x = compose C f h x", "apply (simp add:compose_def extensional_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> C \\<rightarrow> B; h \\<in> C \\<rightarrow> A;\n     compose C (f\\<inverse>\\<^bsub>B,A\\<^esub>) g = h;\n     g \\<in> extensional C\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>C. g x = compose C f h x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n        g \\<in> C \\<rightarrow> B; h \\<in> C \\<rightarrow> A;\n        compose C (f\\<inverse>\\<^bsub>B,A\\<^esub>) g = h;\n        g \\<in> extensional C; x \\<in> C\\<rbrakk>\n       \\<Longrightarrow> g x = compose C f h x", "apply (frule sym, thin_tac \"compose C (invfun A B f) g = h\", \n       simp add:compose_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n        g \\<in> C \\<rightarrow> B;\n        (\\<lambda>x\\<in>C. (f\\<inverse>\\<^bsub>B,A\\<^esub>) (g x))\n        \\<in> C \\<rightarrow> A;\n        g \\<in> extensional C; x \\<in> C;\n        h =\n        (\\<lambda>x\\<in>C. (f\\<inverse>\\<^bsub>B,A\\<^esub>) (g x))\\<rbrakk>\n       \\<Longrightarrow> g x = f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) (g x))", "apply (frule_tac x = x in funcset_mem[of g C B], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n        g \\<in> C \\<rightarrow> B;\n        (\\<lambda>x\\<in>C. (f\\<inverse>\\<^bsub>B,A\\<^esub>) (g x))\n        \\<in> C \\<rightarrow> A;\n        g \\<in> extensional C; x \\<in> C;\n        h = (\\<lambda>x\\<in>C. (f\\<inverse>\\<^bsub>B,A\\<^esub>) (g x));\n        g x \\<in> B\\<rbrakk>\n       \\<Longrightarrow> g x = f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) (g x))", "apply (simp add:invfun_r1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma invfun_set:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; C \\<subseteq> B\\<rbrakk> \\<Longrightarrow>\n                f ` ((invfun A B f)` C) = C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> f ` (f\\<inverse>\\<^bsub>B,A\\<^esub>) ` C = C", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> f ` (f\\<inverse>\\<^bsub>B,A\\<^esub>) ` C \\<subseteq> C\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> C \\<subseteq> f ` (f\\<inverse>\\<^bsub>B,A\\<^esub>) ` C", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; C \\<subseteq> B;\n        x \\<in> f ` (f\\<inverse>\\<^bsub>B,A\\<^esub>) ` C\\<rbrakk>\n       \\<Longrightarrow> x \\<in> C\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> C \\<subseteq> f ` (f\\<inverse>\\<^bsub>B,A\\<^esub>) ` C", "apply (simp add:image_def, erule exE,\n        erule conjE, erule bexE, simp,\n        frule_tac c = xb in subsetD[of \"C\" \"B\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa xb.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; C \\<subseteq> B;\n        x = f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) xb); xb \\<in> C;\n        xa = (f\\<inverse>\\<^bsub>B,A\\<^esub>) xb; xb \\<in> B\\<rbrakk>\n       \\<Longrightarrow> f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) xb) \\<in> C\n 2. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> C \\<subseteq> f ` (f\\<inverse>\\<^bsub>B,A\\<^esub>) ` C", "apply (simp add:bij_to_def, erule conjE,\n        simp add:invfun_r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     C \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> C \\<subseteq> f ` (f\\<inverse>\\<^bsub>B,A\\<^esub>) ` C", "apply (rule subsetI, simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; C \\<subseteq> B;\n        x \\<in> C\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>x\\<in>C.\n                                xa =\n                                (f\\<inverse>\\<^bsub>B,A\\<^esub>) x) \\<and>\n                            x = f xa", "apply (frule_tac c = x in subsetD[of \"C\" \"B\"], assumption+,\n        simp add:bij_to_def, erule conjE,\n        frule_tac b = x in invfun_r[of \"f\" \"A\" \"B\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; C \\<subseteq> B; x \\<in> C;\n        x \\<in> B; surj_to f A B; inj_on f A;\n        f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) x) = x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>x\\<in>C.\n                                xa =\n                                (f\\<inverse>\\<^bsub>B,A\\<^esub>) x) \\<and>\n                            x = f xa", "apply (frule sym, thin_tac \"f (invfun A B f x) = x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> A \\<rightarrow> B; C \\<subseteq> B; x \\<in> C;\n        x \\<in> B; surj_to f A B; inj_on f A;\n        x = f ((f\\<inverse>\\<^bsub>B,A\\<^esub>) x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>x\\<in>C.\n                                xa =\n                                (f\\<inverse>\\<^bsub>B,A\\<^esub>) x) \\<and>\n                            x = f xa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma compos_bij:\"\\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B; g \\<in> B \\<rightarrow> C; bij_to g B C\\<rbrakk> \\<Longrightarrow>\n                   bij_to (compose A g f) A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; bij_to f A B;\n     g \\<in> B \\<rightarrow> C; bij_to g B C\\<rbrakk>\n    \\<Longrightarrow> bij_to (compose A g f) A C", "apply (simp add:bij_to_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     surj_to f A B; inj_on f A; surj_to g B C; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> surj_to (compose A g f) A C \\<and>\n                      inj_on (compose A g f) A", "apply (simp add:comp_inj[of \"f\" \"A\" \"B\" \"g\" \"C\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> A \\<rightarrow> B; g \\<in> B \\<rightarrow> C;\n     surj_to f A B; inj_on f A; surj_to g B C; inj_on g B\\<rbrakk>\n    \\<Longrightarrow> surj_to (compose A g f) A C", "apply (simp add:compose_surj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \"Nsets\""], ["", "(* NSet is the set of natural numbers, and \"Nset n\" is the set of \nnatural numbers from 0 through n  *)"], ["", "definition\n  nset :: \"[nat, nat] \\<Rightarrow> (nat) set\" where\n  \"nset i j = {k. i \\<le> k \\<and> k \\<le> j}\""], ["", "definition\n  slide :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"slide i j == i + j\""], ["", "definition\n  sliden :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"sliden i j == j - i\""], ["", "definition\n  jointfun :: \"[nat, nat \\<Rightarrow> 'a, nat, nat \\<Rightarrow> 'a] \\<Rightarrow> (nat \\<Rightarrow> 'a)\" where\n  \"(jointfun n f m g) = (\\<lambda>i. if i \\<le> n then f i else  g ((sliden (Suc n)) i))\""], ["", "definition\n  skip :: \"nat \\<Rightarrow> (nat \\<Rightarrow> nat)\" where\n  \"skip i = (\\<lambda>x. (if i = 0 then Suc x else\n                 (if x \\<in> {j. j \\<le> (i - Suc 0)} then x  else Suc x)))\""], ["", "lemma nat_pos:\"0 \\<le> (l::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> l", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Suc_pos:\"Suc k \\<le> r \\<Longrightarrow> 0 < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc k \\<le> r \\<Longrightarrow> 0 < r", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nat_pos2:\"(k::nat) < r \\<Longrightarrow> 0 < r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < r \\<Longrightarrow> 0 < r", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_le_not:\"\\<lbrakk>(a::nat) \\<le> b; \\<not> a < b \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; \\<not> a < b\\<rbrakk> \\<Longrightarrow> a = b", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma im_of_constmap:\"(constmap {0} {a}) ` {0} = {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constmap {0::'b} {a} ` {0::'b} = {a}", "apply (simp add:constmap_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma noteq_le_less:\"\\<lbrakk> m \\<le> (n::nat); m \\<noteq> n \\<rbrakk> \\<Longrightarrow> m < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n; m \\<noteq> n\\<rbrakk> \\<Longrightarrow> m < n", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nat_not_le_less:\"(\\<not> (n::nat) \\<le> m) = (m < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> n \\<le> m) = (m < n)", "by (simp add: not_le)"], ["", "lemma self_le:\"(n::nat) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma n_less_Suc:\"(n::nat) < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Suc n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_diff_pos:\"i < (n::nat) \\<Longrightarrow> 0 < n - i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> 0 < n - i", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_diff_Suc:\"i < (n::nat) \\<Longrightarrow> n - (Suc i) = (n - i) - (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> n - Suc i = n - i - Suc 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_pre_n:\"0 < n \\<Longrightarrow> n - Suc 0 < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> n - Suc 0 < n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_inc_0:\"(0::nat) \\<in> {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> {i. i \\<le> n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_1:\"{i. i \\<le> Suc 0} = {0, Suc 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc 0} = {0, Suc 0}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_1_1:\"(k \\<le> Suc 0) = (k = 0 \\<or> k = Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (k \\<le> Suc 0) = (k = 0 \\<or> k = Suc 0)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. k \\<le> Suc 0 \\<Longrightarrow> k = 0 \\<or> k = Suc 0\n 2. k = 0 \\<or> k = Suc 0 \\<Longrightarrow> k \\<le> Suc 0", "apply (case_tac \"k = 0\", simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k = 0 \\<or> k = Suc 0 \\<Longrightarrow> k \\<le> Suc 0", "apply (erule disjE, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_2:\"{i, j} = {j, i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i, j} = {j, i}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_nonempty:\"{i. i \\<le> (n::nat)} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> n} \\<noteq> {}", "apply (subgoal_tac \"0 \\<in> {i. i \\<le> n}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 \\<in> {i. i \\<le> n} \\<Longrightarrow> {i. i \\<le> n} \\<noteq> {}\n 2. 0 \\<in> {i. i \\<le> n}", "apply (rule nonempty[of 0], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> {i. i \\<le> n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_le:\"x \\<in> {i. i \\<le> n} \\<Longrightarrow> x \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {i. i \\<le> n} \\<Longrightarrow> x \\<le> n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma n_in_Nsetn:\"(n::nat) \\<in> {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> {i. i \\<le> n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_pre:\"\\<lbrakk> (x::nat) \\<in> {i. i \\<le> (Suc n)}; x \\<noteq> Suc n \\<rbrakk> \\<Longrightarrow> x \\<in> {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {i. i \\<le> Suc n}; x \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> x \\<in> {i. i \\<le> n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_pre1:\"{i. i \\<le> (Suc n)} - {Suc n} = {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc n} - {Suc n} = {i. i \\<le> n}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {i. i \\<le> Suc n} - {Suc n} \\<subseteq> {i. i \\<le> n}\n 2. {i. i \\<le> n} \\<subseteq> {i. i \\<le> Suc n} - {Suc n}", "apply (rule subsetI, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_Suc_mem_Nsetn:\"x \\<le> Suc n \\<Longrightarrow> x - Suc 0 \\<in> {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> Suc n \\<Longrightarrow> x - Suc 0 \\<in> {i. i \\<le> n}", "apply (frule diff_le_mono[of x \"Suc n\" \"Suc 0\"],\n       thin_tac \"x \\<le> Suc n\", simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_Suc_diff_le:\"x \\<le> Suc n \\<Longrightarrow> x - Suc 0 \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> Suc n \\<Longrightarrow> x - Suc 0 \\<le> n", "apply (frule diff_le_mono[of x \"Suc n\" \"Suc 0\"],\n       thin_tac \"x \\<le> Suc n\", simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_not_pre:\"\\<lbrakk> x \\<notin> {i. i \\<le> n}; x \\<in> {i. i \\<le> (Suc n)}\\<rbrakk> \\<Longrightarrow> x = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> {i. i \\<le> n}; x \\<in> {i. i \\<le> Suc n}\\<rbrakk>\n    \\<Longrightarrow> x = Suc n", "by simp"], ["", "lemma mem_of_Nset:\"x \\<le> (n::nat) \\<Longrightarrow> x \\<in> {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> n \\<Longrightarrow> x \\<in> {i. i \\<le> n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_mem_of_Nset:\"x < (n::nat) \\<Longrightarrow> x \\<in> {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < n \\<Longrightarrow> x \\<in> {i. i \\<le> n}", "apply (frule less_imp_le [of \"x\" \"n\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < n; x \\<le> n\\<rbrakk>\n    \\<Longrightarrow> x \\<in> {i. i \\<le> n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_nset:\"{i. i \\<le> (Suc (n + m))} = {i. i \\<le> n} \\<union> \n                                            nset (Suc n) (Suc (n + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc (n + m)} =\n    {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {i. i \\<le> Suc (n + m)}\n    \\<subseteq> {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))\n 2. {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))\n    \\<subseteq> {i. i \\<le> Suc (n + m)}", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {i. i \\<le> Suc (n + m)} \\<Longrightarrow>\n       x \\<in> {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))\n 2. {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))\n    \\<subseteq> {i. i \\<le> Suc (n + m)}", "apply (simp add:nset_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<le> Suc (n + m) \\<Longrightarrow> x \\<le> n \\<or> Suc n \\<le> x\n 2. {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))\n    \\<subseteq> {i. i \\<le> Suc (n + m)}", "apply (auto simp add: nset_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_nset_1:\"\\<lbrakk>0 < n; i < n\\<rbrakk> \\<Longrightarrow> {j. j \\<le> n} = {j. j \\<le> i} \\<union> \n                                                           nset (Suc i) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; i < n\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> n} =\n                      {j. j \\<le> i} \\<union> nset (Suc i) n", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>i < n; x \\<notin> nset (Suc i) n; x \\<le> n\\<rbrakk>\n       \\<Longrightarrow> x \\<le> i\n 2. \\<And>x.\n       \\<lbrakk>i < n; x \\<in> nset (Suc i) n\\<rbrakk>\n       \\<Longrightarrow> x \\<le> n", "apply (simp add:nset_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i < n; x \\<in> nset (Suc i) n\\<rbrakk>\n       \\<Longrightarrow> x \\<le> n", "apply (simp add:nset_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_img0:\"\\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B; (f (Suc n)) \\<in> f ` {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                   f ` {j. j \\<le> Suc n} = f ` {j. j \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B;\n     f (Suc n) \\<in> f ` {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {j. j \\<le> Suc n} = f ` {j. j \\<le> n}", "by (auto simp add: le_Suc_eq)"], ["", "lemma Nset_img:\"f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B \\<Longrightarrow>\n         insert (f (Suc n)) (f ` {j. j \\<le> n}) = f ` {j. j \\<le> Suc n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B \\<Longrightarrow>\n    insert (f (Suc n)) (f ` {j. j \\<le> n}) = f ` {j. j \\<le> Suc n}", "by (auto elim: le_SucE)"], ["", "primrec nasc_seq :: \"[nat set, nat, nat] \\<Rightarrow> nat\"\nwhere\n  dec_seq_0: \"nasc_seq A a 0 = a\"\n| dec_seq_Suc: \"nasc_seq A a (Suc n) =\n                     (SOME b. ((b \\<in> A) \\<and> (nasc_seq A a n) < b))\""], ["", "lemma nasc_seq_mem:\"\\<lbrakk>(a::nat) \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                        (nasc_seq A a n) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> nasc_seq A a n \\<in> A", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> nasc_seq A a 0 \\<in> A\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a \\<in> A;\n                 \\<nexists>m.\n                    m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n                \\<Longrightarrow> nasc_seq A a n \\<in> A;\n        a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n       \\<Longrightarrow> nasc_seq A a (Suc n) \\<in> A", "apply (simp_all add: not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>nasc_seq A a n \\<in> A; a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x)\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> nasc_seq A a n < b)\n                         \\<in> A", "apply (subgoal_tac \"\\<exists>x\\<in>A. (nasc_seq A a n) < x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>nasc_seq A a n \\<in> A; a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x);\n        \\<exists>x\\<in>A. nasc_seq A a n < x\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> nasc_seq A a n < b)\n                         \\<in> A\n 2. \\<And>n.\n       \\<lbrakk>nasc_seq A a n \\<in> A; a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A. nasc_seq A a n < x", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>nasc_seq A a n \\<in> A; a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A. nasc_seq A a n < x\n 2. \\<And>n.\n       \\<lbrakk>nasc_seq A a n \\<in> A; a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x);\n        \\<exists>x\\<in>A. nasc_seq A a n < x\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> nasc_seq A a n < b)\n                         \\<in> A", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>nasc_seq A a n \\<in> A; a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x);\n        \\<exists>x\\<in>A. nasc_seq A a n < x\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> nasc_seq A a n < b)\n                         \\<in> A", "apply (thin_tac \"\\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x)\",\n        rule someI2_ex, blast, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nasc_seqn:\"\\<lbrakk>(a::nat) \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                               (nasc_seq A a n) < (nasc_seq A a (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> nasc_seq A a n < nasc_seq A a (Suc n)", "apply (simp,\n       frule nasc_seq_mem [of \"a\" \"A\" \"n\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m.\n        m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> x \\<le> m);\n     nasc_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nasc_seq A a n\n                      < (SOME b. b \\<in> A \\<and> nasc_seq A a n < b)", "apply (simp add: not_le,\n       subgoal_tac \"\\<exists>x\\<in>A. (nasc_seq A a n) < x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x);\n     nasc_seq A a n \\<in> A; \\<exists>x\\<in>A. nasc_seq A a n < x\\<rbrakk>\n    \\<Longrightarrow> nasc_seq A a n\n                      < (SOME b. b \\<in> A \\<and> nasc_seq A a n < b)\n 2. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x);\n     nasc_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>A. nasc_seq A a n < x", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x);\n     nasc_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>A. nasc_seq A a n < x\n 2. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x);\n     nasc_seq A a n \\<in> A; \\<exists>x\\<in>A. nasc_seq A a n < x\\<rbrakk>\n    \\<Longrightarrow> nasc_seq A a n\n                      < (SOME b. b \\<in> A \\<and> nasc_seq A a n < b)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x);\n     nasc_seq A a n \\<in> A; \\<exists>x\\<in>A. nasc_seq A a n < x\\<rbrakk>\n    \\<Longrightarrow> nasc_seq A a n\n                      < (SOME b. b \\<in> A \\<and> nasc_seq A a n < b)", "apply (thin_tac \"\\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x)\",\n        rule someI2_ex, blast, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nasc_seqn1:\"\\<lbrakk>(a::nat) \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                             Suc (nasc_seq A a n) \\<le> (nasc_seq A a (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> Suc (nasc_seq A a n) \\<le> nasc_seq A a (Suc n)", "apply (frule nasc_seqn [of \"a\" \"A\" \"n\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n     nasc_seq A a n < nasc_seq A a (Suc n)\\<rbrakk>\n    \\<Longrightarrow> Suc (nasc_seq A a n) \\<le> nasc_seq A a (Suc n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ubs_ex_n_maxTr:\"\\<lbrakk>(a::nat) \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk>\n      \\<Longrightarrow>  (a + n) \\<le> (nasc_seq A a n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> a + n \\<le> nasc_seq A a n", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> a + 0 \\<le> nasc_seq A a 0\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n        a + n \\<le> nasc_seq A a n\\<rbrakk>\n       \\<Longrightarrow> a + Suc n \\<le> nasc_seq A a (Suc n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n        a + n \\<le> nasc_seq A a n\\<rbrakk>\n       \\<Longrightarrow> a + Suc n \\<le> nasc_seq A a (Suc n)", "apply (frule_tac n = n in nasc_seqn1[of \"a\" \"A\"], assumption+,\n       subgoal_tac \"Suc (a + n) \\<le> Suc (nasc_seq A a n)\",\n       frule_tac i = \"Suc (a + n)\" and j = \"Suc (nasc_seq A a n)\" and\n                  k = \"nasc_seq A a (Suc n)\" in le_trans, assumption+,\n       simp, thin_tac \"Suc (nasc_seq A a n) \\<le> nasc_seq A a (Suc n)\",\n       subst Suc_le_mono, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ubs_ex_n_max:\"\\<lbrakk>A \\<noteq> {}; A \\<subseteq> {i. i \\<le> (n::nat)}\\<rbrakk> \\<Longrightarrow> \n                                      \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (frule nonempty_ex[of \"A\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> {i. i \\<le> n};\n     \\<exists>x. x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (thin_tac \"A \\<noteq> {}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; \\<exists>x. x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (rename_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (rule ex_ex1I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\n 2. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> y)\\<rbrakk>\n       \\<Longrightarrow> m = y", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> y)\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. x \\<le> m; y \\<in> A;\n        \\<forall>x\\<in>A. x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (frule_tac x = y in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>A. x \\<le> m\",\n        frule_tac x = m in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>A. x \\<le> y\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow>\n           (\\<exists>x\\<in>A. \\<not> x \\<le> m)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = a and A = A and n = \"n + 1\" in ubs_ex_n_maxTr, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> x \\<le> m);\n        a + (n + 1) \\<le> nasc_seq A a (n + 1)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = a in nasc_seq_mem[of _ \"A\" \"n + 1\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> x \\<le> m);\n        a + (n + 1) \\<le> nasc_seq A a (n + 1);\n        nasc_seq A a (n + 1) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = \"nasc_seq A a (n + 1)\" in subsetD[of \"A\" \"{i. i \\<le> n}\"],\n         assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  n_max :: \"nat set \\<Rightarrow> nat\" where\n  \"n_max A = (THE m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\""], ["", "lemma n_max:\"\\<lbrakk>A \\<subseteq> {i. i \\<le> (n::nat)}; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n                    (n_max A) \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> (n_max A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n_max A \\<in> A \\<and>\n                      (\\<forall>x\\<in>A. x \\<le> n_max A)", "apply (simp add:n_max_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (THE m.\n                          m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\n                      \\<in> A \\<and>\n                      (\\<forall>x\\<in>A.\n                          x \\<le> (THE m.\nm \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)))", "apply (frule ubs_ex_n_max[of \"A\" \"n\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> (THE m.\n                          m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\n                      \\<in> A \\<and>\n                      (\\<forall>x\\<in>A.\n                          x \\<le> (THE m.\nm \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)))", "apply (rule theI')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> {i. i \\<le> n}; A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!x.\n                         x \\<in> A \\<and> (\\<forall>xa\\<in>A. xa \\<le> x)", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma n_max_eq_sets:\"\\<lbrakk>A = B; A \\<noteq> {}; \\<exists>n. A \\<subseteq> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                          n_max A = n_max B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A = B; A \\<noteq> {};\n     \\<exists>n. A \\<subseteq> {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> n_max A = n_max B", "by simp"], ["", "(* n_max has no meaning unless conditions A \\<noteq> {}; \\<exists>n. A \\<subseteq> {j. j \\<le> n} *)"], ["", "lemma skip_mem:\"l \\<in> {i. i \\<le> n} \\<Longrightarrow> (skip i l) \\<in> {i. i \\<le> (Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<in> {i. i \\<le> n} \\<Longrightarrow>\n    skip i l \\<in> {i. i \\<le> Suc n}", "apply (case_tac \"i = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>l \\<in> {i. i \\<le> n}; i = 0\\<rbrakk>\n    \\<Longrightarrow> skip i l \\<in> {i. i \\<le> Suc n}\n 2. \\<lbrakk>l \\<in> {i. i \\<le> n}; i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> skip i l \\<in> {i. i \\<le> Suc n}", "apply (simp add:skip_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<in> {i. i \\<le> n}; i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> skip i l \\<in> {i. i \\<le> Suc n}", "apply (simp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<le> n; 0 < i\\<rbrakk>\n    \\<Longrightarrow> skip i l \\<le> Suc n", "apply (simp add:skip_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_fun:\"(skip i) \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> (Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skip i \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> Suc n}", "apply (rule Pi_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {i. i \\<le> n} \\<Longrightarrow>\n       skip i x \\<in> {i. i \\<le> Suc n}", "apply (rule skip_mem, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_im_Tr0:\"x \\<in> {i. i \\<le> n} \\<Longrightarrow> skip 0 x = Suc x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {i. i \\<le> n} \\<Longrightarrow> skip 0 x = Suc x", "apply (simp add:skip_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_im_Tr0_1:\"0 < y \\<Longrightarrow> skip 0 (y - Suc 0) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < y \\<Longrightarrow> skip 0 (y - Suc 0) = y", "apply (simp add:skip_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_im_Tr1:\"\\<lbrakk> i \\<in> {i. i \\<le> (Suc n)}; 0 < i; x \\<le> i - Suc 0 \\<rbrakk> \\<Longrightarrow>\n           skip i x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> {i. i \\<le> Suc n}; 0 < i; x \\<le> i - Suc 0\\<rbrakk>\n    \\<Longrightarrow> skip i x = x", "by (simp add:skip_def)"], ["", "lemma skip_im_Tr1_1:\"\\<lbrakk> i \\<in> {i. i \\<le> (Suc n)}; 0 < i; x < i\\<rbrakk> \\<Longrightarrow>\n                       skip i x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> {i. i \\<le> Suc n}; 0 < i; x < i\\<rbrakk>\n    \\<Longrightarrow> skip i x = x", "apply (frule less_le_diff[of x i])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> {i. i \\<le> Suc n}; 0 < i; x < i;\n     x \\<le> i - Suc 0\\<rbrakk>\n    \\<Longrightarrow> skip i x = x", "apply (simp add:skip_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_im_Tr1_2:\"\\<lbrakk> i \\<le> (Suc n); x < i\\<rbrakk> \\<Longrightarrow>  skip i x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> Suc n; x < i\\<rbrakk> \\<Longrightarrow> skip i x = x", "apply (rule skip_im_Tr1_1[of i n x], simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_im_Tr2:\"\\<lbrakk> 0 < i; i \\<in> {i. i \\<le> (Suc n)}; i \\<le> x\\<rbrakk> \\<Longrightarrow>\n      skip i x = Suc x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; i \\<in> {i. i \\<le> Suc n}; i \\<le> x\\<rbrakk>\n    \\<Longrightarrow> skip i x = Suc x", "by (simp add:skip_def)"], ["", "lemma skip_im_Tr2_1:\"\\<lbrakk>i \\<in> {i. i \\<le> (Suc n)}; i \\<le> x\\<rbrakk> \\<Longrightarrow>\n                             skip i x = Suc x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> {i. i \\<le> Suc n}; i \\<le> x\\<rbrakk>\n    \\<Longrightarrow> skip i x = Suc x", "apply (case_tac \"i = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<in> {i. i \\<le> Suc n}; i \\<le> x; i = 0\\<rbrakk>\n    \\<Longrightarrow> skip i x = Suc x\n 2. \\<lbrakk>i \\<in> {i. i \\<le> Suc n}; i \\<le> x; i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> skip i x = Suc x", "apply (simp add:skip_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> {i. i \\<le> Suc n}; i \\<le> x; i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> skip i x = Suc x", "apply (simp, rule skip_im_Tr2, assumption+, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_im_Tr3:\"x \\<in> {i. i \\<le> n} \\<Longrightarrow> skip (Suc n) x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {i. i \\<le> n} \\<Longrightarrow> skip (Suc n) x = x", "apply (simp add:skip_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_im_Tr4:\"\\<lbrakk>x \\<le> Suc n; 0 < x\\<rbrakk> \\<Longrightarrow> x - Suc 0 \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> Suc n; 0 < x\\<rbrakk>\n    \\<Longrightarrow> x - Suc 0 \\<le> n", "apply (simp add:Suc_le_mono [of \"x - Suc 0\" \"n\", THEN sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_fun_im:\"i \\<in> {j. j \\<le> (Suc n)} \\<Longrightarrow> \n              (skip i) ` {j. j \\<le> n} = ({j. j \\<le> (Suc n)} - {i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    skip i ` {j. j \\<le> n} = {j. j \\<le> Suc n} - {i}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    skip i ` {j. j \\<le> n} \\<subseteq> {j. j \\<le> Suc n} - {i}\n 2. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>i \\<in> {j. j \\<le> Suc n};\n        x \\<in> skip i ` {j. j \\<le> n}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {j. j \\<le> Suc n} - {i}\n 2. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (case_tac \"i = 0\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> skip 0 ` {j. j \\<le> n}; i = 0\\<rbrakk>\n       \\<Longrightarrow> x \\<le> Suc n \\<and> 0 < x\n 2. \\<And>x.\n       \\<lbrakk>i \\<in> {j. j \\<le> Suc n}; x \\<in> skip i ` {j. j \\<le> n};\n        i \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {j. j \\<le> Suc n} - {i}\n 3. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (simp add:image_def, erule exE, erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>i = 0; xa \\<le> n; x = skip 0 xa\\<rbrakk>\n       \\<Longrightarrow> x \\<le> Suc n \\<and> 0 < x\n 2. \\<And>x.\n       \\<lbrakk>i \\<in> {j. j \\<le> Suc n}; x \\<in> skip i ` {j. j \\<le> n};\n        i \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {j. j \\<le> Suc n} - {i}\n 3. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (cut_tac x = xa in skip_im_Tr0[of _ n], simp, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>i \\<in> {j. j \\<le> Suc n}; x \\<in> skip i ` {j. j \\<le> n};\n        i \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {j. j \\<le> Suc n} - {i}\n 2. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (simp add:image_def, erule exE, erule conjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>i \\<le> Suc n; 0 < i; xa \\<le> n; x = skip i xa\\<rbrakk>\n       \\<Longrightarrow> skip i xa \\<le> Suc n \\<and> skip i xa \\<noteq> i\n 2. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (case_tac \"xa < i\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>i \\<le> Suc n; 0 < i; xa \\<le> n; x = skip i xa;\n        xa < i\\<rbrakk>\n       \\<Longrightarrow> skip i xa \\<le> Suc n \\<and> skip i xa \\<noteq> i\n 2. \\<And>x xa.\n       \\<lbrakk>i \\<le> Suc n; 0 < i; xa \\<le> n; x = skip i xa;\n        \\<not> xa < i\\<rbrakk>\n       \\<Longrightarrow> skip i xa \\<le> Suc n \\<and> skip i xa \\<noteq> i\n 3. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (frule_tac x = xa in skip_im_Tr1_2[of i n], simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>0 < i; xa \\<le> n; x = skip i xa; \\<not> xa < i\\<rbrakk>\n       \\<Longrightarrow> skip i xa \\<le> Suc n \\<and> skip i xa \\<noteq> i\n 2. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (cut_tac m1 = xa and n1 = i in nat_not_le_less[THEN sym], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>0 < i; xa \\<le> n; x = skip i xa; i \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> skip i xa \\<le> Suc n \\<and> skip i xa \\<noteq> i\n 2. i \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (cut_tac x = xa and n = n in skip_im_Tr2_1[of i], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> Suc n \\<Longrightarrow>\n    {j. j \\<le> Suc n} - {i} \\<subseteq> skip i ` {j. j \\<le> n}", "apply (rule subsetI, simp, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> Suc n; x \\<le> Suc n; x \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> skip i ` {j. j \\<le> n}", "apply (cut_tac x = x and y = i in less_linear, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> Suc n; x \\<le> Suc n; x \\<noteq> i;\n        x < i \\<or> i < x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> skip i ` {j. j \\<le> n}", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> Suc n; x \\<le> Suc n; x \\<noteq> i; x < i\\<rbrakk>\n       \\<Longrightarrow> x \\<in> skip i ` {j. j \\<le> n}\n 2. \\<And>x.\n       \\<lbrakk>i \\<le> Suc n; x \\<le> Suc n; x \\<noteq> i; i < x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> skip i ` {j. j \\<le> n}", "apply (simp add:image_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> Suc n; x < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x = skip i xa\n 2. \\<And>x.\n       \\<lbrakk>i \\<le> Suc n; x \\<le> Suc n; x \\<noteq> i; i < x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> skip i ` {j. j \\<le> n}", "apply (frule_tac x = x in skip_im_Tr1_2[of i n], assumption,\n        frule_tac x = x and y = i and z = \"Suc n\" in less_le_trans, \n        assumption+,\n        frule_tac m = x and n = \"Suc n\" in Suc_leI,\n        simp only:Suc_le_mono,\n        frule sym, thin_tac \"skip i x = x\", blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> Suc n; x \\<le> Suc n; x \\<noteq> i; i < x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> skip i ` {j. j \\<le> n}", "apply (cut_tac x = \"x - Suc 0\" in skip_im_Tr2_1[of i n],\n        simp, simp add:less_le_diff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> Suc n; x \\<le> Suc n; x \\<noteq> i; i < x;\n        skip i (x - Suc 0) = Suc (x - Suc 0)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> skip i ` {j. j \\<le> n}", "apply (cut_tac x = i and n = x in less_le_diff, assumption,\n        simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> Suc n; i < x; skip i (x - Suc 0) = x;\n        i \\<le> x - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x = skip i xa", "apply (frule_tac m = x and n = \"Suc n\" and l = \"Suc 0\" in diff_le_mono,\n        simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> Suc n; i < x; skip i (x - Suc 0) = x;\n        i \\<le> x - Suc 0; x - Suc 0 \\<le> n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x = skip i xa", "apply (frule sym, thin_tac \"skip i (x - Suc 0) = x\", blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_fun_im1:\"\\<lbrakk>i \\<in> {j. j \\<le> (Suc n)}; x \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n                      (skip i) x \\<in> ({j. j \\<le> (Suc n)} - {i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> {j. j \\<le> Suc n}; x \\<in> {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> skip i x \\<in> {j. j \\<le> Suc n} - {i}", "by (subst skip_fun_im[THEN sym], assumption,\n    simp add:image_def, blast)"], ["", "lemma skip_id:\"l < i \\<Longrightarrow> skip i l = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < i \\<Longrightarrow> skip i l = l", "apply (simp add:skip_def )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Suc_neq:\"\\<lbrakk>0 < i; i - Suc 0 < l\\<rbrakk> \\<Longrightarrow> i \\<noteq> Suc l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; i - Suc 0 < l\\<rbrakk>\n    \\<Longrightarrow> i \\<noteq> Suc l", "by (rule contrapos_pp, simp+)"], ["", "lemma skip_il_neq_i:\"skip i l \\<noteq> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. skip i l \\<noteq> i", "apply (auto simp add:skip_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_inj:\"\\<lbrakk>i \\<in> {k. k \\<le> n}; j \\<in> {k. k \\<le> n}; i \\<noteq> j\\<rbrakk> \\<Longrightarrow> \n                         skip k i \\<noteq> skip k j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> {k. k \\<le> n}; j \\<in> {k. k \\<le> n};\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> skip k i \\<noteq> skip k j", "apply (simp add:skip_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_imp_add_int:\" i \\<le> (j::nat) \\<Longrightarrow> \\<exists>k. j = i + k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j \\<Longrightarrow> \\<exists>k. j = i + k", "apply (case_tac \"i = j\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; i = j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. j = i + k\n 2. \\<lbrakk>i \\<le> j; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. j = i + k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. j = i + k", "apply (frule le_imp_less_or_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; i \\<noteq> j; i < j \\<or> i = j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. j = i + k", "apply (thin_tac \"i \\<le> j\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; i < j \\<or> i = j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. j = i + k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow> \\<exists>k. j = i + k", "apply (insert less_imp_add_positive [of \"i\" \"j\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; i < j \\<Longrightarrow> \\<exists>k>0. i + k = j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. j = i + k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; \\<exists>k>0. i + k = j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k. j = i + k", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jointfun_hom0:\"\\<lbrakk> f \\<in> {j. j \\<le> n} \\<rightarrow> A; g \\<in> {k. k \\<le> m} \\<rightarrow> B \\<rbrakk> \\<Longrightarrow> \n        (jointfun n f m g) \\<in> {l. l \\<le> (Suc (n + m))} \\<rightarrow>  (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {k. k \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> jointfun n f m g\n                      \\<in> {l. l \\<le> Suc (n + m)} \\<rightarrow>\n                            A \\<union> B", "by (simp add:jointfun_def sliden_def Pi_def)"], ["", "lemma jointfun_mem:\"\\<lbrakk>\\<forall>j \\<le> (n::nat). f j \\<in> A; \\<forall>j \\<le> m. g j \\<in> B; \n             l \\<le> (Suc (n + m))\\<rbrakk> \\<Longrightarrow> (jointfun n f m g) l \\<in> (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> A; \\<forall>j\\<le>m. g j \\<in> B;\n     l \\<le> Suc (n + m)\\<rbrakk>\n    \\<Longrightarrow> jointfun n f m g l \\<in> A \\<union> B", "apply (rule funcset_mem[of \"jointfun n f m g\" \"{j. j \\<le> Suc (n + m)}\" \"A \\<union> B\"\n       l])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> A; \\<forall>j\\<le>m. g j \\<in> B;\n     l \\<le> Suc (n + m)\\<rbrakk>\n    \\<Longrightarrow> jointfun n f m g\n                      \\<in> {j. j \\<le> Suc (n + m)} \\<rightarrow>\n                            A \\<union> B\n 2. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> A; \\<forall>j\\<le>m. g j \\<in> B;\n     l \\<le> Suc (n + m)\\<rbrakk>\n    \\<Longrightarrow> l \\<in> {j. j \\<le> Suc (n + m)}", "apply (rule jointfun_hom0)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> A; \\<forall>j\\<le>m. g j \\<in> B;\n     l \\<le> Suc (n + m)\\<rbrakk>\n    \\<Longrightarrow> f \\<in> {j. j \\<le> n} \\<rightarrow> A\n 2. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> A; \\<forall>j\\<le>m. g j \\<in> B;\n     l \\<le> Suc (n + m)\\<rbrakk>\n    \\<Longrightarrow> g \\<in> {k. k \\<le> m} \\<rightarrow> B\n 3. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> A; \\<forall>j\\<le>m. g j \\<in> B;\n     l \\<le> Suc (n + m)\\<rbrakk>\n    \\<Longrightarrow> l \\<in> {j. j \\<le> Suc (n + m)}", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jointfun_inj:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B; inj_on f {j. j \\<le> n};\n      b \\<notin> f ` {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n      inj_on (jointfun n f 0 (\\<lambda>k\\<in>{0::nat}. b)) {j. j \\<le> Suc n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n     inj_on f {j. j \\<le> n}; b \\<notin> f ` {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> inj_on (jointfun n f 0 (\\<lambda>k\\<in>{0}. b))\n                       {j. j \\<le> Suc n}", "apply (simp add:inj_on_def, (rule allI, rule impI)+, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; x \\<le> Suc n; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) x =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (case_tac \"x = Suc n\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) (Suc n) =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x = Suc n\\<rbrakk>\n       \\<Longrightarrow> Suc n = y\n 2. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; x \\<le> Suc n; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) x =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (case_tac \"y = Suc n\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) (Suc n) =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x = Suc n; y \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> Suc n = y\n 2. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; x \\<le> Suc n; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) x =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac m = y and n = \"Suc n\" in noteq_le_less, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) (Suc n) =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x = Suc n; y \\<noteq> Suc n; y < Suc n\\<rbrakk>\n       \\<Longrightarrow> Suc n = y\n 2. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; x \\<le> Suc n; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) x =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (\n               frule_tac x = y and n = \"Suc n\" in less_le_diff,\n               thin_tac \"y < Suc n\", thin_tac \"y \\<le> Suc n\", \n               simp add:jointfun_def sliden_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; x \\<le> Suc n; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) x =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (case_tac \"y = Suc n\", simp,\n             frule_tac m = x and n = \"Suc n\" in noteq_le_less, assumption,\n             frule_tac x = x and n = \"Suc n\" in less_le_diff,\n             thin_tac \"x < Suc n\", thin_tac \"x \\<le> Suc n\", \n             simp add:jointfun_def sliden_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; f x = b; y = Suc n;\n        x \\<le> n\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; x \\<le> Suc n; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) x =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x \\<noteq> Suc n; y \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (rotate_tac -3, frule sym, thin_tac \" f x = b\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> B;\n        \\<forall>x\\<le>n.\n           \\<forall>y\\<le>n. f x = f y \\<longrightarrow> x = y;\n        b \\<notin> f ` {j. j \\<le> n}; x \\<le> Suc n; y \\<le> Suc n;\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) x =\n        jointfun n f 0 (\\<lambda>k\\<in>{0}. b) y;\n        x \\<noteq> Suc n; y \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac m = x and n = \"Suc n\" in noteq_le_less, assumption,\n             frule_tac x = x and n = \"Suc n\" in less_le_diff,\n             thin_tac \"x < Suc n\", thin_tac \"x \\<le> Suc n\", simp,\n             frule_tac m = y and n = \"Suc n\" in noteq_le_less, assumption,\n             frule_tac x = y and n = \"Suc n\" in less_le_diff,\n             thin_tac \"y < Suc n\", thin_tac \"y \\<le> Suc n\", simp,\n             simp add:jointfun_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma slide_hom:\"i \\<le> j \\<Longrightarrow> (slide i) \\<in> {l. l \\<le> (j - i)} \\<rightarrow> nset i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j \\<Longrightarrow>\n    slide i \\<in> {l. l \\<le> j - i} \\<rightarrow> nset i j", "apply (simp add:Pi_def restrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j \\<Longrightarrow>\n    \\<forall>x\\<le>j - i. slide i x \\<in> nset i j", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       i \\<le> j \\<Longrightarrow>\n       x \\<le> j - i \\<longrightarrow> slide i x \\<in> nset i j", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> j; x \\<le> j - i\\<rbrakk>\n       \\<Longrightarrow> slide i x \\<in> nset i j", "apply (simp add:slide_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> j; x \\<le> j - i\\<rbrakk>\n       \\<Longrightarrow> i + x \\<in> nset i j", "apply (simp add:nset_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma slide_mem:\"\\<lbrakk> i \\<le> j; l \\<in> {k. k \\<le> (j - i)}\\<rbrakk> \\<Longrightarrow> slide i l \\<in> nset i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; l \\<in> {k. k \\<le> j - i}\\<rbrakk>\n    \\<Longrightarrow> slide i l \\<in> nset i j", "apply (frule slide_hom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; l \\<in> {k. k \\<le> j - i};\n     slide i \\<in> {l. l \\<le> j - i} \\<rightarrow> nset i j\\<rbrakk>\n    \\<Longrightarrow> slide i l \\<in> nset i j", "apply (rule funcset_mem, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma slide_iM:\"(slide i) ` {l. 0 \\<le> l} = {k. i \\<le> k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. slide i ` {l. 0 \\<le> l} = {k. i \\<le> k}", "apply (simp add:image_def slide_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x. y = i + x} = {k. i \\<le> k}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {y. \\<exists>x. y = i + x} \\<subseteq> {k. i \\<le> k}\n 2. {k. i \\<le> k} \\<subseteq> {y. \\<exists>x. y = i + x}", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {y. \\<exists>x. y = i + x} \\<Longrightarrow>\n       x \\<in> {k. i \\<le> k}\n 2. {k. i \\<le> k} \\<subseteq> {y. \\<exists>x. y = i + x}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. \\<exists>xa. x = i + xa \\<Longrightarrow> i \\<le> x\n 2. {k. i \\<le> k} \\<subseteq> {y. \\<exists>x. y = i + x}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. i \\<le> x \\<Longrightarrow> \\<exists>xa. x = i + xa", "apply (rule le_imp_add_int)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. i \\<le> x \\<Longrightarrow> i \\<le> x", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jointfun_hom:\"\\<lbrakk> f \\<in> {i. i \\<le> n} \\<rightarrow> A; g \\<in> {j. j \\<le> m} \\<rightarrow> B \\<rbrakk> \\<Longrightarrow> \n                   (jointfun n f m g) \\<in> {j. j \\<le> (Suc (n + m))} \\<rightarrow> A \\<union> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> jointfun n f m g\n                      \\<in> {j. j \\<le> Suc (n + m)} \\<rightarrow>\n                            A \\<union> B", "by (simp add:sliden_def Pi_def jointfun_def)"], ["", "lemma im_jointfunTr1:\"(jointfun n f m g) ` {i. i \\<le> n} = f ` {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jointfun n f m g ` {i. i \\<le> n} = f ` {i. i \\<le> n}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<le> n \\<Longrightarrow>\n       jointfun n f m g xa \\<in> f ` {i. i \\<le> n}\n 2. \\<And>xa.\n       xa \\<le> n \\<Longrightarrow>\n       f xa \\<in> jointfun n f m g ` {i. i \\<le> n}", "apply (simp add:jointfun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<le> n \\<Longrightarrow>\n       f xa \\<in> jointfun n f m g ` {i. i \\<le> n}", "apply (simp add:jointfun_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma im_jointfunTr2:\"(jointfun n f m g) ` (nset (Suc n) (Suc (n + m))) = \n                       g ` ({j. j \\<le> m})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jointfun n f m g ` nset (Suc n) (Suc (n + m)) = g ` {j. j \\<le> m}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> nset (Suc n) (Suc (n + m)) \\<Longrightarrow>\n       jointfun n f m g xa \\<in> g ` {j. j \\<le> m}\n 2. \\<And>xa.\n       xa \\<le> m \\<Longrightarrow>\n       g xa \\<in> jointfun n f m g ` nset (Suc n) (Suc (n + m))", "apply (simp add:nset_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       Suc n \\<le> xa \\<and> xa \\<le> Suc (n + m) \\<Longrightarrow>\n       jointfun n f m g xa \\<in> g ` {j. j \\<le> m}\n 2. \\<And>xa.\n       xa \\<le> m \\<Longrightarrow>\n       g xa \\<in> jointfun n f m g ` nset (Suc n) (Suc (n + m))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>Suc n \\<le> xa; xa \\<le> Suc (n + m)\\<rbrakk>\n       \\<Longrightarrow> jointfun n f m g xa \\<in> g ` {j. j \\<le> m}\n 2. \\<And>xa.\n       xa \\<le> m \\<Longrightarrow>\n       g xa \\<in> jointfun n f m g ` nset (Suc n) (Suc (n + m))", "apply (frule_tac m = xa and n = \"Suc (n + m)\" and l = \"Suc n\" in diff_le_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>Suc n \\<le> xa; xa \\<le> Suc (n + m);\n        xa - Suc n \\<le> Suc (n + m) - Suc n\\<rbrakk>\n       \\<Longrightarrow> jointfun n f m g xa \\<in> g ` {j. j \\<le> m}\n 2. \\<And>xa.\n       xa \\<le> m \\<Longrightarrow>\n       g xa \\<in> jointfun n f m g ` nset (Suc n) (Suc (n + m))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>Suc n \\<le> xa; xa \\<le> Suc (n + m);\n        xa - Suc n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> jointfun n f m g xa \\<in> g ` {j. j \\<le> m}\n 2. \\<And>xa.\n       xa \\<le> m \\<Longrightarrow>\n       g xa \\<in> jointfun n f m g ` nset (Suc n) (Suc (n + m))", "apply (simp add:jointfun_def sliden_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<le> m \\<Longrightarrow>\n       g xa \\<in> jointfun n f m g ` nset (Suc n) (Suc (n + m))", "apply (simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<le> m \\<Longrightarrow>\n       \\<exists>x\\<in>nset (Suc n) (Suc (n + m)). g xa = jointfun n f m g x", "apply (cut_tac le_add1[of \"n\" \"m\"],\n         simp only:Suc_le_mono[THEN sym, of \"n\" \"n+m\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>nset (Suc n) (Suc (n + m)).\n                            g xa = jointfun n f m g x", "apply (frule_tac l = xa in slide_mem[of \"Suc n\" \"Suc (n + m)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m)\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> {k. k \\<le> Suc (n + m) - Suc n}\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>nset (Suc n) (Suc (n + m)).\n                            g xa = jointfun n f m g x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>nset (Suc n) (Suc (n + m)).\n                            g xa = jointfun n f m g x", "apply (subst jointfun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>nset (Suc n) (Suc (n + m)).\n                            g xa =\n                            (if x \\<le> n then f x\n                             else g (sliden (Suc n) x))", "apply (subgoal_tac \"\\<forall>i\\<in>nset (Suc n) (Suc (n+m)). \\<not> (i \\<le> n) \")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m));\n        \\<forall>i\\<in>nset (Suc n) (Suc (n + m)). \\<not> i \\<le> n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>nset (Suc n) (Suc (n + m)).\n                            g xa =\n                            (if x \\<le> n then f x\n                             else g (sliden (Suc n) x))\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>nset (Suc n) (Suc (n + m)).\n                            \\<not> i \\<le> n", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m;\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m));\n        \\<forall>i\\<in>nset (Suc n) (Suc (n + m)). \\<not> i \\<le> n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>nset (Suc n) (Suc (n + m)).\n                            g xa = g (sliden (Suc n) x)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>nset (Suc n) (Suc (n + m)).\n                            \\<not> i \\<le> n", "apply (thin_tac \"\\<forall>i\\<in>nset (Suc n) (Suc (n + m)). \\<not> i \\<le> n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m;\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>nset (Suc n) (Suc (n + m)).\n                            g xa = g (sliden (Suc n) x)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>nset (Suc n) (Suc (n + m)).\n                            \\<not> i \\<le> n", "apply (subgoal_tac \"g xa = g (sliden (Suc n) (slide (Suc n) xa))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m;\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m));\n        g xa = g (sliden (Suc n) (slide (Suc n) xa))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>nset (Suc n) (Suc (n + m)).\n                            g xa = g (sliden (Suc n) x)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<le> m;\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> g xa = g (sliden (Suc n) (slide (Suc n) xa))\n 3. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>nset (Suc n) (Suc (n + m)).\n                            \\<not> i \\<le> n", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m;\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> g xa = g (sliden (Suc n) (slide (Suc n) xa))\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>nset (Suc n) (Suc (n + m)).\n                            \\<not> i \\<le> n", "apply (simp add:slide_def sliden_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<le> m; Suc n \\<le> Suc (n + m);\n        slide (Suc n) xa \\<in> nset (Suc n) (Suc (n + m))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i\\<in>nset (Suc n) (Suc (n + m)).\n                            \\<not> i \\<le> n", "apply (auto simp add: nset_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma im_jointfun:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A; g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk> \\<Longrightarrow> \n    (jointfun n f m g) `({j. j \\<le> (Suc (n + m))}) = \n                           f `{j. j \\<le> n} \\<union> g `{j. j \\<le>  m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> jointfun n f m g ` {j. j \\<le> Suc (n + m)} =\n                      f ` {j. j \\<le> n} \\<union> g ` {j. j \\<le> m}", "apply (cut_tac im_set_un1 [of \"{j. j \\<le> (Suc (n + m))}\" \"jointfun n f m g\" \n        \"A \\<union> B\"  \"{i. i \\<le> n}\" \"nset (Suc n) (Suc (n + m))\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B;\n     jointfun n f m g `\n     ({i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))) =\n     jointfun n f m g ` {i. i \\<le> n} \\<union>\n     jointfun n f m g ` nset (Suc n) (Suc (n + m))\\<rbrakk>\n    \\<Longrightarrow> jointfun n f m g ` {j. j \\<le> Suc (n + m)} =\n                      f ` {j. j \\<le> n} \\<union> g ` {j. j \\<le> m}\n 2. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l\\<in>{j. j \\<le> Suc (n + m)}.\n                         jointfun n f m g l \\<in> A \\<union> B\n 3. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> Suc (n + m)} =\n                      {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))", "apply (simp add:Nset_nset[THEN sym, of n m],\n        simp add:im_jointfunTr1[of n f m g],\n        simp add:im_jointfunTr2[of n f m g])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l\\<in>{j. j \\<le> Suc (n + m)}.\n                         jointfun n f m g l \\<in> A \\<union> B\n 2. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> Suc (n + m)} =\n                      {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n        g \\<in> {j. j \\<le> m} \\<rightarrow> B;\n        l \\<in> {j. j \\<le> Suc (n + m)}\\<rbrakk>\n       \\<Longrightarrow> jointfun n f m g l \\<in> A \\<union> B\n 2. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> Suc (n + m)} =\n                      {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))", "apply (simp add:jointfun_def,\n        case_tac \"l \\<le> n\", simp add:Pi_def,\n        simp add:sliden_def,\n        simp add:nat_not_le_less,\n        frule_tac m = n and n = l in Suc_leI,\n        frule_tac m = l and n = \"Suc (n + m)\" and l = \"Suc n\" in diff_le_mono,\n        thin_tac \"l \\<le> Suc (n + m)\", simp,\n        simp add:Pi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     g \\<in> {j. j \\<le> m} \\<rightarrow> B\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> Suc (n + m)} =\n                      {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m))", "apply (simp add:Nset_nset[of n m])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma im_jointfun1:\"(jointfun n f m g) `({j. j \\<le> (Suc (n + m))}) = \n                                      f `{j. j \\<le> n} \\<union> g ` {j. j \\<le> m}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. jointfun n f m g ` {j. j \\<le> Suc (n + m)} =\n    f ` {j. j \\<le> n} \\<union> g ` {j. j \\<le> m}", "apply (cut_tac Nset_nset[of \"n\" \"m\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc (n + m)} =\n    {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m)) \\<Longrightarrow>\n    jointfun n f m g ` {j. j \\<le> Suc (n + m)} =\n    f ` {j. j \\<le> n} \\<union> g ` {j. j \\<le> m}", "apply (subst  im_set_un2[of \"{j. j \\<le> (Suc (n + m))}\" \"{j. j \\<le> n}\" \n              \"nset (Suc n) (Suc (n + m))\" \"jointfun n f m g\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc (n + m)} =\n    {i. i \\<le> n} \\<union> nset (Suc n) (Suc (n + m)) \\<Longrightarrow>\n    jointfun n f m g ` {j. j \\<le> n} \\<union>\n    jointfun n f m g ` nset (Suc n) (Suc (n + m)) =\n    f ` {j. j \\<le> n} \\<union> g ` {j. j \\<le> m}", "apply (simp add:im_jointfunTr1 im_jointfunTr2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma jointfun_surj:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A; surj_to f {j. j \\<le> (n::nat)} A; \n      g \\<in> {j. j \\<le> (m::nat)} \\<rightarrow> B; surj_to g {j. j \\<le> m} B\\<rbrakk> \\<Longrightarrow> \n       surj_to (jointfun n f m g) {j. j \\<le> Suc (n + m)} (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     surj_to f {j. j \\<le> n} A; g \\<in> {j. j \\<le> m} \\<rightarrow> B;\n     surj_to g {j. j \\<le> m} B\\<rbrakk>\n    \\<Longrightarrow> surj_to (jointfun n f m g) {j. j \\<le> Suc (n + m)}\n                       (A \\<union> B)", "apply (simp add:surj_to_def [of \"jointfun n f m g\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     surj_to f {j. j \\<le> n} A; g \\<in> {j. j \\<le> m} \\<rightarrow> B;\n     surj_to g {j. j \\<le> m} B\\<rbrakk>\n    \\<Longrightarrow> jointfun n f m g ` {j. j \\<le> Suc (n + m)} =\n                      A \\<union> B", "apply (simp add:im_jointfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> A;\n     surj_to f {j. j \\<le> n} A; g \\<in> {j. j \\<le> m} \\<rightarrow> B;\n     surj_to g {j. j \\<le> m} B\\<rbrakk>\n    \\<Longrightarrow> f ` {j. j \\<le> n} \\<union> g ` {j. j \\<le> m} =\n                      A \\<union> B", "apply (simp add:surj_to_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_un:\"{j. j \\<le> (Suc n)} = {j. j \\<le> n} \\<union> {Suc n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j. j \\<le> Suc n} = {j. j \\<le> n} \\<union> {Suc n}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {j. j \\<le> Suc n} \\<subseteq> {j. j \\<le> n} \\<union> {Suc n}\n 2. {j. j \\<le> n} \\<union> {Suc n} \\<subseteq> {j. j \\<le> Suc n}", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n       x \\<in> {j. j \\<le> n} \\<union> {Suc n}\n 2. {j. j \\<le> n} \\<union> {Suc n} \\<subseteq> {j. j \\<le> Suc n}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<le> Suc n \\<Longrightarrow> x = Suc n \\<or> x \\<le> n\n 2. {j. j \\<le> n} \\<union> {Suc n} \\<subseteq> {j. j \\<le> Suc n}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nsetn_sub: \"{j. j \\<le> n} \\<subseteq> {j. j \\<le> (Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j. j \\<le> n} \\<subseteq> {j. j \\<le> Suc n}", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {j. j \\<le> n} \\<Longrightarrow> x \\<in> {j. j \\<le> Suc n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_pre_sub:\"(0::nat) < k \\<Longrightarrow> {j. j \\<le> (k - Suc 0)} \\<subseteq> {j. j \\<le> k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    {j. j \\<le> k - Suc 0} \\<subseteq> {j. j \\<le> k}", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; x \\<in> {j. j \\<le> k - Suc 0}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {j. j \\<le> k}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_pre_un:\"(0::nat) < k \\<Longrightarrow> {j. j \\<le> k} = {j. j \\<le> (k - Suc 0)} \\<union> {k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    {j. j \\<le> k} = {j. j \\<le> k - Suc 0} \\<union> {k}", "apply (insert Nset_un [of \"k - Suc 0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     {j. j \\<le> Suc (k - Suc 0)} =\n     {j. j \\<le> k - Suc 0} \\<union> {Suc (k - Suc 0)}\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> k} = {j. j \\<le> k - Suc 0} \\<union> {k}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nsetn_sub_mem:\" l \\<in> {j. j \\<le> n} \\<Longrightarrow> l \\<in> {j. j \\<le> (Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<in> {j. j \\<le> n} \\<Longrightarrow> l \\<in> {j. j \\<le> Suc n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nsetn_sub_mem1:\"\\<forall>j. j \\<in> {j. j \\<le> n} \\<longrightarrow> j \\<in> {j. j \\<le> (Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> {j. j \\<le> n} \\<longrightarrow> j \\<in> {j. j \\<le> Suc n}", "by (simp add:Nsetn_sub_mem)"], ["", "lemma Nset_Suc:\"{j. j \\<le> (Suc n)} = insert (Suc n) {j. j \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j. j \\<le> Suc n} = insert (Suc n) {j. j \\<le> n}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {j. j \\<le> Suc n} \\<subseteq> insert (Suc n) {j. j \\<le> n}\n 2. insert (Suc n) {j. j \\<le> n} \\<subseteq> {j. j \\<le> Suc n}", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {j. j \\<le> Suc n} \\<Longrightarrow>\n       x \\<in> insert (Suc n) {j. j \\<le> n}\n 2. insert (Suc n) {j. j \\<le> n} \\<subseteq> {j. j \\<le> Suc n}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<le> Suc n \\<Longrightarrow> x = Suc n \\<or> x \\<le> n\n 2. insert (Suc n) {j. j \\<le> n} \\<subseteq> {j. j \\<le> Suc n}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nsetnm_sub_mem:\"\\<forall>j. j \\<in>nset n (n + m) \\<longrightarrow> j \\<in> nset n (Suc (n + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> nset n (n + m) \\<longrightarrow> j \\<in> nset n (Suc (n + m))", "by (rule allI, simp add:nset_def)"], ["", "lemma Nset_0:\"{j. j \\<le> (0::nat)} = {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j. j \\<le> 0} = {0}", "by simp"], ["", "lemma Nset_Suc0:\"{i. i \\<le> (Suc 0)} = {0, Suc 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc 0} = {0, Suc 0}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {i. i \\<le> Suc 0} \\<subseteq> {0, Suc 0}\n 2. {0, Suc 0} \\<subseteq> {i. i \\<le> Suc 0}", "apply (rule subsetI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<le> Suc 0 \\<Longrightarrow> x = 0 \\<or> x = Suc 0\n 2. {0, Suc 0} \\<subseteq> {i. i \\<le> Suc 0}", "apply (case_tac \"x = 0\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> Suc 0; x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> x = 0 \\<or> x = Suc 0\n 2. {0, Suc 0} \\<subseteq> {i. i \\<le> Suc 0}", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_Suc_Suc:\"Suc (Suc 0) \\<le> n \\<Longrightarrow>\n       {j. j \\<le> (n - Suc (Suc 0))} = {j. j \\<le> n} - {n - Suc 0, n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc 0) \\<le> n \\<Longrightarrow>\n    {j. j \\<le> n - Suc (Suc 0)} = {j. j \\<le> n} - {n - Suc 0, n}", "apply (insert Nset_un [of \"n - (Suc 0)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc (Suc 0) \\<le> n;\n     {j. j \\<le> Suc (n - Suc 0)} =\n     {j. j \\<le> n - Suc 0} \\<union> {Suc (n - Suc 0)}\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> n - Suc (Suc 0)} =\n                      {j. j \\<le> n} - {n - Suc 0, n}", "apply (insert Nset_un [of \"n - Suc (Suc 0)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc (Suc 0) \\<le> n;\n     {j. j \\<le> Suc (n - Suc 0)} =\n     {j. j \\<le> n - Suc 0} \\<union> {Suc (n - Suc 0)};\n     {j. j \\<le> Suc (n - Suc (Suc 0))} =\n     {j. j \\<le> n - Suc (Suc 0)} \\<union> {Suc (n - Suc (Suc 0))}\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> n - Suc (Suc 0)} =\n                      {j. j \\<le> n} - {n - Suc 0, n}", "apply (subgoal_tac \"{j. j \\<le> (Suc (n - Suc (Suc 0)))} = {j. j \\<le> (n - Suc 0)}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc (Suc 0) \\<le> n;\n     {j. j \\<le> Suc (n - Suc 0)} =\n     {j. j \\<le> n - Suc 0} \\<union> {Suc (n - Suc 0)};\n     {j. j \\<le> Suc (n - Suc (Suc 0))} =\n     {j. j \\<le> n - Suc (Suc 0)} \\<union> {Suc (n - Suc (Suc 0))};\n     {j. j \\<le> Suc (n - Suc (Suc 0))} = {j. j \\<le> n - Suc 0}\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> n - Suc (Suc 0)} =\n                      {j. j \\<le> n} - {n - Suc 0, n}\n 2. \\<lbrakk>Suc (Suc 0) \\<le> n;\n     {j. j \\<le> Suc (n - Suc 0)} =\n     {j. j \\<le> n - Suc 0} \\<union> {Suc (n - Suc 0)};\n     {j. j \\<le> Suc (n - Suc (Suc 0))} =\n     {j. j \\<le> n - Suc (Suc 0)} \\<union> {Suc (n - Suc (Suc 0))}\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> Suc (n - Suc (Suc 0))} =\n                      {j. j \\<le> n - Suc 0}", "apply (simp,\n       thin_tac \"{j. j \\<le> n} =\n       insert n (insert (Suc (n - Suc (Suc 0))) {j. j \\<le> n - Suc (Suc 0)})\",\n       thin_tac \" {j. j \\<le> n - Suc 0} =\n        insert (Suc (n - Suc (Suc 0))) {j. j \\<le> n - Suc (Suc 0)}\",\n       thin_tac \"{j. j \\<le> Suc (n - Suc (Suc 0))} =\n        insert (Suc (n - Suc (Suc 0))) {j. j \\<le> n - Suc (Suc 0)}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. Suc (Suc 0) \\<le> n \\<Longrightarrow>\n    {j. j \\<le> n - Suc (Suc 0)} =\n    insert (Suc (n - Suc (Suc 0))) {j. j \\<le> n - Suc (Suc 0)} -\n    {n - Suc 0, n}\n 2. \\<lbrakk>Suc (Suc 0) \\<le> n;\n     {j. j \\<le> Suc (n - Suc 0)} =\n     {j. j \\<le> n - Suc 0} \\<union> {Suc (n - Suc 0)};\n     {j. j \\<le> Suc (n - Suc (Suc 0))} =\n     {j. j \\<le> n - Suc (Suc 0)} \\<union> {Suc (n - Suc (Suc 0))}\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> Suc (n - Suc (Suc 0))} =\n                      {j. j \\<le> n - Suc 0}", "apply (simp add:Suc_Suc_Tr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc (Suc 0) \\<le> n;\n     {j. j \\<le> Suc (n - Suc 0)} =\n     {j. j \\<le> n - Suc 0} \\<union> {Suc (n - Suc 0)};\n     {j. j \\<le> Suc (n - Suc (Suc 0))} =\n     {j. j \\<le> n - Suc (Suc 0)} \\<union> {Suc (n - Suc (Suc 0))}\\<rbrakk>\n    \\<Longrightarrow> {j. j \\<le> Suc (n - Suc (Suc 0))} =\n                      {j. j \\<le> n - Suc 0}", "apply (auto )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma func_pre:\"f \\<in> {j. j \\<le> (Suc n)} \\<rightarrow> A \\<Longrightarrow> f \\<in> {j. j \\<le> n} \\<rightarrow> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {j. j \\<le> Suc n} \\<rightarrow> A \\<Longrightarrow>\n    f \\<in> {j. j \\<le> n} \\<rightarrow> A", "by (simp add:Pi_def)"], ["", "lemma image_Nset_Suc:\"f ` ({j. j \\<le> (Suc n)}) =\n                             insert (f (Suc n)) (f ` {j. j \\<le> n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` {j. j \\<le> Suc n} = insert (f (Suc n)) (f ` {j. j \\<le> n})", "apply (cut_tac Nset_un[of \"n\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {j. j \\<le> Suc n} = {j. j \\<le> n} \\<union> {Suc n} \\<Longrightarrow>\n    f ` {j. j \\<le> Suc n} = insert (f (Suc n)) (f ` {j. j \\<le> n})", "apply (frule im_set_un2[of \"{j. j \\<le> (Suc n)}\" \"{j. j \\<le> n}\" \"{Suc n}\" \"f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{j. j \\<le> Suc n} = {j. j \\<le> n} \\<union> {Suc n};\n     f ` {j. j \\<le> Suc n} =\n     f ` {j. j \\<le> n} \\<union> f ` {Suc n}\\<rbrakk>\n    \\<Longrightarrow> f ` {j. j \\<le> Suc n} =\n                      insert (f (Suc n)) (f ` {j. j \\<le> n})", "apply (simp add:Un_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  Nleast :: \"nat set \\<Rightarrow> nat\" where\n  \"Nleast A = (THE a. (a \\<in> A \\<and> (\\<forall>x\\<in>A. a \\<le> x)))\""], ["", "definition\n  Nlb :: \"[nat set, nat] \\<Rightarrow> bool\" where\n  \"Nlb A n \\<longleftrightarrow> (\\<forall>a\\<in>A. n \\<le> a)\""], ["", "primrec ndec_seq :: \"[nat set, nat, nat] \\<Rightarrow> nat\" where\n  ndec_seq_0  :\"ndec_seq A a 0 = a\"\n| ndec_seq_Suc:\"ndec_seq A a (Suc n) =\n                      (SOME b. ((b \\<in> A) \\<and> b < (ndec_seq A a n)))\""], ["", "lemma ndec_seq_mem:\"\\<lbrakk>a \\<in> (A::nat set); \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                        (ndec_seq A a n) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> ndec_seq A a n \\<in> A", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> ndec_seq A a 0 \\<in> A\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a (Suc n) \\<in> A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a (Suc n) \\<in> A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> m \\<le> x);\n        ndec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                         \\<in> A", "apply (simp add: not_less [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        ndec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                         \\<in> A", "apply (subgoal_tac \"\\<exists>x\\<in>A. x < (ndec_seq A a n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                         \\<in> A\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        ndec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A. x < ndec_seq A a n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        ndec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A. x < ndec_seq A a n\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                         \\<in> A", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                         \\<in> A", "apply (thin_tac \"\\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                         \\<in> A", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa. aa \\<in> A \\<and> aa < ndec_seq A a n\n 2. \\<And>n x.\n       \\<lbrakk>a \\<in> A; ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n;\n        x \\<in> A \\<and> x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>a \\<in> A; ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n;\n        x \\<in> A \\<and> x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ndec_seqn:\"\\<lbrakk>a \\<in> (A::nat set);\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                       (ndec_seq A a (Suc n)) < (ndec_seq A a n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> ndec_seq A a (Suc n) < ndec_seq A a n", "apply (frule ndec_seq_mem [of \"a\" \"A\" \"n\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n     ndec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> ndec_seq A a (Suc n) < ndec_seq A a n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m.\n        m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> m \\<le> x);\n     ndec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                      < ndec_seq A a n", "apply (simp add: not_less [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     ndec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                      < ndec_seq A a n", "apply (subgoal_tac \"\\<exists>x\\<in>A. x < (ndec_seq A a n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     ndec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                      < ndec_seq A a n\n 2. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     ndec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>A. x < ndec_seq A a n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     ndec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>A. x < ndec_seq A a n\n 2. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     ndec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                      < ndec_seq A a n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     ndec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                      < ndec_seq A a n", "apply (thin_tac \"\\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; ndec_seq A a n \\<in> A;\n     \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < ndec_seq A a n)\n                      < ndec_seq A a n", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A; ndec_seq A a n \\<in> A;\n     \\<exists>x\\<in>A. x < ndec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa. aa \\<in> A \\<and> aa < ndec_seq A a n\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> A; ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n;\n        x \\<in> A \\<and> x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> x < ndec_seq A a n", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> A; ndec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < ndec_seq A a n;\n        x \\<in> A \\<and> x < ndec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> x < ndec_seq A a n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ndec_seqn1:\"\\<lbrakk>a \\<in> (A::nat set); \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                       (ndec_seq A a (Suc n)) \\<le> (ndec_seq A a n) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> ndec_seq A a (Suc n) \\<le> ndec_seq A a n - 1", "apply (frule ndec_seqn [of \"a\" \"A\" \"n\"], assumption+,\n       thin_tac \"\\<not> (\\<exists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; ndec_seq A a (Suc n) < ndec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> ndec_seq A a (Suc n) \\<le> ndec_seq A a n - 1", "apply (simp del:ndec_seq_Suc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ex_NleastTr:\"\\<lbrakk>a \\<in> (A::nat set); \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                        (ndec_seq A a n) \\<le> (a - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> ndec_seq A a n \\<le> a - n", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> ndec_seq A a 0 \\<le> a - 0\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<le> a - n\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a (Suc n) \\<le> a - Suc n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<le> a - n\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a (Suc n) \\<le> a - Suc n", "apply (frule_tac n = n in ndec_seqn1[of \"a\" \"A\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<le> a - n;\n        ndec_seq A a (Suc n) \\<le> ndec_seq A a n - 1\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a (Suc n) \\<le> a - Suc n", "apply (subgoal_tac \"ndec_seq A a n - 1 \\<le> (a - n) - 1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<le> a - n;\n        ndec_seq A a (Suc n) \\<le> ndec_seq A a n - 1;\n        ndec_seq A a n - 1 \\<le> a - n - 1\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a (Suc n) \\<le> a - Suc n\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<le> a - n;\n        ndec_seq A a (Suc n) \\<le> ndec_seq A a n - 1\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a n - 1 \\<le> a - n - 1", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<le> a - n;\n        ndec_seq A a (Suc n) \\<le> ndec_seq A a n - 1\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a n - 1 \\<le> a - n - 1\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<le> a - n;\n        ndec_seq A a (Suc n) \\<le> ndec_seq A a n - 1;\n        ndec_seq A a n - 1 \\<le> a - n - 1\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a (Suc n) \\<le> a - Suc n", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a n \\<le> a - n;\n        ndec_seq A a (Suc n) \\<le> ndec_seq A a n - 1;\n        ndec_seq A a n - 1 \\<le> a - n - 1\\<rbrakk>\n       \\<Longrightarrow> ndec_seq A a (Suc n) \\<le> a - Suc n", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nat_le:\"((a::nat) - (a + 1)) \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - (a + 1) \\<le> 0", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ex_Nleast:\"(A::nat set) \\<noteq> {} \\<Longrightarrow> \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (frule nonempty_ex[of \"A\"], thin_tac \"A \\<noteq> {}\",\n       erule exE, rename_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<Longrightarrow>\n       \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (case_tac \"0 \\<in> A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (rule ex_ex1I, subgoal_tac \"\\<forall>x\\<in>A. 0 \\<le> a\", blast,\n        rule ballI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>a \\<in> A; 0 \\<in> A;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply ((erule conjE)+, \n        subgoal_tac \"m \\<le> 0\", thin_tac \"\\<forall>x\\<in>A. m \\<le> x\",\n        subgoal_tac \"y \\<le> 0\", thin_tac \"\\<forall>x\\<in>A. y \\<le> x\",\n        simp, blast, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (rule ex_ex1I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\n 2. \\<And>a m y.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> m = y", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A;\n        \\<forall>x\\<in>A. y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (subgoal_tac \"m \\<le> y\", thin_tac \"\\<forall>x\\<in>A. m \\<le> x\",\n         subgoal_tac \"y \\<le> m\", thin_tac \"\\<forall>x\\<in>A. y \\<le> x\",\n         simp, blast, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (rule contrapos_pp, simp, \n       frule_tac a = a and A = A and n = \"a + 1\" in ex_NleastTr, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a (a + 1) \\<le> a - (a + 1)\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (subgoal_tac \"(a - (a + 1)) \\<le> 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a (a + 1) \\<le> a - (a + 1); a - (a + 1) \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> True\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a (a + 1) \\<le> a - (a + 1)\\<rbrakk>\n       \\<Longrightarrow> a - (a + 1) \\<le> 0", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a (a + 1) \\<le> a - (a + 1)\\<rbrakk>\n       \\<Longrightarrow> a - (a + 1) \\<le> 0\n 2. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a (a + 1) \\<le> a - (a + 1); a - (a + 1) \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (rule nat_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a (a + 1) \\<le> a - (a + 1); a - (a + 1) \\<le> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (frule_tac i = \"ndec_seq A a (a + 1)\" and j = \"a - (a + 1)\" and k = 0 in le_trans, assumption+,\n        frule_tac a = a and n = \"a + 1\" in ndec_seq_mem [of _ \"A\"], \n                                                          assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        ndec_seq A a (a + 1) \\<le> a - (a + 1); a - (a + 1) \\<le> 0;\n        ndec_seq A a (a + 1) \\<le> 0; ndec_seq A a (a + 1) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (thin_tac \"\\<not> (\\<exists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\",\n        thin_tac \"ndec_seq A a (a + 1) \\<le> a - (a + 1)\",\n        thin_tac \"a - (a + 1) \\<le> 0\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<in> A; 0 \\<notin> A; ndec_seq A a (a + 1) \\<le> 0;\n        ndec_seq A a (a + 1) \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nleast:\"(A::nat set) \\<noteq> {} \\<Longrightarrow> Nleast A \\<in> A \\<and> (\\<forall>x\\<in>A. (Nleast A) \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    Nleast A \\<in> A \\<and> (\\<forall>x\\<in>A. Nleast A \\<le> x)", "apply (frule ex_Nleast [of \"A\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> Nleast A \\<in> A \\<and>\n                      (\\<forall>x\\<in>A. Nleast A \\<le> x)", "apply (simp add:Nleast_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> (THE a.\n                          a \\<in> A \\<and> (\\<forall>x\\<in>A. a \\<le> x))\n                      \\<in> A \\<and>\n                      (\\<forall>x\\<in>A.\n                          (THE a.\n                              a \\<in> A \\<and>\n                              (\\<forall>x\\<in>A. a \\<le> x))\n                          \\<le> x)", "apply (rule theI')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!x.\n                         x \\<in> A \\<and> (\\<forall>xa\\<in>A. x \\<le> xa)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Lemmas for existence of reduced chain.\""], ["", "(* Later some of these lemmas should be removed. *)"], ["", "lemma jointgd_tool1:\" 0 < i \\<Longrightarrow> 0 \\<le> i - Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < i \\<Longrightarrow> 0 \\<le> i - Suc 0", "by arith"], ["", "lemma jointgd_tool2:\" 0 < i \\<Longrightarrow> i = Suc (i - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < i \\<Longrightarrow> i = Suc (i - Suc 0)", "by arith"], ["", "lemma jointgd_tool3:\"\\<lbrakk>0 < i;  i \\<le> m\\<rbrakk> \\<Longrightarrow> i - Suc 0 \\<le> (m - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; i \\<le> m\\<rbrakk>\n    \\<Longrightarrow> i - Suc 0 \\<le> m - Suc 0", "by arith"], ["", "lemma jointgd_tool4:\"n < i \\<Longrightarrow> i - n = Suc( i - Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < i \\<Longrightarrow> i - n = Suc (i - Suc n)", "by arith"], ["", "lemma pos_prec_less:\"0 < i \\<Longrightarrow> i - Suc 0 < i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < i \\<Longrightarrow> i - Suc 0 < i", "by arith"], ["", "lemma Un_less_Un:\"\\<lbrakk>f \\<in> {j. j \\<le> (Suc n)} \\<rightarrow> (X::'a set set); \n        A \\<subseteq> \\<Union>(f ` {j. j \\<le> (Suc n)}); \n       i \\<in> {j. j \\<le> (Suc n)}; j \\<in> {l. l \\<le> (Suc n)}; i \\<noteq> j \\<and> f i \\<subseteq> f j\\<rbrakk>\n       \\<Longrightarrow> A \\<subseteq> \\<Union>(compose {j. j \\<le> n} f (skip i) ` {j. j \\<le> n})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n     A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n});\n     i \\<in> {j. j \\<le> Suc n}; j \\<in> {l. l \\<le> Suc n};\n     i \\<noteq> j \\<and> f i \\<subseteq> f j\\<rbrakk>\n    \\<Longrightarrow> A \\<subseteq> \\<Union>\n                                     (compose {j. j \\<le> n} f (skip i) `\n{j. j \\<le> n})", "apply (simp add:compose_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n     A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n     j \\<le> Suc n; i \\<noteq> j \\<and> f i \\<subseteq> f j\\<rbrakk>\n    \\<Longrightarrow> A \\<subseteq> (\\<Union>x\\<in>{j. j \\<le> n}.\n  f (skip i x))", "apply (rule subsetI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; i \\<noteq> j \\<and> f i \\<subseteq> f j;\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (frule_tac c = x and A = A and B = \"\\<Union>x\\<in>{j. j \\<le> Suc n}. f x\" in\n        subsetD, assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; i \\<noteq> j \\<and> f i \\<subseteq> f j; x \\<in> A;\n        \\<exists>xa\\<le>Suc n. x \\<in> f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (erule exE, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (case_tac \"xa = i\", simp,\n        frule_tac c = x in subsetD[of \"f i\" \"f j\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); j \\<le> Suc n;\n        x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j; i \\<le> Suc n;\n        x \\<in> f i; xa = i; x \\<in> f j\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)\n 2. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa; xa \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (cut_tac less_linear[of i j], simp, erule disjE,\n        frule less_le_diff[of i j],\n        cut_tac skip_im_Tr2_1[of i n \"j - Suc 0\"],\n        simp, \n        frule eq_elems_eq_val[THEN sym, of \"skip i (j - Suc 0)\" j f],\n        cut_tac a = x in eq_set_inc[of _ \"f j\" \"f (skip i (j - Suc 0))\"],\n              assumption+,\n        frule le_Suc_diff_le[of j n], blast, simp, assumption, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); x \\<in> A;\n        f i \\<subseteq> f j; i \\<le> Suc n; x \\<in> f i; xa = i;\n        x \\<in> f j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)\n 2. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa; xa \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (frule  skip_im_Tr1_2[of i n j], assumption,\n        frule eq_elems_eq_val[THEN sym, of \"skip i j\" j f])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); x \\<in> A;\n        f i \\<subseteq> f j; i \\<le> Suc n; x \\<in> f i; xa = i;\n        x \\<in> f j; j < i; skip i j = j; f j = f (skip i j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)\n 2. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa; xa \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (cut_tac a = x in eq_set_inc[of _ \"f j\" \"f (skip i j)\"],\n              assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); x \\<in> A;\n        f i \\<subseteq> f j; i \\<le> Suc n; x \\<in> f i; xa = i;\n        x \\<in> f j; j < i; skip i j = j; f j = f (skip i j);\n        x \\<in> f (skip i j)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)\n 2. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa; xa \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (frule_tac x = j and y = i and z = \"Suc n\" in less_le_trans,\n        assumption+,\n        frule Suc_less_le[of j n], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa; xa \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (cut_tac x = xa and y = i in less_linear, simp,\n        erule disjE,\n        frule_tac x = xa in skip_im_Tr1_2[of i n], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa; xa \\<noteq> i; xa < i;\n        skip i xa = xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)\n 2. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa; xa \\<noteq> i; i < xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (frule_tac x1 = \"skip i xa\" and y1 = xa and f1 = f in \n                  eq_elems_eq_val[THEN sym],\n        frule_tac a = x and A = \"f xa\" and B = \"f (skip i xa)\" in eq_set_inc,\n        assumption,\n        frule_tac x = xa and y = i and z = \"Suc n\" in less_le_trans,\n        assumption+,\n        frule_tac x = xa and n = n in Suc_less_le, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); i \\<le> Suc n;\n        j \\<le> Suc n; x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j;\n        xa \\<le> Suc n; x \\<in> f xa; xa \\<noteq> i; i < xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply (frule_tac x = i and n = xa in less_le_diff,\n        cut_tac x = \"xa - Suc 0\" and n = n in skip_im_Tr2_1 [of i],\n        simp, assumption,\n        simp,\n        frule_tac x1 = \"skip i (xa - Suc 0)\" and y1 = xa and f1 = f in \n                  eq_elems_eq_val[THEN sym],\n        frule_tac a = x and A = \"f xa\" and B = \"f (skip i (xa - Suc 0))\" in \n        eq_set_inc, assumption,\n        frule_tac x = xa and n = n in le_Suc_diff_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> X;\n        A \\<subseteq> \\<Union> (f ` {j. j \\<le> Suc n}); j \\<le> Suc n;\n        x \\<in> A; i \\<noteq> j; f i \\<subseteq> f j; xa \\<le> Suc n;\n        x \\<in> f xa; i < xa; i \\<le> xa - Suc 0; skip i (xa - Suc 0) = xa;\n        f xa = f (skip i (xa - Suc 0)); x \\<in> f (skip i (xa - Suc 0));\n        xa - Suc 0 \\<le> n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<le>n. x \\<in> f (skip i xa)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \"Lower bounded set of integers\""], ["", "(* In this section. I prove that a lower bounded set of integers\n  has the minimal element *)"], ["", "definition \"Zset = {x. \\<exists>(n::int). x = n}\""], ["", "definition\n  Zleast :: \"int set \\<Rightarrow> int\" where\n  \"Zleast A = (THE a. (a \\<in> A \\<and> (\\<forall>x\\<in>A. a \\<le> x)))\""], ["", "definition\n  LB :: \"[int set, int] \\<Rightarrow> bool\" where\n  \"LB A n = (\\<forall>a\\<in>A. n \\<le> a)\""], ["", "lemma linorder_linear1:\"(m::int) < n \\<or> n \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < n \\<or> n \\<le> m", "apply (subgoal_tac \"m < n \\<or> n = m \\<or> n < m\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. m < n \\<or> n = m \\<or> n < m \\<Longrightarrow> m < n \\<or> n \\<le> m\n 2. m < n \\<or> n = m \\<or> n < m", "apply (case_tac \"m < n\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>m < n \\<or> n = m \\<or> n < m; m < n\\<rbrakk>\n    \\<Longrightarrow> m < n \\<or> n \\<le> m\n 2. \\<lbrakk>m < n \\<or> n = m \\<or> n < m; \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> m < n \\<or> n \\<le> m\n 3. m < n \\<or> n = m \\<or> n < m", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m < n \\<or> n = m \\<or> n < m; \\<not> m < n\\<rbrakk>\n    \\<Longrightarrow> m < n \\<or> n \\<le> m\n 2. m < n \\<or> n = m \\<or> n < m", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. m < n \\<or> n = m \\<or> n < m", "apply (subgoal_tac \"m < n \\<or> m = n \\<or> n < m\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. m < n \\<or> m = n \\<or> n < m \\<Longrightarrow>\n    m < n \\<or> n = m \\<or> n < m\n 2. m < n \\<or> m = n \\<or> n < m", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. m < n \\<or> m = n \\<or> n < m", "apply (simp add:less_linear)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec dec_seq :: \"[int set, int, nat] \\<Rightarrow> int\"\nwhere\n  dec_seq_0: \"dec_seq A a 0 = a\"\n| dec_seq_Suc: \"dec_seq A a (Suc n) = (SOME b. ((b \\<in> A) \\<and> b < (dec_seq A a n)))\""], ["", "lemma dec_seq_mem:\"\\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                        (dec_seq A a n) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> dec_seq A a n \\<in> A", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> dec_seq A a 0 \\<in> A\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<in> A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<in> A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> m \\<le> x);\n        dec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                         \\<in> A", "apply (simp add:not_zle)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        dec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                         \\<in> A", "apply (subgoal_tac \"\\<exists>x\\<in>A. x < (dec_seq A a n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        dec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                         \\<in> A\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        dec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A. x < dec_seq A a n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        dec_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>A. x < dec_seq A a n\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        dec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                         \\<in> A", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n        dec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                         \\<in> A", "apply (thin_tac \"\\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset; dec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                         \\<in> A", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset; dec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa. aa \\<in> A \\<and> aa < dec_seq A a n\n 2. \\<And>n x.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset; dec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < dec_seq A a n;\n        x \\<in> A \\<and> x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset; dec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < dec_seq A a n;\n        x \\<in> A \\<and> x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dec_seqn:\"\\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                       (dec_seq A a (Suc n)) < (dec_seq A a n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> dec_seq A a (Suc n) < dec_seq A a n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m.\n        m \\<in> A \\<longrightarrow>\n        (\\<exists>x\\<in>A. \\<not> m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                      < dec_seq A a n", "apply (frule dec_seq_mem [of \"a\" \"A\" \"n\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m.\n        m \\<in> A \\<longrightarrow>\n        (\\<exists>x\\<in>A. \\<not> m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<nexists>m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\n 2. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m.\n        m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> m \\<le> x);\n     dec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                      < dec_seq A a n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m.\n        m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> m \\<le> x);\n     dec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                      < dec_seq A a n", "apply (simp add:not_zle)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     dec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                      < dec_seq A a n", "apply (subgoal_tac \"\\<exists>x\\<in>A. x < (dec_seq A a n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     dec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                      < dec_seq A a n\n 2. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     dec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>A. x < dec_seq A a n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     dec_seq A a n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>A. x < dec_seq A a n\n 2. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     dec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                      < dec_seq A a n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m);\n     dec_seq A a n \\<in> A; \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                      < dec_seq A a n", "apply (thin_tac \"\\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. x < m)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset; dec_seq A a n \\<in> A;\n     \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> (SOME b. b \\<in> A \\<and> b < dec_seq A a n)\n                      < dec_seq A a n", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset; dec_seq A a n \\<in> A;\n     \\<exists>x\\<in>A. x < dec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>aa. aa \\<in> A \\<and> aa < dec_seq A a n\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset; dec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < dec_seq A a n;\n        x \\<in> A \\<and> x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> x < dec_seq A a n", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset; dec_seq A a n \\<in> A;\n        \\<exists>x\\<in>A. x < dec_seq A a n;\n        x \\<in> A \\<and> x < dec_seq A a n\\<rbrakk>\n       \\<Longrightarrow> x < dec_seq A a n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dec_seqn1:\"\\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                       (dec_seq A a (Suc n)) \\<le> (dec_seq A a n) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> dec_seq A a (Suc n) \\<le> dec_seq A a n - 1", "apply (frule dec_seqn [of \"a\" \"A\" \"n\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n     dec_seq A a (Suc n) < dec_seq A a n\\<rbrakk>\n    \\<Longrightarrow> dec_seq A a (Suc n) \\<le> dec_seq A a n - 1", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lbs_ex_ZleastTr:\"\\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\\<rbrakk> \\<Longrightarrow>\n                        (dec_seq A a n) \\<le> (a - int(n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> dec_seq A a n \\<le> a - int n", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> dec_seq A a 0 \\<le> a - int 0\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<le> a - int n\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<le> a - int n\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply (frule_tac n = n in dec_seqn1[of \"a\" \"A\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<le> a - int n;\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply (subgoal_tac \"dec_seq A a n - 1 \\<le> a - (int n) - 1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<le> a - int n;\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1;\n        dec_seq A a n - 1 \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<le> a - int n;\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a n - 1 \\<le> a - int n - 1", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<le> a - int n;\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a n - 1 \\<le> a - int n - 1\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<le> a - int n;\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1;\n        dec_seq A a n - 1 \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a n \\<le> a - int n;\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1;\n        dec_seq A a n - 1 \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply (thin_tac \"dec_seq A a n \\<le> a - int n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1;\n        dec_seq A a n - 1 \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply (frule_tac x = \"dec_seq A a (Suc n)\" and y = \"dec_seq A a n - 1\" and\n z = \"a - int n - 1\" in order_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1;\n        dec_seq A a n - 1 \\<le> a - int n - 1;\n        dec_seq A a (Suc n) \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply (thin_tac \"\\<not> (\\<exists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        dec_seq A a (Suc n) \\<le> dec_seq A a n - 1;\n        dec_seq A a n - 1 \\<le> a - int n - 1;\n        dec_seq A a (Suc n) \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply (thin_tac \"dec_seq A a (Suc n) \\<le> dec_seq A a n - 1\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        dec_seq A a n - 1 \\<le> a - int n - 1;\n        dec_seq A a (Suc n) \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply (thin_tac \"dec_seq A a n - 1 \\<le> a - int n - 1\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        dec_seq A a (Suc n) \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)", "apply (subgoal_tac \"a - int n - 1 = a - int (Suc n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        dec_seq A a (Suc n) \\<le> a - int n - 1;\n        a - int n - 1 = a - int (Suc n)\\<rbrakk>\n       \\<Longrightarrow> dec_seq A a (Suc n) \\<le> a - int (Suc n)\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        dec_seq A a (Suc n) \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> a - int n - 1 = a - int (Suc n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset;\n        dec_seq A a (Suc n) \\<le> a - int n - 1\\<rbrakk>\n       \\<Longrightarrow> a - int n - 1 = a - int (Suc n)", "apply (thin_tac \"dec_seq A a (Suc n) \\<le> a - int n - 1\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A; A \\<subseteq> Zset\\<rbrakk>\n       \\<Longrightarrow> a - int n - 1 = a - int (Suc n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma big_int_less:\"a - int(nat(abs(a) + abs(N) + 1)) < N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - int (nat (\\<bar>a\\<bar> + \\<bar>N\\<bar> + 1)) < N", "apply (simp add:zabs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lbs_ex_Zleast:\"\\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n\\<rbrakk> \\<Longrightarrow> \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (frule nonempty_ex[of \"A\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n;\n     \\<exists>x. x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (thin_tac \"A \\<noteq> {}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> Zset; LB A n; \\<exists>x. x \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (rename_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>!m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (rule ex_ex1I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\n 2. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> m = y", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (thin_tac \"LB A n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A;\n        \\<forall>x\\<in>A. y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (subgoal_tac \"m \\<le> y\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A; \\<forall>x\\<in>A. y \\<le> x;\n        m \\<le> y\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A;\n        \\<forall>x\\<in>A. y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> m \\<le> y\n 3. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A;\n        \\<forall>x\\<in>A. y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> m \\<le> y\n 2. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A; \\<forall>x\\<in>A. y \\<le> x;\n        m \\<le> y\\<rbrakk>\n       \\<Longrightarrow> m = y\n 3. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A; \\<forall>x\\<in>A. y \\<le> x;\n        m \\<le> y\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (subgoal_tac \"y \\<le> m\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A; \\<forall>x\\<in>A. y \\<le> x;\n        m \\<le> y; y \\<le> m\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A; \\<forall>x\\<in>A. y \\<le> x;\n        m \\<le> y\\<rbrakk>\n       \\<Longrightarrow> y \\<le> m\n 3. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A; \\<forall>x\\<in>A. y \\<le> x;\n        m \\<le> y\\<rbrakk>\n       \\<Longrightarrow> y \\<le> m\n 2. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A; \\<forall>x\\<in>A. y \\<le> x;\n        m \\<le> y; y \\<le> m\\<rbrakk>\n       \\<Longrightarrow> m = y\n 3. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A;\n        \\<forall>x\\<in>A. m \\<le> x; y \\<in> A; \\<forall>x\\<in>A. y \\<le> x;\n        m \\<le> y; y \\<le> m\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (thin_tac \"\\<forall>x\\<in>A. m \\<le> x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A; y \\<in> A;\n        \\<forall>x\\<in>A. y \\<le> x; m \\<le> y; y \\<le> m\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (thin_tac \"\\<forall>x\\<in>A. y \\<le> x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A; m \\<in> A; y \\<in> A;\n        m \\<le> y; y \\<le> m\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (rule contrapos_pp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A\\<rbrakk>\n       \\<Longrightarrow> ?Q17 a\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ?Q17 a", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (frule_tac a = a and A = A and n = \"nat(abs(a) + abs(n) + 1)\" in lbs_ex_ZleastTr, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (subgoal_tac \"a - int(nat(abs(a) + abs(n) + 1)) < n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1));\n        a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> True\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\\<rbrakk>\n       \\<Longrightarrow> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n                         < n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\\<rbrakk>\n       \\<Longrightarrow> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n                         < n\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1));\n        a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (rule big_int_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1));\n        a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (frule_tac x = \"dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\" and y = \"a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\" and z = n in order_le_less_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1));\n        a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (frule_tac a = a and n = \"nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)\" in dec_seq_mem [of _ \"A\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1));\n        a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (thin_tac \"\\<not> (\\<exists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1));\n        a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (thin_tac \"dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n           \\<le> a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (thin_tac \"a - int (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; LB A n; a \\<in> A;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<not> True", "apply (simp add:LB_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; \\<forall>a\\<in>A. n \\<le> a; a \\<in> A;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subgoal_tac \"n \\<le> dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; \\<forall>a\\<in>A. n \\<le> a; a \\<in> A;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) \\<in> A;\n        n \\<le> dec_seq A a\n                 (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; \\<forall>a\\<in>A. n \\<le> a; a \\<in> A;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> dec_seq A a\n                                  (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))", "apply (thin_tac \"\\<forall>a\\<in>A. n \\<le> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; a \\<in> A;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) \\<in> A;\n        n \\<le> dec_seq A a\n                 (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; \\<forall>a\\<in>A. n \\<le> a; a \\<in> A;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> dec_seq A a\n                                  (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))", "apply (simp add:not_zle)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> Zset; \\<forall>a\\<in>A. n \\<le> a; a \\<in> A;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1)) < n;\n        dec_seq A a (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> dec_seq A a\n                                  (nat (\\<bar>a\\<bar> + \\<bar>n\\<bar> + 1))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Zleast:\"\\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n\\<rbrakk> \\<Longrightarrow> Zleast A \\<in> A \\<and>\n               (\\<forall>x\\<in>A. (Zleast A) \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n\\<rbrakk>\n    \\<Longrightarrow> Zleast A \\<in> A \\<and>\n                      (\\<forall>x\\<in>A. Zleast A \\<le> x)", "apply (frule lbs_ex_Zleast [of \"A\" \"n\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n;\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> Zleast A \\<in> A \\<and>\n                      (\\<forall>x\\<in>A. Zleast A \\<le> x)", "apply (simp add:Zleast_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n;\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> (THE a.\n                          a \\<in> A \\<and> (\\<forall>x\\<in>A. a \\<le> x))\n                      \\<in> A \\<and>\n                      (\\<forall>x\\<in>A.\n                          (THE a.\n                              a \\<in> A \\<and>\n                              (\\<forall>x\\<in>A. a \\<le> x))\n                          \\<le> x)", "apply (rule theI')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; A \\<subseteq> Zset; LB A n;\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!x.\n                         x \\<in> A \\<and> (\\<forall>xa\\<in>A. x \\<le> xa)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_convert1:\"\\<lbrakk> a = c; a < b \\<rbrakk> \\<Longrightarrow> c < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = c; a < b\\<rbrakk> \\<Longrightarrow> c < b", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma less_convert2:\"\\<lbrakk>a = b; b < c\\<rbrakk> \\<Longrightarrow> a < c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = b; b < c\\<rbrakk> \\<Longrightarrow> a < c", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \\<open>Augmented integer: integer and \\<open>\\<infinity>-\\<infinity>\\<close>\\<close>"], ["", "definition\n  zag :: \"(int * int) set\" where\n  \"zag = {(x,y) | x y. x * y = (0::int) \\<and> (y = -1 \\<or> y = 0 \\<or> y = 1)}\""], ["", "definition\n  zag_pl::\"[(int * int), (int * int)] \\<Rightarrow> (int * int)\" where\n  \"zag_pl x y == if (snd x + snd y) = 2 then (0, 1)\n                 else if (snd x + snd y) = 1 then (0, 1)\n                 else if (snd x + snd y) = 0 then (fst x + fst y, 0)\n                 else if (snd x + snd y) = -1 then (0, -1)\n                 else if (snd x + snd y) = -2 then (0, -1) else undefined\""], ["", "definition\n  zag_t :: \"[(int * int), (int * int)] \\<Rightarrow> (int * int)\" where\n  \"zag_t x y = (if (snd x)*(snd y) = 0 then\n                     (if 0 < (fst x)*(snd y) + (snd x)*(fst y) then (0,1)\n                           else (if (fst x)*(snd y) + (snd x)*(fst y) = 0\n                               then ((fst x)*(fst y), 0) else (0, -1)))\n            else (if 0 < (snd x)*(snd y) then (0, 1) else (0, -1)))\""], ["", "definition \"Ainteg = zag\""], ["", "typedef ant = Ainteg\n  morphisms Rep_Ainteg Abs_Ainteg"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> Ainteg", "unfolding Ainteg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> zag", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ?x \\<in> zag", "show \"(1, 0) \\<in> zag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1, 0) \\<in> zag", "unfolding zag_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1, 0)\n    \\<in> {(x, y) |x y. x * y = 0 \\<and> (y = - 1 \\<or> y = 0 \\<or> y = 1)}", "by auto"], ["proof (state)\nthis:\n  (1, 0) \\<in> zag\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  ant :: \"int \\<Rightarrow> ant\" where\n  \"ant m = Abs_Ainteg( (m, 0))\""], ["", "definition\n  tna :: \"ant \\<Rightarrow> int\" where\n  \"tna z = (if Rep_Ainteg(z) \\<noteq> (0,1) \\<and> Rep_Ainteg(z) \\<noteq> (0,-1) then\n            fst (Rep_Ainteg(z)) else undefined)\""], ["", "instantiation ant :: \"{zero, one, plus, uminus, minus, times, ord}\"\nbegin"], ["", "definition\n  Zero_ant_def  : \"0 == ant 0\""], ["", "definition\n  One_ant_def   : \"1 == ant 1\""], ["", "definition\n  add_ant_def:\n   \"z + w ==\n       Abs_Ainteg (zag_pl (Rep_Ainteg z) (Rep_Ainteg w))\""], ["", "definition\n  minus_ant_def : \"- z == \n         Abs_Ainteg((- (fst (Rep_Ainteg z)), - (snd (Rep_Ainteg z))))\""], ["", "definition\n    diff_ant_def:  \"z - (w::ant) == z + (-w)\""], ["", "definition \n    mult_ant_def:\n      \"z * w ==\n       Abs_Ainteg (zag_t (Rep_Ainteg z) (Rep_Ainteg w))\""], ["", "definition\n    le_ant_def:\n     \"(z::ant) \\<le> w == if (snd (Rep_Ainteg w)) = 1 then True \n       else (if (snd (Rep_Ainteg w)) = 0 then (if (snd (Rep_Ainteg z)) = 1 \n       then False else (if (snd (Rep_Ainteg z)) = 0 then \n        (fst (Rep_Ainteg z)) \\<le> (fst (Rep_Ainteg w))  else True))\n          else (if snd (Rep_Ainteg z) = -1 then True else False))\""], ["", "definition\n    less_ant_def: \"((z::ant) < (w::ant)) == (z \\<le> w \\<and> z \\<noteq> w)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. (OFCLASS(ant, minus_class) &&&\n     OFCLASS(ant, one_class) &&& OFCLASS(ant, plus_class)) &&&\n    (OFCLASS(ant, times_class) &&& OFCLASS(ant, uminus_class)) &&&\n    OFCLASS(ant, zero_class) &&& OFCLASS(ant, ord_class)", ".."], ["", "end"], ["", "definition\n  inf_ant :: ant  (\"\\<infinity>\") where\n  \"\\<infinity> = Abs_Ainteg((0,1))\""], ["", "definition\n  an :: \"nat \\<Rightarrow> ant\" where\n  \"an m = ant (int m)\""], ["", "definition\n  na :: \"ant \\<Rightarrow> nat\" where\n  \"na x = (if (x < 0) then 0 else \n           if x \\<noteq> \\<infinity> then (nat (tna x)) else undefined)\""], ["", "definition\n  UBset :: \"ant \\<Rightarrow> ant set\" where\n  \"UBset z = {(x::ant).  x \\<le> z}\""], ["", "definition\n   LBset :: \"ant \\<Rightarrow> ant set\" where\n  \"LBset z = {(x::ant). z \\<le> x}\""], ["", "lemma ant_z_in_Ainteg:\"(z::int, 0) \\<in> Ainteg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z, 0) \\<in> Ainteg", "apply (simp add:Ainteg_def zag_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ant_inf_in_Ainteg:\"((0::int), 1) \\<in> Ainteg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, 1) \\<in> Ainteg", "apply (simp add:Ainteg_def zag_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ant_minf_in_Ainteg:\"((0::int), -1) \\<in> Ainteg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, - 1) \\<in> Ainteg", "apply (simp add:Ainteg_def zag_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ant_0_in_Ainteg:\"((0::int), 0) \\<in> Ainteg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, 0) \\<in> Ainteg", "apply (simp add:Ainteg_def zag_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma an_0[simp]:\"an 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an 0 = 0", "by (simp add:an_def Zero_ant_def)"], ["", "lemma an_1[simp]:\"an 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an 1 = 1", "by (simp add:an_def One_ant_def)"], ["", "lemma mem_ant:\"(a::ant) = -\\<infinity> \\<or> (\\<exists>(z::int). a = ant z) \\<or> a = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = - \\<infinity> \\<or> (\\<exists>z. a = ant z) \\<or> a = \\<infinity>", "apply (case_tac \"a = -\\<infinity> \\<or> a = \\<infinity>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. a = - \\<infinity> \\<or> a = \\<infinity> \\<Longrightarrow>\n    a = - \\<infinity> \\<or> (\\<exists>z. a = ant z) \\<or> a = \\<infinity>\n 2. \\<not> (a = - \\<infinity> \\<or> a = \\<infinity>) \\<Longrightarrow>\n    a = - \\<infinity> \\<or> (\\<exists>z. a = ant z) \\<or> a = \\<infinity>", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (a = - \\<infinity> \\<or> a = \\<infinity>) \\<Longrightarrow>\n    a = - \\<infinity> \\<or> (\\<exists>z. a = ant z) \\<or> a = \\<infinity>", "apply (simp, simp add:ant_def,\n       cut_tac Rep_Ainteg[of \"a\"],\n       simp add:Ainteg_def zag_def,\n       erule conjE, simp add:inf_ant_def,\n       simp add:minus_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>case Rep_Ainteg a of\n             (x, y) \\<Rightarrow>\n               (x = 0 \\<or> y = 0) \\<and> (y = - 1 \\<or> y = 0 \\<or> y = 1);\n     a \\<noteq> Abs_Ainteg (0, - 1); a \\<noteq> Abs_Ainteg (0, 1);\n     (0, 1) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1); a \\<noteq> Abs_Ainteg (0, 1);\n     (0, 1) \\<in> Ainteg; Rep_Ainteg a = (0, - 1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)\n 2. \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1); a \\<noteq> Abs_Ainteg (0, 1);\n     (0, 1) \\<in> Ainteg; Rep_Ainteg a = (0, 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)\n 3. \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1); a \\<noteq> Abs_Ainteg (0, 1);\n     (0, 1) \\<in> Ainteg; Rep_Ainteg a = (0, 1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)\n 4. \\<And>x.\n       \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1);\n        a \\<noteq> Abs_Ainteg (0, 1); (0, 1) \\<in> Ainteg;\n        Rep_Ainteg a = (x, 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)", "apply (cut_tac Rep_Ainteg[of \"a\"],\n       subgoal_tac \"Abs_Ainteg (Rep_Ainteg a) = Abs_Ainteg ((0,-1))\",\n       thin_tac \"Rep_Ainteg a = (0, -1)\",\n       simp add:Rep_Ainteg_inverse, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1); a \\<noteq> Abs_Ainteg (0, 1);\n     (0, 1) \\<in> Ainteg; Rep_Ainteg a = (0, 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)\n 2. \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1); a \\<noteq> Abs_Ainteg (0, 1);\n     (0, 1) \\<in> Ainteg; Rep_Ainteg a = (0, 1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)\n 3. \\<And>x.\n       \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1);\n        a \\<noteq> Abs_Ainteg (0, 1); (0, 1) \\<in> Ainteg;\n        Rep_Ainteg a = (x, 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)", "apply (cut_tac Rep_Ainteg[of \"a\"],\n       subgoal_tac \"Abs_Ainteg (Rep_Ainteg a) = Abs_Ainteg ((0,0))\",\n       thin_tac \"Rep_Ainteg a = (0, 0)\",\n       simp add:Rep_Ainteg_inverse, blast, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1); a \\<noteq> Abs_Ainteg (0, 1);\n     (0, 1) \\<in> Ainteg; Rep_Ainteg a = (0, 1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)\n 2. \\<And>x.\n       \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1);\n        a \\<noteq> Abs_Ainteg (0, 1); (0, 1) \\<in> Ainteg;\n        Rep_Ainteg a = (x, 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)", "apply (cut_tac Rep_Ainteg[of \"a\"],\n       subgoal_tac \"Abs_Ainteg (Rep_Ainteg a) = Abs_Ainteg ((0,1))\",\n       thin_tac \"Rep_Ainteg a = (0, 1)\",\n       simp add:Rep_Ainteg_inverse, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<noteq> Abs_Ainteg (0, - 1);\n        a \\<noteq> Abs_Ainteg (0, 1); (0, 1) \\<in> Ainteg;\n        Rep_Ainteg a = (x, 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>z. a = Abs_Ainteg (z, 0)", "apply (cut_tac Rep_Ainteg[of \"a\"],\n       subgoal_tac \"Abs_Ainteg (Rep_Ainteg a) = Abs_Ainteg ((x,0))\",\n       thin_tac \"Rep_Ainteg a = (x, 0)\",\n       simp add:Rep_Ainteg_inverse, blast, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma minf:\"-\\<infinity> = Abs_Ainteg((0,-1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> = Abs_Ainteg (0, - 1)", "apply (simp add:inf_ant_def minus_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma z_neq_inf[simp]:\"(ant z) \\<noteq> \\<infinity> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z \\<noteq> \\<infinity>", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z = \\<infinity> \\<Longrightarrow> False", "apply (simp add:ant_def inf_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Ainteg (z, 0) = Abs_Ainteg (0, 1) \\<Longrightarrow> False", "apply (subgoal_tac \"Rep_Ainteg (Abs_Ainteg (z,0)) = \n                      Rep_Ainteg (Abs_Ainteg (0,1))\",\n       thin_tac \"Abs_Ainteg (z, 0) = Abs_Ainteg (0, 1)\",\n       cut_tac ant_z_in_Ainteg[of \"z\"],\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Ainteg (z, 0) = Abs_Ainteg (0, 1) \\<Longrightarrow>\n    Rep_Ainteg (Abs_Ainteg (z, 0)) = Rep_Ainteg (Abs_Ainteg (0, 1))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma z_neq_minf[simp]:\"(ant z) \\<noteq> -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z \\<noteq> - \\<infinity>", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z = - \\<infinity> \\<Longrightarrow> False", "apply (subgoal_tac \"ant (-z) = \\<infinity>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ant z = - \\<infinity>; ant (- z) = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. ant z = - \\<infinity> \\<Longrightarrow> ant (- z) = \\<infinity>", "apply (cut_tac z_neq_inf[of \"- z\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z = - \\<infinity> \\<Longrightarrow> ant (- z) = \\<infinity>", "apply (simp add:ant_def inf_ant_def minus_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Ainteg (z, 0) =\n    Abs_Ainteg\n     (- fst (Rep_Ainteg (Abs_Ainteg (0, 1))),\n      - snd (Rep_Ainteg (Abs_Ainteg (0, 1)))) \\<Longrightarrow>\n    Abs_Ainteg (- z, 0) = Abs_Ainteg (0, 1)", "apply (cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Abs_Ainteg (z, 0) = Abs_Ainteg (0, - 1);\n     (0, 1) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (- z, 0) = Abs_Ainteg (0, 1)", "apply (subgoal_tac \"- Abs_Ainteg (z, 0) = - Abs_Ainteg (0, -1)\",\n       thin_tac \"Abs_Ainteg (z, 0) = Abs_Ainteg (0, -1)\",\n       simp add:minus_ant_def,\n       cut_tac ant_z_in_Ainteg[of \"z\"],\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Abs_Ainteg (z, 0) = Abs_Ainteg (0, - 1);\n     (0, 1) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> - Abs_Ainteg (z, 0) = - Abs_Ainteg (0, - 1)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma minf_neq_inf[simp]:\"-\\<infinity> \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> \\<noteq> \\<infinity>", "apply (cut_tac ant_inf_in_Ainteg,\n       simp add:inf_ant_def minus_ant_def Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, 1) \\<in> Ainteg \\<Longrightarrow>\n    Abs_Ainteg (0, - 1) \\<noteq> Abs_Ainteg (0, 1)", "apply (rule contrapos_pp, simp+,\n       subgoal_tac \"Rep_Ainteg (Abs_Ainteg (0,-1)) = \n                     Rep_Ainteg (Abs_Ainteg (0,1))\",\n       thin_tac \"Abs_Ainteg (0, -1) = Abs_Ainteg (0, 1)\",\n       cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(0, 1) \\<in> Ainteg;\n     Abs_Ainteg (0, - 1) = Abs_Ainteg (0, 1)\\<rbrakk>\n    \\<Longrightarrow> Rep_Ainteg (Abs_Ainteg (0, - 1)) =\n                      Rep_Ainteg (Abs_Ainteg (0, 1))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_ipi[simp]:\"\\<infinity> + \\<infinity> = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> + \\<infinity> = \\<infinity>", "apply (simp add:add_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse,\n       simp add:zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_zpi[simp]:\"(ant z) + \\<infinity>  = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z + \\<infinity> = \\<infinity>", "apply (simp add:add_ant_def inf_ant_def ant_def,\n       cut_tac ant_z_in_Ainteg[of \"z\"],\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse,\n       simp add:zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_ipz[simp]:\" \\<infinity> + (ant z) = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> + ant z = \\<infinity>", "apply (simp add:add_ant_def inf_ant_def ant_def,\n       cut_tac ant_z_in_Ainteg[of \"z\"],\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse,\n       simp add:zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_zpz:\"(ant m) + (ant n) = ant (m + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant m + ant n = ant (m + n)", "apply (simp add:add_ant_def inf_ant_def ant_def,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       cut_tac ant_z_in_Ainteg[of \"n\"],\n       simp add:Abs_Ainteg_inverse,\n       simp add:zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_mpi[simp]:\"-\\<infinity> + \\<infinity>  = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> + \\<infinity> = 0", "apply (simp add:add_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:minus_ant_def,\n       simp add:Abs_Ainteg_inverse,\n       simp add:Zero_ant_def ant_def zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_ipm[simp]:\"\\<infinity> + (-\\<infinity>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> + - \\<infinity> = 0", "apply (simp add:add_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:minus_ant_def,\n       simp add:Abs_Ainteg_inverse,\n       simp add:Zero_ant_def ant_def zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_mpm[simp]:\"-\\<infinity> + (-\\<infinity>) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> + - \\<infinity> = - \\<infinity>", "apply (simp add:add_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:minus_ant_def,\n       simp add:Abs_Ainteg_inverse,\n       simp add:Zero_ant_def ant_def zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_mpz[simp]:\"-\\<infinity> + (ant m) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> + ant m = - \\<infinity>", "apply (simp add:add_ant_def minus_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse,\n       simp add:ant_def,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg;\n     (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_pl (0, - 1) (m, 0)) =\n                      Abs_Ainteg (0, - 1)", "apply (simp add:zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_zpm[simp]:\"(ant m) + (-\\<infinity>) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant m + - \\<infinity> = - \\<infinity>", "apply (simp add:add_ant_def minus_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse,\n       simp add:ant_def,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg;\n     (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_pl (m, 0) (0, - 1)) =\n                      Abs_Ainteg (0, - 1)", "apply (simp add:zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_mdi[simp]:\"-\\<infinity> - \\<infinity>  = - \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> - \\<infinity> = - \\<infinity>", "apply (simp add:diff_ant_def minus_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, 1) \\<in> Ainteg \\<Longrightarrow>\n    Abs_Ainteg (0, - 1) + Abs_Ainteg (0, - 1) = Abs_Ainteg (0, - 1)", "apply (simp add:add_ant_def,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse, simp add:zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_zdz:\"(ant m) - (ant n) = ant (m - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant m - ant n = ant (m - n)", "apply (simp add:diff_ant_def minus_ant_def ant_def,\n       cut_tac ant_z_in_Ainteg[of \"n\"],\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (n, 0) \\<in> Ainteg \\<Longrightarrow>\n    Abs_Ainteg (m, 0) + Abs_Ainteg (- n, 0) = Abs_Ainteg (m - n, 0)", "apply (simp add:add_ant_def,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       cut_tac ant_z_in_Ainteg[of \"-n\"],\n       simp add:Abs_Ainteg_inverse zag_pl_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_i_i[simp]:\"\\<infinity> * \\<infinity> = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> * \\<infinity> = \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0, 1) \\<in> Ainteg \\<Longrightarrow>\n    Abs_Ainteg (zag_t (0, 1) (0, 1)) = Abs_Ainteg (0, 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_0_i[simp]:\"0 * \\<infinity> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 * \\<infinity> = 0", "by (simp add:mult_ant_def inf_ant_def Zero_ant_def, simp add:ant_def,\n    cut_tac ant_inf_in_Ainteg, cut_tac ant_0_in_Ainteg,\n       simp add:Abs_Ainteg_inverse, simp add:zag_t_def)"], ["", "lemma a_i_0[simp]:\"\\<infinity> * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> * 0 = 0", "by (simp add:mult_ant_def inf_ant_def Zero_ant_def, simp add:ant_def,\n    cut_tac ant_inf_in_Ainteg, cut_tac ant_0_in_Ainteg,\n       simp add:Abs_Ainteg_inverse, simp add:zag_t_def)"], ["", "lemma a_0_m[simp]:\"0 * (-\\<infinity>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 * - \\<infinity> = 0", "by (simp add:mult_ant_def inf_ant_def Zero_ant_def, simp add:ant_def,\n    cut_tac ant_inf_in_Ainteg, cut_tac ant_0_in_Ainteg, \n       simp add:Abs_Ainteg_inverse, simp add:zag_t_def)"], ["", "lemma a_m_0[simp]:\"(-\\<infinity>) * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> * 0 = 0", "by (simp add:mult_ant_def inf_ant_def Zero_ant_def, simp add:ant_def,\n    cut_tac ant_inf_in_Ainteg, cut_tac ant_0_in_Ainteg, \n       simp add:Abs_Ainteg_inverse, simp add:zag_t_def)"], ["", "lemma a_m_i[simp]:\"(-\\<infinity>) * \\<infinity> = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> * \\<infinity> = - \\<infinity>", "by (simp add:mult_ant_def inf_ant_def minus_ant_def,\n       cut_tac ant_inf_in_Ainteg, cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse, simp add:zag_t_def)"], ["", "lemma a_i_m[simp]:\"\\<infinity> * (-\\<infinity>) = - \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> * - \\<infinity> = - \\<infinity>", "by (simp add:mult_ant_def inf_ant_def minus_ant_def,\n       cut_tac ant_inf_in_Ainteg, cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse, simp add:zag_t_def)"], ["", "lemma a_pos_i[simp]:\"0 < m \\<Longrightarrow> (ant m) * \\<infinity> = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> ant m * \\<infinity> = \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def ant_def, \n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < m; (0, 1) \\<in> Ainteg; (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (m, 0) (0, 1)) = Abs_Ainteg (0, 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_i_pos[simp]:\"0 < m \\<Longrightarrow> \\<infinity> * (ant m) = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> \\<infinity> * ant m = \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def ant_def, \n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < m; (0, 1) \\<in> Ainteg; (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (0, 1) (m, 0)) = Abs_Ainteg (0, 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_neg_i[simp]:\"m < 0 \\<Longrightarrow> (ant m) * \\<infinity> = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < 0 \\<Longrightarrow> ant m * \\<infinity> = - \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def ant_def, \n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       simp add:minus_ant_def,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < 0; (0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg;\n     (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (m, 0) (0, 1)) = Abs_Ainteg (0, - 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_i_neg[simp]:\"m < 0 \\<Longrightarrow> \\<infinity> * (ant m) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < 0 \\<Longrightarrow> \\<infinity> * ant m = - \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def ant_def, \n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       simp add:minus_ant_def,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < 0; (0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg;\n     (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (0, 1) (m, 0)) = Abs_Ainteg (0, - 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_z_z:\"(ant m) * (ant n) = ant (m*n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant m * ant n = ant (m * n)", "apply (simp add:mult_ant_def ant_def, \n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       cut_tac ant_z_in_Ainteg[of \"n\"],\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(m, 0) \\<in> Ainteg; (n, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (m, 0) (n, 0)) =\n                      Abs_Ainteg (m * n, 0)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_pos_m[simp]:\"0 < m \\<Longrightarrow> (ant m) * (-\\<infinity>) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> ant m * - \\<infinity> = - \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def minus_ant_def ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac ant_minf_in_Ainteg,\n      cut_tac ant_z_in_Ainteg[of \"m\"],\n      simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < m; (0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg;\n     (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (m, 0) (0, - 1)) =\n                      Abs_Ainteg (0, - 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_m_pos[simp]:\"0 < m \\<Longrightarrow> (-\\<infinity>) * (ant m) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> - \\<infinity> * ant m = - \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def minus_ant_def ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac ant_minf_in_Ainteg,\n      cut_tac ant_z_in_Ainteg[of \"m\"],\n      simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < m; (0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg;\n     (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (0, - 1) (m, 0)) =\n                      Abs_Ainteg (0, - 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_neg_m[simp]:\"m < 0 \\<Longrightarrow> (ant m) * (-\\<infinity>) = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < 0 \\<Longrightarrow> ant m * - \\<infinity> = \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def minus_ant_def ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac ant_minf_in_Ainteg,\n      cut_tac ant_z_in_Ainteg[of \"m\"],\n      simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < 0; (0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg;\n     (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (m, 0) (0, - 1)) = Abs_Ainteg (0, 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma neg_a_m[simp]:\"m < 0 \\<Longrightarrow> (-\\<infinity>) * (ant m) = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < 0 \\<Longrightarrow> - \\<infinity> * ant m = \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def minus_ant_def ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac ant_minf_in_Ainteg,\n      cut_tac ant_z_in_Ainteg[of \"m\"],\n      simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < 0; (0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg;\n     (m, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (0, - 1) (m, 0)) = Abs_Ainteg (0, 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_m_m[simp]:\"(-\\<infinity>) * (-\\<infinity>) = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> * - \\<infinity> = \\<infinity>", "apply (simp add:mult_ant_def inf_ant_def minus_ant_def ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac ant_minf_in_Ainteg,\n      simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(0, 1) \\<in> Ainteg; (0, - 1) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (zag_t (0, - 1) (0, - 1)) =\n                      Abs_Ainteg (0, 1)", "apply (simp add:zag_t_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inj_on_Abs_Ainteg:\"inj_on Abs_Ainteg Ainteg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on Abs_Ainteg Ainteg", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>Ainteg.\n       \\<forall>y\\<in>Ainteg.\n          Abs_Ainteg x = Abs_Ainteg y \\<longrightarrow> x = y", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> Ainteg; y \\<in> Ainteg\\<rbrakk>\n       \\<Longrightarrow> Abs_Ainteg x = Abs_Ainteg y \\<longrightarrow> x = y", "apply (rule impI,\n       subgoal_tac \"Rep_Ainteg (Abs_Ainteg x) = Rep_Ainteg (Abs_Ainteg y)\",\n       thin_tac \"Abs_Ainteg x = Abs_Ainteg y\",\n       simp add:Abs_Ainteg_inverse, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma an_Suc:\"an (Suc n) = an n + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an (Suc n) = an n + 1", "apply (subst an_1[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. an (Suc n) = an n + an 1", "apply (simp del:an_1 add:an_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ant (1 + int n) = ant (int n) + ant 1", "apply (simp del:an_1 add:a_zpz, simp add:add.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aeq_zeq [iff]: \"(ant m = ant n) = (m = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ant m = ant n) = (m = n)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ant m = ant n \\<Longrightarrow> m = n\n 2. m = n \\<Longrightarrow> ant m = ant n", "apply (subgoal_tac \"Rep_Ainteg (ant m) = Rep_Ainteg (ant n)\",\n       thin_tac \"ant m = ant n\",\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       cut_tac ant_z_in_Ainteg[of \"n\"],\n       simp add:ant_def Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ant m = ant n \\<Longrightarrow> Rep_Ainteg (ant m) = Rep_Ainteg (ant n)\n 2. m = n \\<Longrightarrow> ant m = ant n", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aminus:\"- ant m = ant (-m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - ant m = ant (- m)", "apply (simp add:ant_def minus_ant_def,\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aminusZero:\"- ant 0 = ant 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - ant 0 = ant 0", "apply (simp add:aminus)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma  ant_0: \"ant 0 = (0::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant 0 = 0", "by (simp add: Zero_ant_def)"], ["", "lemma inf_neq_0[simp]:\"\\<infinity> \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> \\<noteq> 0", "apply (cut_tac z_neq_inf[of \"0\"], frule not_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ant 0 \\<noteq> \\<infinity>; \\<infinity> \\<noteq> ant 0\\<rbrakk>\n    \\<Longrightarrow> \\<infinity> \\<noteq> 0", "apply (simp add:ant_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zero_neq_inf[simp]:\"0 \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> \\<infinity>", "by (cut_tac inf_neq_0, frule not_sym, simp)"], ["", "lemma minf_neq_0[simp]:\"-\\<infinity> \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> \\<noteq> 0", "apply (cut_tac z_neq_minf[of \"0\"], frule not_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ant 0 \\<noteq> - \\<infinity>;\n     - \\<infinity> \\<noteq> ant 0\\<rbrakk>\n    \\<Longrightarrow> - \\<infinity> \\<noteq> 0", "apply (simp add:ant_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zero_neq_minf[simp]:\"0 \\<noteq> -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> - \\<infinity>", "by (cut_tac minf_neq_0, frule not_sym, simp)"], ["", "lemma a_minus_zero[simp]:\"-(0::ant) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 0 = 0", "by (cut_tac aminusZero, simp add:ant_0)"], ["", "lemma a_minus_minus: \"- (- z) = (z::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (- z) = z", "apply (cut_tac mem_ant[of \"z\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. z = - \\<infinity> \\<or>\n    (\\<exists>za. z = ant za) \\<or> z = \\<infinity> \\<Longrightarrow>\n    - (- z) = z", "apply (erule disjE, simp add:minf, simp add: minus_ant_def,\n       cut_tac ant_minf_in_Ainteg,\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>za. z = ant za) \\<or> z = \\<infinity> \\<Longrightarrow>\n    - (- z) = z", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>za. z = ant za \\<Longrightarrow> - (- z) = z\n 2. z = \\<infinity> \\<Longrightarrow> - (- z) = z", "apply (erule exE, simp add:aminus)"], ["proof (prove)\ngoal (1 subgoal):\n 1. z = \\<infinity> \\<Longrightarrow> - (- z) = z", "apply (simp add:minf, simp add: minus_ant_def,\n       cut_tac ant_minf_in_Ainteg,\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse,\n       simp add:inf_ant_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aminus_0: \"- (- 0) = (0::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (- 0) = 0", "apply (simp add:a_minus_minus)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a_a_z_0:\"\\<lbrakk> 0 < z; a * ant z = 0\\<rbrakk> \\<Longrightarrow> a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < z; a * ant z = 0\\<rbrakk> \\<Longrightarrow> a = 0", "by (rule contrapos_pp, simp+, cut_tac mem_ant[of \"a\"], erule disjE, \n       simp, erule disjE, erule exE, simp add:a_z_z, \n       simp only:ant_0[THEN sym], simp, simp)"], ["", "lemma adiv_eq:\"\\<lbrakk> z \\<noteq> 0; a * (ant z) = b * (ant z)\\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> 0; a * ant z = b * ant z\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (cut_tac mem_ant[of \"a\"], cut_tac mem_ant[of \"b\"],\n      (erule disjE)+, simp, erule disjE, erule exE,\n       cut_tac less_linear[of \"z\" \"0\"], erule disjE, simp add:a_z_z,\n       frule sym, thin_tac \"\\<infinity> = ant (za * z)\", simp,\n       simp add:a_z_z, frule sym, thin_tac \"- \\<infinity> = ant (za * z)\", simp,\n       cut_tac less_linear[of \"z\" \"0\"], erule disjE, simp,\n       simp, erule disjE, erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>za.\n       \\<lbrakk>z \\<noteq> 0; a * ant z = b * ant z;\n        b = - \\<infinity> \\<or>\n        (\\<exists>z. b = ant z) \\<or> b = \\<infinity>;\n        a = ant za\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<lbrakk>z \\<noteq> 0; a * ant z = b * ant z;\n     b = - \\<infinity> \\<or> (\\<exists>z. b = ant z) \\<or> b = \\<infinity>;\n     a = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (erule disjE,\n        cut_tac less_linear[of \"z\" \"0\"], simp,\n        erule disjE, simp add:a_z_z, simp add:a_z_z,\n        erule disjE, erule exE, simp add:a_z_z,\n        cut_tac less_linear[of \"z\" \"0\"], simp,\n        erule disjE, simp add:a_z_z, simp add:a_z_z,\n        erule disjE,\n        cut_tac less_linear[of \"z\" \"0\"], simp,\n        erule disjE, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> 0; \\<infinity> * ant z = b * ant z; a = \\<infinity>;\n     (\\<exists>z. b = ant z) \\<or> b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> \\<infinity> = b", "apply (erule disjE, erule exE, simp add:a_z_z,\n        cut_tac less_linear[of \"z\" \"0\"], simp, erule disjE, simp,\n        frule sym, thin_tac \"- \\<infinity> = ant (za * z)\", simp,\n        simp, frule sym, thin_tac \"\\<infinity> = ant (za * z)\", simp,\n        cut_tac less_linear[of \"z\" \"0\"], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aminus_add_distrib: \"- (z + w) = (- z) + (- w::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (z + w) = - z + - w", "apply (cut_tac mem_ant[of \"z\"], cut_tac mem_ant[of \"w\"],\n       (erule disjE)+, simp add:a_minus_minus,\n       erule disjE, erule exE, simp,\n       simp add:a_minus_minus aminus, simp add:a_minus_minus)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w = - \\<infinity> \\<or>\n             (\\<exists>z. w = ant z) \\<or> w = \\<infinity>;\n     (\\<exists>za. z = ant za) \\<or> z = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> - (z + w) = - z + - w", "apply ((erule disjE)+, erule exE, \n       simp add:a_minus_minus, simp add:aminus,\n       simp add:a_minus_minus)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<exists>za. z = ant za) \\<or> z = \\<infinity>;\n     (\\<exists>z. w = ant z) \\<or> w = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> - (z + w) = - z + - w", "apply ((erule disjE)+, (erule exE)+, simp add:a_zpz aminus,\n      erule exE, simp add:aminus,\n      erule disjE, erule exE, simp add:aminus, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_commute:\"(x::ant) + y = y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = y + x", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = - \\<infinity> \\<or>\n             (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or>\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y = y + x", "apply (erule disjE, erule disjE, simp,\n      erule disjE, erule exE, simp+,\n      (erule disjE)+, erule exE, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y = y + x", "apply ((erule disjE)+, (erule exE)+, simp add:a_zpz, \n      erule exE, simp, erule disjE, erule exE, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  aug_inf :: \"ant set\"  (\"Z\\<^sub>\\<infinity>\") where\n  \"Z\\<^sub>\\<infinity> = {(z::ant). z \\<noteq> -\\<infinity> }\""], ["", "definition\n  aug_minf :: \"ant set\"  (\"Z\\<^sub>-\\<^sub>\\<infinity>\") where\n  \"Z\\<^sub>-\\<^sub>\\<infinity> = {(z::ant). z \\<noteq> \\<infinity> }\""], ["", "lemma z_in_aug_inf:\"ant z \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z \\<in> Z\\<^sub>\\<infinity>", "apply (simp add:aug_inf_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Zero_in_aug_inf:\"0 \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> Z\\<^sub>\\<infinity>", "by (simp only:Zero_ant_def, simp add: aug_inf_def)"], ["", "lemma z_in_aug_minf:\"ant z \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "by (simp add:aug_minf_def)"], ["", "lemma mem_aug_minf:\"a \\<in> Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow> a = - \\<infinity> \\<or> (\\<exists>z. a = ant z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow>\n    a = - \\<infinity> \\<or> (\\<exists>z. a = ant z)", "by (cut_tac mem_ant[of a], simp add:aug_minf_def)"], ["", "lemma minus_an_in_aug_minf:\" - an n \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - an n \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "apply (simp add:an_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - ant (int n) \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "apply (simp add:aminus)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ant (- int n) \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "apply (simp add:z_in_aug_minf)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Zero_in_aug_minf:\"0 \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "by (simp add:Zero_ant_def aug_minf_def)"], ["", "lemma aadd_assoc_i: \"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>; z \\<in> Z\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> (x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>;\n     z \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y + z = x + (y + z)", "apply (cut_tac mem_ant[of \"x\"], \n       cut_tac mem_ant[of \"y\"], \n       cut_tac mem_ant[of \"z\"], simp add:aug_inf_def,\n      (erule disjE)+, (erule exE)+, (simp add:a_zpz)+,\n      (erule exE)+, simp add:a_zpz)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> - \\<infinity>; y \\<noteq> - \\<infinity>;\n     z \\<noteq> - \\<infinity>;\n     (\\<exists>za. z = ant za) \\<or> z = \\<infinity>; \\<exists>z. x = ant z;\n     y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y + z = x + (y + z)\n 2. \\<lbrakk>x \\<noteq> - \\<infinity>; y \\<noteq> - \\<infinity>;\n     z \\<noteq> - \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>za. z = ant za) \\<or> z = \\<infinity>;\n     x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y + z = x + (y + z)", "apply ((erule disjE)+, (erule exE)+, simp,\n        erule exE, simp,\n      (erule disjE)+, (erule exE)+, simp add:a_zpz,\n      erule exE, simp, erule disjE, erule exE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> - \\<infinity>; y \\<noteq> - \\<infinity>;\n     z \\<noteq> - \\<infinity>; x = \\<infinity>; y = \\<infinity>;\n     z = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y + z = x + (y + z)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_assoc_m: \"\\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; z \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> \n                                 (x + y) + z = x + (y + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     z \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y + z = x + (y + z)", "apply (cut_tac mem_ant[of \"x\"], \n       cut_tac mem_ant[of \"y\"], \n       cut_tac mem_ant[of \"z\"], simp add:aug_minf_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<infinity>; y \\<noteq> \\<infinity>;\n     z \\<noteq> \\<infinity>;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z);\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z);\n     z = - \\<infinity> \\<or> (\\<exists>za. z = ant za)\\<rbrakk>\n    \\<Longrightarrow> x + y + z = x + (y + z)", "apply ((erule disjE)+, simp, erule exE, simp,\n       erule disjE, erule exE, simp, (erule exE)+, simp add:a_zpz)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<infinity>; y \\<noteq> \\<infinity>;\n     z \\<noteq> \\<infinity>;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z);\n     z = - \\<infinity> \\<or> (\\<exists>za. z = ant za);\n     \\<exists>z. x = ant z\\<rbrakk>\n    \\<Longrightarrow> x + y + z = x + (y + z)", "apply ((erule disjE)+, erule exE, simp, (erule exE)+, simp,\n        erule disjE, erule exE, simp, erule exE, simp add:a_zpz)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<infinity>; y \\<noteq> \\<infinity>;\n     z \\<noteq> \\<infinity>; \\<exists>z. x = ant z; \\<exists>z. y = ant z;\n     \\<exists>za. z = ant za\\<rbrakk>\n    \\<Longrightarrow> x + y + z = x + (y + z)", "apply ((erule exE)+, simp add:a_zpz)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_0_r: \"x + (0::ant) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + 0 = x", "apply (cut_tac mem_ant[of \"x\"], simp add:Zero_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = - \\<infinity> \\<or>\n    (\\<exists>z. x = ant z) \\<or> x = \\<infinity> \\<Longrightarrow>\n    x + ant 0 = x", "apply ((erule disjE)+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>z. x = ant z) \\<or> x = \\<infinity> \\<Longrightarrow>\n    x + ant 0 = x", "apply (erule disjE, erule exE, simp add:a_zpz,\n       simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_0_l: \"(0::ant) + x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + x = x", "apply (cut_tac mem_ant[of \"x\"], simp add:Zero_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = - \\<infinity> \\<or>\n    (\\<exists>z. x = ant z) \\<or> x = \\<infinity> \\<Longrightarrow>\n    ant 0 + x = x", "apply ((erule disjE)+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>z. x = ant z) \\<or> x = \\<infinity> \\<Longrightarrow>\n    ant 0 + x = x", "apply (erule disjE, erule exE, simp, simp add:a_zpz, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_minus_inv: \"(- x) + x = (0::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - x + x = 0", "(** \\<longrightarrow> aadd_minus_l **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - x + x = 0", "apply (cut_tac mem_ant[of \"x\"],\n       erule disjE, simp add:a_minus_minus,\n       erule disjE, erule exE, simp add:aminus, simp add:a_zpz,\n       simp add:Zero_ant_def, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_minus_r: \"x + (- x) = (0::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + - x = 0", "apply (cut_tac  aadd_minus_inv[of \"x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. - x + x = 0 \\<Longrightarrow> x + - x = 0", "apply (simp add:aadd_commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ant_minus_inj:\"ant z \\<noteq> ant w \\<Longrightarrow> - ant z \\<noteq> - ant w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z \\<noteq> ant w \\<Longrightarrow> - ant z \\<noteq> - ant w", "by (simp add:aminus)"], ["", "lemma aminus_mult_minus: \"(- (ant z)) * (ant w) = - ((ant z) * (ant w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - ant z * ant w = - (ant z * ant w)", "apply (simp add:ant_def minus_ant_def,\n       cut_tac ant_z_in_Ainteg[of \"z\"],\n       cut_tac ant_z_in_Ainteg[of \"-z\"],\n       cut_tac ant_z_in_Ainteg[of \"w\"],\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(z, 0) \\<in> Ainteg; (- z, 0) \\<in> Ainteg;\n     (w, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (- z, 0) * Abs_Ainteg (w, 0) =\n                      Abs_Ainteg\n                       (- fst (Rep_Ainteg\n                                (Abs_Ainteg (z, 0) * Abs_Ainteg (w, 0))),\n                        - snd (Rep_Ainteg\n                                (Abs_Ainteg (z, 0) * Abs_Ainteg (w, 0))))", "apply (simp add:mult_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(z, 0) \\<in> Ainteg; (- z, 0) \\<in> Ainteg;\n     (w, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg\n                       (zag_t (Rep_Ainteg (Abs_Ainteg (- z, 0)))\n                         (Rep_Ainteg (Abs_Ainteg (w, 0)))) =\n                      Abs_Ainteg\n                       (- fst (Rep_Ainteg\n                                (Abs_Ainteg\n                                  (zag_t (Rep_Ainteg (Abs_Ainteg (z, 0)))\n                                    (Rep_Ainteg (Abs_Ainteg (w, 0)))))),\n                        - snd (Rep_Ainteg\n                                (Abs_Ainteg\n                                  (zag_t (Rep_Ainteg (Abs_Ainteg (z, 0)))\n                                    (Rep_Ainteg (Abs_Ainteg (w, 0)))))))", "apply (simp add:Abs_Ainteg_inverse,\n       simp add:zag_t_def,\n       cut_tac ant_z_in_Ainteg[of \"z * w\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(z, 0) \\<in> Ainteg; (- z, 0) \\<in> Ainteg;\n     (w, 0) \\<in> Ainteg; (z * w, 0) \\<in> Ainteg\\<rbrakk>\n    \\<Longrightarrow> Abs_Ainteg (- (z * w), 0) =\n                      Abs_Ainteg\n                       (- fst (Rep_Ainteg (Abs_Ainteg (z * w, 0))),\n                        - snd (Rep_Ainteg (Abs_Ainteg (z * w, 0))))", "apply (simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amult_commute: \"(x::ant) * y = y * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y = y * x", "apply (cut_tac mem_ant[of \"x\"],\n       cut_tac mem_ant[of \"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = - \\<infinity> \\<or>\n             (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or>\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, erule disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x = - \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 2. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, erule exE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>x = - \\<infinity>; y = ant z\\<rbrakk>\n       \\<Longrightarrow> - \\<infinity> * ant z = ant z * - \\<infinity>\n 2. \\<lbrakk>x = - \\<infinity>; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 3. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (cut_tac x = 0 and y = z in less_linear)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>x = - \\<infinity>; y = ant z;\n        0 < z \\<or> 0 = z \\<or> z < 0\\<rbrakk>\n       \\<Longrightarrow> - \\<infinity> * ant z = ant z * - \\<infinity>\n 2. \\<lbrakk>x = - \\<infinity>; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 3. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>x = - \\<infinity>; y = ant z; 0 = z \\<or> z < 0\\<rbrakk>\n       \\<Longrightarrow> - \\<infinity> * ant z = ant z * - \\<infinity>\n 2. \\<lbrakk>x = - \\<infinity>; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 3. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, rotate_tac -1, frule sym, thin_tac \"0 = z\", simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>x = - \\<infinity>; y = ant 0; z = 0\\<rbrakk>\n       \\<Longrightarrow> - \\<infinity> * ant 0 = ant 0 * - \\<infinity>\n 2. \\<And>z.\n       \\<lbrakk>x = - \\<infinity>; y = ant z; z < 0\\<rbrakk>\n       \\<Longrightarrow> - \\<infinity> * ant z = ant z * - \\<infinity>\n 3. \\<lbrakk>x = - \\<infinity>; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 4. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (simp add:inf_ant_def ant_def, simp add:minus_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_z_in_Ainteg[of \"0\"],\n       cut_tac ant_z_in_Ainteg[of \"-1\"], \n       cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>x = Abs_Ainteg (0, - 1); y = Abs_Ainteg (0, 0); z = 0;\n        (0, 1) \\<in> Ainteg; (0, 0) \\<in> Ainteg; (- 1, 0) \\<in> Ainteg;\n        (0, - 1) \\<in> Ainteg\\<rbrakk>\n       \\<Longrightarrow> Abs_Ainteg (0, - 1) * Abs_Ainteg (0, 0) =\n                         Abs_Ainteg (0, 0) * Abs_Ainteg (0, - 1)\n 2. \\<And>z.\n       \\<lbrakk>x = - \\<infinity>; y = ant z; z < 0\\<rbrakk>\n       \\<Longrightarrow> - \\<infinity> * ant z = ant z * - \\<infinity>\n 3. \\<lbrakk>x = - \\<infinity>; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 4. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (simp add:mult_ant_def, simp add:Abs_Ainteg_inverse,\n       simp add:zag_t_def, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x = - \\<infinity>; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 2. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (simp add:inf_ant_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x = - Abs_Ainteg (0, 1); y = Abs_Ainteg (0, 1)\\<rbrakk>\n    \\<Longrightarrow> - Abs_Ainteg (0, 1) * Abs_Ainteg (0, 1) =\n                      Abs_Ainteg (0, 1) * - Abs_Ainteg (0, 1)\n 2. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (simp add:mult_ant_def minus_ant_def,\n        cut_tac ant_inf_in_Ainteg,\n        simp add:Abs_Ainteg_inverse,\n        cut_tac ant_minf_in_Ainteg,\n        simp add:Abs_Ainteg_inverse, simp add:zag_t_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y = - \\<infinity> \\<or>\n             (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, erule disjE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>y = - \\<infinity>; \\<exists>z. x = ant z\\<rbrakk>\n    \\<Longrightarrow> x * - \\<infinity> = - \\<infinity> * x\n 2. \\<lbrakk>y = - \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 3. \\<lbrakk>(\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule exE,\n       cut_tac x = 0 and y = z in less_linear)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>y = - \\<infinity>; x = ant z;\n        0 < z \\<or> 0 = z \\<or> z < 0\\<rbrakk>\n       \\<Longrightarrow> x * - \\<infinity> = - \\<infinity> * x\n 2. \\<lbrakk>y = - \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 3. \\<lbrakk>(\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>y = - \\<infinity>; x = ant z; 0 = z \\<or> z < 0\\<rbrakk>\n       \\<Longrightarrow> x * - \\<infinity> = - \\<infinity> * x\n 2. \\<lbrakk>y = - \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 3. \\<lbrakk>(\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, rotate_tac -1, thin_tac \"0 = z\", simp add:mult_ant_def,\n      simp add:ant_def inf_ant_def minus_ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac z = z in ant_z_in_Ainteg,\n      cut_tac ant_minf_in_Ainteg,\n      simp add:Abs_Ainteg_inverse, simp add:zag_t_def,\n      simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>y = - \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 2. \\<lbrakk>(\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (simp add:inf_ant_def minus_ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac z = z in ant_z_in_Ainteg,\n      cut_tac ant_minf_in_Ainteg,\n      simp add:Abs_Ainteg_inverse,\n      simp add:mult_ant_def,\n      simp add:Abs_Ainteg_inverse, simp add:zag_t_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply ((erule disjE)+, (erule exE)+, simp add:a_z_z)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>z. x = ant z; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x\n 2. \\<lbrakk>(\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule exE,\n       cut_tac  x = 0 and y = z in less_linear,\n       erule disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>y = \\<infinity>; x = ant z; 0 = z \\<or> z < 0\\<rbrakk>\n       \\<Longrightarrow> x * y = y * x\n 2. \\<lbrakk>(\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, rotate_tac -1, frule sym, thin_tac \"0 = z\", simp,\n      simp add:mult_ant_def ant_def inf_ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac ant_z_in_Ainteg[of \"0\"],\n      simp add:Abs_Ainteg_inverse, simp add:zag_t_def,\n      simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x * y = y * x", "apply (erule disjE, erule exE,\n       cut_tac  x = 0 and y = z in less_linear,\n       erule disjE, simp,\n      erule disjE, rotate_tac -1, frule sym, thin_tac \"0 = z\", simp,\n      simp add:mult_ant_def ant_def inf_ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac ant_z_in_Ainteg[of \"0\"],\n      simp add:Abs_Ainteg_inverse, simp add:zag_t_def,\n      simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma z_le_i[simp]:\"(ant x) \\<le> \\<infinity> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant x \\<le> \\<infinity>", "apply (simp add:le_ant_def ant_def,\n       cut_tac ant_z_in_Ainteg[of \"0\"],\n       cut_tac ant_z_in_Ainteg[of \"x\"],\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse,\n       simp add:inf_ant_def,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma z_less_i[simp]:\"(ant x) < \\<infinity> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant x < \\<infinity>", "apply (cut_tac z_le_i[of \"x\"],\n       cut_tac z_neq_inf[of \"x\"],\n       simp add:less_ant_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma m_le_z:\"-\\<infinity> \\<le> (ant x) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> \\<le> ant x", "apply (simp add:le_ant_def ant_def,\n       cut_tac ant_z_in_Ainteg[of \"0\"],\n       cut_tac ant_z_in_Ainteg[of \"x\"],\n       cut_tac ant_minf_in_Ainteg,\n       cut_tac ant_inf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse,\n       simp add:inf_ant_def,\n       simp add:minus_ant_def,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma m_less_z[simp]:\"-\\<infinity> < (ant x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> < ant x", "apply (cut_tac m_le_z[of \"x\"],\n       cut_tac z_neq_minf[of \"x\"],\n       frule not_sym, thin_tac \"ant x \\<noteq> - \\<infinity>\",\n       simp add:less_ant_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma noninf_mem_Z:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; x \\<noteq> \\<infinity>\\<rbrakk> \\<Longrightarrow> \\<exists>(z::int). x = ant z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; x \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. x = ant z", "apply (simp add:aug_inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> - \\<infinity>; x \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. x = ant z", "apply (cut_tac mem_ant[of \"x\"], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma z_mem_Z:\"ant z \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z \\<in> Z\\<^sub>\\<infinity>", "by (simp add:aug_inf_def)"], ["", "lemma inf_ge_any[simp]:\"x \\<le> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> \\<infinity>", "apply (cut_tac mem_ant[of \"x\"], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x = - \\<infinity> \\<Longrightarrow> x \\<le> \\<infinity>\n 2. (\\<exists>z. x = ant z) \\<or> x = \\<infinity> \\<Longrightarrow>\n    x \\<le> \\<infinity>", "apply (simp add:inf_ant_def minus_ant_def,\n        cut_tac ant_minf_in_Ainteg,\n        cut_tac ant_inf_in_Ainteg,\n        simp add:Abs_Ainteg_inverse,\n        simp add:le_ant_def, simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>z. x = ant z) \\<or> x = \\<infinity> \\<Longrightarrow>\n    x \\<le> \\<infinity>", "apply (erule disjE, erule exE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = \\<infinity> \\<Longrightarrow> x \\<le> \\<infinity>", "apply (simp add:inf_ant_def,\n        cut_tac ant_inf_in_Ainteg,\n        simp add:le_ant_def, simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zero_lt_inf:\"0 < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<infinity>", "by (simp add:less_ant_def)"], ["", "lemma minf_le_any[simp]:\"-\\<infinity> \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> \\<le> x", "apply (cut_tac mem_ant[of \"x\"], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x = - \\<infinity> \\<Longrightarrow> - \\<infinity> \\<le> x\n 2. (\\<exists>z. x = ant z) \\<or> x = \\<infinity> \\<Longrightarrow>\n    - \\<infinity> \\<le> x", "apply (simp add:inf_ant_def minus_ant_def,\n        cut_tac ant_minf_in_Ainteg,\n        cut_tac ant_inf_in_Ainteg,\n        simp add:Abs_Ainteg_inverse,\n        simp add:le_ant_def, simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>z. x = ant z) \\<or> x = \\<infinity> \\<Longrightarrow>\n    - \\<infinity> \\<le> x", "apply (erule disjE, erule exE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z. x = ant z \\<Longrightarrow> - \\<infinity> \\<le> ant z\n 2. x = \\<infinity> \\<Longrightarrow> - \\<infinity> \\<le> x", "apply (simp add:inf_ant_def, simp add:minus_ant_def,\n        cut_tac ant_inf_in_Ainteg,\n        cut_tac ant_minf_in_Ainteg,\n        simp add:le_ant_def, simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = \\<infinity> \\<Longrightarrow> - \\<infinity> \\<le> x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma minf_less_0:\"-\\<infinity> < 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<infinity> < 0", "by (simp add:less_ant_def)"], ["", "lemma ale_antisym[simp]:\"\\<lbrakk>(x::ant) \\<le> y; y \\<le> x \\<rbrakk> \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac  mem_ant[of \"x\"], cut_tac  mem_ant[of \"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or>\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule disjE, erule disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y; x = - \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule disjE, erule exE, simp, simp add:ant_def,\n      simp add:minus_ant_def inf_ant_def,\n      cut_tac ant_inf_in_Ainteg,\n      cut_tac ant_minf_in_Ainteg,\n      cut_tac z = z in ant_z_in_Ainteg, simp add:Abs_Ainteg_inverse,\n      simp add:le_ant_def Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y; x = - \\<infinity>;\n     y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (thin_tac \"x \\<le> y\",\n       simp add:le_ant_def ant_def minus_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule disjE, erule disjE, erule exE,\n       thin_tac \"y \\<le> x\",\n       simp add:le_ant_def ant_def minus_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       cut_tac z = z in ant_z_in_Ainteg, simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y; y = - \\<infinity>;\n     x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (thin_tac \"y \\<le> x\",\n       simp add:le_ant_def ant_def minus_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply ((erule disjE)+, (erule exE)+,\n       cut_tac z = z in ant_z_in_Ainteg,\n       cut_tac z = za in ant_z_in_Ainteg,\n       simp add:le_ant_def ant_def,\n       simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y; \\<exists>z. x = ant z;\n     y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule exE, \n        simp add:le_ant_def ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac z = z in ant_z_in_Ainteg, simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule disjE, erule exE, thin_tac \"y \\<le> x\",\n       simp add:le_ant_def ant_def minus_ant_def inf_ant_def,\n       cut_tac ant_inf_in_Ainteg,\n       cut_tac ant_minf_in_Ainteg,\n       cut_tac z = z in ant_z_in_Ainteg, simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<le> x; x \\<noteq> y; x = \\<infinity>;\n     y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma x_gt_inf[simp]:\"\\<infinity> \\<le> x \\<Longrightarrow> x = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> \\<le> x \\<Longrightarrow> x = \\<infinity>", "apply (cut_tac inf_ge_any[of \"x\"],\n       rule ale_antisym[of \"x\" \"\\<infinity>\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Zinf_pOp_closed:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> x + y \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>;\n     y \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y \\<in> Z\\<^sub>\\<infinity>", "apply (cut_tac  mem_ant[of \"x\"], cut_tac  mem_ant[of \"y\"],\n       simp add:aug_inf_def,\n      (erule disjE)+, (erule exE)+, simp add:a_zpz,\n       cut_tac z = \"-(z + za)\" in z_neq_inf,\n       rule contrapos_pp, simp+,\n       cut_tac m1 = \"z+za\" in aminus[THEN sym], simp add:a_minus_minus,\n       erule exE, simp, simp add:minf_neq_inf[THEN not_sym],\n       erule disjE, erule exE, simp, \n       simp add:minf_neq_inf[THEN not_sym],\n       simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Zminf_pOp_closed:\"\\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> x + y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "apply (cut_tac  mem_ant[of \"x\"], cut_tac  mem_ant[of \"y\"],\n       simp add:aug_minf_def,\n      (erule disjE)+, simp, erule exE, simp,\n       erule disjE, erule exE, simp,\n      (erule exE)+, simp add:a_zpz)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amult_distrib1:\"(ant z) \\<noteq> 0 \\<Longrightarrow> \n             (a + b) * (ant z) = a * (ant z) + b * (ant z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z \\<noteq> 0 \\<Longrightarrow>\n    (a + b) * ant z = a * ant z + b * ant z", "apply (cut_tac mem_ant[of \"a\"], cut_tac mem_ant[of \"b\"],\n     (erule disjE)+, simp, cut_tac less_linear[of \"z\" \"0\"], \n      erule disjE, simp, erule disjE, simp, simp add:ant_0, simp,\n      erule disjE, erule exE, simp,\n      cut_tac less_linear[of \"z\" \"0\"], \n      erule disjE, simp add:a_z_z, erule disjE, simp add:ant_0,\n      simp add:a_z_z,\n      cut_tac less_linear[of \"z\" \"0\"], simp,\n      erule disjE, simp add:ant_0[THEN sym] a_z_z)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ant z \\<noteq> 0; a = - \\<infinity>; b = \\<infinity>;\n     z = 0 \\<or> 0 < z\\<rbrakk>\n    \\<Longrightarrow> 0 * ant z =\n                      - \\<infinity> * ant z + \\<infinity> * ant z\n 2. \\<lbrakk>ant z \\<noteq> 0;\n     b = - \\<infinity> \\<or> (\\<exists>z. b = ant z) \\<or> b = \\<infinity>;\n     (\\<exists>z. a = ant z) \\<or> a = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (a + b) * ant z = a * ant z + b * ant z", "apply (erule disjE, simp add:ant_0[THEN sym],\n       simp, simp add:ant_0[THEN sym], simp add:a_z_z,\n       (erule disjE)+, (erule exE)+, cut_tac less_linear[of \"z\" \"0\"], simp,\n       erule disjE, simp add:a_z_z,\n       erule disjE, simp add:ant_0, simp add:a_z_z,\n       cut_tac less_linear[of \"z\" \"0\"],\n       erule disjE, simp add:ant_0[THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>b = - \\<infinity>; a = \\<infinity>; z < 0\\<rbrakk>\n    \\<Longrightarrow> ant 0 * ant z = ant 0\n 2. \\<lbrakk>ant z \\<noteq> 0; b = - \\<infinity>; a = \\<infinity>;\n     z = 0 \\<or> 0 < z\\<rbrakk>\n    \\<Longrightarrow> (a + b) * ant z = a * ant z + b * ant z\n 3. \\<lbrakk>ant z \\<noteq> 0;\n     (\\<exists>z. a = ant z) \\<or> a = \\<infinity>;\n     (\\<exists>z. b = ant z) \\<or> b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (a + b) * ant z = a * ant z + b * ant z", "apply (simp add:a_z_z, simp, \n       erule disjE, simp add:ant_0, simp add:ant_0[THEN sym] a_z_z,\n      (erule disjE)+, (erule exE)+, simp add:a_zpz a_z_z,\n       simp add: distrib_right, erule exE, simp add:a_z_z,\n       cut_tac less_linear[of \"z\" \"0\"], erule disjE, simp,\n       erule disjE, simp add:ant_0, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ant z \\<noteq> 0;\n     (\\<exists>z. b = ant z) \\<or> b = \\<infinity>; a = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (a + b) * ant z = a * ant z + b * ant z", "apply (erule disjE, erule exE, simp, \n       cut_tac less_linear[of \"z\" \"0\"], erule disjE, simp add:a_z_z,\n       erule disjE, simp add:ant_0, simp add:a_z_z,\n       cut_tac less_linear[of \"z\" \"0\"], erule disjE, simp,\n       erule disjE, simp add:ant_0, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amult_0_r:\"(ant z) * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant z * 0 = 0", "by (simp add:ant_0[THEN sym] a_z_z)"], ["", "lemma amult_0_l:\"0 * (ant z) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 * ant z = 0", "by (simp add:ant_0[THEN sym] a_z_z)"], ["", "definition\n  asprod :: \"[int, ant] \\<Rightarrow> ant\" (infixl \"*\\<^sub>a\" 200) where\n  \"m *\\<^sub>a x == \n  if x = \\<infinity> then (if 0 < m then \\<infinity> else (if m < 0 then -\\<infinity> else \n                 if m = 0 then 0 else undefined))\n    else (if x = -\\<infinity> then \n                    (if 0 < m then -\\<infinity> else (if m < 0 then \\<infinity> else \n                 if m = 0 then 0 else undefined))\n          else (ant m) * x)\""], ["", "lemma asprod_pos_inf[simp]:\"0 < m \\<Longrightarrow> m *\\<^sub>a \\<infinity> = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> m *\\<^sub>a \\<infinity> = \\<infinity>", "apply (simp add:asprod_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_neg_inf[simp]:\"m < 0 \\<Longrightarrow> m *\\<^sub>a \\<infinity> = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < 0 \\<Longrightarrow> m *\\<^sub>a \\<infinity> = - \\<infinity>", "apply (simp add:asprod_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_pos_minf[simp]:\"0 < m \\<Longrightarrow> m *\\<^sub>a (-\\<infinity>) = (-\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> m *\\<^sub>a (- \\<infinity>) = - \\<infinity>", "apply (simp add:asprod_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_neg_minf[simp]:\"m < 0 \\<Longrightarrow> m *\\<^sub>a (-\\<infinity>) = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < 0 \\<Longrightarrow> m *\\<^sub>a (- \\<infinity>) = \\<infinity>", "apply (simp add:asprod_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_mult:\" m *\\<^sub>a (ant n) = ant(m * n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m *\\<^sub>a ant n = ant (m * n)", "apply (cut_tac z_neq_inf[of \"n\"],\n       cut_tac z_neq_minf[of \"n\"],\n       simp add:asprod_def, simp add:a_z_z)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_1:\"1 *\\<^sub>a x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 *\\<^sub>a x = x", "by (cut_tac mem_ant[of \"x\"], erule disjE, simp,\n       erule disjE, erule exE, simp add:asprod_mult, simp)"], ["", "(** atode asprod_1_x to awaseru **)"], ["", "lemma agsprod_assoc_a:\"m *\\<^sub>a (n *\\<^sub>a (ant x)) = (m * n) *\\<^sub>a (ant x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m *\\<^sub>a (n *\\<^sub>a ant x) = (m * n) *\\<^sub>a ant x", "apply (simp add:asprod_mult)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma agsprod_assoc:\"\\<lbrakk>m \\<noteq> 0; n \\<noteq> 0\\<rbrakk> \\<Longrightarrow> m *\\<^sub>a (n *\\<^sub>a x) = (m * n) *\\<^sub>a x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> 0; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (n *\\<^sub>a x) = (m * n) *\\<^sub>a x", "apply (cut_tac less_linear[of \"m\" \"0\"], cut_tac less_linear[of \"n\" \"0\"],\n       cut_tac mem_ant[of \"x\"],\n      (erule disjE)+, simp,\n      frule zmult_neg_neg[of \"m\" \"n\"], assumption+, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>m \\<noteq> 0; n \\<noteq> 0; m < 0; n < 0;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (n *\\<^sub>a x) = (m * n) *\\<^sub>a x\n 2. \\<lbrakk>m \\<noteq> 0; n \\<noteq> 0;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     m < 0; n = 0 \\<or> 0 < n\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (n *\\<^sub>a x) = (m * n) *\\<^sub>a x\n 3. \\<lbrakk>m \\<noteq> 0; n \\<noteq> 0; n < 0 \\<or> n = 0 \\<or> 0 < n;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     m = 0 \\<or> 0 < m\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (n *\\<^sub>a x) = (m * n) *\\<^sub>a x", "apply (erule disjE, erule exE, simp add:asprod_mult,\n      frule zmult_neg_neg[of \"m\" \"n\"], assumption+, simp+,\n      erule disjE, simp,\n      frule zmult_neg_pos[of \"m\" \"n\"], assumption+, simp,\n      erule disjE, erule exE, simp,\n      frule zmult_neg_pos[of \"m\" \"n\"], assumption+, simp add:asprod_mult,\n      frule zmult_neg_pos[of \"m\" \"n\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> 0; n \\<noteq> 0; n < 0 \\<or> n = 0 \\<or> 0 < n;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     m = 0 \\<or> 0 < m\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (n *\\<^sub>a x) = (m * n) *\\<^sub>a x", "apply (simp, (erule disjE)+,\n      frule zmult_pos_neg[of \"m\" \"n\"], assumption+,\n      simp,\n      erule disjE, erule exE, simp add:asprod_mult,\n      frule zmult_pos_neg[of \"m\" \"n\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> 0;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     0 < m; 0 < n\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (n *\\<^sub>a x) = (m * n) *\\<^sub>a x", "apply (frule zmult_pos_pos[of \"m\" \"n\"], assumption+,\n      erule disjE, simp,\n      erule disjE, erule exE, simp add:asprod_mult, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_distrib1:\"m \\<noteq> 0 \\<Longrightarrow> m *\\<^sub>a (x + y) = (m *\\<^sub>a x) + (m *\\<^sub>a y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<noteq> 0 \\<Longrightarrow>\n    m *\\<^sub>a (x + y) = m *\\<^sub>a x + m *\\<^sub>a y", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> 0;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or>\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (x + y) = m *\\<^sub>a x + m *\\<^sub>a y", "apply (cut_tac less_linear[of \"m\" \"0\"], \n      erule disjE,\n      erule disjE, erule disjE, simp,\n      erule disjE, simp add:asprod_def  add_ant_def, simp,\n      simp, (erule disjE)+, erule exE, simp add:asprod_mult,\n      simp add:Zero_ant_def asprod_mult)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<noteq> 0; x = - \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>; 0 < m\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (- \\<infinity> + y) =\n                      m *\\<^sub>a (- \\<infinity>) + m *\\<^sub>a y\n 2. \\<lbrakk>m \\<noteq> 0;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     m < 0 \\<or> m = 0 \\<or> 0 < m;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (x + y) = m *\\<^sub>a x + m *\\<^sub>a y", "apply (erule disjE, erule exE, simp add:asprod_mult,\n      simp add: Zero_ant_def asprod_mult,\n      erule disjE, erule disjE, erule disjE, erule exE,\n      simp add:asprod_mult,\n      simp add:Zero_ant_def asprod_mult,\n      erule disjE, erule exE, simp add:asprod_mult,\n      simp add:Zero_ant_def asprod_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> 0; m < 0 \\<or> m = 0 \\<or> 0 < m;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (x + y) = m *\\<^sub>a x + m *\\<^sub>a y", "apply (simp, erule disjE, erule exE, simp,\n      (erule disjE)+, erule exE, simp add:asprod_mult,\n      simp add:a_zpz, simp add:asprod_mult distrib_left,\n      simp add:asprod_mult)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>m \\<noteq> 0; (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n        x = ant z; 0 < m\\<rbrakk>\n       \\<Longrightarrow> m *\\<^sub>a (ant z + y) =\n                         m *\\<^sub>a ant z + m *\\<^sub>a y\n 2. \\<lbrakk>m \\<noteq> 0; m < 0 \\<or> 0 < m;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> m *\\<^sub>a (x + y) = m *\\<^sub>a x + m *\\<^sub>a y", "apply (erule disjE, erule exE, simp add:a_zpz asprod_mult,\n       simp add: distrib_left, simp add:asprod_mult,\n      (erule disjE)+, erule exE, simp add:asprod_mult, simp,\n      erule disjE, erule exE, simp add:asprod_mult, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_0_x[simp]:\"0 *\\<^sub>a x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 *\\<^sub>a x = 0", "apply (simp add:asprod_def, (rule impI)+,\n        cut_tac mem_ant[of \"x\"], simp, erule exE,\n        simp add:asprod_def a_z_z, simp add:ant_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_n_0:\"n *\\<^sub>a 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n *\\<^sub>a 0 = 0", "apply (simp add:Zero_ant_def asprod_mult)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_distrib2:\"\\<lbrakk>0 < i; 0 < j\\<rbrakk> \\<Longrightarrow> (i + j) *\\<^sub>a x = (i *\\<^sub>a x) + (j *\\<^sub>a x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < i; 0 < j\\<rbrakk>\n    \\<Longrightarrow> (i + j) *\\<^sub>a x = i *\\<^sub>a x + j *\\<^sub>a x", "by (cut_tac mem_ant[of \"x\"], erule disjE, simp,\n       erule disjE, erule exE, simp add:asprod_mult,\n       simp add: distrib_right a_zpz, simp)"], ["", "lemma asprod_minus:\"x \\<noteq> -\\<infinity> \\<and> x \\<noteq> \\<infinity> \\<Longrightarrow> - z *\\<^sub>a x = z *\\<^sub>a (- x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> - \\<infinity> \\<and> x \\<noteq> \\<infinity> \\<Longrightarrow>\n    - z *\\<^sub>a x = z *\\<^sub>a (- x)", "apply (cut_tac mem_ant[of \"x\"], erule disjE, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> - \\<infinity> \\<and> x \\<noteq> \\<infinity>;\n     \\<exists>z. x = ant z\\<rbrakk>\n    \\<Longrightarrow> - z *\\<^sub>a x = z *\\<^sub>a (- x)", "apply (erule exE, simp add:asprod_mult aminus)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_div_eq:\"\\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y\\<rbrakk> \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (cut_tac less_linear[of \"n\" \"0\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y;\n     n < 0 \\<or> 0 < n\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y; n < 0 \\<or> 0 < n;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or>\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply ((erule disjE)+, simp,\n      erule disjE, erule exE, rule contrapos_pp, simp+,\n      simp add:asprod_mult)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>\\<infinity> = ant (n * z); n < 0; x = - \\<infinity>;\n        y = ant z; - \\<infinity> \\<noteq> ant z\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y; n < 0;\n     x = - \\<infinity>; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x = y\n 3. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     n < 0; (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x = y\n 4. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     0 < n\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (cut_tac z1 = \"n * z\" in z_neq_inf[THEN not_sym], simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n *\\<^sub>a x = n *\\<^sub>a y;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     n < 0; (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x = y\n 2. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     0 < n\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply ((erule disjE)+, erule exE, simp add:asprod_mult,\n       cut_tac z = \"n * z\" in z_neq_inf,\n       rule contrapos_pp, simp, simp,\n      (erule disjE)+, (erule exE)+, simp add:asprod_mult,\n       erule exE, simp add: asprod_mult)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n *\\<^sub>a x = n *\\<^sub>a y; n < 0;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x = y\n 2. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     0 < n\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (erule disjE, erule exE, simp add:asprod_mult,\n      simp add:z_neq_minf[THEN not_sym], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> 0; n *\\<^sub>a x = n *\\<^sub>a y;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     0 < n\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply ((erule disjE)+, simp,\n      erule disjE, erule exE, rule contrapos_pp, simp+,\n      simp add:asprod_mult,\n      cut_tac z1 = \"n * z\" in z_neq_minf[THEN not_sym], simp,\n      rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n *\\<^sub>a x = n *\\<^sub>a y;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     0 < n; (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply ((erule disjE)+, (erule exE)+, simp add:asprod_mult,\n      erule exE, simp add:asprod_mult,\n      erule disjE, erule exE, simp add:asprod_mult\n      z_neq_inf[THEN not_sym], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n *\\<^sub>a x = n *\\<^sub>a y;\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     0 < n; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x = y", "apply (erule disjE, simp, erule disjE, erule exE, simp add:asprod_mult\n        z_neq_inf[THEN not_sym], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_0:\"\\<lbrakk>z \\<noteq> 0; z *\\<^sub>a x = 0 \\<rbrakk> \\<Longrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> 0; z *\\<^sub>a x = 0\\<rbrakk>\n    \\<Longrightarrow> x = 0", "by (rule asprod_div_eq[of \"z\" \"x\" \"0\"], assumption, simp add:asprod_n_0)"], ["", "lemma asp_z_Z:\"z *\\<^sub>a ant x \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z *\\<^sub>a ant x \\<in> Z\\<^sub>\\<infinity>", "by (simp add:asprod_mult z_in_aug_inf)"], ["", "lemma tna_ant:\" tna (ant z) = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tna (ant z) = z", "apply (cut_tac z_neq_minf[of \"z\"], cut_tac z_neq_inf[of \"z\"],\n       simp add:ant_def tna_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Abs_Ainteg (z, 0) \\<noteq> - \\<infinity>;\n     Abs_Ainteg (z, 0) \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (Rep_Ainteg (Abs_Ainteg (z, 0)) \\<noteq> (0, 1) \\<and>\n                       Rep_Ainteg (Abs_Ainteg (z, 0)) \\<noteq>\n                       (0, - 1) \\<longrightarrow>\n                       fst (Rep_Ainteg (Abs_Ainteg (z, 0))) = z) \\<and>\n                      (Rep_Ainteg (Abs_Ainteg (z, 0)) =\n                       (0, 1) \\<longrightarrow>\n                       undefined = z) \\<and>\n                      (Rep_Ainteg (Abs_Ainteg (z, 0)) =\n                       (0, - 1) \\<longrightarrow>\n                       undefined = z)", "apply (cut_tac ant_z_in_Ainteg[of \"z\"], simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ant_tna:\"x \\<noteq> \\<infinity> \\<and> x \\<noteq> -\\<infinity> \\<Longrightarrow>  ant (tna x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> \\<infinity> \\<and> x \\<noteq> - \\<infinity> \\<Longrightarrow>\n    ant (tna x) = x", "apply (cut_tac mem_ant[of \"x\"], simp, erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>x \\<noteq> \\<infinity> \\<and> x \\<noteq> - \\<infinity>;\n        x = ant z\\<rbrakk>\n       \\<Longrightarrow> ant (tna x) = x", "apply (simp add:ant_def tna_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>Abs_Ainteg (z, 0) \\<noteq> \\<infinity> \\<and>\n                Abs_Ainteg (z, 0) \\<noteq> - \\<infinity>;\n        x = Abs_Ainteg (z, 0)\\<rbrakk>\n       \\<Longrightarrow> (Rep_Ainteg (Abs_Ainteg (z, 0)) \\<noteq>\n                          (0, 1) \\<and>\n                          Rep_Ainteg (Abs_Ainteg (z, 0)) \\<noteq>\n                          (0, - 1) \\<longrightarrow>\n                          Abs_Ainteg\n                           (fst (Rep_Ainteg (Abs_Ainteg (z, 0))), 0) =\n                          Abs_Ainteg (z, 0)) \\<and>\n                         (Rep_Ainteg (Abs_Ainteg (z, 0)) =\n                          (0, 1) \\<longrightarrow>\n                          Abs_Ainteg (undefined, 0) =\n                          Abs_Ainteg (z, 0)) \\<and>\n                         (Rep_Ainteg (Abs_Ainteg (z, 0)) =\n                          (0, - 1) \\<longrightarrow>\n                          Abs_Ainteg (undefined, 0) = Abs_Ainteg (z, 0))", "apply (cut_tac z = z in ant_z_in_Ainteg, simp add:Abs_Ainteg_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ant_sol:\"\\<lbrakk>a \\<in> Z\\<^sub>\\<infinity>; b \\<in> Z\\<^sub>\\<infinity>; c \\<in> Z\\<^sub>\\<infinity>; b \\<noteq> \\<infinity>; a = b + c\\<rbrakk> \\<Longrightarrow> a - b = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>\\<infinity>; b \\<in> Z\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>\\<infinity>; b \\<noteq> \\<infinity>; a = b + c\\<rbrakk>\n    \\<Longrightarrow> a - b = c", "apply (subgoal_tac \"-b \\<in> Z\\<^sub>\\<infinity>\", simp add:diff_ant_def,\n       subgoal_tac \"a + (-b) = b + c + (-b)\",\n       subst aadd_commute[of \"b\" \"c\"], subst aadd_assoc_i, assumption+,\n       simp add:aadd_minus_r, simp add:aadd_0_r, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>\\<infinity>; b \\<in> Z\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>\\<infinity>; b \\<noteq> \\<infinity>; a = b + c\\<rbrakk>\n    \\<Longrightarrow> - b \\<in> Z\\<^sub>\\<infinity>", "apply (cut_tac mem_ant[of \"b\"], simp add:aug_inf_def,\n       erule exE, simp add:aminus)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Ordering of integers and ordering nats\""], ["", "subsection \\<open>The \\<open>\\<le>\\<close> Ordering\\<close>"], ["", "lemma zneq_aneq:\"(n \\<noteq> m) = ((ant n) \\<noteq> (ant m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<noteq> m) = (ant n \\<noteq> ant m)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<noteq> m \\<Longrightarrow> ant n \\<noteq> ant m\n 2. ant n \\<noteq> ant m \\<Longrightarrow> n \\<noteq> m", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ale:\"(n \\<le> m) = ((ant n) \\<le>(ant m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<le> m) = (ant n \\<le> ant m)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow> ant n \\<le> ant m\n 2. ant n \\<le> ant m \\<Longrightarrow> n \\<le> m", "apply (simp add:ant_def le_ant_def,\n       cut_tac ant_z_in_Ainteg[of \"n\"],\n       cut_tac ant_z_in_Ainteg[of \"m\"],\n       simp add:Abs_Ainteg_inverse)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aless:\"(n < m) = ((ant n) < (ant m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n < m) = (ant n < ant m)", "apply (simp add:less_ant_def,\n       cut_tac ale[of \"n\" \"m\"], arith)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ale_refl: \"w \\<le> (w::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<le> w", "apply (cut_tac mem_ant[of \"w\"],\n       erule disjE, simp,\n       erule disjE, erule exE, simp,\n       subst ale[THEN sym], simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aeq_ale:\"(a::ant) = b \\<Longrightarrow> a \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow> a \\<le> b", "by (simp add:ale_refl)"], ["", "lemma ale_trans: \"\\<lbrakk> (i::ant) \\<le> j; j \\<le> k \\<rbrakk> \\<Longrightarrow> i \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; j \\<le> k\\<rbrakk> \\<Longrightarrow> i \\<le> k", "apply (cut_tac mem_ant[of \"i\"], cut_tac mem_ant[of \"j\"], \n       cut_tac mem_ant[of \"k\"],\n      (erule disjE)+, simp add:ale_refl, erule disjE, erule exE, simp+,\n      (erule disjE)+, simp add:ale_refl, simp add:ale_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; j \\<le> k;\n     (\\<exists>z. i = ant z) \\<or> i = \\<infinity>; j = - \\<infinity>;\n     (\\<exists>z. k = ant z) \\<or> k = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> i \\<le> k\n 2. \\<lbrakk>i \\<le> j; j \\<le> k;\n     k = - \\<infinity> \\<or> (\\<exists>z. k = ant z) \\<or> k = \\<infinity>;\n     (\\<exists>z. i = ant z) \\<or> i = \\<infinity>;\n     (\\<exists>z. j = ant z) \\<or> j = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> i \\<le> k", "apply ((erule disjE)+, erule exE, simp+,\n  erule exE, simp,\n       cut_tac x = \"ant z\" in minf_le_any,\n       frule_tac x = \"ant z\" in ale_antisym[of _ \"-\\<infinity>\"], assumption+,\n       simp+,\n       cut_tac minf_le_any[of \"\\<infinity>\"], frule ale_antisym[of \"-\\<infinity>\" \"\\<infinity>\"],\n       simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; j \\<le> k;\n     k = - \\<infinity> \\<or> (\\<exists>z. k = ant z) \\<or> k = \\<infinity>;\n     (\\<exists>z. i = ant z) \\<or> i = \\<infinity>;\n     (\\<exists>z. j = ant z) \\<or> j = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> i \\<le> k", "apply (erule disjE, simp,\n       (erule disjE)+, (erule exE)+, simp,\n       cut_tac x = \"ant za\" in minf_le_any,\n       frule_tac x = \"ant za\" in ale_antisym[of _ \"-\\<infinity>\"], assumption+,\n       simp, erule exE,\n       cut_tac x = \"ant z\" in minf_le_any, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>\\<infinity> \\<le> - \\<infinity>; k = - \\<infinity>;\n        j = \\<infinity>; i = ant z\\<rbrakk>\n       \\<Longrightarrow> ant z \\<le> - \\<infinity>\n 2. \\<lbrakk>i \\<le> j; j \\<le> - \\<infinity>;\n     (\\<exists>z. j = ant z) \\<or> j = \\<infinity>; k = - \\<infinity>;\n     i = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> i \\<le> - \\<infinity>\n 3. \\<lbrakk>i \\<le> j; j \\<le> k;\n     (\\<exists>z. i = ant z) \\<or> i = \\<infinity>;\n     (\\<exists>z. j = ant z) \\<or> j = \\<infinity>;\n     (\\<exists>z. k = ant z) \\<or> k = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> i \\<le> k", "apply (cut_tac minf_le_any[of \"\\<infinity>\"], \n       frule_tac ale_antisym[of \"-\\<infinity>\" \"\\<infinity>\"], assumption+,\n       simp, erule disjE, erule exE, simp,\n       cut_tac x = \"ant z\" in inf_ge_any, \n       frule_tac x = \"ant z\" in ale_antisym[of _ \"\\<infinity>\"], assumption+,\n       simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; j \\<le> - \\<infinity>; k = - \\<infinity>;\n     i = \\<infinity>; j = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> i \\<le> - \\<infinity>\n 2. \\<lbrakk>i \\<le> j; j \\<le> k;\n     (\\<exists>z. i = ant z) \\<or> i = \\<infinity>;\n     (\\<exists>z. j = ant z) \\<or> j = \\<infinity>;\n     (\\<exists>z. k = ant z) \\<or> k = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> i \\<le> k", "apply (cut_tac minf_le_any[of \"\\<infinity>\"], frule ale_antisym[of \"-\\<infinity>\" \"\\<infinity>\"],\n       simp+,\n       (erule disjE)+, (erule exE)+, simp add:ale[THEN sym],\n       simp, (erule disjE)+, (erule exE)+,\n       cut_tac x = \"ant za\" in inf_ge_any,\n       frule_tac x = \"ant za\" in ale_antisym[of _ \"\\<infinity>\"],\n       simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<infinity> \\<le> j; j \\<le> k;\n     (\\<exists>z. k = ant z) \\<or> k = \\<infinity>; i = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> \\<infinity> \\<le> k", "apply (erule disjE, erule exE,\n       cut_tac inf_ge_any[of \"j\"],\n       frule ale_antisym[of \"j\" \"\\<infinity>\"], assumption+,\n       cut_tac x = \"ant z\" in inf_ge_any, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* Axiom 'order_aless_le_not_le' of class 'order': *)"], ["", "lemma aless_le_not_le: \"((w::ant) < z) = (w \\<le> z \\<and> \\<not> z \\<le> w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w < z) = (w \\<le> z \\<and> \\<not> z \\<le> w)", "by (auto simp add: less_ant_def)"], ["", "instance ant :: order"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ant, order_class)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "qed \n (assumption |\n  rule ale_refl ale_trans ale_antisym aless_le_not_le)+"], ["", "(* Axiom 'linorder_linear' of class 'linorder': *)"], ["", "lemma ale_linear: \"(z::ant) \\<le> w \\<or> w \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<le> w \\<or> w \\<le> z", "apply (cut_tac mem_ant[of \"z\"], cut_tac mem_ant[of \"w\"],\n       erule disjE, simp,\n       erule disjE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<exists>za. z = ant za) \\<or> z = \\<infinity>;\n     (\\<exists>z. w = ant z) \\<or> w = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> z \\<le> w \\<or> w \\<le> z", "apply ((erule disjE)+, (erule exE)+, simp add:ale[THEN sym],\n       simp add:linorder_linear)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>za. z = ant za; w = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> z \\<le> w \\<or> w \\<le> z\n 2. \\<lbrakk>(\\<exists>z. w = ant z) \\<or> w = \\<infinity>;\n     z = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> z \\<le> w \\<or> w \\<le> z", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instance ant :: linorder"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ant, linorder_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "qed (rule ale_linear)"], ["", "lemmas aless_linear = less_linear [where 'a = ant]"], ["", "lemma ant_eq_0_conv [simp]: \"(ant n = 0) = (n = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ant n = 0) = (n = 0)", "apply (simp add:Zero_ant_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aless_zless: \"(ant m < ant n) = (m<n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ant m < ant n) = (m < n)", "by (simp add: ale ant_def linorder_not_le [symmetric])"], ["", "lemma a0_less_int_conv [simp]: \"(0 < ant n) = (0 < n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < ant n) = (0 < n)", "apply (simp add:Zero_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ant 0 < ant n) = (0 < n)", "apply (simp add:aless[THEN sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a0_less_1: \"0 < (1::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1", "apply (simp add:Zero_ant_def One_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ant 0 < ant 1", "apply (subst aless_zless)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma a0_neq_1 [simp]: \"0 \\<noteq> (1::ant)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> 1", "by (simp only:Zero_ant_def One_ant_def, subst zneq_aneq[THEN sym], simp)"], ["", "lemma ale_zle [simp]: \"((ant i) \\<le> (ant j)) = (i\\<le>j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ant i \\<le> ant j) = (i \\<le> j)", "by (subst ale[of \"i\" \"j\"], simp)"], ["", "lemma ant_1 [simp]: \"ant 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ant 1 = 1", "by (simp add: One_ant_def)"], ["", "lemma zpos_apos:\"(0 \\<le> n) = (0 \\<le> (ant n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 \\<le> n) = (0 \\<le> ant n)", "apply (simp only:ale[of \"0\" \"n\"], simp only:ant_0[THEN sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zposs_aposss:\"(0 < n) = (0 < (ant n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < n) = (0 < ant n)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow> 0 < ant n\n 2. 0 < ant n \\<Longrightarrow> 0 < n", "apply (unfold Zero_ant_def,\n        subst aless[THEN sym, of \"0\" \"n\"], simp,\n        subst aless[of \"0\" \"n\"], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma an_nat_pos[simp]:\"0 \\<le> an n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> an n", "by (simp add:ant_0[THEN sym] an_def)"], ["", "lemma amult_one_l:\" 1 * (x::ant) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 * x = x", "by (cut_tac mem_ant[of \"x\"], erule disjE, simp \n       only:ant_1[THEN sym], simp del:ant_1,\n       erule disjE, erule exE, simp only:ant_1[THEN sym],\n       simp del:ant_1 add:a_z_z,\n       simp only:ant_1[THEN sym], simp del:ant_1)"], ["", "lemma amult_one_r:\"(x::ant)* 1 = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * 1 = x", "by (cut_tac amult_one_l[of \"x\"], simp add:amult_commute)"], ["", "lemma amult_eq_eq_r:\"\\<lbrakk>z \\<noteq> 0;  a * ant z = b * ant z\\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> 0; a * ant z = b * ant z\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (cut_tac less_linear[of \"z\" \"0\"], simp,\n       cut_tac mem_ant[of \"a\"], cut_tac mem_ant[of \"b\"],\n       (erule disjE)+, simp,\n      erule disjE, erule exE, simp add:a_z_z,\n      frule sym, thin_tac \"\\<infinity> = ant (za * z)\", simp,\n      simp, (erule disjE)+, simp, erule exE, simp add:a_z_z, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<noteq> 0; a * ant z = b * ant z; z < 0;\n     (\\<exists>z. a = ant z) \\<or> a = \\<infinity>;\n     (\\<exists>z. b = ant z) \\<or> b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<lbrakk>z \\<noteq> 0; a * ant z = b * ant z;\n     a = - \\<infinity> \\<or> (\\<exists>z. a = ant z) \\<or> a = \\<infinity>;\n     b = - \\<infinity> \\<or> (\\<exists>z. b = ant z) \\<or> b = \\<infinity>;\n     0 < z\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply ((erule disjE)+, (erule exE)+, simp add:a_z_z,\n      erule exE, simp add:a_z_z, erule disjE, erule exE, \n      simp add:a_z_z,\n      frule sym, thin_tac \"- \\<infinity> = ant (za * z)\", simp, simp,\n      (erule disjE)+, simp, erule disjE, erule exE, simp add:a_z_z,\n      frule sym, thin_tac \"- \\<infinity> = ant (za * z)\", simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> 0; a * ant z = b * ant z;\n     b = - \\<infinity> \\<or> (\\<exists>z. b = ant z) \\<or> b = \\<infinity>;\n     0 < z; (\\<exists>z. a = ant z) \\<or> a = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply ((erule disjE)+, erule exE, simp add:a_z_z, simp,\n       (erule disjE)+, (erule exE)+, simp add:a_z_z,\n       erule exE, simp add:a_z_z, erule disjE, erule exE, simp add:a_z_z,\n       frule sym, thin_tac \"\\<infinity> = ant (za * z)\", simp, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amult_eq_eq_l:\"\\<lbrakk>z \\<noteq> 0;  (ant z) * a = (ant z) * b\\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> 0; ant z * a = ant z * b\\<rbrakk>\n    \\<Longrightarrow> a = b", "by (simp add:amult_commute, rule amult_eq_eq_r, assumption+)"], ["", "lemma amult_pos:\"\\<lbrakk>0 < b; 0 \\<le> x\\<rbrakk>  \\<Longrightarrow> x \\<le> (b *\\<^sub>a x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < b; 0 \\<le> x\\<rbrakk>\n    \\<Longrightarrow> x \\<le> b *\\<^sub>a x", "apply (cut_tac mem_ant[of \"x\"], erule disjE, simp,\n       erule disjE, erule exE, simp add:asprod_mult,\n       simp add:zpos_apos[THEN sym],\n       frule_tac a = z and b = b in pos_zmult_pos, assumption+,\n       simp add:mult.commute, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_amult:\"0 < z \\<Longrightarrow> z *\\<^sub>a x = (ant z) * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < z \\<Longrightarrow> z *\\<^sub>a x = ant z * x", "apply (simp add:asprod_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amult_pos1:\"\\<lbrakk>0 < b; 0 \\<le> x\\<rbrakk>  \\<Longrightarrow> x \\<le> ((ant b) * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < b; 0 \\<le> x\\<rbrakk> \\<Longrightarrow> x \\<le> ant b * x", "by (frule amult_pos[of \"b\" \"x\"], assumption, simp add:asprod_amult)"], ["", "lemma amult_pos_mono_l:\"0 < w \\<Longrightarrow> (((ant w) * x) \\<le> ((ant w) * y)) =  (x \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < w \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"],\n      (erule disjE)+, simp, erule disjE, erule exE, simp, simp,\n      (erule disjE)+, erule exE, simp add:a_z_z)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>0 < w; y = - \\<infinity>; x = ant z\\<rbrakk>\n       \\<Longrightarrow> (ant (w * z) \\<le> - \\<infinity>) =\n                         (ant z \\<le> - \\<infinity>)\n 2. \\<lbrakk>0 < w; y = - \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)\n 3. \\<lbrakk>0 < w; (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)", "apply (rule iffI,\n       cut_tac x = \"ant (w * z)\" in minf_le_any, frule_tac x = \"ant (w * z)\"\n       in ale_antisym, assumption+, simp,\n       cut_tac x = \"ant z\" in minf_le_any, frule_tac x = \"ant z\"\n       in ale_antisym, assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < w; y = - \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)\n 2. \\<lbrakk>0 < w; (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)", "apply ((erule disjE)+, (erule exE)+, simp add:a_z_z)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < w; \\<exists>z. x = ant z; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)\n 2. \\<lbrakk>0 < w; (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)", "apply (erule exE, simp add:a_z_z)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)", "apply (erule disjE, erule exE, simp add:a_z_z,\n       rule iffI,\n       cut_tac x = \"ant (w * z)\" in inf_ge_any, \n       frule_tac x = \"ant (w * z)\" in ale_antisym[of _ \"\\<infinity>\"], assumption+,\n       simp,\n       cut_tac x = \"ant z\" in inf_ge_any, \n       frule_tac x = \"ant z\" in ale_antisym[of _ \"\\<infinity>\"], assumption+,\n       simp, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amult_pos_mono_r:\"0 < w \\<Longrightarrow> ((x * (ant w)) \\<le> (y * (ant w))) =  (x \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < w \\<Longrightarrow> (x * ant w \\<le> y * ant w) = (x \\<le> y)", "apply (simp add:amult_commute[of _ \"ant w\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < w \\<Longrightarrow> (ant w * x \\<le> ant w * y) = (x \\<le> y)", "apply (rule amult_pos_mono_l, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma apos_neq_minf:\"0 \\<le> a \\<Longrightarrow> a \\<noteq> -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> a \\<Longrightarrow> a \\<noteq> - \\<infinity>", "by (rule contrapos_pp, simp+,\n       cut_tac minf_le_any[of \"0\"],\n       frule ale_antisym[of \"0\" \"-\\<infinity>\"], assumption+, simp)"], ["", "lemma asprod_pos_mono:\"0 < w \\<Longrightarrow> ((w *\\<^sub>a x) \\<le> (w *\\<^sub>a y)) =  (x \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < w \\<Longrightarrow>\n    (w *\\<^sub>a x \\<le> w *\\<^sub>a y) = (x \\<le> y)", "by (simp add:asprod_amult, simp add:amult_pos_mono_l)"], ["", "lemma a_inv:\"(a::ant) + b = 0 \\<Longrightarrow> a = -b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a + b = 0 \\<Longrightarrow> a = - b", "apply (cut_tac mem_ant[of \"a\"], cut_tac mem_ant[of \"b\"],\n       (erule disjE)+, frule sym, thin_tac \"a + b = 0\", \n       simp add:ant_0[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a + b = 0; a = - \\<infinity>;\n     (\\<exists>z. b = ant z) \\<or> b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = - b\n 2. \\<lbrakk>a + b = 0;\n     b = - \\<infinity> \\<or> (\\<exists>z. b = ant z) \\<or> b = \\<infinity>;\n     (\\<exists>z. a = ant z) \\<or> a = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a = - b", "apply (erule disjE, erule exE, simp, simp,\n      (erule disjE)+, erule exE, simp, simp,\n      simp add:a_minus_minus,\n      (erule disjE)+, (erule exE)+, simp add:aminus a_zpz,\n      erule exE, simp,\n      erule disjE, erule exE, simp, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_pos_pos:\"0 \\<le> x \\<Longrightarrow> 0 \\<le> int n *\\<^sub>a x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<Longrightarrow> 0 \\<le> int n *\\<^sub>a x", "apply (cases \"n = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<le> x; n = 0\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> int n *\\<^sub>a x\n 2. \\<lbrakk>0 \\<le> x; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> int n *\\<^sub>a x", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x; 0 < n\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> int n *\\<^sub>a x", "using asprod_pos_mono [THEN sym, of \"int n\" \"0\" \"x\"]"], ["proof (prove)\nusing this:\n  0 < int n \\<Longrightarrow>\n  (0 \\<le> x) = (int n *\\<^sub>a 0 \\<le> int n *\\<^sub>a x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x; 0 < n\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> int n *\\<^sub>a x", "apply (simp add:asprod_n_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_1_x[simp]:\"1 *\\<^sub>a x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 *\\<^sub>a x = x", "apply (simp add:asprod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> - \\<infinity> \\<longrightarrow>\n    x \\<noteq> \\<infinity> \\<longrightarrow> 1 * x = x", "apply (rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> - \\<infinity>; x \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 1 * x = x", "apply (cut_tac mem_ant[of \"x\"], simp, erule exE, simp add:a_z_z)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z. x = ant z \\<Longrightarrow> 1 * ant z = ant z", "apply (simp only:ant_1[THEN sym], simp del:ant_1 add:a_z_z)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma asprod_n_1[simp]:\"n *\\<^sub>a 1 = ant n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n *\\<^sub>a 1 = ant n", "apply (simp only:ant_1[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. n *\\<^sub>a ant 1 = ant n", "apply (simp only:asprod_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ant (n * 1) = ant n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Aug ordering\""], ["", "lemma aless_imp_le:\" x < (y::ant) \\<Longrightarrow> x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> x \\<le> y", "by (simp add:less_ant_def)"], ["", "lemma gt_a0_ge_1:\"(0::ant) < x \\<Longrightarrow> 1 \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> 1 \\<le> x", "apply (cut_tac mem_ant[of \"x\"],\n       erule disjE, unfold Zero_ant_def, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ant 0 < - \\<infinity>; x = - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 1 \\<le> - \\<infinity>\n 2. \\<lbrakk>ant 0 < x;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 1 \\<le> x", "apply (cut_tac less_ant_def[of \"0\" \"-\\<infinity>\"], simp add:ant_0,\n       cut_tac minf_le_any[of \"0\"],\n       frule ale_antisym[of \"0\" \"-\\<infinity>\"], assumption+,\n       simp add:ant_0[THEN sym], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ant 0 < x;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 1 \\<le> x", "apply (erule disjE, erule exE, unfold One_ant_def, simp del:ant_1,\n       simp add:aless_zless, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gt_a0_ge_aN:\"\\<lbrakk>0 < x; N \\<noteq> 0\\<rbrakk>  \\<Longrightarrow> (ant (int N)) \\<le> (int N) *\\<^sub>a x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; N \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> ant (int N) \\<le> int N *\\<^sub>a x", "apply (cut_tac mem_ant[of \"x\"], erule disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < - \\<infinity>; 0 < N; x = - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> ant (int N) \\<le> - \\<infinity>\n 2. \\<lbrakk>0 < x; N \\<noteq> 0;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> ant (int N) \\<le> int N *\\<^sub>a x", "apply (cut_tac aless_imp_le[of \"0\" \"-\\<infinity>\"],\n        cut_tac minf_le_any[of \"0\"], \n      frule ale_antisym[of \"0\" \"-\\<infinity>\"], simp,\n      simp only: Zero_ant_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; N \\<noteq> 0;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> ant (int N) \\<le> int N *\\<^sub>a x", "apply (erule disjE, erule exE, simp add:asprod_mult, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aless_le_trans:\"\\<lbrakk>(x::ant) < y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x < z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x < z", "by auto"], ["", "lemma ale_less_trans:\"\\<lbrakk>(x::ant) \\<le> y; y < z\\<rbrakk> \\<Longrightarrow> x < z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y < z\\<rbrakk> \\<Longrightarrow> x < z", "by auto"], ["", "lemma aless_trans:\"\\<lbrakk>(x::ant) < y; y < z\\<rbrakk> \\<Longrightarrow> x < z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; y < z\\<rbrakk> \\<Longrightarrow> x < z", "by auto"], ["", "lemma ale_neq_less:\"\\<lbrakk> (x::ant)\\<le> y; x \\<noteq> y\\<rbrakk> \\<Longrightarrow> x < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; x \\<noteq> y\\<rbrakk> \\<Longrightarrow> x < y", "apply (simp add:less_ant_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aneg_le:\"(\\<not> (x::ant) \\<le> y) = (y  <  x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> x \\<le> y) = (y < x)", "apply (cut_tac ale_linear[of \"y\" \"x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<or> x \\<le> y \\<Longrightarrow> (\\<not> x \\<le> y) = (y < x)", "apply (rule iffI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<le> x \\<or> x \\<le> y; y < x\\<rbrakk>\n    \\<Longrightarrow> \\<not> x \\<le> y", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aneg_less:\"(\\<not> x < (y::ant)) = (y \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> x < y) = (y \\<le> x)", "by auto"], ["", "lemma aadd_le_mono:\"x \\<le> (y::ant) \\<Longrightarrow> x + z \\<le> y + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> x + z \\<le> y + z", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"], \n       cut_tac mem_ant[of \"z\"],\n       (erule disjE)+, simp, erule disjE, erule exE, simp+,\n      (erule disjE)+, erule exE, simp+,\n      (erule disjE)+, (erule exE)+, simp, erule exE, simp,\n       erule disjE, erule exE, simp+, (erule disjE)+, simp, \n       erule exE, simp+,\n       cut_tac minf_le_any[of \"\\<infinity>\"], frule ale_antisym[of \"-\\<infinity>\" \"\\<infinity>\"],\n       assumption+, simp, (erule disjE)+, (erule exE)+, simp+,\n       cut_tac x = \"ant za\" in minf_le_any,\n       frule_tac x = \"ant za\" in ale_antisym[of _ \"-\\<infinity>\"], assumption+, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<le> y; y = - \\<infinity>; \\<exists>z. x = ant z;\n     z = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + z \\<le> y + z\n 2. \\<lbrakk>x \\<le> y; y = - \\<infinity>;\n     (\\<exists>za. z = ant za) \\<or> z = \\<infinity>;\n     x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + z \\<le> y + z\n 3. \\<lbrakk>x \\<le> y;\n     z = - \\<infinity> \\<or>\n     (\\<exists>za. z = ant za) \\<or> z = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + z \\<le> y + z", "apply (erule exE, simp,\n       cut_tac x = \"ant za\" in minf_le_any,\n       frule_tac x = \"ant za\" in ale_antisym[of _ \"-\\<infinity>\"], assumption+, simp,\n       erule disjE, erule exE, simp+,\n       cut_tac minf_le_any[of \"\\<infinity>\"], frule ale_antisym[of \"-\\<infinity>\" \"\\<infinity>\"],\n       assumption+, simp, (erule disjE)+, (erule exE)+, simp+,\n       erule exE, simp, erule disjE, erule exE, simp+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>za.\n       \\<lbrakk>\\<infinity> \\<le> ant za; z = - \\<infinity>;\n        x = \\<infinity>; y = ant za\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> - \\<infinity>\n 2. \\<lbrakk>x \\<le> y; z = - \\<infinity>; x = \\<infinity>;\n     y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + z \\<le> y + z\n 3. \\<lbrakk>x \\<le> y; (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>;\n     (\\<exists>za. z = ant za) \\<or> z = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + z \\<le> y + z", "apply (cut_tac x = \"ant za\" in inf_ge_any, frule_tac x = \"ant za\" in \n       ale_antisym[of _ \"\\<infinity>\"], assumption+, simp+,\n      (erule disjE)+, (erule exE)+, simp add:a_zpz,\n      (erule exE)+, simp add:a_zpz, (erule disjE)+, (erule exE)+,\n      simp add:a_zpz, erule exE, simp,\n      (erule disjE)+, (erule exE)+, simp add:a_zpz)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>za zaa.\n       \\<lbrakk>\\<infinity> \\<le> ant za; x = \\<infinity>; y = ant za;\n        z = ant zaa\\<rbrakk>\n       \\<Longrightarrow> \\<infinity> \\<le> ant (za + zaa)\n 2. \\<lbrakk>x \\<le> y; x = \\<infinity>; \\<exists>z. y = ant z;\n     z = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + z \\<le> y + z\n 3. \\<lbrakk>x \\<le> y; (\\<exists>za. z = ant za) \\<or> z = \\<infinity>;\n     x = \\<infinity>; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + z \\<le> y + z", "apply (cut_tac x = \"ant za\" in inf_ge_any, frule_tac x = \"ant za\" in \n       ale_antisym[of _ \"\\<infinity>\"], assumption+, simp+,\n       erule exE, simp, erule disjE, erule exE, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_less_mono_z:\"(x::ant) < y \\<Longrightarrow> (x + (ant z)) < (y + (ant z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> x + ant z < y + ant z", "apply (simp add:less_ant_def, simp add:aadd_le_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<and> x \\<noteq> y \\<Longrightarrow>\n    x + ant z \\<noteq> y + ant z", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y \\<and> x \\<noteq> y;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or>\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> x + ant z \\<noteq> y + ant z", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>za.\n       \\<lbrakk>ant za + ant z \\<noteq> ant za;\n        - \\<infinity> = ant za + ant z; x = ant za + ant z;\n        y = ant za\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>za.\n       \\<lbrakk>ant za \\<le> - \\<infinity>; ant za + ant z = - \\<infinity>;\n        y = - \\<infinity>; x = ant za\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>za zaa.\n       \\<lbrakk>za \\<le> zaa; ant za + ant z = ant zaa + ant z; x = ant za;\n        y = ant zaa\\<rbrakk>\n       \\<Longrightarrow> za = zaa\n 4. \\<And>za.\n       \\<lbrakk>ant za + ant z = \\<infinity>; x = ant za;\n        y = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis a_inv a_ipi a_ipz a_zpz aadd_minus_r less_le diff_ant_def minf_less_0)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>za.\n       \\<lbrakk>ant za \\<le> - \\<infinity>; ant za + ant z = - \\<infinity>;\n        y = - \\<infinity>; x = ant za\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>za zaa.\n       \\<lbrakk>za \\<le> zaa; ant za + ant z = ant zaa + ant z; x = ant za;\n        y = ant zaa\\<rbrakk>\n       \\<Longrightarrow> za = zaa\n 3. \\<And>za.\n       \\<lbrakk>ant za + ant z = \\<infinity>; x = ant za;\n        y = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis a_inv a_ipi a_ipz a_zpz aadd_minus_r less_le diff_ant_def minf_less_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>za zaa.\n       \\<lbrakk>za \\<le> zaa; ant za + ant z = ant zaa + ant z; x = ant za;\n        y = ant zaa\\<rbrakk>\n       \\<Longrightarrow> za = zaa\n 2. \\<And>za.\n       \\<lbrakk>ant za + ant z = \\<infinity>; x = ant za;\n        y = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis a_zpz add_right_cancel aeq_zeq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>za.\n       \\<lbrakk>ant za + ant z = \\<infinity>; x = ant za;\n        y = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis a_zpz less_le z_less_i)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aless_le_suc[simp]:\"(a::ant) < b \\<Longrightarrow> a + 1 \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < b \\<Longrightarrow> a + 1 \\<le> b", "apply (cut_tac mem_ant[of \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b;\n     b = - \\<infinity> \\<or>\n     (\\<exists>z. b = ant z) \\<or> b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a + 1 \\<le> b", "apply (erule disjE,\n       frule aless_imp_le[of \"a\" \"b\"], simp,\n       cut_tac minf_le_any[of \"a\"], frule ale_antisym[of \"a\" \"-\\<infinity>\"],\n       assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; (\\<exists>z. b = ant z) \\<or> b = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a + 1 \\<le> b", "apply (erule disjE, erule exE, cut_tac mem_ant[of \"a\"], erule disjE, \n       unfold One_ant_def, simp del:ant_1,\n       erule disjE, erule exE, simp del:ant_1 add:a_zpz, simp only:aless_zless,\n       frule aless_imp_le[of \"a\" \"b\"], simp del:ant_1, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aposs_le_1:\"(0::ant) < x \\<Longrightarrow> 1 \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow> 1 \\<le> x", "apply (frule aless_le_suc[of \"0\" \"x\"],\n       simp add:aadd_0_l)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pos_in_aug_inf:\"(0::ant) \\<le> x \\<Longrightarrow> x \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<Longrightarrow> x \\<in> Z\\<^sub>\\<infinity>", "apply (simp add:aug_inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<Longrightarrow> x \\<noteq> - \\<infinity>", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> - \\<infinity>; x = - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac minf_le_any[of \"0\"],\n       frule ale_antisym[of \"0\" \"-\\<infinity>\"], assumption+,\n       unfold Zero_ant_def,\n       simp )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aug_inf_noninf_is_z:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; x \\<noteq> \\<infinity>\\<rbrakk> \\<Longrightarrow> \\<exists>z. x = ant z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; x \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>z. x = ant z", "apply (cut_tac mem_ant[of \"x\"], simp add:aug_inf_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_two_pos:\"\\<lbrakk>0 \\<le> (x::ant); 0 \\<le> y\\<rbrakk> \\<Longrightarrow> 0 \\<le> x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x; 0 \\<le> y\\<rbrakk> \\<Longrightarrow> 0 \\<le> x + y", "apply (cut_tac Zero_in_aug_inf,\n       cut_tac pos_in_aug_inf[of \"x\"],\n       cut_tac pos_in_aug_inf[of \"y\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>0 \\<le> x; 0 \\<le> y; 0 \\<in> Z\\<^sub>\\<infinity>;\n     x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> x + y\n 2. \\<lbrakk>0 \\<le> x; 0 \\<le> y; 0 \\<in> Z\\<^sub>\\<infinity>;\n     x \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> y\n 3. \\<lbrakk>0 \\<le> x; 0 \\<le> y; 0 \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> x", "apply (cut_tac aadd_le_mono[of \"0\" \"x\" \"y\"], simp add:aadd_0_l,\n       assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_pos_poss:\"\\<lbrakk>(0::ant) \\<le> x; 0 < y\\<rbrakk> \\<Longrightarrow> 0 < (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x; 0 < y\\<rbrakk> \\<Longrightarrow> 0 < x + y", "apply (frule aless_imp_le[of \"0\" \"y\"],\n        subst less_ant_def, rule conjI, simp add:aadd_two_pos,\n        rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x; 0 < y; 0 \\<le> y; x + y = 0\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac Zero_in_aug_inf,\n        cut_tac pos_in_aug_inf[of \"x\"],\n        cut_tac pos_in_aug_inf[of \"y\"],\n        case_tac \"y = \\<infinity>\", simp,\n        cut_tac mem_ant[of \"x\"], erule disjE,\n        simp add:aug_inf_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>0 \\<le> x; 0 < \\<infinity>; x + \\<infinity> = 0;\n     0 \\<in> Z\\<^sub>\\<infinity>; x \\<in> Z\\<^sub>\\<infinity>;\n     \\<infinity> \\<in> Z\\<^sub>\\<infinity>; y = \\<infinity>;\n     (\\<exists>z. x = ant z) \\<or> x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>0 \\<le> x; 0 < y; 0 \\<le> y; x + y = 0;\n     0 \\<in> Z\\<^sub>\\<infinity>; x \\<in> Z\\<^sub>\\<infinity>;\n     y \\<in> Z\\<^sub>\\<infinity>; y \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>0 \\<le> x; 0 < y; 0 \\<le> y; x + y = 0;\n     0 \\<in> Z\\<^sub>\\<infinity>; x \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> y\n 4. \\<lbrakk>0 \\<le> x; 0 < y; 0 \\<le> y; x + y = 0;\n     0 \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> x", "apply (erule disjE, erule exE, simp, simp,\n        case_tac \"x = \\<infinity>\", unfold Zero_ant_def, \n        frule aug_inf_noninf_is_z[of \"y\"], assumption, erule exE,\n        simp, frule sym, thin_tac \"\\<infinity> = ant 0\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ant 0 \\<le> x; ant 0 < y; ant 0 \\<le> y; x + y = ant 0;\n     ant 0 \\<in> Z\\<^sub>\\<infinity>; x \\<in> Z\\<^sub>\\<infinity>;\n     y \\<in> Z\\<^sub>\\<infinity>; y \\<noteq> \\<infinity>;\n     x \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>ant 0 \\<le> x; ant 0 < y; ant 0 \\<le> y; x + y = ant 0;\n     ant 0 \\<in> Z\\<^sub>\\<infinity>; x \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> ant 0 \\<le> y\n 3. \\<lbrakk>ant 0 \\<le> x; ant 0 < y; ant 0 \\<le> y; x + y = ant 0;\n     ant 0 \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> ant 0 \\<le> x", "apply (thin_tac \"ant 0 \\<le> y\",\n        frule aug_inf_noninf_is_z[of \"x\"], assumption, erule exE,\n        frule aug_inf_noninf_is_z[of \"y\"], assumption, erule exE,\n        simp add:a_zpz, simp add: aless_zless)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ant 0 \\<le> x; ant 0 < y; ant 0 \\<le> y; x + y = ant 0;\n     ant 0 \\<in> Z\\<^sub>\\<infinity>; x \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> ant 0 \\<le> y\n 2. \\<lbrakk>ant 0 \\<le> x; ant 0 < y; ant 0 \\<le> y; x + y = ant 0;\n     ant 0 \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> ant 0 \\<le> x", "apply (simp add:aless_imp_le)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_poss_pos:\"\\<lbrakk>(0::ant) < x; 0 \\<le> y\\<rbrakk> \\<Longrightarrow> 0 < (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < x; 0 \\<le> y\\<rbrakk> \\<Longrightarrow> 0 < x + y", "apply (subst aadd_commute, rule aadd_pos_poss, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_pos_le:\"0 \\<le> (a::ant) \\<Longrightarrow> b \\<le> a + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> a \\<Longrightarrow> b \\<le> a + b", "apply (cut_tac mem_ant[of \"a\"], (erule disjE)+,\n       simp, cut_tac minf_le_any[of \"0\"], frule ale_antisym[of \"0\" \"-\\<infinity>\"],\n       assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> a;\n     (\\<exists>z. a = ant z) \\<or> a = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> b \\<le> a + b", "apply (erule disjE, erule exE,\n      simp, thin_tac \"a = ant z\", cut_tac mem_ant[of \"b\"],\n      erule disjE, simp,\n      erule disjE, erule exE, simp add:a_zpz, simp only:ant_0[THEN sym], \n      simp only:ale, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a = \\<infinity> \\<Longrightarrow> b \\<le> \\<infinity> + b", "apply (cut_tac mem_ant[of \"b\"],\n      erule disjE, simp,\n      erule disjE, erule exE, simp, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_poss_less:\"\\<lbrakk>b \\<noteq> \\<infinity>; b \\<noteq> -\\<infinity>; 0 < a\\<rbrakk>  \\<Longrightarrow> b < a + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> \\<infinity>; b \\<noteq> - \\<infinity>;\n     0 < a\\<rbrakk>\n    \\<Longrightarrow> b < a + b", "apply (cut_tac mem_ant[of \"b\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> \\<infinity>; b \\<noteq> - \\<infinity>; 0 < a;\n     \\<exists>z. b = ant z\\<rbrakk>\n    \\<Longrightarrow> b < a + b", "apply (erule exE,\n       cut_tac mem_ant[of \"a\"], erule disjE, simp,\n       thin_tac \"a = - \\<infinity>\", \n       cut_tac minf_le_any[of \"0\"],\n       frule aless_imp_le[of \"0\" \"-\\<infinity>\"],\n       frule ale_antisym[of \"0\" \"-\\<infinity>\"], assumption+,\n       simp only:ant_0[THEN sym], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>0 < a; b = ant z;\n        (\\<exists>z. a = ant z) \\<or> a = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> ant z < a + ant z", "apply (erule disjE, erule exE, simp add:a_zpz,\n       subst aless[THEN sym], simp, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ale_neg:\"(0::ant) \\<le> x \\<Longrightarrow> (- x) \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<Longrightarrow> - x \\<le> 0", "apply (frule pos_in_aug_inf[of \"x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x; x \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> - x \\<le> 0", "apply (case_tac \"x = \\<infinity>\", simp,\n        frule aug_inf_noninf_is_z[of \"x\"], assumption, erule exE,\n        simp add:aminus, unfold Zero_ant_def,\n        simp only:ale_zle)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ale_diff_pos:\"(x::ant) \\<le> y \\<Longrightarrow> 0 \\<le> (y - x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> 0 \\<le> y - x", "apply (case_tac \"y = -\\<infinity>\", simp,\n       cut_tac minf_le_any[of \"x\"],\n       frule ale_antisym[of \"x\" \"-\\<infinity>\"], assumption+, \n       simp add:diff_ant_def a_minus_minus,\n       cut_tac mem_ant[of \"y\"], simp, thin_tac \"y \\<noteq> - \\<infinity>\",\n       erule disjE, erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>x \\<le> y; y = ant z\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> y - x\n 2. \\<lbrakk>x \\<le> y; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> y - x", "apply (case_tac \"x = \\<infinity>\", simp,\n       cut_tac x = \"ant z\" in inf_ge_any,\n       frule_tac x = \"ant z\" in ale_antisym[of _ \"\\<infinity>\"], simp+,\n      cut_tac mem_ant[of \"x\"], simp+, erule disjE,\n      simp add:diff_ant_def a_minus_minus)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>x \\<le> ant z; y = ant z; x \\<noteq> \\<infinity>;\n        \\<exists>z. x = ant z\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> ant z - x\n 2. \\<lbrakk>x \\<le> y; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> y - x", "apply (erule exE, simp add:a_zdz, unfold Zero_ant_def,\n       simp only:ale_zle,\n       cut_tac mem_ant[of \"x\"], erule disjE, \n       simp add:diff_ant_def a_minus_minus,\n       erule disjE, erule exE, simp add:diff_ant_def aminus,\n       simp add:diff_ant_def ant_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aless_diff_poss:\"(x::ant) < y \\<Longrightarrow> 0 < (y - x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> 0 < y - x", "apply (case_tac \"y = -\\<infinity>\", simp,\n       cut_tac minf_le_any[of \"x\"],\n       frule less_imp_le[of \"x\" \"-\\<infinity>\"],\n       frule antisym[of \"x\" \"-\\<infinity>\"], assumption+, \n       cut_tac less_le[of \"x\" \"-\\<infinity>\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; y \\<noteq> - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 < y - x", "apply (case_tac \"x = -\\<infinity>\", simp,\n       case_tac \"y = \\<infinity>\", simp add:diff_ant_def a_minus_minus,\n       simp add:zero_lt_inf,\n       cut_tac mem_ant[of \"y\"], simp, erule exE, simp add:diff_ant_def\n        a_minus_minus, simp add:zero_lt_inf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < y; y \\<noteq> - \\<infinity>;\n     x \\<noteq> - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> 0 < y - x", "apply (case_tac \"x = \\<infinity>\", simp,\n       frule aless_imp_le[of \"\\<infinity>\" \"y\"], \n       cut_tac inf_ge_any[of \"y\"], frule ale_antisym[of \"y\" \"\\<infinity>\"],\n       assumption+, simp,\n       cut_tac mem_ant[of \"x\"], simp, erule exE,\n       case_tac \"y = \\<infinity>\", simp add:diff_ant_def aminus,\n       simp add:zero_lt_inf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>x < y; y \\<noteq> - \\<infinity>; x \\<noteq> - \\<infinity>;\n        x \\<noteq> \\<infinity>; x = ant z; y \\<noteq> \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> 0 < y - x", "apply (cut_tac mem_ant[of \"y\"], simp, erule exE, simp,\n       simp add:diff_ant_def, simp add:aminus a_zpz, \n       simp add:aless_zless)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ale_minus:\" (x::ant) \\<le> y \\<Longrightarrow> - y \\<le> - x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> - y \\<le> - x", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     y = - \\<infinity> \\<or>\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> - y \\<le> - x", "apply ((erule disjE)+, simp, erule disjE, erule exE, \n        simp add:aminus a_minus_minus, simp add:a_minus_minus,\n (erule disjE)+, (erule exE)+,\n  simp, cut_tac x = \"ant z\" in minf_le_any, frule_tac x = \"ant z\" in \n  ale_antisym[of _ \"-\\<infinity>\"], assumption+, simp,\n  simp, cut_tac x = \\<infinity> in minf_le_any, \n  frule_tac x = \\<infinity> in ale_antisym[of _ \"-\\<infinity>\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; (\\<exists>z. x = ant z) \\<or> x = \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> - y \\<le> - x", "apply ((erule disjE)+, (erule exE)+, simp add:aminus, erule exE, simp,\n        erule disjE, erule exE, simp, cut_tac x = \"ant z\" in inf_ge_any, \n        frule_tac x = \"ant z\" in ale_antisym[of _ \"\\<infinity>\"], assumption+, simp,\n        simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aless_minus:\"(x::ant) < y \\<Longrightarrow> - y < - x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> - y < - x", "by (simp add:less_ant_def, erule conjE, simp add:ale_minus,\n       rule not_sym, rule contrapos_pp, simp+,\n       cut_tac a_minus_minus[of \"x\"], simp add:a_minus_minus)"], ["", "lemma aadd_minus_le:\"(a::ant) \\<le> 0 \\<Longrightarrow> a + b \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> 0 \\<Longrightarrow> a + b \\<le> b", "apply (frule ale_minus[of \"a\" \"0\"],\n       cut_tac aadd_pos_le[of \"-a\" \"-b\"], simp add:aminus_0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<le> 0; 0 \\<le> - a; - b \\<le> - a + - b\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> b\n 2. \\<lbrakk>a \\<le> 0; - 0 \\<le> - a\\<rbrakk> \\<Longrightarrow> 0 \\<le> - a", "apply (frule ale_minus[of \"-b\" \"-a + -b\"], simp add:aminus_add_distrib,\n       simp add:a_minus_minus, simp add:aminus_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aadd_minus_less:\"\\<lbrakk>b \\<noteq> -\\<infinity> \\<and> b \\<noteq> \\<infinity>; (a::ant) < 0\\<rbrakk> \\<Longrightarrow> a + b < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> - \\<infinity> \\<and> b \\<noteq> \\<infinity>;\n     a < 0\\<rbrakk>\n    \\<Longrightarrow> a + b < b", "apply (simp add:less_ant_def, erule conjE,\n       simp add:aadd_minus_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> 0 \\<and> a \\<noteq> 0; b \\<noteq> - \\<infinity>;\n     b \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> a + b \\<noteq> b", "apply (rule contrapos_pp, simp+,\n      cut_tac mem_ant[of \"a\"], cut_tac mem_ant[of \"b\"],\n      simp, erule disjE, erule exE, simp, \n      frule sym, thin_tac \"- \\<infinity> = ant z\", simp,\n      erule disjE, (erule exE)+, simp add:a_zpz,\n      erule exE, simp, frule sym, thin_tac \"\\<infinity> = ant z\", simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma an_inj:\"an n = an m \\<Longrightarrow> n = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an n = an m \\<Longrightarrow> n = m", "apply (simp add:an_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nat_eq_an_eq:\"n = m \\<Longrightarrow> an n = an m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = m \\<Longrightarrow> an n = an m", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aneq_natneq:\"(an n \\<noteq> an m) = (n \\<noteq> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (an n \\<noteq> an m) = (n \\<noteq> m)", "apply (simp add:an_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ale_natle:\" (an n \\<le> an m) = (n \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (an n \\<le> an m) = (n \\<le> m)", "apply (simp add:an_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aless_natless:\"(an n < an m) = (n < m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (an n < an m) = (n < m)", "apply (simp add:an_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ant (int n) < ant (int m)) = (n < m)", "apply (simp add:aless_zless)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma na_an:\"na (an n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. na (an n) = n", "by (simp only:na_def an_def,\n       subgoal_tac \"\\<not> ant (int n) < 0\", simp,\n       simp add:tna_ant, subst aneg_less[of \"ant (int n)\" \"0\"],\n       simp only:ant_0[THEN sym], subst ale_zle[of \"0\" \"int n\"], simp)"], ["", "lemma asprod_ge:\n  \"0 < b \\<Longrightarrow> N \\<noteq> 0 \\<Longrightarrow> an N \\<le> int N *\\<^sub>a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < b; N \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> an N \\<le> int N *\\<^sub>a b", "apply (frule aposs_le_1[of \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < b; N \\<noteq> 0; 1 \\<le> b\\<rbrakk>\n    \\<Longrightarrow> an N \\<le> int N *\\<^sub>a b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < b; 0 < N; 1 \\<le> b\\<rbrakk>\n    \\<Longrightarrow> an N \\<le> int N *\\<^sub>a b", "using asprod_pos_mono [THEN sym, of \"int N\" \"1\" \"b\"]"], ["proof (prove)\nusing this:\n  0 < int N \\<Longrightarrow>\n  (1 \\<le> b) = (int N *\\<^sub>a 1 \\<le> int N *\\<^sub>a b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < b; 0 < N; 1 \\<le> b\\<rbrakk>\n    \\<Longrightarrow> an N \\<le> int N *\\<^sub>a b", "apply (simp only: ant_1 [THEN sym], simp add: asprod_amult, simp add:an_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma an_npn:\"an (n + m) = an n + an m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an (n + m) = an n + an m", "by (unfold an_def, simp add:a_zpz)"], ["", "lemma an_ndn:\"n \\<le> m \\<Longrightarrow> an (m - n) = an m - an n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<Longrightarrow> an (m - n) = an m - an n", "apply (cut_tac an_npn[of \"m - n\" n], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; an m = an (m - n) + an n\\<rbrakk>\n    \\<Longrightarrow> an (m - n) = an (m - n) + an n - an n", "apply (unfold an_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m;\n     ant (int m) = ant (int (m - n)) + ant (int n)\\<rbrakk>\n    \\<Longrightarrow> ant (int (m - n)) =\n                      ant (int (m - n)) + ant (int n) - ant (int n)", "apply (simp add:a_zpz[of \"int (m - n)\" \"int n\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. int m = int (m - n) + int n \\<Longrightarrow>\n    ant (int (m - n)) = ant (int (m - n) + int n) - ant (int n)", "apply (subst a_zdz[of \"int (m - n) + int n\" \"int n\"], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \"Amin, amax\""], ["", "definition\n  amin :: \"[ant, ant] \\<Rightarrow> ant\" where\n  \"amin x y = (if (x \\<le> y) then x else y)\""], ["", "definition\n  amax :: \"[ant, ant] \\<Rightarrow> ant\" where\n  \"amax x y = (if (x \\<le> y) then y else x)\""], ["", "primrec Amin :: \"[nat, nat \\<Rightarrow> ant] \\<Rightarrow> ant\"\nwhere\n  Amin_0 :  \"Amin 0 f = (f 0)\"\n| Amin_Suc :\"Amin (Suc n) f = amin (Amin n f) (f (Suc n))\""], ["", "primrec Amax :: \"[nat, nat \\<Rightarrow> ant] \\<Rightarrow> ant\"\nwhere\n  Amax_0 : \"Amax 0 f = f 0\"\n| Amax_Suc :\"Amax (Suc n) f = amax (Amax n f) (f (Suc n))\""], ["", "lemma amin_ge:\"x \\<le> amin x y \\<or> y \\<le> amin x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> amin x y \\<or> y \\<le> amin x y", "apply (simp add:amin_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amin_le_l:\"amin x y \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. amin x y \\<le> x", "apply (simp add:amin_def, cut_tac ale_linear[of \"x\" \"y\"],\n       rule impI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amin_le_r:\"amin x y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. amin x y \\<le> y", "apply (simp add:amin_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amax_le:\"amax x y \\<le> x \\<or> amax x y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. amax x y \\<le> x \\<or> amax x y \\<le> y", "apply (simp add:amax_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amax_le_n:\"\\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk> \\<Longrightarrow> amax x y \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> n; y \\<le> n\\<rbrakk>\n    \\<Longrightarrow> amax x y \\<le> n", "by (simp add:amax_def)"], ["", "lemma amax_ge_l:\"x \\<le> amax x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> amax x y", "apply (simp add:amax_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amax_ge_r:\"y \\<le> amax x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> amax x y", "apply (simp add:amax_def, cut_tac ale_linear[of \"x\" \"y\"],\n       rule impI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amin_mem_i:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> amin x y \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>;\n     y \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> amin x y \\<in> Z\\<^sub>\\<infinity>", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"], simp add:aug_inf_def,\n      (erule disjE)+, (erule exE)+, cut_tac amin_ge[of \"x\" \"y\"],\n      rule contrapos_pp, simp+,\n      erule disjE,\n      cut_tac x = \"ant z\" in minf_le_any,\n      frule_tac x = \"ant z\" in ale_antisym[of _ \"-\\<infinity>\"], assumption+, simp,\n      cut_tac x = \"ant za\" in minf_le_any,\n      frule_tac x = \"ant za\" in ale_antisym[of _ \"-\\<infinity>\"], assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> - \\<infinity>; y \\<noteq> - \\<infinity>;\n     \\<exists>z. x = ant z; y = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> amin x y \\<noteq> - \\<infinity>\n 2. \\<lbrakk>x \\<noteq> - \\<infinity>; y \\<noteq> - \\<infinity>;\n     (\\<exists>z. y = ant z) \\<or> y = \\<infinity>; x = \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> amin x y \\<noteq> - \\<infinity>", "apply (erule exE, simp add:amin_def, erule disjE, \n        erule exE, simp add:amin_def, simp add:amin_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amax_mem_m:\"\\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> amax x y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> amax x y \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "apply (cut_tac mem_ant[of \"x\"], cut_tac mem_ant[of \"y\"],\n      simp add:aug_minf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<infinity>; y \\<noteq> \\<infinity>;\n     x = - \\<infinity> \\<or> (\\<exists>z. x = ant z);\n     y = - \\<infinity> \\<or> (\\<exists>z. y = ant z)\\<rbrakk>\n    \\<Longrightarrow> amax x y \\<noteq> \\<infinity>", "apply ((erule disjE)+, simp add:amax_def,\n       erule exE, simp add:amax_def,\n       erule disjE, erule exE, simp add:amax_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<infinity>; y \\<noteq> \\<infinity>;\n     \\<exists>z. x = ant z; \\<exists>z. y = ant z\\<rbrakk>\n    \\<Longrightarrow> amax x y \\<noteq> \\<infinity>", "apply ((erule exE)+, cut_tac amax_le[of \"x\" \"y\"], \n       rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z za.\n       \\<lbrakk>x = ant z; y = ant za;\n        \\<infinity> \\<le> ant z \\<or> \\<infinity> \\<le> ant za;\n        amax (ant z) (ant za) = \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE,\n       cut_tac x = \"ant z\" in inf_ge_any,\n       frule_tac x = \"ant z\" in ale_antisym[of _ \"\\<infinity>\"], assumption+, simp,\n       cut_tac x = \"ant za\" in inf_ge_any,\n       frule_tac x = \"ant za\" in ale_antisym[of _ \"\\<infinity>\"], assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amin_commute:\"amin x y = amin y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. amin x y = amin y x", "apply (cut_tac ale_linear[of \"x\" \"y\"], erule disjE, simp add:amin_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<Longrightarrow> amin x y = amin y x", "apply (simp add:amin_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amin_mult_pos:\"0 < z \\<Longrightarrow> amin (z *\\<^sub>a x) (z *\\<^sub>a y) = z *\\<^sub>a amin x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < z \\<Longrightarrow>\n    amin (z *\\<^sub>a x) (z *\\<^sub>a y) = z *\\<^sub>a amin x y", "by (simp add:amin_def, simp add:asprod_pos_mono)"], ["", "lemma amin_amult_pos:\"0 < z \\<Longrightarrow> \n         amin ((ant z) * x) ((ant z) * y) = (ant z) * amin x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < z \\<Longrightarrow> amin (ant z * x) (ant z * y) = ant z * amin x y", "by (simp add:asprod_amult[THEN sym], simp add:amin_mult_pos)"], ["", "lemma times_amin:\"\\<lbrakk>0 < a; amin (x * (ant a)) (y * (ant a)) \\<le> z * (ant a)\\<rbrakk> \\<Longrightarrow>\n                     amin x y \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; amin (x * ant a) (y * ant a) \\<le> z * ant a\\<rbrakk>\n    \\<Longrightarrow> amin x y \\<le> z", "by (frule amin_mult_pos[of \"a\" \"x\" \"y\"], simp add:asprod_amult,\n       simp add:amult_commute[of \"ant a\"], simp add:amult_pos_mono_r)"], ["", "lemma Amin_memTr:\"f \\<in> {i. i \\<le> n} \\<rightarrow> Z\\<^sub>\\<infinity>  \\<longrightarrow> Amin n f \\<in>  Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {i. i \\<le> n} \\<rightarrow>\n            Z\\<^sub>\\<infinity> \\<longrightarrow>\n    Amin n f \\<in> Z\\<^sub>\\<infinity>", "apply (induct_tac n,\n       simp add:Pi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       f \\<in> {i. i \\<le> n} \\<rightarrow>\n               Z\\<^sub>\\<infinity> \\<longrightarrow>\n       Amin n f \\<in> Z\\<^sub>\\<infinity> \\<Longrightarrow>\n       f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n               Z\\<^sub>\\<infinity> \\<longrightarrow>\n       Amin (Suc n) f \\<in> Z\\<^sub>\\<infinity>", "apply (rule impI,\n       frule_tac func_pre[of \"f\" _ \"Z\\<^sub>\\<infinity>\"],\n       simp, rule amin_mem_i, assumption+,\n       simp add:Pi_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amin_mem:\"f \\<in> {i. i \\<le> n} \\<rightarrow>  Z\\<^sub>\\<infinity> \\<Longrightarrow> Amin n f \\<in>  Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {i. i \\<le> n} \\<rightarrow>\n            Z\\<^sub>\\<infinity> \\<Longrightarrow>\n    Amin n f \\<in> Z\\<^sub>\\<infinity>", "apply (simp add:Amin_memTr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amax_memTr:\"f \\<in> {i. i \\<le> n} \\<rightarrow> Z\\<^sub>-\\<^sub>\\<infinity>  \\<longrightarrow> Amax n f \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {i. i \\<le> n} \\<rightarrow>\n            Z\\<^sub>-\\<^sub>\\<infinity> \\<longrightarrow>\n    Amax n f \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "apply (induct_tac n,\n       simp add:Pi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       f \\<in> {i. i \\<le> n} \\<rightarrow>\n               Z\\<^sub>-\\<^sub>\\<infinity> \\<longrightarrow>\n       Amax n f \\<in> Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow>\n       f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n               Z\\<^sub>-\\<^sub>\\<infinity> \\<longrightarrow>\n       Amax (Suc n) f \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "apply (rule impI,\n       frule_tac func_pre[of \"f\" _ \"Z\\<^sub>-\\<^sub>\\<infinity>\"],\n       simp, rule amax_mem_m, assumption+,\n       simp add:Pi_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amax_mem:\"f \\<in> {i. i \\<le> n} \\<rightarrow>  Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow> Amax n f \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {i. i \\<le> n} \\<rightarrow>\n            Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow>\n    Amax n f \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "apply (simp add:Amax_memTr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amin_mem_mem:\"\\<forall>j\\<le> n. f j \\<in> Z\\<^sub>\\<infinity> \\<Longrightarrow> Amin n f \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>n. f j \\<in> Z\\<^sub>\\<infinity> \\<Longrightarrow>\n    Amin n f \\<in> Z\\<^sub>\\<infinity>", "by (rule Amin_mem, simp)"], ["", "lemma Amax_mem_mem:\"\\<forall>j \\<le> n. f j \\<in> Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow> Amax n f \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>n.\n       f j \\<in> Z\\<^sub>-\\<^sub>\\<infinity> \\<Longrightarrow>\n    Amax n f \\<in> Z\\<^sub>-\\<^sub>\\<infinity>", "by (rule Amax_mem, simp)"], ["", "lemma Amin_leTr:\"f \\<in> {i. i \\<le> n} \\<rightarrow>  Z\\<^sub>\\<infinity> \\<longrightarrow> (\\<forall>j\\<in>{i. i \\<le> n}. Amin n f \\<le> (f j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {i. i \\<le> n} \\<rightarrow>\n            Z\\<^sub>\\<infinity> \\<longrightarrow>\n    (\\<forall>j\\<in>{i. i \\<le> n}. Amin n f \\<le> f j)", "apply (induct_tac n,\n       rule impI, rule ballI,\n       simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       f \\<in> {i. i \\<le> n} \\<rightarrow>\n               Z\\<^sub>\\<infinity> \\<longrightarrow>\n       (\\<forall>j\\<in>{i. i \\<le> n}. Amin n f \\<le> f j) \\<Longrightarrow>\n       f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n               Z\\<^sub>\\<infinity> \\<longrightarrow>\n       (\\<forall>j\\<in>{i. i \\<le> Suc n}. Amin (Suc n) f \\<le> f j)", "apply (rule impI, rule ballI, \n       frule func_pre, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n j.\n       \\<lbrakk>\\<forall>j\\<le>n. Amin n f \\<le> f j;\n        f \\<in> {i. i \\<le> Suc n} \\<rightarrow> Z\\<^sub>\\<infinity>;\n        j \\<le> Suc n;\n        f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> amin (Amin n f) (f (Suc n)) \\<le> f j", "apply (case_tac \"j = Suc n\", simp, rule amin_le_r)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n j.\n       \\<lbrakk>\\<forall>j\\<le>n. Amin n f \\<le> f j;\n        f \\<in> {i. i \\<le> Suc n} \\<rightarrow> Z\\<^sub>\\<infinity>;\n        j \\<le> Suc n;\n        f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>\\<infinity>;\n        j \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> amin (Amin n f) (f (Suc n)) \\<le> f j", "apply (cut_tac x = j and n = n in Nset_pre, simp, assumption,\n       cut_tac x = \"Amin n f\" and y = \"f (Suc n)\" in amin_le_l,\n       thin_tac \"j \\<le> Suc n\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n j.\n       \\<lbrakk>\\<forall>j\\<le>n. Amin n f \\<le> f j;\n        f \\<in> {i. i \\<le> Suc n} \\<rightarrow> Z\\<^sub>\\<infinity>;\n        f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>\\<infinity>; j \\<le> n;\n        amin (Amin n f) (f (Suc n)) \\<le> Amin n f\\<rbrakk>\n       \\<Longrightarrow> amin (Amin n f) (f (Suc n)) \\<le> f j", "apply (frule_tac x = j in spec,\n       thin_tac \"\\<forall>j\\<le>n. Amin n f \\<le> f j\", simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amin_le:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow>  Z\\<^sub>\\<infinity>; j \\<in> {k. k \\<le> n}\\<rbrakk> \\<Longrightarrow> Amin n f \\<le> (f j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>\\<infinity>;\n     j \\<in> {k. k \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> Amin n f \\<le> f j", "apply (simp add:Amin_leTr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amax_geTr:\"f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>-\\<^sub>\\<infinity> \\<longrightarrow> (\\<forall>j\\<in>{j. j \\<le> n}. (f j) \\<le> Amax n f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {j. j \\<le> n} \\<rightarrow>\n            Z\\<^sub>-\\<^sub>\\<infinity> \\<longrightarrow>\n    (\\<forall>j\\<in>{j. j \\<le> n}. f j \\<le> Amax n f)", "apply (induct_tac n,\n       rule impI, rule ballI,\n       simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       f \\<in> {j. j \\<le> n} \\<rightarrow>\n               Z\\<^sub>-\\<^sub>\\<infinity> \\<longrightarrow>\n       (\\<forall>j\\<in>{j. j \\<le> n}. f j \\<le> Amax n f) \\<Longrightarrow>\n       f \\<in> {j. j \\<le> Suc n} \\<rightarrow>\n               Z\\<^sub>-\\<^sub>\\<infinity> \\<longrightarrow>\n       (\\<forall>j\\<in>{j. j \\<le> Suc n}. f j \\<le> Amax (Suc n) f)", "apply (rule impI, rule ballI,\n       frule func_pre, simp,\n       case_tac \"j = Suc n\", simp, rule amax_ge_r,\n       cut_tac x = j and n = n in Nset_pre, simp, assumption,\n       thin_tac \"j \\<le> Suc n\",\n       simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n j.\n       \\<lbrakk>\\<forall>j\\<le>n. f j \\<le> Amax n f;\n        f \\<in> {j. j \\<le> Suc n} \\<rightarrow>\n                Z\\<^sub>-\\<^sub>\\<infinity>;\n        f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>-\\<^sub>\\<infinity>;\n        j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> f j \\<le> amax (Amax n f) (f (Suc n))", "apply (cut_tac x = \"Amax n f\" and y = \"f (Suc n)\" in amax_ge_l,\n       drule_tac x = j in spec, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amax_ge:\"\\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> Z\\<^sub>-\\<^sub>\\<infinity>; j \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n                                                 (f j) \\<le> (Amax n f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow>\n                     Z\\<^sub>-\\<^sub>\\<infinity>;\n     j \\<in> {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f j \\<le> Amax n f", "apply (simp add:Amax_geTr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amin_mem_le:\"\\<lbrakk>\\<forall>j \\<le> n. (f j) \\<in>  Z\\<^sub>\\<infinity>; j \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n                                           (Amin n f) \\<le> (f j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> Z\\<^sub>\\<infinity>;\n     j \\<in> {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> Amin n f \\<le> f j", "by (rule Amin_le, simp, simp)"], ["", "lemma Amax_mem_le:\"\\<lbrakk>\\<forall>j \\<le> n. (f j) \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>; j \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow> \n                                           (f j) \\<le> (Amax n f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     j \\<in> {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f j \\<le> Amax n f", "by (rule Amax_ge, simp, simp)"], ["", "lemma amin_ge1:\"\\<lbrakk>(z::ant) \\<le> x; z \\<le> y \\<rbrakk> \\<Longrightarrow> z \\<le> amin x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> x; z \\<le> y\\<rbrakk>\n    \\<Longrightarrow> z \\<le> amin x y", "by (simp add:amin_def)"], ["", "lemma amin_gt:\"\\<lbrakk>(z::ant) < x; z < y\\<rbrakk> \\<Longrightarrow> z < amin x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z < x; z < y\\<rbrakk> \\<Longrightarrow> z < amin x y", "apply (simp add:less_ant_def, (erule conjE)+,\n       rule conjI, simp add:amin_ge1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<le> x; z \\<noteq> x; z \\<le> y; z \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> z \\<noteq> amin x y", "apply (rule contrapos_pp, simp+,\n       case_tac \"x \\<le> y\", simp add:amin_def, simp add:amin_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amin_ge1Tr:\"(\\<forall>j\\<le>(Suc n). (f j) \\<in> Z\\<^sub>\\<infinity> \\<and> z \\<le> (f j)) \\<longrightarrow> \n                                            z \\<le> (Amin (Suc n) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>j\\<le>Suc n.\n        f j \\<in> Z\\<^sub>\\<infinity> \\<and> z \\<le> f j) \\<longrightarrow>\n    z \\<le> Amin (Suc n) f", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>j\\<le>Suc 0.\n        f j \\<in> Z\\<^sub>\\<infinity> \\<and> z \\<le> f j) \\<longrightarrow>\n    z \\<le> Amin (Suc 0) f\n 2. \\<And>n.\n       (\\<forall>j\\<le>Suc n.\n           f j \\<in> Z\\<^sub>\\<infinity> \\<and>\n           z \\<le> f j) \\<longrightarrow>\n       z \\<le> Amin (Suc n) f \\<Longrightarrow>\n       (\\<forall>j\\<le>Suc (Suc n).\n           f j \\<in> Z\\<^sub>\\<infinity> \\<and>\n           z \\<le> f j) \\<longrightarrow>\n       z \\<le> Amin (Suc (Suc n)) f", "apply (rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>j\\<le>Suc 0.\n       f j \\<in> Z\\<^sub>\\<infinity> \\<and> z \\<le> f j \\<Longrightarrow>\n    z \\<le> Amin (Suc 0) f\n 2. \\<And>n.\n       (\\<forall>j\\<le>Suc n.\n           f j \\<in> Z\\<^sub>\\<infinity> \\<and>\n           z \\<le> f j) \\<longrightarrow>\n       z \\<le> Amin (Suc n) f \\<Longrightarrow>\n       (\\<forall>j\\<le>Suc (Suc n).\n           f j \\<in> Z\\<^sub>\\<infinity> \\<and>\n           z \\<le> f j) \\<longrightarrow>\n       z \\<le> Amin (Suc (Suc n)) f", "apply (frule_tac x = 0 in spec,\n        frule_tac x = \"Suc 0\" in spec,\n        thin_tac \"\\<forall>j\\<le>Suc 0. f j \\<in> Z\\<^sub>\\<infinity> \\<and> z \\<le> f j\", simp, (erule conjE)+,\n        simp add:amin_ge1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>j\\<le>Suc n.\n           f j \\<in> Z\\<^sub>\\<infinity> \\<and>\n           z \\<le> f j) \\<longrightarrow>\n       z \\<le> Amin (Suc n) f \\<Longrightarrow>\n       (\\<forall>j\\<le>Suc (Suc n).\n           f j \\<in> Z\\<^sub>\\<infinity> \\<and>\n           z \\<le> f j) \\<longrightarrow>\n       z \\<le> Amin (Suc (Suc n)) f", "apply (rule impI,\n       simp,\n       frule_tac a = \"Suc (Suc n)\" in forall_spec,\n       thin_tac \"\\<forall>j\\<le>Suc (Suc n). f j \\<in> Z\\<^sub>\\<infinity> \\<and> z \\<le> f j\", simp,\n       thin_tac \"\\<forall>j\\<le>Suc (Suc n). f j \\<in> Z\\<^sub>\\<infinity> \\<and> z \\<le> f j\", erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>z \\<le> amin (Amin n f) (f (Suc n));\n        f (Suc (Suc n)) \\<in> Z\\<^sub>\\<infinity>;\n        z \\<le> f (Suc (Suc n))\\<rbrakk>\n       \\<Longrightarrow> z \\<le> amin (amin (Amin n f) (f (Suc n)))\n                                  (f (Suc (Suc n)))", "apply (rule amin_ge1, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Amin_ge1:\"\\<lbrakk> \\<forall>j \\<le> (Suc n). f j \\<in> Z\\<^sub>\\<infinity>; \\<forall>j \\<le> (Suc n). z \\<le> (f j)\\<rbrakk> \\<Longrightarrow> \n                             z \\<le> (Amin (Suc n) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>Suc n. f j \\<in> Z\\<^sub>\\<infinity>;\n     \\<forall>j\\<le>Suc n. z \\<le> f j\\<rbrakk>\n    \\<Longrightarrow> z \\<le> Amin (Suc n) f", "apply (simp del:Amin_Suc add:Amin_ge1Tr)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma amin_trans1:\"\\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>; z \\<in> Z\\<^sub>\\<infinity>; z \\<le> x \\<rbrakk> \\<Longrightarrow> \n                           amin z y \\<le> amin x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>;\n     z \\<in> Z\\<^sub>\\<infinity>; z \\<le> x\\<rbrakk>\n    \\<Longrightarrow> amin z y \\<le> amin x y", "apply (case_tac \"z \\<le> y\", simp add:amin_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>;\n     z \\<in> Z\\<^sub>\\<infinity>; z \\<le> x; \\<not> z \\<le> y\\<rbrakk>\n    \\<Longrightarrow> amin z y \\<le> amin x y", "apply (simp add:amin_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> Z\\<^sub>\\<infinity>; y \\<in> Z\\<^sub>\\<infinity>;\n     z \\<in> Z\\<^sub>\\<infinity>; z \\<le> x; \\<not> z \\<le> y\\<rbrakk>\n    \\<Longrightarrow> x \\<le> y \\<longrightarrow> y = x", "apply (simp only:aneg_le[of \"z\" \"y\"], frule aless_imp_le[of \"y\" \"z\"],\n        frule ale_trans[of \"y\" \"z\" \"x\"], assumption+, rule impI,\n        frule ale_antisym[of \"y\" \"x\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inf_in_aug_inf:\"\\<infinity>  \\<in> Z\\<^sub>\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<infinity> \\<in> Z\\<^sub>\\<infinity>", "apply (simp add:aug_inf_def, simp add:not_sym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Maximum element of a set of ants\""], ["", "primrec aasc_seq :: \"[ant set, ant, nat] \\<Rightarrow> ant\"\nwhere\n  aasc_seq_0   : \"aasc_seq A a 0 = a\"\n| aasc_seq_Suc : \"aasc_seq A a (Suc n) = \n                     (SOME b. ((b \\<in> A) \\<and> (aasc_seq A a n) < b))\""], ["", "lemma aasc_seq_mem:\"\\<lbrakk>a \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                            (aasc_seq A a n) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> aasc_seq A a n \\<in> A", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> aasc_seq A a 0 \\<in> A\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n        aasc_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> aasc_seq A a (Suc n) \\<in> A", "apply (simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> x \\<le> m);\n        aasc_seq A a n \\<in> A\\<rbrakk>\n       \\<Longrightarrow> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b)\n                         \\<in> A", "apply (simp add:aneg_le,\n        frule_tac a = \"aasc_seq A a n\" in forall_spec, assumption+,\n        thin_tac \"\\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x)\",\n        rule someI2_ex, blast, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aasc_seqn:\"\\<lbrakk>a \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                         (aasc_seq A a n) < (aasc_seq A a (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> aasc_seq A a n < aasc_seq A a (Suc n)", "apply (frule aasc_seq_mem [of \"a\" \"A\" \"n\"], assumption+,\n       simp add:aneg_le,\n       frule_tac a = \"aasc_seq A a n\" in forall_spec, assumption+,\n       thin_tac \"\\<forall>m. m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. m < x)\", rule someI2_ex, blast, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aasc_seqn1:\"\\<lbrakk>a \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                        (aasc_seq A a n) + 1 \\<le> (aasc_seq A a (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> aasc_seq A a n + 1 \\<le> aasc_seq A a (Suc n)", "by (frule aasc_seqn [of \"a\" \"A\" \"n\"], assumption+, simp)"], ["", "lemma aubs_ex_n_maxTr:\"\\<lbrakk>a \\<in> A; \\<not> (\\<exists>m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\\<rbrakk> \\<Longrightarrow>\n                                         (a + an n) \\<le> (aasc_seq A a n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> a + an n \\<le> aasc_seq A a n", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> A;\n     \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> a + an 0 \\<le> aasc_seq A a 0\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n        a + an n \\<le> aasc_seq A a n\\<rbrakk>\n       \\<Longrightarrow> a + an (Suc n) \\<le> aasc_seq A a (Suc n)", "apply (simp add:aadd_0_r,\n        frule_tac n = n in aasc_seqn1[of \"a\" \"A\"], assumption+,\n        cut_tac x = \"a + an n\" and y = \"aasc_seq A a n\" in \n        aadd_le_mono[of _ _ \"1\"], assumption, simp,\n        frule_tac i = \"a + an n + 1\" and j = \"aasc_seq A a n + 1\" and\n         k = \"(SOME b. b \\<in> A \\<and> aasc_seq A a n < b)\" in ale_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> x \\<le> m);\n        a + an n \\<le> aasc_seq A a n;\n        aasc_seq A a n + 1\n        \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b);\n        a + an n + 1 \\<le> aasc_seq A a n + 1;\n        a + an n + 1\n        \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b)\\<rbrakk>\n       \\<Longrightarrow> a + an (Suc n)\n                         \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b)", "apply (simp add:an_Suc,\n       case_tac \"a = -\\<infinity>\",\n       subst ant_1[THEN sym], simp del:ant_1 add:a_zpz an_def,\n       subgoal_tac \"a \\<in> Z\\<^sub>\\<infinity>\", subgoal_tac \"an n \\<in> Z\\<^sub>\\<infinity>\", \n       subgoal_tac \"1 \\<in> Z\\<^sub>\\<infinity>\", \n       subst aadd_assoc_i[THEN sym], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> x \\<le> m);\n        a + an n \\<le> aasc_seq A a n;\n        aasc_seq A a n + 1\n        \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b);\n        a + an n + 1 \\<le> aasc_seq A a n + 1;\n        a + an n + 1 \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b);\n        a \\<noteq> - \\<infinity>; a \\<in> Z\\<^sub>\\<infinity>;\n        an n \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> 1 \\<in> Z\\<^sub>\\<infinity>\n 2. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> x \\<le> m);\n        a + an n \\<le> aasc_seq A a n;\n        aasc_seq A a n + 1\n        \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b);\n        a + an n + 1 \\<le> aasc_seq A a n + 1;\n        a + an n + 1 \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b);\n        a \\<noteq> - \\<infinity>; a \\<in> Z\\<^sub>\\<infinity>\\<rbrakk>\n       \\<Longrightarrow> an n \\<in> Z\\<^sub>\\<infinity>\n 3. \\<And>n.\n       \\<lbrakk>a \\<in> A;\n        \\<forall>m.\n           m \\<in> A \\<longrightarrow> (\\<exists>x\\<in>A. \\<not> x \\<le> m);\n        a + an n \\<le> aasc_seq A a n;\n        aasc_seq A a n + 1\n        \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b);\n        a + an n + 1 \\<le> aasc_seq A a n + 1;\n        a + an n + 1 \\<le> (SOME b. b \\<in> A \\<and> aasc_seq A a n < b);\n        a \\<noteq> - \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> a \\<in> Z\\<^sub>\\<infinity>", "apply (subst ant_1[THEN sym], simp del:ant_1 add:aug_inf_def,\n       (simp add:aug_inf_def an_def)+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aubs_ex_AMax:\"\\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (case_tac \"A = {-\\<infinity>}\", simp,\n      frule not_sub_single[of \"A\" \"-\\<infinity>\"], assumption+,\n      frule not_sub[of \"A\" \"{-\\<infinity>}\"],\n      erule exE, erule conjE, simp, rename_tac a, rule ex_ex1I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\n 2. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> y)\\<rbrakk>\n       \\<Longrightarrow> m = y", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a m y.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>;\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> y)\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply ((erule conjE)+, \n        frule_tac x = y in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>A. x \\<le> m\",\n        frule_tac x = m in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>A. x \\<le> y\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)", "apply (rule contrapos_pp, simp,\n       subgoal_tac \"\\<exists>w. a = ant w\", erule exE,\n       frule_tac a = a and A = A  and n = \"nat ((abs w) + (abs z) + 1)\" in \n       aubs_ex_n_maxTr, simp, \n       frule_tac a = a and n = \"nat ((abs w) + (abs z) + 1)\" in \n       aasc_seq_mem[of _ \"A\"], assumption,\n       thin_tac \"\\<not> (\\<exists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\",\n       simp add:UBset_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a w.\n       \\<lbrakk>A \\<subseteq> {x. x \\<le> ant z}; A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        ant w \\<in> A; a = ant w;\n        ant w + an (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<le> aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1));\n        aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<in> A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w. a = ant w", "apply (frule_tac c = \"aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\" in \n       subsetD[of \"A\" \"{x. x \\<le> ant z}\"], assumption+,\n       simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a w.\n       \\<lbrakk>A \\<subseteq> {x. x \\<le> ant z}; A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        ant w \\<in> A; a = ant w;\n        ant w + an (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<le> aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1));\n        aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<in> A;\n        aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<le> ant z\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w. a = ant w", "apply(frule_tac i = \"ant w + an (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\" and \n       j = \"aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\" and \n        k = \"ant z\" in ale_trans, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a w.\n       \\<lbrakk>A \\<subseteq> {x. x \\<le> ant z}; A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        ant w \\<in> A; a = ant w;\n        ant w + an (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<le> aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1));\n        aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<in> A;\n        aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<le> ant z;\n        ant w + an (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n        \\<le> ant z\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w. a = ant w", "apply (thin_tac \"ant w + an (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\n           \\<le> aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1))\",\n       thin_tac \"aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1)) \\<in> A\",\n       thin_tac \"aasc_seq A (ant w) (nat (\\<bar>w\\<bar> + \\<bar>z\\<bar> + 1)) \\<le> ant z\",\n       simp add:an_def a_zpz)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n        A \\<noteq> {- \\<infinity>}; \\<not> A \\<subseteq> {- \\<infinity>};\n        a \\<in> A; a \\<noteq> - \\<infinity>;\n        \\<nexists>m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w. a = ant w", "apply (cut_tac a = a in mem_ant, erule disjE, simp, erule disjE, erule exE,\n        simp, simp add:UBset_def, frule subsetD[of \"A\" \"{x. x \\<le> ant z}\" \"\\<infinity>\"],\n        assumption+, simp, cut_tac inf_ge_any[of \"ant z\"], \n        frule_tac ale_antisym[of \"ant z\" \"\\<infinity>\"], assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  AMax :: \"ant set \\<Rightarrow> ant\" where\n  \"AMax A = (THE m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\""], ["", "definition\n  AMin::\"ant set \\<Rightarrow> ant\" where\n  \"AMin A = (THE m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\""], ["", "definition\n  rev_o :: \"ant \\<Rightarrow> ant\" where\n  \"rev_o x = - x\""], ["", "lemma AMax:\"\\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n                    (AMax A) \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> (AMax A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> AMax A \\<in> A \\<and>\n                      (\\<forall>x\\<in>A. x \\<le> AMax A)", "apply (simp add:AMax_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (THE m.\n                          m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\n                      \\<in> A \\<and>\n                      (\\<forall>x\\<in>A.\n                          x \\<le> (THE m.\nm \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)))", "apply (frule aubs_ex_AMax[of \"A\" \"z\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> (THE m.\n                          m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m))\n                      \\<in> A \\<and>\n                      (\\<forall>x\\<in>A.\n                          x \\<le> (THE m.\nm \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)))", "apply (rule theI')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. x \\<le> m)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!x.\n                         x \\<in> A \\<and> (\\<forall>xa\\<in>A. xa \\<le> x)", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AMax_mem:\"\\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> (AMax A) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> UBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> AMax A \\<in> A", "apply (simp add:AMax[of \"A\" \"z\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rev_map_nonempty:\"A \\<noteq> {} \\<Longrightarrow> rev_o ` A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> rev_o ` A \\<noteq> {}", "by (rule contrapos_pp, simp+)"], ["", "lemma rev_map:\"rev_o \\<in> LBset (ant (-z)) \\<rightarrow> UBset (ant z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_o \\<in> LBset (ant (- z)) \\<rightarrow> UBset (ant z)", "by  (rule Pi_I, simp add:UBset_def LBset_def rev_o_def,\n     frule_tac x = \"ant (-z)\" and y = x in ale_minus, simp add:aminus)"], ["", "lemma albs_ex_AMin:\"\\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \\<exists>!m. m\\<in>A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (rule ex_ex1I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\n 2. \\<And>m y.\n       \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {};\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> m = y", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m y.\n       \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {};\n        m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x);\n        y \\<in> A \\<and> (\\<forall>x\\<in>A. y \\<le> x)\\<rbrakk>\n       \\<Longrightarrow> m = y\n 2. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply ((erule conjE)+, \n        frule_tac x = y in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>A. m \\<le> x\",\n        frule_tac x = m in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>A. y \\<le> x\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m.\n                         m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)", "apply (subgoal_tac \"- AMax (rev_o ` A) \\<in> A \\<and> \n                       (\\<forall>x \\<in> A. (- AMax (rev_o ` A)) \\<le> x)\", blast,\n       cut_tac rev_map[of \"-z\"], simp add:a_minus_minus,\n       frule rev_map_nonempty[of \"A\"], \n       frule image_sub[of \"rev_o\" \"LBset (ant z)\" \"UBset (ant (-z))\" \"A\"],\n       assumption+, frule AMax[of \"rev_o ` A\" \"-z\"], assumption+,\n       erule conjE,\n       rule conjI, thin_tac \"\\<forall>x\\<in>rev_o ` A. x \\<le> AMax (rev_o ` A)\",\n        thin_tac \"rev_o \\<in> LBset (ant z) \\<rightarrow> UBset (ant (- z))\", \n        thin_tac \"rev_o ` A \\<noteq> {}\",\n        thin_tac \"rev_o ` A \\<subseteq> UBset (ant (- z))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {};\n     AMax (rev_o ` A) \\<in> rev_o ` A\\<rbrakk>\n    \\<Longrightarrow> - AMax (rev_o ` A) \\<in> A\n 2. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {};\n     rev_o \\<in> LBset (ant z) \\<rightarrow> UBset (ant (- z));\n     rev_o ` A \\<noteq> {}; rev_o ` A \\<subseteq> UBset (ant (- z));\n     AMax (rev_o ` A) \\<in> rev_o ` A;\n     \\<forall>x\\<in>rev_o ` A. x \\<le> AMax (rev_o ` A)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>A. - AMax (rev_o ` A) \\<le> x", "apply (simp add:image_def rev_o_def,\n       erule bexE, simp add:a_minus_minus, rule ballI,\n       subgoal_tac \"rev_o x \\<in> rev_o ` A\",\n        frule_tac x = \"rev_o x\" in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>rev_o ` A. x \\<le> AMax (rev_o ` A)\",\n        thin_tac \"rev_o \\<in> LBset (ant z) \\<rightarrow> UBset (ant (- z))\", \n        thin_tac \"rev_o ` A \\<noteq> {}\",\n        thin_tac \"rev_o ` A \\<subseteq> UBset (ant (- z))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {};\n        AMax (rev_o ` A) \\<in> rev_o ` A; x \\<in> A;\n        rev_o x \\<in> rev_o ` A; rev_o x \\<le> AMax (rev_o ` A)\\<rbrakk>\n       \\<Longrightarrow> - AMax (rev_o ` A) \\<le> x\n 2. \\<And>x.\n       \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {};\n        rev_o \\<in> LBset (ant z) \\<rightarrow> UBset (ant (- z));\n        rev_o ` A \\<noteq> {}; rev_o ` A \\<subseteq> UBset (ant (- z));\n        AMax (rev_o ` A) \\<in> rev_o ` A;\n        \\<forall>x\\<in>rev_o ` A. x \\<le> AMax (rev_o ` A);\n        x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> rev_o x \\<in> rev_o ` A", "apply (simp add:image_def rev_o_def, erule bexE, simp add:a_minus_minus,\n       frule_tac x = \"-x\" and y = \"-xa\" in ale_minus, simp add:a_minus_minus,\n       simp add:image_def, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AMin:\"\\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> \n                    (AMin A) \\<in> A \\<and> (\\<forall>x\\<in>A. (AMin A) \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> AMin A \\<in> A \\<and>\n                      (\\<forall>x\\<in>A. AMin A \\<le> x)", "apply (simp add:AMin_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> (THE m.\n                          m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\n                      \\<in> A \\<and>\n                      (\\<forall>x\\<in>A.\n                          (THE m.\n                              m \\<in> A \\<and>\n                              (\\<forall>x\\<in>A. m \\<le> x))\n                          \\<le> x)", "apply (frule albs_ex_AMin[of \"A\" \"z\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> (THE m.\n                          m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x))\n                      \\<in> A \\<and>\n                      (\\<forall>x\\<in>A.\n                          (THE m.\n                              m \\<in> A \\<and>\n                              (\\<forall>x\\<in>A. m \\<le> x))\n                          \\<le> x)", "apply (rule theI')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {};\n     \\<exists>!m. m \\<in> A \\<and> (\\<forall>x\\<in>A. m \\<le> x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!x.\n                         x \\<in> A \\<and> (\\<forall>xa\\<in>A. x \\<le> xa)", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AMin_mem:\"\\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> (AMin A) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> LBset (ant z); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> AMin A \\<in> A", "apply (simp add:AMin)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec ASum :: \"(nat \\<Rightarrow> ant) \\<Rightarrow> nat \\<Rightarrow> ant\"\nwhere\n  ASum_0: \"ASum f 0 = f 0\"\n| ASum_Suc: \"ASum f (Suc n) = (ASum f n) + (f (Suc n))\""], ["", "lemma age_plus:\"\\<lbrakk>0 \\<le> (a::ant); 0 \\<le> b; a + b \\<le> c\\<rbrakk> \\<Longrightarrow> a \\<le> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> a; 0 \\<le> b; a + b \\<le> c\\<rbrakk>\n    \\<Longrightarrow> a \\<le> c", "apply (frule aadd_le_mono[of \"0\" \"b\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> a; 0 \\<le> b; a + b \\<le> c; 0 + a \\<le> b + a\\<rbrakk>\n    \\<Longrightarrow> a \\<le> c", "apply (simp add:aadd_commute[of \"b\" \"a\"] aadd_0_l)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma age_diff_le:\"\\<lbrakk>(a::ant) \\<le> c; 0 \\<le> b\\<rbrakk> \\<Longrightarrow> a - b \\<le> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> c; 0 \\<le> b\\<rbrakk> \\<Longrightarrow> a - b \\<le> c", "apply (frule ale_minus[of \"0\" \"b\"], thin_tac \"0 \\<le> b\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> c; - b \\<le> 0\\<rbrakk> \\<Longrightarrow> a - b \\<le> c", "apply (frule aadd_le_mono[of \"a\" \"c\" \"-b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> c; - b \\<le> 0; a + - b \\<le> c + - b\\<rbrakk>\n    \\<Longrightarrow> a - b \\<le> c", "apply (frule aadd_le_mono[of \"-b\" \"0\" \"c\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> c; - b \\<le> 0; a + - b \\<le> c + - b;\n     - b + c \\<le> 0 + c\\<rbrakk>\n    \\<Longrightarrow> a - b \\<le> c", "apply (thin_tac \"a \\<le> c\", thin_tac \"- b \\<le> 0\",\n       simp add:aadd_commute[of \"-b\" \"c\"] aadd_0_l)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a + - b \\<le> c + - b; c + - b \\<le> c\\<rbrakk>\n    \\<Longrightarrow> a - b \\<le> c", "apply (simp add:diff_ant_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma adiff_le_adiff:\"a \\<le> (a'::ant) \\<Longrightarrow> a - b \\<le> a' - b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> a' \\<Longrightarrow> a - b \\<le> a' - b", "apply (simp add:diff_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> a' \\<Longrightarrow> a + - b \\<le> a' + - b", "apply (rule aadd_le_mono[of \"a\" \"a'\" \"-b\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aplus_le_aminus:\"\\<lbrakk> a \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>; b \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>; c \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>; -b \\<in>  Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk> \\<Longrightarrow> \n                 ((a + b) \\<le> (c::ant)) = (a \\<le> c - b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (a + b \\<le> c) = (a \\<le> c - b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a + b \\<le> c\\<rbrakk>\n    \\<Longrightarrow> a \\<le> c - b\n 2. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a \\<le> c - b\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> c", "apply (frule aadd_le_mono[of \"a + b\" \"c\" \"-b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a + b \\<le> c;\n     a + b + - b \\<le> c + - b\\<rbrakk>\n    \\<Longrightarrow> a \\<le> c - b\n 2. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a \\<le> c - b\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> c", "apply (simp add:aadd_assoc_m, simp add:aadd_minus_r)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a + b \\<le> c;\n     a + 0 \\<le> c + - b\\<rbrakk>\n    \\<Longrightarrow> a \\<le> c - b\n 2. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a \\<le> c - b\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> c", "apply (simp add:aadd_0_r, simp add:diff_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a \\<le> c - b\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> c", "apply (frule aadd_le_mono[of \"a\" \"c - b\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a \\<le> c - b;\n     a + b \\<le> c - b + b\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> c", "apply (simp add:diff_ant_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a \\<le> c + - b;\n     a + b \\<le> c + - b + b\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> c", "apply (simp add:aadd_assoc_m)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a \\<le> c + - b;\n     a + b \\<le> c + (- b + b)\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> c", "apply (simp add:aadd_minus_inv[of \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     c \\<in> Z\\<^sub>-\\<^sub>\\<infinity>;\n     - b \\<in> Z\\<^sub>-\\<^sub>\\<infinity>; a \\<le> c + - b;\n     a + b \\<le> c + 0\\<rbrakk>\n    \\<Longrightarrow> a + b \\<le> c", "apply (simp add: aadd_0_r)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \"Cardinality of sets\""], ["", "text \\<open>cardinality is defined for the finite sets only\\<close>"], ["", "lemma card_eq:\"A = B \\<Longrightarrow> card A = card B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B \\<Longrightarrow> card A = card B", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma card0:\"card {} = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {} = 0", "by  simp"], ["", "lemma card_nonzero:\"\\<lbrakk>finite A; card A \\<noteq> 0\\<rbrakk> \\<Longrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> A \\<noteq> {}", "by (rule contrapos_pp, simp+)"], ["", "lemma finite1:\"finite {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {a}", "by  simp"], ["", "lemma card1:\"card {a} = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a} = 1", "by simp"], ["", "lemma nonempty_card_pos:\"\\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> 0 < card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> 0 < card A", "apply (frule nonempty_ex [of \"A\"], erule exE,\n       frule_tac a = x and A = A in singleton_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite A; A \\<noteq> {}; x \\<in> A;\n        {x} \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> 0 < card A", "apply (frule_tac B = A and A = \"{x}\" in card_mono, assumption+,\n       simp add:card1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nonempty_card_pos1:\"\\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk> \\<Longrightarrow> Suc 0 \\<le> card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Suc 0 \\<le> card A", "apply (frule nonempty_card_pos[of \"A\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; A \\<noteq> {}; 0 < card A\\<rbrakk>\n    \\<Longrightarrow> Suc 0 \\<le> card A", "apply (rule Suc_leI[of \"0\" \"card A\"], assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma card1_tr0:\"\\<lbrakk> finite A; card A = Suc 0; a \\<in> A \\<rbrakk> \\<Longrightarrow> {a} = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc 0; a \\<in> A\\<rbrakk>\n    \\<Longrightarrow> {a} = A", "apply (cut_tac card1[of \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc 0; a \\<in> A; card {a} = 1\\<rbrakk>\n    \\<Longrightarrow> {a} = A", "apply (rule card_seteq[of \"A\" \"{a}\"], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; card A = Suc 0; a \\<in> A; card {a} = 1\\<rbrakk>\n    \\<Longrightarrow> {a} \\<subseteq> A\n 2. \\<lbrakk>finite A; card A = Suc 0; a \\<in> A; card {a} = 1\\<rbrakk>\n    \\<Longrightarrow> card A \\<le> card {a}", "apply (rule singleton_sub[of \"a\" \"A\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc 0; a \\<in> A; card {a} = 1\\<rbrakk>\n    \\<Longrightarrow> card A \\<le> card {a}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma card1_tr1:\"(constmap {0::nat} {x}) \\<in> {0} \\<rightarrow> {x} \\<and>\n                       surj_to (constmap {0::nat} {x}) {0} {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. constmap {0} {x} \\<in> {0} \\<rightarrow> {x} \\<and>\n    surj_to (constmap {0} {x}) {0} {x}", "apply (rule conjI, simp add:constmap_def Pi_def,\n       simp add:surj_to_def image_def constmap_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma card1_Tr2:\"\\<lbrakk>finite A; card A = Suc 0\\<rbrakk> \\<Longrightarrow> \n                  \\<exists>f. f \\<in> {0::nat} \\<rightarrow> A \\<and> surj_to f {0} A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f \\<in> {0} \\<rightarrow> A \\<and> surj_to f {0} A", "apply (frule card_nonzero[of \"A\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc 0; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f \\<in> {0} \\<rightarrow> A \\<and> surj_to f {0} A", "apply (cut_tac nonempty_ex[of \"A\"], erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite A; card A = Suc 0; A \\<noteq> {}; x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {0} \\<rightarrow> A \\<and>\n                            surj_to f {0} A\n 2. \\<lbrakk>finite A; card A = Suc 0; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<noteq> {}", "apply (frule_tac a = x in card1_tr0[of \"A\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite A; card A = Suc 0; A \\<noteq> {}; x \\<in> A;\n        {x} = A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {0} \\<rightarrow> A \\<and>\n                            surj_to f {0} A\n 2. \\<lbrakk>finite A; card A = Suc 0; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<noteq> {}", "apply (rotate_tac -1, frule sym, thin_tac \"{x} = A\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       A = {x} \\<Longrightarrow>\n       \\<exists>f. f 0 = x \\<and> surj_to f {0} {x}\n 2. \\<lbrakk>finite A; card A = Suc 0; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> A \\<noteq> {}", "apply (cut_tac x = x in card1_tr1, blast, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma card2:\"\\<lbrakk> finite A; a \\<in> A; b \\<in> A; a \\<noteq> b \\<rbrakk> \\<Longrightarrow> Suc (Suc 0) \\<le> card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply (cut_tac card1[of \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b;\n     card {a} = 1\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply (frule singleton_sub[of \"b\" \"A\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b; card {a} = 1;\n     {b} \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply (frule finite_subset[of \"{b}\" \"A\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b; card {a} = 1;\n     {b} \\<subseteq> A; finite {b}\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply (frule card_insert_disjoint[of \"{b}\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b; card {a} = 1;\n     {b} \\<subseteq> A; finite {b}\\<rbrakk>\n    \\<Longrightarrow> a \\<notin> {b}\n 2. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b; card {a} = 1;\n     {b} \\<subseteq> A; finite {b}; card {a, b} = Suc (card {b})\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b; card {a} = 1;\n     {b} \\<subseteq> A; finite {b}; card {a, b} = Suc (card {b})\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply (simp only:card1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b; 1 = 1;\n     {b} \\<subseteq> A; finite {b}; card {a, b} = Suc 1\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply (frule insert_sub[of \"{b}\" \"A\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b; 1 = 1;\n     {b} \\<subseteq> A; finite {b}; card {a, b} = Suc 1;\n     {a, b} \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply (frule card_mono [of \"A\" \"{a, b}\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; a \\<in> A; b \\<in> A; a \\<noteq> b; 1 = 1;\n     {b} \\<subseteq> A; finite {b}; card {a, b} = Suc 1;\n     {a, b} \\<subseteq> A; card {a, b} \\<le> card A\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) \\<le> card A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma card2_inc_two:\"\\<lbrakk>0 < (n::nat); x \\<in> {j. j \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                                  \\<exists>y \\<in> {j. j \\<le> n}. x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; x \\<in> {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y\\<in>{j. j \\<le> n}. x \\<noteq> y", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; x \\<le> n; \\<forall>y\\<le>n. x = y\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac m = 0 and n = n in Suc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; x \\<le> n; \\<forall>y\\<le>n. x = y;\n     Suc 0 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> False", "apply (\n        frule_tac a = \"Suc 0\" in forall_spec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; x \\<le> n; \\<forall>y\\<le>n. x = y; Suc 0 \\<le> n;\n     x = Suc 0\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac a = 0 in forall_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < n; x \\<le> n; \\<forall>y\\<le>n. x = y; Suc 0 \\<le> n;\n     x = Suc 0\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> n\n 2. \\<lbrakk>0 < n; x \\<le> n; \\<forall>y\\<le>n. x = y; Suc 0 \\<le> n;\n     x = Suc 0; x = 0\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule less_imp_le, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; x \\<le> n; \\<forall>y\\<le>n. x = y; Suc 0 \\<le> n;\n     x = Suc 0; x = 0\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset2_prep1:\"\\<lbrakk>finite A; card A = Suc (Suc n) \\<rbrakk> \\<Longrightarrow> \\<exists>x. x\\<in>A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc (Suc n)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> A", "apply (frule card_nonzero[of \"A\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; card A = Suc (Suc n)\\<rbrakk>\n    \\<Longrightarrow> card A \\<noteq> 0\n 2. \\<lbrakk>finite A; card A = Suc (Suc n); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc (Suc n); A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. x \\<in> A", "apply (simp add:nonempty_ex)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ex_least_set:\"\\<lbrakk>A = {H. finite H \\<and> P H}; H \\<in> A\\<rbrakk> \\<Longrightarrow> \n                       \\<exists>K \\<in> A. (LEAST j. j \\<in> (card ` A)) =  card K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A = {H. finite H \\<and> P H}; H \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>K\\<in>A. (LEAST j. j \\<in> card ` A) = card K", "(* proof by L. C. Paulson *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A = {H. finite H \\<and> P H}; H \\<in> A\\<rbrakk>\n    \\<Longrightarrow> \\<exists>K\\<in>A. (LEAST j. j \\<in> card ` A) = card K", "by (simp add:image_def, rule LeastI, rule_tac x = \"H\" in exI, simp)"], ["", "lemma Nset2_prep2:\"x \\<in> A \\<Longrightarrow> A - {x} \\<union> {x} = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A \\<Longrightarrow> A - {x} \\<union> {x} = A", "by auto"], ["", "lemma Nset2_finiteTr:\"\\<forall>A. (finite A \\<and>(card A = Suc n) \\<longrightarrow> \n     (\\<exists>f. f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and> surj_to f {i. i \\<le> n} A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       finite A \\<and> card A = Suc n \\<longrightarrow>\n       (\\<exists>f.\n           f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and>\n           surj_to f {i. i \\<le> n} A)", "apply (induct_tac n, rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>finite A; card A = Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> 0} \\<rightarrow> A \\<and>\n                            surj_to f {i. i \\<le> 0} A\n 2. \\<And>n.\n       \\<forall>A.\n          finite A \\<and> card A = Suc n \\<longrightarrow>\n          (\\<exists>f.\n              f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and>\n              surj_to f {i. i \\<le> n} A) \\<Longrightarrow>\n       \\<forall>A.\n          finite A \\<and> card A = Suc (Suc n) \\<longrightarrow>\n          (\\<exists>f.\n              f \\<in> {i. i \\<le> Suc n} \\<rightarrow> A \\<and>\n              surj_to f {i. i \\<le> Suc n} A)", "apply (simp add: card1_Tr2 del: Pi_split_insert_domain)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>A.\n          finite A \\<and> card A = Suc n \\<longrightarrow>\n          (\\<exists>f.\n              f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and>\n              surj_to f {i. i \\<le> n} A) \\<Longrightarrow>\n       \\<forall>A.\n          finite A \\<and> card A = Suc (Suc n) \\<longrightarrow>\n          (\\<exists>f.\n              f \\<in> {i. i \\<le> Suc n} \\<rightarrow> A \\<and>\n              surj_to f {i. i \\<le> Suc n} A)", "(* n *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>A.\n          finite A \\<and> card A = Suc n \\<longrightarrow>\n          (\\<exists>f.\n              f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and>\n              surj_to f {i. i \\<le> n} A) \\<Longrightarrow>\n       \\<forall>A.\n          finite A \\<and> card A = Suc (Suc n) \\<longrightarrow>\n          (\\<exists>f.\n              f \\<in> {i. i \\<le> Suc n} \\<rightarrow> A \\<and>\n              surj_to f {i. i \\<le> Suc n} A)", "apply (rule allI, rule impI, erule conjE, frule Nset2_prep1, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A.\n       \\<lbrakk>\\<forall>A.\n                   finite A \\<and> card A = Suc n \\<longrightarrow>\n                   (\\<exists>f.\n                       f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and>\n                       surj_to f {i. i \\<le> n} A);\n        finite A; card A = Suc (Suc n); \\<exists>x. x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                    A \\<and>\n                            surj_to f {i. i \\<le> Suc n} A", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x.\n       \\<lbrakk>\\<forall>A.\n                   finite A \\<and> card A = Suc n \\<longrightarrow>\n                   (\\<exists>f.\n                       f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and>\n                       surj_to f {i. i \\<le> n} A);\n        finite A; card A = Suc (Suc n); x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                    A \\<and>\n                            surj_to f {i. i \\<le> Suc n} A", "apply(drule_tac a = \"A - {x}\" in forall_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n A x.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A\\<rbrakk>\n       \\<Longrightarrow> finite (A - {x}) \\<and> card (A - {x}) = Suc n\n 2. \\<And>n A x.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A;\n        \\<exists>f.\n           f \\<in> {i. i \\<le> n} \\<rightarrow> A - {x} \\<and>\n           surj_to f {i. i \\<le> n} (A - {x})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                    A \\<and>\n                            surj_to f {i. i \\<le> Suc n} A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A;\n        \\<exists>f.\n           f \\<in> {i. i \\<le> n} \\<rightarrow> A - {x} \\<and>\n           surj_to f {i. i \\<le> n} (A - {x})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                    A \\<and>\n                            surj_to f {i. i \\<le> Suc n} A", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x f.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A;\n        f \\<in> {i. i \\<le> n} \\<rightarrow> A - {x} \\<and>\n        surj_to f {i. i \\<le> n} (A - {x})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                    A \\<and>\n                            surj_to f {i. i \\<le> Suc n} A", "apply (cut_tac x = x in card1_tr1, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x f.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A;\n        f \\<in> {i. i \\<le> n} \\<rightarrow> A - {x};\n        surj_to f {i. i \\<le> n} (A - {x});\n        constmap {0} {x} \\<in> {0} \\<rightarrow> {x};\n        surj_to (constmap {0} {x}) {0} {x}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                    A \\<and>\n                            surj_to f {i. i \\<le> Suc n} A", "apply (frule_tac f = f and n = n and A = \"A - {x}\" and \n       g = \"constmap {0} {x}\" and m = 0 and B = \"{x}\" in jointfun_surj,\n       assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n A x f.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A;\n        f \\<in> {i. i \\<le> n} \\<rightarrow> A - {x};\n        surj_to f {i. i \\<le> n} (A - {x});\n        constmap {0} {x} \\<in> {0} \\<rightarrow> {x};\n        surj_to (constmap {0} {x}) {0} {x}\\<rbrakk>\n       \\<Longrightarrow> constmap {0} {x}\n                         \\<in> {j. j \\<le> 0} \\<rightarrow> {x}\n 2. \\<And>n A x f.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A;\n        f \\<in> {i. i \\<le> n} \\<rightarrow> A - {x};\n        surj_to f {i. i \\<le> n} (A - {x});\n        constmap {0} {x} \\<in> {0} \\<rightarrow> {x};\n        surj_to (constmap {0} {x}) {0} {x}\\<rbrakk>\n       \\<Longrightarrow> surj_to (constmap {0} {x}) {j. j \\<le> 0} {x}\n 3. \\<And>n A x f.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A;\n        f \\<in> {i. i \\<le> n} \\<rightarrow> A - {x};\n        surj_to f {i. i \\<le> n} (A - {x});\n        constmap {0} {x} \\<in> {0} \\<rightarrow> {x};\n        surj_to (constmap {0} {x}) {0} {x};\n        surj_to (jointfun n f 0 (constmap {0} {x})) {j. j \\<le> Suc (n + 0)}\n         (A - {x} \\<union> {x})\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                    A \\<and>\n                            surj_to f {i. i \\<le> Suc n} A", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n A x f.\n       \\<lbrakk>finite A; card A = Suc (Suc n); x \\<in> A;\n        f \\<in> {i. i \\<le> n} \\<rightarrow> A - {x};\n        surj_to f {i. i \\<le> n} (A - {x}); constmap {0} {x} 0 = x;\n        surj_to (constmap {0} {x}) {0} {x};\n        surj_to (jointfun n f 0 (constmap {0} {x})) {j. j \\<le> Suc n}\n         (insert x A)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                    A \\<and>\n                            surj_to f {i. i \\<le> Suc n} A", "apply (frule_tac f = f and n = n and A = \"A - {x}\" and \n        g = \"constmap {0} {x}\" and m = 0 and B = \"{x}\" in jointfun_hom0,\n        simp,\n        frule_tac x = x and A = A in Nset2_prep2, simp, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset2_finite:\"\\<lbrakk> finite A; card A = Suc n\\<rbrakk> \\<Longrightarrow>\n                       \\<exists>f. f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and> surj_to f {i. i \\<le> n} A \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         f \\<in> {i. i \\<le> n} \\<rightarrow> A \\<and>\n                         surj_to f {i. i \\<le> n} A", "by (simp add:Nset2_finiteTr)"], ["", "lemma Nset2finite_inj_tr0:\"j \\<in> {i. i \\<le> (n::nat)} \\<Longrightarrow>\n                                     card ({i. i \\<le> n} - {j}) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<in> {i. i \\<le> n} \\<Longrightarrow> card ({i. i \\<le> n} - {j}) = n", "by simp"], ["", "lemma Nset2finite_inj_tr1:\"\\<lbrakk> i \\<le> (n::nat); j \\<le> n; f i = f j; i \\<noteq> j \\<rbrakk> \\<Longrightarrow> \n       f ` ({i. i \\<le> n} - {j}) = f ` {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; f i = f j; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> f ` ({i. i \\<le> n} - {j}) = f ` {i. i \\<le> n}", "apply (simp add:image_def, rule equalityI, rule subsetI, simp add:CollectI,\n       erule bexE, case_tac \"xa = j\", frule sym, thin_tac \"f i = f j\", \n       simp, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; f i = f j; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> {y. \\<exists>x\\<le>n. y = f x}\n                      \\<subseteq> {y. \\<exists>x\\<in>{i. i \\<le> n} - {j}.\n   y = f x}", "apply (rule subsetI, simp, erule exE, case_tac \"xa = j\", frule sym, \n       thin_tac \"f i = f j\", blast, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset2finite_inj:\"\\<lbrakk>finite A; card A = Suc n; surj_to f {i. i \\<le> n} A \\<rbrakk> \\<Longrightarrow> \n        inj_on f {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; card A = Suc n; surj_to f {i. i \\<le> n} A\\<rbrakk>\n    \\<Longrightarrow> inj_on f {i. i \\<le> n}", "by (metis card_Collect_le_nat eq_card_imp_inj_on finite_Collect_le_nat surj_to_def)"], ["", "definition\n  zmax :: \"[int, int] \\<Rightarrow> int\" where\n  \"zmax x y = (if (x \\<le> y) then y else x)\""], ["", "primrec Zmax :: \"[nat, nat \\<Rightarrow> int] \\<Rightarrow> int\"\nwhere\n  Zmax_0 : \"Zmax 0 f = f 0\"\n| Zmax_Suc :\"Zmax (Suc n) f = zmax (Zmax n f) (f (Suc n))\""], ["", "lemma Zmax_memTr:\"f \\<in> {i. i \\<le> (n::nat)} \\<rightarrow> (UNIV::int set) \\<longrightarrow>\n                                       Zmax n f \\<in> f ` {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {i. i \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n    Zmax n f \\<in> f ` {i. i \\<le> n}", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f \\<in> {i. i \\<le> 0} \\<rightarrow> UNIV \\<longrightarrow>\n    Zmax 0 f \\<in> f ` {i. i \\<le> 0}\n 2. \\<And>n.\n       f \\<in> {i. i \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n       Zmax n f \\<in> f ` {i. i \\<le> n} \\<Longrightarrow>\n       f \\<in> {i. i \\<le> Suc n} \\<rightarrow> UNIV \\<longrightarrow>\n       Zmax (Suc n) f \\<in> f ` {i. i \\<le> Suc n}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       f \\<in> {i. i \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n       Zmax n f \\<in> f ` {i. i \\<le> n} \\<Longrightarrow>\n       f \\<in> {i. i \\<le> Suc n} \\<rightarrow> UNIV \\<longrightarrow>\n       Zmax (Suc n) f \\<in> f ` {i. i \\<le> Suc n}", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n                Zmax n f \\<in> f ` {i. i \\<le> n};\n        f \\<in> {i. i \\<le> Suc n} \\<rightarrow> UNIV\\<rbrakk>\n       \\<Longrightarrow> Zmax (Suc n) f \\<in> f ` {i. i \\<le> Suc n}", "apply (frule func_pre)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n                Zmax n f \\<in> f ` {i. i \\<le> n};\n        f \\<in> {i. i \\<le> Suc n} \\<rightarrow> UNIV;\n        f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV\\<rbrakk>\n       \\<Longrightarrow> Zmax (Suc n) f \\<in> f ` {i. i \\<le> Suc n}", "apply (frule_tac f = f and A = \"{i. i \\<le> Suc n}\" and B = UNIV and \n        ?A1.0 = \"{i. i \\<le> n}\" and ?A2.0 = \"{i. i \\<le> Suc n}\" in im_set_mono)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n                Zmax n f \\<in> f ` {i. i \\<le> n};\n        f \\<in> {i. i \\<le> Suc n} \\<rightarrow> UNIV;\n        f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV\\<rbrakk>\n       \\<Longrightarrow> {i. i \\<le> n} \\<subseteq> {i. i \\<le> Suc n}\n 2. \\<And>n.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n                Zmax n f \\<in> f ` {i. i \\<le> n};\n        f \\<in> {i. i \\<le> Suc n} \\<rightarrow> UNIV;\n        f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV\\<rbrakk>\n       \\<Longrightarrow> {i. i \\<le> Suc n} \\<subseteq> {i. i \\<le> Suc n}\n 3. \\<And>n.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n                Zmax n f \\<in> f ` {i. i \\<le> n};\n        f \\<in> {i. i \\<le> Suc n} \\<rightarrow> UNIV;\n        f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV;\n        f ` {i. i \\<le> n} \\<subseteq> f ` {i. i \\<le> Suc n}\\<rbrakk>\n       \\<Longrightarrow> Zmax (Suc n) f \\<in> f ` {i. i \\<le> Suc n}", "apply (rule subsetI, simp, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>Zmax n f \\<in> f ` {i. i \\<le> n};\n        f ` {i. i \\<le> n} \\<subseteq> f ` {i. i \\<le> Suc n}\\<rbrakk>\n       \\<Longrightarrow> zmax (Zmax n f) (f (Suc n))\n                         \\<in> f ` {i. i \\<le> Suc n}", "apply (case_tac \"(Zmax n f) \\<le> (f (Suc n))\", simp add:zmax_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>Zmax n f \\<in> f ` {i. i \\<le> n};\n        f ` {i. i \\<le> n} \\<subseteq> f ` {i. i \\<le> Suc n};\n        \\<not> Zmax n f \\<le> f (Suc n)\\<rbrakk>\n       \\<Longrightarrow> zmax (Zmax n f) (f (Suc n))\n                         \\<in> f ` {i. i \\<le> Suc n}", "apply (simp add:zmax_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>Zmax n f \\<in> f ` {i. i \\<le> n};\n        f ` {i. i \\<le> n} \\<subseteq> f ` {i. i \\<le> Suc n};\n        \\<not> Zmax n f \\<le> f (Suc n)\\<rbrakk>\n       \\<Longrightarrow> Zmax n f \\<in> f ` {i. i \\<le> Suc n}", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmax_ge_r:\"y \\<le> zmax x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> zmax x y", "by (simp add:zmax_def)"], ["", "lemma zmax_ge_l:\"x \\<le> zmax x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> zmax x y", "by (simp add:zmax_def)"], ["", "lemma Zmax_geTr:\"f \\<in> {j. j \\<le> (n::nat)} \\<rightarrow> (UNIV::int set) \\<longrightarrow> \n                    (\\<forall>j\\<in>{j. j \\<le> n}. (f j) \\<le> Zmax n f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n    (\\<forall>j\\<in>{j. j \\<le> n}. f j \\<le> Zmax n f)", "apply (induct_tac n,\n       rule impI, rule ballI,\n       simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n       (\\<forall>j\\<in>{j. j \\<le> n}. f j \\<le> Zmax n f) \\<Longrightarrow>\n       f \\<in> {j. j \\<le> Suc n} \\<rightarrow> UNIV \\<longrightarrow>\n       (\\<forall>j\\<in>{j. j \\<le> Suc n}. f j \\<le> Zmax (Suc n) f)", "apply (rule impI, rule ballI,\n       frule func_pre, simp,\n       case_tac \"j = Suc n\", simp, rule zmax_ge_r,\n       cut_tac x = j and n = n in Nset_pre, simp, assumption,\n       thin_tac \"j \\<le> Suc n\",\n       simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n j.\n       \\<lbrakk>\\<forall>j\\<le>n. f j \\<le> Zmax n f; j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> f j \\<le> zmax (Zmax n f) (f (Suc n))", "apply (cut_tac x = \"Zmax n f\" and y = \"f (Suc n)\" in zmax_ge_l,\n       frule_tac x = j in spec,\n       thin_tac \"\\<forall>j\\<le>n. f j \\<le> Zmax n f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n j.\n       \\<lbrakk>j \\<le> n; Zmax n f \\<le> zmax (Zmax n f) (f (Suc n));\n        j \\<le> n \\<longrightarrow> f j \\<le> Zmax n f\\<rbrakk>\n       \\<Longrightarrow> f j \\<le> zmax (Zmax n f) (f (Suc n))", "apply  simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Zmax_plus1:\"f \\<in> {j. j \\<le> (n::nat)} \\<rightarrow> (UNIV::int set) \\<Longrightarrow>\n           ((Zmax n f) + 1) \\<notin> f ` {j. j \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV \\<Longrightarrow>\n    Zmax n f + 1 \\<notin> f ` {j. j \\<le> n}", "apply (cut_tac  Zmax_geTr[of f n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV;\n     f \\<in> {j. j \\<le> n} \\<rightarrow> UNIV \\<longrightarrow>\n     (\\<forall>j\\<in>{j. j \\<le> n}. f j \\<le> Zmax n f)\\<rbrakk>\n    \\<Longrightarrow> Zmax n f + 1 \\<notin> f ` {j. j \\<le> n}", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>n. f j \\<le> Zmax n f;\n     Zmax n f + 1 \\<in> f ` {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:image_def, erule exE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>j\\<le>n. f j \\<le> Zmax n f; x \\<le> n;\n        Zmax n f + 1 = f x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = x in forall_spec, assumption,\n       thin_tac \"\\<forall>j\\<le>n. f j \\<le> Zmax n f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> n; Zmax n f + 1 = f x; f x \\<le> Zmax n f\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule sym, thin_tac \"Zmax n f + 1 = f x\", simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma image_Nsetn_card_pos:\" 0 < card (f ` {i. i \\<le> (n::nat)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < card (f ` {i. i \\<le> n})", "apply(rule nonempty_card_pos)"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite (f ` {i. i \\<le> n})\n 2. f ` {i. i \\<le> n} \\<noteq> {}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma card_image_Nsetn_Suc\n:\"\\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B; \n      f (Suc n) \\<notin> f ` {j. j \\<le> n}\\<rbrakk>  \\<Longrightarrow> \n       card (f ` {j. j \\<le> Suc n}) - Suc 0 = \n                     Suc (card (f ` {j. j \\<le> n}) - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B;\n     f (Suc n) \\<notin> f ` {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> card (f ` {j. j \\<le> Suc n}) - Suc 0 =\n                      Suc (card (f ` {j. j \\<le> n}) - Suc 0)", "apply (simp add:image_Nset_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {j. j \\<le> Suc n} \\<rightarrow> B;\n     f (Suc n) \\<notin> f ` {j. j \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> card (f ` {j. j \\<le> n}) =\n                      Suc (card (f ` {j. j \\<le> n}) - Suc 0)", "apply (cut_tac image_Nsetn_card_pos[of f n], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma slide_surj:\n  \\<open>surj_to (slide i) {l. l \\<le> (j - i)} (nset i j)\\<close> if \\<open>i < j\\<close> for i j :: nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. surj_to (slide i) {l. l \\<le> j - i} (nset i j)", "using that"], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. surj_to (slide i) {l. l \\<le> j - i} (nset i j)", "by (auto simp add: surj_to_def image_def slide_def nset_def) presburger"], ["", "lemma slide_inj:\"i < j \\<Longrightarrow> inj_on (slide i) {k. k \\<le> (j - i)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow> inj_on (slide i) {k. k \\<le> j - i}", "apply (simp add:inj_on_def, (rule allI)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       i < j \\<Longrightarrow>\n       x \\<le> j - i \\<longrightarrow>\n       (\\<forall>y\\<le>j - i. slide i x = slide i y \\<longrightarrow> x = y)", "apply (rule impI, rule allI, rule impI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>i < j; x \\<le> j - i; y \\<le> j - i;\n        slide i x = slide i y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add:slide_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma card_nset:\"i < (j :: nat) \\<Longrightarrow> card (nset i j) = Suc (j - i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow> card (nset i j) = Suc (j - i)", "apply (frule slide_inj [of \"i\" \"j\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; inj_on (slide i) {k. k \\<le> j - i}\\<rbrakk>\n    \\<Longrightarrow> card (nset i j) = Suc (j - i)", "apply (frule card_image [of \"slide i\" \"{k. k \\<le> (j - i)}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; inj_on (slide i) {k. k \\<le> j - i};\n     card (slide i ` {k. k \\<le> j - i}) = card {k. k \\<le> j - i}\\<rbrakk>\n    \\<Longrightarrow> card (nset i j) = Suc (j - i)", "apply (simp, frule slide_surj [of \"i\" \"j\"], simp add:surj_to_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sliden_hom:\"i < j \\<Longrightarrow> (sliden i) \\<in> nset i j \\<rightarrow>  {k. k \\<le> (j - i)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow>\n    sliden i \\<in> nset i j \\<rightarrow> {k. k \\<le> j - i}", "by (simp add:Pi_def, rule allI, rule impI, simp add:sliden_def,\n       simp add:nset_def, erule conjE, simp add:diff_le_mono)"], ["", "lemma slide_sliden:\"(sliden i) (slide i k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sliden i (slide i k) = k", "by (simp add:sliden_def slide_def)"], ["", "lemma sliden_surj:\"i < j \\<Longrightarrow>  surj_to (sliden i) (nset i j) {k. k \\<le> (j - i)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow> surj_to (sliden i) (nset i j) {k. k \\<le> j - i}", "apply (simp add:surj_to_def image_def, rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i < j \\<Longrightarrow>\n    {y. \\<exists>x\\<in>nset i j. y = sliden i x}\n    \\<subseteq> {k. k \\<le> j - i}\n 2. i < j \\<Longrightarrow>\n    {k. k \\<le> j - i}\n    \\<subseteq> {y. \\<exists>x\\<in>nset i j. y = sliden i x}", "apply (rule subsetI, simp, erule bexE, simp add:nset_def sliden_def,\n       erule conjE, rule_tac m = xa in diff_le_mono[of _ \"j\" \"i\"], \n       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow>\n    {k. k \\<le> j - i}\n    \\<subseteq> {y. \\<exists>x\\<in>nset i j. y = sliden i x}", "apply (rule subsetI, simp add:nset_def sliden_def,\n       frule_tac i = x in add_le_mono[of _ \"j - i\" \"i\" \"i\"], simp,\n       simp, subgoal_tac \"i \\<le> x + i\", subgoal_tac \"x = (x + i) - i\",\n       blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>i < j; x + i \\<le> j; i \\<le> x + i\\<rbrakk>\n       \\<Longrightarrow> x = x + i - i\n 2. \\<And>x.\n       \\<lbrakk>i < j; x + i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> x + i", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sliden_inj: \"i < j \\<Longrightarrow>  inj_on (sliden i) (nset i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow> inj_on (sliden i) (nset i j)", "apply (simp add:inj_on_def, (rule ballI)+, rule impI, simp add:sliden_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>i < j; x \\<in> nset i j; y \\<in> nset i j;\n        x - i = y - i\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add:nset_def, (erule conjE)+,  \n        subgoal_tac \"(x - i = y - i) = (x = y)\", blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>i < j; x - i = y - i; i \\<le> x; x \\<le> j; i \\<le> y;\n        y \\<le> j\\<rbrakk>\n       \\<Longrightarrow> (x - i = y - i) = (x = y)", "apply (rule eq_diff_iff, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  transpos :: \"[nat, nat] \\<Rightarrow> (nat \\<Rightarrow> nat)\" where\n  \"transpos i j = (\\<lambda>k. if k = i then j else if k = j then i else k)\""], ["", "lemma transpos_id:\"\\<lbrakk> i \\<le> n; j \\<le> n; i \\<noteq> j ; x \\<in> {k. k \\<le> n} - {i, j} \\<rbrakk>\n  \\<Longrightarrow> transpos i j x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j;\n     x \\<in> {k. k \\<le> n} - {i, j}\\<rbrakk>\n    \\<Longrightarrow> transpos i j x = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j;\n     x \\<in> {k. k \\<le> n} - {i, j}\\<rbrakk>\n    \\<Longrightarrow> transpos i j x = x", "assume p1:\"i \\<le> n\" and p2:\"j \\<le> n\" and p3:\" i \\<noteq> j\" and \n p4:\"x \\<in> {k. k \\<le> n} - {i, j}\""], ["proof (state)\nthis:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j\n  x \\<in> {k. k \\<le> n} - {i, j}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j;\n     x \\<in> {k. k \\<le> n} - {i, j}\\<rbrakk>\n    \\<Longrightarrow> transpos i j x = x", "from p1 and p2 and p3 and p4"], ["proof (chain)\npicking this:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j\n  x \\<in> {k. k \\<le> n} - {i, j}", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j\n  x \\<in> {k. k \\<le> n} - {i, j}\n\ngoal (1 subgoal):\n 1. transpos i j x = x", "apply (simp add:transpos_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  transpos i j x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transpos_id_1:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; x \\<noteq> i; x \\<noteq> j\\<rbrakk> \\<Longrightarrow> \n                       transpos i j x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; x \\<noteq> i;\n     x \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> transpos i j x = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; x \\<noteq> i;\n     x \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> transpos i j x = x", "assume p1:\"i \\<le> n\" and p2:\"j \\<le> n\" and p3:\"i \\<noteq> j\" and p4:\"x \\<le> n\" and p5:\"x \\<noteq> i\" and p6:\"x \\<noteq> j\""], ["proof (state)\nthis:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j\n  x \\<le> n\n  x \\<noteq> i\n  x \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; x \\<noteq> i;\n     x \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> transpos i j x = x", "from p1 and p2 and p3 and p4 and p5 and p6"], ["proof (chain)\npicking this:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j\n  x \\<le> n\n  x \\<noteq> i\n  x \\<noteq> j", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j\n  x \\<le> n\n  x \\<noteq> i\n  x \\<noteq> j\n\ngoal (1 subgoal):\n 1. transpos i j x = x", "apply (simp add:transpos_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  transpos i j x = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transpos_id_2:\"i \\<le> n \\<Longrightarrow> transpos i n (Suc n) = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n \\<Longrightarrow> transpos i n (Suc n) = Suc n", "by (simp add:transpos_def)"], ["", "lemma transpos_ij_1:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j \\<rbrakk> \\<Longrightarrow>\n                        transpos i j i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> transpos i j i = j", "by (simp add:transpos_def)"], ["", "lemma transpos_ij_2:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \\<Longrightarrow> transpos i j j = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> transpos i j j = i", "by (simp add:transpos_def)"], ["", "lemma transpos_hom:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \\<Longrightarrow> \n                          (transpos i j)  \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> transpos i j\n                      \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}", "apply (simp add:Pi_def, rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n\\<rbrakk>\n       \\<Longrightarrow> transpos i j x \\<le> n", "apply (case_tac \"x = i\", simp add:transpos_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n;\n        x \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> transpos i j x \\<le> n", "apply (case_tac \"x = j\", simp add:transpos_def,\n        subst transpos_id, assumption+, simp, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma transpos_mem:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; l \\<le> n\\<rbrakk> \\<Longrightarrow> \n                           (transpos i j l) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; l \\<le> n\\<rbrakk>\n    \\<Longrightarrow> transpos i j l \\<le> n", "apply (frule transpos_hom [of \"i\" \"n\" \"j\"], assumption+,\n       cut_tac funcset_mem[of \"transpos i j\" \"{i. i \\<le> n}\" \"{i. i \\<le> n}\" l])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; l \\<le> n;\n     transpos i j \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     transpos i j l \\<in> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> transpos i j l \\<le> n\n 2. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; l \\<le> n;\n     transpos i j \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> transpos i j\n                      \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\n 3. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; l \\<le> n;\n     transpos i j \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> l \\<in> {i. i \\<le> n}", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma transpos_inj:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \n                          \\<Longrightarrow> inj_on (transpos i j) {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> inj_on (transpos i j) {i. i \\<le> n}", "apply (simp add:inj_on_def, (rule allI, rule impI)+, rule impI,\n        case_tac \"x = i\", case_tac \"y = j\",\n        simp add:transpos_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; y \\<le> n;\n        transpos i j x = transpos i j y; x = i; y \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; y \\<le> n;\n        transpos i j x = transpos i j y; x \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add:transpos_ij_1, rule contrapos_pp, simp+,\n        frule_tac x = y in transpos_id [of \"i\" \"n\" \"j\"], assumption+,\n        simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; y \\<le> n;\n        transpos i j x = transpos i j y; x \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (case_tac \"x = j\", simp, \n        simp add:transpos_ij_2, rule contrapos_pp, simp+,\n        frule_tac x = y in transpos_id [of \"i\" \"n\" \"j\"], assumption+,\n        simp, rule contrapos_pp, simp+, simp add:transpos_ij_1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>i \\<le> n; j \\<le> n; y \\<le> n; i = transpos i j y;\n        j \\<noteq> i; x = j; j \\<noteq> y; transpos i j y = y\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; x \\<le> n; y \\<le> n;\n        transpos i j x = transpos i j y; x \\<noteq> i; x \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp, simp add:transpos_ij_1, simp add:transpos_id_1, \n        thin_tac \"x = transpos i j y\",\n        case_tac \"y = i\", simp add:transpos_ij_1,\n        case_tac \"y = j\", simp add:transpos_ij_2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; transpos i j y \\<le> n;\n        y \\<le> n; transpos i j y \\<noteq> i; transpos i j y \\<noteq> j;\n        y \\<noteq> i; y \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j y = y", "apply (simp add:transpos_id_1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma transpos_surjec:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \n                          \\<Longrightarrow> surj_to (transpos i j) {i. i \\<le> n} {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> surj_to (transpos i j) {i. i \\<le> n} {i. i \\<le> n}", "apply (simp add:surj_to_def,\n       frule transpos_hom [of \"i\" \"n\" \"j\"], assumption+,\n       frule image_sub [of \"transpos i j\" \"{i. i \\<le> n}\" \"{i. i \\<le> n}\" \n       \"{i. i \\<le> n}\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j;\n     transpos i j \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     transpos i j ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> transpos i j ` {i. i \\<le> n} = {i. i \\<le> n}", "apply (frule transpos_inj [of \"i\" \"n\" \"j\"], assumption+,\n       frule card_image [of \"transpos i j\" \"{i. i \\<le> n}\"],\n       simp add:card_seteq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma comp_transpos:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk> \\<Longrightarrow>\n      \\<forall>k \\<le> n. (compose {i. i \\<le> n} (transpos i j) (transpos i j)) k = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k\\<le>n.\n                         compose {i. i \\<le> n} (transpos i j)\n                          (transpos i j) k =\n                         k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k\\<le>n.\n                         compose {i. i \\<le> n} (transpos i j)\n                          (transpos i j) k =\n                         k", "assume p1:\"i \\<le> n\" and p2:\"j \\<le> n\" and p3:\"i \\<noteq> j\""], ["proof (state)\nthis:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k\\<le>n.\n                         compose {i. i \\<le> n} (transpos i j)\n                          (transpos i j) k =\n                         k", "from p1 and p2 and p3"], ["proof (chain)\npicking this:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<le> n\n  j \\<le> n\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<forall>k\\<le>n.\n       compose {i. i \\<le> n} (transpos i j) (transpos i j) k = k", "apply (simp add:compose_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k\\<le>n. transpos i j (transpos i j k) = k", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n \\<longrightarrow>\n                         transpos i j (transpos i j k) = k", "apply (case_tac \"k = i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k = i\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n \\<longrightarrow>\n                         transpos i j (transpos i j k) = k\n 2. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n \\<longrightarrow>\n                         transpos i j (transpos i j k) = k", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k = i\\<rbrakk>\n       \\<Longrightarrow> transpos i j (transpos i j i) = i\n 2. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n \\<longrightarrow>\n                         transpos i j (transpos i j k) = k", "apply (subst transpos_ij_1, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k = i\\<rbrakk>\n       \\<Longrightarrow> transpos i j j = i\n 2. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n \\<longrightarrow>\n                         transpos i j (transpos i j k) = k", "apply (rule transpos_ij_2, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n \\<longrightarrow>\n                         transpos i j (transpos i j k) = k", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i;\n        k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> transpos i j (transpos i j k) = k", "apply (case_tac \"k = j\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k = j\\<rbrakk>\n       \\<Longrightarrow> transpos i j (transpos i j k) = k\n 2. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j (transpos i j k) = k", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<noteq> i; j \\<le> n; k = j\\<rbrakk>\n       \\<Longrightarrow> transpos i j (transpos i j j) = j\n 2. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j (transpos i j k) = k", "apply (subst transpos_ij_2, simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<noteq> i; j \\<le> n; k = j\\<rbrakk>\n       \\<Longrightarrow> transpos i j i = j\n 2. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j (transpos i j k) = k", "apply (rule transpos_ij_1, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j (transpos i j k) = k", "apply (subst transpos_id_1, assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j k \\<le> n\n 2. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j k \\<noteq> i\n 3. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j k \\<noteq> j\n 4. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j k = k", "apply (simp add:transpos_mem)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j k \\<noteq> i\n 2. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j k \\<noteq> j\n 3. \\<And>k.\n       \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<noteq> i; k \\<le> n;\n        k \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> transpos i j k = k", "apply (simp add:transpos_id_1)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>k\\<le>n.\n     compose {i. i \\<le> n} (transpos i j) (transpos i j) k = k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comp_transpos_1:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<le> n\\<rbrakk> \\<Longrightarrow>\n                           (transpos i j) ((transpos i j) k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<le> n\\<rbrakk>\n    \\<Longrightarrow> transpos i j (transpos i j k) = k", "apply (frule comp_transpos [of \"i\" \"n\" \"j\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<le> n;\n     \\<forall>k\\<le>n.\n        compose {i. i \\<le> n} (transpos i j) (transpos i j) k = k\\<rbrakk>\n    \\<Longrightarrow> transpos i j (transpos i j k) = k", "apply (simp add:compose_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_transpos1:\"\\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<le> n\\<rbrakk> \\<Longrightarrow> \n                      (cmp (transpos i j) (transpos i j)) k = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<le> n\\<rbrakk>\n    \\<Longrightarrow> cmp (transpos i j) (transpos i j) k = k", "apply (simp add:cmp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; j \\<le> n; i \\<noteq> j; k \\<le> n\\<rbrakk>\n    \\<Longrightarrow> transpos i j (transpos i j k) = k", "apply (simp add:comp_transpos_1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_transpos:\"\\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> (Suc n)\\<rbrakk> \\<Longrightarrow>\n  (cmp (transpos i n) (cmp (transpos n (Suc n)) (transpos i n))) a =\n               transpos i (Suc n) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> cmp (transpos i n)\n                       (cmp (transpos n (Suc n)) (transpos i n)) a =\n                      transpos i (Suc n) a", "apply (simp add:cmp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> transpos i n (transpos n (Suc n) (transpos i n a)) =\n                      transpos i (Suc n) a", "apply (case_tac \"a = Suc n\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> n; i \\<noteq> n; a = Suc n\\<rbrakk>\n    \\<Longrightarrow> transpos i n\n                       (transpos n (Suc n) (transpos i n (Suc n))) =\n                      transpos i (Suc n) (Suc n)\n 2. \\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> Suc n;\n     a \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> transpos i n (transpos n (Suc n) (transpos i n a)) =\n                      transpos i (Suc n) a", "apply (simp add:transpos_id_2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> n; i \\<noteq> n; a = Suc n\\<rbrakk>\n    \\<Longrightarrow> transpos i n (transpos n (Suc n) (Suc n)) =\n                      transpos i (Suc n) (Suc n)\n 2. \\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> Suc n;\n     a \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> transpos i n (transpos n (Suc n) (transpos i n a)) =\n                      transpos i (Suc n) a", "apply (cut_tac transpos_ij_2[of n \"Suc n\" \"Suc n\"], simp,\n       cut_tac transpos_ij_2[of i \"Suc n\" \"Suc n\"], simp,\n       cut_tac transpos_ij_2[of i n n], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> Suc n;\n     a \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> transpos i n (transpos n (Suc n) (transpos i n a)) =\n                      transpos i (Suc n) a", "apply (frule le_imp_less_or_eq[of a \"Suc n\"],\n       thin_tac \"a \\<le> Suc n\", simp,\n       frule Suc_less_le[of a n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; i \\<noteq> n; a < Suc n; a \\<le> n\\<rbrakk>\n    \\<Longrightarrow> transpos i n (transpos n (Suc n) (transpos i n a)) =\n                      transpos i (Suc n) a", "apply (case_tac \"a = n\", simp,\n       cut_tac transpos_ij_2[of i n n], simp, \n       cut_tac transpos_id[of i \"Suc n\" \"Suc n\" n], simp,\n       cut_tac transpos_id[of n \"Suc n\" \"Suc n\" i], simp,\n       cut_tac transpos_ij_1[of i n n], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> n; a \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> transpos i n (transpos n (Suc n) (transpos i n a)) =\n                      transpos i (Suc n) a", "apply (case_tac \"a = i\", simp,\n       cut_tac transpos_ij_1[of i n n], simp+,\n       cut_tac transpos_ij_1[of i \"Suc n\" \"Suc n\"], simp,\n       cut_tac transpos_ij_1[of n \"Suc n\" \"Suc n\"], simp, \n       cut_tac transpos_id[of i \"Suc n\" n \"Suc n\"], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> n; i \\<noteq> n; a \\<le> n; a \\<noteq> n;\n     a \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> transpos i n (transpos n (Suc n) (transpos i n a)) =\n                      transpos i (Suc n) a", "apply (cut_tac transpos_id[of i n n a], simp,\n       cut_tac transpos_id[of i \"Suc n\" \"Suc n\" a], simp,\n        cut_tac transpos_id[of n \"Suc n\" \"Suc n\" a], simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma im_Nset_Suc:\"insert (f (Suc n)) (f ` {i. i \\<le> n}) = f ` {i. i\\<le>(Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (f (Suc n)) (f ` {i. i \\<le> n}) = f ` {i. i \\<le> Suc n}", "apply (simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (f (Suc n)) {y. \\<exists>x\\<le>n. y = f x} =\n    {y. \\<exists>x\\<le>Suc n. y = f x}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. insert (f (Suc n)) {y. \\<exists>x\\<le>n. y = f x}\n    \\<subseteq> {y. \\<exists>x\\<le>Suc n. y = f x}\n 2. {y. \\<exists>x\\<le>Suc n. y = f x}\n    \\<subseteq> insert (f (Suc n)) {y. \\<exists>x\\<le>n. y = f x}", "apply (rule subsetI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x = f (Suc n) \\<or> (\\<exists>xa\\<le>n. x = f xa) \\<Longrightarrow>\n       \\<exists>xa\\<le>Suc n. x = f xa\n 2. {y. \\<exists>x\\<le>Suc n. y = f x}\n    \\<subseteq> insert (f (Suc n)) {y. \\<exists>x\\<le>n. y = f x}", "apply (erule disjE, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<exists>xa\\<le>n. x = f xa \\<Longrightarrow>\n       \\<exists>xa\\<le>Suc n. x = f xa\n 2. {y. \\<exists>x\\<le>Suc n. y = f x}\n    \\<subseteq> insert (f (Suc n)) {y. \\<exists>x\\<le>n. y = f x}", "apply (erule exE, erule conjE, simp,\n        frule_tac i = xa and j = n and k = \"Suc n\" in le_trans,\n        simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<le> n; x = f xa; xa \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<le>Suc n. f xa = f x\n 2. {y. \\<exists>x\\<le>Suc n. y = f x}\n    \\<subseteq> insert (f (Suc n)) {y. \\<exists>x\\<le>n. y = f x}", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<le>Suc n. y = f x}\n    \\<subseteq> insert (f (Suc n)) {y. \\<exists>x\\<le>n. y = f x}", "apply (rule subsetI, simp, erule exE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<le> Suc n; x = f xa\\<rbrakk>\n       \\<Longrightarrow> x = f (Suc n) \\<or> (\\<exists>xa\\<le>n. x = f xa)", "apply (case_tac \"xa = Suc n\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>xa \\<le> Suc n; x = f xa; xa \\<noteq> Suc n\\<rbrakk>\n       \\<Longrightarrow> x = f (Suc n) \\<or> (\\<exists>xa\\<le>n. x = f xa)", "apply (metis le_SucE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_injTr0:\"\\<lbrakk>f \\<in> {i. i \\<le> (Suc n)} \\<rightarrow> {i. i \\<le> (Suc n)}; \n      inj_on f {i. i \\<le> (Suc n)}; f (Suc n) = Suc n\\<rbrakk> \\<Longrightarrow>\n      f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n} \\<and> inj_on f {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n};\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> f \\<in> {i. i \\<le> n} \\<rightarrow>\n                              {i. i \\<le> n} \\<and>\n                      inj_on f {i. i \\<le> n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n};\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> f \\<in> {i. i \\<le> n} \\<rightarrow>\n                              {i. i \\<le> n} \\<and>\n                      inj_on f {i. i \\<le> n}", "assume p1:\"f \\<in> {i. i \\<le> (Suc n)} \\<rightarrow> {i. i \\<le> (Suc n)}\" and\n        p2:\"inj_on f {i. i \\<le> (Suc n)}\" and p3:\"f (Suc n) = Suc n\""], ["proof (state)\nthis:\n  f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n}\n  inj_on f {i. i \\<le> Suc n}\n  f (Suc n) = Suc n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n};\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> f \\<in> {i. i \\<le> n} \\<rightarrow>\n                              {i. i \\<le> n} \\<and>\n                      inj_on f {i. i \\<le> n}", "have q1:\"\\<forall>l \\<le> n. l \\<le> (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>l\\<le>n. l \\<le> Suc n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>l\\<le>n. l \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n};\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> f \\<in> {i. i \\<le> n} \\<rightarrow>\n                              {i. i \\<le> n} \\<and>\n                      inj_on f {i. i \\<le> n}", "from p1 and p2 and p3 and q1"], ["proof (chain)\npicking this:\n  f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n}\n  inj_on f {i. i \\<le> Suc n}\n  f (Suc n) = Suc n\n  \\<forall>l\\<le>n. l \\<le> Suc n", "have q2:\"f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\""], ["proof (prove)\nusing this:\n  f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n}\n  inj_on f {i. i \\<le> Suc n}\n  f (Suc n) = Suc n\n  \\<forall>l\\<le>n. l \\<le> Suc n\n\ngoal (1 subgoal):\n 1. f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}", "apply (simp add:Pi_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<le>Suc n. f x \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<le>n. f x \\<le> n", "apply (rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<le>Suc n. f x \\<le> Suc n;\n        inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; x \\<le> n\\<rbrakk>\n       \\<Longrightarrow> f x \\<le> n", "apply (frule_tac a = x in forall_spec, simp,\n         thin_tac \"\\<forall>x\\<le>Suc n. f x \\<le> Suc n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; x \\<le> n;\n        f x \\<le> Suc n\\<rbrakk>\n       \\<Longrightarrow> f x \\<le> n", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; x \\<le> n;\n        f x \\<le> Suc n; \\<not> f x \\<le> n\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:nat_not_le_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; x \\<le> n;\n        f x \\<le> Suc n; n < f x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac n = \"f x\" in Suc_leI[of n], thin_tac \"n < (f x)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; x \\<le> n;\n        f x \\<le> Suc n; Suc n \\<le> f x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac m = \"Suc n\" and n = \"f x\" in le_antisym, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; x \\<le> n;\n        f x \\<le> Suc n; Suc n \\<le> f x; Suc n = f x\\<rbrakk>\n       \\<Longrightarrow> False", "apply(unfold inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>{i. i \\<le> Suc n}.\n                   \\<forall>y\\<in>{i. i \\<le> Suc n}.\n                      f x = f y \\<longrightarrow> x = y;\n        f (Suc n) = Suc n; x \\<le> n; f x \\<le> Suc n; Suc n \\<le> f x;\n        Suc n = f x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = x in bspec, simp,\n       thin_tac \"\\<forall>x\\<in>{i. i \\<le> Suc n}. \\<forall>y\\<in>{i. i \\<le> Suc n}. f x = f y \\<longrightarrow> x = y\",\n        frule_tac x = \"Suc n\" in bspec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f (Suc n) = Suc n; x \\<le> n; f x \\<le> Suc n;\n        Suc n \\<le> f x; Suc n = f x;\n        \\<forall>y\\<in>{i. i \\<le> Suc n}.\n           f x = f y \\<longrightarrow> x = y;\n        f x = f (Suc n) \\<longrightarrow> x = Suc n\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac r = \"f (Suc n)\" and s = \"Suc n\" and t = \"f x\" in trans,\n         assumption,\n         thin_tac \"f (Suc n) = Suc n\", thin_tac \"Suc n = f x\",\n         thin_tac \"\\<forall>y\\<in>{i. i \\<le> Suc n}. f x = f y \\<longrightarrow> x = y\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<le> n; f x \\<le> Suc n; Suc n \\<le> f x;\n        f x = f (Suc n) \\<longrightarrow> x = Suc n;\n        f (Suc n) = f x\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n};\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> f \\<in> {i. i \\<le> n} \\<rightarrow>\n                              {i. i \\<le> n} \\<and>\n                      inj_on f {i. i \\<le> n}", "from p2"], ["proof (chain)\npicking this:\n  inj_on f {i. i \\<le> Suc n}", "have q3:\"inj_on f {i. i \\<le> n}\""], ["proof (prove)\nusing this:\n  inj_on f {i. i \\<le> Suc n}\n\ngoal (1 subgoal):\n 1. inj_on f {i. i \\<le> n}", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  inj_on f {i. i \\<le> n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n};\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> f \\<in> {i. i \\<le> n} \\<rightarrow>\n                              {i. i \\<le> n} \\<and>\n                      inj_on f {i. i \\<le> n}", "from q2 and q3"], ["proof (chain)\npicking this:\n  f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\n  inj_on f {i. i \\<le> n}", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\n  inj_on f {i. i \\<le> n}\n\ngoal (1 subgoal):\n 1. f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n} \\<and>\n    inj_on f {i. i \\<le> n}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n} \\<and>\n  inj_on f {i. i \\<le> n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_surj:\"\\<lbrakk>f \\<in> {i. i \\<le> (n::nat)} \\<rightarrow> {i. i \\<le> n}; \n                inj_on f {i. i \\<le> (n::nat)}\\<rbrakk> \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}", "assume p1:\"f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\" and p2:\"inj_on f {i. i \\<le> n}\""], ["proof (state)\nthis:\n  f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\n  inj_on f {i. i \\<le> n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}", "have q1:\"0 < Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc 0", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  0 < Suc 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}", "from p1 and p2 and q1"], ["proof (chain)\npicking this:\n  f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\n  inj_on f {i. i \\<le> n}\n  0 < Suc 0", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\n  inj_on f {i. i \\<le> n}\n  0 < Suc 0\n\ngoal (1 subgoal):\n 1. f ` {i. i \\<le> n} = {i. i \\<le> n}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}", "apply (frule image_sub [of \"f\" \"{i. i \\<le> n}\" \"{i. i \\<le> n}\" \"{i. i \\<le> n}\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> {i. i \\<le> n} \\<subseteq> {i. i \\<le> n}\n 2. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n};\n     f ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n};\n     f ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}", "apply (cut_tac card_image [of \"f\" \"{i. i \\<le> n}\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}; f ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> n};\n     card (f ` {i. i \\<le> n}) = card {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f ` {i. i \\<le> n} = {i. i \\<le> n}\n 2. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n};\n     f ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> inj_on f {i. i \\<le> n}", "apply (simp add:card_seteq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n};\n     f ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> inj_on f {i. i \\<le> n}", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f ` {i. i \\<le> n} = {i. i \\<le> n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Nset_pre_mem:\"\\<lbrakk>f:{i. i\\<le>(Suc n)} \\<rightarrow>{i. i\\<le>(Suc n)}; \n      inj_on f {i. i\\<le>(Suc n)}; f (Suc n) = Suc n; k \\<le> n\\<rbrakk> \\<Longrightarrow> f k \\<in> {i. i\\<le>n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n};\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; k \\<le> n\\<rbrakk>\n    \\<Longrightarrow> f k \\<in> {i. i \\<le> n}", "apply (frule Nset_injTr0[of f n], assumption+, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> Suc n} \\<rightarrow> {i. i \\<le> Suc n};\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; k \\<le> n;\n     f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f k \\<in> {i. i \\<le> n}", "apply (frule_tac x = k in funcset_mem[of f \"{i. i \\<le> n}\" \"{i. i \\<le> n}\"],\n       simp, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Nset_injTr1:\"\\<lbrakk> \\<forall>l \\<le>(Suc n). f l \\<le> (Suc n); inj_on f {i. i \\<le> (Suc n)};\n                    f (Suc n) = Suc n \\<rbrakk> \\<Longrightarrow> inj_on f {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> inj_on f {i. i \\<le> n}", "by (cut_tac Nset_injTr0[of f n], simp, simp)"], ["", "lemma Nset_injTr2:\"\\<lbrakk>\\<forall>l\\<le> (Suc n). f l \\<le> (Suc n); inj_on f {i. i \\<le> (Suc n)}; \n                    f (Suc n) = Suc n\\<rbrakk> \\<Longrightarrow> \\<forall>l \\<le> n. f l \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>l\\<le>n. f l \\<le> n", "apply (rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n        inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; l \\<le> n\\<rbrakk>\n       \\<Longrightarrow> f l \\<le> n", "apply (cut_tac k = l in Nset_pre_mem[of f n])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>l.\n       \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n        inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; l \\<le> n\\<rbrakk>\n       \\<Longrightarrow> f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                                 {i. i \\<le> Suc n}\n 2. \\<And>l.\n       \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n        inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; l \\<le> n\\<rbrakk>\n       \\<Longrightarrow> inj_on f {i. i \\<le> Suc n}\n 3. \\<And>l.\n       \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n        inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; l \\<le> n\\<rbrakk>\n       \\<Longrightarrow> f (Suc n) = Suc n\n 4. \\<And>l.\n       \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n        inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; l \\<le> n\\<rbrakk>\n       \\<Longrightarrow> l \\<le> n\n 5. \\<And>l.\n       \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n        inj_on f {i. i \\<le> Suc n}; f (Suc n) = Suc n; l \\<le> n;\n        f l \\<in> {i. i \\<le> n}\\<rbrakk>\n       \\<Longrightarrow> f l \\<le> n", "apply (simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma TR_inj_inj:\"\\<lbrakk>\\<forall>l\\<le> (Suc n). f l \\<le> (Suc n); inj_on f {i. i \\<le> (Suc n)};\n                    i \\<le> (Suc n); j \\<le> (Suc n); i < j \\<rbrakk> \\<Longrightarrow>\n      inj_on (compose {i. i \\<le> (Suc n)} (transpos i j) f) {i. i \\<le> (Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; i \\<le> Suc n; j \\<le> Suc n;\n     i < j\\<rbrakk>\n    \\<Longrightarrow> inj_on (compose {i. i \\<le> Suc n} (transpos i j) f)\n                       {i. i \\<le> Suc n}", "apply (frule transpos_inj[of i \"Suc n\" j], assumption+,\n       simp )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; i \\<le> Suc n; j \\<le> Suc n; i < j;\n     inj_on (transpos i j) {i. i \\<le> Suc n}\\<rbrakk>\n    \\<Longrightarrow> inj_on (compose {i. i \\<le> Suc n} (transpos i j) f)\n                       {i. i \\<le> Suc n}", "apply (rule  comp_inj [of f \"{i. i \\<le> (Suc n)}\" \"{i. i \\<le> (Suc n)}\"\n             \"transpos i j\" \"{i. i \\<le> (Suc n)}\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; i \\<le> Suc n; j \\<le> Suc n; i < j;\n     inj_on (transpos i j) {i. i \\<le> Suc n}\\<rbrakk>\n    \\<Longrightarrow> f \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                              {i. i \\<le> Suc n}\n 2. \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; i \\<le> Suc n; j \\<le> Suc n; i < j;\n     inj_on (transpos i j) {i. i \\<le> Suc n}\\<rbrakk>\n    \\<Longrightarrow> inj_on f {i. i \\<le> Suc n}\n 3. \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; i \\<le> Suc n; j \\<le> Suc n; i < j;\n     inj_on (transpos i j) {i. i \\<le> Suc n}\\<rbrakk>\n    \\<Longrightarrow> transpos i j\n                      \\<in> {i. i \\<le> Suc n} \\<rightarrow>\n                            {i. i \\<le> Suc n}\n 4. \\<lbrakk>\\<forall>l\\<le>Suc n. f l \\<le> Suc n;\n     inj_on f {i. i \\<le> Suc n}; i \\<le> Suc n; j \\<le> Suc n; i < j;\n     inj_on (transpos i j) {i. i \\<le> Suc n}\\<rbrakk>\n    \\<Longrightarrow> inj_on (transpos i j) {i. i \\<le> Suc n}", "apply (simp, assumption,\n        rule transpos_hom[of i \"Suc n\" j], simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma enumeration:\"\\<lbrakk>f \\<in> {i. i \\<le> (n::nat)} \\<rightarrow> {i. i \\<le> m}; inj_on f {i. i \\<le> n}\\<rbrakk>\n                     \\<Longrightarrow>  n \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> m};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> n \\<le> m", "apply (frule image_sub[of f \"{i. i \\<le> n}\" \"{i. i \\<le> m}\" \"{i. i \\<le> n}\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> m};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> {i. i \\<le> n} \\<subseteq> {i. i \\<le> n}\n 2. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> m};\n     inj_on f {i. i \\<le> n};\n     f ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> m}\\<rbrakk>\n    \\<Longrightarrow> n \\<le> m", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> m};\n     inj_on f {i. i \\<le> n};\n     f ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> m}\\<rbrakk>\n    \\<Longrightarrow> n \\<le> m", "apply (frule card_image[of f \"{i. i \\<le> n}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> m};\n     inj_on f {i. i \\<le> n}; f ` {i. i \\<le> n} \\<subseteq> {i. i \\<le> m};\n     card (f ` {i. i \\<le> n}) = card {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> n \\<le> m", "apply(drule card_mono[OF finite_Collect_le_nat])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> m};\n     inj_on f {i. i \\<le> n};\n     card (f ` {i. i \\<le> n}) = card {i. i \\<le> n};\n     card (f ` {i. i \\<le> n}) \\<le> card {i. i \\<le> m}\\<rbrakk>\n    \\<Longrightarrow> n \\<le> m", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma enumerate_1:\"\\<lbrakk>\\<forall>j \\<le> (n::nat). f j \\<in> A; \\<forall>j \\<le> (m::nat). g j \\<in> A; \n     inj_on f {i. i \\<le> n}; inj_on g {j. j \\<le> m}; f `{j. j \\<le> n} = A; \n     g ` {j. j \\<le> m} = A \\<rbrakk> \\<Longrightarrow> n = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> A; \\<forall>j\\<le>m. g j \\<in> A;\n     inj_on f {i. i \\<le> n}; inj_on g {j. j \\<le> m};\n     f ` {j. j \\<le> n} = A; g ` {j. j \\<le> m} = A\\<rbrakk>\n    \\<Longrightarrow> n = m", "apply (frule card_image[of f \"{i. i \\<le> n}\"],\n       frule card_image[of g \"{i. i \\<le> m}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>n. f j \\<in> A; \\<forall>j\\<le>m. g j \\<in> A;\n     inj_on f {i. i \\<le> n}; inj_on g {j. j \\<le> m};\n     f ` {j. j \\<le> n} = A; g ` {j. j \\<le> m} = A;\n     card (f ` {i. i \\<le> n}) = card {i. i \\<le> n};\n     card (g ` {i. i \\<le> m}) = card {i. i \\<le> m}\\<rbrakk>\n    \\<Longrightarrow> n = m", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  ninv :: \"[nat, (nat \\<Rightarrow> nat)] \\<Rightarrow> (nat \\<Rightarrow> nat)\" where\n  \"ninv n f = (\\<lambda>y\\<in>{i. i \\<le> n}. (SOME x. (x \\<le> n \\<and> y = f x)))\""], ["", "lemma ninv_hom:\"\\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}; inj_on f {i. i \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                        ninv n f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> ninv n f\n                      \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}", "apply (rule Pi_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; x \\<in> {i. i \\<le> n}\\<rbrakk>\n       \\<Longrightarrow> ninv n f x \\<in> {i. i \\<le> n}", "apply (simp add:ninv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; x \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (SOME xa. xa \\<le> n \\<and> x = f xa) \\<le> n", "apply (frule inj_surj[of f n], assumption+,\n       frule_tac x = x in funcset_mem[of f \"{i. i \\<le> n}\" \"{i. i \\<le> n}\"],\n       simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; x \\<le> n;\n        f ` {i. i \\<le> n} = {i. i \\<le> n};\n        f x \\<in> {i. i \\<le> n}\\<rbrakk>\n       \\<Longrightarrow> (SOME xa. xa \\<le> n \\<and> x = f xa) \\<le> n", "apply (frule sym, thin_tac \"f ` {i. i \\<le> n} = {i. i \\<le> n}\",\n       cut_tac a = x and A = \"{i. i \\<le> n}\" and B = \"f ` {i. i \\<le> n}\" in \n       eq_set_inc, simp, assumption,\n       thin_tac \"f x \\<in> {i. i \\<le> n}\", thin_tac \"{i. i \\<le> n} = f ` {i. i \\<le> n}\",\n       simp add:image_def, rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; x \\<le> n;\n        \\<exists>xa\\<le>n. x = f xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<le>n. x = f a\n 2. \\<And>x xa.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; x \\<le> n; \\<exists>xa\\<le>n. x = f xa;\n        xa \\<le> n \\<and> x = f xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ninv_r_inv:\"\\<lbrakk>f \\<in> {i. i \\<le> (n::nat)} \\<rightarrow> {i. i \\<le> n}; inj_on f {i. i \\<le> n}; \n      b \\<le> n\\<rbrakk>  \\<Longrightarrow>  f (ninv n f b) = b \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}; b \\<le> n\\<rbrakk>\n    \\<Longrightarrow> f (ninv n f b) = b", "apply (simp add:ninv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}; b \\<le> n\\<rbrakk>\n    \\<Longrightarrow> f (SOME x. x \\<le> n \\<and> b = f x) = b", "apply (frule inj_surj, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}; b \\<le> n;\n     f ` {i. i \\<le> n} = {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f (SOME x. x \\<le> n \\<and> b = f x) = b", "apply (cut_tac a = b in eq_set_inc[of _ \"{i. i \\<le> n}\" \"f ` {i. i \\<le> n}\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}; b \\<le> n;\n     f ` {i. i \\<le> n} = {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> b \\<in> {i. i \\<le> n}\n 2. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}; b \\<le> n;\n     f ` {i. i \\<le> n} = {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> {i. i \\<le> n} = f ` {i. i \\<le> n}\n 3. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}; b \\<le> n;\n     f ` {i. i \\<le> n} = {i. i \\<le> n};\n     b \\<in> f ` {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f (SOME x. x \\<le> n \\<and> b = f x) = b", "apply (simp, rule sym, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}; b \\<le> n;\n     f ` {i. i \\<le> n} = {i. i \\<le> n};\n     b \\<in> f ` {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> f (SOME x. x \\<le> n \\<and> b = f x) = b", "apply (thin_tac \"f ` {i. i \\<le> n} = {i. i \\<le> n}\", simp add:image_def,\n         erule exE, erule conjE, frule sym, thin_tac \"b = f x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; b \\<le> n; x \\<le> n; f x = b\\<rbrakk>\n       \\<Longrightarrow> f (SOME x. x \\<le> n \\<and> b = f x) = b", "apply (rule someI2_ex, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; b \\<le> n; x \\<le> n; f x = b;\n        xa \\<le> n \\<and> b = f xa\\<rbrakk>\n       \\<Longrightarrow> f xa = b", "apply (erule conjE, rule sym, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ninv_inj:\"\\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n}; inj_on f {i. i \\<le> n}\\<rbrakk> \\<Longrightarrow>\n                                inj_on  (ninv n f) {i. i \\<le> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> inj_on (ninv n f) {i. i \\<le> n}", "apply (subst inj_on_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n     inj_on f {i. i \\<le> n}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<le>n.\n                         \\<forall>y\\<le>n.\n                            ninv n f x = ninv n f y \\<longrightarrow> x = y", "apply ((rule allI, rule impI)+, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; x \\<le> n; y \\<le> n;\n        ninv n f x = ninv n f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule ninv_hom[of f n], assumption,\n      frule_tac x = x in funcset_mem[of \"ninv n f\" \"{i. i \\<le> n}\" \"{i. i \\<le> n}\"],      simp,\n      frule_tac x = y in funcset_mem[of \"ninv n f\" \"{i. i \\<le> n}\" \"{i. i \\<le> n}\"],\n      simp,\n      frule_tac b = x in ninv_r_inv  [of f n], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        inj_on f {i. i \\<le> n}; x \\<le> n; y \\<le> n;\n        ninv n f x = ninv n f y;\n        ninv n f \\<in> {i. i \\<le> n} \\<rightarrow> {i. i \\<le> n};\n        ninv n f x \\<in> {i. i \\<le> n}; ninv n f y \\<in> {i. i \\<le> n};\n        f (ninv n f x) = x\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add:ninv_r_inv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Lemmas required in Algebra6.thy\""], ["", "lemma ge2_zmult_pos:\n  \"2 \\<le> m \\<Longrightarrow> 0 < z \\<Longrightarrow> 1 < int m * z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>2 \\<le> m; 0 < z\\<rbrakk> \\<Longrightarrow> 1 < int m * z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>2 \\<le> m; 0 < z\\<rbrakk> \\<Longrightarrow> 1 < int m * z", "assume a1: \"0 < z\""], ["proof (state)\nthis:\n  0 < z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>2 \\<le> m; 0 < z\\<rbrakk> \\<Longrightarrow> 1 < int m * z", "assume a2: \"2 \\<le> m\""], ["proof (state)\nthis:\n  2 \\<le> m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>2 \\<le> m; 0 < z\\<rbrakk> \\<Longrightarrow> 1 < int m * z", "have \"int m + - 1 * (int m * z) \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int m + - 1 * (int m * z) \\<le> 0", "using a1"], ["proof (prove)\nusing this:\n  0 < z\n\ngoal (1 subgoal):\n 1. int m + - 1 * (int m * z) \\<le> 0", "by (simp add: pos_zmult_pos)"], ["proof (state)\nthis:\n  int m + - 1 * (int m * z) \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>2 \\<le> m; 0 < z\\<rbrakk> \\<Longrightarrow> 1 < int m * z", "then"], ["proof (chain)\npicking this:\n  int m + - 1 * (int m * z) \\<le> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  int m + - 1 * (int m * z) \\<le> 0\n\ngoal (1 subgoal):\n 1. 1 < int m * z", "using a2"], ["proof (prove)\nusing this:\n  int m + - 1 * (int m * z) \\<le> 0\n  2 \\<le> m\n\ngoal (1 subgoal):\n 1. 1 < int m * z", "by linarith"], ["proof (state)\nthis:\n  1 < int m * z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma zmult_pos_mono:\"\\<lbrakk> (0::int) < w; w * z \\<le> w * z'\\<rbrakk> \\<Longrightarrow> z \\<le> z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; w * z \\<le> w * z'\\<rbrakk> \\<Longrightarrow> z \\<le> z'", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zmult_pos_mono_r:\n         \"\\<lbrakk>(0::int) < w; z * w \\<le> z' * w\\<rbrakk> \\<Longrightarrow> z \\<le> z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < w; z * w \\<le> z' * w\\<rbrakk> \\<Longrightarrow> z \\<le> z'", "apply (simp add:mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma an_neq_inf:\"an n \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an n \\<noteq> \\<infinity>", "by (simp add:an_def)"], ["", "lemma an_neq_minf:\"an n \\<noteq> -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an n \\<noteq> - \\<infinity>", "by (simp add:an_def)"], ["", "lemma  aeq_mult:\"\\<lbrakk>z \\<noteq> 0; a = b\\<rbrakk> \\<Longrightarrow> a * ant z = b * ant z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<noteq> 0; a = b\\<rbrakk>\n    \\<Longrightarrow> a * ant z = b * ant z", "by simp"], ["", "lemma tna_0[simp]:\"tna 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tna 0 = 0", "by (simp add:ant_0[THEN sym] tna_ant)"], ["", "lemma ale_nat_le:\"(an n \\<le> an m) = (n \\<le> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (an n \\<le> an m) = (n \\<le> m)", "by (simp add:an_def)"], ["", "lemma aless_nat_less:\"(an n < an m) = (n < m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (an n < an m) = (n < m)", "by (simp add:an_def, subst aless_zless[of \"int n\" \"int m\"], simp)"], ["", "lemma apos_natpos:\"\\<lbrakk>a \\<noteq> \\<infinity>; 0 \\<le> a\\<rbrakk> \\<Longrightarrow> 0 \\<le> na a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> \\<infinity>; 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> na a", "by (cut_tac ale_nat_le[of \"0\" \"na a\"], simp add:na_def an_def)"], ["", "lemma apos_tna_pos:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n\\<rbrakk> \\<Longrightarrow> 0 \\<le> tna n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> tna n", "by (subst tna_0[THEN sym], \n       subst ale_zle[THEN sym, of \"tna 0\" \"tna n\"],\n       frule apos_neq_minf[of \"n\"],\n       simp add:ant_tna ant_0)"], ["", "lemma apos_na_pos:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n\\<rbrakk> \\<Longrightarrow> 0 \\<le> na n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> na n", "by (frule apos_tna_pos[of \"n\"], assumption, \n        cut_tac tna_0[THEN sym], simp del:tna_0)"], ["", "lemma aposs_tna_poss:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 < n\\<rbrakk> \\<Longrightarrow> 0 < tna n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> \\<infinity>; 0 < n\\<rbrakk>\n    \\<Longrightarrow> 0 < tna n", "apply (subst tna_0[THEN sym], \n       subst aless_zless[THEN sym, of \"tna 0\" \"tna n\"],\n       frule aless_imp_le[of \"0\" \"n\"],\n       frule apos_neq_minf[of \"n\"],\n       simp add:ant_tna ant_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aposs_na_poss:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 < n\\<rbrakk> \\<Longrightarrow> 0 < na n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> \\<infinity>; 0 < n\\<rbrakk>\n    \\<Longrightarrow> 0 < na n", "apply (frule aless_imp_le[of \"0\" \"n\"],\n       simp add:aneg_less[THEN sym, of \"0\" \"n\"],\n       simp add:na_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> \\<infinity>; 0 < n; \\<not> n < 0\\<rbrakk>\n    \\<Longrightarrow> 0 < tna n", "apply (rule aposs_tna_poss, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nat_0_le: \"0 \\<le> z ==> int (nat z) = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> z \\<Longrightarrow> int (nat z) = z", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma int_eq:\"m = n \\<Longrightarrow> int m = int n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = n \\<Longrightarrow> int m = int n", "by simp"], ["", "lemma box_equation:\"\\<lbrakk>a = b; a = c\\<rbrakk> \\<Longrightarrow> b = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = b; a = c\\<rbrakk> \\<Longrightarrow> b = c", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aeq_nat_eq:\"\\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n; m \\<noteq> \\<infinity>; 0 \\<le> m\\<rbrakk> \\<Longrightarrow> \n                    (n = m) = (na n = na m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n; m \\<noteq> \\<infinity>;\n     0 \\<le> m\\<rbrakk>\n    \\<Longrightarrow> (n = m) = (na n = na m)", "apply (rule iffI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> \\<infinity>; 0 \\<le> n; m \\<noteq> \\<infinity>;\n     0 \\<le> m; na n = na m\\<rbrakk>\n    \\<Longrightarrow> n = m", "apply (cut_tac aneg_less[THEN sym, of \"0\" \"n\"],\n       cut_tac aneg_less[THEN sym, of \"0\" \"m\"], simp,\n       simp add:na_def,\n       frule apos_neq_minf[of \"n\"],\n       frule apos_neq_minf[of \"m\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<noteq> \\<infinity>; \\<not> n < 0; m \\<noteq> \\<infinity>;\n     \\<not> m < 0; nat (tna n) = nat (tna m); 0 \\<le> n; 0 \\<le> m;\n     n \\<noteq> - \\<infinity>; m \\<noteq> - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> n = m", "apply (cut_tac mem_ant[of \"m\"],\n       cut_tac mem_ant[of \"n\"], simp,\n      (erule exE)+, simp,\n       simp add:tna_ant,\n       simp only:ant_0[THEN sym],\n       simp only:ale_zle)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma na_minf:\"na (-\\<infinity>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. na (- \\<infinity>) = 0", "apply (simp add:na_def, rule impI,\n       cut_tac minf_less_0, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma an_na:\"\\<lbrakk>a \\<noteq> \\<infinity>; 0 \\<le> a\\<rbrakk> \\<Longrightarrow> an (na a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> \\<infinity>; 0 \\<le> a\\<rbrakk>\n    \\<Longrightarrow> an (na a) = a", "apply (frule apos_tna_pos[of \"a\"], assumption,\n       frule apos_neq_minf[of \"a\"],\n       cut_tac mem_ant[of \"a\"], simp, erule exE,\n       simp, simp add:an_def na_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>0 \\<le> ant z; 0 \\<le> tna (ant z); a = ant z\\<rbrakk>\n       \\<Longrightarrow> (ant z < 0 \\<longrightarrow> z = 0) \\<and>\n                         (\\<not> ant z < 0 \\<longrightarrow>\n                          tna (ant z) = z)", "apply (cut_tac y = 0 and x = \"ant z\" in aneg_less, simp,\n       simp only:ant_0[THEN sym],\n       simp only:ale_zle, simp add:tna_ant)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_na_le_minf:\"\\<not> (an n \\<le> -\\<infinity> )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> an n \\<le> - \\<infinity>", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. an n \\<le> - \\<infinity> \\<Longrightarrow> False", "apply (cut_tac minf_le_any[of \"an n\"], frule ale_antisym[of \"an n\" \"-\\<infinity>\"],\n       assumption+, simp add:an_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_na_less_minf:\"\\<not> (an n < -\\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> an n < - \\<infinity>", "apply (simp add:aneg_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_na_ge_inf:\"\\<not> \\<infinity> \\<le> (an n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<infinity> \\<le> an n", "apply (simp add:aneg_le, unfold an_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ant (int n) < \\<infinity>", "apply (simp add:z_less_i[of \"int n\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma an_na_le:\"j \\<le> an n \\<Longrightarrow> na j \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> an n \\<Longrightarrow> na j \\<le> n", "apply (case_tac \"j = -\\<infinity>\", simp add:na_minf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> na j \\<le> n", "apply (simp add:na_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (j \\<noteq> \\<infinity> \\<longrightarrow>\n                       \\<not> j < 0 \\<longrightarrow>\n                       nat (tna j) \\<le> n) \\<and>\n                      (j = \\<infinity> \\<longrightarrow>\n                       \\<not> \\<infinity> < 0 \\<longrightarrow>\n                       undefined \\<le> n)", "apply (case_tac \"j = \\<infinity>\", simp, rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<infinity> \\<le> an n; \\<infinity> \\<noteq> - \\<infinity>;\n     j = \\<infinity>; \\<not> \\<infinity> < 0\\<rbrakk>\n    \\<Longrightarrow> undefined \\<le> n\n 2. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>;\n     j \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (j \\<noteq> \\<infinity> \\<longrightarrow>\n                       \\<not> j < 0 \\<longrightarrow>\n                       nat (tna j) \\<le> n) \\<and>\n                      (j = \\<infinity> \\<longrightarrow>\n                       \\<not> \\<infinity> < 0 \\<longrightarrow>\n                       undefined \\<le> n)", "apply (cut_tac not_na_ge_inf[of n], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>;\n     j \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> (j \\<noteq> \\<infinity> \\<longrightarrow>\n                       \\<not> j < 0 \\<longrightarrow>\n                       nat (tna j) \\<le> n) \\<and>\n                      (j = \\<infinity> \\<longrightarrow>\n                       \\<not> \\<infinity> < 0 \\<longrightarrow>\n                       undefined \\<le> n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>;\n     j \\<noteq> \\<infinity>\\<rbrakk>\n    \\<Longrightarrow> \\<not> j < 0 \\<longrightarrow> nat (tna j) \\<le> n", "apply (rule impI, simp add:aneg_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>; j \\<noteq> \\<infinity>;\n     0 \\<le> j\\<rbrakk>\n    \\<Longrightarrow> nat (tna j) \\<le> n", "apply (frule an_na[of j], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>; j \\<noteq> \\<infinity>;\n     0 \\<le> j; an (na j) = j\\<rbrakk>\n    \\<Longrightarrow> nat (tna j) \\<le> n", "apply (subgoal_tac \"nat (tna j) = na j\", simp,\n                   thin_tac \"nat (tna j) = na j\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>; j \\<noteq> \\<infinity>;\n     0 \\<le> j; an (na j) = j\\<rbrakk>\n    \\<Longrightarrow> na j \\<le> n\n 2. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>; j \\<noteq> \\<infinity>;\n     0 \\<le> j; an (na j) = j\\<rbrakk>\n    \\<Longrightarrow> nat (tna j) = na j", "apply (cut_tac ale_trans[of \"an (na j)\" j \"an n\"], thin_tac \"j \\<le> an n\",\n       thin_tac \"an (na j) = j\", simp add:ale_nat_le[of \"na j\" n],\n       simp add:ale_refl[of j], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>; j \\<noteq> \\<infinity>;\n     0 \\<le> j; an (na j) = j\\<rbrakk>\n    \\<Longrightarrow> nat (tna j) = na j", "apply (thin_tac \"an (na j) = j\", simp add:na_def,\n       rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> an n; j \\<noteq> - \\<infinity>; j \\<noteq> \\<infinity>;\n     0 \\<le> j; j < 0\\<rbrakk>\n    \\<Longrightarrow> tna j \\<le> 0", "apply (simp add:aneg_le[THEN sym, of j 0])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma aless_neq :\"(x::ant) < y \\<Longrightarrow> x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> x \\<noteq> y", "by (rule contrapos_pp, simp+)"], ["", "chapter \"Ordered Set\""], ["", "(* In this chapter, I prove Zorn's lemma in general form. *)"], ["", "section \"Basic Concepts of Ordered Sets\""], ["", "record 'a carrier =\n  carrier :: \"'a set\""], ["", "record 'a Order = \"'a carrier\" +\n  rel :: \"('a \\<times> 'a) set\""], ["", "locale Order =\n  fixes D (structure)\n  assumes  closed: \"rel D \\<subseteq> carrier D \\<times> carrier D\"\n      and    refl: \"a \\<in> carrier D \\<Longrightarrow> (a, a) \\<in> rel D\"\n      and antisym: \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; (a, b) \\<in> rel D; \n                     (b, a) \\<in> rel D\\<rbrakk> \\<Longrightarrow> a = b\"\n      and   trans: \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D; \n                     (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk> \\<Longrightarrow> (a, c) \\<in> rel D\""], ["", "(* print_locale Order *)"], ["", "definition\n  ole :: \"_ \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\"    (infix \"\\<preceq>\\<index>\" 60) where\n  \"a \\<preceq>\\<^bsub>D\\<^esub> b \\<longleftrightarrow> (a, b) \\<in> rel D\""], ["", "definition\n  oless :: \"_ \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\"    (infix \"\\<prec>\\<index>\" 60) where\n  \"a \\<prec>\\<^bsub>D\\<^esub> b \\<equiv> a \\<preceq>\\<^bsub>D\\<^esub> b \\<and> a \\<noteq> b\""], ["", "lemma Order_component:\"(E::'a Order) = \\<lparr> carrier = carrier E, rel = rel E \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E = \\<lparr>carrier = carrier E, rel = rel E\\<rparr>", "by simp"], ["", "(** An ordered set consists of two components **)"], ["", "lemma Order_comp_eq:\"\\<lbrakk>carrier (E::'a Order) = carrier (F::'a Order);\n                      rel E = rel F\\<rbrakk> \\<Longrightarrow> E = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>carrier E = carrier F; rel E = rel F\\<rbrakk>\n    \\<Longrightarrow> E = F", "by simp"], ["", "(* components coincide then ordered sets coincide. *)"], ["", "lemma (in Order) le_rel:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                           (a \\<preceq> b) = ((a, b) \\<in> rel D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b = ((a, b) \\<in> rel D)", "by (simp add:ole_def)"], ["", "lemma (in Order) less_imp_le:\n      \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b \\<rbrakk> \\<Longrightarrow> a \\<preceq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "by (simp add:oless_def)"], ["", "lemma (in Order) le_refl:\"a \\<in> carrier D \\<Longrightarrow> a \\<preceq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier D \\<Longrightarrow> a \\<preceq> a", "apply (unfold ole_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier D \\<Longrightarrow> (a, a) \\<in> rel D", "apply (rule refl, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) le_antisym:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; \n      a \\<preceq> b; b \\<preceq> a \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (unfold ole_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; (a, b) \\<in> rel D;\n     (b, a) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (rule antisym)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; (a, b) \\<in> rel D;\n     (b, a) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; (a, b) \\<in> rel D;\n     (b, a) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; (a, b) \\<in> rel D;\n     (b, a) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> (a, b) \\<in> rel D\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; (a, b) \\<in> rel D;\n     (b, a) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> (b, a) \\<in> rel D", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) le_trans:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n      a \\<preceq> b; b \\<preceq> c \\<rbrakk> \\<Longrightarrow> a \\<preceq> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b; b \\<preceq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> c", "apply (unfold ole_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> (a, c) \\<in> rel D", "apply (rule_tac a = a and b = b and c = c in trans)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> c \\<in> carrier D\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> (a, b) \\<in> rel D\n 5. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n    \\<Longrightarrow> (b, c) \\<in> rel D", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) less_trans:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D; \n      a \\<prec> b; b \\<prec> c \\<rbrakk> \\<Longrightarrow> a \\<prec> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<prec> b; b \\<prec> c\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> c", "apply (unfold oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b \\<and> a \\<noteq> b;\n     b \\<preceq> c \\<and> b \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> c \\<and> a \\<noteq> c", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b; a \\<noteq> b; b \\<preceq> c; b \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> c \\<and> a \\<noteq> c", "apply (simp add:le_trans[of a b c])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b; a \\<noteq> b; b \\<preceq> c; b \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<noteq> c", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; c \\<preceq> b;\n     b \\<preceq> c; b \\<noteq> c; a = c\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac le_antisym[of b c], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; c \\<preceq> b;\n     b \\<preceq> c; b \\<noteq> c; a = c; b = c\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) le_less_trans:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n      a \\<preceq> b; b \\<prec> c \\<rbrakk> \\<Longrightarrow> a \\<prec> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b; b \\<prec> c\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> c", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b; b \\<preceq> c \\<and> b \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> c \\<and> a \\<noteq> c", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b; b \\<preceq> c; b \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> c \\<and> a \\<noteq> c", "apply (simp add:le_trans[of a b c])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b; b \\<preceq> c; b \\<noteq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<noteq> c", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; c \\<preceq> b;\n     b \\<preceq> c; b \\<noteq> c; a = c\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule le_antisym[of \"b\" \"c\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; c \\<preceq> b;\n     b \\<preceq> c; b \\<noteq> c; a = c\\<rbrakk>\n    \\<Longrightarrow> c \\<in> carrier D\n 2. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; c \\<preceq> b;\n     b \\<preceq> c; b \\<noteq> c; a = c\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> c\n 3. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; c \\<preceq> b;\n     b \\<preceq> c; b \\<noteq> c; a = c\\<rbrakk>\n    \\<Longrightarrow> c \\<preceq> b\n 4. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; c \\<preceq> b;\n     b \\<preceq> c; b \\<noteq> c; a = c; b = c\\<rbrakk>\n    \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; c \\<preceq> b;\n     b \\<preceq> c; b \\<noteq> c; a = c; b = c\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) less_le_trans:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n      a \\<prec> b; b \\<preceq> c \\<rbrakk> \\<Longrightarrow> a \\<prec> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<prec> b; b \\<preceq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> c", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     a \\<preceq> b \\<and> a \\<noteq> b; b \\<preceq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> c \\<and> a \\<noteq> c", "apply ( erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     b \\<preceq> c; a \\<preceq> b; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> c \\<and> a \\<noteq> c", "apply (simp add:le_trans[of a b c])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D;\n     b \\<preceq> c; a \\<preceq> b; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<noteq> c", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; b \\<preceq> c;\n     c \\<preceq> b; c \\<noteq> b; a = c\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule le_antisym[of \"b\" \"c\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; b \\<preceq> c;\n     c \\<preceq> b; c \\<noteq> b; a = c\\<rbrakk>\n    \\<Longrightarrow> c \\<in> carrier D\n 2. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; b \\<preceq> c;\n     c \\<preceq> b; c \\<noteq> b; a = c\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> c\n 3. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; b \\<preceq> c;\n     c \\<preceq> b; c \\<noteq> b; a = c\\<rbrakk>\n    \\<Longrightarrow> c \\<preceq> b\n 4. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; b \\<preceq> c;\n     c \\<preceq> b; c \\<noteq> b; a = c; b = c\\<rbrakk>\n    \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; c \\<in> carrier D; b \\<preceq> c;\n     c \\<preceq> b; c \\<noteq> b; a = c; b = c\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) le_imp_less_or_eq:\n    \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a \\<preceq> b) = (a \\<prec> b \\<or> a = b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b = (a \\<prec> b \\<or> a = b)", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (a \\<preceq> b \\<and> a \\<noteq> b \\<or> a = b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b \\<and> a \\<noteq> b \\<or> a = b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<and> a \\<noteq> b \\<or> a = b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<and> a \\<noteq> b \\<or> a = b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<and> a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a = b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a = b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a = b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> b", "apply (rule le_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a = b\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) less_neq: \"a \\<prec> b \\<Longrightarrow> a \\<noteq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<prec> b \\<Longrightarrow> a \\<noteq> b", "by (simp add: oless_def)"], ["", "lemma (in Order) le_neq_less: \"\\<lbrakk>a \\<preceq> b; a \\<noteq> b\\<rbrakk> \\<Longrightarrow> a \\<prec> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<preceq> b; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "by (simp add: oless_def)"], ["", "lemma (in Order) less_irrefl: \"\\<lbrakk>a \\<in> carrier D; a \\<prec> a\\<rbrakk> \\<Longrightarrow> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; a \\<prec> a\\<rbrakk> \\<Longrightarrow> C", "by (simp add:oless_def)"], ["", "lemma (in Order) less_irrefl': \"a \\<in> carrier D \\<Longrightarrow> \\<not> a \\<prec> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier D \\<Longrightarrow> \\<not> a \\<prec> a", "by (simp add:oless_def)"], ["", "lemma (in Order) less_asym:\n  \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow> a \\<prec> b \\<Longrightarrow> b \\<prec> a \\<Longrightarrow> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b;\n     b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> C", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<and> a \\<noteq> b;\n     b \\<preceq> a \\<and> b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> C", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> C", "apply (frule le_antisym[of \"a\" \"b\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a; a = b\\<rbrakk>\n    \\<Longrightarrow> C", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a; a = b\\<rbrakk>\n    \\<Longrightarrow> C", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) less_asym':\n  \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow> a \\<prec> b \\<Longrightarrow> \\<not> b \\<prec> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> \\<not> b \\<prec> a", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b;\n     b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<and> a \\<noteq> b;\n     b \\<preceq> a \\<and> b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule le_antisym[of \"a\" \"b\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a; a = b\\<rbrakk>\n    \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a; a = b\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) gt_than_any_outside:\"\\<lbrakk>A \\<subseteq> carrier D; b \\<in> carrier D;\n       \\<forall>x\\<in>A. x \\<prec> b\\<rbrakk> \\<Longrightarrow> b \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>A. x \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> A", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>A. x \\<prec> b; b \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac x = b in bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A \\<subseteq> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>A. x \\<prec> b; b \\<in> A\\<rbrakk>\n    \\<Longrightarrow> b \\<in> A\n 2. \\<lbrakk>A \\<subseteq> carrier D; b \\<in> carrier D;\n     \\<forall>x\\<in>A. x \\<prec> b; b \\<in> A; b \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> False", "apply  (assumption,\n       thin_tac \"\\<forall>x\\<in>A. x \\<prec> b\", simp add:oless_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  Iod :: \"_ \\<Rightarrow> 'a set \\<Rightarrow> _\" where\n  \"Iod D T =\n    D \\<lparr>carrier := T, rel := {(a, b). (a, b) \\<in> rel D \\<and> a \\<in> T \\<and> b \\<in> T}\\<rparr>\""], ["", "definition\n  SIod :: \"'a Order \\<Rightarrow> 'a set \\<Rightarrow> 'a Order\" where\n  \"SIod D T = \\<lparr>carrier = T, rel = {(a, b). (a, b) \\<in> rel D \\<and> a \\<in> T \\<and> b \\<in> T}\\<rparr>\""], ["", "lemma (in Order) Iod_self: \"D = Iod D (carrier D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D = Iod D (carrier D)", "apply (unfold  Iod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. D = D\n    \\<lparr>carrier := carrier D,\n       rel :=\n         {(a, b).\n          (a, b) \\<in> rel D \\<and>\n          a \\<in> carrier D \\<and> b \\<in> carrier D}\\<rparr>", "apply (cases D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>carriera rela more.\n       D =\n       \\<lparr>carrier = carriera, rel = rela,\n          \\<dots> = more\\<rparr> \\<Longrightarrow>\n       D = D\n       \\<lparr>carrier := carrier D,\n          rel :=\n            {(a, b).\n             (a, b) \\<in> rel D \\<and>\n             a \\<in> carrier D \\<and> b \\<in> carrier D}\\<rparr>", "apply (insert closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>carriera rela more.\n       \\<lbrakk>D =\n                \\<lparr>carrier = carriera, rel = rela,\n                   \\<dots> = more\\<rparr>;\n        rel D \\<subseteq> carrier D \\<times> carrier D\\<rbrakk>\n       \\<Longrightarrow> D = D\n                         \\<lparr>carrier := carrier D,\n                            rel :=\n                              {(a, b).\n                               (a, b) \\<in> rel D \\<and>\n                               a \\<in> carrier D \\<and>\n                               b \\<in> carrier D}\\<rparr>", "apply (simp add:Iod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>carrier rel more.\n       \\<lbrakk>D =\n                \\<lparr>carrier = carrier, rel = rel,\n                   \\<dots> = more\\<rparr>;\n        rel \\<subseteq> carrier \\<times> carrier\\<rbrakk>\n       \\<Longrightarrow> rel =\n                         {(a, b).\n                          (a, b) \\<in> rel \\<and>\n                          a \\<in> carrier \\<and> b \\<in> carrier}", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>carrier rel more.\n       \\<lbrakk>D =\n                \\<lparr>carrier = carrier, rel = rel,\n                   \\<dots> = more\\<rparr>;\n        rel \\<subseteq> carrier \\<times> carrier\\<rbrakk>\n       \\<Longrightarrow> rel\n                         \\<subseteq> {(a, b).\n(a, b) \\<in> rel \\<and> a \\<in> carrier \\<and> b \\<in> carrier}\n 2. \\<And>carrier rel more.\n       \\<lbrakk>D =\n                \\<lparr>carrier = carrier, rel = rel,\n                   \\<dots> = more\\<rparr>;\n        rel \\<subseteq> carrier \\<times> carrier\\<rbrakk>\n       \\<Longrightarrow> {(a, b).\n                          (a, b) \\<in> rel \\<and>\n                          a \\<in> carrier \\<and> b \\<in> carrier}\n                         \\<subseteq> rel", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>carrier rel more x.\n       \\<lbrakk>D =\n                \\<lparr>carrier = carrier, rel = rel,\n                   \\<dots> = more\\<rparr>;\n        rel \\<subseteq> carrier \\<times> carrier; x \\<in> rel\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {(a, b).\n                                  (a, b) \\<in> rel \\<and>\n                                  a \\<in> carrier \\<and> b \\<in> carrier}\n 2. \\<And>carrier rel more.\n       \\<lbrakk>D =\n                \\<lparr>carrier = carrier, rel = rel,\n                   \\<dots> = more\\<rparr>;\n        rel \\<subseteq> carrier \\<times> carrier\\<rbrakk>\n       \\<Longrightarrow> {(a, b).\n                          (a, b) \\<in> rel \\<and>\n                          a \\<in> carrier \\<and> b \\<in> carrier}\n                         \\<subseteq> rel", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SIod_self:\"Order D \\<Longrightarrow> D = SIod D (carrier D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order D \\<Longrightarrow> D = SIod D (carrier D)", "apply (unfold SIod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Order D \\<Longrightarrow>\n    D =\n    \\<lparr>carrier = carrier D,\n       rel =\n         {(a, b).\n          (a, b) \\<in> rel D \\<and>\n          a \\<in> carrier D \\<and> b \\<in> carrier D}\\<rparr>", "apply (cases D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>carriera rela.\n       \\<lbrakk>Order D;\n        D = \\<lparr>carrier = carriera, rel = rela\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> D =\n                         \\<lparr>carrier = carrier D,\n                            rel =\n                              {(a, b).\n                               (a, b) \\<in> rel D \\<and>\n                               a \\<in> carrier D \\<and>\n                               b \\<in> carrier D}\\<rparr>", "apply (cut_tac Order.closed[of \"D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>carriera rela.\n       \\<lbrakk>Order D; D = \\<lparr>carrier = carriera, rel = rela\\<rparr>;\n        rel D \\<subseteq> carrier D \\<times> carrier D\\<rbrakk>\n       \\<Longrightarrow> D =\n                         \\<lparr>carrier = carrier D,\n                            rel =\n                              {(a, b).\n                               (a, b) \\<in> rel D \\<and>\n                               a \\<in> carrier D \\<and>\n                               b \\<in> carrier D}\\<rparr>\n 2. \\<And>carrier rel.\n       \\<lbrakk>Order D;\n        D = \\<lparr>carrier = carrier, rel = rel\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> Order D", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Od_carrier:\"carrier (D\\<lparr>carrier := S, rel := R\\<rparr>) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (D\\<lparr>carrier := S, rel := R\\<rparr>) = S", "by simp"], ["", "lemma (in Order) Od_rel:\"rel (D\\<lparr>carrier := S, rel := R\\<rparr>) = R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel (D\\<lparr>carrier := S, rel := R\\<rparr>) = R", "by simp"], ["", "lemma (in Order) Iod_carrier:\n    \"T \\<subseteq> carrier D \\<Longrightarrow> carrier (Iod D T) = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> carrier D \\<Longrightarrow> carrier (Iod D T) = T", "by (simp add: Iod_def)"], ["", "lemma SIod_carrier:\"\\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> carrier (SIod D T) = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> carrier (SIod D T) = T", "by (simp add:SIod_def)"], ["", "lemma (in Order) Od_compare:\"(S = S' \\<and> R = R') = (D\\<lparr>carrier := S, rel := R\\<rparr> = D\\<lparr>carrier := S', rel := R'\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (S = S' \\<and> R = R') =\n    (D\\<lparr>carrier := S, rel := R\\<rparr> = D\n     \\<lparr>carrier := S', rel := R'\\<rparr>)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. S = S' \\<and> R = R' \\<Longrightarrow>\n    D\\<lparr>carrier := S, rel := R\\<rparr> = D\n    \\<lparr>carrier := S', rel := R'\\<rparr>\n 2. D\\<lparr>carrier := S, rel := R\\<rparr> = D\n    \\<lparr>carrier := S', rel := R'\\<rparr> \\<Longrightarrow>\n    S = S' \\<and> R = R'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. D\\<lparr>carrier := S, rel := R\\<rparr> = D\n    \\<lparr>carrier := S', rel := R'\\<rparr> \\<Longrightarrow>\n    S = S' \\<and> R = R'", "apply (cut_tac Od_carrier[of R S], cut_tac Od_carrier[of R' S'], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D\\<lparr>carrier := S, rel := R\\<rparr> = D\n             \\<lparr>carrier := S, rel := R'\\<rparr>;\n     S' = S\\<rbrakk>\n    \\<Longrightarrow> R = R'", "apply (cut_tac Od_rel[of R S], cut_tac Od_rel[of R' S'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D\\<lparr>carrier := S, rel := R\\<rparr> = D\n             \\<lparr>carrier := S, rel := R'\\<rparr>;\n     S' = S; rel (D\\<lparr>carrier := S, rel := R\\<rparr>) = R;\n     rel (D\\<lparr>carrier := S', rel := R'\\<rparr>) = R'\\<rbrakk>\n    \\<Longrightarrow> R = R'", "apply (thin_tac \"S' = S\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D\\<lparr>carrier := S, rel := R\\<rparr> = D\n             \\<lparr>carrier := S, rel := R'\\<rparr>;\n     rel (D\\<lparr>carrier := S, rel := R\\<rparr>) = R;\n     rel (D\\<lparr>carrier := S', rel := R'\\<rparr>) = R'\\<rbrakk>\n    \\<Longrightarrow> R = R'", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Iod_le:\n  \"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk> \\<Longrightarrow> (a \\<preceq>\\<^bsub>Iod D T\\<^esub> b) = (a \\<preceq> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D T\\<^esub> b = a \\<preceq> b", "apply (simp add: Iod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<lparr>carrier := T, rel := {(a, b). (a, b) \\<in> rel D \\<and> a \\<in> T \\<and> b \\<in> T}\\<rparr>\\<^esub>\n                      b =\n                      a \\<preceq> b", "apply (simp add:ole_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SIod_le:\"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk> \\<Longrightarrow> \n                     (a \\<preceq>\\<^bsub>SIod D T\\<^esub> b) = (a \\<preceq>\\<^bsub>D\\<^esub> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>SIod D T\\<^esub> b =\n                      a \\<preceq>\\<^bsub>D\\<^esub> b", "apply (simp add:SIod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>\\<lparr>carrier = T, rel = {(a, b). (a, b) \\<in> rel D \\<and> a \\<in> T \\<and> b \\<in> T}\\<rparr>\\<^esub>\n                      b =\n                      a \\<preceq>\\<^bsub>D\\<^esub> b", "apply (simp add:ole_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Iod_less:\n  \"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk> \\<Longrightarrow> (a \\<prec>\\<^bsub>Iod D T\\<^esub> b) = (a \\<prec> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>Iod D T\\<^esub> b = a \\<prec> b", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk>\n    \\<Longrightarrow> (a \\<preceq>\\<^bsub>Iod D T\\<^esub> b \\<and>\n                       a \\<noteq> b) =\n                      (a \\<preceq> b \\<and> a \\<noteq> b)", "apply (simp add:Iod_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SIod_less:\"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk> \\<Longrightarrow> \n                     (a \\<prec>\\<^bsub>SIod D T\\<^esub> b) = (a \\<prec>\\<^bsub>D\\<^esub> b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                      a \\<prec>\\<^bsub>D\\<^esub> b", "by (simp add:oless_def SIod_le)"], ["", "lemma (in Order) Iod_Order:\n    \"T \\<subseteq> carrier D \\<Longrightarrow> Order (Iod D T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> carrier D \\<Longrightarrow> Order (Iod D T)", "apply (rule Order.intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. T \\<subseteq> carrier D \\<Longrightarrow>\n    rel (Iod D T) \\<subseteq> carrier (Iod D T) \\<times> carrier (Iod D T)\n 2. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (Iod D T)\n 3. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (simp add:Iod_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. T \\<subseteq> carrier D \\<Longrightarrow>\n    {(a, b). (a, b) \\<in> rel D \\<and> a \\<in> T \\<and> b \\<in> T}\n    \\<subseteq> T \\<times> T\n 2. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (Iod D T)\n 3. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (rule subsetI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        x \\<in> {(a, b).\n                 (a, b) \\<in> rel D \\<and>\n                 a \\<in> T \\<and> b \\<in> T}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T \\<times> T\n 2. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (Iod D T)\n 3. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (unfold split_paired_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        (a, b)\n        \\<in> {(a, b).\n               (a, b) \\<in> rel D \\<and>\n               a \\<in> T \\<and> b \\<in> T}\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> T \\<times> T\n 2. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (Iod D T)\n 3. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (Iod D T)\n 2. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (Iod D T)\n 2. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (simp add:Iod_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel D\n 2. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (rule refl)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 2. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (rule subsetD, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); (a, b) \\<in> rel (Iod D T);\n        (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel (Iod D T); (b, a) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (simp add:Iod_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (rule_tac a = a and b = b in antisym)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 2. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> b \\<in> carrier D\n 3. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel D\n 4. \\<And>a b.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (b, a) \\<in> rel D\n 5. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (simp add:subsetD[of \"T\" \"carrier D\"])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> carrier (Iod D T);\n        b \\<in> carrier (Iod D T); c \\<in> carrier (Iod D T);\n        (a, b) \\<in> rel (Iod D T); (b, c) \\<in> rel (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (Iod D T)", "apply (simp add:Iod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; c \\<in> T;\n        (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel D", "apply (rule_tac a = a and b = b and c = c in trans)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; c \\<in> T;\n        (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 2. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; c \\<in> T;\n        (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> b \\<in> carrier D\n 3. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; c \\<in> T;\n        (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> c \\<in> carrier D\n 4. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; c \\<in> T;\n        (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel D\n 5. \\<And>a b c.\n       \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; c \\<in> T;\n        (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (b, c) \\<in> rel D", "apply (simp add:subsetD[of \"T\" \"carrier D\"])+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma  SIod_Order:\"\\<lbrakk> Order D; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> Order (SIod D T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (SIod D T)", "apply (rule Order.intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D T)\n                      \\<subseteq> carrier (SIod D T) \\<times>\n                                  carrier (SIod D T)\n 2. \\<And>a.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (SIod D T)\n 3. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        (a, b) \\<in> rel (SIod D T); (b, a) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (rule subsetI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        x \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (SIod D T) \\<times>\n                                 carrier (SIod D T)\n 2. \\<And>a.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (SIod D T)\n 3. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        (a, b) \\<in> rel (SIod D T); (b, a) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (simp add:SIod_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        case x of\n        (a, b) \\<Rightarrow>\n          (a, b) \\<in> rel D \\<and> a \\<in> T \\<and> b \\<in> T\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T \\<times> T\n 2. \\<And>a.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (SIod D T)\n 3. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        (a, b) \\<in> rel (SIod D T); (b, a) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (unfold split_paired_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        case (a, b) of\n        (a, b) \\<Rightarrow>\n          (a, b) \\<in> rel D \\<and> a \\<in> T \\<and> b \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> T \\<times> T\n 2. \\<And>a.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (SIod D T)\n 3. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        (a, b) \\<in> rel (SIod D T); (b, a) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel (SIod D T)\n 2. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        (a, b) \\<in> rel (SIod D T); (b, a) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (simp add:SIod_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel D\n 2. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        (a, b) \\<in> rel (SIod D T); (b, a) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (frule_tac c = a in subsetD[of T \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T;\n        a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (a, a) \\<in> rel D\n 2. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        (a, b) \\<in> rel (SIod D T); (b, a) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (simp add:Order.refl[of D])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        (a, b) \\<in> rel (SIod D T); (b, a) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (simp add:SIod_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (rule Order.antisym[of D], assumption+)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 2. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> b \\<in> carrier D\n 3. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel D\n 4. \\<And>a b.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        (a, b) \\<in> rel D; (b, a) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (b, a) \\<in> rel D\n 5. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (simp add:subsetD)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D;\n        a \\<in> carrier (SIod D T); b \\<in> carrier (SIod D T);\n        c \\<in> carrier (SIod D T); (a, b) \\<in> rel (SIod D T);\n        (b, c) \\<in> rel (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel (SIod D T)", "apply (simp add:SIod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        c \\<in> T; (a, b) \\<in> rel D; (b, c) \\<in> rel D\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel D", "apply (frule_tac c = a in subsetD[of T \"carrier D\"], assumption+,\n        frule_tac c = b in subsetD[of T \"carrier D\"], assumption+,\n        frule_tac c = c in subsetD[of T \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n        c \\<in> T; (a, b) \\<in> rel D; (b, c) \\<in> rel D;\n        a \\<in> carrier D; b \\<in> carrier D; c \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (a, c) \\<in> rel D", "apply (rule_tac a = a and b = b and c = c in Order.trans[of D], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) emptyset_Iod:\"Order (Iod D {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order (Iod D {})", "apply (rule Iod_Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<subseteq> carrier D", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Iod_sub_sub:\n     \"\\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> Iod (Iod D T) S = Iod D S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D T) S = Iod D S", "apply (simp add:Iod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> D\\<lparr>carrier := S,\n                          rel :=\n                            {(a, b).\n                             (a, b) \\<in> rel D \\<and>\n                             a \\<in> T \\<and>\n                             b \\<in> T \\<and>\n                             a \\<in> S \\<and> b \\<in> S}\\<rparr> =\n                      D\\<lparr>carrier := S,\n                          rel :=\n                            {(a, b).\n                             (a, b) \\<in> rel D \\<and>\n                             a \\<in> S \\<and> b \\<in> S}\\<rparr>", "apply (subst Od_compare[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> S = S \\<and>\n                      {(a, b).\n                       (a, b) \\<in> rel D \\<and>\n                       a \\<in> T \\<and>\n                       b \\<in> T \\<and> a \\<in> S \\<and> b \\<in> S} =\n                      {(a, b).\n                       (a, b) \\<in> rel D \\<and> a \\<in> S \\<and> b \\<in> S}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> {(a, b).\n                       (a, b) \\<in> rel D \\<and>\n                       a \\<in> T \\<and>\n                       b \\<in> T \\<and> a \\<in> S \\<and> b \\<in> S} =\n                      {(a, b).\n                       (a, b) \\<in> rel D \\<and> a \\<in> S \\<and> b \\<in> S}", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SIod_sub_sub:\n     \"\\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> SIod (SIod D T) S = SIod D S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D T) S = SIod D S", "apply (simp add:SIod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> T; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> {(a, b).\n                       (a, b) \\<in> rel D \\<and>\n                       a \\<in> T \\<and>\n                       b \\<in> T \\<and> a \\<in> S \\<and> b \\<in> S} =\n                      {(a, b).\n                       (a, b) \\<in> rel D \\<and> a \\<in> S \\<and> b \\<in> S}", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_SIod:\"\\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D; \n                  \\<forall>a\\<in>carrier E. \\<forall>b\\<in>carrier E. (a \\<preceq>\\<^bsub>E\\<^esub> b) = (a \\<preceq>\\<^bsub>D\\<^esub> b)\\<rbrakk> \\<Longrightarrow>\n                  rel E = rel (SIod D (carrier E))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel E = rel (SIod D (carrier E))", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel E \\<subseteq> rel (SIod D (carrier E))\n 2. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "(* show the equality of the sets *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel E \\<subseteq> rel (SIod D (carrier E))\n 2. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              a \\<preceq>\\<^bsub>E\\<^esub> b =\n              a \\<preceq>\\<^bsub>D\\<^esub> b;\n        x \\<in> rel E\\<rbrakk>\n       \\<Longrightarrow> x \\<in> rel (SIod D (carrier E))\n 2. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "apply (unfold split_paired_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              a \\<preceq>\\<^bsub>E\\<^esub> b =\n              a \\<preceq>\\<^bsub>D\\<^esub> b;\n        (a, b) \\<in> rel E\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel (SIod D (carrier E))\n 2. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "apply (simp add:ole_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              ((a, b) \\<in> rel E) = ((a, b) \\<in> rel D);\n        (a, b) \\<in> rel E\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel (SIod D (carrier E))\n 2. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "apply (simp add:SIod_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              ((a, b) \\<in> rel E) = ((a, b) \\<in> rel D);\n        (a, b) \\<in> rel E\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel D \\<and>\n                         a \\<in> carrier E \\<and> b \\<in> carrier E\n 2. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "apply (cut_tac Order.closed[of \"E\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              ((a, b) \\<in> rel E) = ((a, b) \\<in> rel D);\n        (a, b) \\<in> rel E;\n        rel E \\<subseteq> carrier E \\<times> carrier E\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel D \\<and>\n                         a \\<in> carrier E \\<and> b \\<in> carrier E\n 2. \\<And>a b.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              ((a, b) \\<in> rel E) = ((a, b) \\<in> rel D);\n        (a, b) \\<in> rel E\\<rbrakk>\n       \\<Longrightarrow> Order E\n 3. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              ((a, b) \\<in> rel E) = ((a, b) \\<in> rel D);\n        (a, b) \\<in> rel E\\<rbrakk>\n       \\<Longrightarrow> Order E\n 2. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel (SIod D (carrier E)) \\<subseteq> rel E", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              a \\<preceq>\\<^bsub>E\\<^esub> b =\n              a \\<preceq>\\<^bsub>D\\<^esub> b;\n        x \\<in> rel (SIod D (carrier E))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> rel E", "apply (unfold split_paired_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              a \\<preceq>\\<^bsub>E\\<^esub> b =\n              a \\<preceq>\\<^bsub>D\\<^esub> b;\n        (a, b) \\<in> rel (SIod D (carrier E))\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel E", "apply (simp add:SIod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E.\n           \\<forall>b\\<in>carrier E.\n              a \\<preceq>\\<^bsub>E\\<^esub> b =\n              a \\<preceq>\\<^bsub>D\\<^esub> b;\n        (a, b) \\<in> rel D \\<and>\n        a \\<in> carrier E \\<and> b \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> rel E", "apply (simp add:ole_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SIod_self_le:\"\\<lbrakk>Order D; Order E; \n         carrier E \\<subseteq> carrier D;\n        \\<forall>a\\<in>carrier E. \\<forall>b\\<in>carrier E. (a \\<preceq>\\<^bsub>E\\<^esub> b) = (a \\<preceq>\\<^bsub>D\\<^esub> b) \\<rbrakk> \\<Longrightarrow> \n         E = SIod D (carrier E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> E = SIod D (carrier E)", "apply (rule Order_comp_eq[of \"E\" \"SIod D (carrier E)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> carrier E = carrier (SIod D (carrier E))\n 2. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel E = rel (SIod D (carrier E))", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; carrier E \\<subseteq> carrier D;\n     \\<forall>a\\<in>carrier E.\n        \\<forall>b\\<in>carrier E.\n           a \\<preceq>\\<^bsub>E\\<^esub> b =\n           a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> rel E = rel (SIod D (carrier E))", "apply (rule rel_SIod[of \"D\" \"E\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Total ordering\\<close>"], ["", "locale Torder = Order + \n       assumes le_linear: \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                            a \\<preceq> b \\<or> b \\<preceq> a\""], ["", "lemma (in Order) Iod_empty_Torder:\"Torder (Iod D {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Torder (Iod D {})", "apply (rule Torder.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Order (Iod D {})\n 2. Torder_axioms (Iod D {})", "apply(simp add:emptyset_Iod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Torder_axioms (Iod D {})", "apply (rule Torder_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier (Iod D {});\n        b \\<in> carrier (Iod D {})\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D {}\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>Iod D {}\\<^esub> a", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) le_cases:\n  \"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; (a \\<preceq> b \\<Longrightarrow> C); (b \\<preceq> a \\<Longrightarrow> C)\\<rbrakk> \\<Longrightarrow> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<Longrightarrow> C;\n     b \\<preceq> a \\<Longrightarrow> C\\<rbrakk>\n    \\<Longrightarrow> C", "by (cut_tac le_linear[of \"a\" \"b\"], blast, assumption+)"], ["", "lemma (in Torder) Order:\"Order D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order D", "apply (rule Order_axioms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) less_linear:\n   \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow> a \\<prec> b \\<or> a = b \\<or> b \\<prec> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b \\<or> a = b \\<or> b \\<prec> a", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b \\<and> a \\<noteq> b \\<or>\n                      a = b \\<or> b \\<preceq> a \\<and> b \\<noteq> a", "apply (rule le_cases[of \"a\" \"b\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b \\<and> a \\<noteq> b \\<or>\n                      a = b \\<or> b \\<preceq> a \\<and> b \\<noteq> a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b \\<and> a \\<noteq> b \\<or>\n                      a = b \\<or> b \\<preceq> a \\<and> b \\<noteq> a", "apply assumption+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b \\<and> a \\<noteq> b \\<or>\n                      a = b \\<or> b \\<preceq> a \\<and> b \\<noteq> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b \\<and> a \\<noteq> b \\<or>\n                      a = b \\<or> b \\<preceq> a \\<and> b \\<noteq> a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b \\<and> a \\<noteq> b \\<or>\n                      a = b \\<or> b \\<preceq> a \\<and> b \\<noteq> a", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) not_le_less:\n  \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow>\n    (\\<not> a \\<preceq> b) = (b \\<prec> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (\\<not> a \\<preceq> b) = b \\<prec> a", "apply (unfold oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (\\<not> a \\<preceq> b) =\n                      (b \\<preceq> a \\<and> b \\<noteq> a)", "apply (cut_tac le_linear[of a b])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<or> b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> (\\<not> a \\<preceq> b) =\n                      (b \\<preceq> a \\<and> b \\<noteq> a)\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply (rule iffI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<or> b \\<preceq> a; \\<not> a \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a \\<and> b \\<noteq> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<or> b \\<preceq> a;\n     b \\<preceq> a \\<and> b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> a \\<preceq> b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a;\n     \\<not> a \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<noteq> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq> b \\<or> b \\<preceq> a;\n     b \\<preceq> a \\<and> b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> a \\<preceq> b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     b \\<preceq> a \\<and> b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> a \\<preceq> b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     b \\<preceq> a \\<and> b \\<noteq> a; a \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply (erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply (frule le_antisym[of b a])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     b \\<preceq> a; b \\<noteq> a; b = a\\<rbrakk>\n    \\<Longrightarrow> False\n 5. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 6. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     b \\<preceq> a; b \\<noteq> a; b = a\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) not_less_le:\n  \"a \\<in> carrier D \\<Longrightarrow> b \\<in> carrier D \\<Longrightarrow>\n    (\\<not> a \\<prec> b) = (b \\<preceq> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (\\<not> a \\<prec> b) = b \\<preceq> a", "apply (unfold oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (\\<not> (a \\<preceq> b \\<and> a \\<noteq> b)) =\n                      b \\<preceq> a", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     \\<not> (a \\<preceq> b \\<and> a \\<noteq> b)\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> (a \\<preceq> b \\<and> a \\<noteq> b)", "apply (simp only:de_Morgan_conj[of \"a \\<preceq> b\" \"a \\<noteq> b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     \\<not> a \\<preceq> b \\<or> \\<not> a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> (a \\<preceq> b \\<and> a \\<noteq> b)", "apply (simp only:not_le_less[of \"a\" \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     b \\<prec> a \\<or> \\<not> a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> (a \\<preceq> b \\<and> a \\<noteq> b)", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     \\<not> a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> (a \\<preceq> b \\<and> a \\<noteq> b)", "apply (simp add:less_imp_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     \\<not> a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> (a \\<preceq> b \\<and> a \\<noteq> b)", "apply (simp add:le_imp_less_or_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> \\<not> (a \\<preceq> b \\<and> a \\<noteq> b)", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a;\n     a \\<preceq> b \\<and> a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a;\n     a \\<preceq> b; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule le_antisym[of \"a\" \"b\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a;\n     a \\<preceq> b; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a;\n     a \\<preceq> b; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a;\n     a \\<preceq> b; a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a;\n     a \\<preceq> b; a \\<noteq> b; a = b\\<rbrakk>\n    \\<Longrightarrow> False", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; b \\<preceq> a;\n     a \\<preceq> b; a \\<noteq> b; a = b\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Iod_not_le_less:\"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; \n       Torder (Iod D T)\\<rbrakk> \\<Longrightarrow> (\\<not> a \\<preceq>\\<^bsub>(Iod D T)\\<^esub> b) = b \\<prec>\\<^bsub>(Iod D T)\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> (\\<not> a \\<preceq>\\<^bsub>Iod D T\\<^esub> b) =\n                      b \\<prec>\\<^bsub>Iod D T\\<^esub> a", "apply (subst Torder.not_le_less)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D T)\n 2. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier (Iod D T)\n 3. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier (Iod D T)\n 4. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> b \\<prec>\\<^bsub>Iod D T\\<^esub> a =\n                      b \\<prec>\\<^bsub>Iod D T\\<^esub> a", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier (Iod D T)\n 2. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier (Iod D T)\n 3. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> b \\<prec>\\<^bsub>Iod D T\\<^esub> a =\n                      b \\<prec>\\<^bsub>Iod D T\\<^esub> a", "apply (simp add:Iod_carrier)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Iod_not_less_le:\"\\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T; \n       Torder (Iod D T)\\<rbrakk> \\<Longrightarrow> (\\<not> a \\<prec>\\<^bsub>(Iod D T)\\<^esub> b) = b \\<preceq>\\<^bsub>(Iod D T)\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> (\\<not> a \\<prec>\\<^bsub>Iod D T\\<^esub> b) =\n                      b \\<preceq>\\<^bsub>Iod D T\\<^esub> a", "apply (subst Torder.not_less_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> Torder (Iod D T)\n 2. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier (Iod D T)\n 3. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier (Iod D T)\n 4. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq>\\<^bsub>Iod D T\\<^esub> a =\n                      b \\<preceq>\\<^bsub>Iod D T\\<^esub> a", "apply assumption+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier (Iod D T)\n 2. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier (Iod D T)\n 3. \\<lbrakk>T \\<subseteq> carrier D; a \\<in> T; b \\<in> T;\n     Torder (Iod D T)\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq>\\<^bsub>Iod D T\\<^esub> a =\n                      b \\<preceq>\\<^bsub>Iod D T\\<^esub> a", "apply (simp add:Iod_carrier)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Two ordered sets\\<close>"], ["", "definition\n  Order_Pow :: \"'a set \\<Rightarrow> 'a set Order\"    (\"(po _)\" [999] 1000) where\n  \"po A =\n    \\<lparr>carrier = Pow A,\n      rel = {(X, Y). X \\<in> Pow A \\<and> Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\""], ["", "interpretation order_Pow: Order \"po A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order po A", "apply (unfold Order_Pow_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Order\n     \\<lparr>carrier = Pow A,\n        rel =\n          {(X, Y).\n           X \\<in> Pow A \\<and>\n           Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>", "apply (rule Order.intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. rel \\<lparr>carrier = Pow A,\n           rel =\n             {(X, Y).\n              X \\<in> Pow A \\<and>\n              Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\n    \\<subseteq> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and>\n                       X \\<subseteq> Y}\\<rparr> \\<times>\n                carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\n 2. \\<And>a.\n       a \\<in> carrier\n                \\<lparr>carrier = Pow A,\n                   rel =\n                     {(X, Y).\n                      X \\<in> Pow A \\<and>\n                      Y \\<in> Pow A \\<and>\n                      X \\<subseteq> Y}\\<rparr> \\<Longrightarrow>\n       (a, a)\n       \\<in> rel \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, a)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        c \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, c)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, c)\n                         \\<in> rel \\<lparr>carrier = Pow A,\nrel =\n  {(X, Y).\n   X \\<in> Pow A \\<and> Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>", "apply (rule subsetI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<in> rel \\<lparr>carrier = Pow A,\n                      rel =\n                        {(X, Y).\n                         X \\<in> Pow A \\<and>\n                         Y \\<in> Pow A \\<and>\n                         X \\<subseteq> Y}\\<rparr> \\<Longrightarrow>\n       x \\<in> carrier\n                \\<lparr>carrier = Pow A,\n                   rel =\n                     {(X, Y).\n                      X \\<in> Pow A \\<and>\n                      Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr> \\<times>\n               carrier\n                \\<lparr>carrier = Pow A,\n                   rel =\n                     {(X, Y).\n                      X \\<in> Pow A \\<and>\n                      Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\n 2. \\<And>a.\n       a \\<in> carrier\n                \\<lparr>carrier = Pow A,\n                   rel =\n                     {(X, Y).\n                      X \\<in> Pow A \\<and>\n                      Y \\<in> Pow A \\<and>\n                      X \\<subseteq> Y}\\<rparr> \\<Longrightarrow>\n       (a, a)\n       \\<in> rel \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, a)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        c \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, c)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, c)\n                         \\<in> rel \\<lparr>carrier = Pow A,\nrel =\n  {(X, Y).\n   X \\<in> Pow A \\<and> Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>", "apply (unfold split_paired_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> rel \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and>\n                       X \\<subseteq> Y}\\<rparr> \\<Longrightarrow>\n       (a, b)\n       \\<in> carrier\n              \\<lparr>carrier = Pow A,\n                 rel =\n                   {(X, Y).\n                    X \\<in> Pow A \\<and>\n                    Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr> \\<times>\n             carrier\n              \\<lparr>carrier = Pow A,\n                 rel =\n                   {(X, Y).\n                    X \\<in> Pow A \\<and>\n                    Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\n 2. \\<And>a.\n       a \\<in> carrier\n                \\<lparr>carrier = Pow A,\n                   rel =\n                     {(X, Y).\n                      X \\<in> Pow A \\<and>\n                      Y \\<in> Pow A \\<and>\n                      X \\<subseteq> Y}\\<rparr> \\<Longrightarrow>\n       (a, a)\n       \\<in> rel \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, a)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        c \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, c)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, c)\n                         \\<in> rel \\<lparr>carrier = Pow A,\nrel =\n  {(X, Y).\n   X \\<in> Pow A \\<and> Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       a \\<in> carrier\n                \\<lparr>carrier = Pow A,\n                   rel =\n                     {(X, Y).\n                      X \\<in> Pow A \\<and>\n                      Y \\<in> Pow A \\<and>\n                      X \\<subseteq> Y}\\<rparr> \\<Longrightarrow>\n       (a, a)\n       \\<in> rel \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, a)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> a = b\n 3. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        c \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, c)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, c)\n                         \\<in> rel \\<lparr>carrier = Pow A,\nrel =\n  {(X, Y).\n   X \\<in> Pow A \\<and> Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, a)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        c \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, c)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, c)\n                         \\<in> rel \\<lparr>carrier = Pow A,\nrel =\n  {(X, Y).\n   X \\<in> Pow A \\<and> Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier = Pow A,\n                            rel =\n                              {(X, Y).\n                               X \\<in> Pow A \\<and>\n                               Y \\<in> Pow A \\<and>\n                               X \\<subseteq> Y}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        c \\<in> carrier\n                 \\<lparr>carrier = Pow A,\n                    rel =\n                      {(X, Y).\n                       X \\<in> Pow A \\<and>\n                       Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>;\n        (b, c)\n        \\<in> rel \\<lparr>carrier = Pow A,\n                     rel =\n                       {(X, Y).\n                        X \\<in> Pow A \\<and>\n                        Y \\<in> Pow A \\<and>\n                        X \\<subseteq> Y}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, c)\n                         \\<in> rel \\<lparr>carrier = Pow A,\nrel =\n  {(X, Y).\n   X \\<in> Pow A \\<and> Y \\<in> Pow A \\<and> X \\<subseteq> Y}\\<rparr>", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  Order_fs :: \"'a set \\<Rightarrow> 'b set \\<Rightarrow> ('a set * ('a \\<Rightarrow> 'b)) Order\" where\n  \"Order_fs A B =\n   \\<lparr>carrier = {Z. \\<exists>A1 f. A1 \\<in> Pow A \\<and> f \\<in> A1 \\<rightarrow> B \\<and> \n                 f \\<in> extensional A1 \\<and> Z = (A1, f)}, \n rel = {Y. Y \\<in> ({Z. \\<exists>A1 f. A1 \\<in> Pow A \\<and> f \\<in> A1 \\<rightarrow> B \\<and> f \\<in> extensional A1 \n \\<and> Z = (A1, f)}) \\<times> ({Z. \\<exists>A1 f. A1 \\<in> Pow A \\<and> f \\<in> A1 \\<rightarrow> B \\<and> f \\<in> extensional A1\n \\<and> Z = (A1, f)}) \\<and> fst (fst Y) \\<subseteq> fst (snd Y) \\<and> \n       (\\<forall>a\\<in> (fst (fst Y)). (snd (fst Y)) a = (snd (snd Y)) a)}\\<rparr>\""], ["", "lemma Order_fs:\"Order (Order_fs A B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order (Order_fs A B)", "apply (simp add:Order_fs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Order\n     \\<lparr>carrier =\n               {Z. \\<exists>A1\\<subseteq>A.\n                      \\<exists>f.\n                         f \\<in> A1 \\<rightarrow> B \\<and>\n                         f \\<in> extensional A1 \\<and> Z = (A1, f)},\n        rel =\n          {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                          \\<exists>f.\n                             f \\<in> A1 \\<rightarrow> B \\<and>\n                             f \\<in> extensional A1 \\<and>\n                             Z = (A1, f)} \\<times>\n                   {Z. \\<exists>A1\\<subseteq>A.\n                          \\<exists>f.\n                             f \\<in> A1 \\<rightarrow> B \\<and>\n                             f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n           fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n           (\\<forall>a\\<in>fst (fst Y).\n               snd (fst Y) a = snd (snd Y) a)}\\<rparr>", "apply (rule Order.intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. rel \\<lparr>carrier =\n                  {Z. \\<exists>A1\\<subseteq>A.\n                         \\<exists>f.\n                            f \\<in> A1 \\<rightarrow> B \\<and>\n                            f \\<in> extensional A1 \\<and> Z = (A1, f)},\n           rel =\n             {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                             \\<exists>f.\n                                f \\<in> A1 \\<rightarrow> B \\<and>\n                                f \\<in> extensional A1 \\<and>\n                                Z = (A1, f)} \\<times>\n                      {Z. \\<exists>A1\\<subseteq>A.\n                             \\<exists>f.\n                                f \\<in> A1 \\<rightarrow> B \\<and>\n                                f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n              fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n              (\\<forall>a\\<in>fst (fst Y).\n                  snd (fst Y) a = snd (snd Y) a)}\\<rparr>\n    \\<subseteq> carrier\n                 \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr> \\<times>\n                carrier\n                 \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>\n 2. \\<And>a.\n       a \\<in> carrier\n                \\<lparr>carrier =\n                          {Z. \\<exists>A1\\<subseteq>A.\n                                 \\<exists>f.\n                                    f \\<in> A1 \\<rightarrow> B \\<and>\n                                    f \\<in> extensional A1 \\<and>\n                                    Z = (A1, f)},\n                   rel =\n                     {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                     \\<exists>f.\n  f \\<in> A1 \\<rightarrow> B \\<and>\n  f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                              {Z. \\<exists>A1\\<subseteq>A.\n                                     \\<exists>f.\n  f \\<in> A1 \\<rightarrow> B \\<and>\n  f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                      fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                      (\\<forall>a\\<in>fst (fst Y).\n                          snd (fst Y) a =\n                          snd (snd Y) a)}\\<rparr> \\<Longrightarrow>\n       (a, a)\n       \\<in> rel \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier =\n                                   {Z. \\<exists>A1\\<subseteq>A.\n    \\<exists>f.\n       f \\<in> A1 \\<rightarrow> B \\<and>\n       f \\<in> extensional A1 \\<and> Z = (A1, f)},\n                            rel =\n                              {Y \\<in> {Z.\n  \\<exists>A1\\<subseteq>A.\n     \\<exists>f.\n        f \\<in> A1 \\<rightarrow> B \\<and>\n        f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n {Z. \\<exists>A1\\<subseteq>A.\n        \\<exists>f.\n           f \\<in> A1 \\<rightarrow> B \\<and>\n           f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                               fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                               (\\<forall>a\\<in>fst (fst Y).\n                                   snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (b, a)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier =\n                                   {Z. \\<exists>A1\\<subseteq>A.\n    \\<exists>f.\n       f \\<in> A1 \\<rightarrow> B \\<and>\n       f \\<in> extensional A1 \\<and> Z = (A1, f)},\n                            rel =\n                              {Y \\<in> {Z.\n  \\<exists>A1\\<subseteq>A.\n     \\<exists>f.\n        f \\<in> A1 \\<rightarrow> B \\<and>\n        f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n {Z. \\<exists>A1\\<subseteq>A.\n        \\<exists>f.\n           f \\<in> A1 \\<rightarrow> B \\<and>\n           f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                               fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                               (\\<forall>a\\<in>fst (fst Y).\n                                   snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        c \\<in> carrier\n                 \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (b, c)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, c)\n                         \\<in> rel \\<lparr>carrier =\n       {Z. \\<exists>A1\\<subseteq>A.\n              \\<exists>f.\n                 f \\<in> A1 \\<rightarrow> B \\<and>\n                 f \\<in> extensional A1 \\<and> Z = (A1, f)},\nrel =\n  {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                  \\<exists>f.\n                     f \\<in> A1 \\<rightarrow> B \\<and>\n                     f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n           {Z. \\<exists>A1\\<subseteq>A.\n                  \\<exists>f.\n                     f \\<in> A1 \\<rightarrow> B \\<and>\n                     f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n   fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n   (\\<forall>a\\<in>fst (fst Y). snd (fst Y) a = snd (snd Y) a)}\\<rparr>", "apply (rule subsetI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<in> rel \\<lparr>carrier =\n                             {Z. \\<exists>A1\\<subseteq>A.\n                                    \\<exists>f.\n f \\<in> A1 \\<rightarrow> B \\<and>\n f \\<in> extensional A1 \\<and> Z = (A1, f)},\n                      rel =\n                        {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n  \\<exists>f.\n     f \\<in> A1 \\<rightarrow> B \\<and>\n     f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                 {Z. \\<exists>A1\\<subseteq>A.\n  \\<exists>f.\n     f \\<in> A1 \\<rightarrow> B \\<and>\n     f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                         fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                         (\\<forall>a\\<in>fst (fst Y).\n                             snd (fst Y) a =\n                             snd (snd Y) a)}\\<rparr> \\<Longrightarrow>\n       x \\<in> carrier\n                \\<lparr>carrier =\n                          {Z. \\<exists>A1\\<subseteq>A.\n                                 \\<exists>f.\n                                    f \\<in> A1 \\<rightarrow> B \\<and>\n                                    f \\<in> extensional A1 \\<and>\n                                    Z = (A1, f)},\n                   rel =\n                     {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                     \\<exists>f.\n  f \\<in> A1 \\<rightarrow> B \\<and>\n  f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                              {Z. \\<exists>A1\\<subseteq>A.\n                                     \\<exists>f.\n  f \\<in> A1 \\<rightarrow> B \\<and>\n  f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                      fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                      (\\<forall>a\\<in>fst (fst Y).\n                          snd (fst Y) a = snd (snd Y) a)}\\<rparr> \\<times>\n               carrier\n                \\<lparr>carrier =\n                          {Z. \\<exists>A1\\<subseteq>A.\n                                 \\<exists>f.\n                                    f \\<in> A1 \\<rightarrow> B \\<and>\n                                    f \\<in> extensional A1 \\<and>\n                                    Z = (A1, f)},\n                   rel =\n                     {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                     \\<exists>f.\n  f \\<in> A1 \\<rightarrow> B \\<and>\n  f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                              {Z. \\<exists>A1\\<subseteq>A.\n                                     \\<exists>f.\n  f \\<in> A1 \\<rightarrow> B \\<and>\n  f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                      fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                      (\\<forall>a\\<in>fst (fst Y).\n                          snd (fst Y) a = snd (snd Y) a)}\\<rparr>\n 2. \\<And>a.\n       a \\<in> carrier\n                \\<lparr>carrier =\n                          {Z. \\<exists>A1\\<subseteq>A.\n                                 \\<exists>f.\n                                    f \\<in> A1 \\<rightarrow> B \\<and>\n                                    f \\<in> extensional A1 \\<and>\n                                    Z = (A1, f)},\n                   rel =\n                     {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                     \\<exists>f.\n  f \\<in> A1 \\<rightarrow> B \\<and>\n  f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                              {Z. \\<exists>A1\\<subseteq>A.\n                                     \\<exists>f.\n  f \\<in> A1 \\<rightarrow> B \\<and>\n  f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                      fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                      (\\<forall>a\\<in>fst (fst Y).\n                          snd (fst Y) a =\n                          snd (snd Y) a)}\\<rparr> \\<Longrightarrow>\n       (a, a)\n       \\<in> rel \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier =\n                                   {Z. \\<exists>A1\\<subseteq>A.\n    \\<exists>f.\n       f \\<in> A1 \\<rightarrow> B \\<and>\n       f \\<in> extensional A1 \\<and> Z = (A1, f)},\n                            rel =\n                              {Y \\<in> {Z.\n  \\<exists>A1\\<subseteq>A.\n     \\<exists>f.\n        f \\<in> A1 \\<rightarrow> B \\<and>\n        f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n {Z. \\<exists>A1\\<subseteq>A.\n        \\<exists>f.\n           f \\<in> A1 \\<rightarrow> B \\<and>\n           f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                               fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                               (\\<forall>a\\<in>fst (fst Y).\n                                   snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (b, a)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> a = b\n 4. \\<And>a b c.\n       \\<lbrakk>a \\<in> carrier\n                         \\<lparr>carrier =\n                                   {Z. \\<exists>A1\\<subseteq>A.\n    \\<exists>f.\n       f \\<in> A1 \\<rightarrow> B \\<and>\n       f \\<in> extensional A1 \\<and> Z = (A1, f)},\n                            rel =\n                              {Y \\<in> {Z.\n  \\<exists>A1\\<subseteq>A.\n     \\<exists>f.\n        f \\<in> A1 \\<rightarrow> B \\<and>\n        f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n {Z. \\<exists>A1\\<subseteq>A.\n        \\<exists>f.\n           f \\<in> A1 \\<rightarrow> B \\<and>\n           f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                               fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                               (\\<forall>a\\<in>fst (fst Y).\n                                   snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        b \\<in> carrier\n                 \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        c \\<in> carrier\n                 \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (a, b)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (b, c)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, c)\n                         \\<in> rel \\<lparr>carrier =\n       {Z. \\<exists>A1\\<subseteq>A.\n              \\<exists>f.\n                 f \\<in> A1 \\<rightarrow> B \\<and>\n                 f \\<in> extensional A1 \\<and> Z = (A1, f)},\nrel =\n  {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                  \\<exists>f.\n                     f \\<in> A1 \\<rightarrow> B \\<and>\n                     f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n           {Z. \\<exists>A1\\<subseteq>A.\n                  \\<exists>f.\n                     f \\<in> A1 \\<rightarrow> B \\<and>\n                     f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n   fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n   (\\<forall>a\\<in>fst (fst Y). snd (fst Y) a = snd (snd Y) a)}\\<rparr>", "apply (unfold split_paired_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b aa ba.\n       ((a, b), aa, ba)\n       \\<in> rel \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a =\n                           snd (snd Y) a)}\\<rparr> \\<Longrightarrow>\n       ((a, b), aa, ba)\n       \\<in> carrier\n              \\<lparr>carrier =\n                        {Z. \\<exists>A1\\<subseteq>A.\n                               \\<exists>f.\n                                  f \\<in> A1 \\<rightarrow> B \\<and>\n                                  f \\<in> extensional A1 \\<and>\n                                  Z = (A1, f)},\n                 rel =\n                   {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                    fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                    (\\<forall>a\\<in>fst (fst Y).\n                        snd (fst Y) a = snd (snd Y) a)}\\<rparr> \\<times>\n             carrier\n              \\<lparr>carrier =\n                        {Z. \\<exists>A1\\<subseteq>A.\n                               \\<exists>f.\n                                  f \\<in> A1 \\<rightarrow> B \\<and>\n                                  f \\<in> extensional A1 \\<and>\n                                  Z = (A1, f)},\n                 rel =\n                   {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                    fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                    (\\<forall>a\\<in>fst (fst Y).\n                        snd (fst Y) a = snd (snd Y) a)}\\<rparr>\n 2. \\<And>a b.\n       (a, b)\n       \\<in> carrier\n              \\<lparr>carrier =\n                        {Z. \\<exists>A1\\<subseteq>A.\n                               \\<exists>f.\n                                  f \\<in> A1 \\<rightarrow> B \\<and>\n                                  f \\<in> extensional A1 \\<and>\n                                  Z = (A1, f)},\n                 rel =\n                   {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                    fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                    (\\<forall>a\\<in>fst (fst Y).\n                        snd (fst Y) a =\n                        snd (snd Y) a)}\\<rparr> \\<Longrightarrow>\n       ((a, b), a, b)\n       \\<in> rel \\<lparr>carrier =\n                           {Z. \\<exists>A1\\<subseteq>A.\n                                  \\<exists>f.\n                                     f \\<in> A1 \\<rightarrow> B \\<and>\n                                     f \\<in> extensional A1 \\<and>\n                                     Z = (A1, f)},\n                    rel =\n                      {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                               {Z. \\<exists>A1\\<subseteq>A.\n\\<exists>f.\n   f \\<in> A1 \\<rightarrow> B \\<and>\n   f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                       fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                       (\\<forall>a\\<in>fst (fst Y).\n                           snd (fst Y) a = snd (snd Y) a)}\\<rparr>\n 3. \\<And>a b aa ba.\n       \\<lbrakk>(a, b)\n                \\<in> carrier\n                       \\<lparr>carrier =\n                                 {Z. \\<exists>A1\\<subseteq>A.\n  \\<exists>f.\n     f \\<in> A1 \\<rightarrow> B \\<and>\n     f \\<in> extensional A1 \\<and> Z = (A1, f)},\n                          rel =\n                            {Y \\<in> {Z.\n\\<exists>A1\\<subseteq>A.\n   \\<exists>f.\n      f \\<in> A1 \\<rightarrow> B \\<and>\n      f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                     {Z.\n\\<exists>A1\\<subseteq>A.\n   \\<exists>f.\n      f \\<in> A1 \\<rightarrow> B \\<and>\n      f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                             fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                             (\\<forall>a\\<in>fst (fst Y).\n                                 snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (aa, ba)\n        \\<in> carrier\n               \\<lparr>carrier =\n                         {Z. \\<exists>A1\\<subseteq>A.\n                                \\<exists>f.\n                                   f \\<in> A1 \\<rightarrow> B \\<and>\n                                   f \\<in> extensional A1 \\<and>\n                                   Z = (A1, f)},\n                  rel =\n                    {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                    \\<exists>f.\n f \\<in> A1 \\<rightarrow> B \\<and>\n f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                             {Z. \\<exists>A1\\<subseteq>A.\n                                    \\<exists>f.\n f \\<in> A1 \\<rightarrow> B \\<and>\n f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                     fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                     (\\<forall>a\\<in>fst (fst Y).\n                         snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        ((a, b), aa, ba)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        ((aa, ba), a, b)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> (a, b) = (aa, ba)\n 4. \\<And>a b aa ba ab bb.\n       \\<lbrakk>(a, b)\n                \\<in> carrier\n                       \\<lparr>carrier =\n                                 {Z. \\<exists>A1\\<subseteq>A.\n  \\<exists>f.\n     f \\<in> A1 \\<rightarrow> B \\<and>\n     f \\<in> extensional A1 \\<and> Z = (A1, f)},\n                          rel =\n                            {Y \\<in> {Z.\n\\<exists>A1\\<subseteq>A.\n   \\<exists>f.\n      f \\<in> A1 \\<rightarrow> B \\<and>\n      f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                     {Z.\n\\<exists>A1\\<subseteq>A.\n   \\<exists>f.\n      f \\<in> A1 \\<rightarrow> B \\<and>\n      f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                             fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                             (\\<forall>a\\<in>fst (fst Y).\n                                 snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (aa, ba)\n        \\<in> carrier\n               \\<lparr>carrier =\n                         {Z. \\<exists>A1\\<subseteq>A.\n                                \\<exists>f.\n                                   f \\<in> A1 \\<rightarrow> B \\<and>\n                                   f \\<in> extensional A1 \\<and>\n                                   Z = (A1, f)},\n                  rel =\n                    {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                    \\<exists>f.\n f \\<in> A1 \\<rightarrow> B \\<and>\n f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                             {Z. \\<exists>A1\\<subseteq>A.\n                                    \\<exists>f.\n f \\<in> A1 \\<rightarrow> B \\<and>\n f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                     fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                     (\\<forall>a\\<in>fst (fst Y).\n                         snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        (ab, bb)\n        \\<in> carrier\n               \\<lparr>carrier =\n                         {Z. \\<exists>A1\\<subseteq>A.\n                                \\<exists>f.\n                                   f \\<in> A1 \\<rightarrow> B \\<and>\n                                   f \\<in> extensional A1 \\<and>\n                                   Z = (A1, f)},\n                  rel =\n                    {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                                    \\<exists>f.\n f \\<in> A1 \\<rightarrow> B \\<and>\n f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                             {Z. \\<exists>A1\\<subseteq>A.\n                                    \\<exists>f.\n f \\<in> A1 \\<rightarrow> B \\<and>\n f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                     fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                     (\\<forall>a\\<in>fst (fst Y).\n                         snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        ((a, b), aa, ba)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>;\n        ((aa, ba), ab, bb)\n        \\<in> rel \\<lparr>carrier =\n                            {Z. \\<exists>A1\\<subseteq>A.\n                                   \\<exists>f.\nf \\<in> A1 \\<rightarrow> B \\<and>\nf \\<in> extensional A1 \\<and> Z = (A1, f)},\n                     rel =\n                       {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n                                {Z. \\<exists>A1\\<subseteq>A.\n \\<exists>f.\n    f \\<in> A1 \\<rightarrow> B \\<and>\n    f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n                        fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n                        (\\<forall>a\\<in>fst (fst Y).\n                            snd (fst Y) a = snd (snd Y) a)}\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> ((a, b), ab, bb)\n                         \\<in> rel \\<lparr>carrier =\n       {Z. \\<exists>A1\\<subseteq>A.\n              \\<exists>f.\n                 f \\<in> A1 \\<rightarrow> B \\<and>\n                 f \\<in> extensional A1 \\<and> Z = (A1, f)},\nrel =\n  {Y \\<in> {Z. \\<exists>A1\\<subseteq>A.\n                  \\<exists>f.\n                     f \\<in> A1 \\<rightarrow> B \\<and>\n                     f \\<in> extensional A1 \\<and> Z = (A1, f)} \\<times>\n           {Z. \\<exists>A1\\<subseteq>A.\n                  \\<exists>f.\n                     f \\<in> A1 \\<rightarrow> B \\<and>\n                     f \\<in> extensional A1 \\<and> Z = (A1, f)}.\n   fst (fst Y) \\<subseteq> fst (snd Y) \\<and>\n   (\\<forall>a\\<in>fst (fst Y). snd (fst Y) a = snd (snd Y) a)}\\<rparr>", "apply (auto intro: funcset_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Homomorphism of ordered sets\\<close>"], ["", "definition\n ord_inj :: \"[('a, 'm0) Order_scheme, ('b, 'm1) Order_scheme, \n                'a \\<Rightarrow> 'b] \\<Rightarrow> bool\" where\n \"ord_inj D E f \\<longleftrightarrow> f \\<in> extensional (carrier D) \\<and> \n              f \\<in> (carrier D) \\<rightarrow> (carrier E) \\<and> \n              (inj_on f (carrier D)) \\<and> \n              (\\<forall>a\\<in>carrier D. \\<forall>b\\<in>carrier D. (a \\<prec>\\<^bsub>D\\<^esub> b) = ((f a) \\<prec>\\<^bsub>E\\<^esub> (f b)))\""], ["", "definition\n ord_isom :: \"[('a, 'm0) Order_scheme, ('b, 'm1) Order_scheme,\n               'a \\<Rightarrow> 'b] \\<Rightarrow> bool\" where\n \"ord_isom D E f \\<longleftrightarrow> ord_inj D E f \\<and>\n                    (surj_to f (carrier D) (carrier E))\""], ["", "lemma (in Order) ord_inj_func:\"\\<lbrakk>Order E; ord_inj D E f\\<rbrakk> \\<Longrightarrow>\n                      f \\<in> carrier D \\<rightarrow> carrier E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f\\<rbrakk>\n    \\<Longrightarrow> f \\<in> carrier D \\<rightarrow> carrier E", "by (simp add:ord_inj_def)"], ["", "lemma (in Order) ord_isom_func:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n                      f \\<in> carrier D \\<rightarrow> carrier E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> f \\<in> carrier D \\<rightarrow> carrier E", "by (simp add:ord_isom_def ord_inj_func)"], ["", "lemma (in Order) ord_inj_restrict_isom:\"\\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D T) (Iod E (f ` T)) (restrict f T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D T) (Iod E (f ` T)) (restrict f T)", "apply (subst ord_isom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_inj (Iod D T) (Iod E (f ` T))\n                       (restrict f T) \\<and>\n                      surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "(*  The following two lemmas are preliminaries. *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_inj (Iod D T) (Iod E (f ` T))\n                       (restrict f T) \\<and>\n                      surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (frule ord_inj_func[of E f], assumption,\n        frule image_sub[of f \"carrier D\" \"carrier E\" \"T\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_inj (Iod D T) (Iod E (f ` T))\n                       (restrict f T) \\<and>\n                      surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_inj (Iod D T) (Iod E (f ` T)) (restrict f T)\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (subst ord_inj_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> restrict f T\n                      \\<in> extensional (carrier (Iod D T)) \\<and>\n                      restrict f T\n                      \\<in> carrier (Iod D T) \\<rightarrow>\n                            carrier (Iod E (f ` T)) \\<and>\n                      inj_on (restrict f T) (carrier (Iod D T)) \\<and>\n                      (\\<forall>a\\<in>carrier (Iod D T).\n                          \\<forall>b\\<in>carrier (Iod D T).\n                             a \\<prec>\\<^bsub>Iod D T\\<^esub> b =\n                             restrict f T\n                              a \\<prec>\\<^bsub>Iod E (f ` T)\\<^esub>\n                             restrict f T b)\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (simp add:Iod_carrier Order.Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f T \\<and>\n                      (\\<forall>a\\<in>T.\n                          \\<forall>b\\<in>T.\n                             a \\<prec>\\<^bsub>Iod D T\\<^esub> b =\n                             f a \\<prec>\\<^bsub>Iod E (f ` T)\\<^esub> f b)\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f T\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>T.\n                         \\<forall>b\\<in>T.\n                            a \\<prec>\\<^bsub>Iod D T\\<^esub> b =\n                            f a \\<prec>\\<^bsub>Iod E (f ` T)\\<^esub> f b\n 3. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (rule restrict_inj[of f \"carrier D\" \"T\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier D)\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> T \\<subseteq> carrier D\n 3. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>T.\n                         \\<forall>b\\<in>T.\n                            a \\<prec>\\<^bsub>Iod D T\\<^esub> b =\n                            f a \\<prec>\\<^bsub>Iod E (f ` T)\\<^esub> f b\n 4. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (simp add:ord_inj_def, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>T.\n                         \\<forall>b\\<in>T.\n                            a \\<prec>\\<^bsub>Iod D T\\<^esub> b =\n                            f a \\<prec>\\<^bsub>Iod E (f ` T)\\<^esub> f b\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (rule ballI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n        f \\<in> carrier D \\<rightarrow> carrier E;\n        f ` T \\<subseteq> carrier E; a \\<in> T; b \\<in> T\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod D T\\<^esub> b =\n                         f a \\<prec>\\<^bsub>Iod E (f ` T)\\<^esub> f b\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (frule_tac x = a in elem_in_image2[of f \"carrier D\" \"carrier E\" T],\n        assumption+,\n        frule_tac x = b in elem_in_image2[of f \"carrier D\" \"carrier E\" T],\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n        f \\<in> carrier D \\<rightarrow> carrier E;\n        f ` T \\<subseteq> carrier E; a \\<in> T; b \\<in> T; f a \\<in> f ` T;\n        f b \\<in> f ` T\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>Iod D T\\<^esub> b =\n                         f a \\<prec>\\<^bsub>Iod E (f ` T)\\<^esub> f b\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (simp add:Iod_less Order.Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n        f \\<in> carrier D \\<rightarrow> carrier E;\n        f ` T \\<subseteq> carrier E; a \\<in> T; b \\<in> T\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (frule_tac c = a in subsetD[of T \"carrier D\"], assumption+,\n        frule_tac c = b in subsetD[of T \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n        f \\<in> carrier D \\<rightarrow> carrier E;\n        f ` T \\<subseteq> carrier E; a \\<in> T; b \\<in> T;\n        a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b\n 2. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (simp add:ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (Iod D T))\n                       (carrier (Iod E (f ` T)))", "apply (subst surj_to_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> restrict f T ` carrier (Iod D T) =\n                      carrier (Iod E (f ` T))", "apply (simp add:Iod_carrier Order.Iod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ord_inj_Srestrict_isom:\"\\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D T) (SIod E (f ` T)) (restrict f T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f;\n     T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D T) (SIod E (f ` T)) (restrict f T)", "apply (subst ord_isom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f;\n     T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_inj (SIod D T) (SIod E (f ` T))\n                       (restrict f T) \\<and>\n                      surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (frule Order.ord_inj_func[of D E f], assumption+,\n        frule image_sub[of f \"carrier D\" \"carrier E\" \"T\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_inj (SIod D T) (SIod E (f ` T))\n                       (restrict f T) \\<and>\n                      surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_inj (SIod D T) (SIod E (f ` T)) (restrict f T)\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (subst ord_inj_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> restrict f T\n                      \\<in> extensional (carrier (SIod D T)) \\<and>\n                      restrict f T\n                      \\<in> carrier (SIod D T) \\<rightarrow>\n                            carrier (SIod E (f ` T)) \\<and>\n                      inj_on (restrict f T) (carrier (SIod D T)) \\<and>\n                      (\\<forall>a\\<in>carrier (SIod D T).\n                          \\<forall>b\\<in>carrier (SIod D T).\n                             a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                             restrict f T\n                              a \\<prec>\\<^bsub>SIod E (f ` T)\\<^esub>\n                             restrict f T b)\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f T \\<and>\n                      (\\<forall>a\\<in>T.\n                          \\<forall>b\\<in>T.\n                             a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                             f a \\<prec>\\<^bsub>SIod E (f ` T)\\<^esub> f b)\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f T\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>T.\n                         \\<forall>b\\<in>T.\n                            a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                            f a \\<prec>\\<^bsub>SIod E (f ` T)\\<^esub> f b\n 3. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (rule restrict_inj[of f \"carrier D\" \"T\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier D)\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> T \\<subseteq> carrier D\n 3. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>T.\n                         \\<forall>b\\<in>T.\n                            a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                            f a \\<prec>\\<^bsub>SIod E (f ` T)\\<^esub> f b\n 4. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (simp add:ord_inj_def, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>T.\n                         \\<forall>b\\<in>T.\n                            a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                            f a \\<prec>\\<^bsub>SIod E (f ` T)\\<^esub> f b\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (rule ballI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n        f \\<in> carrier D \\<rightarrow> carrier E;\n        f ` T \\<subseteq> carrier E; a \\<in> T; b \\<in> T\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                         f a \\<prec>\\<^bsub>SIod E (f ` T)\\<^esub> f b\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (frule_tac x = a in elem_in_image2[of f \"carrier D\" \"carrier E\" T],\n        assumption+,\n        frule_tac x = b in elem_in_image2[of f \"carrier D\" \"carrier E\" T],\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n        f \\<in> carrier D \\<rightarrow> carrier E;\n        f ` T \\<subseteq> carrier E; a \\<in> T; b \\<in> T; f a \\<in> f ` T;\n        f b \\<in> f ` T\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                         f a \\<prec>\\<^bsub>SIod E (f ` T)\\<^esub> f b\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (simp add:SIod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n        f \\<in> carrier D \\<rightarrow> carrier E;\n        f ` T \\<subseteq> carrier E; a \\<in> T; b \\<in> T\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b =\n                         f a \\<prec>\\<^bsub>E\\<^esub> f b\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (frule_tac c = a in subsetD[of T \"carrier D\"], assumption+,\n        frule_tac c = b in subsetD[of T \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n        f \\<in> carrier D \\<rightarrow> carrier E;\n        f ` T \\<subseteq> carrier E; a \\<in> T; b \\<in> T;\n        a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b =\n                         f a \\<prec>\\<^bsub>E\\<^esub> f b\n 2. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (simp add:ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) (carrier (SIod D T))\n                       (carrier (SIod E (f ` T)))", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; T \\<subseteq> carrier D;\n     f \\<in> carrier D \\<rightarrow> carrier E;\n     f ` T \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f T) T (f ` T)", "apply (simp add:surj_to_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) id_ord_isom:\"ord_isom D D (idmap (carrier D))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_isom D D (idmap (carrier D))", "apply (simp add:ord_isom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_inj D D (idmap (carrier D)) \\<and>\n    surj_to (idmap (carrier D)) (carrier D) (carrier D)", "apply (cut_tac idmap_bij[of \"carrier D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_to (idmap (carrier D)) (carrier D) (carrier D) \\<Longrightarrow>\n    ord_inj D D (idmap (carrier D)) \\<and>\n    surj_to (idmap (carrier D)) (carrier D) (carrier D)", "apply (simp add:bij_to_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. surj_to (idmap (carrier D)) (carrier D) (carrier D) \\<and>\n    inj_on (idmap (carrier D)) (carrier D) \\<Longrightarrow>\n    ord_inj D D (idmap (carrier D))", "apply (simp add:ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. surj_to (idmap (carrier D)) (carrier D) (carrier D) \\<and>\n    inj_on (idmap (carrier D)) (carrier D) \\<Longrightarrow>\n    idmap (carrier D) \\<in> extensional (carrier D) \\<and>\n    idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D \\<and>\n    (\\<forall>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier D.\n           a \\<prec> b = idmap (carrier D) a \\<prec> idmap (carrier D) b)", "apply (simp add:idmap_def[of \"carrier D\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_bij_to:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n                            bij_to f (carrier D) (carrier E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> bij_to f (carrier D) (carrier E)", "by (simp add:bij_to_def ord_isom_def,\n       simp add:ord_inj_def)"], ["", "lemma (in Order) ord_inj_mem:\"\\<lbrakk>Order E; ord_inj D E f; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n        (f a) \\<in> carrier E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> carrier E", "apply (simp add:ord_inj_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; a \\<in> carrier D; f \\<in> extensional (carrier D);\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     \\<forall>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier D.\n           a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> carrier E", "apply (simp add:Pi_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_mem:\"\\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                (f a) \\<in> carrier E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> carrier E", "apply (simp add:ord_isom_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; a \\<in> carrier D; ord_inj D E f;\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> carrier E", "apply (simp add:ord_inj_mem)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_surj:\"\\<lbrakk>Order E; ord_isom D E f; b \\<in> carrier E\\<rbrakk> \\<Longrightarrow>\n         \\<exists>a\\<in>carrier D. b = f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; b \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a\\<in>carrier D. b = f a", "apply (simp add:ord_isom_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; b \\<in> carrier E; ord_inj D E f;\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a\\<in>carrier D. b = f a", "apply (simp add:surj_to_def image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; b \\<in> carrier E; ord_inj D E f;\n     {y. \\<exists>x\\<in>carrier D. y = f x} = carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a\\<in>carrier D. b = f a", "apply (frule sym, thin_tac \"{y. \\<exists>x\\<in>carrier D. y = f x} = carrier E\",\n       simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_surj_forall:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n              \\<forall>b \\<in> carrier E. \\<exists>a\\<in>carrier D. b = f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>carrier E.\n                         \\<exists>a\\<in>carrier D. b = f a", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>Order E; ord_isom D E f; b \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>carrier D. b = f a", "apply (rule ord_isom_surj[of \"E\" \"f\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_onto:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n         f ` (carrier D) = carrier E \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> f ` carrier D = carrier E", "apply (frule ord_isom_bij_to[of \"E\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f;\n     bij_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> f ` carrier D = carrier E", "apply(simp add:bij_to_def surj_to_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_inj_on:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> \n                                              inj_on f (carrier D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier D)", "by (simp add:ord_isom_def ord_inj_def)"], ["", "lemma (in Order) ord_isom_inj:\"\\<lbrakk>Order E; ord_isom D E f; \n      a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a = b) = ((f a) = (f b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (a = b) = (f a = f b)", "apply (frule ord_isom_inj_on[of E f], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D; b \\<in> carrier D;\n     inj_on f (carrier D)\\<rbrakk>\n    \\<Longrightarrow> (a = b) = (f a = f b)", "apply (simp add:injective_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_surj_to:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> \n                                     surj_to f (carrier D) (carrier E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> surj_to f (carrier D) (carrier E)", "by (simp add:ord_isom_def)"], ["", "lemma (in Order) ord_inj_less:\"\\<lbrakk>Order E; ord_inj D E f; a \\<in> carrier D; \n       b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a \\<prec>\\<^bsub>D\\<^esub> b) = ((f a) \\<prec>\\<^bsub>E\\<^esub> (f b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; a \\<in> carrier D;\n     b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b", "by  (simp add:ord_inj_def)"], ["", "lemma (in Order) ord_isom_less:\"\\<lbrakk>Order E; ord_isom D E f; \n      a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a \\<prec>\\<^bsub>D\\<^esub> b) = ((f a) \\<prec>\\<^bsub>E\\<^esub> (f b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b", "by (simp add:ord_isom_def ord_inj_less)"], ["", "lemma (in Order) ord_isom_less_forall:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> \n      \\<forall>a \\<in> carrier D. \\<forall> b \\<in> carrier D. (a \\<prec>\\<^bsub>D\\<^esub> b) = ((f a) \\<prec>\\<^bsub>E\\<^esub> (f b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier D.\n                         \\<forall>b\\<in>carrier D.\n                            a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b", "by ((rule ballI)+,\n    simp add:ord_isom_less)"], ["", "lemma (in Order) ord_isom_le:\"\\<lbrakk>Order E; ord_isom D E f; \n      a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (a \\<preceq>\\<^bsub>D\\<^esub> b) = ((f a) \\<preceq>\\<^bsub>E\\<^esub> (f b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b = f a \\<preceq>\\<^bsub>E\\<^esub> f b", "apply (frule_tac a = a in ord_isom_mem[of \"E\" \"f\"], assumption+,\n       frule_tac a = b in ord_isom_mem[of \"E\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D; b \\<in> carrier D;\n     f a \\<in> carrier E; f b \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b = f a \\<preceq>\\<^bsub>E\\<^esub> f b", "apply (simp add:le_imp_less_or_eq Order.le_imp_less_or_eq[of \"E\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D; b \\<in> carrier D;\n     f a \\<in> carrier E; f b \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> (a \\<prec> b \\<or> a = b) =\n                      (f a \\<prec>\\<^bsub>E\\<^esub> f b \\<or> f a = f b)", "apply (simp add:ord_isom_less ord_isom_inj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_le_forall:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> \n      \\<forall>a \\<in> carrier D. \\<forall> b \\<in> carrier D. (a \\<preceq> b) = ((f a) \\<preceq>\\<^bsub>E\\<^esub> (f b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier D.\n                         \\<forall>b\\<in>carrier D.\n                            a \\<preceq> b =\n                            f a \\<preceq>\\<^bsub>E\\<^esub> f b", "by ((rule ballI)+,\n       rule ord_isom_le, assumption+)"], ["", "lemma (in Order) ord_isom_convert:\"\\<lbrakk>Order E; ord_isom D E f; \n      x \\<in> carrier D; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow> (\\<forall>y\\<in>carrier D. (x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a)) = \n       (\\<forall>z\\<in>carrier E. ((f x) \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow> \\<not> z \\<prec>\\<^bsub>E\\<^esub> (f a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D;\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>y\\<in>carrier D.\n                          x \\<prec> y \\<longrightarrow>\n                          \\<not> y \\<prec> a) =\n                      (\\<forall>z\\<in>carrier E.\n                          f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n                          \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D; a \\<in> carrier D;\n     \\<forall>y\\<in>carrier D.\n        x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>z\\<in>carrier E.\n                         f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n                         \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a\n 2. \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D; a \\<in> carrier D;\n     \\<forall>z\\<in>carrier E.\n        f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n        \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>carrier D.\n                         x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a", "apply (rule ballI, rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D;\n        a \\<in> carrier D;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<in> carrier E; f x \\<prec>\\<^bsub>E\\<^esub> z\\<rbrakk>\n       \\<Longrightarrow> \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a\n 2. \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D; a \\<in> carrier D;\n     \\<forall>z\\<in>carrier E.\n        f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n        \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>carrier D.\n                         x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a", "apply (frule_tac b = z in ord_isom_surj[of \"E\" \"f\"], assumption+,\n        erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z aa.\n       \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D;\n        a \\<in> carrier D;\n        \\<forall>y\\<in>carrier D.\n           x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a;\n        z \\<in> carrier E; f x \\<prec>\\<^bsub>E\\<^esub> z;\n        aa \\<in> carrier D; z = f aa\\<rbrakk>\n       \\<Longrightarrow> \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a\n 2. \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D; a \\<in> carrier D;\n     \\<forall>z\\<in>carrier E.\n        f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n        \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>carrier D.\n                         x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a", "apply ( simp add:ord_isom_less[THEN sym, of \"E\" \"f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D; a \\<in> carrier D;\n     \\<forall>z\\<in>carrier E.\n        f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n        \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>carrier D.\n                         x \\<prec> y \\<longrightarrow> \\<not> y \\<prec> a", "apply (rule ballI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D;\n        a \\<in> carrier D;\n        \\<forall>z\\<in>carrier E.\n           f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n           \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a;\n        y \\<in> carrier D; x \\<prec> y\\<rbrakk>\n       \\<Longrightarrow> \\<not> y \\<prec> a", "apply (simp add:ord_isom_less[of \"E\" \"f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D;\n        a \\<in> carrier D;\n        \\<forall>z\\<in>carrier E.\n           f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n           \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a;\n        y \\<in> carrier D; f x \\<prec>\\<^bsub>E\\<^esub> f y\\<rbrakk>\n       \\<Longrightarrow> \\<not> f y \\<prec>\\<^bsub>E\\<^esub> f a", "apply (frule_tac a = y in ord_isom_mem[of \"E\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>Order E; ord_isom D E f; x \\<in> carrier D;\n        a \\<in> carrier D;\n        \\<forall>z\\<in>carrier E.\n           f x \\<prec>\\<^bsub>E\\<^esub> z \\<longrightarrow>\n           \\<not> z \\<prec>\\<^bsub>E\\<^esub> f a;\n        y \\<in> carrier D; f x \\<prec>\\<^bsub>E\\<^esub> f y;\n        f y \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> \\<not> f y \\<prec>\\<^bsub>E\\<^esub> f a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_sym:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow>\n                   ord_isom E D (invfun (carrier D) (carrier E) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> ord_isom E D\n                       (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)", "apply (frule ord_isom_func[of E f], assumption+,\n       frule ord_isom_inj_on[of E f], assumption+,\n       frule ord_isom_surj_to[of E f], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> ord_isom E D\n                       (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)", "apply (subst ord_isom_def, subst ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>\n                       \\<in> extensional (carrier E) \\<and>\n                       f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>\n                       \\<in> carrier E \\<rightarrow> carrier D \\<and>\n                       inj_on\n                        (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                        (carrier E) \\<and>\n                       (\\<forall>a\\<in>carrier E.\n                           \\<forall>b\\<in>carrier E.\n                              a \\<prec>\\<^bsub>E\\<^esub> b =\n                              (f\\<inverse>\\<^bsub>carrier\n             E,carrier D\\<^esub>)\n                               a \\<prec>\n                              (f\\<inverse>\\<^bsub>carrier\n             E,carrier D\\<^esub>)\n                               b)) \\<and>\n                      surj_to\n                       (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                       (carrier E) (carrier D)", "apply (simp add:inv_func)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>\n                      \\<in> extensional (carrier E) \\<and>\n                      inj_on\n                       (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                       (carrier E) \\<and>\n                      (\\<forall>a\\<in>carrier E.\n                          \\<forall>b\\<in>carrier E.\n                             a \\<prec>\\<^bsub>E\\<^esub> b =\n                             (f\\<inverse>\\<^bsub>carrier\n            E,carrier D\\<^esub>)\n                              a \\<prec>\n                             (f\\<inverse>\\<^bsub>carrier\n            E,carrier D\\<^esub>)\n                              b) \\<and>\n                      surj_to\n                       (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                       (carrier E) (carrier D)", "apply (simp add:invfun_inj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>\n                      \\<in> extensional (carrier E) \\<and>\n                      (\\<forall>a\\<in>carrier E.\n                          \\<forall>b\\<in>carrier E.\n                             a \\<prec>\\<^bsub>E\\<^esub> b =\n                             (f\\<inverse>\\<^bsub>carrier\n            E,carrier D\\<^esub>)\n                              a \\<prec>\n                             (f\\<inverse>\\<^bsub>carrier\n            E,carrier D\\<^esub>)\n                              b) \\<and>\n                      surj_to\n                       (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                       (carrier E) (carrier D)", "apply (simp add:invfun_surj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>\n                      \\<in> extensional (carrier E) \\<and>\n                      (\\<forall>a\\<in>carrier E.\n                          \\<forall>b\\<in>carrier E.\n                             a \\<prec>\\<^bsub>E\\<^esub> b =\n                             (f\\<inverse>\\<^bsub>carrier\n            E,carrier D\\<^esub>)\n                              a \\<prec>\n                             (f\\<inverse>\\<^bsub>carrier\n            E,carrier D\\<^esub>)\n                              b)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_isom D E f;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>\n                      \\<in> extensional (carrier E)\n 2. \\<lbrakk>Order E; ord_isom D E f;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier E.\n                         \\<forall>b\\<in>carrier E.\n                            a \\<prec>\\<^bsub>E\\<^esub> b =\n                            (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                             a \\<prec>\n                            (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                             b", "apply (simp add:invfun_def extensional_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier E.\n                         \\<forall>b\\<in>carrier E.\n                            a \\<prec>\\<^bsub>E\\<^esub> b =\n                            (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                             a \\<prec>\n                            (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                             b", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; ord_isom D E f;\n        f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n        surj_to f (carrier D) (carrier E); a \\<in> carrier E;\n        b \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>E\\<^esub> b =\n                         (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                          a \\<prec>\n                         (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) b", "apply (frule_tac b = a in invfun_mem[of \"f\" \"carrier D\" \"carrier E\"],\n            assumption+,\n       frule_tac b = b in invfun_mem[of \"f\" \"carrier D\" \"carrier E\"],\n            assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; ord_isom D E f;\n        f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n        surj_to f (carrier D) (carrier E); a \\<in> carrier E;\n        b \\<in> carrier E;\n        (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) a \\<in> carrier D;\n        (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) b\n        \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>E\\<^esub> b =\n                         (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                          a \\<prec>\n                         (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) b", "apply (frule_tac a = \"(f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) a\" and b = \"(f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) b\" \n        in ord_isom_less[of E f], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; ord_isom D E f;\n        f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n        surj_to f (carrier D) (carrier E); a \\<in> carrier E;\n        b \\<in> carrier E;\n        (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) a \\<in> carrier D;\n        (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) b \\<in> carrier D;\n        (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) a \\<prec>\n        (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) b =\n        f ((f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n            a) \\<prec>\\<^bsub>E\\<^esub>\n        f ((f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) b)\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>E\\<^esub> b =\n                         (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n                          a \\<prec>\n                         (f\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) b", "apply (simp add:invfun_r)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_trans:\"\\<lbrakk>Order E; Order F; ord_isom D E f; \n       ord_isom E F g \\<rbrakk> \\<Longrightarrow>  ord_isom D F (compose (carrier D) g f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g\\<rbrakk>\n    \\<Longrightarrow> ord_isom D F (compose (carrier D) g f)", "apply (frule ord_isom_func[of E f], assumption+,\n       frule ord_isom_inj_on[of E f], assumption+,\n       frule ord_isom_surj_to[of E f], assumption+,\n       frule Order.ord_isom_func[of E F g], assumption+,\n       frule Order.ord_isom_inj_on[of E F g], assumption+,\n       frule Order.ord_isom_surj_to[of E F g], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E);\n     g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n     surj_to g (carrier E) (carrier F)\\<rbrakk>\n    \\<Longrightarrow> ord_isom D F (compose (carrier D) g f)", "(* lemmas concerning compose require assumptions given above *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E);\n     g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n     surj_to g (carrier E) (carrier F)\\<rbrakk>\n    \\<Longrightarrow> ord_isom D F (compose (carrier D) g f)", "apply (subst ord_isom_def, subst ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E);\n     g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n     surj_to g (carrier E) (carrier F)\\<rbrakk>\n    \\<Longrightarrow> (compose (carrier D) g f\n                       \\<in> extensional (carrier D) \\<and>\n                       compose (carrier D) g f\n                       \\<in> carrier D \\<rightarrow> carrier F \\<and>\n                       inj_on (compose (carrier D) g f) (carrier D) \\<and>\n                       (\\<forall>a\\<in>carrier D.\n                           \\<forall>b\\<in>carrier D.\n                              a \\<prec> b =\n                              compose (carrier D) g f\n                               a \\<prec>\\<^bsub>F\\<^esub>\n                              compose (carrier D) g f b)) \\<and>\n                      surj_to (compose (carrier D) g f) (carrier D)\n                       (carrier F)", "apply (simp add:composition)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E);\n     g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n     surj_to g (carrier E) (carrier F)\\<rbrakk>\n    \\<Longrightarrow> inj_on (compose (carrier D) g f) (carrier D) \\<and>\n                      (\\<forall>a\\<in>carrier D.\n                          \\<forall>b\\<in>carrier D.\n                             a \\<prec> b =\n                             compose (carrier D) g f\n                              a \\<prec>\\<^bsub>F\\<^esub>\n                             compose (carrier D) g f b) \\<and>\n                      surj_to (compose (carrier D) g f) (carrier D)\n                       (carrier F)", "apply (simp add:comp_inj[of \"f\" \"carrier D\" \"carrier E\" \"g\" \"carrier F\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E);\n     g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n     surj_to g (carrier E) (carrier F)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>a\\<in>carrier D.\n                          \\<forall>b\\<in>carrier D.\n                             a \\<prec> b =\n                             compose (carrier D) g f\n                              a \\<prec>\\<^bsub>F\\<^esub>\n                             compose (carrier D) g f b) \\<and>\n                      surj_to (compose (carrier D) g f) (carrier D)\n                       (carrier F)", "apply (simp add:compose_surj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     surj_to f (carrier D) (carrier E);\n     g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n     surj_to g (carrier E) (carrier F)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier D.\n                         \\<forall>b\\<in>carrier D.\n                            a \\<prec> b =\n                            compose (carrier D) g f\n                             a \\<prec>\\<^bsub>F\\<^esub>\n                            compose (carrier D) g f b", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n        f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n        surj_to f (carrier D) (carrier E);\n        g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n        surj_to g (carrier E) (carrier F); a \\<in> carrier D;\n        b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b =\n                         compose (carrier D) g f a \\<prec>\\<^bsub>F\\<^esub>\n                         compose (carrier D) g f b", "apply (frule_tac x = a in funcset_mem[of f \"carrier D\" \"carrier E\"], \n                assumption+,\n       frule_tac x = b in funcset_mem[of f \"carrier D\" \"carrier E\"], \n       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n        f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n        surj_to f (carrier D) (carrier E);\n        g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n        surj_to g (carrier E) (carrier F); a \\<in> carrier D;\n        b \\<in> carrier D; f a \\<in> carrier E; f b \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b =\n                         compose (carrier D) g f a \\<prec>\\<^bsub>F\\<^esub>\n                         compose (carrier D) g f b", "apply (frule_tac a = a and b = b in ord_isom_less[of E f], assumption+,\n       frule_tac a = \"f a\" and b = \"f b\" in Order.ord_isom_less[of E F g],\n       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F g;\n        f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n        surj_to f (carrier D) (carrier E);\n        g \\<in> carrier E \\<rightarrow> carrier F; inj_on g (carrier E);\n        surj_to g (carrier E) (carrier F); a \\<in> carrier D;\n        b \\<in> carrier D; f a \\<in> carrier E; f b \\<in> carrier E;\n        a \\<prec> b = f a \\<prec>\\<^bsub>E\\<^esub> f b;\n        f a \\<prec>\\<^bsub>E\\<^esub> f b =\n        g (f a) \\<prec>\\<^bsub>F\\<^esub> g (f b)\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b =\n                         compose (carrier D) g f a \\<prec>\\<^bsub>F\\<^esub>\n                         compose (carrier D) g f b", "apply (simp add:compose_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  ord_equiv :: \"[_, ('b, 'm1) Order_scheme] \\<Rightarrow> bool\" where\n  \"ord_equiv D E \\<longleftrightarrow> (\\<exists>f. ord_isom D E f)\""], ["", "lemma (in Order) ord_equiv:\"\\<lbrakk>Order E; ord_isom D E f\\<rbrakk> \\<Longrightarrow> ord_equiv D E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E", "by (simp add:ord_equiv_def, blast)"], ["", "lemma (in Order) ord_equiv_isom:\"\\<lbrakk>Order E; ord_equiv D E\\<rbrakk> \\<Longrightarrow> \n       \\<exists>f. ord_isom D E f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f. ord_isom D E f", "by (simp add:ord_equiv_def)"], ["", "lemma (in Order) ord_equiv_reflex:\"ord_equiv D D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_equiv D D", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. ord_isom D D f", "apply (cut_tac id_ord_isom, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) eq_ord_equiv:\"\\<lbrakk>Order E; D = E\\<rbrakk> \\<Longrightarrow> ord_equiv D E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; D = E\\<rbrakk> \\<Longrightarrow> ord_equiv D E", "apply (frule sym, thin_tac \"D = E\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; E = D\\<rbrakk> \\<Longrightarrow> ord_equiv D E", "apply ( simp add:ord_equiv_reflex)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_equiv_sym:\"\\<lbrakk>Order E; ord_equiv D E \\<rbrakk> \\<Longrightarrow> ord_equiv E D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_equiv D E\\<rbrakk> \\<Longrightarrow> ord_equiv E D", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; \\<exists>f. ord_isom D E f\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f. ord_isom E D f", "apply (erule exE,\n       frule_tac E = E and f = f in ord_isom_sym, assumption+, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_equiv_trans:\"\\<lbrakk>Order E; Order F; ord_equiv D E; \n       ord_equiv E F\\<rbrakk> \\<Longrightarrow>  ord_equiv D F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv E F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D F", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; \\<exists>f. ord_isom D E f;\n     \\<exists>f. ord_isom E F f\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f. ord_isom D F f", "apply (erule exE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f fa.\n       \\<lbrakk>Order E; Order F; ord_isom D E f; ord_isom E F fa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f. ord_isom D F f", "apply (frule_tac f = f and g = fa in ord_isom_trans [of \"E\" \"F\"], \n       assumption+, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_equiv_box:\"\\<lbrakk>Order E; Order F; ord_equiv D E;\n        ord_equiv D F\\<rbrakk> \\<Longrightarrow> ord_equiv E F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv E F", "apply (rule Order.ord_equiv_trans[of E D F])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> Order E\n 2. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> Order D\n 3. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> Order F\n 4. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv E D\n 5. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D F", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> Order D\n 2. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> Order F\n 3. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv E D\n 4. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D F", "apply (rule Order_axioms)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> Order F\n 2. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv E D\n 3. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D F", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv E D\n 2. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D F", "apply (rule ord_equiv_sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> Order E\n 2. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E\n 3. \\<lbrakk>Order E; Order F; ord_equiv D E; ord_equiv D F\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D F", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SIod_isom_Iod:\"\\<lbrakk>Order D; T \\<subseteq> carrier D \\<rbrakk> \\<Longrightarrow>\n          ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x)", "apply (simp add:ord_isom_def ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x\\<in>T. x)\n                      \\<in> extensional (carrier (SIod D T)) \\<and>\n                      (\\<lambda>x\\<in>T. x)\n                      \\<in> carrier (SIod D T) \\<rightarrow>\n                            carrier (Iod D T) \\<and>\n                      inj_on (\\<lambda>x\\<in>T. x)\n                       (carrier (SIod D T)) \\<and>\n                      (\\<forall>a\\<in>carrier (SIod D T).\n                          (a \\<in> T \\<longrightarrow>\n                           (\\<forall>b\\<in>carrier (SIod D T).\n                               (b \\<in> T \\<longrightarrow>\n                                a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                                a \\<prec>\\<^bsub>Iod D T\\<^esub> b) \\<and>\n                               (b \\<notin> T \\<longrightarrow>\n                                a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                                a \\<prec>\\<^bsub>Iod D T\\<^esub>\n                                undefined))) \\<and>\n                          (a \\<notin> T \\<longrightarrow>\n                           (\\<forall>b\\<in>carrier (SIod D T).\n                               (b \\<in> T \\<longrightarrow>\n                                a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                                undefined \\<prec>\\<^bsub>Iod D T\\<^esub>\n                                b) \\<and>\n                               (b \\<notin> T \\<longrightarrow>\n                                a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                                undefined \\<prec>\\<^bsub>Iod D T\\<^esub>\n                                undefined)))) \\<and>\n                      surj_to (\\<lambda>x\\<in>T. x) (carrier (SIod D T))\n                       (carrier (Iod D T))", "apply (simp add:SIod_carrier Order.Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>a\\<in>T.\n                          \\<forall>b\\<in>T.\n                             a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                             a \\<prec>\\<^bsub>Iod D T\\<^esub> b) \\<and>\n                      surj_to (\\<lambda>x\\<in>T. x) T T", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>T.\n                         \\<forall>b\\<in>T.\n                            a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                            a \\<prec>\\<^bsub>Iod D T\\<^esub> b\n 2. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> surj_to (\\<lambda>x\\<in>T. x) T T", "apply (fold idmap_def[of T])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>T.\n                         \\<forall>b\\<in>T.\n                            a \\<prec>\\<^bsub>SIod D T\\<^esub> b =\n                            a \\<prec>\\<^bsub>Iod D T\\<^esub> b\n 2. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> surj_to (idmap T) T T", "apply (simp add:SIod_less Order.Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> surj_to (idmap T) T T", "apply (cut_tac A = T in idmap_bij,\n        simp add:bij_to_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  minimum_elem :: \"[_ , 'a set, 'a] \\<Rightarrow> bool\" where\n  \"minimum_elem = (\\<lambda>D X a. a \\<in> X \\<and> (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x))\""], ["", "locale Worder = Torder + \n       assumes ex_minimum: \"\\<forall>X. X \\<subseteq> (carrier D) \\<and> X \\<noteq> {} \\<longrightarrow>\n  (\\<exists>x. minimum_elem D X x)\""], ["", "lemma (in Worder) Order:\"Order D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order D", "by (rule Order)"], ["", "lemma (in Worder) Torder:\"Torder D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Torder D", "apply (rule Torder_axioms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Worder:\"Worder D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder D", "apply (rule Worder_axioms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) equiv_isom:\"\\<lbrakk>Worder E; ord_equiv D E\\<rbrakk> \\<Longrightarrow> \n             \\<exists>f. ord_isom D E f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_equiv D E\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f. ord_isom D E f", "by (insert Order, frule Worder.Order[of \"E\"], simp add:ord_equiv_def)"], ["", "lemma (in Order) minimum_elem_mem:\"\\<lbrakk>X \\<subseteq> carrier D; minimum_elem D X a\\<rbrakk>\n                              \\<Longrightarrow>  a \\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; minimum_elem D X a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X", "by (simp add:minimum_elem_def)"], ["", "lemma (in Order) minimum_elem_unique:\"\\<lbrakk>X \\<subseteq> carrier D; minimum_elem D X a1;\n                    minimum_elem D X a2\\<rbrakk> \\<Longrightarrow> a1 = a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; minimum_elem D X a1;\n     minimum_elem D X a2\\<rbrakk>\n    \\<Longrightarrow> a1 = a2", "apply (frule minimum_elem_mem[of \"X\" \"a1\"], assumption+,\n       frule minimum_elem_mem[of \"X\" \"a2\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; minimum_elem D X a1;\n     minimum_elem D X a2; a1 \\<in> X; a2 \\<in> X\\<rbrakk>\n    \\<Longrightarrow> a1 = a2", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; \\<forall>x\\<in>X. a1 \\<preceq> x;\n     \\<forall>x\\<in>X. a2 \\<preceq> x; a1 \\<in> X; a2 \\<in> X\\<rbrakk>\n    \\<Longrightarrow> a1 = a2", "apply (drule_tac x = a2 in bspec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; \\<forall>x\\<in>X. a2 \\<preceq> x;\n     a1 \\<in> X; a2 \\<in> X; a1 \\<preceq> a2\\<rbrakk>\n    \\<Longrightarrow> a1 = a2", "apply (drule_tac x = a1 in bspec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a1 \\<in> X; a2 \\<in> X;\n     a1 \\<preceq> a2; a2 \\<preceq> a1\\<rbrakk>\n    \\<Longrightarrow> a1 = a2", "apply (rule le_antisym[of a1 a2])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a1 \\<in> X; a2 \\<in> X;\n     a1 \\<preceq> a2; a2 \\<preceq> a1\\<rbrakk>\n    \\<Longrightarrow> a1 \\<in> carrier D\n 2. \\<lbrakk>X \\<subseteq> carrier D; a1 \\<in> X; a2 \\<in> X;\n     a1 \\<preceq> a2; a2 \\<preceq> a1\\<rbrakk>\n    \\<Longrightarrow> a2 \\<in> carrier D\n 3. \\<lbrakk>X \\<subseteq> carrier D; a1 \\<in> X; a2 \\<in> X;\n     a1 \\<preceq> a2; a2 \\<preceq> a1\\<rbrakk>\n    \\<Longrightarrow> a1 \\<preceq> a2\n 4. \\<lbrakk>X \\<subseteq> carrier D; a1 \\<in> X; a2 \\<in> X;\n     a1 \\<preceq> a2; a2 \\<preceq> a1\\<rbrakk>\n    \\<Longrightarrow> a2 \\<preceq> a1", "apply (simp add:subsetD)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) compare_minimum_elements:\"\\<lbrakk>S \\<subseteq> carrier D; T \\<subseteq> carrier D;\n      S \\<subseteq> T; minimum_elem D S s; minimum_elem D T t \\<rbrakk> \\<Longrightarrow> t \\<preceq> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> carrier D; T \\<subseteq> carrier D;\n     S \\<subseteq> T; minimum_elem D S s; minimum_elem D T t\\<rbrakk>\n    \\<Longrightarrow> t \\<preceq> s", "apply (frule minimum_elem_mem[of \"S\" \"s\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> carrier D; T \\<subseteq> carrier D;\n     S \\<subseteq> T; minimum_elem D S s; minimum_elem D T t;\n     s \\<in> S\\<rbrakk>\n    \\<Longrightarrow> t \\<preceq> s", "apply (frule subsetD[of \"S\" \"T\" \"s\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> carrier D; T \\<subseteq> carrier D;\n     S \\<subseteq> T; minimum_elem D S s; minimum_elem D T t; s \\<in> S;\n     s \\<in> T\\<rbrakk>\n    \\<Longrightarrow> t \\<preceq> s", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) minimum_elem_sub:\"\\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T\\<rbrakk>\n        \\<Longrightarrow> minimum_elem D X a = minimum_elem (Iod D T) X a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X a = minimum_elem (Iod D T) X a", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T\\<rbrakk>\n    \\<Longrightarrow> (a \\<in> X \\<and> (\\<forall>x\\<in>X. a \\<preceq> x)) =\n                      (a \\<in> X \\<and>\n                       (\\<forall>x\\<in>X.\n                           a \\<preceq>\\<^bsub>Iod D T\\<^esub> x))", "apply (simp add:subset_eq[of X T])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T\\<rbrakk>\n    \\<Longrightarrow> (a \\<in> X \\<and> (\\<forall>x\\<in>X. a \\<preceq> x)) =\n                      (a \\<in> X \\<and>\n                       (\\<forall>x\\<in>X.\n                           a \\<preceq>\\<^bsub>Iod D T\\<^esub> x))", "apply (rule iffI, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n     a \\<in> X; \\<forall>x\\<in>X. a \\<preceq> x\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and>\n                      (\\<forall>x\\<in>X.\n                          a \\<preceq>\\<^bsub>Iod D T\\<^esub> x)\n 2. \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>Iod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and> (\\<forall>x\\<in>X. a \\<preceq> x)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n     a \\<in> X; \\<forall>x\\<in>X. a \\<preceq> x\\<rbrakk>\n    \\<Longrightarrow> Ball X ((\\<preceq>\\<^bsub>Iod D T\\<^esub>) a)\n 2. \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>Iod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and> (\\<forall>x\\<in>X. a \\<preceq> x)", "apply (rule ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n        a \\<in> X; \\<forall>x\\<in>X. a \\<preceq> x; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D T\\<^esub> x\n 2. \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>Iod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and> (\\<forall>x\\<in>X. a \\<preceq> x)", "apply (simp add:Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>Iod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and> (\\<forall>x\\<in>X. a \\<preceq> x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>Iod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Ball X ((\\<preceq>) a)", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n        a \\<in> X \\<and>\n        (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>Iod D T\\<^esub> x);\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; \\<forall>x\\<in>X. x \\<in> T;\n        x \\<in> X; a \\<in> X;\n        \\<forall>x\\<in>X. a \\<preceq>\\<^bsub>Iod D T\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> x", "apply (simp add:Iod_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma minimum_elem_Ssub:\"\\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T\\<rbrakk>\n        \\<Longrightarrow> minimum_elem D X a = minimum_elem (SIod D T) X a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X a = minimum_elem (SIod D T) X a", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T\\<rbrakk>\n    \\<Longrightarrow> (a \\<in> X \\<and>\n                       (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)) =\n                      (a \\<in> X \\<and>\n                       (\\<forall>x\\<in>X.\n                           a \\<preceq>\\<^bsub>SIod D T\\<^esub> x))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and>\n                      (\\<forall>x\\<in>X.\n                          a \\<preceq>\\<^bsub>SIod D T\\<^esub> x)\n 2. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>SIod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and>\n                      (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Ball X ((\\<preceq>\\<^bsub>SIod D T\\<^esub>) a)\n 2. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>SIod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and>\n                      (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)", "apply (rule ballI, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n        x \\<in> X; a \\<in> X;\n        \\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>SIod D T\\<^esub> x\n 2. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>SIod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and>\n                      (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)", "apply (drule_tac x = x in bspec, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n        x \\<in> X; a \\<in> X; a \\<preceq>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>SIod D T\\<^esub> x\n 2. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>SIod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and>\n                      (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)", "apply (frule_tac c = x in subsetD[of \"X\" \"T\"], assumption+,\n        frule_tac c = a in subsetD[of \"X\" \"T\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n        x \\<in> X; a \\<in> X; a \\<preceq>\\<^bsub>D\\<^esub> x; x \\<in> T;\n        a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>SIod D T\\<^esub> x\n 2. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>SIod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and>\n                      (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)", "apply (simp add:SIod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>SIod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> X \\<and>\n                      (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>D\\<^esub> x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n     a \\<in> X \\<and>\n     (\\<forall>x\\<in>X. a \\<preceq>\\<^bsub>SIod D T\\<^esub> x)\\<rbrakk>\n    \\<Longrightarrow> Ball X ((\\<preceq>\\<^bsub>D\\<^esub>) a)", "apply (rule ballI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n        x \\<in> X; a \\<in> X;\n        \\<forall>x\\<in>X. a \\<preceq>\\<^bsub>SIod D T\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> x", "apply (drule_tac x = x in bspec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n        x \\<in> X; a \\<in> X; a \\<preceq>\\<^bsub>SIod D T\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> x", "apply (frule_tac c = x in subsetD[of \"X\" \"T\"], assumption+,\n        frule_tac c = a in subsetD[of \"X\" \"T\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; T \\<subseteq> carrier D; X \\<subseteq> T;\n        x \\<in> X; a \\<in> X; a \\<preceq>\\<^bsub>SIod D T\\<^esub> x;\n        x \\<in> T; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> x", "apply (simp add:SIod_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) augmented_set_minimum:\"\\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n       Y - {a} \\<subseteq> X; y - {a} \\<noteq> {}; minimum_elem (Iod D X) (Y - {a}) x;\n       \\<forall>x\\<in>X. x \\<preceq> a\\<rbrakk> \\<Longrightarrow>  minimum_elem (Iod D (insert a X)) Y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; y - {a} \\<noteq> {};\n     minimum_elem (Iod D X) (Y - {a}) x;\n     \\<forall>x\\<in>X. x \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (insert a X)) Y x", "apply (frule insert_mono[of \"Y - {a}\" \"X\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; y - {a} \\<noteq> {};\n     minimum_elem (Iod D X) (Y - {a}) x; \\<forall>x\\<in>X. x \\<preceq> a;\n     insert a (Y - {a}) \\<subseteq> insert a X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (insert a X)) Y x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; \\<not> y \\<subseteq> {a};\n     minimum_elem (Iod D X) (Y - {a}) x; \\<forall>x\\<in>X. x \\<preceq> a;\n     Y \\<subseteq> insert a X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (insert a X)) Y x", "apply (frule insert_sub[of X \"carrier D\" a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; \\<not> y \\<subseteq> {a};\n     minimum_elem (Iod D X) (Y - {a}) x; \\<forall>x\\<in>X. x \\<preceq> a;\n     Y \\<subseteq> insert a X; insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (insert a X)) Y x", "apply (simp add:minimum_elem_sub[THEN sym, of \"insert a X\" Y],\n        simp add:minimum_elem_sub[THEN sym, of X \"Y - {a}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; \\<not> y \\<subseteq> {a};\n     minimum_elem D (Y - {a}) x; \\<forall>x\\<in>X. x \\<preceq> a;\n     Y \\<subseteq> insert a X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D Y x", "apply (simp add:subset_eq[of \"Y - {a}\" X])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>Y - {a}. x \\<in> X; \\<not> y \\<subseteq> {a};\n     minimum_elem D (Y - {a}) x; \\<forall>x\\<in>X. x \\<preceq> a;\n     Y \\<subseteq> insert a X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D Y x", "apply (simp add:minimum_elem_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>Y - {a}. x \\<in> X; \\<not> y \\<subseteq> {a};\n     \\<forall>x\\<in>X. x \\<preceq> a; Y \\<subseteq> insert a X; x \\<in> Y;\n     x \\<noteq> a; \\<forall>xa\\<in>Y - {a}. x \\<preceq> xa\\<rbrakk>\n    \\<Longrightarrow> Ball Y ((\\<preceq>) x)", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>Y - {a}. x \\<in> X; \\<not> y \\<subseteq> {a};\n        \\<forall>x\\<in>X. x \\<preceq> a; Y \\<subseteq> insert a X;\n        x \\<in> Y; x \\<noteq> a; \\<forall>xa\\<in>Y - {a}. x \\<preceq> xa;\n        xa \\<in> Y\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq> xa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma  augmented_Sset_minimum:\"\\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n       Y - {a} \\<subseteq> X; y - {a} \\<noteq> {}; minimum_elem (SIod D X) (Y - {a}) x;\n       \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a\\<rbrakk> \\<Longrightarrow>  minimum_elem (SIod D (insert a X)) Y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; y - {a} \\<noteq> {};\n     minimum_elem (SIod D X) (Y - {a}) x;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (SIod D (insert a X)) Y x", "apply (frule insert_mono[of \"Y - {a}\" \"X\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; y - {a} \\<noteq> {};\n     minimum_elem (SIod D X) (Y - {a}) x;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     insert a (Y - {a}) \\<subseteq> insert a X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (SIod D (insert a X)) Y x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; \\<not> y \\<subseteq> {a};\n     minimum_elem (SIod D X) (Y - {a}) x;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Y \\<subseteq> insert a X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (SIod D (insert a X)) Y x", "apply (frule insert_sub[of X \"carrier D\" a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; \\<not> y \\<subseteq> {a};\n     minimum_elem (SIod D X) (Y - {a}) x;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Y \\<subseteq> insert a X; insert a X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (SIod D (insert a X)) Y x", "apply (simp add:minimum_elem_Ssub[THEN sym, of D \"insert a X\" Y],\n        simp add:minimum_elem_Ssub[THEN sym, of D X \"Y - {a}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     Y - {a} \\<subseteq> X; \\<not> y \\<subseteq> {a};\n     minimum_elem D (Y - {a}) x;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Y \\<subseteq> insert a X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D Y x", "apply (simp add:subset_eq[of \"Y - {a}\" X])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>Y - {a}. x \\<in> X; \\<not> y \\<subseteq> {a};\n     minimum_elem D (Y - {a}) x;\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Y \\<subseteq> insert a X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D Y x", "apply (simp add:minimum_elem_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n     \\<forall>x\\<in>Y - {a}. x \\<in> X; \\<not> y \\<subseteq> {a};\n     \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n     Y \\<subseteq> insert a X; x \\<in> Y; x \\<noteq> a;\n     \\<forall>xa\\<in>Y - {a}. x \\<preceq>\\<^bsub>D\\<^esub> xa\\<rbrakk>\n    \\<Longrightarrow> Ball Y ((\\<preceq>\\<^bsub>D\\<^esub>) x)", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>Order D; X \\<subseteq> carrier D; a \\<in> carrier D;\n        \\<forall>x\\<in>Y - {a}. x \\<in> X; \\<not> y \\<subseteq> {a};\n        \\<forall>x\\<in>X. x \\<preceq>\\<^bsub>D\\<^esub> a;\n        Y \\<subseteq> insert a X; x \\<in> Y; x \\<noteq> a;\n        \\<forall>xa\\<in>Y - {a}. x \\<preceq>\\<^bsub>D\\<^esub> xa;\n        xa \\<in> Y\\<rbrakk>\n       \\<Longrightarrow> x \\<preceq>\\<^bsub>D\\<^esub> xa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_minimum:\"\\<lbrakk>Order E; ord_isom D E f;\nS \\<subseteq> carrier D; a \\<in> carrier D; minimum_elem D S a\\<rbrakk> \\<Longrightarrow>\n              minimum_elem E (f`S) (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n     a \\<in> carrier D; minimum_elem D S a\\<rbrakk>\n    \\<Longrightarrow> minimum_elem E (f ` S) (f a)", "apply (subst minimum_elem_def,\n       frule minimum_elem_mem[of \"S\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n     a \\<in> carrier D; minimum_elem D S a; a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> f a \\<in> f ` S \\<and>\n                      Ball (f ` S) ((\\<preceq>\\<^bsub>E\\<^esub>) (f a))", "apply (simp add:ord_isom_mem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n     a \\<in> carrier D; minimum_elem D S a; a \\<in> S\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>S. f a \\<preceq>\\<^bsub>E\\<^esub> f x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n        a \\<in> carrier D; minimum_elem D S a; a \\<in> S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> f a \\<preceq>\\<^bsub>E\\<^esub> f x", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n        a \\<in> carrier D; Ball S ((\\<preceq>) a); a \\<in> S;\n        x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> f a \\<preceq>\\<^bsub>E\\<^esub> f x", "apply (frule_tac x = x in bspec, assumption,\n       thin_tac \"Ball S ((\\<preceq>) a)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n        a \\<in> carrier D; a \\<in> S; x \\<in> S; a \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> f a \\<preceq>\\<^bsub>E\\<^esub> f x", "apply (frule_tac b = x in ord_isom_le[of E f a], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n        a \\<in> carrier D; a \\<in> S; x \\<in> S; a \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n        a \\<in> carrier D; a \\<in> S; x \\<in> S; a \\<preceq> x;\n        a \\<preceq> x = f a \\<preceq>\\<^bsub>E\\<^esub> f x\\<rbrakk>\n       \\<Longrightarrow> f a \\<preceq>\\<^bsub>E\\<^esub> f x", "apply (simp add:subsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order E; ord_isom D E f; S \\<subseteq> carrier D;\n        a \\<in> carrier D; a \\<in> S; x \\<in> S; a \\<preceq> x;\n        a \\<preceq> x = f a \\<preceq>\\<^bsub>E\\<^esub> f x\\<rbrakk>\n       \\<Longrightarrow> f a \\<preceq>\\<^bsub>E\\<^esub> f x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) pre_minimum:\"\\<lbrakk>T \\<subseteq> carrier D; minimum_elem D T t; \ns \\<in> carrier D; s \\<prec>\\<^bsub>D\\<^esub> t \\<rbrakk> \\<Longrightarrow> \\<not> s \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D T t; s \\<in> carrier D;\n     s \\<prec> t\\<rbrakk>\n    \\<Longrightarrow> s \\<notin> T", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D T t; s \\<in> carrier D;\n     s \\<prec> t; s \\<in> T\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:minimum_elem_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; s \\<in> carrier D; s \\<prec> t;\n     s \\<in> T; t \\<in> T; \\<forall>x\\<in>T. t \\<preceq> x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule_tac x = s in bspec, assumption+,\n        thin_tac \"\\<forall>x\\<in>T. t \\<preceq>\\<^bsub>D\\<^esub> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; s \\<in> carrier D; s \\<prec> t;\n     s \\<in> T; t \\<in> T; t \\<preceq> s\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:oless_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; s \\<in> carrier D; s \\<in> T;\n     t \\<in> T; t \\<preceq> s; s \\<preceq> t; s \\<noteq> t\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule le_antisym[of s t])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; s \\<in> carrier D; s \\<in> T;\n     t \\<in> T; t \\<preceq> s; s \\<preceq> t; s \\<noteq> t\\<rbrakk>\n    \\<Longrightarrow> t \\<in> carrier D\n 2. \\<lbrakk>T \\<subseteq> carrier D; s \\<in> carrier D; s \\<in> T;\n     t \\<in> T; t \\<preceq> s; s \\<preceq> t; s \\<noteq> t\\<rbrakk>\n    \\<Longrightarrow> s \\<preceq> t\n 3. \\<lbrakk>T \\<subseteq> carrier D; s \\<in> carrier D; s \\<in> T;\n     t \\<in> T; t \\<preceq> s; s \\<preceq> t; s \\<noteq> t\\<rbrakk>\n    \\<Longrightarrow> t \\<preceq> s\n 4. \\<lbrakk>T \\<subseteq> carrier D; s \\<in> carrier D; s \\<in> T;\n     t \\<in> T; t \\<preceq> s; s \\<preceq> t; s \\<noteq> t; s = t\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:subsetD[of \"T\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; s \\<in> carrier D; s \\<in> T;\n     t \\<in> T; t \\<preceq> s; s \\<preceq> t; s \\<noteq> t; s = t\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bex_nonempty_subset:\"\\<exists>a. a \\<in> A \\<and> P a \\<Longrightarrow> \n               {x. x \\<in> A \\<and> P x} \\<subseteq> A \\<and> {x. x \\<in> A \\<and> P x} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a. a \\<in> A \\<and> P a \\<Longrightarrow>\n    {x \\<in> A. P x} \\<subseteq> A \\<and> {x \\<in> A. P x} \\<noteq> {}", "apply (erule exE, rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> A \\<and> P a \\<Longrightarrow> {x \\<in> A. P x} \\<subseteq> A\n 2. \\<And>a.\n       a \\<in> A \\<and> P a \\<Longrightarrow> {x \\<in> A. P x} \\<noteq> {}", "apply (rule subsetI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> A \\<and> P a \\<Longrightarrow> {x \\<in> A. P x} \\<noteq> {}", "apply (rule_tac A = \"{x \\<in> A. P x}\" in nonempty, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) to_subset:\"\\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f\\<rbrakk> \\<Longrightarrow> \n            \\<forall>a. a \\<in> carrier D \\<longrightarrow> a \\<preceq> (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<in> carrier D \\<longrightarrow> a \\<preceq> f a", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (cut_tac ex_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a;\n     \\<forall>X.\n        X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n    \\<Longrightarrow> False", "apply (drule_tac a = \"{a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a}\" in forall_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a\\<rbrakk>\n    \\<Longrightarrow> {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n                      \\<subseteq> carrier D \\<and>\n                      {a \\<in> carrier D. \\<not> a \\<preceq> f a} \\<noteq>\n                      {}\n 2. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a;\n     \\<exists>x.\n        minimum_elem D {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n         x\\<rbrakk>\n    \\<Longrightarrow> False", "(*\n       thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\") *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a\\<rbrakk>\n    \\<Longrightarrow> {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n                      \\<subseteq> carrier D \\<and>\n                      {a \\<in> carrier D. \\<not> a \\<preceq> f a} \\<noteq>\n                      {}\n 2. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a;\n     \\<exists>x.\n        minimum_elem D {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n         x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a\\<rbrakk>\n    \\<Longrightarrow> {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n                      \\<subseteq> carrier D\n 2. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a\\<rbrakk>\n    \\<Longrightarrow> {a \\<in> carrier D. \\<not> a \\<preceq> f a} \\<noteq>\n                      {}\n 3. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a;\n     \\<exists>x.\n        minimum_elem D {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n         x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule subsetI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a\\<rbrakk>\n    \\<Longrightarrow> {a \\<in> carrier D. \\<not> a \\<preceq> f a} \\<noteq>\n                      {}\n 2. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a;\n     \\<exists>x.\n        minimum_elem D {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n         x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (rule ex_nonempty, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a;\n     \\<exists>x.\n        minimum_elem D {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n         x\\<rbrakk>\n    \\<Longrightarrow> False", "(*\napply (thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\",\n       thin_tac \"\\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a\") *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n     \\<exists>a. a \\<in> carrier D \\<and> \\<not> a \\<preceq> f a;\n     \\<exists>x.\n        minimum_elem D {a \\<in> carrier D. \\<not> a \\<preceq> f a}\n         x\\<rbrakk>\n    \\<Longrightarrow> False", "apply ((erule exE)+, simp add:minimum_elem_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Iod_Order[of \"T\"],\n       frule_tac a = x in ord_isom_mem[of \"Iod D T\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa;\n        Order (Iod D T); f x \\<in> carrier (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = x and b = \"f x\" in ord_isom_le[of \"Iod D T\" \"f\"],\n       assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa;\n        Order (Iod D T); f x \\<in> carrier (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> f x \\<in> carrier D\n 2. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa;\n        Order (Iod D T); f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x =\n        f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_carrier subsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa;\n        Order (Iod D T); f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x =\n        f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Iod_carrier[of \"T\"],\n       frule_tac a = \"f x\" in eq_set_inc[of _ \"carrier (Iod D T)\" \"T\"],\n           assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa;\n        Order (Iod D T); f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = \"f x\" in subsetD[of \"T\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa;\n        Order (Iod D T); f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T; f x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = \"f x\" in ord_isom_mem[of \"Iod D T\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa;\n        Order (Iod D T); f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T; f x \\<in> carrier D;\n        f (f x) \\<in> carrier (Iod D T)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = \"f (f x)\" in eq_set_inc[of _ \"carrier (Iod D T)\" \"T\"],\n           assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x;\n        \\<forall>xa.\n           xa \\<in> carrier D \\<and>\n           \\<not> xa \\<preceq> f xa \\<longrightarrow>\n           x \\<preceq> xa;\n        Order (Iod D T); f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T; f x \\<in> carrier D;\n        f (f x) \\<in> carrier (Iod D T); f (f x) \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule_tac a = \"f x\" in forall_spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x; Order (Iod D T);\n        f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T; f x \\<in> carrier D;\n        f (f x) \\<in> carrier (Iod D T); f (f x) \\<in> T\\<rbrakk>\n       \\<Longrightarrow> f x \\<in> carrier D \\<and>\n                         \\<not> f x \\<preceq> f (f x)\n 2. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x; Order (Iod D T);\n        f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T; f x \\<in> carrier D;\n        f (f x) \\<in> carrier (Iod D T); f (f x) \\<in> T;\n        x \\<preceq> f x\\<rbrakk>\n       \\<Longrightarrow> False", "(*    thin_tac \"\\<forall>xa. xa \\<in> carrier D \\<and> \\<not> xa \\<preceq> f xa \\<longrightarrow> x \\<preceq> xa\") *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x; Order (Iod D T);\n        f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T; f x \\<in> carrier D;\n        f (f x) \\<in> carrier (Iod D T); f (f x) \\<in> T\\<rbrakk>\n       \\<Longrightarrow> f x \\<in> carrier D \\<and>\n                         \\<not> f x \\<preceq> f (f x)\n 2. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x; Order (Iod D T);\n        f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T; f x \\<in> carrier D;\n        f (f x) \\<in> carrier (Iod D T); f (f x) \\<in> T;\n        x \\<preceq> f x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:subsetD Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x.\n       \\<lbrakk>T \\<subseteq> carrier D; ord_isom D (Iod D T) f;\n        a \\<in> carrier D; \\<not> a \\<preceq> f a; x \\<in> carrier D;\n        \\<not> x \\<preceq> f x; Order (Iod D T);\n        f x \\<in> carrier (Iod D T);\n        x \\<preceq> f x = f x \\<preceq>\\<^bsub>Iod D T\\<^esub> f (f x);\n        carrier (Iod D T) = T; f x \\<in> T; f x \\<in> carrier D;\n        f (f x) \\<in> carrier (Iod D T); f (f x) \\<in> T;\n        x \\<preceq> f x\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma to_subsetS:\"\\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f\\<rbrakk> \\<Longrightarrow> \n            \\<forall>a. a \\<in> carrier D \\<longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     ord_isom D (SIod D T) f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<in> carrier D \\<longrightarrow>\n                         a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (frule Worder.Order[of \"D\"],\n       frule SIod_isom_Iod[of \"D\" \"T\"], assumption+,\n       frule Order.ord_isom_trans[of \"D\" \"SIod D T\" \"Iod D T\" f \"\\<lambda>x\\<in>T. x\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n     Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x)\\<rbrakk>\n    \\<Longrightarrow> Order (SIod D T)\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n     Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x)\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D T)\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n     Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x)\\<rbrakk>\n    \\<Longrightarrow> ord_isom D (SIod D T) f\n 4. \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n     Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x)\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x)\n 5. \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n     Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n     ord_isom D (Iod D T)\n      (compose (carrier D) (\\<lambda>x\\<in>T. x) f)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<in> carrier D \\<longrightarrow>\n                         a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (simp add:SIod_Order, simp add:Order.Iod_Order, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n     Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n     ord_isom D (Iod D T)\n      (compose (carrier D) (\\<lambda>x\\<in>T. x) f)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<in> carrier D \\<longrightarrow>\n                         a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (frule_tac D = D and T = T and f = \"compose (carrier D) (\\<lambda>x\\<in>T. x) f\" \n        in Worder.to_subset, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n     Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n     ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n     \\<forall>a.\n        a \\<in> carrier D \\<longrightarrow>\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<in> carrier D \\<longrightarrow>\n                         a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        \\<forall>a.\n           a \\<in> carrier D \\<longrightarrow>\n           a \\<preceq>\\<^bsub>D\\<^esub>\n           compose (carrier D) (\\<lambda>x\\<in>T. x) f a;\n        a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (drule_tac a = a in forall_spec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        a \\<in> carrier D;\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> f a", "(*  thin_tac \"\\<forall>a. a \\<in> carrier D \\<longrightarrow> \n                          a \\<preceq>\\<^bsub>D\\<^esub> compose (carrier D) (\\<lambda>x\\<in>T. x) f a\") *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        a \\<in> carrier D;\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (frule_tac a = a in Order.ord_isom_mem[of \"D\" \"SIod D T\" \"f\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        a \\<in> carrier D;\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a\\<rbrakk>\n       \\<Longrightarrow> Order (SIod D T)\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        a \\<in> carrier D;\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a\\<rbrakk>\n       \\<Longrightarrow> ord_isom D (SIod D T) f\n 3. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        a \\<in> carrier D;\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 4. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        a \\<in> carrier D;\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a;\n        f a \\<in> carrier (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (simp add:SIod_Order, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        a \\<in> carrier D;\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a;\n        f a \\<in> carrier (SIod D T)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; ord_isom D (SIod D T) f;\n        Order D; ord_isom (SIod D T) (Iod D T) (\\<lambda>x\\<in>T. x);\n        ord_isom D (Iod D T) (compose (carrier D) (\\<lambda>x\\<in>T. x) f);\n        a \\<in> carrier D;\n        a \\<preceq>\\<^bsub>D\\<^esub>\n        compose (carrier D) (\\<lambda>x\\<in>T. x) f a;\n        f a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> f a", "apply (simp add:compose_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) isom_Worder:\"\\<lbrakk>Order T; ord_isom D T f\\<rbrakk> \\<Longrightarrow> Worder T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk> \\<Longrightarrow> Worder T", "apply (rule Worder.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk> \\<Longrightarrow> Torder T\n 2. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms T", "apply (rule Torder.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk> \\<Longrightarrow> Order T\n 2. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms T\n 3. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms T", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Torder_axioms T\n 2. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms T", "apply (rule Torder_axioms.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Order T; ord_isom D T f; a \\<in> carrier T;\n        b \\<in> carrier T\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>T\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>T\\<^esub> a\n 2. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms T", "apply (frule_tac b = a in ord_isom_surj[of T f], assumption+,\n       frule_tac b = b in ord_isom_surj[of T f], assumption+,\n       (erule bexE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ab.\n       \\<lbrakk>Order T; ord_isom D T f; a \\<in> carrier T;\n        b \\<in> carrier T; aa \\<in> carrier D; a = f aa; ab \\<in> carrier D;\n        b = f ab\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>T\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>T\\<^esub> a\n 2. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms T", "apply (cut_tac Torder_axioms, simp add:Torder_axioms_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ab.\n       \\<lbrakk>Order T; ord_isom D T f; f aa \\<in> carrier T;\n        f ab \\<in> carrier T; aa \\<in> carrier D; a = f aa;\n        ab \\<in> carrier D; b = f ab; Torder D\\<rbrakk>\n       \\<Longrightarrow> f aa \\<preceq>\\<^bsub>T\\<^esub> f ab \\<or>\n                         f ab \\<preceq>\\<^bsub>T\\<^esub> f aa\n 2. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms T", "apply (meson le_cases ord_isom_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms T", "apply (rule Worder_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order T; ord_isom D T f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>X.\n                         X \\<subseteq> carrier T \\<and>\n                         X \\<noteq> {} \\<longrightarrow>\n                         (\\<exists>x. minimum_elem T X x)", "apply (rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (frule ord_isom_func[of \"T\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (frule ord_isom_bij_to[of \"T\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (frule ord_isom_sym[of \"T\" \"f\"], assumption+,\n        frule Order.ord_isom_func[of \"T\" \"D\" \n              \"invfun (carrier D) (carrier T) f\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D\n         (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> Order D\n 2. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D\n         (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>)\\<rbrakk>\n       \\<Longrightarrow> ord_isom T D\n                          (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>)\n 3. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (rule Order, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (frule_tac ?A1.0 = X in  image_sub[of \n        \"invfun (carrier D) (carrier T) f\" \"carrier T\" \"carrier D\"],\n        assumption+,\n        frule_tac ?A1.0 = X in image_nonempty[of \"invfun (carrier D) \n        (carrier T) f\" \"carrier T\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq>\n        {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (cut_tac ex_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        \\<forall>X.\n           X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "(** Because D is well ordered **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        \\<forall>X.\n           X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (drule_tac a = \"invfun (carrier D) (carrier T) f ` X\" in forall_spec,\n   (*  thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\", *)\n        simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        \\<exists>x.\n           minimum_elem D\n            ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X)\n            x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (\n    (* thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\", *)\n       erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (frule_tac S = \"invfun (carrier D) (carrier T) f ` X\" and a = x in \n       ord_isom_minimum[of \"T\" \"f\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D\n 2. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D\n                          ((f\\<inverse>\\<^bsub>carrier\n          T,carrier D\\<^esub>) `\n                           X)\n                          x\n 3. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x;\n        minimum_elem T\n         (f ` (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X)\n         (f x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (frule_tac X = \"invfun (carrier D) (carrier T) f ` X\" and a = x in \n         minimum_elem_mem, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x;\n        x \\<in> (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) `\n                X\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D\n 2. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D\n                          ((f\\<inverse>\\<^bsub>carrier\n          T,carrier D\\<^esub>) `\n                           X)\n                          x\n 3. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x;\n        minimum_elem T\n         (f ` (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X)\n         (f x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (simp add:subsetD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x\\<rbrakk>\n       \\<Longrightarrow> minimum_elem D\n                          ((f\\<inverse>\\<^bsub>carrier\n          T,carrier D\\<^esub>) `\n                           X)\n                          x\n 2. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x;\n        minimum_elem T\n         (f ` (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X)\n         (f x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>Order T; ord_isom D T f; X \\<subseteq> carrier T;\n        X \\<noteq> {}; f \\<in> carrier D \\<rightarrow> carrier T;\n        bij_to f (carrier D) (carrier T);\n        ord_isom T D (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>);\n        f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>\n        \\<in> carrier T \\<rightarrow> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X\n        \\<subseteq> carrier D;\n        (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X \\<noteq> {};\n        minimum_elem D\n         ((f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X) x;\n        minimum_elem T\n         (f ` (f\\<inverse>\\<^bsub>carrier T,carrier D\\<^esub>) ` X)\n         (f x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem T X x", "apply (simp add:invfun_set, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) equiv_Worder:\"\\<lbrakk>Order T; ord_equiv D T\\<rbrakk> \\<Longrightarrow> Worder T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order T; ord_equiv D T\\<rbrakk> \\<Longrightarrow> Worder T", "by (simp add:ord_equiv_def,\n       erule exE, simp add:isom_Worder)"], ["", "lemma (in Worder) equiv_Worder1:\"\\<lbrakk>Order T; ord_equiv T D\\<rbrakk> \\<Longrightarrow> Worder T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order T; ord_equiv T D\\<rbrakk> \\<Longrightarrow> Worder T", "apply (cut_tac Worder,\n       frule Worder.Order[of D],\n       frule Order.ord_equiv_sym[of T D], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order T; ord_equiv T D; Worder D; Order D;\n     ord_equiv D T\\<rbrakk>\n    \\<Longrightarrow> Worder T", "apply (rule equiv_Worder, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) ord_isom_self_id:\"ord_isom D D f \\<Longrightarrow> f = idmap (carrier D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_isom D D f \\<Longrightarrow> f = idmap (carrier D)", "apply (cut_tac Order,\n       frule ord_isom_sym [of \"D\" \"f\"], assumption+,\n       frule ord_isom_func[of \"D\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ord_isom D D f; Order D;\n     ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n     f \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> f = idmap (carrier D)", "apply (rule funcset_eq[of \"f\" \"carrier D\" \"idmap (carrier D)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ord_isom D D f; Order D;\n     ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n     f \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> f \\<in> extensional (carrier D)\n 2. \\<lbrakk>ord_isom D D f; Order D;\n     ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n     f \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> idmap (carrier D) \\<in> extensional (carrier D)\n 3. \\<lbrakk>ord_isom D D f; Order D;\n     ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n     f \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D. f x = idmap (carrier D) x", "apply (simp add:ord_isom_def ord_inj_def, simp add:idmap_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ord_isom D D f; Order D;\n     ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n     f \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D. f x = idmap (carrier D) x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> f x = idmap (carrier D) x", "apply (simp add:idmap_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (cut_tac subset_self[of \"carrier D\"],\n        frule to_subset [of \"carrier D\" \"f\"],\n        simp add:Iod_self[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D;\n        \\<forall>a.\n           a \\<in> carrier D \\<longrightarrow> a \\<preceq> f a\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (drule_tac a = x in forall_spec, assumption\n      (*  thin_tac \"\\<forall>a. a \\<in> carrier D \\<longrightarrow>  a \\<preceq> (f a)\" *))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (frule to_subset [of \"carrier D\" \"invfun (carrier D) (carrier D) f\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x\\<rbrakk>\n       \\<Longrightarrow> ord_isom D (Iod D (carrier D))\n                          (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>)\n 2. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x;\n        \\<forall>a.\n           a \\<in> carrier D \\<longrightarrow>\n           a \\<preceq>\n           (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) a\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (simp add:Iod_self[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x;\n        \\<forall>a.\n           a \\<in> carrier D \\<longrightarrow>\n           a \\<preceq>\n           (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) a\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (drule_tac a = x in forall_spec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x;\n        x \\<preceq>\n        (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x\\<rbrakk>\n       \\<Longrightarrow> f x = x", "(*,\n        thin_tac \"\\<forall>a. a \\<in> carrier D \\<longrightarrow>  \n                          a \\<preceq> (invfun (carrier D) (carrier D) f a)\") *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x;\n        x \\<preceq>\n        (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (frule_tac x = x in funcset_mem [of \"f\" \"carrier D\" \"carrier D\"], \n                          assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x;\n        x \\<preceq> (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x;\n        f x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (frule_tac a = x in ord_isom_mem[of  \"D\" \n              \"invfun (carrier D) (carrier D) f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x;\n        x \\<preceq> (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x;\n        f x \\<in> carrier D;\n        (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x\n        \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (frule_tac a = x and b = \"invfun (carrier D) (carrier D) f x\" in \n        ord_isom_le[of \"D\" \"f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        carrier D \\<subseteq> carrier D; x \\<preceq> f x;\n        x \\<preceq> (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x;\n        f x \\<in> carrier D;\n        (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x \\<in> carrier D;\n        x \\<preceq> (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x =\n        f x \\<preceq>\n        f ((f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x)\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        x \\<preceq> f x;\n        f x \\<preceq>\n        f ((f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x);\n        f x \\<in> carrier D;\n        (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x \\<in> carrier D;\n        x \\<preceq>\n        (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (frule ord_isom_bij_to[of \"D\" \"f\"], assumption+,\n        simp add:bij_to_def, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        x \\<preceq> f x;\n        f x \\<preceq>\n        f ((f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x);\n        f x \\<in> carrier D;\n        (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x \\<in> carrier D;\n        x \\<preceq> (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x;\n        surj_to f (carrier D) (carrier D); inj_on f (carrier D)\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (simp add:invfun_r[of \"f\" \"carrier D\" \"carrier D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ord_isom D D f; Order D;\n        ord_isom D D (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>);\n        f \\<in> carrier D \\<rightarrow> carrier D; x \\<in> carrier D;\n        x \\<preceq> f x; f x \\<preceq> x; f x \\<in> carrier D;\n        (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x \\<in> carrier D;\n        x \\<preceq> (f\\<inverse>\\<^bsub>carrier D,carrier D\\<^esub>) x;\n        surj_to f (carrier D) (carrier D); inj_on f (carrier D)\\<rbrakk>\n       \\<Longrightarrow> f x = x", "apply (rule_tac a = \"f x\" and b = x in le_antisym, \n              assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) isom_unique:\"\\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g\\<rbrakk>\n      \\<Longrightarrow> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g\\<rbrakk>\n    \\<Longrightarrow> f = g", "apply (frule Worder.Order[of \"E\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E\\<rbrakk>\n    \\<Longrightarrow> f = g", "apply (insert Order,\n     frule ord_isom_sym[of \"E\" \"g\"], assumption+,\n     frule ord_isom_trans [of \"E\" \"D\" \"f\"\n                             \"invfun (carrier D) (carrier E) g\"], assumption+,\n     frule ord_isom_func[of \"D\" \n      \"compose (carrier D) (invfun (carrier D) (carrier E) g) f\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom E D (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>);\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> f = g", "apply (frule ord_isom_self_id [of  \n     \"compose (carrier D) (invfun (carrier D) (carrier E) g) f\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom E D (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>);\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D)\\<rbrakk>\n    \\<Longrightarrow> f = g", "apply (thin_tac \"ord_isom E D (invfun (carrier D) (carrier E) g)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D)\\<rbrakk>\n    \\<Longrightarrow> f = g", "apply (cut_tac id_ord_isom, insert Order,\n        frule ord_isom_func[of \"D\" \"idmap (carrier D)\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D);\n     ord_isom D D (idmap (carrier D)); Order D;\n     idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> f = g", "apply (rule funcset_eq[of \"f\" \"carrier D\" \"g\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D);\n     ord_isom D D (idmap (carrier D)); Order D;\n     idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> f \\<in> extensional (carrier D)\n 2. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D);\n     ord_isom D D (idmap (carrier D)); Order D;\n     idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> g \\<in> extensional (carrier D)\n 3. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D);\n     ord_isom D D (idmap (carrier D)); Order D;\n     idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D. f x = g x", "apply (simp add:ord_isom_def ord_inj_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D);\n     ord_isom D D (idmap (carrier D)); Order D;\n     idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> g \\<in> extensional (carrier D)\n 2. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D);\n     ord_isom D D (idmap (carrier D)); Order D;\n     idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D. f x = g x", "apply (simp add:ord_isom_def ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n     ord_isom D D\n      (compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n        f);\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f\n     \\<in> carrier D \\<rightarrow> carrier D;\n     compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n      f =\n     idmap (carrier D);\n     ord_isom D D (idmap (carrier D)); Order D;\n     idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D. f x = g x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n        ord_isom D D\n         (compose (carrier D)\n           (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f);\n        compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n         f\n        \\<in> carrier D \\<rightarrow> carrier D;\n        compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n         f =\n        idmap (carrier D);\n        ord_isom D D (idmap (carrier D)); Order D;\n        idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply (frule_tac x = x in eq_funcs[of \n   \"compose (carrier D) (invfun (carrier D) (carrier E) g) f\"\n   \"carrier D\" \"carrier D\" \"idmap (carrier D)\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E; Order D;\n        ord_isom D D\n         (compose (carrier D)\n           (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) f);\n        compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n         f\n        \\<in> carrier D \\<rightarrow> carrier D;\n        compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n         f =\n        idmap (carrier D);\n        ord_isom D D (idmap (carrier D)); Order D;\n        idmap (carrier D) \\<in> carrier D \\<rightarrow> carrier D;\n        x \\<in> carrier D;\n        compose (carrier D) (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>)\n         f x =\n        idmap (carrier D) x\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply (frule_tac a = x in ord_isom_mem [of \"E\" \"f\"], assumption+,\n        thin_tac \" compose (carrier D) (invfun (carrier D) (carrier E) g) f =\n         idmap (carrier D)\", \n        simp add:idmap_def compose_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; ord_isom D E f; ord_isom D E g; Order E;\n        ord_isom D D\n         (\\<lambda>x\\<in>carrier D.\n             (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x));\n        (\\<lambda>x\\<in>carrier D.\n            (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x))\n        \\<in> carrier D \\<rightarrow> carrier D;\n        ord_isom D D (\\<lambda>x\\<in>carrier D. x); Order D;\n        x \\<in> carrier D;\n        (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x) = x;\n        f x \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply (simp add:ord_isom_def[of _ \"E\" \"g\"] ord_inj_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; ord_isom D E f; Order E;\n        ord_isom D D\n         (\\<lambda>x\\<in>carrier D.\n             (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x));\n        (\\<lambda>x\\<in>carrier D.\n            (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x))\n        \\<in> carrier D \\<rightarrow> carrier D;\n        ord_isom D D (\\<lambda>x\\<in>carrier D. x); Order D;\n        x \\<in> carrier D;\n        (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x) = x;\n        f x \\<in> carrier E; g \\<in> extensional (carrier D);\n        g \\<in> carrier D \\<rightarrow> carrier E; inj_on g (carrier D);\n        \\<forall>a\\<in>carrier D.\n           \\<forall>b\\<in>carrier D.\n              a \\<prec> b = g a \\<prec>\\<^bsub>E\\<^esub> g b;\n        surj_to g (carrier D) (carrier E)\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply (frule_tac b = \"f x\" in invfun_r[of \"g\" \"carrier D\" \"carrier E\"],\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E; ord_isom D E f; Order E;\n        ord_isom D D\n         (\\<lambda>x\\<in>carrier D.\n             (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x));\n        (\\<lambda>x\\<in>carrier D.\n            (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x))\n        \\<in> carrier D \\<rightarrow> carrier D;\n        ord_isom D D (\\<lambda>x\\<in>carrier D. x); Order D;\n        x \\<in> carrier D;\n        (g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x) = x;\n        f x \\<in> carrier E; g \\<in> extensional (carrier D);\n        g \\<in> carrier D \\<rightarrow> carrier E; inj_on g (carrier D);\n        \\<forall>a\\<in>carrier D.\n           \\<forall>b\\<in>carrier D.\n              a \\<prec> b = g a \\<prec>\\<^bsub>E\\<^esub> g b;\n        surj_to g (carrier D) (carrier E);\n        g ((g\\<inverse>\\<^bsub>carrier E,carrier D\\<^esub>) (f x)) =\n        f x\\<rbrakk>\n       \\<Longrightarrow> f x = g x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  segment :: \"_ \\<Rightarrow> 'a \\<Rightarrow> 'a set\" where\n  \"segment D a = (if a \\<notin> carrier D then carrier D else\n      {x.  x \\<prec>\\<^bsub>D\\<^esub> a \\<and> x \\<in> carrier D})\""], ["", "definition\n  Ssegment :: \"'a Order \\<Rightarrow> 'a \\<Rightarrow> 'a set\" where\n  \"Ssegment D a = (if a \\<notin> carrier D then carrier D else\n      {x.  x \\<prec>\\<^bsub>D\\<^esub> a \\<and> x \\<in> carrier D})\""], ["", "lemma (in Order) segment_sub:\"segment D a \\<subseteq> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment D a \\<subseteq> carrier D", "apply (rule subsetI, simp add:segment_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (if a \\<notin> carrier D then carrier D\n                else {x. x \\<prec> a \\<and>\n                         x \\<in> carrier D}) \\<Longrightarrow>\n       x \\<in> carrier D", "apply (case_tac \"a \\<notin> carrier D\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> (if a \\<notin> carrier D then carrier D\n                         else {x. x \\<prec> a \\<and> x \\<in> carrier D});\n        \\<not> a \\<notin> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply ( simp add:segment_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_sub:\"Ssegment D a \\<subseteq> carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ssegment D a \\<subseteq> carrier D", "by (rule subsetI, simp add:Ssegment_def,\n       case_tac \"a \\<notin> carrier D\", simp, simp add:Ssegment_def)"], ["", "lemma (in Order) segment_free:\"a \\<notin> carrier D \\<Longrightarrow> \n                 segment D a = carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow> segment D a = carrier D", "by (simp add:segment_def)"], ["", "lemma Ssegment_free:\"a \\<notin> carrier D \\<Longrightarrow> \n                 Ssegment D a = carrier D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> carrier D \\<Longrightarrow> Ssegment D a = carrier D", "by (simp add:Ssegment_def)"], ["", "lemma (in Order) segment_sub_sub:\"\\<lbrakk>S \\<subseteq> carrier D; d \\<in> S\\<rbrakk> \\<Longrightarrow> \n                                  segment (Iod D S) d \\<subseteq> segment D d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> carrier D; d \\<in> S\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D S) d \\<subseteq> segment D d", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S \\<subseteq> carrier D; d \\<in> S;\n        x \\<in> segment (Iod D S) d\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D d", "apply (frule_tac c = d in subsetD[of \"S\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S \\<subseteq> carrier D; d \\<in> S;\n        x \\<in> segment (Iod D S) d; d \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D d", "apply (simp add:segment_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S \\<subseteq> carrier D; d \\<in> S;\n        x \\<in> (if d \\<notin> carrier (Iod D S) then carrier (Iod D S)\n                 else {x. x \\<prec>\\<^bsub>Iod D S\\<^esub> d \\<and>\n                          x \\<in> carrier (Iod D S)});\n        d \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> d \\<and> x \\<in> carrier D", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S \\<subseteq> carrier D; d \\<in> S;\n        x \\<prec>\\<^bsub>Iod D S\\<^esub> d \\<and> x \\<in> S;\n        d \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> d \\<and> x \\<in> carrier D", "apply (erule conjE, simp add:Iod_less[of \"S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>S \\<subseteq> carrier D; d \\<in> S; d \\<in> carrier D;\n        x \\<prec> d; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_sub_sub:\"\\<lbrakk>Order D; S \\<subseteq> carrier D; d \\<in> S\\<rbrakk> \\<Longrightarrow> \n                                  Ssegment (SIod D S) d \\<subseteq> Ssegment D d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; S \\<subseteq> carrier D; d \\<in> S\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D S) d \\<subseteq> Ssegment D d", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; S \\<subseteq> carrier D; d \\<in> S;\n        x \\<in> Ssegment (SIod D S) d\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D d", "apply (frule_tac c = d in subsetD[of \"S\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; S \\<subseteq> carrier D; d \\<in> S;\n        x \\<in> Ssegment (SIod D S) d; d \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D d", "apply (simp add:Ssegment_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; S \\<subseteq> carrier D; d \\<in> S;\n        x \\<in> (if d \\<notin> carrier (SIod D S) then carrier (SIod D S)\n                 else {x. x \\<prec>\\<^bsub>SIod D S\\<^esub> d \\<and>\n                          x \\<in> carrier (SIod D S)});\n        d \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> d \\<and>\n                         x \\<in> carrier D", "apply (simp add:SIod_carrier, erule conjE, simp add:SIod_less[of \"S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; S \\<subseteq> carrier D; d \\<in> S;\n        d \\<in> carrier D; x \\<prec>\\<^bsub>D\\<^esub> d; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D", "apply (simp add:subsetD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) a_notin_segment:\"a \\<notin> segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> segment D a", "by (simp add:segment_def oless_def)"], ["", "lemma a_notin_Ssegment:\"a \\<notin> Ssegment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> Ssegment D a", "by (simp add:Ssegment_def oless_def)"], ["", "lemma (in Order) Iod_carr_segment:\n       \"carrier (Iod D (segment D a)) = segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (Iod D (segment D a)) = segment D a", "by (cut_tac segment_sub[of \"a\"], simp add:Iod_carrier)"], ["", "lemma SIod_carr_Ssegment:\"Order D \\<Longrightarrow>\n        carrier (SIod D (Ssegment D a)) = Ssegment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order D \\<Longrightarrow> carrier (SIod D (Ssegment D a)) = Ssegment D a", "apply (cut_tac Ssegment_sub[of \"D\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Ssegment D a \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> carrier (SIod D (Ssegment D a)) = Ssegment D a", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) segment_inc:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<prec> b) = (a \\<in> segment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b = (a \\<in> segment D b)", "by (simp add:segment_def)"], ["", "lemma Ssegment_inc:\"\\<lbrakk>Order D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<prec>\\<^bsub>D\\<^esub> b) = (a \\<in> Ssegment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b = (a \\<in> Ssegment D b)", "by (simp add:Ssegment_def)"], ["", "lemma (in Order) segment_inc1:\"b \\<in> carrier D \\<Longrightarrow>\n                  (a \\<prec> b \\<and> a \\<in> carrier D) = (a \\<in> segment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> carrier D \\<Longrightarrow>\n    (a \\<prec> b \\<and> a \\<in> carrier D) = (a \\<in> segment D b)", "by (simp add:segment_def)"], ["", "lemma Ssegment_inc1:\"\\<lbrakk>Order D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<prec>\\<^bsub>D\\<^esub> b \\<and> a \\<in> carrier D) = (a \\<in> Ssegment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (a \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n                       a \\<in> carrier D) =\n                      (a \\<in> Ssegment D b)", "by (simp add:Ssegment_def)"], ["", "lemma (in Order) segment_inc_if:\"\\<lbrakk>b \\<in> carrier D;a \\<in> segment D b\\<rbrakk> \\<Longrightarrow>\n                                         a \\<prec> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "by (simp add:segment_def)"], ["", "lemma Ssegment_inc_if:\"\\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk> \\<Longrightarrow>\n                                         a \\<prec>\\<^bsub>D\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "by (simp add:Ssegment_def)"], ["", "lemma (in Order) segment_inc_less:\"\\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D;\n       y \\<in> W; x \\<in> segment (Iod D W) a; y \\<prec> x\\<rbrakk> \\<Longrightarrow> y \\<in> segment (Iod D W) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x\\<rbrakk>\n    \\<Longrightarrow> y \\<in> segment (Iod D W) a", "apply (frule Iod_Order[of \"W\"],\n       frule Order.segment_sub[of \"Iod D W\" \"a\"],\n       frule subsetD[of \"segment (Iod D W) a\" \"carrier (Iod D W)\" x],\n              assumption+, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W\\<rbrakk>\n    \\<Longrightarrow> y \\<in> segment (Iod D W) a", "apply (case_tac \"a \\<in> carrier (Iod D W)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W;\n     a \\<in> carrier (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> segment (Iod D W) a\n 2. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W;\n     a \\<notin> carrier (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> segment (Iod D W) a", "apply (subst Order.segment_inc[THEN sym, of \"Iod D W\" \"y\" \"a\"], assumption,\n       simp add:Iod_carrier, simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W;\n     a \\<in> carrier (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> y \\<prec>\\<^bsub>Iod D W\\<^esub> a\n 2. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W;\n     a \\<notin> carrier (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> segment (Iod D W) a", "apply (simp add:Iod_carrier, simp add:Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W; a \\<in> W\\<rbrakk>\n    \\<Longrightarrow> y \\<prec> a\n 2. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W;\n     a \\<notin> carrier (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> segment (Iod D W) a", "apply (rule less_trans[of y x a], (simp add:subsetD)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>W \\<subseteq> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; a \\<in> W\\<rbrakk>\n    \\<Longrightarrow> x \\<prec> a\n 2. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W;\n     a \\<notin> carrier (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> segment (Iod D W) a", "apply (frule Order.segment_inc[THEN sym, of \"Iod D W\" \"x\" \"a\"],\n       (simp add:Iod_carrier)+,\n       frule_tac Order.segment_sub[of \"Iod D W\" x],\n       frule subsetD[of \"segment (Iod D W) a\" \"W\" \"x\"], assumption+, \n       simp add:Iod_carrier,\n       frule_tac subsetD[of \"segment (Iod D W) a\" W x], assumption+,\n       simp add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>W \\<subseteq> carrier D; a \\<in> carrier D; y \\<in> W;\n     x \\<in> segment (Iod D W) a; y \\<prec> x; Order (Iod D W);\n     segment (Iod D W) a \\<subseteq> W; x \\<in> W;\n     a \\<notin> carrier (Iod D W)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> segment (Iod D W) a", "apply (simp add:Order.segment_free[of \"Iod D W\" a], simp add:Iod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) segment_order_less:\"\\<forall>b\\<in>carrier D. \\<forall>x\\<in> segment D b. \\<forall>y\\<in> segment D b. (x \\<prec> y) = (x \\<prec>\\<^bsub>(Iod D (segment D b))\\<^esub> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>carrier D.\n       \\<forall>x\\<in>segment D b.\n          \\<forall>y\\<in>segment D b.\n             x \\<prec> y = x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> y", "by ((rule ballI)+, \n        cut_tac a = b in segment_sub, simp add:Iod_less)"], ["", "lemma Ssegment_order_less:\"Order D \\<Longrightarrow> \n      \\<forall>b\\<in>carrier D. \\<forall>x\\<in> Ssegment D b. \\<forall>y\\<in> Ssegment D b. \n                  (x \\<prec>\\<^bsub>D\\<^esub> y) = (x \\<prec>\\<^bsub>(SIod D (Ssegment D b))\\<^esub> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Order D \\<Longrightarrow>\n    \\<forall>b\\<in>carrier D.\n       \\<forall>x\\<in>Ssegment D b.\n          \\<forall>y\\<in>Ssegment D b.\n             x \\<prec>\\<^bsub>D\\<^esub> y =\n             x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> y", "by ((rule ballI)+, \n        cut_tac a = b in Ssegment_sub[of \"D\"], simp add:SIod_less)"], ["", "lemma (in Order) segment_order_le:\"\\<forall>b\\<in>carrier D. \\<forall>x\\<in> segment D b. \n      \\<forall>y\\<in> segment D b. (x \\<preceq> y) = (x \\<preceq>\\<^bsub>(Iod D (segment D b))\\<^esub> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>carrier D.\n       \\<forall>x\\<in>segment D b.\n          \\<forall>y\\<in>segment D b.\n             x \\<preceq> y =\n             x \\<preceq>\\<^bsub>Iod D (segment D b)\\<^esub> y", "by ((rule ballI)+, \n        cut_tac a = b in segment_sub, simp add:Iod_le)"], ["", "lemma Ssegment_order_le:\"\\<forall>b\\<in>carrier D. \\<forall>x\\<in> Ssegment D b. \n      \\<forall>y\\<in> Ssegment D b. (x \\<preceq>\\<^bsub>D\\<^esub> y) = (x \\<preceq>\\<^bsub>(SIod D (Ssegment D b))\\<^esub> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>carrier D.\n       \\<forall>x\\<in>Ssegment D b.\n          \\<forall>y\\<in>Ssegment D b.\n             x \\<preceq>\\<^bsub>D\\<^esub> y =\n             x \\<preceq>\\<^bsub>SIod D (Ssegment D b)\\<^esub> y", "by ((rule ballI)+, \n        cut_tac a = b in Ssegment_sub[of \"D\"], simp add:SIod_le)"], ["", "lemma (in Torder) Iod_Torder:\"X \\<subseteq> carrier D \\<Longrightarrow> Torder (Iod D X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> carrier D \\<Longrightarrow> Torder (Iod D X)", "apply (rule Torder.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. X \\<subseteq> carrier D \\<Longrightarrow> Order (Iod D X)\n 2. X \\<subseteq> carrier D \\<Longrightarrow> Torder_axioms (Iod D X)", "apply (simp add:Iod_Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq> carrier D \\<Longrightarrow> Torder_axioms (Iod D X)", "apply (rule Torder_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> carrier (Iod D X);\n        b \\<in> carrier (Iod D X)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>Iod D X\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>Iod D X\\<^esub> a", "apply (simp add:Iod_carrier Iod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> X; b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<or> b \\<preceq> a", "apply (meson contra_subsetD le_cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma  SIod_Torder:\"\\<lbrakk>Torder D; X \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> Torder (SIod D X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D X)", "apply (simp add:Torder_def, simp add:SIod_Order, simp add:Torder_axioms_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D \\<and>\n             (\\<forall>a.\n                 a \\<in> carrier D \\<longrightarrow>\n                 (\\<forall>b.\n                     b \\<in> carrier D \\<longrightarrow>\n                     a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                     b \\<preceq>\\<^bsub>D\\<^esub> a));\n     X \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         a \\<in> carrier (SIod D X) \\<longrightarrow>\n                         (\\<forall>b.\n                             b \\<in> carrier (SIod D X) \\<longrightarrow>\n                             a \\<preceq>\\<^bsub>SIod D X\\<^esub> b \\<or>\n                             b \\<preceq>\\<^bsub>SIod D X\\<^esub> a)", "apply ((rule allI, rule impI)+, \n       simp add:SIod_carrier SIod_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Order D \\<and>\n                (\\<forall>a.\n                    a \\<in> carrier D \\<longrightarrow>\n                    (\\<forall>b.\n                        b \\<in> carrier D \\<longrightarrow>\n                        a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                        b \\<preceq>\\<^bsub>D\\<^esub> a));\n        X \\<subseteq> carrier D; a \\<in> X; b \\<in> X\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> a", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> X; b \\<in> X; Order D;\n        \\<forall>a.\n           a \\<in> carrier D \\<longrightarrow>\n           (\\<forall>b.\n               b \\<in> carrier D \\<longrightarrow>\n               a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n               b \\<preceq>\\<^bsub>D\\<^esub> a)\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> a", "apply (frule_tac c = a in subsetD[of \"X\" \"carrier D\"], assumption+,\n        frule_tac c = b in subsetD[of \"X\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>X \\<subseteq> carrier D; a \\<in> X; b \\<in> X; Order D;\n        \\<forall>a.\n           a \\<in> carrier D \\<longrightarrow>\n           (\\<forall>b.\n               b \\<in> carrier D \\<longrightarrow>\n               a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n               b \\<preceq>\\<^bsub>D\\<^esub> a);\n        a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b \\<or>\n                         b \\<preceq>\\<^bsub>D\\<^esub> a", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) segment_not_inc:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n      a \\<prec> b\\<rbrakk> \\<Longrightarrow> b \\<notin> segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> segment D a", "apply (rule contrapos_pp, simp+, simp add:segment_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b;\n     b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:oless_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     a \\<noteq> b; b \\<preceq> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule le_antisym[of \"a\" \"b\"], assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_not_inc:\"\\<lbrakk>Order D; a \\<in> carrier D; b \\<in> carrier D; a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk> \\<Longrightarrow> \n               b \\<notin> Ssegment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> Ssegment D a", "apply (rule contrapos_pp, simp+, simp add:Ssegment_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<prec>\\<^bsub>D\\<^esub> b; b \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:oless_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq>\\<^bsub>D\\<^esub> b; a \\<noteq> b;\n     b \\<preceq>\\<^bsub>D\\<^esub> a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule Order.le_antisym[of \"D\" \"a\" \"b\"], assumption+, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_not_inc_iff:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<preceq> b) =  (b \\<notin> segment D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b = (b \\<notin> segment D a)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> segment D a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     b \\<notin> segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "apply (simp add:le_imp_less_or_eq,\n        erule disjE, simp add:segment_not_inc, simp add:a_notin_segment)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     b \\<notin> segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "apply (simp add:segment_def, simp add:not_less_le[THEN sym, of \"b\" \"a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_not_inc_iff:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                  (a \\<preceq>\\<^bsub>D\\<^esub> b) =  (b \\<notin> Ssegment D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (b \\<notin> Ssegment D a)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     b \\<notin> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b", "apply (frule Torder.Order[of \"D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq>\\<^bsub>D\\<^esub> b; Order D\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     b \\<notin> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b", "apply (simp add:Order.le_imp_less_or_eq,\n        erule disjE, rule Ssegment_not_inc, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     b \\<notin> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b", "apply (simp add: a_notin_Ssegment)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     b \\<notin> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b", "apply (simp add:Ssegment_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     \\<not> b \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b", "apply ( simp add:Torder.not_less_le[THEN sym, of \"D\" \"b\" \"a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) minimum_segment_of_sub:\"\\<lbrakk>X \\<subseteq> carrier D; \n       minimum_elem D (segment (Iod D X) d) m \\<rbrakk> \\<Longrightarrow> minimum_elem D X m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m", "apply (case_tac \"d \\<notin> carrier (Iod D X)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m;\n     d \\<notin> carrier (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m\n 2. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m;\n     \\<not> d \\<notin> carrier (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m", "apply (simp add:segment_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; minimum_elem D (carrier (Iod D X)) m;\n     d \\<notin> carrier (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m\n 2. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m;\n     \\<not> d \\<notin> carrier (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m;\n     \\<not> d \\<notin> carrier (Iod D X)\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m; d \\<in> X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m", "apply (subst minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m; d \\<in> X\\<rbrakk>\n    \\<Longrightarrow> m \\<in> X \\<and> Ball X ((\\<preceq>) m)", "apply (frule Iod_Order[of \"X\"],\n       frule Order.segment_sub[of \"Iod D X\" \"d\"],\n       simp add:Iod_carrier,\n       frule subset_trans[of \"segment (Iod D X) d\" \"X\" \"carrier D\"],\n       assumption+,\n       frule minimum_elem_mem[of \"segment (Iod D X) d\" m], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m; d \\<in> X; Order (Iod D X);\n     segment (Iod D X) d \\<subseteq> X;\n     segment (Iod D X) d \\<subseteq> carrier D;\n     m \\<in> segment (Iod D X) d\\<rbrakk>\n    \\<Longrightarrow> m \\<in> X \\<and> (\\<forall>x\\<in>X. m \\<preceq> x)", "apply (simp add:subsetD[of \"segment (Iod D X) d\" \"X\" m])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D;\n     minimum_elem D (segment (Iod D X) d) m; d \\<in> X; Order (Iod D X);\n     segment (Iod D X) d \\<subseteq> X;\n     segment (Iod D X) d \\<subseteq> carrier D;\n     m \\<in> segment (Iod D X) d\\<rbrakk>\n    \\<Longrightarrow> Ball X ((\\<preceq>) m)", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        minimum_elem D (segment (Iod D X) d) m; d \\<in> X; Order (Iod D X);\n        segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (case_tac \"x \\<in> segment (Iod D X) d\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<in> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (frule_tac a1 = x in Order.segment_inc[THEN sym, of \"Iod D X\" _ d])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<in> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D X)\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<in> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> d \\<in> carrier (Iod D X)\n 3. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X; x \\<in> segment (Iod D X) d;\n        (x \\<in> segment (Iod D X) d) =\n        x \\<prec>\\<^bsub>Iod D X\\<^esub> d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 4. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:Iod_carrier subsetD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<in> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> d \\<in> carrier (Iod D X)\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X; x \\<in> segment (Iod D X) d;\n        (x \\<in> segment (Iod D X) d) =\n        x \\<prec>\\<^bsub>Iod D X\\<^esub> d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 3. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X; x \\<in> segment (Iod D X) d;\n        (x \\<in> segment (Iod D X) d) =\n        x \\<prec>\\<^bsub>Iod D X\\<^esub> d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (frule Iod_Torder[of \"X\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d; Torder (Iod D X)\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (frule_tac b1 = x in Torder.segment_not_inc_iff[THEN sym, \n                of \"Iod D X\" d])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d; Torder (Iod D X)\\<rbrakk>\n       \\<Longrightarrow> d \\<in> carrier (Iod D X)\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d; Torder (Iod D X)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D X)\n 3. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d; Torder (Iod D X);\n        (x \\<notin> segment (Iod D X) d) =\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d; Torder (Iod D X)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D X)\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d; Torder (Iod D X);\n        (x \\<notin> segment (Iod D X) d) =\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        Ball (segment (Iod D X) d) ((\\<preceq>) m); d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        x \\<notin> segment (Iod D X) d; Torder (Iod D X);\n        (x \\<notin> segment (Iod D X) d) =\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        x \\<notin> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (frule Order.segment_inc[THEN sym, of \"Iod D X\" m d],\n        thin_tac \"x \\<notin> segment (Iod D X) d\",\n        frule Order.segment_sub[of \"Iod D X\" \"d\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        segment (Iod D X) d \\<subseteq> carrier (Iod D X)\\<rbrakk>\n       \\<Longrightarrow> m \\<in> carrier (Iod D X)\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        x \\<notin> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> d \\<in> carrier (Iod D X)\n 3. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        x \\<notin> segment (Iod D X) d;\n        (m \\<in> segment (Iod D X) d) =\n        m \\<prec>\\<^bsub>Iod D X\\<^esub> d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:Iod_carrier subsetD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        x \\<notin> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> d \\<in> carrier (Iod D X)\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        x \\<notin> segment (Iod D X) d;\n        (m \\<in> segment (Iod D X) d) =\n        m \\<prec>\\<^bsub>Iod D X\\<^esub> d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<in> segment (Iod D X) d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        x \\<notin> segment (Iod D X) d;\n        (m \\<in> segment (Iod D X) d) =\n        m \\<prec>\\<^bsub>Iod D X\\<^esub> d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<prec>\\<^bsub>Iod D X\\<^esub> d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        x \\<notin> segment (Iod D X) d; m \\<in> segment (Iod D X) d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (frule subsetD[of \"segment (Iod D X) d\" \"X\" m], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D;\n        m \\<prec>\\<^bsub>Iod D X\\<^esub> d; x \\<in> X;\n        d \\<preceq>\\<^bsub>Iod D X\\<^esub> x; Torder (Iod D X);\n        x \\<notin> segment (Iod D X) d; m \\<in> segment (Iod D X) d;\n        m \\<in> X\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:Iod_le Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D; m \\<prec> d; x \\<in> X;\n        d \\<preceq> x; Torder (Iod D X); x \\<notin> segment (Iod D X) d;\n        m \\<in> segment (Iod D X) d; m \\<in> X\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (frule subsetD[of X \"carrier D\" m], assumption+,\n        frule subsetD[of X \"carrier D\" d], assumption+,\n        frule_tac c = x in subsetD[of X \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D; m \\<prec> d; x \\<in> X;\n        d \\<preceq> x; Torder (Iod D X); x \\<notin> segment (Iod D X) d;\n        m \\<in> segment (Iod D X) d; m \\<in> X; m \\<in> carrier D;\n        d \\<in> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (frule_tac c = x in less_le_trans[of m d], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D;\n        \\<forall>x\\<in>segment (Iod D X) d. m \\<preceq> x; d \\<in> X;\n        Order (Iod D X); segment (Iod D X) d \\<subseteq> X;\n        segment (Iod D X) d \\<subseteq> carrier D; m \\<prec> d; x \\<in> X;\n        d \\<preceq> x; Torder (Iod D X); x \\<notin> segment (Iod D X) d;\n        m \\<in> segment (Iod D X) d; m \\<in> X; m \\<in> carrier D;\n        d \\<in> carrier D; x \\<in> carrier D; m \\<prec> x\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x", "apply (simp add:less_imp_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_out:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; \n      a \\<prec> b\\<rbrakk> \\<Longrightarrow> segment (Iod D (segment D a)) b = segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D a)) b = segment D a", "apply (subst segment_def[of \"Iod D (segment D a)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> (if b \\<notin> carrier (Iod D (segment D a))\n                       then carrier (Iod D (segment D a))\n                       else {x. x \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                                b \\<and>\n                                x \\<in> carrier (Iod D (segment D a))}) =\n                      segment D a", "apply (frule segment_not_inc[of \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b;\n     b \\<notin> segment D a\\<rbrakk>\n    \\<Longrightarrow> (if b \\<notin> carrier (Iod D (segment D a))\n                       then carrier (Iod D (segment D a))\n                       else {x. x \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                                b \\<and>\n                                x \\<in> carrier (Iod D (segment D a))}) =\n                      segment D a", "apply (cut_tac segment_sub[of  \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b;\n     b \\<notin> segment D a; segment D a \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> (if b \\<notin> carrier (Iod D (segment D a))\n                       then carrier (Iod D (segment D a))\n                       else {x. x \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                                b \\<and>\n                                x \\<in> carrier (Iod D (segment D a))}) =\n                      segment D a", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_minimum_minimum:\"\\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n       minimum_elem (Iod D (segment D d)) (X \\<inter> (segment D d)) m\\<rbrakk> \\<Longrightarrow>\n       minimum_elem D X m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m", "apply (cut_tac segment_sub[of d])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X m", "apply (subst minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> m \\<in> X \\<and> Ball X ((\\<preceq>) m)", "apply (cut_tac Order.minimum_elem_mem[of \"Iod D (segment D d)\" \n                          \"X \\<inter> (segment D d)\" m])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D;\n     m \\<in> X \\<inter> segment D d\\<rbrakk>\n    \\<Longrightarrow> m \\<in> X \\<and> Ball X ((\\<preceq>) m)\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (cut_tac Int_lower1[of X \"segment D d\"],\n       frule_tac subsetD[of \"X \\<inter> segment D d\" X m], assumption+, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D; m \\<in> segment D d;\n     m \\<in> X\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>X. m \\<preceq> x\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (rule ballI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (case_tac \"x \\<in> segment D d\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X; x \\<in> segment D d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X; x \\<notin> segment D d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 5. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        Ball (X \\<inter> segment D d)\n         ((\\<preceq>\\<^bsub>Iod D (segment D d)\\<^esub>) m);\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X; x \\<in> segment D d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X; x \\<notin> segment D d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 5. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (drule_tac x = x in bspec,\n     (* thin_tac \"Ball (X \\<inter> segment D d) ((\\<preceq>\\<^bsub>Iod) D (segment D d)\\<^esub> m)\", *)\n        simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X; x \\<in> segment D d;\n        m \\<preceq>\\<^bsub>Iod D (segment D d)\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X; x \\<notin> segment D d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 5. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (\n        simp add:Iod_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X; x \\<notin> segment D d\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (frule subsetD[of X \"carrier D\" d], assumption+,\n        frule subsetD[of X \"carrier D\" m], assumption+,\n        frule_tac c = x in subsetD[of X \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<in> segment D d; m \\<in> X;\n        x \\<in> X; x \\<notin> segment D d; d \\<in> carrier D;\n        m \\<in> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (simp add:segment_inc[THEN sym, of _ d],\n        simp add:not_less_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<prec> d; m \\<in> X;\n        x \\<in> X; d \\<preceq> x; d \\<in> carrier D; m \\<in> carrier D;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (frule_tac c = x in less_le_trans[of m d], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n        segment D d \\<subseteq> carrier D; m \\<prec> d; m \\<in> X;\n        x \\<in> X; d \\<preceq> x; d \\<in> carrier D; m \\<in> carrier D;\n        x \\<in> carrier D; m \\<prec> x\\<rbrakk>\n       \\<Longrightarrow> m \\<preceq> x\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 4. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (simp add:less_imp_le)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Order (Iod D (segment D d))\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 3. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (simp add:Iod_Order)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> X \\<inter> segment D d\n                      \\<subseteq> carrier (Iod D (segment D d))\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     minimum_elem (Iod D (segment D d)) (X \\<inter> segment D d) m;\n     segment D d \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> minimum_elem (Iod D (segment D d))\n                       (X \\<inter> segment D d) m", "apply (simp add:Int_lower2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_mono:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<prec> b) = (segment D a \\<subset> segment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b = (segment D a \\<subset> segment D b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subset> segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subset> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (rule psubsetI, rule subsetI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b;\n        x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<noteq> segment D b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subset> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:segment_def, erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b;\n        x \\<prec> a; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<noteq> segment D b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subset> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (rule_tac a = x and b = a and c = b in less_trans,\n          assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<noteq> segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subset> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (cut_tac a_notin_segment[of \"a\"],\n        simp add:segment_inc[of \"a\" \"b\"], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subset> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:psubset_eq, erule conjE,\n       frule not_sym[of \"segment D a\" \"segment D b\"],\n       thin_tac \"segment D a \\<noteq> segment D b\",\n       frule sets_not_eq[of \"segment D b\" \"segment D a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> segment D b; segment D b \\<noteq> segment D a;\n     \\<exists>aa\\<in>segment D b. aa \\<notin> segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D a \\<subseteq> segment D b;\n        segment D b \\<noteq> segment D a; aa \\<in> segment D b;\n        aa \\<notin> segment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b", "apply (thin_tac \"segment D a \\<subseteq> segment D b\", \n        thin_tac \"segment D b \\<noteq> segment D a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; aa \\<in> segment D b;\n        aa \\<notin> segment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b", "apply (simp add:segment_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; \\<not> aa \\<prec> a;\n        aa \\<prec> b; aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b", "apply (frule_tac  a = aa and b = a in not_less_le, assumption+,\n        simp, simp add:oless_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> aa;\n        aa \\<in> carrier D; aa \\<preceq> a \\<longrightarrow> aa = a;\n        aa \\<preceq> b; aa \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq> b \\<and> a \\<noteq> b", "apply (frule_tac a = a and b = aa and c = b in le_trans,\n        assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> aa;\n        aa \\<in> carrier D; aa \\<preceq> a \\<longrightarrow> aa = a;\n        aa \\<preceq> b; aa \\<noteq> b; a \\<preceq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> b", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_mono:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<prec>\\<^bsub>D\\<^esub> b) = (Ssegment D a \\<subset> Ssegment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b =\n                      (Ssegment D a \\<subset> Ssegment D b)", "apply (frule Torder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     Order D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b =\n                      (Ssegment D a \\<subset> Ssegment D b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subset> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subset> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (rule psubsetI, rule subsetI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<noteq> Ssegment D b\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subset> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (simp add:Ssegment_def, erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<noteq> Ssegment D b\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subset> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (rule_tac a = x and b = a and c = b in Order.less_trans,\n          assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<noteq> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subset> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (cut_tac a_notin_Ssegment[of \"a\"],\n        simp add:Ssegment_inc[of \"D\" \"a\" \"b\"], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subset> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (simp add:psubset_eq, erule conjE,\n       frule not_sym[of \"Ssegment D a\" \"Ssegment D b\"],\n       thin_tac \"Ssegment D a \\<noteq> Ssegment D b\",\n       frule sets_not_eq[of \"Ssegment D b\" \"Ssegment D a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D b \\<noteq> Ssegment D a;\n     \\<exists>aa\\<in>Ssegment D b. aa \\<notin> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        Ssegment D a \\<subseteq> Ssegment D b;\n        Ssegment D b \\<noteq> Ssegment D a; aa \\<in> Ssegment D b;\n        aa \\<notin> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (thin_tac \"Ssegment D a \\<subseteq> Ssegment D b\", \n        thin_tac \"Ssegment D b \\<noteq> Ssegment D a\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        aa \\<in> Ssegment D b; aa \\<notin> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (simp add:Ssegment_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        \\<not> aa \\<prec>\\<^bsub>D\\<^esub> a; aa \\<prec>\\<^bsub>D\\<^esub> b;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b", "apply (frule_tac  a = aa and b = a in Torder.not_less_le, assumption+,\n        simp, simp add:oless_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<preceq>\\<^bsub>D\\<^esub> aa; aa \\<in> carrier D;\n        aa \\<preceq>\\<^bsub>D\\<^esub> a \\<longrightarrow> aa = a;\n        aa \\<preceq>\\<^bsub>D\\<^esub> b; aa \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b \\<and> a \\<noteq> b", "apply (frule_tac a = a and b = aa and c = b in Order.le_trans,\n        assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<preceq>\\<^bsub>D\\<^esub> aa; aa \\<in> carrier D;\n        aa \\<preceq>\\<^bsub>D\\<^esub> a \\<longrightarrow> aa = a;\n        aa \\<preceq>\\<^bsub>D\\<^esub> b; aa \\<noteq> b;\n        a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> a \\<noteq> b", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_le_mono:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<preceq> b) = (segment D a \\<subseteq> segment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b = (segment D a \\<subseteq> segment D b)", "apply (simp add:le_imp_less_or_eq[of \"a\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (a \\<prec> b \\<or> a = b) =\n                      (segment D a \\<subseteq> segment D b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     a \\<prec> b \\<or> a = b\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b \\<or> a = b", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a = b\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> segment D b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b \\<or> a = b", "apply (simp add:segment_mono[of \"a\" \"b\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b \\<or> a = b", "apply (frule segment_mono[THEN sym, of \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> segment D b;\n     (segment D a \\<subset> segment D b) = a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b \\<or> a = b", "apply (simp add:psubset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> segment D b;\n     (segment D a \\<noteq> segment D b) = a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b \\<or> a = b", "apply (case_tac \"segment D a \\<noteq> segment D b\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> segment D b;\n     (segment D a \\<noteq> segment D b) = a \\<prec> b;\n     \\<not> segment D a \\<noteq> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b \\<or> a = b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; \\<not> a \\<prec> b;\n     segment D a = segment D b\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (rule contrapos_pp, simp+,\n        frule less_linear[of \"a\" \"b\"], assumption+, simp,\n        simp add:segment_mono[of \"b\" \"a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_le_mono:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<preceq>\\<^bsub>D\\<^esub> b) = (Ssegment D a \\<subseteq> Ssegment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment D a \\<subseteq> Ssegment D b)", "apply (cut_tac Torder.Order[of \"D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     Order D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment D a \\<subseteq> Ssegment D b)\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (simp add:Order.le_imp_less_or_eq[of \"D\" \"a\" \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     Order D\\<rbrakk>\n    \\<Longrightarrow> (a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b) =\n                      (Ssegment D a \\<subseteq> Ssegment D b)\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (rule iffI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> Ssegment D b\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 4. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (simp add: Ssegment_mono[of \"D\" \"a\" \"b\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (frule Ssegment_mono[THEN sym, of \"D\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D; a = b;\n     (Ssegment D a \\<subset> Ssegment D b) =\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (simp add:psubset_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (case_tac \"Ssegment D a \\<noteq> Ssegment D b\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D a \\<noteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     \\<not> Ssegment D a \\<noteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (cut_tac Ssegment_mono[THEN sym, of \"D\" \"a\" \"b\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D a \\<noteq> Ssegment D b;\n     (Ssegment D a \\<subset> Ssegment D b) =\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D a \\<noteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Torder D\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D a \\<noteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 4. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D a \\<noteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> b \\<in> carrier D\n 5. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     \\<not> Ssegment D a \\<noteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 6. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (simp add:psubset_eq, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     \\<not> Ssegment D a \\<noteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a = Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (cut_tac a_notin_Ssegment[of \"a\" \"D\"], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a = Ssegment D b; a \\<notin> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (simp add:Ssegment_not_inc_iff[THEN sym, of \"D\" \"b\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D a = Ssegment D b; b \\<preceq>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (frule sym, thin_tac \"Ssegment D a = Ssegment D b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     b \\<preceq>\\<^bsub>D\\<^esub> a; Ssegment D b = Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (cut_tac a_notin_Ssegment[of \"b\" \"D\"], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     b \\<preceq>\\<^bsub>D\\<^esub> a; Ssegment D b = Ssegment D a;\n     b \\<notin> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (simp add:Ssegment_not_inc_iff[THEN sym, of \"D\" \"a\" \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     b \\<preceq>\\<^bsub>D\\<^esub> a; Ssegment D b = Ssegment D a;\n     a \\<preceq>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (frule Order.le_antisym[of \"D\" \"a\" \"b\"], assumption+, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_inj:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a = b) = (segment D a = segment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (a = b) = (segment D a = segment D b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a = b\\<rbrakk>\n    \\<Longrightarrow> segment D a = segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a = segment D b\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a = segment D b\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (rule equalityE[of \"segment D a\" \"segment D b\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a = segment D b; segment D a \\<subseteq> segment D b;\n     segment D b \\<subseteq> segment D a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (thin_tac \"segment D a = segment D b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> segment D b;\n     segment D b \\<subseteq> segment D a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (simp add:segment_le_mono[THEN sym, of  \"a\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     segment D b \\<subseteq> segment D a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (simp add:segment_le_mono[THEN sym, of  \"b\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n     b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (simp add:le_antisym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_inj:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a = b) = (Ssegment D a = Ssegment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (a = b) = (Ssegment D a = Ssegment D b)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; a = b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a = Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     Ssegment D a = Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     Ssegment D a = Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (rule equalityE[of \"Ssegment D a\" \"Ssegment D b\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     Ssegment D a = Ssegment D b; Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D b \\<subseteq> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (thin_tac \"Ssegment D a = Ssegment D b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D b \\<subseteq> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (simp add:Ssegment_le_mono[THEN sym, of \"D\" \"a\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq>\\<^bsub>D\\<^esub> b;\n     Ssegment D b \\<subseteq> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (simp add:Ssegment_le_mono[THEN sym, of  \"D\" \"b\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq>\\<^bsub>D\\<^esub> b; b \\<preceq>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (cut_tac Torder.Order[of \"D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq>\\<^bsub>D\\<^esub> b; b \\<preceq>\\<^bsub>D\\<^esub> a;\n     Order D\\<rbrakk>\n    \\<Longrightarrow> a = b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<preceq>\\<^bsub>D\\<^esub> b; b \\<preceq>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> Torder D", "apply (simp add:Order.le_antisym, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_inj_neq:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<noteq> b) = (segment D a \\<noteq> segment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (a \\<noteq> b) = (segment D a \\<noteq> segment D b)", "by (simp add:segment_inj)"], ["", "lemma Ssegment_inj_neq:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                       (a \\<noteq> b) = (Ssegment D a \\<noteq> Ssegment D b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (a \\<noteq> b) = (Ssegment D a \\<noteq> Ssegment D b)", "by (simp add:Ssegment_inj)"], ["", "lemma (in Order) segment_inc_psub:\"\\<lbrakk>x \\<in> segment D a\\<rbrakk> \\<Longrightarrow>\n                                            segment D x \\<subset> segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> segment D a \\<Longrightarrow> segment D x \\<subset> segment D a", "apply (simp add:psubset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> segment D a \\<Longrightarrow>\n    segment D x \\<subseteq> segment D a \\<and>\n    segment D x \\<noteq> segment D a", "apply (rule conjI, rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> segment D a; xa \\<in> segment D x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> segment D a\n 2. x \\<in> segment D a \\<Longrightarrow> segment D x \\<noteq> segment D a", "apply (simp add:segment_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> (if a \\<notin> carrier D then carrier D\n                         else {x. x \\<prec> a \\<and> x \\<in> carrier D});\n        xa \\<in> (if x \\<notin> carrier D then carrier D\n                  else {xa.\n                        xa \\<prec> x \\<and> xa \\<in> carrier D})\\<rbrakk>\n       \\<Longrightarrow> (a \\<notin> carrier D \\<longrightarrow>\n                          xa \\<in> carrier D) \\<and>\n                         (a \\<in> carrier D \\<longrightarrow>\n                          xa \\<prec> a \\<and> xa \\<in> carrier D)\n 2. x \\<in> segment D a \\<Longrightarrow> segment D x \\<noteq> segment D a", "apply (case_tac \"a \\<notin> carrier D\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> (if a \\<notin> carrier D then carrier D\n                         else {x. x \\<prec> a \\<and> x \\<in> carrier D});\n        xa \\<in> (if x \\<notin> carrier D then carrier D\n                  else {xa. xa \\<prec> x \\<and> xa \\<in> carrier D});\n        \\<not> a \\<notin> carrier D\\<rbrakk>\n       \\<Longrightarrow> (a \\<notin> carrier D \\<longrightarrow>\n                          xa \\<in> carrier D) \\<and>\n                         (a \\<in> carrier D \\<longrightarrow>\n                          xa \\<prec> a \\<and> xa \\<in> carrier D)\n 2. x \\<in> segment D a \\<Longrightarrow> segment D x \\<noteq> segment D a", "apply (simp, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>a \\<in> carrier D; x \\<prec> a; x \\<in> carrier D;\n        xa \\<prec> x; xa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec> a\n 2. x \\<in> segment D a \\<Longrightarrow> segment D x \\<noteq> segment D a", "apply (rule_tac a = xa and b = x and c = a in less_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> segment D a \\<Longrightarrow> segment D x \\<noteq> segment D a", "apply (cut_tac a_notin_segment[of \"x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> segment D a; x \\<notin> segment D x\\<rbrakk>\n    \\<Longrightarrow> segment D x \\<noteq> segment D a", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_inc_psub:\"\\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk> \\<Longrightarrow>\n                                            Ssegment D x \\<subset> Ssegment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> Ssegment D x \\<subset> Ssegment D a", "apply (simp add:psubset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> Ssegment D x \\<subseteq> Ssegment D a \\<and>\n                      Ssegment D x \\<noteq> Ssegment D a", "apply (rule conjI, rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>Order D; x \\<in> Ssegment D a;\n        xa \\<in> Ssegment D x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> Ssegment D a\n 2. \\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> Ssegment D x \\<noteq> Ssegment D a", "apply (simp add:Ssegment_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>Order D;\n        x \\<in> (if a \\<notin> carrier D then carrier D\n                 else {x. x \\<prec>\\<^bsub>D\\<^esub> a \\<and>\n                          x \\<in> carrier D});\n        xa \\<in> (if x \\<notin> carrier D then carrier D\n                  else {xa.\n                        xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n                        xa \\<in> carrier D})\\<rbrakk>\n       \\<Longrightarrow> (a \\<notin> carrier D \\<longrightarrow>\n                          xa \\<in> carrier D) \\<and>\n                         (a \\<in> carrier D \\<longrightarrow>\n                          xa \\<prec>\\<^bsub>D\\<^esub> a \\<and>\n                          xa \\<in> carrier D)\n 2. \\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> Ssegment D x \\<noteq> Ssegment D a", "apply (case_tac \"a \\<notin> carrier D\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>Order D;\n        x \\<in> (if a \\<notin> carrier D then carrier D\n                 else {x. x \\<prec>\\<^bsub>D\\<^esub> a \\<and>\n                          x \\<in> carrier D});\n        xa \\<in> (if x \\<notin> carrier D then carrier D\n                  else {xa.\n                        xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n                        xa \\<in> carrier D});\n        \\<not> a \\<notin> carrier D\\<rbrakk>\n       \\<Longrightarrow> (a \\<notin> carrier D \\<longrightarrow>\n                          xa \\<in> carrier D) \\<and>\n                         (a \\<in> carrier D \\<longrightarrow>\n                          xa \\<prec>\\<^bsub>D\\<^esub> a \\<and>\n                          xa \\<in> carrier D)\n 2. \\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> Ssegment D x \\<noteq> Ssegment D a", "apply (simp, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>Order D; a \\<in> carrier D; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> carrier D; xa \\<prec>\\<^bsub>D\\<^esub> x;\n        xa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> xa \\<prec>\\<^bsub>D\\<^esub> a\n 2. \\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> Ssegment D x \\<noteq> Ssegment D a", "apply (rule_tac a = xa and b = x and c = a in Order.less_trans[of \"D\"], \n               assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; x \\<in> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> Ssegment D x \\<noteq> Ssegment D a", "apply (cut_tac a_notin_Ssegment[of \"x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; x \\<in> Ssegment D a;\n     x \\<notin> Ssegment ?D15 x\\<rbrakk>\n    \\<Longrightarrow> Ssegment D x \\<noteq> Ssegment D a", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) segment_segment:\"\\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk> \\<Longrightarrow>\n                  segment (Iod D (segment D b)) a = segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D b)) a = segment D a", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D b)) a\n                      \\<subseteq> segment D a\n 2. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a", "apply (simp add:segment_def[of \"Iod D (segment D b)\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n        x \\<in> (if a \\<notin> carrier (Iod D (segment D b))\n                 then carrier (Iod D (segment D b))\n                 else {x. x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n                          a \\<and>\n                          x \\<in> carrier (Iod D (segment D b))})\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a", "apply (cut_tac segment_sub[of \"b\"], simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a \\<and>\n        x \\<in> segment D b;\n        segment D b \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a", "apply (erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n        segment D b \\<subseteq> carrier D;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a", "apply (simp add:Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n        segment D b \\<subseteq> carrier D; x \\<prec> a;\n        x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a", "apply (frule_tac c = x in subsetD[of \"segment D b\" \"carrier D\"], assumption+,\n        frule_tac c = a in subsetD[of \"segment D b\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n        segment D b \\<subseteq> carrier D; x \\<prec> a; x \\<in> segment D b;\n        x \\<in> carrier D; a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a", "apply (simp add:segment_inc[of _ \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n        x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D (segment D b)) a", "apply (simp add:segment_def[of \"Iod D (segment D b)\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n        x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> (a \\<notin> carrier\n(Iod D (segment D b)) \\<longrightarrow>\n                          x \\<in> carrier (Iod D (segment D b))) \\<and>\n                         (a \\<in> carrier\n                                   (Iod D (segment D b)) \\<longrightarrow>\n                          x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n                          a \\<and>\n                          x \\<in> carrier (Iod D (segment D b)))", "apply (cut_tac segment_sub[of \"b\"], simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b; x \\<in> segment D a;\n        segment D b \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> segment D b", "apply (frule segment_inc_psub[of \"a\" \"b\"],\n        frule psubset_imp_subset[of \"segment D a\" \"segment D b\"],\n        thin_tac \"segment D a \\<subset> segment D b\",\n        frule_tac c = x in subsetD[of \"segment D a\" \"segment D b\"], \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b; x \\<in> segment D a;\n        segment D b \\<subseteq> carrier D;\n        segment D a \\<subseteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> segment D b", "apply (simp add:Iod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b; x \\<in> segment D a;\n        segment D b \\<subseteq> carrier D;\n        segment D a \\<subseteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a", "apply (simp add:segment_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_Ssegment:\"\\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk> \\<Longrightarrow>\n                  Ssegment (SIod D (Ssegment D b)) a = Ssegment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) a = Ssegment D a", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) a\n                      \\<subseteq> Ssegment D a\n 2. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> Ssegment (SIod D (Ssegment D b)) a", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        x \\<in> Ssegment (SIod D (Ssegment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> Ssegment (SIod D (Ssegment D b)) a", "apply (simp add:Ssegment_def[of \"SIod D (Ssegment D b)\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        x \\<in> (if a \\<notin> carrier (SIod D (Ssegment D b))\n                 then carrier (SIod D (Ssegment D b))\n                 else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                          a \\<and>\n                          x \\<in> carrier (SIod D (Ssegment D b))})\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> Ssegment (SIod D (Ssegment D b)) a", "apply (cut_tac Ssegment_sub[of \"D\" \"b\"], simp add:SIod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n        x \\<in> Ssegment D b;\n        Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> Ssegment (SIod D (Ssegment D b)) a", "apply (erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        Ssegment D b \\<subseteq> carrier D;\n        x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a;\n        x \\<in> Ssegment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> Ssegment (SIod D (Ssegment D b)) a", "apply (simp add:SIod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        Ssegment D b \\<subseteq> carrier D; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> Ssegment (SIod D (Ssegment D b)) a", "apply (frule_tac c = x in subsetD[of \"Ssegment D b\" \"carrier D\"], assumption+,\n        frule_tac c = a in subsetD[of \"Ssegment D b\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        Ssegment D b \\<subseteq> carrier D; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D b; x \\<in> carrier D; a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> Ssegment (SIod D (Ssegment D b)) a", "apply (simp add:Ssegment_inc[of \"D\"_  \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> Ssegment (SIod D (Ssegment D b)) a", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment (SIod D (Ssegment D b)) a", "apply (simp add:Ssegment_def[of \"SIod D (Ssegment D b)\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> (a \\<notin> carrier\n(SIod D (Ssegment D b)) \\<longrightarrow>\n                          x \\<in> carrier (SIod D (Ssegment D b))) \\<and>\n                         (a \\<in> carrier\n                                   (SIod D (Ssegment D b)) \\<longrightarrow>\n                          x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                          a \\<and>\n                          x \\<in> carrier (SIod D (Ssegment D b)))", "apply (cut_tac Ssegment_sub[of \"D\" \"b\"], simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        x \\<in> Ssegment D a; Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b", "apply (frule Ssegment_inc_psub[of \"D\" \"a\" \"b\"], assumption,\n        frule psubset_imp_subset[of \"Ssegment D a\" \"Ssegment D b\"],\n        thin_tac \"Ssegment D a \\<subset> Ssegment D b\",\n        frule_tac c = x in subsetD[of \"Ssegment D a\" \"Ssegment D b\"], \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        x \\<in> Ssegment D a; Ssegment D b \\<subseteq> carrier D;\n        Ssegment D a \\<subseteq> Ssegment D b; x \\<in> Ssegment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b", "apply (simp add:SIod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; b \\<in> carrier D; a \\<in> Ssegment D b;\n        x \\<in> Ssegment D a; Ssegment D b \\<subseteq> carrier D;\n        Ssegment D a \\<subseteq> Ssegment D b; x \\<in> Ssegment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> a", "apply (simp add:Ssegment_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) Iod_segment_segment:\"a \\<in> carrier (Iod D (segment D b)) \\<Longrightarrow> \n      Iod (Iod D (segment D b)) (segment (Iod D (segment D b)) a) =\n      Iod D (segment D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier (Iod D (segment D b)) \\<Longrightarrow>\n    Iod (Iod D (segment D b)) (segment (Iod D (segment D b)) a) =\n    Iod D (segment D a)", "apply (case_tac \"b \\<in> carrier D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier (Iod D (segment D b));\n     b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)\n 2. \\<lbrakk>a \\<in> carrier (Iod D (segment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)", "apply (cut_tac segment_sub[of \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier (Iod D (segment D b)); b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)\n 2. \\<lbrakk>a \\<in> carrier (Iod D (segment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)\n 2. \\<lbrakk>a \\<in> carrier (Iod D (segment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)", "apply (frule segment_inc_psub[of \"a\" \"b\"],\n        frule psubset_imp_subset[of \"segment D a\" \"segment D b\"],\n        thin_tac \"segment D a \\<subset> segment D b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D;\n     segment D a \\<subseteq> segment D b\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)\n 2. \\<lbrakk>a \\<in> carrier (Iod D (segment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)", "apply (simp add:segment_segment[of \"b\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> segment D b; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D;\n     segment D a \\<subseteq> segment D b\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b)) (segment D a) =\n                      Iod D (segment D a)\n 2. \\<lbrakk>a \\<in> carrier (Iod D (segment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)", "apply (simp add:Iod_sub_sub[of \"segment D a\" \"segment D b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier (Iod D (segment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (segment D b))\n                       (segment (Iod D (segment D b)) a) =\n                      Iod D (segment D a)", "apply (simp add:segment_def[of D b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier (Iod D (carrier D));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> Iod (Iod D (carrier D))\n                       (segment (Iod D (carrier D)) a) =\n                      Iod D (segment D a)", "apply (simp add:Iod_self[THEN sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SIod_Ssegment_Ssegment:\"\\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b))\\<rbrakk> \n     \\<Longrightarrow>\n      SIod (SIod D (Ssegment D b)) (Ssegment (SIod D (Ssegment D b)) a) =\n      SIod D (Ssegment D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)", "apply (case_tac \"b \\<in> carrier D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)\n 2. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)", "apply (cut_tac Ssegment_sub[of \"D\" \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<in> carrier D; Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)\n 2. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)", "apply (simp add:SIod_carrier[of \"D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<in> Ssegment D b; b \\<in> carrier D;\n     Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)\n 2. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)", "apply (frule Ssegment_inc_psub[of \"D\" \"a\" \"b\"], simp add:subsetD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<in> Ssegment D b; b \\<in> carrier D;\n     Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subset> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)\n 2. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)", "apply (\n        frule psubset_imp_subset[of \"Ssegment D a\" \"Ssegment D b\"],\n        thin_tac \"Ssegment D a \\<subset> Ssegment D b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<in> Ssegment D b; b \\<in> carrier D;\n     Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)\n 2. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)", "apply (simp add:Ssegment_Ssegment[of \"D\" \"b\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; a \\<in> Ssegment D b; b \\<in> carrier D;\n     Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b)) (Ssegment D a) =\n                      SIod D (Ssegment D a)\n 2. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)", "apply (simp add:SIod_sub_sub[of \"Ssegment D a\" \"Ssegment D b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; a \\<in> carrier (SIod D (Ssegment D b));\n     b \\<notin> carrier D\\<rbrakk>\n    \\<Longrightarrow> SIod (SIod D (Ssegment D b))\n                       (Ssegment (SIod D (Ssegment D b)) a) =\n                      SIod D (Ssegment D a)", "apply (simp add:Ssegment_def[of D b], simp add:SIod_self[THEN sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_segment_mem:\"\\<lbrakk>Order E; \n      ord_isom D E f; a \\<in> carrier D; x \\<in> segment D a \\<rbrakk> \\<Longrightarrow> \n                     (f x) \\<in> segment E (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> segment D a\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> segment E (f a)", "apply (frule segment_inc_if[of \"a\" \"x\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> segment D a; x \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> segment E (f a)", "apply (frule ord_isom_less[of \"E\" \"f\" \"x\" \"a\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> segment D a; x \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> x \\<in> carrier D\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> segment D a; x \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 3. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> segment D a; x \\<prec> a;\n     x \\<prec> a = f x \\<prec>\\<^bsub>E\\<^esub> f a\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> segment E (f a)", "apply (simp add:segment_def, assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> segment D a; f x \\<prec>\\<^bsub>E\\<^esub> f a;\n     x \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> segment E (f a)", "apply (frule ord_isom_mem[of \"E\" \"f\" \"x\"], assumption+,\n       simp add:segment_def,\n       frule ord_isom_mem[of \"E\" \"f\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> segment D a; f x \\<prec>\\<^bsub>E\\<^esub> f a; x \\<prec> a;\n     f x \\<in> carrier E; f a \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> segment E (f a)", "apply (simp add:Order.segment_inc[of \"E\" \"f x\" \"f a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ord_isom_Ssegment_mem:\"\\<lbrakk>Order D; Order E; \n      ord_isom D E f; a \\<in> carrier D; x \\<in> Ssegment D a\\<rbrakk> \\<Longrightarrow> \n                     (f x) \\<in> Ssegment E (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> Ssegment E (f a)", "apply (frule Ssegment_inc_if[of \"D\" \"a\" \"x\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> Ssegment E (f a)", "apply (frule Order.ord_isom_less[of \"D\" \"E\" \"f\" \"x\" \"a\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> x \\<in> carrier D\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier D\n 3. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> a;\n     x \\<prec>\\<^bsub>D\\<^esub> a =\n     f x \\<prec>\\<^bsub>E\\<^esub> f a\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> Ssegment E (f a)", "apply (simp add:Ssegment_def, assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> Ssegment D a; f x \\<prec>\\<^bsub>E\\<^esub> f a;\n     x \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> Ssegment E (f a)", "apply (frule Order.ord_isom_mem[of \"D\" \"E\" \"f\" \"x\"], assumption+,\n       simp add:Ssegment_def,\n       frule Order.ord_isom_mem[of \"D\" \"E\" \"f\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     x \\<in> Ssegment D a; f x \\<prec>\\<^bsub>E\\<^esub> f a;\n     x \\<prec>\\<^bsub>D\\<^esub> a; f x \\<in> carrier E;\n     f a \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> Ssegment E (f a)", "apply (simp add:Ssegment_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_segment_segment:\"\\<lbrakk>Order E; \n      ord_isom D E f; a \\<in> carrier D \\<rbrakk> \\<Longrightarrow> \n      ord_isom (Iod D (segment D a)) (Iod E (segment E (f a))) \n                                    (\\<lambda>x\\<in>carrier (Iod D (segment D a)). f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D (segment D a))\n                       (Iod E (segment E (f a)))\n                       (restrict f (carrier (Iod D (segment D a))))", "apply (frule ord_isom_inj_on[of E f], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D)\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D (segment D a))\n                       (Iod E (segment E (f a)))\n                       (restrict f (carrier (Iod D (segment D a))))", "apply (cut_tac segment_sub[of a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D (segment D a))\n                       (Iod E (segment E (f a)))\n                       (restrict f (carrier (Iod D (segment D a))))", "apply (frule restrict_inj[of f \"carrier D\" \"segment D a\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a)\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D (segment D a))\n                       (Iod E (segment E (f a)))\n                       (restrict f (carrier (Iod D (segment D a))))", "apply (frule ord_isom_surj_to[of E f], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D (segment D a))\n                       (Iod E (segment E (f a)))\n                       (restrict f (carrier (Iod D (segment D a))))", "apply (subst ord_isom_def, subst ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> (restrict f (carrier (Iod D (segment D a)))\n                       \\<in> extensional\n                              (carrier (Iod D (segment D a))) \\<and>\n                       restrict f (carrier (Iod D (segment D a)))\n                       \\<in> carrier (Iod D (segment D a)) \\<rightarrow>\n                             carrier (Iod E (segment E (f a))) \\<and>\n                       inj_on (restrict f (carrier (Iod D (segment D a))))\n                        (carrier (Iod D (segment D a))) \\<and>\n                       (\\<forall>aa\\<in>carrier (Iod D (segment D a)).\n                           \\<forall>b\\<in>carrier (Iod D (segment D a)).\n                              aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                              b =\n                              restrict f (carrier (Iod D (segment D a)))\n                               aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                              restrict f (carrier (Iod D (segment D a)))\n                               b)) \\<and>\n                      surj_to (restrict f (carrier (Iod D (segment D a))))\n                       (carrier (Iod D (segment D a)))\n                       (carrier (Iod E (segment E (f a))))", "apply (simp add:Iod_carr_segment Order.Iod_carr_segment)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> restrict f (segment D a)\n                      \\<in> segment D a \\<rightarrow> segment E (f a) \\<and>\n                      (\\<forall>aa\\<in>segment D a.\n                          \\<forall>b\\<in>segment D a.\n                             aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (segment D a)) (segment D a)\n                       (segment E (f a))", "apply (subgoal_tac \"restrict f (segment D a) \\<in> \n                              segment D a \\<rightarrow> segment E (f a)\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>aa\\<in>segment D a.\n                          \\<forall>b\\<in>segment D a.\n                             aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (segment D a)) (segment D a)\n                       (segment E (f a))\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> restrict f (segment D a)\n                      \\<in> segment D a \\<rightarrow> segment E (f a)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> restrict f (segment D a)\n                      \\<in> segment D a \\<rightarrow> segment E (f a)\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>aa\\<in>segment D a.\n                          \\<forall>b\\<in>segment D a.\n                             aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (segment D a)) (segment D a)\n                       (segment E (f a))", "apply (simp add:ord_isom_segment_mem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>aa\\<in>segment D a.\n                          \\<forall>b\\<in>segment D a.\n                             aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (segment D a)) (segment D a)\n                       (segment E (f a))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>segment D a.\n                         \\<forall>b\\<in>segment D a.\n                            aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                            b =\n                            f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                            f b\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (segment D a)) (segment D a)\n                       (segment E (f a))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (segment D a)) (segment D a)\n                       (segment E (f a))\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>segment D a.\n                         \\<forall>b\\<in>segment D a.\n                            aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                            b =\n                            f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                            f b", "apply (rule surj_to_test, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>segment E (f a).\n                         \\<exists>aa\\<in>segment D a.\n                            restrict f (segment D a) aa = b\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>segment D a.\n                         \\<forall>b\\<in>segment D a.\n                            aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                            b =\n                            f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                            f b", "apply (rule ballI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n        inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n        inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n        restrict f (segment D a)\n        \\<in> segment D a \\<rightarrow> segment E (f a);\n        b \\<in> segment E (f a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>segment D a. f a = b\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>segment D a.\n                         \\<forall>b\\<in>segment D a.\n                            aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                            b =\n                            f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                            f b", "apply (frule ord_isom_func[of E f], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n        inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n        inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n        restrict f (segment D a)\n        \\<in> segment D a \\<rightarrow> segment E (f a);\n        b \\<in> segment E (f a);\n        f \\<in> carrier D \\<rightarrow> carrier E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>segment D a. f a = b\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>segment D a.\n                         \\<forall>b\\<in>segment D a.\n                            aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                            b =\n                            f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                            f b", "apply (frule surj_to_el[of f \"carrier D\" \"carrier E\"], assumption+,\n        \n        frule ord_isom_mem[of E f a], assumption+,\n        frule Order.segment_sub[of E \"f a\"],\n        frule_tac c = b in subsetD[of \"segment E (f a)\" \"carrier E\"],\n        assumption+,\n \n        drule_tac x = b in bspec, assumption, (*\n        thin_tac \"\\<forall>b\\<in>carrier E. \\<exists>a\\<in>carrier D. f a = b\", *)\n        erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b aa.\n       \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n        inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n        inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n        restrict f (segment D a)\n        \\<in> segment D a \\<rightarrow> segment E (f a);\n        b \\<in> segment E (f a); f \\<in> carrier D \\<rightarrow> carrier E;\n        f a \\<in> carrier E; segment E (f a) \\<subseteq> carrier E;\n        b \\<in> carrier E; aa \\<in> carrier D; f aa = b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>segment D a. f a = b\n 2. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>segment D a.\n                         \\<forall>b\\<in>segment D a.\n                            aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                            b =\n                            f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                            f b", "apply (simp add:Order.segment_inc[THEN sym, of E _ \"f a\"],\n        rotate_tac -1, frule sym, thin_tac \"f aa = b\", simp,\n        frule_tac a1 = aa and b1 = a in ord_isom_less[THEN sym, of E f], \n        assumption+, simp,\n        simp add:segment_inc[of _ a], blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n     inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n     inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n     restrict f (segment D a)\n     \\<in> segment D a \\<rightarrow> segment E (f a)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>segment D a.\n                         \\<forall>b\\<in>segment D a.\n                            aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub>\n                            b =\n                            f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                            f b", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n        inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n        inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n        restrict f (segment D a)\n        \\<in> segment D a \\<rightarrow> segment E (f a);\n        aa \\<in> segment D a; b \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                         f b", "apply (frule ord_isom_mem[of E f a], assumption+,\n        frule Order.segment_sub[of E \"f a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>Order E; ord_isom D E f; a \\<in> carrier D;\n        inj_on f (carrier D); segment D a \\<subseteq> carrier D;\n        inj_on f (segment D a); surj_to f (carrier D) (carrier E);\n        restrict f (segment D a)\n        \\<in> segment D a \\<rightarrow> segment E (f a);\n        aa \\<in> segment D a; b \\<in> segment D a; f a \\<in> carrier E;\n        segment E (f a) \\<subseteq> carrier E\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>Iod D (segment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>Iod E (segment E (f a))\\<^esub>\n                         f b", "apply (frule_tac x = aa in ord_isom_segment_mem[of E f a], assumption+,\n        frule_tac x = b in ord_isom_segment_mem[of E f a], assumption+,\n\n        simp add:Iod_less Order.Iod_less,\n        subst ord_isom_less[of E f], assumption+, (simp add:subsetD)+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ord_isom_Ssegment_Ssegment:\"\\<lbrakk>Order D; Order E; \n      ord_isom D E f; a \\<in> carrier D \\<rbrakk> \\<Longrightarrow> \n      ord_isom (SIod D (Ssegment D a)) (SIod E (Ssegment E (f a))) \n                                  (\\<lambda>x\\<in>carrier (SIod D (Ssegment D a)). f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D (Ssegment D a))\n                       (SIod E (Ssegment E (f a)))\n                       (restrict f (carrier (SIod D (Ssegment D a))))", "apply (frule_tac a = a in Order.ord_isom_mem[of D E f], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D (Ssegment D a))\n                       (SIod E (Ssegment E (f a)))\n                       (restrict f (carrier (SIod D (Ssegment D a))))", "apply (cut_tac Ssegment_sub[of D a],\n       cut_tac Ssegment_sub[of \"E\" \"f a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D (Ssegment D a))\n                       (SIod E (Ssegment E (f a)))\n                       (restrict f (carrier (SIod D (Ssegment D a))))", "apply (subst ord_isom_def, simp add:ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> restrict f (carrier (SIod D (Ssegment D a)))\n                      \\<in> carrier (SIod D (Ssegment D a)) \\<rightarrow>\n                            carrier (SIod E (Ssegment E (f a))) \\<and>\n                      inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> restrict f (carrier (SIod D (Ssegment D a)))\n                      \\<in> carrier (SIod D (Ssegment D a)) \\<rightarrow>\n                            carrier (SIod E (Ssegment E (f a)))\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (rule Pi_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        x \\<in> carrier (SIod D (Ssegment D a))\\<rbrakk>\n       \\<Longrightarrow> restrict f (carrier (SIod D (Ssegment D a))) x\n                         \\<in> carrier (SIod E (Ssegment E (f a)))\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> f x \\<in> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (frule_tac c = x in subsetD[of \"Ssegment D a\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; x \\<in> Ssegment D a;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> f x \\<in> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (frule_tac a = x in Order.ord_isom_mem[of D E f], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; x \\<in> Ssegment D a;\n        x \\<in> carrier D; f x \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> f x \\<in> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (subst Ssegment_inc[THEN sym, of \"E\" _ \"f a\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; x \\<in> Ssegment D a;\n        x \\<in> carrier D; f x \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> f x \\<prec>\\<^bsub>E\\<^esub> f a\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (subst Order.ord_isom_less[THEN sym, of D E f _ a], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; x \\<in> Ssegment D a;\n        x \\<in> carrier D; f x \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> a\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (subst Ssegment_inc[of D _ a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a))) \\<and>\n                      (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (carrier (SIod D (Ssegment D a)))\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> inj_on f (Ssegment D a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:ord_isom_def bij_to_def, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; a \\<in> carrier D; f a \\<in> carrier E;\n     Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E; ord_inj D E f;\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> inj_on f (Ssegment D a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:ord_inj_def, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; a \\<in> carrier D; f a \\<in> carrier E;\n     Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E;\n     surj_to f (carrier D) (carrier E); f \\<in> extensional (carrier D);\n     f \\<in> carrier D \\<rightarrow> carrier E; inj_on f (carrier D);\n     \\<forall>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier D.\n           a \\<prec>\\<^bsub>D\\<^esub> b =\n           f a \\<prec>\\<^bsub>E\\<^esub> f b\\<rbrakk>\n    \\<Longrightarrow> inj_on f (Ssegment D a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (rule restrict_inj[of \"f\" \"carrier D\" \"Ssegment D a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                          \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                             aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                             b =\n                             f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                             f b) \\<and>\n                      surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>aa\\<in>carrier (SIod D (Ssegment D a)).\n                         \\<forall>b\\<in>carrier (SIod D (Ssegment D a)).\n                            aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub>\n                            b =\n                            f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                            f b\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (rule ballI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        aa \\<in> carrier (SIod D (Ssegment D a));\n        b \\<in> carrier (SIod D (Ssegment D a))\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                         f b\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; aa \\<in> Ssegment D a;\n        b \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                         f b\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (frule_tac c = aa in subsetD[of \"Ssegment D a\" \"carrier D\"], \n        assumption+,\n        frule_tac c = b in subsetD[of \"Ssegment D a\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; aa \\<in> Ssegment D a;\n        b \\<in> Ssegment D a; aa \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                         f b\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (frule_tac a1 = aa and b1 = a in Ssegment_inc[THEN sym], assumption+,\n        frule_tac a1 = b and b1 = a in Ssegment_inc[THEN sym], assumption+,\n        simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        aa \\<prec>\\<^bsub>D\\<^esub> a; b \\<prec>\\<^bsub>D\\<^esub> a;\n        aa \\<in> carrier D; b \\<in> carrier D; aa \\<in> Ssegment D a;\n        b \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                         f b\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:Order.ord_isom_less[of D E f])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        f aa \\<prec>\\<^bsub>E\\<^esub> f a; f b \\<prec>\\<^bsub>E\\<^esub> f a;\n        aa \\<in> carrier D; b \\<in> carrier D; aa \\<in> Ssegment D a;\n        b \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                         f b\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (frule_tac a = a in Order.ord_isom_mem[of D E f], assumption+,\n        frule_tac a = aa in Order.ord_isom_mem[of D E f], assumption+,\n        frule_tac a = b in Order.ord_isom_mem[of D E f], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        f aa \\<prec>\\<^bsub>E\\<^esub> f a; f b \\<prec>\\<^bsub>E\\<^esub> f a;\n        aa \\<in> carrier D; b \\<in> carrier D; aa \\<in> Ssegment D a;\n        b \\<in> Ssegment D a; f a \\<in> carrier E; f aa \\<in> carrier E;\n        f b \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                         f b\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:Ssegment_inc[of E])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; f aa \\<in> Ssegment E (f a);\n        f b \\<in> Ssegment E (f a); aa \\<in> carrier D; b \\<in> carrier D;\n        aa \\<in> Ssegment D a; b \\<in> Ssegment D a; f a \\<in> carrier E;\n        f aa \\<in> carrier E; f b \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> aa \\<prec>\\<^bsub>SIod D (Ssegment D a)\\<^esub> b =\n                         f aa \\<prec>\\<^bsub>SIod E (Ssegment E (f a))\\<^esub>\n                         f b\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:SIod_less Order.ord_isom_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> surj_to (restrict f (carrier (SIod D (Ssegment D a))))\n                       (carrier (SIod D (Ssegment D a)))\n                       (carrier (SIod E (Ssegment E (f a))))", "apply (simp add:surj_to_def,\n        simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> f ` Ssegment D a = Ssegment E (f a)", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> f ` Ssegment D a \\<subseteq> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Ssegment E (f a) \\<subseteq> f ` Ssegment D a", "apply (rule subsetI, simp add:image_def, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; xa \\<in> Ssegment D a;\n        x = f xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Ssegment E (f a) \\<subseteq> f ` Ssegment D a", "apply (frule_tac c = xa in subsetD[of \"Ssegment D a\" \"carrier D\"], \n         assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; xa \\<in> Ssegment D a;\n        x = f xa; xa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Ssegment E (f a) \\<subseteq> f ` Ssegment D a", "apply (frule_tac a = xa in Ssegment_inc[of D _ a], assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; xa \\<in> Ssegment D a;\n        x = f xa; xa \\<in> carrier D; xa \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Ssegment E (f a) \\<subseteq> f ` Ssegment D a", "apply (simp add:Order.ord_isom_less[of D E f _ a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; xa \\<in> Ssegment D a;\n        x = f xa; xa \\<in> carrier D;\n        f xa \\<prec>\\<^bsub>E\\<^esub> f a\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Ssegment E (f a) \\<subseteq> f ` Ssegment D a", "apply (frule_tac a = xa in Order.ord_isom_mem[of D E f], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; xa \\<in> Ssegment D a;\n        x = f xa; xa \\<in> carrier D; f xa \\<prec>\\<^bsub>E\\<^esub> f a;\n        f xa \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> Ssegment E (f a)\n 2. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Ssegment E (f a) \\<subseteq> f ` Ssegment D a", "apply (subst Ssegment_inc[THEN sym], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n     f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n     Ssegment E (f a) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Ssegment E (f a) \\<subseteq> f ` Ssegment D a", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        x \\<in> Ssegment E (f a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> f ` Ssegment D a", "apply (frule_tac c = x in subsetD[of \"Ssegment E (f a)\" \"carrier E\"], \n         assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E; x \\<in> Ssegment E (f a);\n        x \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> x \\<in> f ` Ssegment D a", "apply (simp add:Ssegment_inc[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> f a; x \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> x \\<in> f ` Ssegment D a", "apply (frule_tac b = x in Order.ord_isom_surj[of D E f], assumption+,\n         erule bexE, simp, thin_tac \"x = f aa\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x aa.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        f aa \\<prec>\\<^bsub>E\\<^esub> f a; f aa \\<in> carrier E;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> f aa \\<in> f ` Ssegment D a", "apply (simp add:Order.ord_isom_less[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>Order D; Order E; ord_isom D E f; a \\<in> carrier D;\n        f a \\<in> carrier E; Ssegment D a \\<subseteq> carrier D;\n        Ssegment E (f a) \\<subseteq> carrier E;\n        aa \\<prec>\\<^bsub>D\\<^esub> a; f aa \\<in> carrier E;\n        aa \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> f aa \\<in> f ` Ssegment D a", "apply (simp add:Ssegment_inc[of D])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_equiv_segment_segment:\n   \"\\<lbrakk>Order E; ord_equiv D E; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t\\<in>carrier E. ord_equiv (Iod D (segment D a)) (Iod E (segment E t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_equiv D E; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t\\<in>carrier E.\n                         ord_equiv (Iod D (segment D a))\n                          (Iod E (segment E t))", "apply (simp add:ord_equiv_def, erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Order E; a \\<in> carrier D; ord_isom D E f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>carrier E.\n                            \\<exists>f.\n                               ord_isom (Iod D (segment D a))\n                                (Iod E (segment E t)) f", "apply (frule_tac f = f in ord_isom_segment_segment[of E _ a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Order E; a \\<in> carrier D; ord_isom D E f;\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>carrier E.\n                            \\<exists>f.\n                               ord_isom (Iod D (segment D a))\n                                (Iod E (segment E t)) f", "apply (frule_tac f = f in ord_isom_mem[of E _ a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Order E; a \\<in> carrier D; ord_isom D E f;\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (f a)))\n         (restrict f (carrier (Iod D (segment D a))));\n        f a \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>carrier E.\n                            \\<exists>f.\n                               ord_isom (Iod D (segment D a))\n                                (Iod E (segment E t)) f", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ord_equiv_Ssegment_Ssegment:\n  \"\\<lbrakk>Order D; Order E; ord_equiv D E; a \\<in> carrier D\\<rbrakk>\n  \\<Longrightarrow> \\<exists>t\\<in>carrier E. ord_equiv (SIod D (Ssegment D a)) (SIod E (Ssegment E t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_equiv D E; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t\\<in>carrier E.\n                         ord_equiv (SIod D (Ssegment D a))\n                          (SIod E (Ssegment E t))", "apply (simp add:ord_equiv_def, erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Order D; Order E; a \\<in> carrier D; ord_isom D E f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>carrier E.\n                            \\<exists>f.\n                               ord_isom (SIod D (Ssegment D a))\n                                (SIod E (Ssegment E t)) f", "apply (frule_tac f = f in  ord_isom_Ssegment_Ssegment[of \"D\" \"E\" _ \"a\"], \n       assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Order D; Order E; a \\<in> carrier D; ord_isom D E f;\n        ord_isom (SIod D (Ssegment D a)) (SIod E (Ssegment E (f a)))\n         (restrict f (carrier (SIod D (Ssegment D a))))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>carrier E.\n                            \\<exists>f.\n                               ord_isom (SIod D (Ssegment D a))\n                                (SIod E (Ssegment E t)) f", "apply (frule_tac f = f in Order.ord_isom_mem[of D E _ a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Order D; Order E; a \\<in> carrier D; ord_isom D E f;\n        ord_isom (SIod D (Ssegment D a)) (SIod E (Ssegment E (f a)))\n         (restrict f (carrier (SIod D (Ssegment D a))));\n        f a \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t\\<in>carrier E.\n                            \\<exists>f.\n                               ord_isom (SIod D (Ssegment D a))\n                                (SIod E (Ssegment E t)) f", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_isom_restricted:\n      \"\\<lbrakk>Order E; ord_isom D E f; D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> \n             ord_isom (Iod D D1) (Iod E (f ` D1)) (\\<lambda>x\\<in>D1. f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D D1) (Iod E (f ` D1)) (restrict f D1)", "apply (simp add:ord_isom_def[of D E f], erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; D1 \\<subseteq> carrier D; ord_inj D E f;\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D D1) (Iod E (f ` D1)) (restrict f D1)", "apply (simp add:ord_inj_restrict_isom[of E f D1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ord_isom_restrictedS:\n      \"\\<lbrakk>Order D; Order E; ord_isom D E f; D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> \n             ord_isom (SIod D D1) (SIod E (f ` D1)) (\\<lambda>x\\<in>D1. f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f;\n     D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D D1) (SIod E (f ` D1)) (restrict f D1)", "apply (simp add:ord_isom_def[of D E f], erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; D1 \\<subseteq> carrier D; ord_inj D E f;\n     surj_to f (carrier D) (carrier E)\\<rbrakk>\n    \\<Longrightarrow> ord_isom (SIod D D1) (SIod E (f ` D1)) (restrict f D1)", "apply (simp add:ord_inj_Srestrict_isom[of D E f D1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) ord_equiv_induced:\n      \"\\<lbrakk>Order E; ord_isom D E f; D1 \\<subseteq> carrier D \\<rbrakk> \\<Longrightarrow> \n                         ord_equiv (Iod D D1) (Iod E (f ` D1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D D1) (Iod E (f ` D1))", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa. ord_isom (Iod D D1) (Iod E (f ` D1)) fa", "apply (frule ord_isom_restricted [of \"E\" \"f\" \"D1\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_isom D E f; D1 \\<subseteq> carrier D;\n     ord_isom (Iod D D1) (Iod E (f ` D1)) (restrict f D1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa. ord_isom (Iod D D1) (Iod E (f ` D1)) fa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ord_equiv_inducedS:\n      \"\\<lbrakk>Order D; Order E; ord_isom D E f; D1 \\<subseteq> carrier D \\<rbrakk> \\<Longrightarrow> \n                        ord_equiv (SIod D D1) (SIod E (f ` D1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f;\n     D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (SIod D D1) (SIod E (f ` D1))", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f;\n     D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa. ord_isom (SIod D D1) (SIod E (f ` D1)) fa", "apply (frule ord_isom_restrictedS [of \"D\" \"E\" \"f\" \"D1\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_isom D E f; D1 \\<subseteq> carrier D;\n     ord_isom (SIod D D1) (SIod E (f ` D1)) (restrict f D1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa. ord_isom (SIod D D1) (SIod E (f ` D1)) fa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Order) equiv_induced_by_inj:\"\\<lbrakk>Order E; ord_inj D E f; \n      D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow>  ord_equiv (Iod D D1) (Iod E (f ` D1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D D1) (Iod E (f ` D1))", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa. ord_isom (Iod D D1) (Iod E (f ` D1)) fa", "apply (frule ord_inj_restrict_isom [of E f D1], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order E; ord_inj D E f; D1 \\<subseteq> carrier D;\n     ord_isom (Iod D D1) (Iod E (f ` D1)) (restrict f D1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa. ord_isom (Iod D D1) (Iod E (f ` D1)) fa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma equiv_induced_by_injS:\"\\<lbrakk>Order D; Order E; ord_inj D E f; \n      D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow>  ord_equiv (SIod D D1) (SIod E (f ` D1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f;\n     D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (SIod D D1) (SIod E (f ` D1))", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f;\n     D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa. ord_isom (SIod D D1) (SIod E (f ` D1)) fa", "apply (frule ord_inj_Srestrict_isom[of D E f D1], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Order D; Order E; ord_inj D E f; D1 \\<subseteq> carrier D;\n     ord_isom (SIod D D1) (SIod E (f ` D1)) (restrict f D1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>fa. ord_isom (SIod D D1) (SIod E (f ` D1)) fa", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) le_segment_segment:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n           (a \\<preceq> b) = (segment (Iod D (segment D b)) a = segment D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply (cut_tac segment_sub[of b],\n       frule Iod_Order[of \"segment D b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b))\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply (case_tac \"a = b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a = b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     Order (Iod D (segment D b)); a = b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq> b =\n                      (segment (Iod D (segment D b)) b = segment D b)\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply (simp add:le_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     Order (Iod D (segment D b)); a = b\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D b)) b = segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply ( cut_tac a_notin_segment[of \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     Order (Iod D (segment D b)); a = b; b \\<notin> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D b)) b = segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply (subst Order.segment_free[of \"Iod D (segment D b)\" b], assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     Order (Iod D (segment D b)); a = b; b \\<notin> segment D b\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> carrier (Iod D (segment D b))\n 2. \\<lbrakk>b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     Order (Iod D (segment D b)); a = b; b \\<notin> segment D b\\<rbrakk>\n    \\<Longrightarrow> carrier (Iod D (segment D b)) = segment D b\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b \\<in> carrier D; segment D b \\<subseteq> carrier D;\n     Order (Iod D (segment D b)); a = b; b \\<notin> segment D b\\<rbrakk>\n    \\<Longrightarrow> carrier (Iod D (segment D b)) = segment D b\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply (subst le_imp_less_or_eq[of \"a\" \"b\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b =\n                      (segment (Iod D (segment D b)) a = segment D a)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D b)) a = segment D a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (rule equalityI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D b)) a\n                      \\<subseteq> segment D a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (rule subsetI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (frule_tac a1 = x in Order.segment_inc[THEN sym, \n                    of \"Iod D (segment D b)\" _ a])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D (segment D b))\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier (Iod D (segment D b))\n 3. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment (Iod D (segment D b)) a;\n        (x \\<in> segment (Iod D (segment D b)) a) =\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 5. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (frule_tac Order.segment_sub[of \"Iod D (segment D b)\" a])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment (Iod D (segment D b)) a;\n        segment (Iod D (segment D b)) a\n        \\<subseteq> carrier (Iod D (segment D b))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D (segment D b))\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier (Iod D (segment D b))\n 3. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment (Iod D (segment D b)) a;\n        (x \\<in> segment (Iod D (segment D b)) a) =\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 5. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (rule subsetD, assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier (Iod D (segment D b))\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment (Iod D (segment D b)) a;\n        (x \\<in> segment (Iod D (segment D b)) a) =\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> segment D b\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment (Iod D (segment D b)) a;\n        (x \\<in> segment (Iod D (segment D b)) a) =\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:segment_inc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment (Iod D (segment D b)) a;\n        (x \\<in> segment (Iod D (segment D b)) a) =\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (subst segment_inc[THEN sym])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 3. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 5. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:segment_def Iod_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:segment_inc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (frule Order.segment_sub[of \"Iod D (segment D b)\" a])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a;\n        segment (Iod D (segment D b)) a\n        \\<subseteq> carrier (Iod D (segment D b))\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b;\n        x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a;\n        x \\<in> segment (Iod D (segment D b)) a;\n        segment (Iod D (segment D b)) a \\<subseteq> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:subsetD Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> segment D a\n                      \\<subseteq> segment (Iod D (segment D b)) a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment (Iod D (segment D b)) a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (subst Order.segment_inc[THEN sym, of \"Iod D (segment D b)\"],\n         assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier (Iod D (segment D b))\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier (Iod D (segment D b))\n 3. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D b\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier (Iod D (segment D b))\n 3. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:segment_mono[of a b] psubset_eq, erule conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; x \\<in> segment D a;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D b\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier (Iod D (segment D b))\n 3. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (rule subsetD[of \"segment D a\" \"segment D b\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier (Iod D (segment D b))\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:Iod_carrier segment_inc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<prec> b; x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (frule segment_inc[of a b], assumption, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a;\n        a \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (frule segment_mono[of a b], assumption, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a;\n        segment D a \\<subset> segment D b; a \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:psubset_eq, (erule conjE)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a; a \\<prec> b;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (frule_tac c = x in subsetD[of \"segment D a\" \"segment D b\"], \n         assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a; a \\<prec> b;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>Iod D (segment D b)\\<^esub> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:Iod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a; a \\<prec> b;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (subst segment_inc)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a; a \\<prec> b;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a; a \\<prec> b;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 3. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a; a \\<prec> b;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 4. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (simp add:subsetD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a; a \\<prec> b;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n        a \\<noteq> b; a \\<in> segment D b; x \\<in> segment D a; a \\<prec> b;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b; x \\<in> segment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 3. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a;\n     \\<not> a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:not_less_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a;\n     b \\<preceq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:le_imp_less_or_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a;\n     b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule segment_not_inc[of b a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a;\n     b \\<prec> a; a \\<notin> segment D b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule Order.segment_free[of \"Iod D (segment D b)\" a])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a;\n     b \\<prec> a; a \\<notin> segment D b\\<rbrakk>\n    \\<Longrightarrow> a \\<notin> carrier (Iod D (segment D b))\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a;\n     b \\<prec> a; a \\<notin> segment D b;\n     segment (Iod D (segment D b)) a =\n     carrier (Iod D (segment D b))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; segment (Iod D (segment D b)) a = segment D a;\n     b \\<prec> a; a \\<notin> segment D b;\n     segment (Iod D (segment D b)) a =\n     carrier (Iod D (segment D b))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     a \\<noteq> b; segment D b = segment D a; b \\<prec> a;\n     a \\<notin> segment D a;\n     segment (Iod D (segment D a)) a = segment D a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:segment_inj[THEN sym, of b a])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_Ssegment_Ssegment:\"\\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n           (a \\<preceq>\\<^bsub>D\\<^esub> b) = (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (frule Torder.Order[of \"D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D;\n     Order D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (case_tac \"a = b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a = b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b\\<rbrakk>\n    \\<Longrightarrow> b \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) b = Ssegment D b)\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (simp add:Order.le_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) b = Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (cut_tac Ssegment_sub[of \"D\" \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) b = Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (frule SIod_Order[of \"D\" \"Ssegment D b\"], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D;\n     Order (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) b = Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (cut_tac a_notin_Ssegment[of \"b\" \"D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D; Order (SIod D (Ssegment D b));\n     b \\<notin> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) b = Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (frule SIod_carrier[THEN sym, of \"D\" \"Ssegment D b\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D; Order (SIod D (Ssegment D b));\n     b \\<notin> Ssegment D b;\n     Ssegment D b = carrier (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) b = Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (frule eq_set_not_inc[of \"b\" \"Ssegment D b\" \n                         \"carrier (SIod D (Ssegment D b))\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D; Order (SIod D (Ssegment D b));\n     b \\<notin> Ssegment D b;\n     Ssegment D b = carrier (SIod D (Ssegment D b));\n     b \\<notin> carrier (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) b = Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (thin_tac \"b \\<notin> Ssegment D b\",\n        thin_tac \"Ssegment D b = carrier (SIod D (Ssegment D b))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D; Order (SIod D (Ssegment D b));\n     b \\<notin> carrier (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) b = Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (cut_tac Ssegment_free[of \"b\" \"SIod D (Ssegment D b)\" ])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D; Order (SIod D (Ssegment D b));\n     b \\<notin> carrier (SIod D (Ssegment D b));\n     Ssegment (SIod D (Ssegment D b)) b =\n     carrier (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> Ssegment (SIod D (Ssegment D b)) b = Ssegment D b\n 2. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D; Order (SIod D (Ssegment D b));\n     b \\<notin> carrier (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> carrier (SIod D (Ssegment D b))\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; b \\<in> carrier D; Order D; a = b;\n     Ssegment D b \\<subseteq> carrier D; Order (SIod D (Ssegment D b));\n     b \\<notin> carrier (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> b \\<notin> carrier (SIod D (Ssegment D b))\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (subst Order.le_imp_less_or_eq[of \"D\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> (a \\<prec>\\<^bsub>D\\<^esub> b \\<or> a = b) =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (cut_tac Ssegment_sub[of \"D\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b =\n                      (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)", "apply (subst Ssegment_def[of \"SIod D (Ssegment D b)\"],\n       subst SIod_carrier[of \"D\" \"Ssegment D b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b =\n                      ((if a \\<notin> Ssegment D b\n                        then carrier (SIod D (Ssegment D b))\n                        else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                                 a \\<and>\n                                 x \\<in> carrier (SIod D (Ssegment D b))}) =\n                       Ssegment D a)", "apply (subst Ssegment_inc[of \"D\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> (a \\<in> Ssegment D b) =\n                      ((if a \\<notin> Ssegment D b\n                        then carrier (SIod D (Ssegment D b))\n                        else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                                 a \\<and>\n                                 x \\<in> carrier (SIod D (Ssegment D b))}) =\n                       Ssegment D a)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> (if a \\<notin> Ssegment D b\n                       then carrier (SIod D (Ssegment D b))\n                       else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                                a \\<and>\n                                x \\<in> carrier (SIod D (Ssegment D b))}) =\n                      Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                          a \\<and>\n                          x \\<in> carrier (SIod D (Ssegment D b))} =\n                      Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                          a \\<and>\n                          x \\<in> Ssegment D b} =\n                      Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (rule equalityI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                          a \\<and>\n                          x \\<in> Ssegment D b}\n                      \\<subseteq> Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\na \\<and>\nx \\<in> Ssegment D b}\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (rule subsetI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<in> Ssegment D b;\n        x \\<in> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n                    x \\<in> Ssegment D b}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\na \\<and>\nx \\<in> Ssegment D b}\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (simp, erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a;\n        x \\<in> Ssegment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\na \\<and>\nx \\<in> Ssegment D b}\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (simp add:SIod_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<in> Ssegment D b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\na \\<and>\nx \\<in> Ssegment D b}\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (subst Ssegment_def, simp add:Ssegment_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<in> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a\n                      \\<subseteq> {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\na \\<and>\nx \\<in> Ssegment D b}\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (rule subsetI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<in> Ssegment D b; x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (simp add:Ssegment_inc[THEN sym, of \"D\" \"a\" \"b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (cut_tac a1 = x in Ssegment_inc[THEN sym, of  \"D\" _ \"a\"], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 3. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<in> Ssegment D a;\n        (x \\<in> Ssegment D a) = x \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 4. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (simp add:Ssegment_def, assumption, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (cut_tac a = x in Order.less_trans[of \"D\"  _ \"a\" \"b\"], assumption)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 3. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> b \\<in> carrier D\n 4. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> a\n 5. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> b\n 6. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 7. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (simp add:Ssegment_def, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (cut_tac a = x in Ssegment_inc[of \"D\" _ \"b\"], assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> b \\<in> carrier D\n 3. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> b;\n        x \\<prec>\\<^bsub>D\\<^esub> b = (x \\<in> Ssegment D b)\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 4. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (simp add:Ssegment_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> b \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> b;\n        x \\<prec>\\<^bsub>D\\<^esub> b = (x \\<in> Ssegment D b)\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 3. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply assumption+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<prec>\\<^bsub>D\\<^esub> b;\n        x \\<prec>\\<^bsub>D\\<^esub> b = (x \\<in> Ssegment D b)\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub>\n                         a \\<and>\n                         x \\<in> Ssegment D b\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (cut_tac a = a in Ssegment_inc[of \"D\" _ \"b\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> Order D\n 2. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier D\n 3. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> b \\<in> carrier D\n 4. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>D\\<^esub> b;\n        a \\<prec>\\<^bsub>D\\<^esub> b = (a \\<in> Ssegment D b)\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a\n 5. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply assumption+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>D\\<^esub> b;\n        a \\<prec>\\<^bsub>D\\<^esub> b = (a \\<in> Ssegment D b)\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n        a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n        a \\<in> Ssegment D b; x \\<prec>\\<^bsub>D\\<^esub> a;\n        x \\<in> Ssegment D a; x \\<in> Ssegment D b;\n        x \\<prec>\\<^bsub>D\\<^esub> b; a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a\n 2. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (simp add:SIod_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     (if a \\<notin> Ssegment D b then carrier (SIod D (Ssegment D b))\n      else {x. x \\<prec>\\<^bsub>SIod D (Ssegment D b)\\<^esub> a \\<and>\n               x \\<in> carrier (SIod D (Ssegment D b))}) =\n     Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> a \\<in> Ssegment D b", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     carrier (SIod D (Ssegment D b)) = Ssegment D a;\n     a \\<notin> Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D a \\<subseteq> carrier D;\n     Ssegment D b = Ssegment D a; a \\<notin> Ssegment D a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule sym, thin_tac \"Ssegment D b = Ssegment D a\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     a \\<notin> Ssegment D b; Ssegment D a = Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Ssegment_inc[THEN sym, of \"D\" \"a\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     \\<not> a \\<prec>\\<^bsub>D\\<^esub> b;\n     Ssegment D a = Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Torder.not_less_le[of \"D\" \"a\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     a \\<noteq> b; Ssegment D b \\<subseteq> carrier D;\n     b \\<preceq>\\<^bsub>D\\<^esub> a; Ssegment D a = Ssegment D b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule not_sym, thin_tac \"a \\<noteq> b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D b \\<subseteq> carrier D; b \\<preceq>\\<^bsub>D\\<^esub> a;\n     Ssegment D a = Ssegment D b; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Order.le_imp_less_or_eq[of \"D\" \"b\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D b \\<subseteq> carrier D; b \\<prec>\\<^bsub>D\\<^esub> a;\n     Ssegment D a = Ssegment D b; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Ssegment_inc[of \"D\" \"b\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Torder D; a \\<in> carrier D; b \\<in> carrier D; Order D;\n     Ssegment D b \\<subseteq> carrier D; b \\<in> Ssegment D b;\n     Ssegment D a = Ssegment D b; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:a_notin_Ssegment[of \"b\" \"D\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) inc_segment_segment:\"\\<lbrakk>b \\<in> carrier D;\n      a \\<in> segment D b\\<rbrakk> \\<Longrightarrow> segment (Iod D (segment D b)) a = segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D b)) a = segment D a", "apply (cut_tac segment_sub[of \"b\"],\n       frule subsetD[of \"segment D b\" \"carrier D\" \"a\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D (segment D b)) a = segment D a", "apply (subst le_segment_segment[THEN sym, of \"a\" \"b\"],\n         assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a \\<in> segment D b;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "apply (simp add:segment_inc[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<in> carrier D; a \\<prec> b;\n     segment D b \\<subseteq> carrier D; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b", "apply (simp add:less_imp_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_segment:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n      (segment (Iod D (segment D b)) a = segment D a) =\n      ((segment D a) \\<subseteq>  (segment D b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (segment (Iod D (segment D b)) a = segment D a) =\n                      (segment D a \\<subseteq> segment D b)", "apply (subst le_segment_segment[THEN sym, of \"a\" \"b\"],\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> a \\<preceq> b = (segment D a \\<subseteq> segment D b)", "apply (simp add:segment_le_mono[of \"a\" \"b\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) less_in_Iod:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n      \\<Longrightarrow> (a \\<prec> b) = (a \\<in> carrier (Iod D (segment D b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> a \\<prec> b = (a \\<in> carrier (Iod D (segment D b)))", "apply (simp add:Iod_def segment_inc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  SS :: \"_ \\<Rightarrow> 'a set Order\" where\n  \"SS D = \\<lparr>carrier = {X. \\<exists>a\\<in>carrier D. X = segment D a}, rel =\n    {XX. XX \\<in> {X. \\<exists>a\\<in>carrier D. X = segment D a} \\<times> \n    {X. \\<exists>a\\<in>carrier D. X = segment D a} \\<and> ((fst XX) \\<subseteq> (snd XX))} \\<rparr>\""], ["", "(** Ordered set consisting of segments **)"], ["", "definition\n  segmap::\"_ \\<Rightarrow> 'a \\<Rightarrow> 'a set\" where\n  \"segmap D = (\\<lambda>x\\<in>(carrier D). segment D x)\""], ["", "lemma segmap_func:\"segmap D \\<in> carrier D \\<rightarrow> carrier (SS D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segmap D \\<in> carrier D \\<rightarrow> carrier (SS D)", "by (simp add:SS_def segmap_def Pi_def) blast"], ["", "lemma (in Worder) ord_isom_segmap:\" ord_isom D (SS D) (segmap D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_isom D (SS D) (segmap D)", "apply (simp add:ord_isom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_inj D (SS D) (segmap D) \\<and>\n    surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ord_inj D (SS D) (segmap D)\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:ord_inj_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. segmap D \\<in> extensional (carrier D) \\<and>\n    segmap D \\<in> carrier D \\<rightarrow> carrier (SS D) \\<and>\n    inj_on (segmap D) (carrier D) \\<and>\n    (\\<forall>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier D.\n           a \\<prec> b = segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b)\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. segmap D \\<in> extensional (carrier D)\n 2. segmap D \\<in> carrier D \\<rightarrow> carrier (SS D) \\<and>\n    inj_on (segmap D) (carrier D) \\<and>\n    (\\<forall>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier D.\n           a \\<prec> b = segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b)\n 3. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:segmap_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. segmap D \\<in> carrier D \\<rightarrow> carrier (SS D) \\<and>\n    inj_on (segmap D) (carrier D) \\<and>\n    (\\<forall>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier D.\n           a \\<prec> b = segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b)\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. segmap D \\<in> carrier D \\<rightarrow> carrier (SS D)\n 2. inj_on (segmap D) (carrier D) \\<and>\n    (\\<forall>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier D.\n           a \\<prec> b = segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b)\n 3. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:segmap_func)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj_on (segmap D) (carrier D) \\<and>\n    (\\<forall>a\\<in>carrier D.\n        \\<forall>b\\<in>carrier D.\n           a \\<prec> b = segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b)\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. inj_on (segmap D) (carrier D)\n 2. \\<forall>a\\<in>carrier D.\n       \\<forall>b\\<in>carrier D.\n          a \\<prec> b = segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b\n 3. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x\\<in>carrier D.\n       \\<forall>y\\<in>carrier D.\n          segmap D x = segmap D y \\<longrightarrow> x = y\n 2. \\<forall>a\\<in>carrier D.\n       \\<forall>b\\<in>carrier D.\n          a \\<prec> b = segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b\n 3. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply ((rule ballI)+, rule impI, simp add:segmap_def,\n        simp add:segment_inj[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>a\\<in>carrier D.\n       \\<forall>b\\<in>carrier D.\n          a \\<prec> b = segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (rule ballI)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b =\n                         segmap D a \\<prec>\\<^bsub>SS D\\<^esub> segmap D b\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:oless_def[of \"SS D\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b =\n                         (segmap D a \\<preceq>\\<^bsub>SS D\\<^esub>\n                          segmap D b \\<and>\n                          segmap D a \\<noteq> segmap D b)\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:ole_def SS_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b =\n                         ((\\<exists>aa\\<in>carrier D.\n                              segmap D a = segment D aa) \\<and>\n                          (\\<exists>a\\<in>carrier D.\n                              segmap D b = segment D a) \\<and>\n                          segmap D a \\<subseteq> segmap D b \\<and>\n                          segmap D a \\<noteq> segmap D b)\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (rule iffI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>aa\\<in>carrier D.\n                             segmap D a = segment D aa) \\<and>\n                         (\\<exists>a\\<in>carrier D.\n                             segmap D b = segment D a) \\<and>\n                         segmap D a \\<subseteq> segmap D b \\<and>\n                         segmap D a \\<noteq> segmap D b\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        (\\<exists>aa\\<in>carrier D. segmap D a = segment D aa) \\<and>\n        (\\<exists>a\\<in>carrier D. segmap D b = segment D a) \\<and>\n        segmap D a \\<subseteq> segmap D b \\<and>\n        segmap D a \\<noteq> segmap D b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 3. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:oless_def, erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>aa\\<in>carrier D.\n                             segmap D a = segment D aa) \\<and>\n                         (\\<exists>a\\<in>carrier D.\n                             segmap D b = segment D a) \\<and>\n                         segmap D a \\<subseteq> segmap D b \\<and>\n                         segmap D a \\<noteq> segmap D b\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        (\\<exists>aa\\<in>carrier D. segmap D a = segment D aa) \\<and>\n        (\\<exists>a\\<in>carrier D. segmap D b = segment D a) \\<and>\n        segmap D a \\<subseteq> segmap D b \\<and>\n        segmap D a \\<noteq> segmap D b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 3. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (frule_tac a = a and b = b in segment_le_mono, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n        a \\<noteq> b;\n        a \\<preceq> b = (segment D a \\<subseteq> segment D b)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>aa\\<in>carrier D.\n                             segmap D a = segment D aa) \\<and>\n                         (\\<exists>a\\<in>carrier D.\n                             segmap D b = segment D a) \\<and>\n                         segmap D a \\<subseteq> segmap D b \\<and>\n                         segmap D a \\<noteq> segmap D b\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        (\\<exists>aa\\<in>carrier D. segmap D a = segment D aa) \\<and>\n        (\\<exists>a\\<in>carrier D. segmap D b = segment D a) \\<and>\n        segmap D a \\<subseteq> segmap D b \\<and>\n        segmap D a \\<noteq> segmap D b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 3. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:segment_inj segmap_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D a \\<subseteq> segment D b;\n        segment D a \\<noteq> segment D b; a \\<preceq> b\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>aa\\<in>carrier D.\n                             segment D a = segment D aa) \\<and>\n                         (\\<exists>a\\<in>carrier D.\n                             segment D b = segment D a)\n 2. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        (\\<exists>aa\\<in>carrier D. segmap D a = segment D aa) \\<and>\n        (\\<exists>a\\<in>carrier D. segmap D b = segment D a) \\<and>\n        segmap D a \\<subseteq> segmap D b \\<and>\n        segmap D a \\<noteq> segmap D b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 3. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        (\\<exists>aa\\<in>carrier D. segmap D a = segment D aa) \\<and>\n        (\\<exists>a\\<in>carrier D. segmap D b = segment D a) \\<and>\n        segmap D a \\<subseteq> segmap D b \\<and>\n        segmap D a \\<noteq> segmap D b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        \\<exists>aa\\<in>carrier D. segmap D a = segment D aa;\n        \\<exists>a\\<in>carrier D. segmap D b = segment D a;\n        segmap D a \\<subseteq> segmap D b;\n        segmap D a \\<noteq> segmap D b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (thin_tac \"\\<exists>aa\\<in>carrier D. segmap D a = segment D aa\",\n          thin_tac \" \\<exists>a\\<in>carrier D. segmap D b = segment D a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segmap D a \\<subseteq> segmap D b;\n        segmap D a \\<noteq> segmap D b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:segmap_def segment_inj[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n        segment D a \\<subseteq> segment D b; a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:segment_le_mono[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<preceq> b;\n        a \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b\n 2. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. surj_to (segmap D) (carrier D) (carrier (SS D))", "apply (rule surj_to_test[of \"segmap D\" \"carrier D\" \"carrier (SS D)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. segmap D \\<in> carrier D \\<rightarrow> carrier (SS D)\n 2. \\<forall>b\\<in>carrier (SS D). \\<exists>a\\<in>carrier D. segmap D a = b", "apply (simp add:segmap_func)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>carrier (SS D). \\<exists>a\\<in>carrier D. segmap D a = b", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> carrier (SS D) \\<Longrightarrow>\n       \\<exists>a\\<in>carrier D. segmap D a = b", "apply (simp add:SS_def, erule bexE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b a.\n       \\<lbrakk>a \\<in> carrier D; b = segment D a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>aa\\<in>carrier D.\n                            segmap D aa = segment D a", "apply (simp add:segmap_def, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) nonequiv_segment:\"a \\<in> carrier D \\<Longrightarrow>\n                                   \\<not> ord_equiv D (Iod D (segment D a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier D \\<Longrightarrow>\n    \\<not> ord_equiv D (Iod D (segment D a))", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; ord_equiv D (Iod D (segment D a))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D;\n     \\<exists>f. ord_isom D (Iod D (segment D a)) f\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D;\n        ord_isom D (Iod D (segment D a)) f\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac segment_sub[of \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Iod_Order[of \"segment D a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D;\n        Order (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac f = f in ord_isom_func[of \"Iod D (segment D a)\"],\n               assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        f \\<in> carrier D \\<rightarrow>\n                carrier (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac f = f and a = a in ord_isom_mem[of \"Iod D (segment D a)\"]\n        , assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        f \\<in> carrier D \\<rightarrow> carrier (Iod D (segment D a));\n        f a \\<in> carrier (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac f = f in to_subset [of \"segment D a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        f \\<in> carrier D \\<rightarrow> carrier (Iod D (segment D a));\n        f a \\<in> carrier (Iod D (segment D a));\n        \\<forall>a.\n           a \\<in> carrier D \\<longrightarrow> a \\<preceq> f a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule_tac a = a in forall_spec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        f \\<in> carrier D \\<rightarrow> carrier (Iod D (segment D a));\n        f a \\<in> carrier (Iod D (segment D a)); a \\<preceq> f a\\<rbrakk>\n       \\<Longrightarrow> False", "(*\n apply (thin_tac \"\\<forall>a. a \\<in> carrier D \\<longrightarrow>  a \\<preceq> (f a)\") *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        f \\<in> carrier D \\<rightarrow> carrier (Iod D (segment D a));\n        f a \\<in> carrier (Iod D (segment D a)); a \\<preceq> f a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        f \\<in> carrier D \\<rightarrow> segment D a; f a \\<in> segment D a;\n        a \\<preceq> f a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = \"f a\" in subsetD[of \"segment D a\" \"carrier D\" ], \n         assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        f \\<in> carrier D \\<rightarrow> segment D a; f a \\<in> segment D a;\n        a \\<preceq> f a; f a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:segment_inc[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>a \\<in> carrier D; ord_isom D (Iod D (segment D a)) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        f \\<in> carrier D \\<rightarrow> segment D a; f a \\<prec> a;\n        a \\<preceq> f a; f a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:not_le_less[THEN sym, of \"a\" _])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nonequiv_Ssegment:\"\\<lbrakk>Worder D; a \\<in> carrier D\\<rbrakk> \\<Longrightarrow>\n                                   \\<not> ord_equiv D (SIod D (Ssegment D a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv D (SIod D (Ssegment D a))", "apply (frule Worder.Order[of \"D\"], frule Worder.Torder[of \"D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv D (SIod D (Ssegment D a))", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n     ord_equiv D (SIod D (Ssegment D a))\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n     \\<exists>f. ord_isom D (SIod D (Ssegment D a)) f\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f\\<rbrakk>\n       \\<Longrightarrow> False", "apply (cut_tac Ssegment_sub[of \"D\" \"a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule SIod_Order[of \"D\" \"Ssegment D a\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D;\n        Order (SIod D (Ssegment D a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac f = f in Order.ord_isom_func[of \"D\" \"SIod D (Ssegment D a)\"],\n               assumption+,\n frule_tac f = f and a = a in Order.ord_isom_mem[of \"D\" \n                                       \"SIod D (Ssegment D a)\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n        f \\<in> carrier D \\<rightarrow> carrier (SIod D (Ssegment D a));\n        f a \\<in> carrier (SIod D (Ssegment D a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac f = f in to_subsetS [of \"D\" \"Ssegment D a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n        f \\<in> carrier D \\<rightarrow> carrier (SIod D (Ssegment D a));\n        f a \\<in> carrier (SIod D (Ssegment D a));\n        \\<forall>a.\n           a \\<in> carrier D \\<longrightarrow>\n           a \\<preceq>\\<^bsub>D\\<^esub> f a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule_tac a = a in forall_spec, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n        f \\<in> carrier D \\<rightarrow> carrier (SIod D (Ssegment D a));\n        f a \\<in> carrier (SIod D (Ssegment D a));\n        a \\<preceq>\\<^bsub>D\\<^esub> f a\\<rbrakk>\n       \\<Longrightarrow> False", "(*\n        thin_tac \"\\<forall>a. a \\<in> carrier D \\<longrightarrow> a \\<preceq>\\<^bsub>D\\<^esub> f a\") *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n        f \\<in> carrier D \\<rightarrow> carrier (SIod D (Ssegment D a));\n        f a \\<in> carrier (SIod D (Ssegment D a));\n        a \\<preceq>\\<^bsub>D\\<^esub> f a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n        f \\<in> carrier D \\<rightarrow> Ssegment D a;\n        f a \\<in> Ssegment D a; a \\<preceq>\\<^bsub>D\\<^esub> f a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = \"f a\" in subsetD[of \"Ssegment D a\" \"carrier D\"], \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n        f \\<in> carrier D \\<rightarrow> Ssegment D a;\n        f a \\<in> Ssegment D a; a \\<preceq>\\<^bsub>D\\<^esub> f a;\n        f a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Ssegment_inc[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder D; a \\<in> carrier D; Order D; Torder D;\n        ord_isom D (SIod D (Ssegment D a)) f;\n        Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n        f \\<in> carrier D \\<rightarrow> Ssegment D a;\n        f a \\<prec>\\<^bsub>D\\<^esub> a; a \\<preceq>\\<^bsub>D\\<^esub> f a;\n        f a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Torder.not_le_less[THEN sym, of \"D\" \"a\" _])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) subset_Worder:\" T \\<subseteq> carrier D \\<Longrightarrow>\n                    Worder (Iod D T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> carrier D \\<Longrightarrow> Worder (Iod D T)", "apply (rule Worder.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. T \\<subseteq> carrier D \\<Longrightarrow> Torder (Iod D T)\n 2. T \\<subseteq> carrier D \\<Longrightarrow> Worder_axioms (Iod D T)", "apply (simp add: Iod_Torder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> carrier D \\<Longrightarrow> Worder_axioms (Iod D T)", "apply (rule Worder_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> carrier D \\<Longrightarrow>\n    \\<forall>X.\n       X \\<subseteq> carrier (Iod D T) \\<and>\n       X \\<noteq> {} \\<longrightarrow>\n       (\\<exists>x. minimum_elem (Iod D T) X x)", "apply (rule allI, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        X \\<subseteq> carrier (Iod D T) \\<and> X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod D T) X x", "apply (simp add:Iod_carrier, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T;\n        X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod D T) X x", "apply (cut_tac ex_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T; X \\<noteq> {};\n        \\<forall>X.\n           X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod D T) X x", "apply (frule_tac A = X and B = T and C = \"carrier D\" in subset_trans, \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T; X \\<noteq> {};\n        \\<forall>X.\n           X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem D X x);\n        X \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod D T) X x", "apply (frule_tac a = X in forall_spec, simp,\n        thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T; X \\<noteq> {};\n        X \\<subseteq> carrier D; \\<exists>x. minimum_elem D X x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod D T) X x", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T; X \\<noteq> {};\n        X \\<subseteq> carrier D; minimum_elem D X x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod D T) X x", "apply (simp add:minimum_elem_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X x.\n       \\<lbrakk>T \\<subseteq> carrier D; X \\<subseteq> T; X \\<noteq> {};\n        X \\<subseteq> carrier D; minimum_elem (Iod D T) X x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (Iod D T) X x", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SIod_Worder:\"\\<lbrakk>Worder D; T \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> Worder (SIod D T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> Worder (SIod D T)", "apply (frule Worder.Order[of \"D\"],\n       frule Worder.Torder[of \"D\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D\\<rbrakk>\n    \\<Longrightarrow> Worder (SIod D T)", "apply (rule Worder.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D\\<rbrakk>\n    \\<Longrightarrow> Torder (SIod D T)\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (SIod D T)", "apply (simp add: SIod_Torder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D\\<rbrakk>\n    \\<Longrightarrow> Worder_axioms (SIod D T)", "apply (rule Worder_axioms.intro)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D\\<rbrakk>\n    \\<Longrightarrow> \\<forall>X.\n                         X \\<subseteq> carrier (SIod D T) \\<and>\n                         X \\<noteq> {} \\<longrightarrow>\n                         (\\<exists>x. minimum_elem (SIod D T) X x)", "apply (rule allI, rule impI, erule conjE, simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D;\n        X \\<subseteq> T; X \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (SIod D T) X x", "apply (frule Worder.ex_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D;\n        X \\<subseteq> T; X \\<noteq> {};\n        \\<forall>X.\n           X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (SIod D T) X x", "apply (frule_tac A = X and B = T and C = \"carrier D\" in subset_trans, \n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D;\n        X \\<subseteq> T; X \\<noteq> {};\n        \\<forall>X.\n           X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x. minimum_elem D X x);\n        X \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (SIod D T) X x", "apply (frule_tac a = X in forall_spec, simp,\n        thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; Order D; Torder D;\n        X \\<subseteq> T; X \\<noteq> {}; X \\<subseteq> carrier D;\n        \\<exists>x. minimum_elem D X x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. minimum_elem (SIod D T) X x", "apply (simp add:minimum_elem_Ssub)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) segment_Worder:\"Worder (Iod D (segment D a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder (Iod D (segment D a))", "apply (rule subset_Worder [of \"segment D a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. segment D a \\<subseteq> carrier D", "apply (rule segment_sub[of a])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_Worder:\"Worder D \\<Longrightarrow>Worder (SIod D (Ssegment D a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder D \\<Longrightarrow> Worder (SIod D (Ssegment D a))", "apply (rule SIod_Worder, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Worder D \\<Longrightarrow> Ssegment D a \\<subseteq> carrier D", "apply (rule Ssegment_sub[of \"D\" \"a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) segment_unique1:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk> \\<Longrightarrow>\n       \\<not> ord_equiv (Iod D (segment D b)) (Iod D (segment D a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (Iod D (segment D b))\n                              (Iod D (segment D a))", "apply (cut_tac segment_Worder[of b],\n       cut_tac segment_sub[of b],\n       frule segment_mono[of a b], assumption, simp add:psubset_eq,\n       erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     Worder (Iod D (segment D b)); segment D b \\<subseteq> carrier D;\n     a \\<prec> b; segment D a \\<subseteq> segment D b;\n     segment D a \\<noteq> segment D b\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (Iod D (segment D b))\n                              (Iod D (segment D a))", "apply (simp add:segment_inc,\n       frule Worder.nonequiv_segment[of \"Iod D (segment D b)\" a],\n       simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     Worder (Iod D (segment D b)); segment D b \\<subseteq> carrier D;\n     a \\<in> segment D b; segment D a \\<subseteq> segment D b;\n     segment D a \\<noteq> segment D b;\n     \\<not> ord_equiv (Iod D (segment D b))\n             (Iod (Iod D (segment D b))\n               (segment (Iod D (segment D b)) a))\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (Iod D (segment D b))\n                              (Iod D (segment D a))", "apply (frule segment_segment[THEN sym, of a b], assumption, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     Worder (Iod D (segment D b)); segment D b \\<subseteq> carrier D;\n     a \\<in> segment D b; segment (Iod D (segment D b)) a = segment D a;\n     segment D a \\<noteq> segment D b;\n     \\<not> ord_equiv (Iod D (segment D b))\n             (Iod (Iod D (segment D b)) (segment D a));\n     segment D a \\<subseteq> segment D b\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (Iod D (segment D b))\n                              (Iod D (segment D a))", "apply (simp add:Iod_sub_sub[of \"segment D a\" \"segment D b\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_unique1:\"\\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D; a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk> \\<Longrightarrow>\n       \\<not> ord_equiv (SIod D (Ssegment D b)) (SIod D (Ssegment D a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (SIod D (Ssegment D b))\n                              (SIod D (Ssegment D a))", "apply (frule Worder.Order[of \"D\"], frule Worder.Torder[of \"D\"],\n       frule Ssegment_inc[of \"D\" \"a\" \"b\"], assumption+, simp,\n       frule Ssegment_Worder [of \"D\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<in> Ssegment D b; Order D; Torder D; a \\<prec>\\<^bsub>D\\<^esub> b;\n     Worder (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (SIod D (Ssegment D b))\n                              (SIod D (Ssegment D a))", "apply (cut_tac Ssegment_sub[of \"D\" \"b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<in> Ssegment D b; Order D; Torder D; a \\<prec>\\<^bsub>D\\<^esub> b;\n     Worder (SIod D (Ssegment D b));\n     Ssegment D b \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (SIod D (Ssegment D b))\n                              (SIod D (Ssegment D a))", "apply (\n        frule Ssegment_mono[of D a b], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<in> Ssegment D b; Order D; Torder D;\n     Ssegment D a \\<subset> Ssegment D b; Worder (SIod D (Ssegment D b));\n     Ssegment D b \\<subseteq> carrier D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (SIod D (Ssegment D b))\n                              (SIod D (Ssegment D a))", "apply (frule nonequiv_Ssegment[of \"SIod D (Ssegment D b)\" \"a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<in> Ssegment D b; Order D; Torder D;\n     Ssegment D a \\<subset> Ssegment D b; Worder (SIod D (Ssegment D b));\n     Ssegment D b \\<subseteq> carrier D;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> a \\<in> carrier (SIod D (Ssegment D b))\n 2. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<in> Ssegment D b; Order D; Torder D;\n     Ssegment D a \\<subset> Ssegment D b; Worder (SIod D (Ssegment D b));\n     Ssegment D b \\<subseteq> carrier D; a \\<prec>\\<^bsub>D\\<^esub> b;\n     \\<not> ord_equiv (SIod D (Ssegment D b))\n             (SIod (SIod D (Ssegment D b))\n               (Ssegment (SIod D (Ssegment D b)) a))\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (SIod D (Ssegment D b))\n                              (SIod D (Ssegment D a))", "apply (simp add:SIod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<in> Ssegment D b; Order D; Torder D;\n     Ssegment D a \\<subset> Ssegment D b; Worder (SIod D (Ssegment D b));\n     Ssegment D b \\<subseteq> carrier D; a \\<prec>\\<^bsub>D\\<^esub> b;\n     \\<not> ord_equiv (SIod D (Ssegment D b))\n             (SIod (SIod D (Ssegment D b))\n               (Ssegment (SIod D (Ssegment D b)) a))\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (SIod D (Ssegment D b))\n                              (SIod D (Ssegment D a))", "apply (frule le_Ssegment_Ssegment[of D a b], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<in> Ssegment D b; Order D; Torder D;\n     Ssegment D a \\<subset> Ssegment D b; Worder (SIod D (Ssegment D b));\n     Ssegment D b \\<subseteq> carrier D; a \\<prec>\\<^bsub>D\\<^esub> b;\n     \\<not> ord_equiv (SIod D (Ssegment D b))\n             (SIod (SIod D (Ssegment D b))\n               (Ssegment (SIod D (Ssegment D b)) a));\n     a \\<preceq>\\<^bsub>D\\<^esub> b =\n     (Ssegment (SIod D (Ssegment D b)) a = Ssegment D a)\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (SIod D (Ssegment D b))\n                              (SIod D (Ssegment D a))", "apply (simp add:oless_def psubset_eq, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     a \\<in> Ssegment D b; Order D; Torder D;\n     Worder (SIod D (Ssegment D b)); Ssegment D b \\<subseteq> carrier D;\n     \\<not> ord_equiv (SIod D (Ssegment D b))\n             (SIod (SIod D (Ssegment D b)) (Ssegment D a));\n     a \\<preceq>\\<^bsub>D\\<^esub> b; Ssegment D a \\<subseteq> Ssegment D b;\n     Ssegment D a \\<noteq> Ssegment D b;\n     Ssegment (SIod D (Ssegment D b)) a = Ssegment D a;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> \\<not> ord_equiv (SIod D (Ssegment D b))\n                              (SIod D (Ssegment D a))", "apply (simp add:SIod_sub_sub[of \"Ssegment D a\" \"Ssegment D b\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) segment_unique:\"\\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n      ord_equiv (Iod D (segment D a)) (Iod D (segment D b)) \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b))\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (cut_tac segment_sub[of a],\n       frule_tac Iod_Order[of \"segment D a\"],\n       cut_tac segment_sub[of b],\n       frule_tac Iod_Order[of \"segment D b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b))\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule less_linear[of \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b \\<or> a = b \\<or> b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b \\<or> b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule segment_unique1[of \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; a \\<prec> b;\n     \\<not> ord_equiv (Iod D (segment D b)) (Iod D (segment D a))\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Order.ord_equiv_sym[of \"Iod D (segment D a)\" \n                                                \"Iod D (segment D b)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (Iod D (segment D a)) (Iod D (segment D b));\n     segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n     segment D b \\<subseteq> carrier D; Order (Iod D (segment D b));\n     a \\<noteq> b; b \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:segment_unique1[of \"b\" \"a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Ssegment_unique:\"\\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n      ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)) \\<rbrakk> \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (frule Worder.Order[of \"D\"], frule Worder.Torder[of \"D\"],\n       cut_tac Ssegment_sub[of \"D\" \"b\"],\n       cut_tac Ssegment_sub[of \"D\" \"a\"],\n       frule SIod_Order[of \"D\" \"Ssegment D a\"], assumption,\n       frule SIod_Order[of \"D\" \"Ssegment D b\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b))\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b)); a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule Torder.less_linear[of \"D\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b)); a \\<noteq> b;\n     a \\<prec>\\<^bsub>D\\<^esub> b \\<or>\n     a = b \\<or> b \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b)); a \\<noteq> b;\n     a \\<prec>\\<^bsub>D\\<^esub> b \\<or>\n     b \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b)); a \\<noteq> b;\n     a \\<prec>\\<^bsub>D\\<^esub> b\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b)); a \\<noteq> b;\n     b \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (frule Ssegment_unique1[of \"D\" \"a\" \"b\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b)); a \\<noteq> b;\n     a \\<prec>\\<^bsub>D\\<^esub> b;\n     \\<not> ord_equiv (SIod D (Ssegment D b))\n             (SIod D (Ssegment D a))\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b)); a \\<noteq> b;\n     b \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Order.ord_equiv_sym[of \"SIod D (Ssegment D a)\" \n                                                \"SIod D (Ssegment D b)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; a \\<in> carrier D; b \\<in> carrier D;\n     ord_equiv (SIod D (Ssegment D a)) (SIod D (Ssegment D b)); Order D;\n     Torder D; Ssegment D b \\<subseteq> carrier D;\n     Ssegment D a \\<subseteq> carrier D; Order (SIod D (Ssegment D a));\n     Order (SIod D (Ssegment D b)); a \\<noteq> b;\n     b \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:Ssegment_unique1[of \"D\" \"b\" \"a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) subset_segment:\"\\<lbrakk>T \\<subseteq> carrier D; \n      \\<forall>b\\<in>T. \\<forall>x. x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n      minimum_elem D (carrier D - T) a\\<rbrakk> \\<Longrightarrow> T = segment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a\\<rbrakk>\n    \\<Longrightarrow> T = segment D a", "apply (cut_tac Diff_subset[of \"carrier D\" T],\n       frule minimum_elem_mem [of \"carrier D - T\" a], assumption,\n       simp, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> T = segment D a", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> T \\<subseteq> segment D a\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D; a \\<notin> T;\n        x \\<in> T\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (frule_tac c = x in subsetD[of T \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D; a \\<notin> T;\n        x \\<in> T; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment D a\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (subst segment_inc[THEN sym], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D; a \\<notin> T;\n        x \\<in> T; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (frule_tac x = x in bspec, assumption,\n        thin_tac \"\\<forall>b\\<in>T. \\<forall>x. x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T\\<rbrakk>\n       \\<Longrightarrow> x \\<prec> a\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        \\<not> x \\<prec> a\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (frule_tac a = x and b = a in not_less_le, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        \\<not> x \\<prec> a; (\\<not> x \\<prec> a) = a \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (simp add:le_imp_less_or_eq, thin_tac \"\\<not> x \\<prec> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec> x \\<or> a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (frule_tac a = a in forall_spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec> x\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> x \\<and> a \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (\n        thin_tac \"\\<forall>xa. xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow> xa \\<in> T\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        a \\<prec> x\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> x \\<and> a \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec> x \\<and> xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> segment D a \\<subseteq> T", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D; a \\<notin> T;\n        x \\<in> segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T", "apply (cut_tac a = a in segment_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D; a \\<notin> T;\n        x \\<in> segment D a; segment D a \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T", "apply (frule_tac c = x and A = \"segment D a\" in subsetD[of _ \"carrier D\"],\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D; a \\<notin> T;\n        x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T", "apply (thin_tac \"\\<forall>b\\<in>T. \\<forall>x. x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> segment D a;\n        segment D a \\<subseteq> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D; minimum_elem D (carrier D - T) a;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> segment D a;\n        segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n        x \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        Ball (carrier D - T) ((\\<preceq>) a); a \\<in> carrier D;\n        a \\<notin> T; x \\<in> segment D a;\n        segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n        x \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = x in bspec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        Ball (carrier D - T) ((\\<preceq>) a); a \\<in> carrier D;\n        a \\<notin> T; x \\<in> segment D a;\n        segment D a \\<subseteq> carrier D; x \\<in> carrier D; x \\<notin> T;\n        a \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:segment_inc[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>x\\<in>carrier D - T. a \\<preceq> x; a \\<in> carrier D;\n        a \\<notin> T; x \\<prec> a; segment D a \\<subseteq> carrier D;\n        x \\<in> carrier D; x \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:not_le_less[THEN sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_Ssegment:\"\\<lbrakk>Worder D; T \\<subseteq> carrier D; \n      \\<forall>b\\<in>T. \\<forall>x. x \\<prec>\\<^bsub>D\\<^esub> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n      minimum_elem D (carrier D - T) a\\<rbrakk> \\<Longrightarrow> T = Ssegment D a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a\\<rbrakk>\n    \\<Longrightarrow> T = Ssegment D a", "apply (cut_tac Diff_subset[of \"carrier D\" T],\n       frule Worder.Torder[of D],\n       frule Worder.Order[of D],\n       frule Order.minimum_elem_mem [of D \"carrier D - T\" a], assumption+,\n       simp, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> T = Ssegment D a", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> T \\<subseteq> Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (frule_tac c = x in subsetD[of T \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (subst Ssegment_inc[THEN sym], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (frule_tac x = x in bspec, assumption,\n        thin_tac \"\\<forall>b\\<in>T. \\<forall>x. x \\<prec>\\<^bsub>D\\<^esub> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        \\<not> x \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (frule_tac a = x and b = a in Torder.not_less_le, assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        \\<not> x \\<prec>\\<^bsub>D\\<^esub> a;\n        (\\<not> x \\<prec>\\<^bsub>D\\<^esub> a) =\n        a \\<preceq>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (simp add:Order.le_imp_less_or_eq, thin_tac \"\\<not> x \\<prec>\\<^bsub>D\\<^esub> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec>\\<^bsub>D\\<^esub> x \\<or> a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (frule_tac a = a in forall_spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n                         a \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec>\\<^bsub>D\\<^esub> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (\n        thin_tac \"\\<forall>xa. xa \\<prec>\\<^bsub>D\\<^esub> x \\<and> xa \\<in> carrier D \\<longrightarrow> xa \\<in> T\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        a \\<prec>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n                         a \\<in> carrier D\n 2. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec>\\<^bsub>D\\<^esub> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec>\\<^bsub>D\\<^esub> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     minimum_elem D (carrier D - T) a; Torder D; Order D; a \\<in> carrier D;\n     a \\<notin> T\\<rbrakk>\n    \\<Longrightarrow> Ssegment D a \\<subseteq> T", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T", "apply (cut_tac a = a in Ssegment_sub[of D])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a;\n        Ssegment D a \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T", "apply (frule_tac c = x and A = \"Ssegment D a\" in subsetD[of _ \"carrier D\"],\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T", "apply (thin_tac \"\\<forall>b\\<in>T. \\<forall>x. x \\<prec>\\<^bsub>D\\<^esub> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D;\n        x \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        Ball (carrier D - T) ((\\<preceq>\\<^bsub>D\\<^esub>) a); Torder D;\n        Order D; a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D;\n        x \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = x in bspec, simp,\n        thin_tac \"Ball (carrier D - T) ((\\<preceq>\\<^bsub>D\\<^esub>) a)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D; x \\<notin> T;\n        a \\<preceq>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Ssegment_inc[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D; Torder D; Order D;\n        a \\<in> carrier D; a \\<notin> T; x \\<prec>\\<^bsub>D\\<^esub> a;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D; x \\<notin> T;\n        a \\<preceq>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:Torder.not_le_less[THEN sym])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) segmentTr:\"\\<lbrakk>T \\<subseteq> carrier D; \n         \\<forall>b \\<in> T. (\\<forall>x.  (x \\<prec> b \\<and> x \\<in> (carrier D) \\<longrightarrow> x \\<in> T))\\<rbrakk> \\<Longrightarrow> \n         (T = carrier D) \\<or> (\\<exists>a. a \\<in> (carrier D) \\<and> T = segment D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T\\<rbrakk>\n    \\<Longrightarrow> T = carrier D \\<or>\n                      (\\<exists>a. a \\<in> carrier D \\<and> T = segment D a)", "apply (case_tac \"T = carrier D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     T = carrier D\\<rbrakk>\n    \\<Longrightarrow> T = carrier D \\<or>\n                      (\\<exists>a. a \\<in> carrier D \\<and> T = segment D a)\n 2. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     T \\<noteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> T = carrier D \\<or>\n                      (\\<exists>a. a \\<in> carrier D \\<and> T = segment D a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     T \\<noteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> T = carrier D \\<or>\n                      (\\<exists>a. a \\<in> carrier D \\<and> T = segment D a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     T \\<noteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = segment D a", "apply (frule not_sym, thin_tac \"T \\<noteq> carrier D\",\n       frule diff_nonempty[of \"carrier D\" \"T\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = segment D a", "apply (cut_tac ex_minimum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {};\n     \\<forall>X.\n        X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = segment D a", "apply (frule_tac a = \"carrier D - T\" in forall_spec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {};\n     \\<forall>X.\n        X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x. minimum_elem D X x);\n     \\<exists>x. minimum_elem D (carrier D - T) x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = segment D a", "apply (thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {};\n     \\<exists>x. minimum_elem D (carrier D - T) x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = segment D a", "apply (erule exE, rename_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        carrier D \\<noteq> T; carrier D - T \\<noteq> {};\n        minimum_elem D (carrier D - T) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = segment D a", "apply (thin_tac \"carrier D \\<noteq> T\", thin_tac \"carrier D - T \\<noteq> {}\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = segment D a", "apply (cut_tac Diff_subset[of \"carrier D\" \"T\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a;\n        carrier D - T \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = segment D a", "apply (frule_tac a = a in minimum_elem_mem[of \"carrier D - T\"],\n               assumption+,\n        thin_tac \"carrier D - T \\<subseteq> carrier D\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D - T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = segment D a", "apply (simp only:Diff_iff, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = segment D a", "apply (frule_tac a = a in subset_segment[of T], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec> b \\<and> x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D; a \\<notin> T;\n        T = segment D a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = segment D a", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SsegmentTr:\"\\<lbrakk>Worder D; T \\<subseteq> carrier D; \n         \\<forall>b \\<in> T. (\\<forall>x.  (x \\<prec>\\<^bsub>D\\<^esub> b \\<and> x \\<in> (carrier D) \\<longrightarrow> x \\<in> T))\\<rbrakk> \\<Longrightarrow> \n         (T = carrier D) \\<or> (\\<exists>a. a \\<in> (carrier D) \\<and> T = Ssegment D a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T\\<rbrakk>\n    \\<Longrightarrow> T = carrier D \\<or>\n                      (\\<exists>a.\n                          a \\<in> carrier D \\<and> T = Ssegment D a)", "apply (case_tac \"T = carrier D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     T = carrier D\\<rbrakk>\n    \\<Longrightarrow> T = carrier D \\<or>\n                      (\\<exists>a.\n                          a \\<in> carrier D \\<and> T = Ssegment D a)\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     T \\<noteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> T = carrier D \\<or>\n                      (\\<exists>a.\n                          a \\<in> carrier D \\<and> T = Ssegment D a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     T \\<noteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> T = carrier D \\<or>\n                      (\\<exists>a.\n                          a \\<in> carrier D \\<and> T = Ssegment D a)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     T \\<noteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = Ssegment D a", "apply (frule not_sym, thin_tac \"T \\<noteq> carrier D\",\n       frule diff_nonempty[of \"carrier D\" \"T\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = Ssegment D a", "apply (cut_tac Worder.ex_minimum[of D])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {};\n     \\<forall>X.\n        X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x. minimum_elem D X x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule_tac a = \"carrier D - T\" in forall_spec, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {};\n     \\<forall>X.\n        X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x. minimum_elem D X x);\n     \\<exists>x. minimum_elem D (carrier D - T) x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (thin_tac \"\\<forall>X. X \\<subseteq> carrier D \\<and> X \\<noteq> {} \\<longrightarrow> (\\<exists>x. minimum_elem D X x)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {};\n     \\<exists>x. minimum_elem D (carrier D - T) x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a. a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (erule exE, rename_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        carrier D \\<noteq> T; carrier D - T \\<noteq> {};\n        minimum_elem D (carrier D - T) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (thin_tac \"carrier D \\<noteq> T\", thin_tac \"carrier D - T \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (cut_tac Diff_subset[of \"carrier D\" \"T\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a;\n        carrier D - T \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule Worder.Order[of D])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a;\n        carrier D - T \\<subseteq> carrier D; Order D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule_tac a = a in Order.minimum_elem_mem[of D \"carrier D - T\"],\n               assumption+,\n        thin_tac \"carrier D - T \\<subseteq> carrier D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D;\n        a \\<in> carrier D - T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (simp only:Diff_iff, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (subgoal_tac \"T = Ssegment D a\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; T = Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier D \\<and> T = Ssegment D a\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> T = Ssegment D a\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> T = Ssegment D a\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (rule equalityI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> T \\<subseteq> Ssegment D a\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (rule subsetI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule_tac c = x in subsetD[of T \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Ssegment D a\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (subst Ssegment_inc[THEN sym], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> a\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule_tac x = x in bspec, assumption,\n        thin_tac \"\\<forall>b\\<in>T. \\<forall>x. x \\<prec>\\<^bsub>D\\<^esub> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T\\<rbrakk>\n       \\<Longrightarrow> x \\<prec>\\<^bsub>D\\<^esub> a\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        \\<not> x \\<prec>\\<^bsub>D\\<^esub> a\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule Worder.Torder[of D],\n        frule_tac a = x and b = a in Torder.not_less_le[of D], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        \\<not> x \\<prec>\\<^bsub>D\\<^esub> a; Torder D;\n        (\\<not> x \\<prec>\\<^bsub>D\\<^esub> a) =\n        a \\<preceq>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (simp add:Order.le_imp_less_or_eq, thin_tac \"\\<not> x \\<prec>\\<^bsub>D\\<^esub> a\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        a \\<prec>\\<^bsub>D\\<^esub> x \\<or> a = x; Torder D\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a \\<prec>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 4. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule_tac a = a in forall_spec)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a \\<prec>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n                         a \\<in> carrier D\n 2. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a \\<prec>\\<^bsub>D\\<^esub> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 5. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (\n        thin_tac \"\\<forall>xa. xa \\<prec>\\<^bsub>D\\<^esub> x \\<and> xa \\<in> carrier D \\<longrightarrow> xa \\<in> T\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D; Torder D;\n        a \\<prec>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> a \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n                         a \\<in> carrier D\n 2. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a \\<prec>\\<^bsub>D\\<^esub> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 5. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a \\<prec>\\<^bsub>D\\<^esub> x; a \\<in> T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 4. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> T; x \\<in> carrier D;\n        \\<forall>xa.\n           xa \\<prec>\\<^bsub>D\\<^esub> x \\<and>\n           xa \\<in> carrier D \\<longrightarrow>\n           xa \\<in> T;\n        Torder D; a = x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 3. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> Ssegment D a \\<subseteq> T\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> Ssegment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule Worder.Torder[of D],\n        frule Torder.Order[of D])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> Ssegment D a; Torder D; Order D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (cut_tac a = a in Ssegment_sub[of D])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> Ssegment D a; Torder D; Order D;\n        Ssegment D a \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule_tac c = x and A = \"Ssegment D a\" in subsetD[of _ \"carrier D\"],\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>b\\<in>T.\n           \\<forall>x.\n              x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n              x \\<in> carrier D \\<longrightarrow>\n              x \\<in> T;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> Ssegment D a; Torder D; Order D;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (thin_tac \"\\<forall>b\\<in>T. \\<forall>x. x \\<prec>\\<^bsub>D\\<^esub> b \\<and> x \\<in> carrier D \\<longrightarrow> x \\<in> T\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; Order D; a \\<in> carrier D;\n        a \\<notin> T; x \\<in> Ssegment D a; Torder D; Order D;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> x \\<in> T\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        minimum_elem D (carrier D - T) a; a \\<in> carrier D; a \\<notin> T;\n        x \\<in> Ssegment D a; Torder D; Order D;\n        Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D;\n        x \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        Ball (carrier D - T) ((\\<preceq>\\<^bsub>D\\<^esub>) a);\n        a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a; Torder D;\n        Order D; Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D;\n        x \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (frule_tac x = x in bspec, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        Ball (carrier D - T) ((\\<preceq>\\<^bsub>D\\<^esub>) a);\n        a \\<in> carrier D; a \\<notin> T; x \\<in> Ssegment D a; Torder D;\n        Order D; Ssegment D a \\<subseteq> carrier D; x \\<in> carrier D;\n        x \\<notin> T; a \\<preceq>\\<^bsub>D\\<^esub> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (simp add:Ssegment_inc[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x.\n       \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n        \\<forall>x\\<in>carrier D - T. a \\<preceq>\\<^bsub>D\\<^esub> x;\n        a \\<in> carrier D; a \\<notin> T; x \\<prec>\\<^bsub>D\\<^esub> a;\n        Torder D; Order D; Ssegment D a \\<subseteq> carrier D;\n        x \\<in> carrier D; x \\<notin> T\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply (simp add:Torder.not_le_less[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder D; T \\<subseteq> carrier D;\n     \\<forall>b\\<in>T.\n        \\<forall>x.\n           x \\<prec>\\<^bsub>D\\<^esub> b \\<and>\n           x \\<in> carrier D \\<longrightarrow>\n           x \\<in> T;\n     carrier D \\<noteq> T; carrier D - T \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Worder D", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) ord_isom_segment_segment:\"\\<lbrakk>Worder E; \n      ord_isom D E f; a \\<in> carrier D \\<rbrakk> \\<Longrightarrow> \n      ord_isom (Iod D (segment D a)) (Iod E (segment E (f a))) \n                                    (\\<lambda>x\\<in>carrier (Iod D (segment D a)). f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; ord_isom D E f; a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D (segment D a))\n                       (Iod E (segment E (f a)))\n                       (restrict f (carrier (Iod D (segment D a))))", "by (frule Worder.Order[of \"E\"],\n       rule ord_isom_segment_segment[of \"E\" \"f\" \"a\"], assumption+)"], ["", "definition\n  Tw :: \"[_ , ('b, 'm1) Order_scheme] \\<Rightarrow> 'a \\<Rightarrow> 'b\"  (\"(2Tw\\<^bsub>_,_\\<^esub>)\" [60,61]60) where\n  \"Tw\\<^bsub>D,T\\<^esub> = (\\<lambda>a\\<in> carrier D. SOME x. x\\<in>carrier T \\<and>\n    ord_equiv (Iod D (segment D a)) (Iod T (segment T x)))\""], ["", "lemma (in Worder) Tw_func:\"\\<lbrakk>Worder T; \n     \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier T. ord_equiv (Iod D (segment D a)) \n         (Iod T (segment T b))\\<rbrakk> \\<Longrightarrow> Tw\\<^bsub>D,T\\<^esub> \\<in> carrier D \\<rightarrow> carrier T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder T;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier T.\n           ord_equiv (Iod D (segment D a)) (Iod T (segment T b))\\<rbrakk>\n    \\<Longrightarrow> Tw\\<^bsub>D,T\\<^esub>\n                      \\<in> carrier D \\<rightarrow> carrier T", "apply (rule Pi_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder T;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier T.\n              ord_equiv (Iod D (segment D a)) (Iod T (segment T b));\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,T\\<^esub>) x \\<in> carrier T", "apply (simp add:Tw_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder T;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier T.\n              ord_equiv (Iod D (segment D a)) (Iod T (segment T b));\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (SOME xa.\n                             xa \\<in> carrier T \\<and>\n                             ord_equiv (Iod D (segment D x))\n                              (Iod T (segment T xa)))\n                         \\<in> carrier T", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder T;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier T.\n              ord_equiv (Iod D (segment D a)) (Iod T (segment T b));\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a.\n                            a \\<in> carrier T \\<and>\n                            ord_equiv (Iod D (segment D x))\n                             (Iod T (segment T a))\n 2. \\<And>x xa.\n       \\<lbrakk>Worder T;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier T.\n              ord_equiv (Iod D (segment D a)) (Iod T (segment T b));\n        x \\<in> carrier D;\n        xa \\<in> carrier T \\<and>\n        ord_equiv (Iod D (segment D x)) (Iod T (segment T xa))\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> carrier T", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>Worder T;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier T.\n              ord_equiv (Iod D (segment D a)) (Iod T (segment T b));\n        x \\<in> carrier D;\n        xa \\<in> carrier T \\<and>\n        ord_equiv (Iod D (segment D x)) (Iod T (segment T xa))\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> carrier T", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Tw_mem:\"\\<lbrakk>Worder E; x \\<in> carrier D;\n     \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. ord_equiv (Iod D (segment D a)) \n         (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E; x \\<in> carrier D;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E", "by (frule Tw_func[of E], assumption,\n       simp add:Pi_def)"], ["", "lemma (in Worder) Tw_equiv:\"\\<lbrakk>Worder T; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier T. ord_equiv (Iod D (segment D a)) \n                         (Iod T (segment T b)); x \\<in> carrier D \\<rbrakk> \\<Longrightarrow> \n      ord_equiv (Iod D (segment D x)) (Iod T (segment T ((Tw\\<^bsub>D,T\\<^esub>) x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder T;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier T.\n           ord_equiv (Iod D (segment D a)) (Iod T (segment T b));\n     x \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod T (segment T ((Tw\\<^bsub>D,T\\<^esub>) x)))", "apply (frule_tac x = x in bspec, assumption+,\n      thin_tac \"\\<forall>a\\<in>carrier D.\n      \\<exists>b\\<in>carrier T. ord_equiv (Iod D (segment D a)) (Iod T (segment T b))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder T; x \\<in> carrier D;\n     \\<exists>b\\<in>carrier T.\n        ord_equiv (Iod D (segment D x)) (Iod T (segment T b))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod T (segment T ((Tw\\<^bsub>D,T\\<^esub>) x)))", "apply (simp add:Tw_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder T; x \\<in> carrier D;\n     \\<exists>b\\<in>carrier T.\n        ord_equiv (Iod D (segment D x)) (Iod T (segment T b))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod T\n                         (segment T\n                           (SOME xa.\n                               xa \\<in> carrier T \\<and>\n                               ord_equiv (Iod D (segment D x))\n                                (Iod T (segment T xa)))))", "apply (rule someI2_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder T; x \\<in> carrier D;\n     \\<exists>b\\<in>carrier T.\n        ord_equiv (Iod D (segment D x)) (Iod T (segment T b))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a.\n                         a \\<in> carrier T \\<and>\n                         ord_equiv (Iod D (segment D x))\n                          (Iod T (segment T a))\n 2. \\<And>xa.\n       \\<lbrakk>Worder T; x \\<in> carrier D;\n        \\<exists>b\\<in>carrier T.\n           ord_equiv (Iod D (segment D x)) (Iod T (segment T b));\n        xa \\<in> carrier T \\<and>\n        ord_equiv (Iod D (segment D x)) (Iod T (segment T xa))\\<rbrakk>\n       \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                          (Iod T (segment T xa))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>Worder T; x \\<in> carrier D;\n        \\<exists>b\\<in>carrier T.\n           ord_equiv (Iod D (segment D x)) (Iod T (segment T b));\n        xa \\<in> carrier T \\<and>\n        ord_equiv (Iod D (segment D x)) (Iod T (segment T xa))\\<rbrakk>\n       \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                          (Iod T (segment T xa))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Tw_inj:\"\\<lbrakk>Worder E; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.  ord_equiv (Iod D (segment D a)) \n       (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> inj_on (Tw\\<^bsub>D,E\\<^esub>) (carrier D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> inj_on (Tw\\<^bsub>D,E\\<^esub>) (carrier D)", "apply (simp add:inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>carrier D.\n                         \\<forall>y\\<in>carrier D.\n                            (Tw\\<^bsub>D,E\\<^esub>) x =\n                            (Tw\\<^bsub>D,E\\<^esub>) y \\<longrightarrow>\n                            x = y", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) x =\n                         (Tw\\<^bsub>D,E\\<^esub>) y \\<longrightarrow>\n                         x = y", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) x = (Tw\\<^bsub>D,E\\<^esub>) y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = x in Tw_equiv [of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) x = (Tw\\<^bsub>D,E\\<^esub>) y;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) x = (Tw\\<^bsub>D,E\\<^esub>) y;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)))\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule Tw_func[of \"E\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) x = (Tw\\<^bsub>D,E\\<^esub>) y;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        Tw\\<^bsub>D,E\\<^esub>\n        \\<in> carrier D \\<rightarrow> carrier E\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = x in funcset_mem[of \"Tw D E\" \"carrier D\" \"carrier E\"],\n                    assumption+,\n        frule_tac x = y in funcset_mem[of \"Tw D E\" \"carrier D\" \"carrier E\"],\n                    assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) x = (Tw\\<^bsub>D,E\\<^esub>) y;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) y \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule Worder.Order[of \"E\"],\n        cut_tac a = x in segment_sub,\n        cut_tac a = y in segment_sub,\n        cut_tac a = \"Tw D E y\" in Order.segment_sub[of \"E\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) x = (Tw\\<^bsub>D,E\\<^esub>) y;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) y \\<in> carrier E; Order E;\n        segment D x \\<subseteq> carrier D;\n        segment D y \\<subseteq> carrier D;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) y) \\<subseteq> carrier E\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac T = \"segment D x\" in Iod_Order, \n        frule_tac T = \"segment D y\" in Iod_Order, \n        frule_tac T = \"segment E (Tw D E y)\" in Order.Iod_Order[of \"E\"],\n        assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) x = (Tw\\<^bsub>D,E\\<^esub>) y;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) y \\<in> carrier E; Order E;\n        segment D x \\<subseteq> carrier D;\n        segment D y \\<subseteq> carrier D;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) y) \\<subseteq> carrier E;\n        Order (Iod D (segment D x)); Order (Iod D (segment D y));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)))\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (thin_tac \"Tw D E x = Tw D E y\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) y \\<in> carrier E; Order E;\n        segment D x \\<subseteq> carrier D;\n        segment D y \\<subseteq> carrier D;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) y) \\<subseteq> carrier E;\n        Order (Iod D (segment D x)); Order (Iod D (segment D y));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)))\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac x = y in Tw_equiv[of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) y \\<in> carrier E; Order E;\n        segment D x \\<subseteq> carrier D;\n        segment D y \\<subseteq> carrier D;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) y) \\<subseteq> carrier E;\n        Order (Iod D (segment D x)); Order (Iod D (segment D y));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        ord_equiv (Iod D (segment D y))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)))\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac D = \"Iod D (segment D y)\" and \n        E = \"Iod E (segment E (Tw D E y))\" in Order.ord_equiv_sym,\n        assumption+,\n        thin_tac \"ord_equiv (Iod D (segment D y))\n                   (Iod E (segment E (Tw D E y)))\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) y \\<in> carrier E; Order E;\n        segment D x \\<subseteq> carrier D;\n        segment D y \\<subseteq> carrier D;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) y) \\<subseteq> carrier E;\n        Order (Iod D (segment D x)); Order (Iod D (segment D y));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        ord_equiv (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)))\n         (Iod D (segment D y))\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (frule_tac D = \"Iod D (segment D x)\" and \n        E = \"Iod E (segment E (Tw D E y))\" and \n        F = \"Iod D (segment D y)\" in Order.ord_equiv_trans, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        x \\<in> carrier D; y \\<in> carrier D;\n        ord_equiv (Iod D (segment D x))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) y \\<in> carrier E; Order E;\n        segment D x \\<subseteq> carrier D;\n        segment D y \\<subseteq> carrier D;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) y) \\<subseteq> carrier E;\n        Order (Iod D (segment D x)); Order (Iod D (segment D y));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)));\n        ord_equiv (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) y)))\n         (Iod D (segment D y));\n        ord_equiv (Iod D (segment D x)) (Iod D (segment D y))\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp add:segment_unique)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Tw_eq_ord_isom:\"\\<lbrakk>Worder E; \n        \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.\n        ord_equiv (Iod D (segment D a)) (Iod E (segment E b)); a \\<in> carrier D;\n        ord_isom (Iod D (segment D a)) (Iod E (segment E (Tw D E a))) f;\n        x \\<in> segment D a \\<rbrakk> \\<Longrightarrow> f x = Tw D E x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (cut_tac segment_sub[of a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac c = x in subsetD[of \"segment D a\" \"carrier D\"], assumption+,\n        frule Tw_equiv[of E x], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule Worder.Torder[of E],\n        frule Torder.Order[of E])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (cut_tac a = x in segment_Worder,\n        frule_tac D = \"Iod D (segment D x)\" in Worder.Torder,\n        frule_tac D = \"Iod D (segment D x)\" in Worder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac T = \"segment D a\" in Iod_Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac x = a in Tw_mem[of E], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a));\n     (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a = \"Tw D E x\" in Order.segment_sub[of E])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a = \"Tw D E a\" in Worder.segment_Worder,\n        frule_tac D = \"Iod E (segment E (Tw D E a))\" in Worder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac f = f and a = x in Order.ord_isom_segment_segment[of \n       \"Iod D (segment D a)\" \"Iod E (segment E (Tw D E a))\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n    \\<Longrightarrow> x \\<in> carrier (Iod D (segment D a))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f\n        (carrier\n          (Iod (Iod D (segment D a))\n            (segment (Iod D (segment D a)) x))))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f\n        (carrier\n          (Iod (Iod D (segment D a))\n            (segment (Iod D (segment D a)) x))))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a = x and b = a in segment_le_mono, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f\n        (carrier\n          (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))));\n     x \\<preceq> a = (segment D x \\<subseteq> segment D a)\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a1 = x and b1 = a in segment_inc[THEN sym], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     x \\<in> segment D a; segment D a \\<subseteq> carrier D;\n     x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f\n        (carrier\n          (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))));\n     x \\<preceq> a = (segment D x \\<subseteq> segment D a);\n     (x \\<in> segment D a) = x \\<prec> a\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (simp add:oless_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D x \\<subseteq> segment D a \\<and> x \\<noteq> a;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f\n        (carrier\n          (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))));\n     x \\<preceq> a; x \\<in> segment D a\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a1 = x and b1 = a in segment_segment[THEN sym], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D x \\<subseteq> segment D a \\<and> x \\<noteq> a;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f\n        (carrier\n          (Iod (Iod D (segment D a)) (segment (Iod D (segment D a)) x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     (segment D x \\<subseteq> segment D a) =\n     (segment (Iod D (segment D a)) x = segment D x)\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment (Iod D (segment D a)) x = segment D x \\<and> x \\<noteq> a;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod (Iod D (segment D a)) (segment D x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f (carrier (Iod (Iod D (segment D a)) (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (simp add:Iod_sub_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment (Iod D (segment D a)) x = segment D x \\<and> x \\<noteq> a;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac f = f and a = x in Order.ord_isom_mem[of \n        \"Iod D (segment D a)\" \"Iod E (segment E (Tw D E a))\"],\n        simp add:Iod_carrier,\n        frule Order.segment_sub[of E \"Tw D E a\"],\n        simp add:Order.Iod_carrier, simp add:Iod_carrier,\n        frule Order.segment_sub[of E \"Tw D E a\"],\n        simp add:Order.Iod_carrier[of E],\n        frule_tac c = \"f x\" in subsetD[of \"segment E (Tw D E a)\"\n               \"carrier E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment (Iod D (segment D a)) x = segment D x \\<and> x \\<noteq> a;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a1 = \"f x\" in Order.segment_inc[THEN sym, of E _ \n         \"Tw D E a\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment (Iod D (segment D a)) x = segment D x \\<and> x \\<noteq> a;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     f x \\<prec>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E;\n     f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (simp add:oless_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a = \"f x\" and b = \"Tw D E a\" in \n          Torder.segment_le_mono [of E], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a = \"f x\" and b = \"Tw D E a\" in \n              Order.segment_segment[of E], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x)\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x))\n      (Iod (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n        (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x)\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (simp add:Order.Iod_sub_sub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x)\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac D = \"Iod D (segment D x)\" in Torder.Order)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac D = \"Iod D (segment D x)\" and E = \"Iod E (segment E (f x))\"\n        and F = \"Iod E (segment E (Tw D E x))\" in Order.ord_equiv_box)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod E (segment E (f x)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E (f x)))\n 4. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 5. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a = \"f x\" in Order.segment_sub[of E])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     segment E (f x) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Order (Iod E (segment E (f x)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E (f x)))\n 4. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 5. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac T = \"segment E (f x)\" in Order.Iod_Order[of E], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E (f x)))\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 4. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a = \"f x\" in Order.segment_sub[of E])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     segment E (f x) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E (f x)))\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 4. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule Tw_mem[of E x], assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x)); segment E (f x) \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E\\<rbrakk>\n    \\<Longrightarrow> Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E (f x)))\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 4. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule Order.segment_sub[of E \"Tw D E x\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x)); segment E (f x) \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E (f x)))\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 4. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (rule Order.Iod_Order[of E], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E (f x)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (simp add:ord_equiv_def, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod D (segment D x))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac a = \"f x\" and b = \"Tw D E x\" in \n         Worder.segment_unique[of E], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) x \\<in> carrier E\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv (Iod E (segment E (f x)))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)))\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D;\n     ord_isom (Iod D (segment D a))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n     segment D a \\<subseteq> carrier D; x \\<in> carrier D;\n     ord_equiv (Iod D (segment D x))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     Torder E; Order E; Worder (Iod D (segment D x));\n     Torder (Iod D (segment D x)); Order (Iod D (segment D x));\n     Order (Iod D (segment D a)); (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) x) \\<subseteq> carrier E;\n     Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n     ord_isom (Iod D (segment D x)) (Iod E (segment E (f x)))\n      (restrict f (carrier (Iod D (segment D x))));\n     x \\<preceq> a; x \\<in> segment D a;\n     segment D x \\<subseteq> segment D a;\n     segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n     f x \\<in> carrier E; f x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     segment (Iod D (segment D a)) x = segment D x; x \\<noteq> a;\n     segment E (f x) \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n     f x \\<noteq> (Tw\\<^bsub>D,E\\<^esub>) a;\n     f x \\<preceq>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) a;\n     segment (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) (f x) =\n     segment E (f x);\n     Order (Iod D (segment D x));\n     ord_equiv (Iod E (segment E (f x)))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) x)));\n     f x = (Tw\\<^bsub>D,E\\<^esub>) x\\<rbrakk>\n    \\<Longrightarrow> f x = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac x = x in Tw_mem[of E], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Tw_ord_injTr:\"\\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.\n        ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;  a \\<prec> b\\<rbrakk> \\<Longrightarrow>  \n              Tw D E a \\<prec>\\<^bsub>E\\<^esub> (Tw D E b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n    \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                      (Tw\\<^bsub>D,E\\<^esub>) b", "apply (frule_tac x = b in Tw_equiv [of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b;\n     ord_equiv (Iod D (segment D b))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)))\\<rbrakk>\n    \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                      (Tw\\<^bsub>D,E\\<^esub>) b", "apply (simp add:segment_inc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n     ord_equiv (Iod D (segment D b))\n      (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)))\\<rbrakk>\n    \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                      (Tw\\<^bsub>D,E\\<^esub>) b", "apply (simp add:ord_equiv_def, erule exE, fold ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (frule_tac f = f in Tw_eq_ord_isom[of E b _ a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (cut_tac segment_sub[of b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a;\n        segment D b \\<subseteq> carrier D\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (frule Iod_Order[of \"segment D b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b))\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (frule Worder.Order[of E],\n        frule Tw_mem[of  E b], assumption+,\n        frule Order.segment_sub[of E \"Tw D E b\"],\n        frule Order.Iod_Order[of E \"segment E (Tw D E b)\"], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b)); Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) b) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)))\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (frule_tac f = f and a = a in Order.ord_isom_mem[of \n        \"Iod D (segment D b)\" \"Iod E (segment E (Tw D E b))\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b)); Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) b) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)))\\<rbrakk>\n       \\<Longrightarrow> a \\<in> carrier (Iod D (segment D b))\n 2. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b)); Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) b) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)));\n        f a\n        \\<in> carrier\n               (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)))\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b)); Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) b) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)));\n        f a\n        \\<in> carrier\n               (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)))\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (simp add:Order.Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b)); Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) b) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)));\n        (Tw\\<^bsub>D,E\\<^esub>) a\n        \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) b)\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (subst Order.segment_inc[of E], assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b)); Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) b) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)));\n        (Tw\\<^bsub>D,E\\<^esub>) a\n        \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) b)\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E\n 2. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b)); Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) b) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)));\n        (Tw\\<^bsub>D,E\\<^esub>) a\n        \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) b)\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E\n 3. \\<And>f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<in> segment D b;\n        ord_isom (Iod D (segment D b))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b))) f;\n        f a = (Tw\\<^bsub>D,E\\<^esub>) a; segment D b \\<subseteq> carrier D;\n        Order (Iod D (segment D b)); Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) b) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) b)));\n        (Tw\\<^bsub>D,E\\<^esub>) a\n        \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) b)\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a\n                         \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) b)", "apply (simp add:Tw_mem)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Tw_ord_inj:\"\\<lbrakk>Worder E; \n       \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. ord_equiv (Iod D (segment D a)) \n            (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> ord_inj D E (Tw D E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ord_inj D E (Tw\\<^bsub>D,E\\<^esub>)", "apply (simp add:ord_inj_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> Tw\\<^bsub>D,E\\<^esub>\n                      \\<in> extensional (carrier D) \\<and>\n                      Tw\\<^bsub>D,E\\<^esub>\n                      \\<in> carrier D \\<rightarrow> carrier E \\<and>\n                      inj_on (Tw\\<^bsub>D,E\\<^esub>) (carrier D) \\<and>\n                      (\\<forall>a\\<in>carrier D.\n                          \\<forall>b\\<in>carrier D.\n                             a \\<prec> b =\n                             (Tw\\<^bsub>D,E\\<^esub>)\n                              a \\<prec>\\<^bsub>E\\<^esub>\n                             (Tw\\<^bsub>D,E\\<^esub>) b)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> Tw\\<^bsub>D,E\\<^esub> \\<in> extensional (carrier D)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> Tw\\<^bsub>D,E\\<^esub>\n                      \\<in> carrier D \\<rightarrow> carrier E \\<and>\n                      inj_on (Tw\\<^bsub>D,E\\<^esub>) (carrier D) \\<and>\n                      (\\<forall>a\\<in>carrier D.\n                          \\<forall>b\\<in>carrier D.\n                             a \\<prec> b =\n                             (Tw\\<^bsub>D,E\\<^esub>)\n                              a \\<prec>\\<^bsub>E\\<^esub>\n                             (Tw\\<^bsub>D,E\\<^esub>) b)", "apply (simp add:Tw_def extensional_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> Tw\\<^bsub>D,E\\<^esub>\n                      \\<in> carrier D \\<rightarrow> carrier E \\<and>\n                      inj_on (Tw\\<^bsub>D,E\\<^esub>) (carrier D) \\<and>\n                      (\\<forall>a\\<in>carrier D.\n                          \\<forall>b\\<in>carrier D.\n                             a \\<prec> b =\n                             (Tw\\<^bsub>D,E\\<^esub>)\n                              a \\<prec>\\<^bsub>E\\<^esub>\n                             (Tw\\<^bsub>D,E\\<^esub>) b)", "apply (simp add:Tw_func)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> inj_on (Tw\\<^bsub>D,E\\<^esub>) (carrier D) \\<and>\n                      (\\<forall>a\\<in>carrier D.\n                          \\<forall>b\\<in>carrier D.\n                             a \\<prec> b =\n                             (Tw\\<^bsub>D,E\\<^esub>)\n                              a \\<prec>\\<^bsub>E\\<^esub>\n                             (Tw\\<^bsub>D,E\\<^esub>) b)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> inj_on (Tw\\<^bsub>D,E\\<^esub>) (carrier D)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier D.\n                         \\<forall>b\\<in>carrier D.\n                            a \\<prec> b =\n                            (Tw\\<^bsub>D,E\\<^esub>)\n                             a \\<prec>\\<^bsub>E\\<^esub>\n                            (Tw\\<^bsub>D,E\\<^esub>) b", "apply (simp add:Tw_inj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>carrier D.\n                         \\<forall>b\\<in>carrier D.\n                            a \\<prec> b =\n                            (Tw\\<^bsub>D,E\\<^esub>)\n                             a \\<prec>\\<^bsub>E\\<^esub>\n                            (Tw\\<^bsub>D,E\\<^esub>) b", "apply (rule ballI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b =\n                         (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D; a \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n                         (Tw\\<^bsub>D,E\\<^esub>) b\n 2. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b", "apply (simp add:Tw_ord_injTr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b\\<rbrakk>\n       \\<Longrightarrow> a \\<prec> b", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        \\<not> a \\<prec> b\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:not_less_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b \\<preceq> a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:le_imp_less_or_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b \\<prec> a \\<or> b = a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b \\<prec> a\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = b and b = a in Tw_ord_injTr[of \"E\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b \\<prec> a;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) a\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Tw_func [of \"E\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b \\<prec> a;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) a;\n        Tw\\<^bsub>D,E\\<^esub>\n        \\<in> carrier D \\<rightarrow> carrier E\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac x = a in funcset_mem[of \"Tw D E\" \"carrier D\" \"carrier E\"],\n           assumption+,\n        frule_tac x = b in funcset_mem[of \"Tw D E\" \"carrier D\" \"carrier E\"],\n           assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b \\<prec> a;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) a;\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Worder.Torder[of \"E\"],\n        frule_tac a1 = \"Tw D E b\" and b1 = \"Tw D E a\" in \n           Torder.not_le_less[THEN sym, of \"E\"], assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        \\<not> (Tw\\<^bsub>D,E\\<^esub>) b \\<preceq>\\<^bsub>E\\<^esub>\n               (Tw\\<^bsub>D,E\\<^esub>) a;\n        b \\<prec> a;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) a;\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) b \\<in> carrier E; Torder E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule Worder.Order[of \"E\"],\n        frule_tac a = \"Tw D E b\" and b = \"Tw D E a\" in \n           Order.less_imp_le[of \"E\"], assumption+, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; b \\<in> carrier D;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<prec>\\<^bsub>E\\<^esub>\n        (Tw\\<^bsub>D,E\\<^esub>) b;\n        b = a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:oless_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) ord_isom_restricted_by_Tw:\"\\<lbrakk>Worder E; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E.  \n             ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n       D1 \\<subseteq> carrier D\\<rbrakk> \\<Longrightarrow> \n  ord_isom (Iod D D1) (Iod E ((Tw D E) ` D1)) \n                                  (restrict (Tw D E) D1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     D1 \\<subseteq> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D D1)\n                       (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` D1))\n                       (restrict (Tw\\<^bsub>D,E\\<^esub>) D1)", "apply (frule Tw_ord_inj [of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     D1 \\<subseteq> carrier D; ord_inj D E (Tw\\<^bsub>D,E\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D D1)\n                       (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` D1))\n                       (restrict (Tw\\<^bsub>D,E\\<^esub>) D1)", "apply (frule Worder.Order[of E])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     D1 \\<subseteq> carrier D; ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Order E\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D D1)\n                       (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` D1))\n                       (restrict (Tw\\<^bsub>D,E\\<^esub>) D1)", "apply (rule ord_inj_restrict_isom   [of E \"Tw D E\" \"D1\"], assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) Tw_segment_segment:\"\\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\\<exists>b\\<in>carrier E. \n        ord_equiv (Iod D (segment D a)) (Iod E (segment E b)); a \\<in> carrier D\\<rbrakk>\n     \\<Longrightarrow> Tw D E ` (segment D a) = segment E (Tw D E a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a =\n                      segment E ((Tw\\<^bsub>D,E\\<^esub>) a)", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a\n                      \\<subseteq> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D;\n        x \\<in> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (simp add:image_def, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a;\n        x = (Tw\\<^bsub>D,E\\<^esub>) xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (frule Tw_equiv[of \"E\" \"a\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a;\n        x = (Tw\\<^bsub>D,E\\<^esub>) xa;\n        ord_equiv (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (simp add:ord_equiv_def, erule exE, fold ord_equiv_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a;\n        x = (Tw\\<^bsub>D,E\\<^esub>) xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) xa\n                         \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (frule_tac x = xa in Tw_eq_ord_isom[of E a], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a;\n        x = (Tw\\<^bsub>D,E\\<^esub>) xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        f xa = (Tw\\<^bsub>D,E\\<^esub>) xa\\<rbrakk>\n       \\<Longrightarrow> (Tw\\<^bsub>D,E\\<^esub>) xa\n                         \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (rotate_tac -1, frule sym, thin_tac \"f xa = Tw D E xa\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a; x = f xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        (Tw\\<^bsub>D,E\\<^esub>) xa = f xa\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (cut_tac segment_sub[of a],\n        frule Iod_Order[of \"segment D a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a; x = f xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        (Tw\\<^bsub>D,E\\<^esub>) xa = f xa;\n        segment D a \\<subseteq> carrier D;\n        Order (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (frule Worder.Order[of E],\n        frule_tac a = \"Tw D E a\" in Order.segment_sub[of E],\n        frule Tw_mem[of E a], assumption+,\n        frule Order.segment_sub[of E \"Tw D E a\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a; x = f xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        (Tw\\<^bsub>D,E\\<^esub>) xa = f xa;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (frule_tac T = \"segment E (Tw D E a)\" in Order.Iod_Order[of E],\n        assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a; x = f xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        (Tw\\<^bsub>D,E\\<^esub>) xa = f xa;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (frule_tac a = xa and f = f and D = \"Iod D (segment D a)\" and \n        E = \"Iod E (segment E (Tw D E a))\" in Order.ord_isom_mem,\n        assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a; x = f xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        (Tw\\<^bsub>D,E\\<^esub>) xa = f xa;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> carrier (Iod D (segment D a))\n 2. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a; x = f xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        (Tw\\<^bsub>D,E\\<^esub>) xa = f xa;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n        f xa\n        \\<in> carrier\n               (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (simp add:Iod_carrier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; xa \\<in> segment D a; x = f xa;\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        (Tw\\<^bsub>D,E\\<^esub>) xa = f xa;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n        f xa\n        \\<in> carrier\n               (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n       \\<Longrightarrow> f xa \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (simp add:Order.Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\n                      \\<subseteq> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D;\n        x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (Tw\\<^bsub>D,E\\<^esub>) ` segment D a", "apply (simp add:image_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D;\n        x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (frule Tw_equiv[of \"E\" \"a\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_equiv (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (simp add:ord_equiv_def, erule exE, fold ord_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (cut_tac segment_sub[of a],\n        frule Iod_Order[of \"segment D a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D;\n        Order (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (frule Worder.Order[of E],\n        frule_tac a = \"Tw D E a\" in Order.segment_sub[of E],\n        frule Tw_mem[of E a], assumption+,\n        frule Order.segment_sub[of E \"Tw D E a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (frule_tac T = \"segment E (Tw D E a)\" in Order.Iod_Order[of E],\n        assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (frule Iod_Order[of \"segment D a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n        Order (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (frule_tac b = x in Order.ord_isom_surj [of \"Iod D (segment D a)\"\n       \"Iod E (segment E (Tw D E a))\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n        Order (Iod D (segment D a))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier\n                                  (Iod E\n                                    (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n 2. \\<And>x f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n        Order (Iod D (segment D a));\n        \\<exists>a\\<in>carrier (Iod D (segment D a)). x = f a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (simp add:Order.Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D; Order (Iod D (segment D a));\n        Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n        Order (Iod D (segment D a));\n        \\<exists>a\\<in>carrier (Iod D (segment D a)). x = f a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>segment D a.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa", "apply (erule bexE, simp add:Iod_carrier)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f aa.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; f aa \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D; Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n        Order (Iod D (segment D a)); aa \\<in> segment D a; x = f aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>segment D a.\n                            f aa = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (frule_tac f = f and x = aa in Tw_eq_ord_isom[of E a], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f aa.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        a \\<in> carrier D; f aa \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) a);\n        ord_isom (Iod D (segment D a))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a))) f;\n        segment D a \\<subseteq> carrier D; Order E;\n        (Tw\\<^bsub>D,E\\<^esub>) a \\<in> carrier E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) a) \\<subseteq> carrier E;\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)));\n        Order (Iod D (segment D a)); aa \\<in> segment D a; x = f aa;\n        f aa = (Tw\\<^bsub>D,E\\<^esub>) aa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>segment D a.\n                            f aa = (Tw\\<^bsub>D,E\\<^esub>) x", "apply (simp, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) ord_isom_Tw_segment:\"\\<lbrakk>Worder E; \n \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. \n       ord_equiv (Iod D (segment D a)) (Iod E (segment E b)); a\\<in>carrier D\\<rbrakk> \\<Longrightarrow>\n  ord_isom (Iod D (segment D a)) (Iod E (segment E (Tw D E a))) \n              (restrict (Tw D E) (segment D a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     a \\<in> carrier D\\<rbrakk>\n    \\<Longrightarrow> ord_isom (Iod D (segment D a))\n                       (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) a)))\n                       (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D a))", "apply (cut_tac segment_sub[of \"a\"],\n       frule ord_isom_restricted_by_Tw[of \"E\" \"segment D a\"], assumption+,\n       simp add:Tw_segment_segment[of \"E\" \"a\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Worder) well_ord_compare1:\"\\<lbrakk>Worder E; \n      \\<forall>a\\<in>carrier D. \\<exists>b\\<in>carrier E. \n          ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk> \\<Longrightarrow> \n    (ord_equiv D E) \\<or> (\\<exists>c\\<in>carrier E. ord_equiv D (Iod E (segment E c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule Tw_ord_inj [of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule Tw_func[of \"E\"], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule ord_isom_restricted_by_Tw [of \"E\" \"carrier D\"], assumption+,\n       simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom (Iod D (carrier D))\n      (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (simp add:Iod_self[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D))\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule image_sub0[of \"Tw D E\" \"carrier D\" \"carrier E\"], \n       frule Worder.segmentTr [of \"E\" \"(Tw D E) ` (carrier D)\"],\n       assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b\\<in>(Tw\\<^bsub>D,E\\<^esub>) ` carrier D.\n                         \\<forall>x.\n                            x \\<prec>\\<^bsub>E\\<^esub> b \\<and>\n                            x \\<in> carrier E \\<longrightarrow>\n                            x \\<in> (Tw\\<^bsub>D,E\\<^esub>) ` carrier D\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (rule ballI, rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n        (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n        b \\<in> (Tw\\<^bsub>D,E\\<^esub>) ` carrier D;\n        x \\<prec>\\<^bsub>E\\<^esub> b; x \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (Tw\\<^bsub>D,E\\<^esub>) ` carrier D\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (thin_tac \"ord_isom D (Iod E (Tw D E ` carrier D))\n      (restrict (Tw D E) (carrier D))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n        b \\<in> (Tw\\<^bsub>D,E\\<^esub>) ` carrier D;\n        x \\<prec>\\<^bsub>E\\<^esub> b; x \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (Tw\\<^bsub>D,E\\<^esub>) ` carrier D\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (thin_tac \"Tw D E ` carrier D \\<subseteq> carrier E\",\n        simp add:image_def, erule bexE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x xa.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> b; x \\<in> carrier E; xa \\<in> carrier D;\n        b = (Tw\\<^bsub>D,E\\<^esub>) xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>carrier D.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule_tac a = xa in ord_isom_Tw_segment[of \"E\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x xa.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> b; x \\<in> carrier E; xa \\<in> carrier D;\n        b = (Tw\\<^bsub>D,E\\<^esub>) xa;\n        ord_isom (Iod D (segment D xa))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) xa)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D xa))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>carrier D.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (rename_tac b x c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x c.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> b; x \\<in> carrier E; c \\<in> carrier D;\n        b = (Tw\\<^bsub>D,E\\<^esub>) c;\n        ord_isom (Iod D (segment D c))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>carrier D.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule_tac x = c in funcset_mem[of \"Tw D E\" \"carrier D\" \"carrier E\"],\n        assumption, simp, thin_tac \"b = Tw D E c\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x c.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) c;\n        x \\<in> carrier E; c \\<in> carrier D;\n        ord_isom (Iod D (segment D c))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c));\n        (Tw\\<^bsub>D,E\\<^esub>) c \\<in> carrier E\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>carrier D.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule Worder.Order[of \"E\"],\n        frule_tac a = \"Tw D E c\" in Order.segment_sub[of \"E\"],\n        cut_tac a = c in segment_Worder,\n        cut_tac a = \"Tw D E c\" in Worder.segment_Worder[of \"E\"], \n        assumption,\n        frule_tac D = \"Iod D (segment D c)\" in Worder.Order,\n        frule_tac D = \"Iod E (segment E (Tw D E c))\" in Worder.Order)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x c.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) c;\n        x \\<in> carrier E; c \\<in> carrier D;\n        ord_isom (Iod D (segment D c))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c));\n        (Tw\\<^bsub>D,E\\<^esub>) c \\<in> carrier E; Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) c) \\<subseteq> carrier E;\n        Worder (Iod D (segment D c));\n        Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        Order (Iod D (segment D c));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>carrier D.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule_tac D = \"Iod D (segment D c)\" and \n        E = \"Iod E (segment E (Tw D E c))\" and \n        f = \"restrict (Tw D E) (segment D c)\" and b = x in \n        Order.ord_isom_surj, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b x c.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) c;\n        x \\<in> carrier E; c \\<in> carrier D;\n        ord_isom (Iod D (segment D c))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c));\n        (Tw\\<^bsub>D,E\\<^esub>) c \\<in> carrier E; Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) c) \\<subseteq> carrier E;\n        Worder (Iod D (segment D c));\n        Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        Order (Iod D (segment D c));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> carrier\n                                  (Iod E\n                                    (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n 2. \\<And>b x c.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) c;\n        x \\<in> carrier E; c \\<in> carrier D;\n        ord_isom (Iod D (segment D c))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c));\n        (Tw\\<^bsub>D,E\\<^esub>) c \\<in> carrier E; Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) c) \\<subseteq> carrier E;\n        Worder (Iod D (segment D c));\n        Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        Order (Iod D (segment D c));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        \\<exists>a\\<in>carrier (Iod D (segment D c)).\n           x = restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>carrier D.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (simp add:Order.Iod_carrier[of \"E\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x c.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) c;\n        x \\<in> carrier E; c \\<in> carrier D;\n        ord_isom (Iod D (segment D c))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c));\n        (Tw\\<^bsub>D,E\\<^esub>) c \\<in> carrier E; Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) c) \\<subseteq> carrier E;\n        Worder (Iod D (segment D c));\n        Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        Order (Iod D (segment D c));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> segment E ((Tw\\<^bsub>D,E\\<^esub>) c)\n 2. \\<And>b x c.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) c;\n        x \\<in> carrier E; c \\<in> carrier D;\n        ord_isom (Iod D (segment D c))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c));\n        (Tw\\<^bsub>D,E\\<^esub>) c \\<in> carrier E; Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) c) \\<subseteq> carrier E;\n        Worder (Iod D (segment D c));\n        Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        Order (Iod D (segment D c));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        \\<exists>a\\<in>carrier (Iod D (segment D c)).\n           x = restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>carrier D.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa\n 3. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule_tac a = x and b = \"Tw D E c\" in Order.segment_inc[of \"E\"],\n        assumption+, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b x c.\n       \\<lbrakk>Worder E;\n        \\<forall>a\\<in>carrier D.\n           \\<exists>b\\<in>carrier E.\n              ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n        ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n        Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n        x \\<prec>\\<^bsub>E\\<^esub> (Tw\\<^bsub>D,E\\<^esub>) c;\n        x \\<in> carrier E; c \\<in> carrier D;\n        ord_isom (Iod D (segment D c))\n         (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)))\n         (restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c));\n        (Tw\\<^bsub>D,E\\<^esub>) c \\<in> carrier E; Order E;\n        segment E ((Tw\\<^bsub>D,E\\<^esub>) c) \\<subseteq> carrier E;\n        Worder (Iod D (segment D c));\n        Worder (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        Order (Iod D (segment D c));\n        Order (Iod E (segment E ((Tw\\<^bsub>D,E\\<^esub>) c)));\n        \\<exists>a\\<in>carrier (Iod D (segment D c)).\n           x = restrict (Tw\\<^bsub>D,E\\<^esub>) (segment D c) a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>carrier D.\n                            x = (Tw\\<^bsub>D,E\\<^esub>) xa\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a)\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (insert Order,\n        cut_tac a = c in segment_sub,\n        simp add:Iod_carrier, erule bexE, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E \\<or>\n     (\\<exists>a.\n         a \\<in> carrier E \\<and>\n         (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a);\n     Order D\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E; Order D;\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E; Order D;\n     \\<exists>a.\n        a \\<in> carrier E \\<and>\n        (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E (carrier E))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     Order D; (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = carrier E\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))\n 2. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E; Order D;\n     \\<exists>a.\n        a \\<in> carrier E \\<and>\n        (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (frule Worder.Order[of \"E\"],\n        simp add:Order.Iod_self[THEN sym, of \"E\"],\n        simp add:ord_equiv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Worder E;\n     \\<forall>a\\<in>carrier D.\n        \\<exists>b\\<in>carrier E.\n           ord_equiv (Iod D (segment D a)) (Iod E (segment E b));\n     ord_inj D E (Tw\\<^bsub>D,E\\<^esub>);\n     Tw\\<^bsub>D,E\\<^esub> \\<in> carrier D \\<rightarrow> carrier E;\n     ord_isom D (Iod E ((Tw\\<^bsub>D,E\\<^esub>) ` carrier D))\n      (restrict (Tw\\<^bsub>D,E\\<^esub>) (carrier D));\n     (Tw\\<^bsub>D,E\\<^esub>) ` carrier D \\<subseteq> carrier E; Order D;\n     \\<exists>a.\n        a \\<in> carrier E \\<and>\n        (Tw\\<^bsub>D,E\\<^esub>) ` carrier D = segment E a\\<rbrakk>\n    \\<Longrightarrow> ord_equiv D E \\<or>\n                      (\\<exists>c\\<in>carrier E.\n                          ord_equiv D (Iod E (segment E c)))", "apply (erule exE, erule conjE, simp,\n       frule Worder.Order[of \"E\"],\n       frule_tac a = a in Order.segment_sub[of \"E\"],\n       cut_tac a = a in Worder.segment_Worder[of \"E\"], \n       assumption,\n       frule_tac D = \"Iod E (segment E a)\" in Worder.Order,\n       frule_tac E = \"Iod E (segment E a)\" in ord_equiv, simp, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bex_nonempty_set:\"\\<exists>x \\<in> A. P x \\<Longrightarrow> {x. x \\<in> A \\<and> P x } \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. P x \\<Longrightarrow> {x \\<in> A. P x} \\<noteq> {}", "by blast"], ["", "lemma nonempty_set_sub:\"{x. x \\<in> A \\<and> P x } \\<noteq> {} \\<Longrightarrow> \n                                    {x. x \\<in> A \\<and> P x} \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> A. P x} \\<noteq> {} \\<Longrightarrow>\n    {x \\<in> A. P x} \\<subseteq> A", "by (rule subsetI, simp)"], ["", "lemma (in Torder) less_minimum:\"\\<lbrakk>minimum_elem D {x. x \\<in> carrier D \\<and> P x} d\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a. (((a \\<prec> d) \\<and> a \\<in> carrier D) \\<longrightarrow>  \\<not> (P a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minimum_elem D {x \\<in> carrier D. P x} d \\<Longrightarrow>\n    \\<forall>a.\n       a \\<prec> d \\<and> a \\<in> carrier D \\<longrightarrow> \\<not> P a", "apply (rule allI, rule impI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>minimum_elem D {x \\<in> carrier D. P x} d; a \\<prec> d;\n        a \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> \\<not> P a", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>minimum_elem D {x \\<in> carrier D. P x} d; a \\<prec> d;\n        a \\<in> carrier D; P a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:minimum_elem_def, (erule conjE)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<prec> d; a \\<in> carrier D; P a; d \\<in> carrier D; P d;\n        \\<forall>x.\n           x \\<in> carrier D \\<and> P x \\<longrightarrow>\n           d \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac a = a in forall_spec, simp,\n       thin_tac \"\\<forall>x. x \\<in> carrier D \\<and> P x \\<longrightarrow> d \\<preceq> x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<prec> d; a \\<in> carrier D; P a; d \\<in> carrier D; P d;\n        d \\<preceq> a\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:not_le_less[THEN sym, of \"d\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Torder) segment_minimum_empty:\"\\<lbrakk>X \\<subseteq> carrier D; d \\<in> X\\<rbrakk> \\<Longrightarrow> \n             (minimum_elem D X d) = (segment (Iod D X) d = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X d = (segment (Iod D X) d = {})", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X; minimum_elem D X d\\<rbrakk>\n    \\<Longrightarrow> segment (Iod D X) d = {}\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     segment (Iod D X) d = {}\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X d", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X; minimum_elem D X d;\n     segment (Iod D X) d \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     segment (Iod D X) d = {}\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X d", "apply (frule nonempty_ex[of \"segment (Iod D X) d\"], erule exE,\n       thin_tac \"segment (Iod D X) d \\<noteq> {}\",\n       frule minimum_elem_mem[of \"X\" \"d\"], assumption+,\n       frule_tac c = d in subsetD[of \"X\" \"carrier D\"], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X; minimum_elem D X d;\n        x \\<in> segment (Iod D X) d; d \\<in> X; d \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     segment (Iod D X) d = {}\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X d", "apply (simp add:segment_def,\n       simp add:Iod_carrier, erule conjE,\n       simp add:Iod_less[of \"X\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; minimum_elem D X d; d \\<in> X;\n        d \\<in> carrier D; x \\<prec> d; x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     segment (Iod D X) d = {}\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X d", "apply (simp add:minimum_elem_def,\n       frule_tac x = x in bspec, assumption,\n       frule_tac c = x in subsetD[of \"X\" \"carrier D\"], assumption+,\n       frule_tac a1 = x and b1 = d in not_less_le[THEN sym], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; Ball X ((\\<preceq>) d); d \\<in> X;\n        d \\<in> carrier D; x \\<prec> d; x \\<in> X; d \\<preceq> x;\n        x \\<in> carrier D; d \\<preceq> x = (\\<not> x \\<prec> d)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     segment (Iod D X) d = {}\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X d", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n     segment (Iod D X) d = {}\\<rbrakk>\n    \\<Longrightarrow> minimum_elem D X d", "apply (rule contrapos_pp, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X; segment (Iod D X) d = {};\n     \\<not> minimum_elem D X d\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp add:minimum_elem_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X; segment (Iod D X) d = {};\n     \\<exists>x\\<in>X. \\<not> d \\<preceq> x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        segment (Iod D X) d = {}; x \\<in> X; \\<not> d \\<preceq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac c = d in subsetD[of \"X\" \"carrier D\"], assumption+,\n       frule_tac c = x in subsetD[of \"X\" \"carrier D\"], assumption+,\n       simp add:not_le_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<subseteq> carrier D; d \\<in> X;\n        segment (Iod D X) d = {}; x \\<in> X; x \\<prec> d; d \\<in> carrier D;\n        x \\<in> carrier D\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add:segment_def Iod_carrier,\n       simp add:Iod_less[THEN sym, of \"X\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}