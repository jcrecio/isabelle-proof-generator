{"file_name": "/home/qj213/afp-2021-10-22/thys/Complx/SmallStep.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Complx", "problem_names": ["lemma rtrancl_mono_proof[mono]:\n   \"(\\<And>a b. x a b \\<longrightarrow> y a b) \\<Longrightarrow> rtranclp x a b \\<longrightarrow> rtranclp y a b\"", "lemmas step_induct = step.induct [of _ \"(c,s)\" \"(c',s')\", split_format (complete), case_names\nBasic Spec SpecStuck Guard GuardFault Seq SeqSkip SeqThrow CondTrue CondFalse\nWhileTrue WhileFalse Call CallUndefined DynCom Catch CatchThrow CatchSkip\nFaultProp StuckProp Parallel ParSkip Await, induct set]", "lemma no_step_final: \n  assumes step: \"\\<Gamma> \\<turnstile>(c,s) \\<rightarrow> (c',s')\"\n  shows \"final (c,s) \\<Longrightarrow> P\"", "lemma no_step_final':\n  assumes step: \"\\<Gamma> \\<turnstile>cfg \\<rightarrow> cfg'\"\n  shows \"final cfg \\<Longrightarrow> P\"", "lemma no_steps_final:\n\"\\<Gamma> \\<turnstile> v \\<rightarrow>\\<^sup>* w \\<Longrightarrow> final v \\<Longrightarrow> w = v\"", "lemma step_Fault: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Fault f \\<Longrightarrow> s'=Fault f\"", "lemma step_Stuck: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Stuck \\<Longrightarrow> s'=Stuck\"", "lemma SeqSteps: \n  assumes steps: \"\\<Gamma> \\<turnstile>cfg\\<^sub>1\\<rightarrow>\\<^sup>* cfg\\<^sub>2\"\n  shows \"\\<And> c\\<^sub>1 s c\\<^sub>1' s'. \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1,s);cfg\\<^sub>2=(c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma> \\<turnstile>(Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow>\\<^sup>* (Seq c\\<^sub>1' c\\<^sub>2, s')\"", "lemma CatchSteps: \n  assumes steps: \"\\<Gamma> \\<turnstile>cfg\\<^sub>1\\<rightarrow>\\<^sup>* cfg\\<^sub>2\"\n  shows \"\\<And> c\\<^sub>1 s c\\<^sub>1' s'. \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1,s); cfg\\<^sub>2=(c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma> \\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow>\\<^sup>* (Catch c\\<^sub>1' c\\<^sub>2, s')\"", "lemma steps_Fault: \"\\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\"", "lemma steps_Stuck: \"\\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\"", "lemma step_Fault_prop: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Fault f \\<Longrightarrow> s'=Fault f\"", "lemma step_Stuck_prop: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"s=Stuck \\<Longrightarrow> s'=Stuck\"", "lemma steps_Fault_prop: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Fault f \\<Longrightarrow> s'=Fault f\"", "lemma steps_Stuck_prop: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Stuck \\<Longrightarrow> s'=Stuck\""], "translations": [["", "lemma rtrancl_mono_proof[mono]:\n   \"(\\<And>a b. x a b \\<longrightarrow> y a b) \\<Longrightarrow> rtranclp x a b \\<longrightarrow> rtranclp y a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b. x a b \\<longrightarrow> y a b) \\<Longrightarrow>\n    x\\<^sup>*\\<^sup>* a b \\<longrightarrow> y\\<^sup>*\\<^sup>* a b", "apply (rule impI, rotate_tac, induct rule: rtranclp.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       (\\<And>a b. x a b \\<longrightarrow> y a b) \\<Longrightarrow>\n       y\\<^sup>*\\<^sup>* a a\n 2. \\<And>a b c.\n       \\<lbrakk>x\\<^sup>*\\<^sup>* a b;\n        (\\<And>a b. x a b \\<longrightarrow> y a b) \\<Longrightarrow>\n        y\\<^sup>*\\<^sup>* a b;\n        x b c; \\<And>a b. x a b \\<longrightarrow> y a b\\<rbrakk>\n       \\<Longrightarrow> y\\<^sup>*\\<^sup>* a c", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>x\\<^sup>*\\<^sup>* a b; y\\<^sup>*\\<^sup>* a b; x b c;\n        \\<And>a b. x a b \\<longrightarrow> y a b\\<rbrakk>\n       \\<Longrightarrow> y\\<^sup>*\\<^sup>* a c", "apply (metis rtranclp.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec redex:: \"('s,'p,'f)com \\<Rightarrow> ('s,'p,'f)com\"\nwhere\n\"redex Skip = Skip\" |\n\"redex (Basic f) = (Basic f)\" |\n\"redex (Spec r) = (Spec r)\" |\n\"redex (Seq c\\<^sub>1 c\\<^sub>2) = redex c\\<^sub>1\" |\n\"redex (Cond b c\\<^sub>1 c\\<^sub>2) = (Cond b c\\<^sub>1 c\\<^sub>2)\" |\n\"redex (While b c) = (While b c)\" |\n\"redex (Call p) = (Call p)\" |\n\"redex (DynCom d) = (DynCom d)\" |\n\"redex (Guard f b c) = (Guard f b c)\" |\n\"redex (Throw) = Throw\" |\n\"redex (Catch c\\<^sub>1 c\\<^sub>2) = redex c\\<^sub>1\" |\n\"redex (Await b c) = Await b c\" |\n\"redex (Parallel cs) = Parallel cs\""], ["", "subsection \\<open>Small-Step Computation: \\<open>\\<Gamma> \\<turnstile>(c, s) \\<rightarrow> (c', s')\\<close>\\<close>"], ["", "text \\<open>The final configuration is either of the form \\<open>(Skip,_)\\<close> for normal\ntermination, or @{term \"(Throw,Normal s)\"} in case the program was started in \na @{term \"Normal\"} state and terminated abruptly. Explicit abrupt states are removed\nfrom the language definition and thus do not need to be propogated.\\<close>"], ["", "type_synonym ('s,'p,'f) config = \"('s,'p,'f)com  \\<times> ('s,'f) xstate\""], ["", "definition final:: \"('s,'p,'f) config \\<Rightarrow> bool\" where\n\"final cfg = (fst cfg=Skip \\<or> (fst cfg=Throw \\<and> (\\<exists>s. snd cfg=Normal s)))\""], ["", "primrec atom_com :: \"\\<^cancel>\\<open>('s,'p,'f) body \\<Rightarrow>\\<close> ('s, 'p, 'f) com \\<Rightarrow> bool\" where\n  \"atom_com Skip = True\" | \n  \"atom_com (Basic f) = True\" | \n  \"atom_com (Spec r) = True\" | \n  \"atom_com (Seq  c\\<^sub>1 c\\<^sub>2) = (atom_com c\\<^sub>1 \\<and> atom_com c\\<^sub>2)\" | \n  \"atom_com (Cond b c\\<^sub>1 c\\<^sub>2) = (atom_com c\\<^sub>1 \\<and> atom_com c\\<^sub>2)\" | \n  \"atom_com (While b c) = atom_com c\" | \n (* Change to  atom_com (Call p) = atom_com (\\<Theta> p)\n  Butow do we pass function body from step? *)\n  \"atom_com (Call p) = False\" |\n  \"atom_com (DynCom f) = (\\<forall>s::'s. atom_com (f s))\" | \n  \"atom_com (Guard f g c) = atom_com c\" | \n  \"atom_com Throw = True\" | \n  \"atom_com (Catch c\\<^sub>1 c\\<^sub>2) = (atom_com c\\<^sub>1 \\<and> atom_com c\\<^sub>2)\" | \n  \"atom_com (Parallel cs) = False\" | \n  \"atom_com (Await b c) = False\""], ["", "inductive\n      \"step\"::\"[('s,'p,'f) body, ('s,'p,'f) config,('s,'p,'f) config] \\<Rightarrow> bool\"\n                                (\"_\\<turnstile> (_ \\<rightarrow>/ _)\" [81,81,81] 100)\n  and \"step_rtrancl\" :: \"[('s,'p,'f) body, ('s,'p,'f) config,('s,'p,'f) config] \\<Rightarrow> bool\"\n                                (\"_ \\<turnstile> (_ \\<rightarrow>\\<^sup>*/ _)\" [81,81,81] 100)\n  for \\<Gamma>::\"('s,'p,'f) body\"\nwhere\n  \"\\<Gamma> \\<turnstile> a \\<rightarrow>\\<^sup>* b \\<equiv> (step \\<Gamma>)\\<^sup>*\\<^sup>* a b\"\n| Basic: \"\\<Gamma> \\<turnstile>(Basic f,Normal s) \\<rightarrow> (Skip,Normal (f s))\"\n\n| Spec: \"(s,t) \\<in> r \\<Longrightarrow> \\<Gamma> \\<turnstile>(Spec r,Normal s) \\<rightarrow> (Skip,Normal t)\"\n| SpecStuck: \"\\<forall>t. (s,t) \\<notin> r \\<Longrightarrow> \\<Gamma> \\<turnstile>(Spec r,Normal s) \\<rightarrow> (Skip,Stuck)\"\n\n| Guard: \"s\\<in>g \\<Longrightarrow> \\<Gamma> \\<turnstile>(Guard f g c,Normal s) \\<rightarrow> (c,Normal s)\"\n  \n| GuardFault: \"s\\<notin>g \\<Longrightarrow> \\<Gamma> \\<turnstile>(Guard f g c,Normal s) \\<rightarrow> (Skip,Fault f)\"\n\n\n| Seq: \"\\<Gamma> \\<turnstile>(c\\<^sub>1,s) \\<rightarrow> (c\\<^sub>1',s')\n        \\<Longrightarrow> \n        \\<Gamma> \\<turnstile>(Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> (Seq c\\<^sub>1' c\\<^sub>2, s')\"\n| SeqSkip: \"\\<Gamma> \\<turnstile>(Seq Skip c\\<^sub>2,s) \\<rightarrow> (c\\<^sub>2, s)\"\n| SeqThrow: \"\\<Gamma> \\<turnstile>(Seq Throw c\\<^sub>2,Normal s) \\<rightarrow> (Throw, Normal s)\"\n\n| CondTrue:  \"s\\<in>b \\<Longrightarrow> \\<Gamma> \\<turnstile>(Cond b c\\<^sub>1 c\\<^sub>2,Normal s) \\<rightarrow> (c\\<^sub>1,Normal s)\"\n| CondFalse: \"s\\<notin>b \\<Longrightarrow> \\<Gamma> \\<turnstile>(Cond b c\\<^sub>1 c\\<^sub>2,Normal s) \\<rightarrow> (c\\<^sub>2,Normal s)\"\n\n| WhileTrue: \"\\<lbrakk>s\\<in>b\\<rbrakk> \n              \\<Longrightarrow> \n              \\<Gamma> \\<turnstile>(While b c,Normal s) \\<rightarrow> (Seq c (While b c),Normal s)\"\n\n| WhileFalse: \"\\<lbrakk>s\\<notin>b\\<rbrakk> \n               \\<Longrightarrow> \n               \\<Gamma> \\<turnstile>(While b c,Normal s) \\<rightarrow> (Skip,Normal s)\"\n\n| Call: \"\\<Gamma> p=Some b \\<Longrightarrow>\n         \\<Gamma> \\<turnstile>(Call p,Normal s) \\<rightarrow> (b,Normal s)\"\n\n| CallUndefined: \"\\<Gamma> p=None \\<Longrightarrow>\n         \\<Gamma> \\<turnstile>(Call p,Normal s) \\<rightarrow> (Skip,Stuck)\"\n\n| DynCom: \"\\<Gamma> \\<turnstile>(DynCom c,Normal s) \\<rightarrow> (c s,Normal s)\"\n\n| Catch: \"\\<lbrakk>\\<Gamma> \\<turnstile>(c\\<^sub>1,s) \\<rightarrow> (c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow>\n          \\<Gamma> \\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> (Catch c\\<^sub>1' c\\<^sub>2,s')\"\n\n| CatchSkip: \"\\<Gamma> \\<turnstile>(Catch Skip c\\<^sub>2,s) \\<rightarrow> (Skip,s)\"\n| CatchThrow: \"\\<Gamma> \\<turnstile>(Catch Throw c\\<^sub>2,Normal s) \\<rightarrow> (c\\<^sub>2,Normal s)\"\n\n| FaultProp:  \"\\<lbrakk>c\\<noteq>Skip; redex c = c\\<rbrakk> \\<Longrightarrow> \\<Gamma> \\<turnstile>(c,Fault f) \\<rightarrow> (Skip,Fault f)\"\n| StuckProp:  \"\\<lbrakk>c\\<noteq>Skip; redex c = c\\<rbrakk> \\<Longrightarrow> \\<Gamma> \\<turnstile>(c,Stuck) \\<rightarrow> (Skip,Stuck)\"\n\n\n| Parallel: \"\\<lbrakk>  i < length cs; \\<Gamma> \\<turnstile> (cs!i, s) \\<rightarrow> (c', s') \\<rbrakk> \n            \\<Longrightarrow> \\<Gamma> \\<turnstile> (Parallel cs, s) \\<rightarrow> (Parallel (cs[i := c']), s')\"\n\n| ParSkip: \"\\<lbrakk> \\<forall>c \\<in> set cs. c = Skip \\<rbrakk> \\<Longrightarrow> \\<Gamma> \\<turnstile> (Parallel cs, s) \\<rightarrow> (Skip, s)\"\n(* If exception is thrown, the parallel execution may either abort\n   immediately (rule ParThrow) or keep executing (rule Parallel) *)\n| ParThrow: \"\\<lbrakk> Throw \\<in> set cs \\<rbrakk> \\<Longrightarrow> \\<Gamma> \\<turnstile> (Parallel cs, s) \\<rightarrow> (Throw, s)\"\n\n\n| Await: \"\\<lbrakk> s \\<in> b; \\<Gamma> \\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (c', Normal s');\n           atom_com c; c' = Skip \\<or> c' = Throw \\<rbrakk> \n          \\<Longrightarrow> \\<Gamma> \\<turnstile> (Await b c, Normal s) \\<rightarrow> (c', Normal s')\"\n| AwaitStuck: \n         \"\\<lbrakk> s \\<in> b; \\<Gamma> \\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (c', Stuck) ;\n           atom_com c\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma> \\<turnstile> (Await b c, Normal s) \\<rightarrow> (Skip, Stuck)\" \n| AwaitFault: \n         \"\\<lbrakk> s \\<in> b; \\<Gamma> \\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (c', Fault f) ;\n           atom_com c\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma> \\<turnstile> (Await b c, Normal s) \\<rightarrow> (Skip, Fault f)\" \n| AwaitNonAtom: \n         \" \\<not> atom_com c\n          \\<Longrightarrow> \\<Gamma> \\<turnstile> (Await b c, Normal s) \\<rightarrow> (Skip, Stuck)\""], ["", "lemmas step_induct = step.induct [of _ \"(c,s)\" \"(c',s')\", split_format (complete), case_names\nBasic Spec SpecStuck Guard GuardFault Seq SeqSkip SeqThrow CondTrue CondFalse\nWhileTrue WhileFalse Call CallUndefined DynCom Catch CatchThrow CatchSkip\nFaultProp StuckProp Parallel ParSkip Await, induct set]"], ["", "text \\<open>The execution of a command is blocked if it cannot make progress, but is not in a final\nstate. It is the intention that \\<open>\\<exists>cfg. \\<Gamma> \\<turnstile> (c, s) \\<rightarrow> cfg) \\<or> final (c, s) \\<or> blocked \\<Gamma> c s\\<close>, but\nwe do not prove this.\\<close>"], ["", "function(sequential) blocked :: \"('s,'p,'f) body \\<Rightarrow> ('s,'p,'f) com \\<Rightarrow> ('s,'f)xstate \\<Rightarrow> bool\" where\n  \"blocked \\<Gamma> (Seq (Await b c\\<^sub>1) c\\<^sub>2) (Normal s) = (s \\<notin> b)\"\n| \"blocked \\<Gamma> (Catch (Await b c\\<^sub>1) c\\<^sub>2) (Normal s) = (s \\<notin> b)\"\n| \"blocked \\<Gamma> (Await b c) (Normal s) = (s \\<notin> b \\<or> (\\<forall>c' s'. \\<Gamma> \\<turnstile> (c, Normal s) \\<rightarrow>\\<^sup>* (c', Normal s') \\<longrightarrow> \\<not> final (c', Normal s')))\"\n| \"blocked \\<Gamma> (Parallel cs) (Normal s) = (\\<forall>t \\<in> set cs. blocked \\<Gamma> t (Normal s) \\<or> final (t, Normal s))\"\n| \"blocked \\<Gamma> _ _ = False\""], ["proof (prove)\ngoal (1036 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s.\n                   x =\n                   (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2,\n                    Normal s) \\<Longrightarrow>\n                   P;\n        \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s.\n           x =\n           (\\<Gamma>, Catch (Await b c\\<^sub>1) c\\<^sub>2,\n            Normal s) \\<Longrightarrow>\n           P;\n        \\<And>\\<Gamma> b c s.\n           x = (\\<Gamma>, Await b c, Normal s) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> cs s.\n           x = (\\<Gamma>, Parallel cs, Normal s) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> uv_. x = (\\<Gamma>, Skip, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v uv_.\n           x = (\\<Gamma>, Basic v, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v uv_.\n           x = (\\<Gamma>, Spec v, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> va uv_.\n           x = (\\<Gamma>, Seq Skip va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Seq (Basic vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Seq (Spec vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc va uv_.\n           x = (\\<Gamma>, Seq (Seq vb vc) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc vd va uv_.\n           x = (\\<Gamma>, Seq (Cond vb vc vd) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc va uv_.\n           x = (\\<Gamma>, Seq (While vb vc) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Seq (Call vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Seq (DynCom vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc vd va uv_.\n           x = (\\<Gamma>, Seq (Guard vb vc vd) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> va uv_.\n           x = (\\<Gamma>, Seq Throw va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc va uv_.\n           x = (\\<Gamma>, Seq (Catch vb vc) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Seq (Parallel vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v va vb uv_.\n           x = (\\<Gamma>, Cond v va vb, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v va uv_.\n           x = (\\<Gamma>, While v va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v uv_.\n           x = (\\<Gamma>, Call v, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v uv_.\n           x = (\\<Gamma>, DynCom v, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v va vb uv_.\n           x = (\\<Gamma>, Guard v va vb, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> uv_. x = (\\<Gamma>, Throw, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> va uv_.\n           x = (\\<Gamma>, Catch Skip va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Catch (Basic vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Catch (Spec vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc va uv_.\n           x = (\\<Gamma>, Catch (Seq vb vc) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc vd va uv_.\n           x = (\\<Gamma>, Catch (Cond vb vc vd) va, uv_) \\<Longrightarrow>\n           P;\n        \\<And>\\<Gamma> vb vc va uv_.\n           x = (\\<Gamma>, Catch (While vb vc) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Catch (Call vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Catch (DynCom vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc vd va uv_.\n           x = (\\<Gamma>, Catch (Guard vb vc vd) va, uv_) \\<Longrightarrow>\n           P;\n        \\<And>\\<Gamma> va uv_.\n           x = (\\<Gamma>, Catch Throw va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb vc va uv_.\n           x = (\\<Gamma>, Catch (Catch vb vc) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> vb va uv_.\n           x = (\\<Gamma>, Catch (Parallel vb) va, uv_) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v va vb.\n           x = (\\<Gamma>, Catch v va, Fault vb) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v va.\n           x = (\\<Gamma>, Catch v va, Stuck) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v va.\n           x = (\\<Gamma>, Parallel v, Fault va) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v.\n           x = (\\<Gamma>, Parallel v, Stuck) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v va vb.\n           x = (\\<Gamma>, Await v va, Fault vb) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> v va.\n           x = (\\<Gamma>, Await v va, Stuck) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> uu_ v.\n           x = (\\<Gamma>, uu_, Fault v) \\<Longrightarrow> P;\n        \\<And>\\<Gamma> uu_.\n           x = (\\<Gamma>, uu_, Stuck) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' ba c\\<^sub>1'\n       c\\<^sub>2' sa.\n       (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n       (\\<Gamma>', Seq (Await ba c\\<^sub>1') c\\<^sub>2',\n        Normal sa) \\<Longrightarrow>\n       (s \\<notin> b) = (sa \\<notin> ba)\n 3. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' ba c\\<^sub>1'\n       c\\<^sub>2' sa.\n       (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n       (\\<Gamma>', Catch (Await ba c\\<^sub>1') c\\<^sub>2',\n        Normal sa) \\<Longrightarrow>\n       (s \\<notin> b) = (sa \\<notin> ba)\n 4. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' ba c sa.\n       (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n       (\\<Gamma>', Await ba c, Normal sa) \\<Longrightarrow>\n       (s \\<notin> b) =\n       (sa \\<notin> ba \\<or>\n        (\\<forall>c' s'.\n            \\<Gamma>' \\<turnstile> (c, Normal sa) \\<rightarrow>\\<^sup>*\n                                   (c', Normal s') \\<longrightarrow>\n            \\<not> final (c', Normal s')))\n 5. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' cs sa.\n       (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n       (\\<Gamma>', Parallel cs, Normal sa) \\<Longrightarrow>\n       (s \\<notin> b) =\n       (\\<forall>t\\<in>set cs.\n           blocked_sumC (\\<Gamma>', t, Normal sa) \\<or>\n           final (t, Normal sa))\n 6. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' uv_.\n       (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n       (\\<Gamma>', Skip, uv_) \\<Longrightarrow>\n       (s \\<notin> b) = False\n 7. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' v uv_.\n       (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n       (\\<Gamma>', Basic v, uv_) \\<Longrightarrow>\n       (s \\<notin> b) = False\n 8. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' v uv_.\n       (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n       (\\<Gamma>', Spec v, uv_) \\<Longrightarrow>\n       (s \\<notin> b) = False\n 9. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' va uv_.\n       (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n       (\\<Gamma>', Seq Skip va, uv_) \\<Longrightarrow>\n       (s \\<notin> b) = False\n 10. \\<And>\\<Gamma> b c\\<^sub>1 c\\<^sub>2 s \\<Gamma>' vb va uv_.\n        (\\<Gamma>, Seq (Await b c\\<^sub>1) c\\<^sub>2, Normal s) =\n        (\\<Gamma>', Seq (Basic vb) va, uv_) \\<Longrightarrow>\n        (s \\<notin> b) = False\nA total of 1036 subgoals...", "by (pat_completeness, auto)"], ["", "inductive_cases step_elim_cases [cases set]:\n \"\\<Gamma> \\<turnstile>(Skip,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Guard f g c,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Basic f,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Spec r,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Seq c1 c2,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Cond b c1 c2,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(While b c,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Call p,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(DynCom c,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Throw,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Catch c1 c2,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Parallel cs,s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Await b e,s) \\<rightarrow> u\""], ["", "inductive_cases step_Normal_elim_cases [cases set]:\n \"\\<Gamma> \\<turnstile>(Skip,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Guard f g c,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Basic f,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Spec r,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Seq c1 c2,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Cond b c1 c2,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(While b c,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Call p,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(DynCom c,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Throw,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Catch c1 c2,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Parallel cs,Normal s) \\<rightarrow> u\"\n \"\\<Gamma> \\<turnstile>(Await b e,Normal s) \\<rightarrow> u\""], ["", "abbreviation \n \"step_trancl\" :: \"[('s,'p,'f) body, ('s,'p,'f) config,('s,'p,'f) config] \\<Rightarrow> bool\"\n                                (\"_\\<turnstile> (_ \\<rightarrow>\\<^sup>+/ _)\" [81,81,81] 100)\n where\n  \"\\<Gamma> \\<turnstile>cf0 \\<rightarrow>\\<^sup>+ cf1 \\<equiv> (CONST step \\<Gamma>)\\<^sup>+\\<^sup>+ cf0 cf1\""], ["", "abbreviation \n \"step_n_trancl\" :: \"[('s,'p,'f) body, ('s,'p,'f) config,nat,('s,'p,'f) config] \\<Rightarrow> bool\"\n                                (\"_\\<turnstile> (_ \\<rightarrow>\\<^sup>n_/ _)\" [81,81,81,81] 100)\n where\n  \"\\<Gamma> \\<turnstile>cf0 \\<rightarrow>\\<^sup>nn cf1 \\<equiv> (CONST step \\<Gamma> ^^ n) cf0 cf1\""], ["", "lemma no_step_final: \n  assumes step: \"\\<Gamma> \\<turnstile>(c,s) \\<rightarrow> (c',s')\"\n  shows \"final (c,s) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final (c, s) \\<Longrightarrow> P", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. final (c, s) \\<Longrightarrow> P", "by induct (auto simp add: final_def)"], ["", "lemma no_step_final':\n  assumes step: \"\\<Gamma> \\<turnstile>cfg \\<rightarrow> cfg'\"\n  shows \"final cfg \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. final cfg \\<Longrightarrow> P", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> cfg \\<rightarrow> cfg'\n\ngoal (1 subgoal):\n 1. final cfg \\<Longrightarrow> P", "by (cases cfg, cases cfg') (auto intro: no_step_final)"], ["", "lemma no_steps_final:\n\"\\<Gamma> \\<turnstile> v \\<rightarrow>\\<^sup>* w \\<Longrightarrow> final v \\<Longrightarrow> w = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Gamma> \\<turnstile> v \\<rightarrow>\\<^sup>* w;\n     final v\\<rbrakk>\n    \\<Longrightarrow> w = v", "apply (cases v)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<Gamma> \\<turnstile> v \\<rightarrow>\\<^sup>* w; final v;\n        v = (a, b)\\<rbrakk>\n       \\<Longrightarrow> w = v", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (a, b) \\<rightarrow>\\<^sup>* w;\n        final (a, b); v = (a, b)\\<rbrakk>\n       \\<Longrightarrow> w = (a, b)", "apply  (erule converse_rtranclpE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>final (a, b); v = (a, b); (a, b) = w\\<rbrakk>\n       \\<Longrightarrow> w = (a, b)\n 2. \\<And>a b y.\n       \\<lbrakk>final (a, b); v = (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> y;\n        \\<Gamma> \\<turnstile> y \\<rightarrow>\\<^sup>* w\\<rbrakk>\n       \\<Longrightarrow> w = (a, b)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b y.\n       \\<lbrakk>final (a, b); v = (a, b);\n        \\<Gamma>\\<turnstile> (a, b) \\<rightarrow> y;\n        \\<Gamma> \\<turnstile> y \\<rightarrow>\\<^sup>* w\\<rbrakk>\n       \\<Longrightarrow> w = (a, b)", "apply (erule (1) no_step_final')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma step_Fault: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Fault f \\<Longrightarrow> s'=Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. s = Fault f \\<Longrightarrow> s' = Fault f", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>f. s = Fault f \\<Longrightarrow> s' = Fault f", "by (induct) auto"], ["", "lemma step_Stuck: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Stuck \\<Longrightarrow> s'=Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. s = Stuck \\<Longrightarrow> s' = Stuck", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>f. s = Stuck \\<Longrightarrow> s' = Stuck", "by (induct) auto"], ["", "lemma SeqSteps: \n  assumes steps: \"\\<Gamma> \\<turnstile>cfg\\<^sub>1\\<rightarrow>\\<^sup>* cfg\\<^sub>2\"\n  shows \"\\<And> c\\<^sub>1 s c\\<^sub>1' s'. \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1,s);cfg\\<^sub>2=(c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma> \\<turnstile>(Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow>\\<^sup>* (Seq c\\<^sub>1' c\\<^sub>2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> cfg\\<^sub>1 \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "proof (induct rule: converse_rtranclp_induct [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>2 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')\n 2. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "case Refl"], ["proof (state)\nthis:\n  cfg\\<^sub>2 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>2 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')\n 2. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "thus ?case"], ["proof (prove)\nusing this:\n  cfg\\<^sub>2 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                          (Seq c\\<^sub>1' c\\<^sub>2, s')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                        (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "case (Trans cfg\\<^sub>1 cfg'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  \\<Gamma> \\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n  \\<lbrakk>cfg'' = (?c\\<^sub>1, ?s);\n   cfg\\<^sub>2 = (?c\\<^sub>1', ?s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq ?c\\<^sub>1 c\\<^sub>2,\n     ?s) \\<rightarrow>\\<^sup>*\n    (Seq ?c\\<^sub>1' c\\<^sub>2, ?s')\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "have step: \"\\<Gamma> \\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "have steps: \"\\<Gamma> \\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "have cfg\\<^sub>1: \"cfg\\<^sub>1 = (c\\<^sub>1, s)\" and cfg\\<^sub>2: \"cfg\\<^sub>2 = (c\\<^sub>1', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cfg\\<^sub>1 = (c\\<^sub>1, s) &&& cfg\\<^sub>2 = (c\\<^sub>1', s')", "by fact+"], ["proof (state)\nthis:\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "obtain c\\<^sub>1'' s'' where cfg'': \"cfg''=(c\\<^sub>1'',s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1'' s''.\n        cfg'' = (c\\<^sub>1'', s'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases cfg'') auto"], ["proof (state)\nthis:\n  cfg'' = (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "from step cfg\\<^sub>1 cfg''"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg'' = (c\\<^sub>1'', s'')", "have \"\\<Gamma> \\<turnstile> (c\\<^sub>1,s) \\<rightarrow> (c\\<^sub>1'',s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg'' = (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "hence \"\\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> (Seq c\\<^sub>1'' c\\<^sub>2,s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                         (Seq c\\<^sub>1'' c\\<^sub>2, s'')", "by (rule step.Seq)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c\\<^sub>1'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Seq c\\<^sub>1'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "from Trans.hyps (3) [OF cfg'' cfg\\<^sub>2]"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2,\n                         s'') \\<rightarrow>\\<^sup>*\n                        (Seq c\\<^sub>1' c\\<^sub>2, s')", "have \"\\<Gamma> \\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2, s'') \\<rightarrow>\\<^sup>* (Seq c\\<^sub>1' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2,\n                         s'') \\<rightarrow>\\<^sup>*\n                        (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2,\n                           s'') \\<rightarrow>\\<^sup>*\n                          (Seq c\\<^sub>1' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1'' c\\<^sub>2,\n                         s'') \\<rightarrow>\\<^sup>*\n                        (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Seq c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Seq c\\<^sub>1' c\\<^sub>2, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                        (Seq c\\<^sub>1' c\\<^sub>2, s')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                        (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                          (Seq c\\<^sub>1' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                        (Seq c\\<^sub>1' c\\<^sub>2, s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma CatchSteps: \n  assumes steps: \"\\<Gamma> \\<turnstile>cfg\\<^sub>1\\<rightarrow>\\<^sup>* cfg\\<^sub>2\"\n  shows \"\\<And> c\\<^sub>1 s c\\<^sub>1' s'. \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1,s); cfg\\<^sub>2=(c\\<^sub>1',s')\\<rbrakk>\n          \\<Longrightarrow> \\<Gamma> \\<turnstile>(Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow>\\<^sup>* (Catch c\\<^sub>1' c\\<^sub>2, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "using steps"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> cfg\\<^sub>1 \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>1 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "proof (induct rule: converse_rtranclp_induct [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>2 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')\n 2. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "case Refl"], ["proof (state)\nthis:\n  cfg\\<^sub>2 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (2 subgoals):\n 1. \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>cfg\\<^sub>2 = (c\\<^sub>1, s);\n        cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')\n 2. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "thus ?case"], ["proof (prove)\nusing this:\n  cfg\\<^sub>2 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           s) \\<rightarrow>\\<^sup>*\n                          (Catch c\\<^sub>1' c\\<^sub>2, s')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                        (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "case (Trans cfg\\<^sub>1 cfg'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  \\<Gamma> \\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n  \\<lbrakk>cfg'' = (?c\\<^sub>1, ?s);\n   cfg\\<^sub>2 = (?c\\<^sub>1', ?s')\\<rbrakk>\n  \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch ?c\\<^sub>1 c\\<^sub>2,\n     ?s) \\<rightarrow>\\<^sup>*\n    (Catch ?c\\<^sub>1' c\\<^sub>2, ?s')\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "have step: \"\\<Gamma> \\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''", "by fact"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "have steps: \"\\<Gamma> \\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> cfg'' \\<rightarrow>\\<^sup>* cfg\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "have cfg\\<^sub>1: \"cfg\\<^sub>1 = (c\\<^sub>1, s)\" and cfg\\<^sub>2: \"cfg\\<^sub>2 = (c\\<^sub>1', s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cfg\\<^sub>1 = (c\\<^sub>1, s) &&& cfg\\<^sub>2 = (c\\<^sub>1', s')", "by fact+"], ["proof (state)\nthis:\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg\\<^sub>2 = (c\\<^sub>1', s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "obtain c\\<^sub>1'' s'' where cfg'': \"cfg''=(c\\<^sub>1'',s'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c\\<^sub>1'' s''.\n        cfg'' = (c\\<^sub>1'', s'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases cfg'') auto"], ["proof (state)\nthis:\n  cfg'' = (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "from step cfg\\<^sub>1 cfg''"], ["proof (chain)\npicking this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg'' = (c\\<^sub>1'', s'')", "have s: \"\\<Gamma> \\<turnstile> (c\\<^sub>1,s) \\<rightarrow> (c\\<^sub>1'',s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> cfg\\<^sub>1 \\<rightarrow> cfg''\n  cfg\\<^sub>1 = (c\\<^sub>1, s)\n  cfg'' = (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')", "by simp"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "hence \"\\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,s) \\<rightarrow> (Catch c\\<^sub>1'' c\\<^sub>2,s'')\""], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c\\<^sub>1, s) \\<rightarrow> (c\\<^sub>1'', s'')\n\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                         (Catch c\\<^sub>1'' c\\<^sub>2, s'')", "by (rule step.Catch)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c\\<^sub>1'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\n                       (Catch c\\<^sub>1'' c\\<^sub>2, s'')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "from Trans.hyps (3) [OF cfg'' cfg\\<^sub>2]"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2,\n                         s'') \\<rightarrow>\\<^sup>*\n                        (Catch c\\<^sub>1' c\\<^sub>2, s')", "have \"\\<Gamma> \\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2, s'') \\<rightarrow>\\<^sup>* (Catch c\\<^sub>1' c\\<^sub>2, s')\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2,\n                         s'') \\<rightarrow>\\<^sup>*\n                        (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2,\n                           s'') \\<rightarrow>\\<^sup>*\n                          (Catch c\\<^sub>1' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1'' c\\<^sub>2,\n                         s'') \\<rightarrow>\\<^sup>*\n                        (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<And>y z c\\<^sub>1 s c\\<^sub>1' s'.\n       \\<lbrakk>\\<Gamma>\\<turnstile> y \\<rightarrow> z;\n        \\<Gamma> \\<turnstile> z \\<rightarrow>\\<^sup>* cfg\\<^sub>2;\n        \\<And>c\\<^sub>1 s c\\<^sub>1' s'.\n           \\<lbrakk>z = (c\\<^sub>1, s);\n            cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n           \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1\n               c\\<^sub>2,\n              s) \\<rightarrow>\\<^sup>*\n             (Catch c\\<^sub>1' c\\<^sub>2, s');\n        y = (c\\<^sub>1, s); cfg\\<^sub>2 = (c\\<^sub>1', s')\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n          s) \\<rightarrow>\\<^sup>*\n         (Catch c\\<^sub>1' c\\<^sub>2, s')", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                        (Catch c\\<^sub>1' c\\<^sub>2, s')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                        (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           s) \\<rightarrow>\\<^sup>*\n                          (Catch c\\<^sub>1' c\\<^sub>2, s')", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, s) \\<rightarrow>\\<^sup>*\n                        (Catch c\\<^sub>1' c\\<^sub>2, s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_Fault: \"\\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)", "proof (induct c)"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n  \\<Gamma> \\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "have steps_c\\<^sub>1: \"\\<Gamma> \\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "have steps_c\\<^sub>2: \"\\<Gamma> \\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "from SeqSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Seq Skip ?c\\<^sub>2, Fault f)", "have \"\\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>* (Seq Skip c\\<^sub>2, Fault f)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Seq Skip ?c\\<^sub>2, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                           Fault f) \\<rightarrow>\\<^sup>*\n                          (Seq Skip c\\<^sub>2, Fault f)", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Seq Skip c\\<^sub>2, Fault f)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Seq Skip c\\<^sub>2, Fault f)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "have \"\\<Gamma> \\<turnstile> (Seq Skip c\\<^sub>2, Fault f) \\<rightarrow> (c\\<^sub>2, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                         (c\\<^sub>2, Fault f)", "by (rule SeqSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                       (c\\<^sub>2, Fault f)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                       (c\\<^sub>2, Fault f)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "note steps_c\\<^sub>2"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 10. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                           (Skip, Fault f)\nA total of 13 subgoals...", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                           Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n (Skip, Fault f);\n         \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                               (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Fault f) \\<rightarrow>\\<^sup>*\n          (Skip, Fault f)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n (Skip, Fault f);\n         \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                               (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Fault f) \\<rightarrow>\\<^sup>*\n          (Skip, Fault f)\nA total of 12 subgoals...", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n  \\<Gamma> \\<turnstile> (c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n (Skip, Fault f);\n         \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                               (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Fault f) \\<rightarrow>\\<^sup>*\n          (Skip, Fault f)\nA total of 12 subgoals...", "have steps_c\\<^sub>1: \"\\<Gamma> \\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>* (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>1, Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n (Skip, Fault f);\n         \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                               (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Fault f) \\<rightarrow>\\<^sup>*\n          (Skip, Fault f)\nA total of 12 subgoals...", "from CatchSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Catch Skip ?c\\<^sub>2, Fault f)", "have \"\\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Fault f) \\<rightarrow>\\<^sup>* (Catch Skip c\\<^sub>2, Fault f)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Catch Skip ?c\\<^sub>2, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           Fault f) \\<rightarrow>\\<^sup>*\n                          (Catch Skip c\\<^sub>2, Fault f)", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Catch Skip c\\<^sub>2, Fault f)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n (Skip, Fault f);\n         \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                               (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Fault f) \\<rightarrow>\\<^sup>*\n          (Skip, Fault f)\nA total of 12 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Catch Skip c\\<^sub>2, Fault f)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n (Skip, Fault f);\n         \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                               (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Fault f) \\<rightarrow>\\<^sup>*\n          (Skip, Fault f)\nA total of 12 subgoals...", "have \"\\<Gamma> \\<turnstile> (Catch Skip c\\<^sub>2, Fault f) \\<rightarrow> (Skip, Fault f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                         (Skip, Fault f)", "by (rule CatchSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Fault f) \\<rightarrow>\n                       (Skip, Fault f)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n (Skip, Fault f);\n         \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                               (Skip, Fault f)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Fault f) \\<rightarrow>\\<^sup>*\n          (Skip, Fault f)\nA total of 12 subgoals...", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Fault f) \\<rightarrow>\\<^sup>*\n                        (Skip, Fault f)\n\ngoal (11 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Fault f) \\<rightarrow>\\<^sup>*\n(Skip, Fault f);\n        \\<Gamma> \\<turnstile> (c2, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Fault f) \\<rightarrow>\\<^sup>*\n         (Skip, Fault f)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                 (Skip, Fault f)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Fault f) \\<rightarrow>\\<^sup>*\n                             (Skip, Fault f)\n 9. \\<Gamma> \\<turnstile> (Throw, Fault f) \\<rightarrow>\\<^sup>*\n                          (Skip, Fault f)\n 10. \\<And>x.\n        (\\<And>xa.\n            xa \\<in> set x \\<Longrightarrow>\n            \\<Gamma> \\<turnstile> (xa, Fault f) \\<rightarrow>\\<^sup>*\n                                  (Skip, Fault f)) \\<Longrightarrow>\n        \\<Gamma> \\<turnstile> (Parallel x, Fault f) \\<rightarrow>\\<^sup>*\n                              (Skip, Fault f)\nA total of 11 subgoals...", "qed (fastforce intro: step.intros)+"], ["", "lemma steps_Stuck: \"\\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)", "proof (induct c)"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "case (Seq c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n  \\<Gamma> \\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "have steps_c\\<^sub>1: \"\\<Gamma> \\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                          (Skip, Stuck)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "have steps_c\\<^sub>2: \"\\<Gamma> \\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                          (Skip, Stuck)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "from SeqSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Seq Skip ?c\\<^sub>2, Stuck)", "have \"\\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>* (Seq Skip c\\<^sub>2, Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 ?c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Seq Skip ?c\\<^sub>2, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                           Stuck) \\<rightarrow>\\<^sup>*\n                          (Seq Skip c\\<^sub>2, Stuck)", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Seq Skip c\\<^sub>2, Stuck)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Seq Skip c\\<^sub>2, Stuck)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "have \"\\<Gamma> \\<turnstile> (Seq Skip c\\<^sub>2, Stuck) \\<rightarrow> (c\\<^sub>2, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                         (c\\<^sub>2, Stuck)", "by (rule SeqSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                       (c\\<^sub>2, Stuck)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Seq Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                       (c\\<^sub>2, Stuck)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "note steps_c\\<^sub>2"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (13 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Seq c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 6. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 10. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>*\n                           (Skip, Stuck)\nA total of 13 subgoals...", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                           Stuck) \\<rightarrow>\\<^sup>*\n                          (Skip, Stuck)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Seq c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n (Skip, Stuck);\n         \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                               (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Stuck) \\<rightarrow>\\<^sup>*\n          (Skip, Stuck)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n (Skip, Stuck);\n         \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                               (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Stuck) \\<rightarrow>\\<^sup>*\n          (Skip, Stuck)\nA total of 12 subgoals...", "case (Catch c\\<^sub>1 c\\<^sub>2)"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n  \\<Gamma> \\<turnstile> (c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n (Skip, Stuck);\n         \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                               (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Stuck) \\<rightarrow>\\<^sup>*\n          (Skip, Stuck)\nA total of 12 subgoals...", "have steps_c\\<^sub>1: \"\\<Gamma> \\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                          (Skip, Stuck)", "by fact"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (c\\<^sub>1, Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n (Skip, Stuck);\n         \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                               (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Stuck) \\<rightarrow>\\<^sup>*\n          (Skip, Stuck)\nA total of 12 subgoals...", "from CatchSteps [OF steps_c\\<^sub>1 refl refl]"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Catch Skip ?c\\<^sub>2, Stuck)", "have \"\\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2, Stuck) \\<rightarrow>\\<^sup>* (Catch Skip c\\<^sub>2, Stuck)\""], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 ?c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Catch Skip ?c\\<^sub>2, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           Stuck) \\<rightarrow>\\<^sup>*\n                          (Catch Skip c\\<^sub>2, Stuck)", "."], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Catch Skip c\\<^sub>2, Stuck)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n (Skip, Stuck);\n         \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                               (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Stuck) \\<rightarrow>\\<^sup>*\n          (Skip, Stuck)\nA total of 12 subgoals...", "also"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Catch Skip c\\<^sub>2, Stuck)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n (Skip, Stuck);\n         \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                               (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Stuck) \\<rightarrow>\\<^sup>*\n          (Skip, Stuck)\nA total of 12 subgoals...", "have \"\\<Gamma> \\<turnstile> (Catch Skip c\\<^sub>2, Stuck) \\<rightarrow> (Skip, Stuck)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                         (Skip, Stuck)", "by (rule CatchSkip)"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (Catch Skip c\\<^sub>2, Stuck) \\<rightarrow>\n                       (Skip, Stuck)\n\ngoal (12 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>c1 c2.\n        \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n (Skip, Stuck);\n         \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                               (Skip, Stuck)\\<rbrakk>\n        \\<Longrightarrow> \\<Gamma> \\<turnstile> (Catch c1 c2,\n           Stuck) \\<rightarrow>\\<^sup>*\n          (Skip, Stuck)\nA total of 12 subgoals...", "finally"], ["proof (chain)\npicking this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (1 subgoal):\n 1. \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                           Stuck) \\<rightarrow>\\<^sup>*\n                          (Skip, Stuck)", "by simp"], ["proof (state)\nthis:\n  \\<Gamma> \\<turnstile> (Catch c\\<^sub>1 c\\<^sub>2,\n                         Stuck) \\<rightarrow>\\<^sup>*\n                        (Skip, Stuck)\n\ngoal (11 subgoals):\n 1. \\<Gamma> \\<turnstile> (Skip, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 2. \\<And>x.\n       \\<Gamma> \\<turnstile> (Basic x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 3. \\<And>x.\n       \\<Gamma> \\<turnstile> (Spec x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 4. \\<And>x1 c1 c2.\n       \\<lbrakk>\\<Gamma> \\<turnstile> (c1, Stuck) \\<rightarrow>\\<^sup>*\n(Skip, Stuck);\n        \\<Gamma> \\<turnstile> (c2, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\\<rbrakk>\n       \\<Longrightarrow> \\<Gamma> \\<turnstile> (Cond x1 c1 c2,\n          Stuck) \\<rightarrow>\\<^sup>*\n         (Skip, Stuck)\n 5. \\<And>x1 c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (While x1 c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 6. \\<And>x.\n       \\<Gamma> \\<turnstile> (Call x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 7. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> range x \\<Longrightarrow>\n           \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                 (Skip, Stuck)) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (DynCom x, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 8. \\<And>x1 x2a c.\n       \\<Gamma> \\<turnstile> (c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck) \\<Longrightarrow>\n       \\<Gamma> \\<turnstile> (Guard x1 x2a c, Stuck) \\<rightarrow>\\<^sup>*\n                             (Skip, Stuck)\n 9. \\<Gamma> \\<turnstile> (Throw, Stuck) \\<rightarrow>\\<^sup>* (Skip, Stuck)\n 10. \\<And>x.\n        (\\<And>xa.\n            xa \\<in> set x \\<Longrightarrow>\n            \\<Gamma> \\<turnstile> (xa, Stuck) \\<rightarrow>\\<^sup>*\n                                  (Skip, Stuck)) \\<Longrightarrow>\n        \\<Gamma> \\<turnstile> (Parallel x, Stuck) \\<rightarrow>\\<^sup>*\n                              (Skip, Stuck)\nA total of 11 subgoals...", "qed (fastforce intro: step.intros)+"], ["", "lemma step_Fault_prop: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"\\<And>f. s=Fault f \\<Longrightarrow> s'=Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. s = Fault f \\<Longrightarrow> s' = Fault f", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. \\<And>f. s = Fault f \\<Longrightarrow> s' = Fault f", "by (induct) auto"], ["", "lemma step_Stuck_prop: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow> (c', s')\"\n  shows \"s=Stuck \\<Longrightarrow> s'=Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> s' = Stuck", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c', s')\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> s' = Stuck", "by (induct) auto"], ["", "lemma steps_Fault_prop: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Fault f \\<Longrightarrow> s'=Fault f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Fault f \\<Longrightarrow> s' = Fault f", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\n\ngoal (1 subgoal):\n 1. s = Fault f \\<Longrightarrow> s' = Fault f", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. s' = Fault f \\<Longrightarrow> s' = Fault f\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "case Refl"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (2 subgoals):\n 1. s' = Fault f \\<Longrightarrow> s' = Fault f\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "thus ?case"], ["proof (prove)\nusing this:\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. s' = Fault f", "by simp"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "case (Trans c s c'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma> \\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Fault f \\<Longrightarrow> s' = Fault f\n  s = Fault f\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Fault f \\<Longrightarrow> s' = Fault f; b = Fault f\\<rbrakk>\n       \\<Longrightarrow> s' = Fault f", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma> \\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Fault f \\<Longrightarrow> s' = Fault f\n  s = Fault f\n\ngoal (1 subgoal):\n 1. s' = Fault f", "by (auto intro: step_Fault_prop)"], ["proof (state)\nthis:\n  s' = Fault f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma steps_Stuck_prop: \n  assumes step: \"\\<Gamma> \\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\"\n  shows \"s=Stuck \\<Longrightarrow> s'=Stuck\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> s' = Stuck", "using step"], ["proof (prove)\nusing this:\n  \\<Gamma> \\<turnstile> (c, s) \\<rightarrow>\\<^sup>* (c', s')\n\ngoal (1 subgoal):\n 1. s = Stuck \\<Longrightarrow> s' = Stuck", "proof (induct rule: converse_rtranclp_induct2 [case_names Refl Trans])"], ["proof (state)\ngoal (2 subgoals):\n 1. s' = Stuck \\<Longrightarrow> s' = Stuck\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "case Refl"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (2 subgoals):\n 1. s' = Stuck \\<Longrightarrow> s' = Stuck\n 2. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "thus ?case"], ["proof (prove)\nusing this:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck", "by simp"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "case (Trans c s c'' s'')"], ["proof (state)\nthis:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma> \\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Stuck \\<Longrightarrow> s' = Stuck\n  s = Stuck\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<Gamma>\\<turnstile> (a, b) \\<rightarrow> (aa, ba);\n        \\<Gamma> \\<turnstile> (aa, ba) \\<rightarrow>\\<^sup>* (c', s');\n        ba = Stuck \\<Longrightarrow> s' = Stuck; b = Stuck\\<rbrakk>\n       \\<Longrightarrow> s' = Stuck", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Gamma>\\<turnstile> (c, s) \\<rightarrow> (c'', s'')\n  \\<Gamma> \\<turnstile> (c'', s'') \\<rightarrow>\\<^sup>* (c', s')\n  s'' = Stuck \\<Longrightarrow> s' = Stuck\n  s = Stuck\n\ngoal (1 subgoal):\n 1. s' = Stuck", "by (auto intro: step_Stuck_prop)"], ["proof (state)\nthis:\n  s' = Stuck\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}