{"file_name": "/home/qj213/afp-2021-10-22/thys/Complx/ex/Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Complx", "problem_names": ["lemma\n  \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/{True}\\<^esub>\n    COBEGIN test_guard \\<lbrace>True\\<rbrace>,\\<lbrace>True\\<rbrace>\n         \\<parallel> \\<lbrace>True\\<rbrace> \\<acute>y:=0 \\<lbrace>True\\<rbrace>, \\<lbrace>True\\<rbrace>\n    COEND \\<lbrace>True\\<rbrace>,\\<lbrace>True\\<rbrace>\"", "lemma Example1: \n \"\\<Gamma>, \\<Theta>|\\<tturnstile>\\<^bsub>/F\\<^esub>\\<lbrace>True\\<rbrace>\n   COBEGIN SCHEME [0\\<le>i<n] \\<lbrace>True\\<rbrace> \\<acute>ex1_a:=\\<acute>ex1_a (i:=0) \\<lbrace>\\<acute>ex1_a i=0\\<rbrace>, \\<lbrace>False\\<rbrace> COEND \n  \\<lbrace>\\<forall>i < n. \\<acute>ex1_a i = 0\\<rbrace>, X\"", "lemma Example1_proc_simp[unfolded Example1'b_def oghoare_simps]:\n \"\\<Gamma>' 0 = Some (com (Example1'b))\"\n \"\\<Theta>' 0 = Some ([ ann(Example1'b)])\"\n \"[ ann(Example1'b)]!0 = ann(Example1'b)\"", "lemma Example1':\nnotes Example1_proc_simp[proc_simp]\nshows\n \"\\<Gamma>', \\<Theta>' |\\<turnstile>\\<^bsub>/F\\<^esub> Example1' \\<lbrace>\\<forall>i < 2. \\<acute>ex1_a i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\"", "lemma Example2'n_map_of_simps[simp]:\n  \"i < n \\<Longrightarrow>\n    map_of (map (\\<lambda>i. ((p, i), g i)) [0..<n])\n       (p, i) = Some (g i)\"", "lemma  Example2'n_proc_simp[unfolded Example2'n_def oghoare_simps]:\n \"i<n \\<Longrightarrow> \\<Gamma>'' n (''f'',i) = Some ( com(Example2'n i))\"\n \"i<n \\<Longrightarrow> \\<Theta>'' n (''f'',i) = Some ([ ann(Example2'n i)])\"\n \"[ ann(Example2'n i)]!0 = ann(Example2'n i)\"", "lemmas Example2'n_proc_simp[proc_simp add]", "lemma Example2:\nnotes Example2'n_proc_simp[proc_simp]\nshows\n \"\\<Gamma>'' n, \\<Theta>'' n\n |\\<tturnstile>\\<^bsub>/F\\<^esub>\\<lbrace>True\\<rbrace>\n   COBEGIN SCHEME [0\\<le>i<n]\n     \\<lbrace>True\\<rbrace>\n       CALLX (\\<lambda>s. s\\<lparr>ex2_n:=(ex2_n s)(i:=i)\\<rparr>) \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> (''f'', i) 0\n       (\\<lambda>s t. t\\<lparr>ex2_n:= (ex2_n t)(i:=(ex2_n s) i)\\<rparr>) (\\<lambda>x y. Skip)\n       \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i)='''' \\<and> \\<acute>ex2_n i = i\\<rbrace> \\<lbrace>\\<acute>ex2_a i=''''\\<rbrace> \\<lbrace>False\\<rbrace>  \\<lbrace>False\\<rbrace>\n     \\<lbrace>\\<acute>ex2_a i=''''\\<rbrace>, \\<lbrace>False\\<rbrace>\n   COEND \n  \\<lbrace>\\<forall>i < n. \\<acute>ex2_a i = ''''\\<rbrace>, \\<lbrace>False\\<rbrace>\"", "lemmas Example2'n_proc_simp[proc_simp del]", "lemma Example2_list: \n \"\\<Gamma>, \\<Theta> |\\<tturnstile>\\<^bsub>/F\\<^esub>\\<lbrace>n < length \\<acute>ex2_A\\<rbrace> \n   COBEGIN \n     SCHEME [0\\<le>i<n] \\<lbrace>n < length \\<acute>ex2_A\\<rbrace> \\<acute>ex2_A:=\\<acute>ex2_A[i:=0] \\<lbrace>\\<acute>ex2_A!i=0\\<rbrace>,\\<lbrace>False\\<rbrace> \n   COEND \n    \\<lbrace>\\<forall>i < n. \\<acute>ex2_A!i = 0\\<rbrace>, X\"", "lemma exceptions_example:\n  \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/F\\<^esub> \n   TRY \n   \\<lbrace>True \\<rbrace> \\<acute>y := 0;;\n   \\<lbrace> \\<acute>y = 0 \\<rbrace> THROW\n   CATCH \n     \\<lbrace>\\<acute>y = 0\\<rbrace> \\<acute>x := \\<acute>y + 1\n   END\n   \\<lbrace> \\<acute>x = 1 \\<and> \\<acute>y = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\"", "lemma guard_example:\n  \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/{42,66}\\<^esub> \n  \\<lbrace>True\\<rbrace> (42, \\<lbrace>\\<acute>x=0\\<rbrace>),\n   (66, \\<lbrace>\\<acute>y=0\\<rbrace>) \\<longmapsto> \\<lbrace>\\<acute>x = 0\\<rbrace> \n   \\<acute>y := 0;;\n   \\<lbrace>True\\<rbrace> \\<acute>x := 0\n  \\<lbrace> \\<acute>x = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\"", "lemma peterson_thread_1:\n \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/F\\<^esub> \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>  WHILE True INV \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>\n  DO\n  \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace> \\<langle>\\<acute>in1:=True,, \\<acute>pr1:=1 \\<rangle>;;\n  \\<lbrace>\\<acute>pr1=1 \\<and> \\<acute>in1\\<rbrace>  \\<langle>\\<acute>hold:=1,, \\<acute>pr1:=2 \\<rangle>;;\n  \\<lbrace>\\<acute>pr1=2 \\<and> \\<acute>in1 \\<and> (\\<acute>hold=1 \\<or> \\<acute>hold=2 \\<and> \\<acute>pr2=2)\\<rbrace>\n  AWAIT (\\<not>\\<acute>in2 \\<or> \\<not>(\\<acute>hold=1)) THEN\n     \\<acute>pr1:=3\n  END;;\n  \\<lbrace>\\<acute>pr1=3 \\<and> \\<acute>in1 \\<and> (\\<acute>hold=1 \\<or> \\<acute>hold=2 \\<and> \\<acute>pr2=2)\\<rbrace>\n   \\<langle>\\<acute>in1:=False,,\\<acute>pr1:=0\\<rangle>\n  OD \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>,\\<lbrace>False\\<rbrace>\n\"", "lemma peterson_thread_2:\n \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/F\\<^esub>  \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>\n  WHILE True INV \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>\n  DO\n  \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace> \\<langle>\\<acute>in2:=True,, \\<acute>pr2:=1 \\<rangle>;;\n  \\<lbrace>\\<acute>pr2=1 \\<and> \\<acute>in2\\<rbrace> \\<langle> \\<acute>hold:=2,, \\<acute>pr2:=2 \\<rangle> ;;\n  \\<lbrace>\\<acute>pr2=2 \\<and> \\<acute>in2 \\<and> (\\<acute>hold=2 \\<or> (\\<acute>hold=1 \\<and> \\<acute>pr1=2))\\<rbrace>\n  AWAIT (\\<not>\\<acute>in1 \\<or> \\<not>(\\<acute>hold=2)) THEN \\<acute>pr2:=3 END;;\n  \\<lbrace>\\<acute>pr2=3 \\<and> \\<acute>in2 \\<and> (\\<acute>hold=2 \\<or> (\\<acute>hold=1 \\<and> \\<acute>pr1=2))\\<rbrace>\n    \\<langle>\\<acute>in2:=False,, \\<acute>pr2:=0\\<rangle>\n  OD \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>,\\<lbrace>False\\<rbrace>\n \"", "lemma Petersons_mutex_1:\n  \"\\<Gamma>, \\<Theta> |\\<tturnstile>\\<^bsub>/F\\<^esub> \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1 \\<and> \\<acute>pr2=0 \\<and> \\<not>\\<acute>in2 \\<rbrace>\n  COBEGIN\n  \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1 \\<rbrace>  WHILE True INV \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>\n  DO\n  \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace> \\<langle> \\<acute>in1:=True,, \\<acute>pr1:=1 \\<rangle>;;\n  \\<lbrace>\\<acute>pr1=1 \\<and> \\<acute>in1\\<rbrace>  \\<langle> \\<acute>hold:=1,,  \\<acute>pr1:=2 \\<rangle>;;\n  \\<lbrace>\\<acute>pr1=2 \\<and> \\<acute>in1 \\<and> (\\<acute>hold=1 \\<or> (\\<acute>hold=2 \\<and> \\<acute>pr2=2))\\<rbrace>\n  AWAIT (\\<not>\\<acute>in2 \\<or> \\<not>(\\<acute>hold=1)) THEN \\<acute>pr1:=3  END;;\n  \\<lbrace>\\<acute>pr1=3 \\<and> \\<acute>in1 \\<and> (\\<acute>hold=1 \\<or> (\\<acute>hold=2 \\<and> \\<acute>pr2=2))\\<rbrace>\n   \\<langle> \\<acute>in1:=False,, \\<acute>pr1:=0\\<rangle>\n  OD \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>,\\<lbrace>False\\<rbrace>\n  \\<parallel>\n  \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>\n  WHILE True INV \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>\n  DO\n  \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace> \\<langle> \\<acute>in2:=True,, \\<acute>pr2:=1 \\<rangle>;;\n  \\<lbrace>\\<acute>pr2=1 \\<and> \\<acute>in2\\<rbrace> \\<langle> \\<acute>hold:=2,, \\<acute>pr2:=2 \\<rangle> ;;\n  \\<lbrace>\\<acute>pr2=2 \\<and> \\<acute>in2 \\<and> (\\<acute>hold=2 \\<or> (\\<acute>hold=1 \\<and> \\<acute>pr1=2))\\<rbrace>\n  AWAIT (\\<not>\\<acute>in1 \\<or> \\<not>(\\<acute>hold=2)) THEN \\<acute>pr2:=3 END;;\n  \\<lbrace>\\<acute>pr2=3 \\<and> \\<acute>in2 \\<and> (\\<acute>hold=2 \\<or> (\\<acute>hold=1 \\<and> \\<acute>pr1=2))\\<rbrace>\n    \\<langle> \\<acute>in2:=False,, \\<acute>pr2:=0\\<rangle>\n  OD \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>,\\<lbrace>False\\<rbrace>\n  COEND\n  \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1 \\<and> \\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>,\\<lbrace>False\\<rbrace>\""], "translations": [["", "lemma\n  \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/{True}\\<^esub>\n    COBEGIN test_guard \\<lbrace>True\\<rbrace>,\\<lbrace>True\\<rbrace>\n         \\<parallel> \\<lbrace>True\\<rbrace> \\<acute>y:=0 \\<lbrace>True\\<rbrace>, \\<lbrace>True\\<rbrace>\n    COEND \\<lbrace>True\\<rbrace>,\\<lbrace>True\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<turnstile>\\<^bsub>/{True}\\<^esub> COBEGIN\n     test_guard\n     \\<lbrace>True\\<rbrace>, \\<lbrace>True\\<rbrace>\n   \\<parallel>\n     \\<lbrace>True\\<rbrace>\n     \\<acute>y := 0\n     \\<lbrace>True\\<rbrace>, \\<lbrace>True\\<rbrace>\n   COEND\n   \\<lbrace>True\\<rbrace>, \\<lbrace>True\\<rbrace>", "unfolding test_guard_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<turnstile>\\<^bsub>/{True}\\<^esub> COBEGIN\n     (\\<lbrace>True\\<rbrace>\n      (True, \\<lbrace>\\<acute>x = 0\\<rbrace>),\n      (False, \\<lbrace>0 = 0\\<rbrace>) \\<longmapsto>\n        \\<lbrace>True\\<rbrace>\n        \\<acute>y := 0;;\n      \\<lbrace>True\\<rbrace>\n      \\<acute>x := 0)\n     \\<lbrace>True\\<rbrace>, \\<lbrace>True\\<rbrace>\n   \\<parallel>\n     \\<lbrace>True\\<rbrace>\n     \\<acute>y := 0\n     \\<lbrace>True\\<rbrace>, \\<lbrace>True\\<rbrace>\n   COEND\n   \\<lbrace>True\\<rbrace>, \\<lbrace>True\\<rbrace>", "apply oghoare"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>\\<acute>x = 0\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnExpr \\<lbrace>True\\<rbrace>)\n 2. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>\\<acute>x = 0\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> \\<lbrace>True\\<rbrace> \\<inter>\n                               \\<lbrace>\\<acute>x = 0\\<rbrace>\\<rbrace>\n 3. pre (AnnExpr \\<lbrace>True\\<rbrace>) \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> pre (AnnExpr \\<lbrace>True\\<rbrace>)\\<rbrace>\n 4. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>\\<acute>x = 0\\<rbrace>\n    \\<subseteq> pre (AnnRec\n                      (\\<lbrace>True\\<rbrace> \\<inter>\n                       \\<lbrace>\\<acute>x = 0\\<rbrace>)\n                      (AnnExpr \\<lbrace>True\\<rbrace>))\n 5. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 6. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(x_update (\\<lambda>_. 0))\n                         \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 7. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>\\<acute>x = 0\\<rbrace> \\<inter>\n    - \\<lbrace>True\\<rbrace> \\<noteq>\n    {} \\<longrightarrow>\n    False \\<in> {True}\n 8. \\<lbrace>True\\<rbrace> \\<inter>\n    - \\<lbrace>\\<acute>x = 0\\<rbrace> \\<noteq>\n    {} \\<longrightarrow>\n    True \\<in> {True}\n 9. \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> pre (AnnExpr \\<lbrace>True\\<rbrace>)\\<rbrace>\n 10. \\<lbrace>True\\<rbrace>\n     \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                          \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\nA total of 11 subgoals...", "(*11 subgoals*)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>\\<acute>x = 0\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnExpr \\<lbrace>True\\<rbrace>)\n 2. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>\\<acute>x = 0\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> \\<lbrace>True\\<rbrace> \\<inter>\n                               \\<lbrace>\\<acute>x = 0\\<rbrace>\\<rbrace>\n 3. pre (AnnExpr \\<lbrace>True\\<rbrace>) \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> pre (AnnExpr \\<lbrace>True\\<rbrace>)\\<rbrace>\n 4. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>\\<acute>x = 0\\<rbrace>\n    \\<subseteq> pre (AnnRec\n                      (\\<lbrace>True\\<rbrace> \\<inter>\n                       \\<lbrace>\\<acute>x = 0\\<rbrace>)\n                      (AnnExpr \\<lbrace>True\\<rbrace>))\n 5. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 6. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(x_update (\\<lambda>_. 0))\n                         \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 7. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>\\<acute>x = 0\\<rbrace> \\<inter>\n    - \\<lbrace>True\\<rbrace> \\<noteq>\n    {} \\<longrightarrow>\n    False \\<in> {True}\n 8. \\<lbrace>True\\<rbrace> \\<inter>\n    - \\<lbrace>\\<acute>x = 0\\<rbrace> \\<noteq>\n    {} \\<longrightarrow>\n    True \\<in> {True}\n 9. \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> pre (AnnExpr \\<lbrace>True\\<rbrace>)\\<rbrace>\n 10. \\<lbrace>True\\<rbrace>\n     \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                          \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\nA total of 11 subgoals...", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  \"test_try_throw \\<equiv> TRY \\<lbrace>True\\<rbrace> \\<acute>y := 0;;\n                      \\<lbrace>True\\<rbrace> THROW\n                     CATCH \\<lbrace>True\\<rbrace> \\<acute>x := 0\n                     END\""], ["", "subsection \\<open>Parameterized Examples\\<close>"], ["", "subsubsection \\<open>Set Elements of an Array to Zero\\<close>"], ["", "record Example1 =\n  ex1_a :: \"nat \\<Rightarrow> nat\""], ["", "lemma Example1: \n \"\\<Gamma>, \\<Theta>|\\<tturnstile>\\<^bsub>/F\\<^esub>\\<lbrace>True\\<rbrace>\n   COBEGIN SCHEME [0\\<le>i<n] \\<lbrace>True\\<rbrace> \\<acute>ex1_a:=\\<acute>ex1_a (i:=0) \\<lbrace>\\<acute>ex1_a i=0\\<rbrace>, \\<lbrace>False\\<rbrace> COEND \n  \\<lbrace>\\<forall>i < n. \\<acute>ex1_a i = 0\\<rbrace>, X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<tturnstile>\\<^bsub>/F\\<^esub> \\<lbrace>True\\<rbrace>\n                                     COBEGIN\n                                       SCHEME [0 \\<le> i < n]\n   \\<lbrace>True\\<rbrace>\n   \\<acute>ex1_a := \\<acute>ex1_a(i := 0)\n   \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\n                                     COEND\n                                     \\<lbrace>\\<forall>i<n.\n           \\<acute>ex1_a i = 0\\<rbrace>, X", "apply oghoare"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnPar\n                      (map (\\<lambda>i.\n                               (AnnExpr \\<lbrace>True\\<rbrace>,\n                                \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace>,\n                                \\<lbrace>False\\<rbrace>))\n                        [0..<n]))\n 2. \\<And>i.\n       0 \\<le> i \\<and> i < n \\<Longrightarrow>\n       \\<lbrace>True\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n(\\<lambda>_. \\<acute>ex1_a(i := 0)))\n                            \\<in> \\<lbrace>\\<acute>ex1_a i =\n     0\\<rbrace>\\<rbrace>\n 3. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n(\\<lambda>_. \\<acute>ex1_a(j := 0)))\n                            \\<in> \\<lbrace>\\<acute>ex1_a i =\n     0\\<rbrace>\\<rbrace>\n 4. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>False\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n(\\<lambda>_. \\<acute>ex1_a(j := 0)))\n                            \\<in> \\<lbrace>False\\<rbrace>\\<rbrace>\n 5. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n(\\<lambda>_. \\<acute>ex1_a(j := 0)))\n                            \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 6. \\<And>x i.\n       \\<lbrakk>x \\<in> snd (snd (map (\\<lambda>i.\n    (AnnExpr \\<lbrace>True\\<rbrace>, \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace>,\n     \\<lbrace>False\\<rbrace>))\n                                   [0..<n] !\n                                  i));\n        i < n - 0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 7. \\<And>x i.\n       \\<lbrakk>\\<forall>i<n - 0.\n                   x \\<in> fst (snd (map\n(\\<lambda>i.\n    (AnnExpr \\<lbrace>True\\<rbrace>, \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace>,\n     \\<lbrace>False\\<rbrace>))\n[0..<n] !\n                                     i));\n        i < n\\<rbrakk>\n       \\<Longrightarrow> ex1_a x i = 0", "(* 7 subgoals *)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnPar\n                      (map (\\<lambda>i.\n                               (AnnExpr \\<lbrace>True\\<rbrace>,\n                                \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace>,\n                                \\<lbrace>False\\<rbrace>))\n                        [0..<n]))\n 2. \\<And>i.\n       0 \\<le> i \\<and> i < n \\<Longrightarrow>\n       \\<lbrace>True\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n(\\<lambda>_. \\<acute>ex1_a(i := 0)))\n                            \\<in> \\<lbrace>\\<acute>ex1_a i =\n     0\\<rbrace>\\<rbrace>\n 3. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n(\\<lambda>_. \\<acute>ex1_a(j := 0)))\n                            \\<in> \\<lbrace>\\<acute>ex1_a i =\n     0\\<rbrace>\\<rbrace>\n 4. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>False\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n(\\<lambda>_. \\<acute>ex1_a(j := 0)))\n                            \\<in> \\<lbrace>False\\<rbrace>\\<rbrace>\n 5. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n(\\<lambda>_. \\<acute>ex1_a(j := 0)))\n                            \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 6. \\<And>x i.\n       \\<lbrakk>x \\<in> snd (snd (map (\\<lambda>i.\n    (AnnExpr \\<lbrace>True\\<rbrace>, \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace>,\n     \\<lbrace>False\\<rbrace>))\n                                   [0..<n] !\n                                  i));\n        i < n - 0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 7. \\<And>x i.\n       \\<lbrakk>\\<forall>i<n - 0.\n                   x \\<in> fst (snd (map\n(\\<lambda>i.\n    (AnnExpr \\<lbrace>True\\<rbrace>, \\<lbrace>\\<acute>ex1_a i = 0\\<rbrace>,\n     \\<lbrace>False\\<rbrace>))\n[0..<n] !\n                                     i));\n        i < n\\<rbrakk>\n       \\<Longrightarrow> ex1_a x i = 0", "apply (simp ; fail)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Same example but with a Call.\\<close>"], ["", "definition\n   \"Example1'a \\<equiv> \\<lbrace>True\\<rbrace> \\<acute>ex1_a:=\\<acute>ex1_a (0:=0)\""], ["", "definition\n   \"Example1'b \\<equiv> \\<lbrace>True\\<rbrace> \\<acute>ex1_a:=\\<acute>ex1_a (1:=0)\""], ["", "definition \"Example1' \\<equiv>\n  COBEGIN Example1'a \\<lbrace>\\<acute>ex1_a 0=0\\<rbrace>, \\<lbrace>False\\<rbrace>\n         \\<parallel> \n         \\<lbrace>True\\<rbrace> SCALL 0 0\n         \\<lbrace>\\<acute>ex1_a 1=0\\<rbrace>, \\<lbrace>False\\<rbrace>\n  COEND\""], ["", "definition \"\\<Gamma>' = Map.empty(0 \\<mapsto> com Example1'b)\""], ["", "definition \"\\<Theta>' = Map.empty(0 :: nat \\<mapsto> [ann Example1'b])\""], ["", "lemma Example1_proc_simp[unfolded Example1'b_def oghoare_simps]:\n \"\\<Gamma>' 0 = Some (com (Example1'b))\"\n \"\\<Theta>' 0 = Some ([ ann(Example1'b)])\"\n \"[ ann(Example1'b)]!0 = ann(Example1'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>' (0::'d) = Some (com Example1'b) &&&\n    \\<Theta>' 0 = Some [ann Example1'b] &&&\n    [ann Example1'b] ! 0 = ann Example1'b", "by (simp add: \\<Gamma>'_def \\<Theta>'_def)+"], ["", "lemma Example1':\nnotes Example1_proc_simp[proc_simp]\nshows\n \"\\<Gamma>', \\<Theta>' |\\<turnstile>\\<^bsub>/F\\<^esub> Example1' \\<lbrace>\\<forall>i < 2. \\<acute>ex1_a i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>', \\<Theta>'\n    |\\<turnstile>\\<^bsub>/F\\<^esub> Example1'\n                                    \\<lbrace>\\<forall>i<2.\n          \\<acute>ex1_a i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>", "unfolding Example1'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>', \\<Theta>'\n    |\\<turnstile>\\<^bsub>/F\\<^esub> COBEGIN\n                                      Example1'a\n\\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\n                                    \\<parallel>\n                                      \\<lbrace>True\\<rbrace>\nSCALL 0 0\n\\<lbrace>\\<acute>ex1_a 1 = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\n                                    COEND\n                                    \\<lbrace>\\<forall>i<2.\n          \\<acute>ex1_a i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>', \\<Theta>'\n    |\\<turnstile>\\<^bsub>/F\\<^esub> COBEGIN\n                                      Example1'a\n\\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace>, {}\n                                    \\<parallel>\n                                      UNIV\nSCALL 0 0\n\\<lbrace>\\<acute>ex1_a (Suc 0) = 0\\<rbrace>, {}\n                                    COEND\n                                    \\<lbrace>\\<forall>i<2.\n          \\<acute>ex1_a i = 0\\<rbrace>, {}", "unfolding Example1'a_def Example1'b_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>', \\<Theta>'\n    |\\<turnstile>\\<^bsub>/F\\<^esub> COBEGIN\n                                      \\<lbrace>True\\<rbrace>\n\\<acute>ex1_a := \\<acute>ex1_a(0 := 0)\n\\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace>, {}\n                                    \\<parallel>\n                                      UNIV\nSCALL 0 0\n\\<lbrace>\\<acute>ex1_a (Suc 0) = 0\\<rbrace>, {}\n                                    COEND\n                                    \\<lbrace>\\<forall>i<2.\n          \\<acute>ex1_a i = 0\\<rbrace>, {}", "apply oghoare"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrace>\\<acute>ex1_a (Suc 0) = 0\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> \\<lbrace>\\<acute>ex1_a (Suc 0) =\n  0\\<rbrace>\\<rbrace>\n 2. \\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(1 := 0)))\n                         \\<in> \\<lbrace>\\<acute>ex1_a 0 =\n  0\\<rbrace>\\<rbrace>\n 3. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 4. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(1 := 0)))\n                         \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 5. UNIV \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> UNIV\\<rbrace>\n 6. {} \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> {}\\<rbrace>\n 7. {} \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(1 := 0)))\n                         \\<in> {}\\<rbrace>\n 8. \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(1 := 0)))\n                         \\<in> \\<lbrace>\\<acute>ex1_a (Suc 0) =\n  0\\<rbrace>\\<rbrace>\n 9. \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> \\<lbrace>\\<acute>ex1_a 0 =\n  0\\<rbrace>\\<rbrace>\n 10. UNIV \\<subseteq> pre (AnnExpr \\<lbrace>True\\<rbrace>)\nA total of 12 subgoals...", "(*12 subgoals*)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<lbrace>\\<acute>ex1_a (Suc 0) = 0\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> \\<lbrace>\\<acute>ex1_a (Suc 0) =\n  0\\<rbrace>\\<rbrace>\n 2. \\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(1 := 0)))\n                         \\<in> \\<lbrace>\\<acute>ex1_a 0 =\n  0\\<rbrace>\\<rbrace>\n 3. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 4. \\<lbrace>True\\<rbrace> \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(1 := 0)))\n                         \\<in> \\<lbrace>True\\<rbrace>\\<rbrace>\n 5. UNIV \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> UNIV\\<rbrace>\n 6. {} \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> {}\\<rbrace>\n 7. {} \\<inter> \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(1 := 0)))\n                         \\<in> {}\\<rbrace>\n 8. \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(1 := 0)))\n                         \\<in> \\<lbrace>\\<acute>ex1_a (Suc 0) =\n  0\\<rbrace>\\<rbrace>\n 9. \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(ex1_a_update\n                                   (\\<lambda>_. \\<acute>ex1_a(0 := 0)))\n                         \\<in> \\<lbrace>\\<acute>ex1_a 0 =\n  0\\<rbrace>\\<rbrace>\n 10. UNIV \\<subseteq> pre (AnnExpr \\<lbrace>True\\<rbrace>)\nA total of 12 subgoals...", "apply simp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       \\<lbrakk>ex1_a x (Suc 0) = 0; ex1_a x 0 = 0; i < 2\\<rbrakk>\n       \\<Longrightarrow> ex1_a x i = 0\n 2. \\<And>x i.\n       \\<lbrakk>i \\<in> insert (Suc 0) (insert 0 \\<lbrace>False\\<rbrace>);\n        x \\<in> snd (snd ([(AnnExpr \\<lbrace>True\\<rbrace>,\n                            \\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace>, {}),\n                           (AnnCall UNIV 0,\n                            \\<lbrace>\\<acute>ex1_a (Suc 0) = 0\\<rbrace>,\n                            {})] !\n                          i))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}", "using less_2_cases"], ["proof (prove)\nusing this:\n  ?n < 2 \\<Longrightarrow> ?n = 0 \\<or> ?n = Suc 0\n\ngoal (2 subgoals):\n 1. \\<And>x i.\n       \\<lbrakk>ex1_a x (Suc 0) = 0; ex1_a x 0 = 0; i < 2\\<rbrakk>\n       \\<Longrightarrow> ex1_a x i = 0\n 2. \\<And>x i.\n       \\<lbrakk>i \\<in> insert (Suc 0) (insert 0 \\<lbrace>False\\<rbrace>);\n        x \\<in> snd (snd ([(AnnExpr \\<lbrace>True\\<rbrace>,\n                            \\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace>, {}),\n                           (AnnCall UNIV 0,\n                            \\<lbrace>\\<acute>ex1_a (Suc 0) = 0\\<rbrace>,\n                            {})] !\n                          i))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>i \\<in> insert (Suc 0) (insert 0 \\<lbrace>False\\<rbrace>);\n        x \\<in> snd (snd ([(AnnExpr \\<lbrace>True\\<rbrace>,\n                            \\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace>, {}),\n                           (AnnCall UNIV 0,\n                            \\<lbrace>\\<acute>ex1_a (Suc 0) = 0\\<rbrace>,\n                            {})] !\n                          i))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       \\<lbrakk>i = Suc 0 \\<or> i = 0;\n        x \\<in> snd (snd ([(AnnExpr UNIV,\n                            \\<lbrace>\\<acute>ex1_a 0 = 0\\<rbrace>, {}),\n                           (AnnCall UNIV 0,\n                            \\<lbrace>\\<acute>ex1_a (Suc 0) = 0\\<rbrace>,\n                            {})] !\n                          i))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule disjE ; clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "type_synonym routine = nat"], ["", "text \\<open>Same example but with a Call.\\<close>"], ["", "record Example2 =\n  ex2_n :: \"routine \\<Rightarrow> nat\"\n  ex2_a :: \"nat \\<Rightarrow> string\""], ["", "definition\n  Example2'n :: \"routine \\<Rightarrow> (Example2, string \\<times> nat, 'f) ann_com\"\nwhere\n  \"Example2'n i \\<equiv> \\<lbrace>\\<acute>ex2_n i= i\\<rbrace> \\<acute>ex2_a:=\\<acute>ex2_a((\\<acute>ex2_n i):='''')\""], ["", "lemma Example2'n_map_of_simps[simp]:\n  \"i < n \\<Longrightarrow>\n    map_of (map (\\<lambda>i. ((p, i), g i)) [0..<n])\n       (p, i) = Some (g i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow>\n    map_of (map (\\<lambda>i. ((p, i), g i)) [0..<n]) (p, i) = Some (g i)", "apply (rule map_of_is_SomeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    distinct (map fst (map (\\<lambda>i. ((p, i), g i)) [0..<n]))\n 2. i < n \\<Longrightarrow>\n    ((p, i), g i) \\<in> set (map (\\<lambda>i. ((p, i), g i)) [0..<n])", "apply (clarsimp simp: distinct_map o_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow> inj_on (Pair p) {0..<n}\n 2. i < n \\<Longrightarrow>\n    ((p, i), g i) \\<in> set (map (\\<lambda>i. ((p, i), g i)) [0..<n])", "apply (meson inj_onI prod.inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow>\n    ((p, i), g i) \\<in> set (map (\\<lambda>i. ((p, i), g i)) [0..<n])", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"\\<Gamma>'' n \\<equiv>\n  map_of (map (\\<lambda>i. ((''f'', i), com (Example2'n i))) [0..<n])\""], ["", "definition \"\\<Theta>'' n \\<equiv>\n  map_of (map (\\<lambda>i. ((''f'', i), [ann (Example2'n i)])) [0..<n])\""], ["", "lemma  Example2'n_proc_simp[unfolded Example2'n_def oghoare_simps]:\n \"i<n \\<Longrightarrow> \\<Gamma>'' n (''f'',i) = Some ( com(Example2'n i))\"\n \"i<n \\<Longrightarrow> \\<Theta>'' n (''f'',i) = Some ([ ann(Example2'n i)])\"\n \"[ ann(Example2'n i)]!0 = ann(Example2'n i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < n \\<Longrightarrow>\n     \\<Gamma>'' n (''f'', i) = Some (com (Example2'n i))) &&&\n    (i < n \\<Longrightarrow>\n     \\<Theta>'' n (''f'', i) = Some [ann (Example2'n i)]) &&&\n    [ann (Example2'n i)] ! 0 = ann (Example2'n i)", "by (simp add: \\<Gamma>''_def \\<Theta>''_def)+"], ["", "lemmas Example2'n_proc_simp[proc_simp add]"], ["", "lemma Example2:\nnotes Example2'n_proc_simp[proc_simp]\nshows\n \"\\<Gamma>'' n, \\<Theta>'' n\n |\\<tturnstile>\\<^bsub>/F\\<^esub>\\<lbrace>True\\<rbrace>\n   COBEGIN SCHEME [0\\<le>i<n]\n     \\<lbrace>True\\<rbrace>\n       CALLX (\\<lambda>s. s\\<lparr>ex2_n:=(ex2_n s)(i:=i)\\<rparr>) \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> (''f'', i) 0\n       (\\<lambda>s t. t\\<lparr>ex2_n:= (ex2_n t)(i:=(ex2_n s) i)\\<rparr>) (\\<lambda>x y. Skip)\n       \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i)='''' \\<and> \\<acute>ex2_n i = i\\<rbrace> \\<lbrace>\\<acute>ex2_a i=''''\\<rbrace> \\<lbrace>False\\<rbrace>  \\<lbrace>False\\<rbrace>\n     \\<lbrace>\\<acute>ex2_a i=''''\\<rbrace>, \\<lbrace>False\\<rbrace>\n   COEND \n  \\<lbrace>\\<forall>i < n. \\<acute>ex2_a i = ''''\\<rbrace>, \\<lbrace>False\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'' n, \\<Theta>'' n\n    |\\<tturnstile>\\<^bsub>/F\\<^esub> \\<lbrace>True\\<rbrace>\n                                     COBEGIN\n                                       SCHEME [0 \\<le> i < n]\n   \\<lbrace>True\\<rbrace>\n   CALLX (\\<lambda>s. s\\<lparr>ex2_n := (ex2_n s)(i := i)\\<rparr>)\n     \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> (''f'', i) 0\n     (\\<lambda>s t. t\\<lparr>ex2_n := (ex2_n t)(i := ex2_n s i)\\<rparr>)\n     (\\<lambda>x y. Skip)\n     \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = [] \\<and>\n              \\<acute>ex2_n i = i\\<rbrace>\n     \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>\n     \\<lbrace>False\\<rbrace> \\<lbrace>False\\<rbrace>\n   \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>, \\<lbrace>False\\<rbrace>\n                                     COEND\n                                     \\<lbrace>\\<forall>i<n.\n           \\<acute>ex2_a i = []\\<rbrace>, \\<lbrace>False\\<rbrace>", "unfolding Example2'n_def ann_call_def call_def block_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>'' n, \\<Theta>'' n\n    |\\<tturnstile>\\<^bsub>/F\\<^esub> \\<lbrace>True\\<rbrace>\n                                     COBEGIN\n                                       SCHEME [0 \\<le> i < n]\n   AnnCom\n    (AnnRec \\<lbrace>True\\<rbrace>\n      (AnnComp\n        (AnnComp\n          (AnnComp (AnnExpr \\<lbrace>True\\<rbrace>)\n            (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> 0))\n          (AnnComp (AnnExpr \\<lbrace>False\\<rbrace>)\n            (AnnExpr \\<lbrace>False\\<rbrace>)))\n        (AnnRec\n          \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = [] \\<and>\n                   \\<acute>ex2_n i = i\\<rbrace>\n          (AnnComp\n            (AnnExpr\n              \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = [] \\<and>\n                       \\<acute>ex2_n i = i\\<rbrace>)\n            (AnnExpr \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>)))))\n    (DynCom\n      (\\<lambda>s.\n          Seq (Catch\n                (Seq (Basic\n                       (\\<lambda>s. s\n                           \\<lparr>ex2_n := (ex2_n s)(i := i)\\<rparr>))\n                  (Call (''f'', i)))\n                (Seq (Basic\n                       (\\<lambda>t. t\n                           \\<lparr>ex2_n := (ex2_n t)\n                                     (i := ex2_n s i)\\<rparr>))\n                  Throw))\n           (DynCom\n             (\\<lambda>t.\n                 Seq (Basic\n                       (\\<lambda>t. t\n                           \\<lparr>ex2_n := (ex2_n t)\n                                     (i := ex2_n s i)\\<rparr>))\n                  Skip))))\n   \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>, \\<lbrace>False\\<rbrace>\n                                     COEND\n                                     \\<lbrace>\\<forall>i<n.\n           \\<acute>ex2_a i = []\\<rbrace>, \\<lbrace>False\\<rbrace>", "apply oghoare"], ["proof (prove)\ngoal (113 subgoals):\n 1. \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnPar\n                      (map (\\<lambda>i.\n                               (AnnRec \\<lbrace>True\\<rbrace>\n                                 (AnnComp\n                                   (AnnComp\n                                     (AnnComp\n (AnnExpr \\<lbrace>True\\<rbrace>)\n (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> 0))\n                                     (AnnComp\n (AnnExpr \\<lbrace>False\\<rbrace>) (AnnExpr \\<lbrace>False\\<rbrace>)))\n                                   (AnnRec\n                                     \\<lbrace>\\<acute>ex2_a\n         (\\<acute>ex2_n i) =\n        [] \\<and>\n        \\<acute>ex2_n i = i\\<rbrace>\n                                     (AnnComp\n (AnnExpr\n   \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = [] \\<and>\n            \\<acute>ex2_n i = i\\<rbrace>)\n (AnnExpr \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>)))),\n                                \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>,\n                                \\<lbrace>False\\<rbrace>))\n                        [0..<n]))\n 2. \\<And>i.\n       0 \\<le> i \\<and> i < n \\<Longrightarrow>\n       \\<lbrace>True\\<rbrace>\n       \\<subseteq> pre (AnnComp\n                         (AnnComp\n                           (AnnComp (AnnExpr \\<lbrace>True\\<rbrace>)\n                             (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>\n                               0))\n                           (AnnComp (AnnExpr \\<lbrace>False\\<rbrace>)\n                             (AnnExpr \\<lbrace>False\\<rbrace>)))\n                         (AnnRec\n                           (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                                     []\\<rbrace> \\<inter>\n                            \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>)\n                           (AnnComp\n                             (AnnExpr\n                               (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n   []\\<rbrace> \\<inter>\n                                \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>))\n                             (AnnExpr\n                               \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>))))\n 3. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                                  []\\<rbrace> \\<inter>\n                         \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>\n                         \\<subseteq> pre\n(AnnComp\n  (AnnExpr\n    (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = []\\<rbrace> \\<inter>\n     \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>))\n  (AnnExpr \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>))\n 4. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>\n                         \\<subseteq> pre\n(AnnExpr \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>)\n 5. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>\n                         \\<subseteq> \\<lbrace>\\<acute>(ex2_a_update\n                  (\\<lambda>_. \\<acute>ex2_a(\\<acute>ex2_n i := [])))\n        \\<in> pre (AnnRec\n                    (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                              []\\<rbrace> \\<inter>\n                     \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>)\n                    (AnnComp\n                      (AnnExpr\n                        (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                                  []\\<rbrace> \\<inter>\n                         \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>))\n                      (AnnExpr\n                        \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>)))\\<rbrace>\n 6. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>False\\<rbrace>\n                         \\<subseteq> \\<lbrace>\\<acute>(ex2_n_update\n                  (\\<lambda>_. \\<acute>ex2_n(i := ex2_n s i)))\n        \\<in> pre (AnnExpr \\<lbrace>False\\<rbrace>)\\<rbrace>\n 7. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>True\\<rbrace>\n                         \\<subseteq> \\<lbrace>\\<acute>(ex2_n_update\n                  (\\<lambda>_. \\<acute>ex2_n(i := i)))\n        \\<in> pre (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> 0)\\<rbrace>\n 8. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>False\\<rbrace>\n                         \\<subseteq> \\<lbrace>False\\<rbrace>\n 9. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> i < n\n 10. \\<And>x i.\n        \\<lbrakk>x \\<in> snd (snd (map (\\<lambda>i.\n     (AnnRec \\<lbrace>True\\<rbrace>\n       (AnnComp\n         (AnnComp\n           (AnnComp (AnnExpr \\<lbrace>True\\<rbrace>)\n             (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> 0))\n           (AnnComp (AnnExpr \\<lbrace>False\\<rbrace>)\n             (AnnExpr \\<lbrace>False\\<rbrace>)))\n         (AnnRec\n           (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = []\\<rbrace> \\<inter>\n            \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>)\n           (AnnComp\n             (AnnExpr\n               (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                         []\\<rbrace> \\<inter>\n                \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>))\n             (AnnExpr \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>)))),\n      \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>, \\<lbrace>False\\<rbrace>))\n                                    [0..<n] !\n                                   i));\n         i < n - 0\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 113 subgoals...", "(* 113 subgoals *)"], ["proof (prove)\ngoal (113 subgoals):\n 1. \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnPar\n                      (map (\\<lambda>i.\n                               (AnnRec \\<lbrace>True\\<rbrace>\n                                 (AnnComp\n                                   (AnnComp\n                                     (AnnComp\n (AnnExpr \\<lbrace>True\\<rbrace>)\n (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> 0))\n                                     (AnnComp\n (AnnExpr \\<lbrace>False\\<rbrace>) (AnnExpr \\<lbrace>False\\<rbrace>)))\n                                   (AnnRec\n                                     \\<lbrace>\\<acute>ex2_a\n         (\\<acute>ex2_n i) =\n        [] \\<and>\n        \\<acute>ex2_n i = i\\<rbrace>\n                                     (AnnComp\n (AnnExpr\n   \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = [] \\<and>\n            \\<acute>ex2_n i = i\\<rbrace>)\n (AnnExpr \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>)))),\n                                \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>,\n                                \\<lbrace>False\\<rbrace>))\n                        [0..<n]))\n 2. \\<And>i.\n       0 \\<le> i \\<and> i < n \\<Longrightarrow>\n       \\<lbrace>True\\<rbrace>\n       \\<subseteq> pre (AnnComp\n                         (AnnComp\n                           (AnnComp (AnnExpr \\<lbrace>True\\<rbrace>)\n                             (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>\n                               0))\n                           (AnnComp (AnnExpr \\<lbrace>False\\<rbrace>)\n                             (AnnExpr \\<lbrace>False\\<rbrace>)))\n                         (AnnRec\n                           (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                                     []\\<rbrace> \\<inter>\n                            \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>)\n                           (AnnComp\n                             (AnnExpr\n                               (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n   []\\<rbrace> \\<inter>\n                                \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>))\n                             (AnnExpr\n                               \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>))))\n 3. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                                  []\\<rbrace> \\<inter>\n                         \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>\n                         \\<subseteq> pre\n(AnnComp\n  (AnnExpr\n    (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = []\\<rbrace> \\<inter>\n     \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>))\n  (AnnExpr \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>))\n 4. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>\n                         \\<subseteq> pre\n(AnnExpr \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>)\n 5. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>\n                         \\<subseteq> \\<lbrace>\\<acute>(ex2_a_update\n                  (\\<lambda>_. \\<acute>ex2_a(\\<acute>ex2_n i := [])))\n        \\<in> pre (AnnRec\n                    (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                              []\\<rbrace> \\<inter>\n                     \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>)\n                    (AnnComp\n                      (AnnExpr\n                        (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                                  []\\<rbrace> \\<inter>\n                         \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>))\n                      (AnnExpr\n                        \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>)))\\<rbrace>\n 6. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>False\\<rbrace>\n                         \\<subseteq> \\<lbrace>\\<acute>(ex2_n_update\n                  (\\<lambda>_. \\<acute>ex2_n(i := ex2_n s i)))\n        \\<in> pre (AnnExpr \\<lbrace>False\\<rbrace>)\\<rbrace>\n 7. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>True\\<rbrace>\n                         \\<subseteq> \\<lbrace>\\<acute>(ex2_n_update\n                  (\\<lambda>_. \\<acute>ex2_n(i := i)))\n        \\<in> pre (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> 0)\\<rbrace>\n 8. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace>False\\<rbrace>\n                         \\<subseteq> \\<lbrace>False\\<rbrace>\n 9. \\<And>i s.\n       \\<lbrakk>0 \\<le> i \\<and> i < n;\n        s \\<in> \\<lbrace>True\\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> i < n\n 10. \\<And>x i.\n        \\<lbrakk>x \\<in> snd (snd (map (\\<lambda>i.\n     (AnnRec \\<lbrace>True\\<rbrace>\n       (AnnComp\n         (AnnComp\n           (AnnComp (AnnExpr \\<lbrace>True\\<rbrace>)\n             (AnnCall \\<lbrace>\\<acute>ex2_n i = i\\<rbrace> 0))\n           (AnnComp (AnnExpr \\<lbrace>False\\<rbrace>)\n             (AnnExpr \\<lbrace>False\\<rbrace>)))\n         (AnnRec\n           (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) = []\\<rbrace> \\<inter>\n            \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>)\n           (AnnComp\n             (AnnExpr\n               (\\<lbrace>\\<acute>ex2_a (\\<acute>ex2_n i) =\n                         []\\<rbrace> \\<inter>\n                \\<lbrace>\\<acute>ex2_n i = i\\<rbrace>))\n             (AnnExpr \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>)))),\n      \\<lbrace>\\<acute>ex2_a i = []\\<rbrace>, \\<lbrace>False\\<rbrace>))\n                                    [0..<n] !\n                                   i));\n         i < n - 0\\<rbrakk>\n        \\<Longrightarrow> False\nA total of 113 subgoals...", "apply (clarsimp ; fail)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Example2'n_proc_simp[proc_simp del]"], ["", "text \\<open>Same example with lists as auxiliary variables.\\<close>"], ["", "record Example2_list =\n  ex2_A :: \"nat list\""], ["", "lemma Example2_list: \n \"\\<Gamma>, \\<Theta> |\\<tturnstile>\\<^bsub>/F\\<^esub>\\<lbrace>n < length \\<acute>ex2_A\\<rbrace> \n   COBEGIN \n     SCHEME [0\\<le>i<n] \\<lbrace>n < length \\<acute>ex2_A\\<rbrace> \\<acute>ex2_A:=\\<acute>ex2_A[i:=0] \\<lbrace>\\<acute>ex2_A!i=0\\<rbrace>,\\<lbrace>False\\<rbrace> \n   COEND \n    \\<lbrace>\\<forall>i < n. \\<acute>ex2_A!i = 0\\<rbrace>, X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<tturnstile>\\<^bsub>/F\\<^esub> \\<lbrace>n\n        < length \\<acute>ex2_A\\<rbrace>\n                                     COBEGIN\n                                       SCHEME [0 \\<le> i < n]\n   \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n   \\<acute>ex2_A := \\<acute>ex2_A[i := 0]\n   \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\n                                     COEND\n                                     \\<lbrace>\\<forall>i<n.\n           \\<acute>ex2_A ! i = 0\\<rbrace>, X", "apply oghoare"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n    \\<subseteq> pre (AnnPar\n                      (map (\\<lambda>i.\n                               (AnnExpr\n                                 \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>,\n                                \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace>,\n                                \\<lbrace>False\\<rbrace>))\n                        [0..<n]))\n 2. \\<And>i.\n       0 \\<le> i \\<and> i < n \\<Longrightarrow>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex2_A_update\n(\\<lambda>_. \\<acute>ex2_A[i := 0]))\n                            \\<in> \\<lbrace>\\<acute>ex2_A ! i =\n     0\\<rbrace>\\<rbrace>\n 3. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace> \\<inter>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex2_A_update\n(\\<lambda>_. \\<acute>ex2_A[j := 0]))\n                            \\<in> \\<lbrace>\\<acute>ex2_A ! i =\n     0\\<rbrace>\\<rbrace>\n 4. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace> \\<inter>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex2_A_update\n(\\<lambda>_. \\<acute>ex2_A[j := 0]))\n                            \\<in> \\<lbrace>n\n     < length \\<acute>ex2_A\\<rbrace>\\<rbrace>\n 5. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>False\\<rbrace> \\<inter>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex2_A_update\n(\\<lambda>_. \\<acute>ex2_A[j := 0]))\n                            \\<in> \\<lbrace>False\\<rbrace>\\<rbrace>\n 6. \\<And>x i.\n       \\<lbrakk>x \\<in> snd (snd (map (\\<lambda>i.\n    (AnnExpr \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>,\n     \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>))\n                                   [0..<n] !\n                                  i));\n        i < n - 0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 7. \\<And>x i.\n       \\<lbrakk>\\<forall>i<n - 0.\n                   x \\<in> fst (snd (map\n(\\<lambda>i.\n    (AnnExpr \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>,\n     \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>))\n[0..<n] !\n                                     i));\n        i < n\\<rbrakk>\n       \\<Longrightarrow> ex2_A x ! i = 0", "(*7 subgoals*)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n    \\<subseteq> pre (AnnPar\n                      (map (\\<lambda>i.\n                               (AnnExpr\n                                 \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>,\n                                \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace>,\n                                \\<lbrace>False\\<rbrace>))\n                        [0..<n]))\n 2. \\<And>i.\n       0 \\<le> i \\<and> i < n \\<Longrightarrow>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex2_A_update\n(\\<lambda>_. \\<acute>ex2_A[i := 0]))\n                            \\<in> \\<lbrace>\\<acute>ex2_A ! i =\n     0\\<rbrace>\\<rbrace>\n 3. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace> \\<inter>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex2_A_update\n(\\<lambda>_. \\<acute>ex2_A[j := 0]))\n                            \\<in> \\<lbrace>\\<acute>ex2_A ! i =\n     0\\<rbrace>\\<rbrace>\n 4. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace> \\<inter>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex2_A_update\n(\\<lambda>_. \\<acute>ex2_A[j := 0]))\n                            \\<in> \\<lbrace>n\n     < length \\<acute>ex2_A\\<rbrace>\\<rbrace>\n 5. \\<And>i j.\n       0 \\<le> i \\<and>\n       i < n \\<and>\n       0 \\<le> j \\<and> j < n \\<and> i \\<noteq> j \\<Longrightarrow>\n       \\<lbrace>False\\<rbrace> \\<inter>\n       \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>\n       \\<subseteq> \\<lbrace>\\<acute>(ex2_A_update\n(\\<lambda>_. \\<acute>ex2_A[j := 0]))\n                            \\<in> \\<lbrace>False\\<rbrace>\\<rbrace>\n 6. \\<And>x i.\n       \\<lbrakk>x \\<in> snd (snd (map (\\<lambda>i.\n    (AnnExpr \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>,\n     \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>))\n                                   [0..<n] !\n                                  i));\n        i < n - 0\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 7. \\<And>x i.\n       \\<lbrakk>\\<forall>i<n - 0.\n                   x \\<in> fst (snd (map\n(\\<lambda>i.\n    (AnnExpr \\<lbrace>n < length \\<acute>ex2_A\\<rbrace>,\n     \\<lbrace>\\<acute>ex2_A ! i = 0\\<rbrace>, \\<lbrace>False\\<rbrace>))\n[0..<n] !\n                                     i));\n        i < n\\<rbrakk>\n       \\<Longrightarrow> ex2_A x ! i = 0", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exceptions_example:\n  \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/F\\<^esub> \n   TRY \n   \\<lbrace>True \\<rbrace> \\<acute>y := 0;;\n   \\<lbrace> \\<acute>y = 0 \\<rbrace> THROW\n   CATCH \n     \\<lbrace>\\<acute>y = 0\\<rbrace> \\<acute>x := \\<acute>y + 1\n   END\n   \\<lbrace> \\<acute>x = 1 \\<and> \\<acute>y = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<turnstile>\\<^bsub>/F\\<^esub> TRY\n\\<lbrace>True\\<rbrace>\n\\<acute>y := 0;;\n\\<lbrace>\\<acute>y = 0\\<rbrace> THROW\n                                    CATCH \\<lbrace>\\<acute>y = 0\\<rbrace>\n    \\<acute>x := \\<acute>y + 1\n                                    END\n                                    \\<lbrace>\\<acute>x = 1 \\<and>\n       \\<acute>y = 0\\<rbrace>, \\<lbrace>False\\<rbrace>", "by oghoare simp_all"], ["", "lemma guard_example:\n  \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/{42,66}\\<^esub> \n  \\<lbrace>True\\<rbrace> (42, \\<lbrace>\\<acute>x=0\\<rbrace>),\n   (66, \\<lbrace>\\<acute>y=0\\<rbrace>) \\<longmapsto> \\<lbrace>\\<acute>x = 0\\<rbrace> \n   \\<acute>y := 0;;\n   \\<lbrace>True\\<rbrace> \\<acute>x := 0\n  \\<lbrace> \\<acute>x = 0\\<rbrace>, \\<lbrace>False\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<turnstile>\\<^bsub>/{42::'c,\n                           66::'c}\\<^esub> \\<lbrace>True\\<rbrace>\n     (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>),\n     (66::'c, \\<lbrace>\\<acute>y = 0\\<rbrace>) \\<longmapsto>\n       \\<lbrace>\\<acute>x = 0\\<rbrace>\n       \\<acute>y := 0;;\n     \\<lbrace>True\\<rbrace>\n     \\<acute>x := 0\n     \\<lbrace>\\<acute>x = 0\\<rbrace>, \\<lbrace>False\\<rbrace>", "apply oghoare"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrace>True\\<rbrace> \\<inter>\n    snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>) \\<inter>\n    snd (66::'c, \\<lbrace>\\<acute>y = 0\\<rbrace>)\n    \\<subseteq> pre (AnnExpr \\<lbrace>\\<acute>x = 0\\<rbrace>)\n 2. \\<lbrace>True\\<rbrace> \\<inter>\n    snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>)\n    \\<subseteq> pre (AnnRec\n                      (\\<lbrace>True\\<rbrace> \\<inter>\n                       snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>))\n                      (AnnExpr \\<lbrace>\\<acute>x = 0\\<rbrace>))\n 3. \\<lbrace>True\\<rbrace> \\<inter>\n    snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>) \\<inter>\n    - snd (66::'c, \\<lbrace>\\<acute>y = 0\\<rbrace>) \\<noteq>\n    {} \\<longrightarrow>\n    fst (66::'c, \\<lbrace>\\<acute>y = 0\\<rbrace>) \\<in> {42::'c, 66::'c}\n 4. \\<lbrace>True\\<rbrace> \\<inter>\n    - snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>) \\<noteq>\n    {} \\<longrightarrow>\n    fst (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>) \\<in> {42::'c, 66::'c}\n 5. \\<lbrace>\\<acute>x = 0\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> pre (AnnExpr \\<lbrace>True\\<rbrace>)\\<rbrace>\n 6. \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(x_update (\\<lambda>_. 0))\n                         \\<in> \\<lbrace>\\<acute>x = 0\\<rbrace>\\<rbrace>", "(*6 subgoals*)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrace>True\\<rbrace> \\<inter>\n    snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>) \\<inter>\n    snd (66::'c, \\<lbrace>\\<acute>y = 0\\<rbrace>)\n    \\<subseteq> pre (AnnExpr \\<lbrace>\\<acute>x = 0\\<rbrace>)\n 2. \\<lbrace>True\\<rbrace> \\<inter>\n    snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>)\n    \\<subseteq> pre (AnnRec\n                      (\\<lbrace>True\\<rbrace> \\<inter>\n                       snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>))\n                      (AnnExpr \\<lbrace>\\<acute>x = 0\\<rbrace>))\n 3. \\<lbrace>True\\<rbrace> \\<inter>\n    snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>) \\<inter>\n    - snd (66::'c, \\<lbrace>\\<acute>y = 0\\<rbrace>) \\<noteq>\n    {} \\<longrightarrow>\n    fst (66::'c, \\<lbrace>\\<acute>y = 0\\<rbrace>) \\<in> {42::'c, 66::'c}\n 4. \\<lbrace>True\\<rbrace> \\<inter>\n    - snd (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>) \\<noteq>\n    {} \\<longrightarrow>\n    fst (42::'c, \\<lbrace>\\<acute>x = 0\\<rbrace>) \\<in> {42::'c, 66::'c}\n 5. \\<lbrace>\\<acute>x = 0\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(y_update (\\<lambda>_. 0))\n                         \\<in> pre (AnnExpr \\<lbrace>True\\<rbrace>)\\<rbrace>\n 6. \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(x_update (\\<lambda>_. 0))\n                         \\<in> \\<lbrace>\\<acute>x = 0\\<rbrace>\\<rbrace>", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Peterson's mutex algorithm I (from Hoare-Parallel) \\<close>"], ["", "text \\<open>Eike Best. \"Semantics of Sequential and Parallel Programs\", page 217.\\<close>"], ["", "record Petersons_mutex_1 =\n pr1 :: nat\n pr2 :: nat\n in1 :: bool\n in2 :: bool\n hold :: nat"], ["", "lemma peterson_thread_1:\n \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/F\\<^esub> \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>  WHILE True INV \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>\n  DO\n  \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace> \\<langle>\\<acute>in1:=True,, \\<acute>pr1:=1 \\<rangle>;;\n  \\<lbrace>\\<acute>pr1=1 \\<and> \\<acute>in1\\<rbrace>  \\<langle>\\<acute>hold:=1,, \\<acute>pr1:=2 \\<rangle>;;\n  \\<lbrace>\\<acute>pr1=2 \\<and> \\<acute>in1 \\<and> (\\<acute>hold=1 \\<or> \\<acute>hold=2 \\<and> \\<acute>pr2=2)\\<rbrace>\n  AWAIT (\\<not>\\<acute>in2 \\<or> \\<not>(\\<acute>hold=1)) THEN\n     \\<acute>pr1:=3\n  END;;\n  \\<lbrace>\\<acute>pr1=3 \\<and> \\<acute>in1 \\<and> (\\<acute>hold=1 \\<or> \\<acute>hold=2 \\<and> \\<acute>pr2=2)\\<rbrace>\n   \\<langle>\\<acute>in1:=False,,\\<acute>pr1:=0\\<rangle>\n  OD \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>,\\<lbrace>False\\<rbrace>\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<turnstile>\\<^bsub>/F\\<^esub> \\<lbrace>\\<acute>pr1 = 0 \\<and>\n       \\<not> \\<acute>in1\\<rbrace>\n                                    WHILE True\n                                    INV \\<lbrace>\\<acute>pr1 = 0 \\<and>\n           \\<not> \\<acute>in1\\<rbrace>\n                                    DO\n\\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>\n\\<langle>\\<acute>in1 := True;;\n         \\<acute>pr1 := 1\\<rangle>;;\n\\<lbrace>\\<acute>pr1 = 1 \\<and> \\<acute>in1\\<rbrace>\n\\<langle>\\<acute>hold := 1;;\n         \\<acute>pr1 := 2\\<rangle>;;\n\\<lbrace>\\<acute>pr1 = 2 \\<and>\n         \\<acute>in1 \\<and>\n         (\\<acute>hold = 1 \\<or>\n          \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\nAWAIT \\<not> \\<acute>in2 \\<or> \\<acute>hold \\<noteq> 1 THEN \\<acute>pr1 := 3\nEND;;\n\\<lbrace>\\<acute>pr1 = 3 \\<and>\n         \\<acute>in1 \\<and>\n         (\\<acute>hold = 1 \\<or>\n          \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n\\<langle>\\<acute>in1 := False;;\n         \\<acute>pr1 := 0\\<rangle>\n                                    OD\n                                    \\<lbrace>\\<acute>pr1 = 0 \\<and>\n       \\<not> \\<acute>in1\\<rbrace>, \\<lbrace>False\\<rbrace>", "apply oghoare"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrace>\\<acute>pr1 = 2 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>\\<not> \\<acute>in2 \\<or> \\<acute>hold \\<noteq> 1\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 3))\n                         \\<in> pre (AnnRec\n                                     \\<lbrace>\\<acute>pr1 = 3 \\<and>\n        \\<acute>in1 \\<and>\n        (\\<acute>hold = 1 \\<or>\n         \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n                                     (AnnComp (AnnExpr FAKE_ANN)\n (AnnExpr FAKE_ANN)))\\<rbrace>\n 2. \\<lbrace>\\<acute>pr1 = 3 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in1_update (\\<lambda>_. False))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 0))\n  \\<in> \\<lbrace>\\<acute>pr1 = 0 \\<and>\n                 \\<not> \\<acute>in1\\<rbrace>\\<rbrace>\\<rbrace>\n 3. \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace> \\<inter>\n    - \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>\n 4. \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnComp\n                      (AnnComp\n                        (AnnComp\n                          (AnnRec\n                            \\<lbrace>\\<acute>pr1 = 0 \\<and>\n                                     \\<not> \\<acute>in1\\<rbrace>\n                            (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN)))\n                          (AnnRec\n                            \\<lbrace>\\<acute>pr1 = 1 \\<and>\n                                     \\<acute>in1\\<rbrace>\n                            (AnnComp (AnnExpr FAKE_ANN)\n                              (AnnExpr FAKE_ANN))))\n                        (AnnRec\n                          \\<lbrace>\\<acute>pr1 = 2 \\<and>\n                                   \\<acute>in1 \\<and>\n                                   (\\<acute>hold = 1 \\<or>\n                                    \\<acute>hold = 2 \\<and>\n                                    \\<acute>pr2 = 2)\\<rbrace>\n                          (AnnExpr FAKE_ANN)))\n                      (AnnRec\n                        \\<lbrace>\\<acute>pr1 = 3 \\<and>\n                                 \\<acute>in1 \\<and>\n                                 (\\<acute>hold = 1 \\<or>\n                                  \\<acute>hold = 2 \\<and>\n                                  \\<acute>pr2 = 2)\\<rbrace>\n                        (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))))\n 5. \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in1_update (\\<lambda>_. True))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 1))\n  \\<in> pre (AnnRec \\<lbrace>\\<acute>pr1 = 1 \\<and> \\<acute>in1\\<rbrace>\n              (AnnComp (AnnExpr FAKE_ANN)\n                (AnnExpr FAKE_ANN)))\\<rbrace>\\<rbrace>\n 6. \\<lbrace>\\<acute>pr1 = 1 \\<and> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(hold_update (\\<lambda>_. 1))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 2))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr1 = 2 \\<and>\n                       \\<acute>in1 \\<and>\n                       (\\<acute>hold = 1 \\<or>\n                        \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n              (AnnExpr FAKE_ANN))\\<rbrace>\\<rbrace>\n 7. \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>", "(*7 subgoals*)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrace>\\<acute>pr1 = 2 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>\\<not> \\<acute>in2 \\<or> \\<acute>hold \\<noteq> 1\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 3))\n                         \\<in> pre (AnnRec\n                                     \\<lbrace>\\<acute>pr1 = 3 \\<and>\n        \\<acute>in1 \\<and>\n        (\\<acute>hold = 1 \\<or>\n         \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n                                     (AnnComp (AnnExpr FAKE_ANN)\n (AnnExpr FAKE_ANN)))\\<rbrace>\n 2. \\<lbrace>\\<acute>pr1 = 3 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in1_update (\\<lambda>_. False))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 0))\n  \\<in> \\<lbrace>\\<acute>pr1 = 0 \\<and>\n                 \\<not> \\<acute>in1\\<rbrace>\\<rbrace>\\<rbrace>\n 3. \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace> \\<inter>\n    - \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>\n 4. \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnComp\n                      (AnnComp\n                        (AnnComp\n                          (AnnRec\n                            \\<lbrace>\\<acute>pr1 = 0 \\<and>\n                                     \\<not> \\<acute>in1\\<rbrace>\n                            (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN)))\n                          (AnnRec\n                            \\<lbrace>\\<acute>pr1 = 1 \\<and>\n                                     \\<acute>in1\\<rbrace>\n                            (AnnComp (AnnExpr FAKE_ANN)\n                              (AnnExpr FAKE_ANN))))\n                        (AnnRec\n                          \\<lbrace>\\<acute>pr1 = 2 \\<and>\n                                   \\<acute>in1 \\<and>\n                                   (\\<acute>hold = 1 \\<or>\n                                    \\<acute>hold = 2 \\<and>\n                                    \\<acute>pr2 = 2)\\<rbrace>\n                          (AnnExpr FAKE_ANN)))\n                      (AnnRec\n                        \\<lbrace>\\<acute>pr1 = 3 \\<and>\n                                 \\<acute>in1 \\<and>\n                                 (\\<acute>hold = 1 \\<or>\n                                  \\<acute>hold = 2 \\<and>\n                                  \\<acute>pr2 = 2)\\<rbrace>\n                        (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))))\n 5. \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in1_update (\\<lambda>_. True))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 1))\n  \\<in> pre (AnnRec \\<lbrace>\\<acute>pr1 = 1 \\<and> \\<acute>in1\\<rbrace>\n              (AnnComp (AnnExpr FAKE_ANN)\n                (AnnExpr FAKE_ANN)))\\<rbrace>\\<rbrace>\n 6. \\<lbrace>\\<acute>pr1 = 1 \\<and> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(hold_update (\\<lambda>_. 1))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 2))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr1 = 2 \\<and>\n                       \\<acute>in1 \\<and>\n                       (\\<acute>hold = 1 \\<or>\n                        \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n              (AnnExpr FAKE_ANN))\\<rbrace>\\<rbrace>\n 7. \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>", "apply (((auto)[1]) ; fail)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma peterson_thread_2:\n \"\\<Gamma>, \\<Theta> |\\<turnstile>\\<^bsub>/F\\<^esub>  \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>\n  WHILE True INV \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>\n  DO\n  \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace> \\<langle>\\<acute>in2:=True,, \\<acute>pr2:=1 \\<rangle>;;\n  \\<lbrace>\\<acute>pr2=1 \\<and> \\<acute>in2\\<rbrace> \\<langle> \\<acute>hold:=2,, \\<acute>pr2:=2 \\<rangle> ;;\n  \\<lbrace>\\<acute>pr2=2 \\<and> \\<acute>in2 \\<and> (\\<acute>hold=2 \\<or> (\\<acute>hold=1 \\<and> \\<acute>pr1=2))\\<rbrace>\n  AWAIT (\\<not>\\<acute>in1 \\<or> \\<not>(\\<acute>hold=2)) THEN \\<acute>pr2:=3 END;;\n  \\<lbrace>\\<acute>pr2=3 \\<and> \\<acute>in2 \\<and> (\\<acute>hold=2 \\<or> (\\<acute>hold=1 \\<and> \\<acute>pr1=2))\\<rbrace>\n    \\<langle>\\<acute>in2:=False,, \\<acute>pr2:=0\\<rangle>\n  OD \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>,\\<lbrace>False\\<rbrace>\n \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<turnstile>\\<^bsub>/F\\<^esub> \\<lbrace>\\<acute>pr2 = 0 \\<and>\n       \\<not> \\<acute>in2\\<rbrace>\n                                    WHILE True\n                                    INV \\<lbrace>\\<acute>pr2 = 0 \\<and>\n           \\<not> \\<acute>in2\\<rbrace>\n                                    DO\n\\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>\n\\<langle>\\<acute>in2 := True;;\n         \\<acute>pr2 := 1\\<rangle>;;\n\\<lbrace>\\<acute>pr2 = 1 \\<and> \\<acute>in2\\<rbrace>\n\\<langle>\\<acute>hold := 2;;\n         \\<acute>pr2 := 2\\<rangle>;;\n\\<lbrace>\\<acute>pr2 = 2 \\<and>\n         \\<acute>in2 \\<and>\n         (\\<acute>hold = 2 \\<or>\n          \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\nAWAIT \\<not> \\<acute>in1 \\<or> \\<acute>hold \\<noteq> 2 THEN \\<acute>pr2 := 3\nEND;;\n\\<lbrace>\\<acute>pr2 = 3 \\<and>\n         \\<acute>in2 \\<and>\n         (\\<acute>hold = 2 \\<or>\n          \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n\\<langle>\\<acute>in2 := False;;\n         \\<acute>pr2 := 0\\<rangle>\n                                    OD\n                                    \\<lbrace>\\<acute>pr2 = 0 \\<and>\n       \\<not> \\<acute>in2\\<rbrace>, \\<lbrace>False\\<rbrace>", "apply oghoare"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrace>\\<acute>pr2 = 2 \\<and>\n             \\<acute>in2 \\<and>\n             (\\<acute>hold = 2 \\<or>\n              \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>\\<not> \\<acute>in1 \\<or> \\<acute>hold \\<noteq> 2\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 3))\n                         \\<in> pre (AnnRec\n                                     \\<lbrace>\\<acute>pr2 = 3 \\<and>\n        \\<acute>in2 \\<and>\n        (\\<acute>hold = 2 \\<or>\n         \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n                                     (AnnComp (AnnExpr FAKE_ANN)\n (AnnExpr FAKE_ANN)))\\<rbrace>\n 2. \\<lbrace>\\<acute>pr2 = 3 \\<and>\n             \\<acute>in2 \\<and>\n             (\\<acute>hold = 2 \\<or>\n              \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in2_update (\\<lambda>_. False))\n                         \\<in> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 0))\n  \\<in> \\<lbrace>\\<acute>pr2 = 0 \\<and>\n                 \\<not> \\<acute>in2\\<rbrace>\\<rbrace>\\<rbrace>\n 3. \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace> \\<inter>\n    - \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>\n 4. \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnComp\n                      (AnnComp\n                        (AnnComp\n                          (AnnRec\n                            \\<lbrace>\\<acute>pr2 = 0 \\<and>\n                                     \\<not> \\<acute>in2\\<rbrace>\n                            (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN)))\n                          (AnnRec\n                            \\<lbrace>\\<acute>pr2 = 1 \\<and>\n                                     \\<acute>in2\\<rbrace>\n                            (AnnComp (AnnExpr FAKE_ANN)\n                              (AnnExpr FAKE_ANN))))\n                        (AnnRec\n                          \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                                   \\<acute>in2 \\<and>\n                                   (\\<acute>hold = 2 \\<or>\n                                    \\<acute>hold = 1 \\<and>\n                                    \\<acute>pr1 = 2)\\<rbrace>\n                          (AnnExpr FAKE_ANN)))\n                      (AnnRec\n                        \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                                 \\<acute>in2 \\<and>\n                                 (\\<acute>hold = 2 \\<or>\n                                  \\<acute>hold = 1 \\<and>\n                                  \\<acute>pr1 = 2)\\<rbrace>\n                        (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))))\n 5. \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in2_update (\\<lambda>_. True))\n                         \\<in> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 1))\n  \\<in> pre (AnnRec \\<lbrace>\\<acute>pr2 = 1 \\<and> \\<acute>in2\\<rbrace>\n              (AnnComp (AnnExpr FAKE_ANN)\n                (AnnExpr FAKE_ANN)))\\<rbrace>\\<rbrace>\n 6. \\<lbrace>\\<acute>pr2 = 1 \\<and> \\<acute>in2\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(hold_update (\\<lambda>_. 2))\n                         \\<in> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 2))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                       \\<acute>in2 \\<and>\n                       (\\<acute>hold = 2 \\<or>\n                        \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n              (AnnExpr FAKE_ANN))\\<rbrace>\\<rbrace>\n 7. \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>", "(*7 subgoals*)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrace>\\<acute>pr2 = 2 \\<and>\n             \\<acute>in2 \\<and>\n             (\\<acute>hold = 2 \\<or>\n              \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>\\<not> \\<acute>in1 \\<or> \\<acute>hold \\<noteq> 2\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 3))\n                         \\<in> pre (AnnRec\n                                     \\<lbrace>\\<acute>pr2 = 3 \\<and>\n        \\<acute>in2 \\<and>\n        (\\<acute>hold = 2 \\<or>\n         \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n                                     (AnnComp (AnnExpr FAKE_ANN)\n (AnnExpr FAKE_ANN)))\\<rbrace>\n 2. \\<lbrace>\\<acute>pr2 = 3 \\<and>\n             \\<acute>in2 \\<and>\n             (\\<acute>hold = 2 \\<or>\n              \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in2_update (\\<lambda>_. False))\n                         \\<in> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 0))\n  \\<in> \\<lbrace>\\<acute>pr2 = 0 \\<and>\n                 \\<not> \\<acute>in2\\<rbrace>\\<rbrace>\\<rbrace>\n 3. \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace> \\<inter>\n    - \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>\n 4. \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> pre (AnnComp\n                      (AnnComp\n                        (AnnComp\n                          (AnnRec\n                            \\<lbrace>\\<acute>pr2 = 0 \\<and>\n                                     \\<not> \\<acute>in2\\<rbrace>\n                            (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN)))\n                          (AnnRec\n                            \\<lbrace>\\<acute>pr2 = 1 \\<and>\n                                     \\<acute>in2\\<rbrace>\n                            (AnnComp (AnnExpr FAKE_ANN)\n                              (AnnExpr FAKE_ANN))))\n                        (AnnRec\n                          \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                                   \\<acute>in2 \\<and>\n                                   (\\<acute>hold = 2 \\<or>\n                                    \\<acute>hold = 1 \\<and>\n                                    \\<acute>pr1 = 2)\\<rbrace>\n                          (AnnExpr FAKE_ANN)))\n                      (AnnRec\n                        \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                                 \\<acute>in2 \\<and>\n                                 (\\<acute>hold = 2 \\<or>\n                                  \\<acute>hold = 1 \\<and>\n                                  \\<acute>pr1 = 2)\\<rbrace>\n                        (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))))\n 5. \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in2_update (\\<lambda>_. True))\n                         \\<in> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 1))\n  \\<in> pre (AnnRec \\<lbrace>\\<acute>pr2 = 1 \\<and> \\<acute>in2\\<rbrace>\n              (AnnComp (AnnExpr FAKE_ANN)\n                (AnnExpr FAKE_ANN)))\\<rbrace>\\<rbrace>\n 6. \\<lbrace>\\<acute>pr2 = 1 \\<and> \\<acute>in2\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(hold_update (\\<lambda>_. 2))\n                         \\<in> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 2))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                       \\<acute>in2 \\<and>\n                       (\\<acute>hold = 2 \\<or>\n                        \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n              (AnnExpr FAKE_ANN))\\<rbrace>\\<rbrace>\n 7. \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>", "apply (((auto simp: )[1]) ; fail)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Petersons_mutex_1:\n  \"\\<Gamma>, \\<Theta> |\\<tturnstile>\\<^bsub>/F\\<^esub> \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1 \\<and> \\<acute>pr2=0 \\<and> \\<not>\\<acute>in2 \\<rbrace>\n  COBEGIN\n  \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1 \\<rbrace>  WHILE True INV \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>\n  DO\n  \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace> \\<langle> \\<acute>in1:=True,, \\<acute>pr1:=1 \\<rangle>;;\n  \\<lbrace>\\<acute>pr1=1 \\<and> \\<acute>in1\\<rbrace>  \\<langle> \\<acute>hold:=1,,  \\<acute>pr1:=2 \\<rangle>;;\n  \\<lbrace>\\<acute>pr1=2 \\<and> \\<acute>in1 \\<and> (\\<acute>hold=1 \\<or> (\\<acute>hold=2 \\<and> \\<acute>pr2=2))\\<rbrace>\n  AWAIT (\\<not>\\<acute>in2 \\<or> \\<not>(\\<acute>hold=1)) THEN \\<acute>pr1:=3  END;;\n  \\<lbrace>\\<acute>pr1=3 \\<and> \\<acute>in1 \\<and> (\\<acute>hold=1 \\<or> (\\<acute>hold=2 \\<and> \\<acute>pr2=2))\\<rbrace>\n   \\<langle> \\<acute>in1:=False,, \\<acute>pr1:=0\\<rangle>\n  OD \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1\\<rbrace>,\\<lbrace>False\\<rbrace>\n  \\<parallel>\n  \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>\n  WHILE True INV \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>\n  DO\n  \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace> \\<langle> \\<acute>in2:=True,, \\<acute>pr2:=1 \\<rangle>;;\n  \\<lbrace>\\<acute>pr2=1 \\<and> \\<acute>in2\\<rbrace> \\<langle> \\<acute>hold:=2,, \\<acute>pr2:=2 \\<rangle> ;;\n  \\<lbrace>\\<acute>pr2=2 \\<and> \\<acute>in2 \\<and> (\\<acute>hold=2 \\<or> (\\<acute>hold=1 \\<and> \\<acute>pr1=2))\\<rbrace>\n  AWAIT (\\<not>\\<acute>in1 \\<or> \\<not>(\\<acute>hold=2)) THEN \\<acute>pr2:=3 END;;\n  \\<lbrace>\\<acute>pr2=3 \\<and> \\<acute>in2 \\<and> (\\<acute>hold=2 \\<or> (\\<acute>hold=1 \\<and> \\<acute>pr1=2))\\<rbrace>\n    \\<langle> \\<acute>in2:=False,, \\<acute>pr2:=0\\<rangle>\n  OD \\<lbrace>\\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>,\\<lbrace>False\\<rbrace>\n  COEND\n  \\<lbrace>\\<acute>pr1=0 \\<and> \\<not>\\<acute>in1 \\<and> \\<acute>pr2=0 \\<and> \\<not>\\<acute>in2\\<rbrace>,\\<lbrace>False\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma>, \\<Theta>\n    |\\<tturnstile>\\<^bsub>/F\\<^esub> \\<lbrace>\\<acute>pr1 = 0 \\<and>\n        \\<not> \\<acute>in1 \\<and>\n        \\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>\n                                     COBEGIN\n                                       \\<lbrace>\\<acute>pr1 = 0 \\<and>\n          \\<not> \\<acute>in1\\<rbrace>\n WHILE True INV \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>\n DO \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>\n    \\<langle>\\<acute>in1 := True;;\n             \\<acute>pr1 := 1\\<rangle>;;\n    \\<lbrace>\\<acute>pr1 = 1 \\<and> \\<acute>in1\\<rbrace>\n    \\<langle>\\<acute>hold := 1;;\n             \\<acute>pr1 := 2\\<rangle>;;\n    \\<lbrace>\\<acute>pr1 = 2 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n    AWAIT \\<not> \\<acute>in2 \\<or> \\<acute>hold \\<noteq> 1\n    THEN \\<acute>pr1 := 3 END;;\n    \\<lbrace>\\<acute>pr1 = 3 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n    \\<langle>\\<acute>in1 := False;;\n             \\<acute>pr1 := 0\\<rangle>\n OD\n \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace>,\n \\<lbrace>False\\<rbrace>\n                                     \\<parallel>\n                                       \\<lbrace>\\<acute>pr2 = 0 \\<and>\n          \\<not> \\<acute>in2\\<rbrace>\n WHILE True INV \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>\n DO \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>\n    \\<langle>\\<acute>in2 := True;;\n             \\<acute>pr2 := 1\\<rangle>;;\n    \\<lbrace>\\<acute>pr2 = 1 \\<and> \\<acute>in2\\<rbrace>\n    \\<langle>\\<acute>hold := 2;;\n             \\<acute>pr2 := 2\\<rangle>;;\n    \\<lbrace>\\<acute>pr2 = 2 \\<and>\n             \\<acute>in2 \\<and>\n             (\\<acute>hold = 2 \\<or>\n              \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n    AWAIT \\<not> \\<acute>in1 \\<or> \\<acute>hold \\<noteq> 2\n    THEN \\<acute>pr2 := 3 END;;\n    \\<lbrace>\\<acute>pr2 = 3 \\<and>\n             \\<acute>in2 \\<and>\n             (\\<acute>hold = 2 \\<or>\n              \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n    \\<langle>\\<acute>in2 := False;;\n             \\<acute>pr2 := 0\\<rangle>\n OD\n \\<lbrace>\\<acute>pr2 = 0 \\<and> \\<not> \\<acute>in2\\<rbrace>,\n \\<lbrace>False\\<rbrace>\n                                     COEND\n                                     \\<lbrace>\\<acute>pr1 = 0 \\<and>\n        \\<not> \\<acute>in1 \\<and>\n        \\<acute>pr2 = 0 \\<and>\n        \\<not> \\<acute>in2\\<rbrace>, \\<lbrace>False\\<rbrace>", "apply oghoare\n\\<comment> \\<open>81 verification conditions.\\<close>"], ["proof (prove)\ngoal (81 subgoals):\n 1. pre (AnnRec\n          \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                   \\<acute>in2 \\<and>\n                   (\\<acute>hold = 2 \\<or>\n                    \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n          (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))) \\<inter>\n    \\<lbrace>\\<acute>pr1 = 2 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>\\<not> \\<acute>in2 \\<or> \\<acute>hold \\<noteq> 1\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 3))\n                         \\<in> pre (AnnRec\n                                     \\<lbrace>\\<acute>pr2 = 3 \\<and>\n        \\<acute>in2 \\<and>\n        (\\<acute>hold = 2 \\<or>\n         \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n                                     (AnnComp (AnnExpr FAKE_ANN)\n (AnnExpr FAKE_ANN)))\\<rbrace>\n 2. pre (AnnRec\n          \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                   \\<acute>in2 \\<and>\n                   (\\<acute>hold = 2 \\<or>\n                    \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n          (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))) \\<inter>\n    \\<lbrace>\\<acute>pr1 = 3 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in1_update (\\<lambda>_. False))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 0))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                       \\<acute>in2 \\<and>\n                       (\\<acute>hold = 2 \\<or>\n                        \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n              (AnnComp (AnnExpr FAKE_ANN)\n                (AnnExpr FAKE_ANN)))\\<rbrace>\\<rbrace>\n 3. pre (AnnRec\n          \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                   \\<acute>in2 \\<and>\n                   (\\<acute>hold = 2 \\<or>\n                    \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n          (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))) \\<inter>\n    \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in1_update (\\<lambda>_. True))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 1))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                       \\<acute>in2 \\<and>\n                       (\\<acute>hold = 2 \\<or>\n                        \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n              (AnnComp (AnnExpr FAKE_ANN)\n                (AnnExpr FAKE_ANN)))\\<rbrace>\\<rbrace>\n 4. pre (AnnRec\n          \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                   \\<acute>in2 \\<and>\n                   (\\<acute>hold = 2 \\<or>\n                    \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n          (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))) \\<inter>\n    \\<lbrace>\\<acute>pr1 = 1 \\<and> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(hold_update (\\<lambda>_. 1))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 2))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr2 = 3 \\<and>\n                       \\<acute>in2 \\<and>\n                       (\\<acute>hold = 2 \\<or>\n                        \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n              (AnnComp (AnnExpr FAKE_ANN)\n                (AnnExpr FAKE_ANN)))\\<rbrace>\\<rbrace>\n 5. pre (AnnRec\n          \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                   \\<acute>in2 \\<and>\n                   (\\<acute>hold = 2 \\<or>\n                    \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n          (AnnExpr FAKE_ANN)) \\<inter>\n    \\<lbrace>\\<acute>pr1 = 2 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>\\<not> \\<acute>in2 \\<or> \\<acute>hold \\<noteq> 1\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 3))\n                         \\<in> pre (AnnRec\n                                     \\<lbrace>\\<acute>pr2 = 2 \\<and>\n        \\<acute>in2 \\<and>\n        (\\<acute>hold = 2 \\<or>\n         \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n                                     (AnnExpr FAKE_ANN))\\<rbrace>\n 6. pre (AnnRec\n          \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                   \\<acute>in2 \\<and>\n                   (\\<acute>hold = 2 \\<or>\n                    \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n          (AnnExpr FAKE_ANN)) \\<inter>\n    \\<lbrace>\\<acute>pr1 = 3 \\<and>\n             \\<acute>in1 \\<and>\n             (\\<acute>hold = 1 \\<or>\n              \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in1_update (\\<lambda>_. False))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 0))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                       \\<acute>in2 \\<and>\n                       (\\<acute>hold = 2 \\<or>\n                        \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n              (AnnExpr FAKE_ANN))\\<rbrace>\\<rbrace>\n 7. pre (AnnRec\n          \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                   \\<acute>in2 \\<and>\n                   (\\<acute>hold = 2 \\<or>\n                    \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n          (AnnExpr FAKE_ANN)) \\<inter>\n    \\<lbrace>\\<acute>pr1 = 0 \\<and> \\<not> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(in1_update (\\<lambda>_. True))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 1))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                       \\<acute>in2 \\<and>\n                       (\\<acute>hold = 2 \\<or>\n                        \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n              (AnnExpr FAKE_ANN))\\<rbrace>\\<rbrace>\n 8. pre (AnnRec\n          \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                   \\<acute>in2 \\<and>\n                   (\\<acute>hold = 2 \\<or>\n                    \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n          (AnnExpr FAKE_ANN)) \\<inter>\n    \\<lbrace>\\<acute>pr1 = 1 \\<and> \\<acute>in1\\<rbrace> \\<inter>\n    \\<lbrace>True\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(hold_update (\\<lambda>_. 1))\n                         \\<in> \\<lbrace>\\<acute>(pr1_update (\\<lambda>_. 2))\n  \\<in> pre (AnnRec\n              \\<lbrace>\\<acute>pr2 = 2 \\<and>\n                       \\<acute>in2 \\<and>\n                       (\\<acute>hold = 2 \\<or>\n                        \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace>\n              (AnnExpr FAKE_ANN))\\<rbrace>\\<rbrace>\n 9. pre (AnnRec\n          \\<lbrace>\\<acute>pr1 = 3 \\<and>\n                   \\<acute>in1 \\<and>\n                   (\\<acute>hold = 1 \\<or>\n                    \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n          (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))) \\<inter>\n    \\<lbrace>\\<acute>pr2 = 2 \\<and>\n             \\<acute>in2 \\<and>\n             (\\<acute>hold = 2 \\<or>\n              \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace> \\<inter>\n    \\<lbrace>\\<not> \\<acute>in1 \\<or> \\<acute>hold \\<noteq> 2\\<rbrace>\n    \\<subseteq> \\<lbrace>\\<acute>(pr2_update (\\<lambda>_. 3))\n                         \\<in> pre (AnnRec\n                                     \\<lbrace>\\<acute>pr1 = 3 \\<and>\n        \\<acute>in1 \\<and>\n        (\\<acute>hold = 1 \\<or>\n         \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n                                     (AnnComp (AnnExpr FAKE_ANN)\n (AnnExpr FAKE_ANN)))\\<rbrace>\n 10. pre (AnnRec\n           \\<lbrace>\\<acute>pr1 = 3 \\<and>\n                    \\<acute>in1 \\<and>\n                    (\\<acute>hold = 1 \\<or>\n                     \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n           (AnnComp (AnnExpr FAKE_ANN) (AnnExpr FAKE_ANN))) \\<inter>\n     \\<lbrace>\\<acute>pr2 = 3 \\<and>\n              \\<acute>in2 \\<and>\n              (\\<acute>hold = 2 \\<or>\n               \\<acute>hold = 1 \\<and> \\<acute>pr1 = 2)\\<rbrace> \\<inter>\n     \\<lbrace>True\\<rbrace>\n     \\<subseteq> \\<lbrace>\\<acute>(in2_update (\\<lambda>_. False))\n                          \\<in> \\<lbrace>\\<acute>(pr2_update\n             (\\<lambda>_. 0))\n   \\<in> pre (AnnRec\n               \\<lbrace>\\<acute>pr1 = 3 \\<and>\n                        \\<acute>in1 \\<and>\n                        (\\<acute>hold = 1 \\<or>\n                         \\<acute>hold = 2 \\<and> \\<acute>pr2 = 2)\\<rbrace>\n               (AnnComp (AnnExpr FAKE_ANN)\n                 (AnnExpr FAKE_ANN)))\\<rbrace>\\<rbrace>\nA total of 81 subgoals...", "apply (((auto)[1]) ; fail)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}