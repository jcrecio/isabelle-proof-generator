{"file_name": "/home/qj213/afp-2021-10-22/thys/Complx/OG_Annotations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Complx", "problem_names": ["lemma fst_BNFs[simp]:\n  \"a \\<in> Basic_BNFs.fsts (a,b)\"", "lemma \"\\<not>pre_par c  \\<Longrightarrow> pre c \\<in> pre_set c\"", "lemma pre_set:\n  \"pre c = \\<Inter> (pre_set c)\"", "lemma pre_imp_pre_set:\n  \"s \\<in> pre c \\<Longrightarrow> a \\<in> pre_set c \\<Longrightarrow> s \\<in> a\"", "lemma weaken_pre_empty[simp]:\n  \"weaken_pre r {} = r\""], "translations": [["", "lemma fst_BNFs[simp]:\n  \"a \\<in> Basic_BNFs.fsts (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> Basic_BNFs.fsts (a, b)", "using fsts.intros"], ["proof (prove)\nusing this:\n  fst ?p \\<in> Basic_BNFs.fsts ?p\n\ngoal (1 subgoal):\n 1. a \\<in> Basic_BNFs.fsts (a, b)", "by auto"], ["", "lemma \"\\<not>pre_par c  \\<Longrightarrow> pre c \\<in> pre_set c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> pre_par c \\<Longrightarrow> pre c \\<in> pre_set c", "by (induct c; simp)"], ["", "lemma pre_set:\n  \"pre c = \\<Inter> (pre_set c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre c = \\<Inter> (pre_set c)", "by (induct c; fastforce)"], ["", "lemma pre_imp_pre_set:\n  \"s \\<in> pre c \\<Longrightarrow> a \\<in> pre_set c \\<Longrightarrow> s \\<in> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> pre c; a \\<in> pre_set c\\<rbrakk>\n    \\<Longrightarrow> s \\<in> a", "by (simp add: pre_set)"], ["", "abbreviation precond :: \"('s, 'p, 'f) ann_triple \\<Rightarrow> 's assn\"\nwhere \"precond a \\<equiv> pre (fst a)\""], ["", "fun strengthen_pre :: \"('s, 'p, 'f) ann \\<Rightarrow> 's assn \\<Rightarrow> ('s, 'p, 'f) ann\" where\n  \"strengthen_pre (AnnExpr r)      r' = AnnExpr (r \\<inter> r')\"                                                                                               \n| \"strengthen_pre (AnnRec r e)     r' = AnnRec (r \\<inter> r') e\"\n| \"strengthen_pre (AnnWhile r i e) r' = AnnWhile (r \\<inter> r') i e\"\n| \"strengthen_pre (AnnComp e\\<^sub>1 e\\<^sub>2)   r' = AnnComp (strengthen_pre e\\<^sub>1 r') e\\<^sub>2\"\n| \"strengthen_pre (AnnBin r e\\<^sub>1 e\\<^sub>2) r' = AnnBin (r \\<inter> r') e\\<^sub>1 e\\<^sub>2\"\n| \"strengthen_pre (AnnPar as)    r' = (AnnPar as)\"\n| \"strengthen_pre (AnnCall r n)    r' = AnnCall (r \\<inter> r') n\""], ["", "fun weaken_pre :: \"('s, 'p, 'f) ann \\<Rightarrow> 's assn \\<Rightarrow> ('s, 'p, 'f) ann\" where\n  \"weaken_pre (AnnExpr r)      r' = AnnExpr (r \\<union> r')\"                                                                                               \n| \"weaken_pre (AnnRec r e)     r' = AnnRec (r \\<union> r') e\"\n| \"weaken_pre (AnnWhile r i e) r' = AnnWhile (r \\<union> r') i e\"\n| \"weaken_pre (AnnComp e\\<^sub>1 e\\<^sub>2)   r' = AnnComp (weaken_pre e\\<^sub>1 r') e\\<^sub>2\"\n| \"weaken_pre (AnnBin r e\\<^sub>1 e\\<^sub>2) r' = AnnBin (r \\<union> r') e\\<^sub>1 e\\<^sub>2\"\n| \"weaken_pre (AnnPar as)   r' = AnnPar as\"\n| \"weaken_pre (AnnCall r n)    r' = AnnCall (r \\<union> r') n\""], ["", "lemma weaken_pre_empty[simp]:\n  \"weaken_pre r {} = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weaken_pre r {} = r", "by (induct r) auto"], ["", "text \\<open>Annotations for call definition (see Language.thy)\\<close>"], ["", "definition\n ann_call :: \"'s assn \\<Rightarrow> 's assn \\<Rightarrow> nat \\<Rightarrow>  's assn \\<Rightarrow>'s assn \\<Rightarrow>  's assn \\<Rightarrow> 's assn \\<Rightarrow> ('s,'p,'f) ann\"\nwhere\n \"ann_call init r n restoreq return restorea A \\<equiv> \n  AnnRec init (AnnComp (AnnComp (AnnComp (AnnExpr init) (AnnCall r n)) (AnnComp (AnnExpr restorea) (AnnExpr A)))\n          (AnnRec restoreq (AnnComp (AnnExpr restoreq) (AnnExpr return))))\""], ["", "inductive ann_matches :: \"('s,'p,'f) body \\<Rightarrow> ('s,'p,'f) proc_assns \\<Rightarrow> ('s, 'p, 'f) ann \\<Rightarrow> ('s, 'p, 'f) com \\<Rightarrow> bool\" where\n  ann_skip: \"ann_matches \\<Gamma> \\<Theta> (AnnExpr a) Skip\"\n| ann_basic: \"ann_matches \\<Gamma> \\<Theta> (AnnExpr a) (Basic f)\"\n| ann_spec: \"ann_matches \\<Gamma> \\<Theta> (AnnExpr a) (Spec r)\"\n| ann_throw: \"ann_matches \\<Gamma> \\<Theta> (AnnExpr a) (Throw)\"\n| ann_await: \"ann_matches \\<Gamma> \\<Theta> a e \\<Longrightarrow>\n               ann_matches \\<Gamma> \\<Theta> (AnnRec r a) (Await b e)\"\n| ann_seq: \"\\<lbrakk> ann_matches \\<Gamma> \\<Theta> a1 p1; ann_matches \\<Gamma> \\<Theta> a2 p2 \\<rbrakk> \\<Longrightarrow>\n               ann_matches \\<Gamma> \\<Theta> (AnnComp a1 a2) (Seq p1 p2)\"\n| ann_cond: \"\\<lbrakk> ann_matches \\<Gamma> \\<Theta> a1 c1; ann_matches \\<Gamma> \\<Theta> a2 c2 \\<rbrakk> \\<Longrightarrow>\n               ann_matches \\<Gamma> \\<Theta> (AnnBin a a1 a2) (Cond b c1 c2)\"\n| ann_catch: \"\\<lbrakk> ann_matches \\<Gamma> \\<Theta> a1 c1; ann_matches \\<Gamma> \\<Theta> a2 c2 \\<rbrakk> \\<Longrightarrow>\n                ann_matches \\<Gamma> \\<Theta> (AnnComp a1 a2) (Catch c1 c2)\"\n| ann_while: \"ann_matches \\<Gamma> \\<Theta> a' e \\<Longrightarrow>\n                ann_matches \\<Gamma> \\<Theta> (AnnWhile a i a') (While b e)\"\n| ann_guard: \"\\<lbrakk> ann_matches \\<Gamma> \\<Theta> a' e \\<rbrakk> \\<Longrightarrow> \n                ann_matches \\<Gamma> \\<Theta> (AnnRec a a') (Guard f b e)\"\n| ann_call: \"\\<lbrakk> \\<Theta> f = Some as; \\<Gamma> f = Some b; n < length as;\n               ann_matches \\<Gamma> \\<Theta> (as!n) b\\<rbrakk> \\<Longrightarrow>\n   ann_matches \\<Gamma> \\<Theta> (AnnCall a n) (Call f)\"\n| ann_dyncom: \"\\<forall>s\\<in>r. ann_matches \\<Gamma> \\<Theta> a (c s) \\<Longrightarrow>\n               ann_matches \\<Gamma> \\<Theta> (AnnRec r a) (DynCom c)\"\n| ann_parallel: \"\\<lbrakk> length as = length cs;\n                   \\<forall>i<length cs. ann_matches \\<Gamma> \\<Theta> (pres (as!i)) (cs!i) \\<rbrakk> \\<Longrightarrow>\n   ann_matches \\<Gamma> \\<Theta> (AnnPar as) (Parallel cs)\""], ["", "primrec ann_guards:: \"'s assn \\<Rightarrow> ('f \\<times> 's bexp ) list \\<Rightarrow>\n                  ('s,'p,'f) ann \\<Rightarrow> ('s,'p,'f) ann\"\nwhere\n  \"ann_guards _ [] c = c\" |\n  \"ann_guards r (g#gs) c = AnnRec r (ann_guards (r \\<inter> snd g) gs c)\""], ["", "end"]]}