{"file_name": "/home/qj213/afp-2021-10-22/thys/AVL-Trees/AVL.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AVL-Trees", "problem_names": ["lemmas delete_max_induct = delete_max.induct[case_names ET MKT]", "lemmas delete_root_cases = delete_root.cases[case_names ET_t MKT_ET MKT_MKT]", "lemma [simp]: \"avl t \\<Longrightarrow> ht t = height t\"", "lemma height_mkt_bal_l:\n  \"\\<lbrakk> height l = height r + 2; avl l; avl r \\<rbrakk> \\<Longrightarrow>\n   height (mkt_bal_l n l r) = height r + 2 \\<or>\n   height (mkt_bal_l n l r) = height r + 3\"", "lemma height_mkt_bal_r:\n  \"\\<lbrakk> height r = height l + 2; avl l; avl r \\<rbrakk> \\<Longrightarrow>\n   height (mkt_bal_r n l r) = height l + 2 \\<or>\n   height (mkt_bal_r n l r) = height l + 3\"", "lemma [simp]: \"height(mkt x l r) = max (height l) (height r) + 1\"", "lemma avl_mkt:\n  \"\\<lbrakk> avl l; avl r;\n     height l = height r \\<or> height l = height r + 1 \\<or> height r = height l + 1\n   \\<rbrakk> \\<Longrightarrow> avl(mkt x l r)\"", "lemma height_mkt_bal_l2:\n  \"\\<lbrakk> avl l; avl r; height l \\<noteq> height r + 2 \\<rbrakk> \\<Longrightarrow>\n   height (mkt_bal_l n l r) = (1 + max (height l) (height r))\"", "lemma height_mkt_bal_r2:\n  \"\\<lbrakk> avl l;  avl r;  height r \\<noteq> height l + 2 \\<rbrakk> \\<Longrightarrow>\n   height (mkt_bal_r n l r) = (1 + max (height l) (height r))\"", "lemma avl_mkt_bal_l: \n  assumes \"avl l\" \"avl r\" and \"height l = height r \\<or> height l = height r + 1\n    \\<or> height r = height l + 1 \\<or> height l = height r + 2\" \n  shows \"avl(mkt_bal_l n l r)\"", "lemma avl_mkt_bal_r: \n  assumes \"avl l\" and \"avl r\" and \"height l = height r \\<or> height l = height r + 1\n    \\<or> height r = height l + 1 \\<or> height r = height l + 2\" \n  shows \"avl(mkt_bal_r n l r)\"", "theorem avl_insert_aux:\n  assumes \"avl t\"\n  shows \"avl(insert x t)\"\n        \"(height (insert x t) = height t \\<or> height (insert x t) = height t + 1)\"", "lemmas avl_insert = avl_insert_aux(1)", "lemma avl_delete_max:\n  assumes \"avl x\" and \"x \\<noteq> ET\"\n  shows \"avl (snd (delete_max x))\" \"height x = height(snd (delete_max x)) \\<or>\n         height x = height(snd (delete_max x)) + 1\"", "lemma avl_delete_root:\n  assumes \"avl t\" and \"t \\<noteq> ET\"\n  shows \"avl(delete_root t)\"", "lemma height_delete_root:\n  assumes \"avl t\" and \"t \\<noteq> ET\" \n  shows \"height t = height(delete_root t) \\<or> height t = height(delete_root t) + 1\"", "theorem avl_delete_aux:\n  assumes \"avl t\" \n  shows \"avl(delete x t)\" and \"height t = (height (delete x t)) \\<or> height t = height (delete x t) + 1\"", "lemmas avl_delete = avl_delete_aux(1)", "lemma set_of_mkt_bal_l:\n  \"\\<lbrakk> avl l; avl r \\<rbrakk> \\<Longrightarrow>\n  set_of (mkt_bal_l n l r) = Set.insert n (set_of l \\<union> set_of r)\"", "lemma set_of_mkt_bal_r:\n  \"\\<lbrakk> avl l; avl r \\<rbrakk> \\<Longrightarrow>\n  set_of (mkt_bal_r n l r) = Set.insert n (set_of l \\<union> set_of r)\"", "theorem set_of_insert:\n  \"avl t \\<Longrightarrow> set_of(insert x t) = Set.insert x (set_of t)\"", "lemma avl_dist:\n  \"\\<lbrakk> avl(MKT n l r h); is_ord(MKT n l r h); x \\<in> set_of l \\<rbrakk> \\<Longrightarrow>\n  x \\<notin> set_of r\"", "lemma avl_dist2:\n  \"\\<lbrakk> avl(MKT n l r h); is_ord(MKT n l r h); x \\<in> set_of l \\<or> x \\<in> set_of r \\<rbrakk> \\<Longrightarrow>\n  x \\<noteq> n\"", "lemma ritem_in_rset: \"r \\<noteq> ET \\<Longrightarrow> rightmost_item r \\<in> set_of r\"", "lemma ritem_greatest_in_rset:\n  \"\\<lbrakk> r \\<noteq> ET; is_ord r \\<rbrakk> \\<Longrightarrow>\n  \\<forall>x.  x \\<in> set_of r \\<longrightarrow> x \\<noteq> rightmost_item r \\<longrightarrow> x < rightmost_item r\"", "lemma ritem_not_in_ltree:\n  \"\\<lbrakk> avl(MKT n l r h); is_ord(MKT n l r h); r \\<noteq> ET \\<rbrakk> \\<Longrightarrow>\n  rightmost_item r \\<notin> set_of l\"", "lemma set_of_delete_max:\n  \"\\<lbrakk> avl t; is_ord t; t\\<noteq>ET \\<rbrakk> \\<Longrightarrow>\n   set_of (snd(delete_max t)) = (set_of t) - {rightmost_item t}\"", "lemma fst_delete_max_eq_ritem:\n  \"t\\<noteq>ET \\<Longrightarrow> fst(delete_max t) = rightmost_item t\"", "lemma set_of_delete_root:\n  assumes \"t = MKT n l r h\" and \"avl t\" and \"is_ord t\"\n  shows \"set_of (delete_root t) = (set_of t) - {n}\"", "theorem set_of_delete:\n  \"\\<lbrakk> avl t; is_ord t \\<rbrakk> \\<Longrightarrow> set_of (delete x t) = (set_of t) - {x}\"", "theorem is_in_correct: \"is_ord t \\<Longrightarrow> is_in k t = (k : set_of t)\"", "lemma is_ord_mkt_bal_l:\n  \"is_ord(MKT n l r h) \\<Longrightarrow> is_ord (mkt_bal_l n l r)\"", "lemma is_ord_mkt_bal_r: \"is_ord(MKT n l r h) \\<Longrightarrow> is_ord (mkt_bal_r n l r)\"", "theorem is_ord_insert:\n  \"\\<lbrakk> avl t; is_ord t \\<rbrakk> \\<Longrightarrow> is_ord(insert (x::'a::linorder) t)\"", "lemma is_ord_delete_max:\n  \"\\<lbrakk> avl t; is_ord t; t\\<noteq>ET \\<rbrakk> \\<Longrightarrow> is_ord(snd(delete_max t))\"", "lemma is_ord_delete_root:\n  assumes \"avl t\" and \"is_ord t\" and \"t \\<noteq> ET\"\n  shows \"is_ord (delete_root t)\"", "theorem is_ord_delete:\n  \"\\<lbrakk> avl t; is_ord t \\<rbrakk> \\<Longrightarrow> is_ord (delete x t)\""], "translations": [["", "lemmas delete_max_induct = delete_max.induct[case_names ET MKT]"], ["", "fun delete_root where\n\"delete_root (MKT n ET r h) = r\" |\n\"delete_root (MKT n l ET h) = l\" |\n\"delete_root (MKT n l r h) =  \n  (let (new_n, l') = delete_max l in\n      mkt_bal_r new_n l' r\n  )\""], ["", "lemmas delete_root_cases = delete_root.cases[case_names ET_t MKT_ET MKT_MKT]"], ["", "primrec delete :: \"'a::order \\<Rightarrow> 'a tree \\<Rightarrow> 'a tree\" where\n\"delete _ ET = ET\" |\n\"delete x (MKT n l r h) = (\n   if x = n then delete_root (MKT n l r h)\n   else if x < n then \n        let l' = delete x l in\n        mkt_bal_r n l' r\n   else \n        let r' = delete x r in\n        mkt_bal_l n l r'\n   )\""], ["", "subsection \\<open>Correctness proof\\<close>"], ["", "subsubsection \\<open>Insertion maintains AVL balance\\<close>"], ["", "declare Let_def [simp]"], ["", "lemma [simp]: \"avl t \\<Longrightarrow> ht t = height t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. avl t \\<Longrightarrow> ht t = height t", "by (induct t) simp_all"], ["", "lemma height_mkt_bal_l:\n  \"\\<lbrakk> height l = height r + 2; avl l; avl r \\<rbrakk> \\<Longrightarrow>\n   height (mkt_bal_l n l r) = height r + 2 \\<or>\n   height (mkt_bal_l n l r) = height r + 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>height l = height r + 2; avl l; avl r\\<rbrakk>\n    \\<Longrightarrow> height (mkt_bal_l n l r) = height r + 2 \\<or>\n                      height (mkt_bal_l n l r) = height r + 3", "by (cases l) (auto simp:mkt_def split:tree.split)"], ["", "lemma height_mkt_bal_r:\n  \"\\<lbrakk> height r = height l + 2; avl l; avl r \\<rbrakk> \\<Longrightarrow>\n   height (mkt_bal_r n l r) = height l + 2 \\<or>\n   height (mkt_bal_r n l r) = height l + 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>height r = height l + 2; avl l; avl r\\<rbrakk>\n    \\<Longrightarrow> height (mkt_bal_r n l r) = height l + 2 \\<or>\n                      height (mkt_bal_r n l r) = height l + 3", "by (cases r) (auto simp add:mkt_def split:tree.split)"], ["", "lemma [simp]: \"height(mkt x l r) = max (height l) (height r) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height (mkt x l r) = max (height l) (height r) + 1", "by (simp add: mkt_def)"], ["", "lemma avl_mkt:\n  \"\\<lbrakk> avl l; avl r;\n     height l = height r \\<or> height l = height r + 1 \\<or> height r = height l + 1\n   \\<rbrakk> \\<Longrightarrow> avl(mkt x l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or> height r = height l + 1\\<rbrakk>\n    \\<Longrightarrow> avl (mkt x l r)", "by (auto simp add:max_def mkt_def)"], ["", "lemma height_mkt_bal_l2:\n  \"\\<lbrakk> avl l; avl r; height l \\<noteq> height r + 2 \\<rbrakk> \\<Longrightarrow>\n   height (mkt_bal_l n l r) = (1 + max (height l) (height r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r; height l \\<noteq> height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (mkt_bal_l n l r) =\n                      1 + max (height l) (height r)", "by (cases l, cases r) simp_all"], ["", "lemma height_mkt_bal_r2:\n  \"\\<lbrakk> avl l;  avl r;  height r \\<noteq> height l + 2 \\<rbrakk> \\<Longrightarrow>\n   height (mkt_bal_r n l r) = (1 + max (height l) (height r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r; height r \\<noteq> height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (mkt_bal_r n l r) =\n                      1 + max (height l) (height r)", "by (cases l, cases r) simp_all"], ["", "lemma avl_mkt_bal_l: \n  assumes \"avl l\" \"avl r\" and \"height l = height r \\<or> height l = height r + 1\n    \\<or> height r = height l + 1 \\<or> height l = height r + 2\" \n  shows \"avl(mkt_bal_l n l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. avl (mkt_bal_l n l r)", "proof(cases l)"], ["proof (state)\ngoal (2 subgoals):\n 1. l = ET \\<Longrightarrow> avl (mkt_bal_l n l r)\n 2. \\<And>x21 x22 x23 x24.\n       l = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_l n l r)", "case ET"], ["proof (state)\nthis:\n  l = ET\n\ngoal (2 subgoals):\n 1. l = ET \\<Longrightarrow> avl (mkt_bal_l n l r)\n 2. \\<And>x21 x22 x23 x24.\n       l = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_l n l r)", "with assms"], ["proof (chain)\npicking this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height l = height r + 2\n  l = ET", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height l = height r + 2\n  l = ET\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_l n l r)", "by (simp add: mkt_def)"], ["proof (state)\nthis:\n  avl (mkt_bal_l n l r)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       l = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_l n l r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       l = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_l n l r)", "case (MKT ln ll lr lh)"], ["proof (state)\nthis:\n  l = MKT ln ll lr lh\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       l = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_l n l r)", "with assms"], ["proof (chain)\npicking this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height l = height r + 2\n  l = MKT ln ll lr lh", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height l = height r + 2\n  l = MKT ln ll lr lh\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_l n l r)", "proof(cases \"height l = height r + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height l = height r + 2;\n     l = MKT ln ll lr lh; height l = height r + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_l n l r)\n 2. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height l = height r + 2;\n     l = MKT ln ll lr lh; height l \\<noteq> height r + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_l n l r)", "case True"], ["proof (state)\nthis:\n  height l = height r + 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height l = height r + 2;\n     l = MKT ln ll lr lh; height l = height r + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_l n l r)\n 2. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height l = height r + 2;\n     l = MKT ln ll lr lh; height l \\<noteq> height r + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_l n l r)", "from True MKT assms"], ["proof (chain)\npicking this:\n  height l = height r + 2\n  l = MKT ln ll lr lh\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height l = height r + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  height l = height r + 2\n  l = MKT ln ll lr lh\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height l = height r + 2\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_l n l r)", "by (auto intro!: avl_mkt split: tree.split) arith+"], ["proof (state)\nthis:\n  avl (mkt_bal_l n l r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height l = height r + 2;\n     l = MKT ln ll lr lh; height l \\<noteq> height r + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_l n l r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height l = height r + 2;\n     l = MKT ln ll lr lh; height l \\<noteq> height r + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_l n l r)", "case False"], ["proof (state)\nthis:\n  height l \\<noteq> height r + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height l = height r + 2;\n     l = MKT ln ll lr lh; height l \\<noteq> height r + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_l n l r)", "with assms"], ["proof (chain)\npicking this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height l = height r + 2\n  height l \\<noteq> height r + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height l = height r + 2\n  height l \\<noteq> height r + 2\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_l n l r)", "by (simp add: avl_mkt)"], ["proof (state)\nthis:\n  avl (mkt_bal_l n l r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  avl (mkt_bal_l n l r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma avl_mkt_bal_r: \n  assumes \"avl l\" and \"avl r\" and \"height l = height r \\<or> height l = height r + 1\n    \\<or> height r = height l + 1 \\<or> height r = height l + 2\" \n  shows \"avl(mkt_bal_r n l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. avl (mkt_bal_r n l r)", "proof(cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. r = ET \\<Longrightarrow> avl (mkt_bal_r n l r)\n 2. \\<And>x21 x22 x23 x24.\n       r = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_r n l r)", "case ET"], ["proof (state)\nthis:\n  r = ET\n\ngoal (2 subgoals):\n 1. r = ET \\<Longrightarrow> avl (mkt_bal_r n l r)\n 2. \\<And>x21 x22 x23 x24.\n       r = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_r n l r)", "with assms"], ["proof (chain)\npicking this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height r = height l + 2\n  r = ET", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height r = height l + 2\n  r = ET\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_r n l r)", "by (simp add: mkt_def)"], ["proof (state)\nthis:\n  avl (mkt_bal_r n l r)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       r = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_r n l r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       r = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_r n l r)", "case (MKT rn rl rr rh)"], ["proof (state)\nthis:\n  r = MKT rn rl rr rh\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       r = MKT x21 x22 x23 x24 \\<Longrightarrow> avl (mkt_bal_r n l r)", "with assms"], ["proof (chain)\npicking this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height r = height l + 2\n  r = MKT rn rl rr rh", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height r = height l + 2\n  r = MKT rn rl rr rh\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_r n l r)", "proof(cases \"height r = height l + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height r = height l + 2;\n     r = MKT rn rl rr rh; height r = height l + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_r n l r)\n 2. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height r = height l + 2;\n     r = MKT rn rl rr rh; height r \\<noteq> height l + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_r n l r)", "case True"], ["proof (state)\nthis:\n  height r = height l + 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height r = height l + 2;\n     r = MKT rn rl rr rh; height r = height l + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_r n l r)\n 2. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height r = height l + 2;\n     r = MKT rn rl rr rh; height r \\<noteq> height l + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_r n l r)", "from True MKT assms"], ["proof (chain)\npicking this:\n  height r = height l + 2\n  r = MKT rn rl rr rh\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height r = height l + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  height r = height l + 2\n  r = MKT rn rl rr rh\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height r = height l + 2\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_r n l r)", "by (auto intro!: avl_mkt split: tree.split) arith+"], ["proof (state)\nthis:\n  avl (mkt_bal_r n l r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height r = height l + 2;\n     r = MKT rn rl rr rh; height r \\<noteq> height l + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_r n l r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height r = height l + 2;\n     r = MKT rn rl rr rh; height r \\<noteq> height l + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_r n l r)", "case False"], ["proof (state)\nthis:\n  height r \\<noteq> height l + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r;\n     height l = height r \\<or>\n     height l = height r + 1 \\<or>\n     height r = height l + 1 \\<or> height r = height l + 2;\n     r = MKT rn rl rr rh; height r \\<noteq> height l + 2\\<rbrakk>\n    \\<Longrightarrow> avl (mkt_bal_r n l r)", "with assms"], ["proof (chain)\npicking this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height r = height l + 2\n  height r \\<noteq> height l + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l\n  avl r\n  height l = height r \\<or>\n  height l = height r + 1 \\<or>\n  height r = height l + 1 \\<or> height r = height l + 2\n  height r \\<noteq> height l + 2\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_r n l r)", "by (simp add: avl_mkt)"], ["proof (state)\nthis:\n  avl (mkt_bal_r n l r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  avl (mkt_bal_r n l r)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* It apppears that these two properties need to be proved simultaneously: *)"], ["", "text\\<open>Insertion maintains the AVL property:\\<close>"], ["", "theorem avl_insert_aux:\n  assumes \"avl t\"\n  shows \"avl(insert x t)\"\n        \"(height (insert x t) = height t \\<or> height (insert x t) = height t + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. avl (AVL.insert x t) &&&\n    height (AVL.insert x t) = height t \\<or>\n    height (AVL.insert x t) = height t + 1", "using assms"], ["proof (prove)\nusing this:\n  avl t\n\ngoal (1 subgoal):\n 1. avl (AVL.insert x t) &&&\n    height (AVL.insert x t) = height t \\<or>\n    height (AVL.insert x t) = height t + 1", "proof (induction t)"], ["proof (state)\ngoal (4 subgoals):\n 1. avl ET \\<Longrightarrow> avl (AVL.insert x ET)\n 2. avl ET \\<Longrightarrow>\n    height (AVL.insert x ET) = height ET \\<or>\n    height (AVL.insert x ET) = height ET + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (AVL.insert x t1);\n        avl t1 \\<Longrightarrow>\n        height (AVL.insert x t1) = height t1 \\<or>\n        height (AVL.insert x t1) = height t1 + 1;\n        avl t2 \\<Longrightarrow> avl (AVL.insert x t2);\n        avl t2 \\<Longrightarrow>\n        height (AVL.insert x t2) = height t2 \\<or>\n        height (AVL.insert x t2) = height t2 + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> avl (AVL.insert x (MKT x1 t1 t2 x4))\n 4. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (AVL.insert x t1);\n        avl t1 \\<Longrightarrow>\n        height (AVL.insert x t1) = height t1 \\<or>\n        height (AVL.insert x t1) = height t1 + 1;\n        avl t2 \\<Longrightarrow> avl (AVL.insert x t2);\n        avl t2 \\<Longrightarrow>\n        height (AVL.insert x t2) = height t2 \\<or>\n        height (AVL.insert x t2) = height t2 + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) \\<or>\n                         height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) + 1", "case (MKT n l r h)"], ["proof (state)\nthis:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n\ngoal (4 subgoals):\n 1. avl ET \\<Longrightarrow> avl (AVL.insert x ET)\n 2. avl ET \\<Longrightarrow>\n    height (AVL.insert x ET) = height ET \\<or>\n    height (AVL.insert x ET) = height ET + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (AVL.insert x t1);\n        avl t1 \\<Longrightarrow>\n        height (AVL.insert x t1) = height t1 \\<or>\n        height (AVL.insert x t1) = height t1 + 1;\n        avl t2 \\<Longrightarrow> avl (AVL.insert x t2);\n        avl t2 \\<Longrightarrow>\n        height (AVL.insert x t2) = height t2 \\<or>\n        height (AVL.insert x t2) = height t2 + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> avl (AVL.insert x (MKT x1 t1 t2 x4))\n 4. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (AVL.insert x t1);\n        avl t1 \\<Longrightarrow>\n        height (AVL.insert x t1) = height t1 \\<or>\n        height (AVL.insert x t1) = height t1 + 1;\n        avl t2 \\<Longrightarrow> avl (AVL.insert x t2);\n        avl t2 \\<Longrightarrow>\n        height (AVL.insert x t2) = height t2 \\<or>\n        height (AVL.insert x t2) = height t2 + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) \\<or>\n                         height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) + 1", "case 1"], ["proof (state)\nthis:\n  avl (MKT n l r h)\n\ngoal (4 subgoals):\n 1. avl ET \\<Longrightarrow> avl (AVL.insert x ET)\n 2. avl ET \\<Longrightarrow>\n    height (AVL.insert x ET) = height ET \\<or>\n    height (AVL.insert x ET) = height ET + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (AVL.insert x t1);\n        avl t1 \\<Longrightarrow>\n        height (AVL.insert x t1) = height t1 \\<or>\n        height (AVL.insert x t1) = height t1 + 1;\n        avl t2 \\<Longrightarrow> avl (AVL.insert x t2);\n        avl t2 \\<Longrightarrow>\n        height (AVL.insert x t2) = height t2 \\<or>\n        height (AVL.insert x t2) = height t2 + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> avl (AVL.insert x (MKT x1 t1 t2 x4))\n 4. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (AVL.insert x t1);\n        avl t1 \\<Longrightarrow>\n        height (AVL.insert x t1) = height t1 \\<or>\n        height (AVL.insert x t1) = height t1 + 1;\n        avl t2 \\<Longrightarrow> avl (AVL.insert x t2);\n        avl t2 \\<Longrightarrow>\n        height (AVL.insert x t2) = height t2 \\<or>\n        height (AVL.insert x t2) = height t2 + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) \\<or>\n                         height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) + 1", "with MKT"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)", "show ?case"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n\ngoal (1 subgoal):\n 1. avl (AVL.insert x (MKT n l r h))", "proof(cases \"x = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "case True"], ["proof (state)\nthis:\n  x = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x = n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x = n\n\ngoal (1 subgoal):\n 1. avl (AVL.insert x (MKT n l r h))", "by simp"], ["proof (state)\nthis:\n  avl (AVL.insert x (MKT n l r h))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x \\<noteq> n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. avl (AVL.insert x (MKT n l r h))", "proof(cases \"x<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "case True"], ["proof (state)\nthis:\n  x < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x < n\n\ngoal (1 subgoal):\n 1. avl (AVL.insert x (MKT n l r h))", "by (auto simp add:avl_mkt_bal_l simp del:mkt_bal_l.simps)"], ["proof (state)\nthis:\n  avl (AVL.insert x (MKT n l r h))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "case False"], ["proof (state)\nthis:\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (AVL.insert x (MKT n l r h))", "with MKT 1 \\<open>x\\<noteq>n\\<close>"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x \\<noteq> n\n  \\<not> x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x \\<noteq> n\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. avl (AVL.insert x (MKT n l r h))", "by (auto simp add:avl_mkt_bal_r simp del:mkt_bal_r.simps)"], ["proof (state)\nthis:\n  avl (AVL.insert x (MKT n l r h))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  avl (AVL.insert x (MKT n l r h))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  avl (AVL.insert x (MKT n l r h))\n\ngoal (3 subgoals):\n 1. avl ET \\<Longrightarrow> avl (AVL.insert x ET)\n 2. avl ET \\<Longrightarrow>\n    height (AVL.insert x ET) = height ET \\<or>\n    height (AVL.insert x ET) = height ET + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (AVL.insert x t1);\n        avl t1 \\<Longrightarrow>\n        height (AVL.insert x t1) = height t1 \\<or>\n        height (AVL.insert x t1) = height t1 + 1;\n        avl t2 \\<Longrightarrow> avl (AVL.insert x t2);\n        avl t2 \\<Longrightarrow>\n        height (AVL.insert x t2) = height t2 \\<or>\n        height (AVL.insert x t2) = height t2 + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) \\<or>\n                         height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) + 1", "case 2"], ["proof (state)\nthis:\n  avl (MKT n l r h)\n\ngoal (3 subgoals):\n 1. avl ET \\<Longrightarrow> avl (AVL.insert x ET)\n 2. avl ET \\<Longrightarrow>\n    height (AVL.insert x ET) = height ET \\<or>\n    height (AVL.insert x ET) = height ET + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (AVL.insert x t1);\n        avl t1 \\<Longrightarrow>\n        height (AVL.insert x t1) = height t1 \\<or>\n        height (AVL.insert x t1) = height t1 + 1;\n        avl t2 \\<Longrightarrow> avl (AVL.insert x t2);\n        avl t2 \\<Longrightarrow>\n        height (AVL.insert x t2) = height t2 \\<or>\n        height (AVL.insert x t2) = height t2 + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) \\<or>\n                         height (AVL.insert x (MKT x1 t1 t2 x4)) =\n                         height (MKT x1 t1 t2 x4) + 1", "from 2 MKT"], ["proof (chain)\npicking this:\n  avl (MKT n l r h)\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1", "show ?case"], ["proof (prove)\nusing this:\n  avl (MKT n l r h)\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "proof(cases \"x = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl (MKT n l r h);\n     avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     x = n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1\n 2. \\<lbrakk>avl (MKT n l r h);\n     avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "case True"], ["proof (state)\nthis:\n  x = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl (MKT n l r h);\n     avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     x = n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1\n 2. \\<lbrakk>avl (MKT n l r h);\n     avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x = n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x = n\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "by simp"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl (MKT n l r h);\n     avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl (MKT n l r h);\n     avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "case False"], ["proof (state)\nthis:\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl (MKT n l r h);\n     avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x \\<noteq> n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "proof(cases \"x<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "case True"], ["proof (state)\nthis:\n  x < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "with MKT 2"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x < n\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "proof(cases \"height (AVL.insert x l) = height r + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x < n;\n     height (AVL.insert x l) = height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x < n;\n     height (AVL.insert x l) \\<noteq> height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "case False"], ["proof (state)\nthis:\n  height (AVL.insert x l) \\<noteq> height r + 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x < n;\n     height (AVL.insert x l) = height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x < n;\n     height (AVL.insert x l) \\<noteq> height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "with MKT 2 \\<open>x < n\\<close>"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x < n\n  height (AVL.insert x l) \\<noteq> height r + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  x < n\n  height (AVL.insert x l) \\<noteq> height r + 2\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "by (auto simp del: mkt_bal_l.simps simp: height_mkt_bal_l2)"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x < n;\n     height (AVL.insert x l) = height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x < n;\n     height (AVL.insert x l) = height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "case True"], ["proof (state)\nthis:\n  height (AVL.insert x l) = height r + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x < n;\n     height (AVL.insert x l) = height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "then"], ["proof (chain)\npicking this:\n  height (AVL.insert x l) = height r + 2", "consider (a) \"height (mkt_bal_l n (AVL.insert x l) r) = height r + 2\"\n          | (b) \"height (mkt_bal_l n (AVL.insert x l) r) = height r + 3\""], ["proof (prove)\nusing this:\n  height (AVL.insert x l) = height r + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>height (mkt_bal_l n (AVL.insert x l) r) =\n             height r + 2 \\<Longrightarrow>\n             thesis;\n     height (mkt_bal_l n (AVL.insert x l) r) =\n     height r + 3 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using MKT 2"], ["proof (prove)\nusing this:\n  height (AVL.insert x l) = height r + 2\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>height (mkt_bal_l n (AVL.insert x l) r) =\n             height r + 2 \\<Longrightarrow>\n             thesis;\n     height (mkt_bal_l n (AVL.insert x l) r) =\n     height r + 3 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (atomize_elim, intro height_mkt_bal_l) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>height (mkt_bal_l n (AVL.insert x l) r) =\n           height r + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_l n (AVL.insert x l) r) = height r + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x < n;\n     height (AVL.insert x l) = height r + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>height (mkt_bal_l n (AVL.insert x l) r) =\n           height r + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_l n (AVL.insert x l) r) = height r + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>height (mkt_bal_l n (AVL.insert x l) r) =\n           height r + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_l n (AVL.insert x l) r) = height r + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. height (mkt_bal_l n (AVL.insert x l) r) = height r + 2 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n 2. height (mkt_bal_l n (AVL.insert x l) r) = height r + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "case a"], ["proof (state)\nthis:\n  height (mkt_bal_l n (AVL.insert x l) r) = height r + 2\n\ngoal (2 subgoals):\n 1. height (mkt_bal_l n (AVL.insert x l) r) = height r + 2 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n 2. height (mkt_bal_l n (AVL.insert x l) r) = height r + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "with 2 \\<open>x < n\\<close>"], ["proof (chain)\npicking this:\n  avl (MKT n l r h)\n  x < n\n  height (mkt_bal_l n (AVL.insert x l) r) = height r + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  avl (MKT n l r h)\n  x < n\n  height (mkt_bal_l n (AVL.insert x l) r) = height r + 2\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "by (auto simp del: mkt_bal_l.simps)"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal (1 subgoal):\n 1. height (mkt_bal_l n (AVL.insert x l) r) = height r + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. height (mkt_bal_l n (AVL.insert x l) r) = height r + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "case b"], ["proof (state)\nthis:\n  height (mkt_bal_l n (AVL.insert x l) r) = height r + 3\n\ngoal (1 subgoal):\n 1. height (mkt_bal_l n (AVL.insert x l) r) = height r + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "with True 1 MKT(2) \\<open>x < n\\<close>"], ["proof (chain)\npicking this:\n  height (AVL.insert x l) = height r + 2\n  avl (MKT n l r h)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  x < n\n  height (mkt_bal_l n (AVL.insert x l) r) = height r + 3", "show ?thesis"], ["proof (prove)\nusing this:\n  height (AVL.insert x l) = height r + 2\n  avl (MKT n l r h)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  x < n\n  height (mkt_bal_l n (AVL.insert x l) r) = height r + 3\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "by (simp del: mkt_bal_l.simps) arith"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "case False"], ["proof (state)\nthis:\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "with MKT 2"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  \\<not> x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "proof(cases \"height (AVL.insert x r) = height l + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); \\<not> x < n;\n     height (AVL.insert x r) = height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); \\<not> x < n;\n     height (AVL.insert x r) \\<noteq> height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "case False"], ["proof (state)\nthis:\n  height (AVL.insert x r) \\<noteq> height l + 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); \\<not> x < n;\n     height (AVL.insert x r) = height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); \\<not> x < n;\n     height (AVL.insert x r) \\<noteq> height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "with MKT 2 \\<open>\\<not>x < n\\<close>"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  \\<not> x < n\n  height (AVL.insert x r) \\<noteq> height l + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n  \\<not> x < n\n  height (AVL.insert x r) \\<noteq> height l + 2\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "by (auto simp del: mkt_bal_r.simps simp: height_mkt_bal_r2)"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); \\<not> x < n;\n     height (AVL.insert x r) = height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); \\<not> x < n;\n     height (AVL.insert x r) = height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "case True"], ["proof (state)\nthis:\n  height (AVL.insert x r) = height l + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); \\<not> x < n;\n     height (AVL.insert x r) = height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "then"], ["proof (chain)\npicking this:\n  height (AVL.insert x r) = height l + 2", "consider (a) \"height (mkt_bal_r n l (AVL.insert x r)) = height l + 2\"\n          | (b) \"height (mkt_bal_r n l (AVL.insert x r)) = height l + 3\""], ["proof (prove)\nusing this:\n  height (AVL.insert x r) = height l + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>height (mkt_bal_r n l (AVL.insert x r)) =\n             height l + 2 \\<Longrightarrow>\n             thesis;\n     height (mkt_bal_r n l (AVL.insert x r)) =\n     height l + 3 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using MKT 2"], ["proof (prove)\nusing this:\n  height (AVL.insert x r) = height l + 2\n  avl l \\<Longrightarrow> avl (AVL.insert x l)\n  avl l \\<Longrightarrow>\n  height (AVL.insert x l) = height l \\<or>\n  height (AVL.insert x l) = height l + 1\n  avl r \\<Longrightarrow> avl (AVL.insert x r)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  avl (MKT n l r h)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>height (mkt_bal_r n l (AVL.insert x r)) =\n             height l + 2 \\<Longrightarrow>\n             thesis;\n     height (mkt_bal_r n l (AVL.insert x r)) =\n     height l + 3 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (atomize_elim, intro height_mkt_bal_r) simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>height (mkt_bal_r n l (AVL.insert x r)) =\n           height l + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_r n l (AVL.insert x r)) = height l + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (AVL.insert x l);\n     avl l \\<Longrightarrow>\n     height (AVL.insert x l) = height l \\<or>\n     height (AVL.insert x l) = height l + 1;\n     avl r \\<Longrightarrow> avl (AVL.insert x r);\n     avl r \\<Longrightarrow>\n     height (AVL.insert x r) = height r \\<or>\n     height (AVL.insert x r) = height r + 1;\n     avl (MKT n l r h); \\<not> x < n;\n     height (AVL.insert x r) = height l + 2\\<rbrakk>\n    \\<Longrightarrow> height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) \\<or>\n                      height (AVL.insert x (MKT n l r h)) =\n                      height (MKT n l r h) + 1", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>height (mkt_bal_r n l (AVL.insert x r)) =\n           height l + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_r n l (AVL.insert x r)) = height l + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>height (mkt_bal_r n l (AVL.insert x r)) =\n           height l + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_r n l (AVL.insert x r)) = height l + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. height (mkt_bal_r n l (AVL.insert x r)) = height l + 2 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n 2. height (mkt_bal_r n l (AVL.insert x r)) = height l + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "case a"], ["proof (state)\nthis:\n  height (mkt_bal_r n l (AVL.insert x r)) = height l + 2\n\ngoal (2 subgoals):\n 1. height (mkt_bal_r n l (AVL.insert x r)) = height l + 2 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n 2. height (mkt_bal_r n l (AVL.insert x r)) = height l + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "with 2 \\<open>\\<not>x < n\\<close>"], ["proof (chain)\npicking this:\n  avl (MKT n l r h)\n  \\<not> x < n\n  height (mkt_bal_r n l (AVL.insert x r)) = height l + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  avl (MKT n l r h)\n  \\<not> x < n\n  height (mkt_bal_r n l (AVL.insert x r)) = height l + 2\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "by (auto simp del: mkt_bal_r.simps)"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal (1 subgoal):\n 1. height (mkt_bal_r n l (AVL.insert x r)) = height l + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. height (mkt_bal_r n l (AVL.insert x r)) = height l + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "case b"], ["proof (state)\nthis:\n  height (mkt_bal_r n l (AVL.insert x r)) = height l + 3\n\ngoal (1 subgoal):\n 1. height (mkt_bal_r n l (AVL.insert x r)) = height l + 3 \\<Longrightarrow>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "with True 1 MKT(4) \\<open>\\<not>x < n\\<close>"], ["proof (chain)\npicking this:\n  height (AVL.insert x r) = height l + 2\n  avl (MKT n l r h)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  \\<not> x < n\n  height (mkt_bal_r n l (AVL.insert x r)) = height l + 3", "show ?thesis"], ["proof (prove)\nusing this:\n  height (AVL.insert x r) = height l + 2\n  avl (MKT n l r h)\n  avl r \\<Longrightarrow>\n  height (AVL.insert x r) = height r \\<or>\n  height (AVL.insert x r) = height r + 1\n  \\<not> x < n\n  height (mkt_bal_r n l (AVL.insert x r)) = height l + 3\n\ngoal (1 subgoal):\n 1. height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n    height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1", "by (simp del: mkt_bal_r.simps) arith"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) \\<or>\n  height (AVL.insert x (MKT n l r h)) = height (MKT n l r h) + 1\n\ngoal (2 subgoals):\n 1. avl ET \\<Longrightarrow> avl (AVL.insert x ET)\n 2. avl ET \\<Longrightarrow>\n    height (AVL.insert x ET) = height ET \\<or>\n    height (AVL.insert x ET) = height ET + 1", "qed simp_all"], ["", "lemmas avl_insert = avl_insert_aux(1)"], ["", "subsubsection \\<open>Deletion maintains AVL balance\\<close>"], ["", "lemma avl_delete_max:\n  assumes \"avl x\" and \"x \\<noteq> ET\"\n  shows \"avl (snd (delete_max x))\" \"height x = height(snd (delete_max x)) \\<or>\n         height x = height(snd (delete_max x)) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. avl (snd (delete_max x)) &&&\n    height x = height (snd (delete_max x)) \\<or>\n    height x = height (snd (delete_max x)) + 1", "using assms"], ["proof (prove)\nusing this:\n  avl x\n  x \\<noteq> ET\n\ngoal (1 subgoal):\n 1. avl (snd (delete_max x)) &&&\n    height x = height (snd (delete_max x)) \\<or>\n    height x = height (snd (delete_max x)) + 1", "proof (induct x rule: delete_max_induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 4. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 6. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "case (MKT n l rn rl rr rh h)"], ["proof (state)\nthis:\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n\ngoal (6 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 4. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 6. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "case 1"], ["proof (state)\nthis:\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (6 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 4. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 6. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "with MKT"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET", "have \"avl l\" \"avl (snd (delete_max (MKT rn rl rr rh)))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (1 subgoal):\n 1. avl l &&& avl (snd (delete_max (MKT rn rl rr rh)))", "by auto"], ["proof (state)\nthis:\n  avl l\n  avl (snd (delete_max (MKT rn rl rr rh)))\n\ngoal (6 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 4. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 6. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "with 1 MKT"], ["proof (chain)\npicking this:\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n  avl l\n  avl (snd (delete_max (MKT rn rl rr rh)))", "have \"avl (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh))))\""], ["proof (prove)\nusing this:\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n  avl l\n  avl (snd (delete_max (MKT rn rl rr rh)))\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh))))", "by (intro avl_mkt_bal_l) fastforce+"], ["proof (state)\nthis:\n  avl (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh))))\n\ngoal (6 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 4. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 6. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "then"], ["proof (chain)\npicking this:\n  avl (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh))))", "show ?case"], ["proof (prove)\nusing this:\n  avl (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh))))\n\ngoal (1 subgoal):\n 1. avl (snd (delete_max (MKT n l (MKT rn rl rr rh) h)))", "by (auto simp: height_mkt_bal_l height_mkt_bal_l2\n      linorder_class.max.absorb1 linorder_class.max.absorb2\n      split:prod.split simp del:mkt_bal_l.simps)"], ["proof (state)\nthis:\n  avl (snd (delete_max (MKT n l (MKT rn rl rr rh) h)))\n\ngoal (5 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 4. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 4. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "case (MKT n l rn rl rr rh h)"], ["proof (state)\nthis:\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n\ngoal (5 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 4. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "case 2"], ["proof (state)\nthis:\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (5 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 4. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "let ?r = \"MKT rn rl rr rh\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 4. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "let ?r' = \"snd (delete_max ?r)\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 4. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "from \\<open>avl x\\<close> MKT 2"], ["proof (chain)\npicking this:\n  avl x\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET", "have \"avl l\" and \"avl ?r\""], ["proof (prove)\nusing this:\n  avl x\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (1 subgoal):\n 1. avl l &&& avl (MKT rn rl rr rh)", "by simp_all"], ["proof (state)\nthis:\n  avl l\n  avl (MKT rn rl rr rh)\n\ngoal (5 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> avl (snd (delete_max (MKT v va vb vc)));\n        \\<lbrakk>avl (MKT v va vb vc); MKT v va vb vc \\<noteq> ET\\<rbrakk>\n        \\<Longrightarrow> height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) \\<or>\n                          height (MKT v va vb vc) =\n                          height (snd (delete_max (MKT v va vb vc))) + 1;\n        avl (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max\n                                 (MKT n l (MKT v va vb vc) h))) \\<or>\n                         height (MKT n l (MKT v va vb vc) h) =\n                         height\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) +\n                         1\n 4. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 5. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "then"], ["proof (chain)\npicking this:\n  avl l\n  avl (MKT rn rl rr rh)", "show ?case"], ["proof (prove)\nusing this:\n  avl l\n  avl (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. height (MKT n l (MKT rn rl rr rh) h) =\n    height (snd (delete_max (MKT n l (MKT rn rl rr rh) h))) \\<or>\n    height (MKT n l (MKT rn rl rr rh) h) =\n    height (snd (delete_max (MKT n l (MKT rn rl rr rh) h))) + 1", "using MKT 2 height_mkt_bal_l[of l ?r' n] height_mkt_bal_l2[of l ?r' n]"], ["proof (prove)\nusing this:\n  avl l\n  avl (MKT rn rl rr rh)\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) \\<or>\n                    height (MKT rn rl rr rh) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 1\n  avl (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  \\<lbrakk>height l = height (snd (delete_max (MKT rn rl rr rh))) + 2;\n   avl l; avl (snd (delete_max (MKT rn rl rr rh)))\\<rbrakk>\n  \\<Longrightarrow> height\n                     (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh)))) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 2 \\<or>\n                    height\n                     (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh)))) =\n                    height (snd (delete_max (MKT rn rl rr rh))) + 3\n  \\<lbrakk>avl l; avl (snd (delete_max (MKT rn rl rr rh)));\n   height l \\<noteq>\n   height (snd (delete_max (MKT rn rl rr rh))) + 2\\<rbrakk>\n  \\<Longrightarrow> height\n                     (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh)))) =\n                    1 +\n                    max (height l)\n                     (height (snd (delete_max (MKT rn rl rr rh))))\n\ngoal (1 subgoal):\n 1. height (MKT n l (MKT rn rl rr rh) h) =\n    height (snd (delete_max (MKT n l (MKT rn rl rr rh) h))) \\<or>\n    height (MKT n l (MKT rn rl rr rh) h) =\n    height (snd (delete_max (MKT n l (MKT rn rl rr rh) h))) + 1", "apply (auto split:prod.splits simp del:avl.simps mkt_bal_l.simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>avl l; avl (MKT rn rl rr rh); avl x2;\n        avl (MKT n l (MKT rn rl rr rh) h);\n        height l = Suc (Suc (height x2)) \\<Longrightarrow>\n        height (mkt_bal_l n l x2) = Suc (Suc (height x2)) \\<or>\n        height (mkt_bal_l n l x2) = height x2 + 3;\n        height l \\<noteq> Suc (Suc (height x2)) \\<Longrightarrow>\n        height (mkt_bal_l n l x2) = Suc (max (height l) (height x2));\n        delete_max (MKT rn rl rr rh) = (x1, x2);\n        max (height l) (height x2) \\<noteq> height (mkt_bal_l n l x2);\n        Suc (max (height rl) (height rr)) = height x2\\<rbrakk>\n       \\<Longrightarrow> Suc (max (height l) (height x2)) =\n                         height (mkt_bal_l n l x2)\n 2. \\<And>x1 x2.\n       \\<lbrakk>avl l; avl (MKT rn rl rr rh); avl x2;\n        avl (MKT n l (MKT rn rl rr rh) h);\n        height l = Suc (Suc (height x2)) \\<Longrightarrow>\n        height (mkt_bal_l n l x2) = Suc (Suc (height x2)) \\<or>\n        height (mkt_bal_l n l x2) = height x2 + 3;\n        height l \\<noteq> Suc (Suc (height x2)) \\<Longrightarrow>\n        height (mkt_bal_l n l x2) = Suc (max (height l) (height x2));\n        delete_max (MKT rn rl rr rh) = (x1, x2);\n        max (height l) (Suc (height x2)) \\<noteq> height (mkt_bal_l n l x2);\n        max (height rl) (height rr) = height x2\\<rbrakk>\n       \\<Longrightarrow> Suc (max (height l) (Suc (height x2))) =\n                         height (mkt_bal_l n l x2)", "by arith+"], ["proof (state)\nthis:\n  height (MKT n l (MKT rn rl rr rh) h) =\n  height (snd (delete_max (MKT n l (MKT rn rl rr rh) h))) \\<or>\n  height (MKT n l (MKT rn rl rr rh) h) =\n  height (snd (delete_max (MKT n l (MKT rn rl rr rh) h))) + 1\n\ngoal (4 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> avl (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) \\<or>\n                         height (MKT n l ET h) =\n                         height (snd (delete_max (MKT n l ET h))) + 1\n 3. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> avl (snd (delete_max ET))\n 4. \\<lbrakk>avl ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> height ET = height (snd (delete_max ET)) \\<or>\n                      height ET = height (snd (delete_max ET)) + 1", "qed auto"], ["", "lemma avl_delete_root:\n  assumes \"avl t\" and \"t \\<noteq> ET\"\n  shows \"avl(delete_root t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. avl (delete_root t)", "using assms"], ["proof (prove)\nusing this:\n  avl t\n  t \\<noteq> ET\n\ngoal (1 subgoal):\n 1. avl (delete_root t)", "proof (cases t rule:delete_root_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "case (MKT_MKT n ln ll lr lh rn rl rr rh h)"], ["proof (state)\nthis:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "let ?l = \"MKT ln ll lr lh\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "let ?r = \"MKT rn rl rr rh\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "let ?l' = \"snd (delete_max ?l)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "from \\<open>avl t\\<close> and MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"avl ?r\""], ["proof (prove)\nusing this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. avl (MKT rn rl rr rh)", "by simp"], ["proof (state)\nthis:\n  avl (MKT rn rl rr rh)\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "from \\<open>avl t\\<close> and MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"avl ?l\""], ["proof (prove)\nusing this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. avl (MKT ln ll lr lh)", "by simp"], ["proof (state)\nthis:\n  avl (MKT ln ll lr lh)\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "then"], ["proof (chain)\npicking this:\n  avl (MKT ln ll lr lh)", "have \"avl(?l')\" \"height ?l = height(?l') \\<or>\n         height ?l = height(?l') + 1\""], ["proof (prove)\nusing this:\n  avl (MKT ln ll lr lh)\n\ngoal (1 subgoal):\n 1. avl (snd (delete_max (MKT ln ll lr lh))) &&&\n    height (MKT ln ll lr lh) =\n    height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n    height (MKT ln ll lr lh) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 1", "by (rule avl_delete_max,simp)+"], ["proof (state)\nthis:\n  avl (snd (delete_max (MKT ln ll lr lh)))\n  height (MKT ln ll lr lh) =\n  height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n  height (MKT ln ll lr lh) = height (snd (delete_max (MKT ln ll lr lh))) + 1\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "with \\<open>avl t\\<close> MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  avl (snd (delete_max (MKT ln ll lr lh)))\n  height (MKT ln ll lr lh) =\n  height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n  height (MKT ln ll lr lh) = height (snd (delete_max (MKT ln ll lr lh))) + 1", "have \"height ?l' = height ?r \\<or> height ?l' = height ?r + 1\n            \\<or> height ?r = height ?l' + 1 \\<or> height ?r = height ?l' + 2\""], ["proof (prove)\nusing this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  avl (snd (delete_max (MKT ln ll lr lh)))\n  height (MKT ln ll lr lh) =\n  height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n  height (MKT ln ll lr lh) = height (snd (delete_max (MKT ln ll lr lh))) + 1\n\ngoal (1 subgoal):\n 1. height (snd (delete_max (MKT ln ll lr lh))) =\n    height (MKT rn rl rr rh) \\<or>\n    height (snd (delete_max (MKT ln ll lr lh))) =\n    height (MKT rn rl rr rh) + 1 \\<or>\n    height (MKT rn rl rr rh) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 1 \\<or>\n    height (MKT rn rl rr rh) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 2", "by fastforce"], ["proof (state)\nthis:\n  height (snd (delete_max (MKT ln ll lr lh))) =\n  height (MKT rn rl rr rh) \\<or>\n  height (snd (delete_max (MKT ln ll lr lh))) =\n  height (MKT rn rl rr rh) + 1 \\<or>\n  height (MKT rn rl rr rh) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 1 \\<or>\n  height (MKT rn rl rr rh) = height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "with \\<open>avl ?l'\\<close> \\<open>avl ?r\\<close>"], ["proof (chain)\npicking this:\n  avl (snd (delete_max (MKT ln ll lr lh)))\n  avl (MKT rn rl rr rh)\n  height (snd (delete_max (MKT ln ll lr lh))) =\n  height (MKT rn rl rr rh) \\<or>\n  height (snd (delete_max (MKT ln ll lr lh))) =\n  height (MKT rn rl rr rh) + 1 \\<or>\n  height (MKT rn rl rr rh) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 1 \\<or>\n  height (MKT rn rl rr rh) = height (snd (delete_max (MKT ln ll lr lh))) + 2", "have \"avl(mkt_bal_r (fst(delete_max ?l)) ?l' ?r)\""], ["proof (prove)\nusing this:\n  avl (snd (delete_max (MKT ln ll lr lh)))\n  avl (MKT rn rl rr rh)\n  height (snd (delete_max (MKT ln ll lr lh))) =\n  height (MKT rn rl rr rh) \\<or>\n  height (snd (delete_max (MKT ln ll lr lh))) =\n  height (MKT rn rl rr rh) + 1 \\<or>\n  height (MKT rn rl rr rh) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 1 \\<or>\n  height (MKT rn rl rr rh) = height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (1 subgoal):\n 1. avl (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n          (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh))", "by (rule avl_mkt_bal_r)"], ["proof (state)\nthis:\n  avl (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n        (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh))\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "with MKT_MKT"], ["proof (chain)\npicking this:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  avl (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n        (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh))", "show ?thesis"], ["proof (prove)\nusing this:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  avl (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n        (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh))\n\ngoal (1 subgoal):\n 1. avl (delete_root t)", "by (auto split:prod.splits simp del:mkt_bal_r.simps)"], ["proof (state)\nthis:\n  avl (delete_root t)\n\ngoal (3 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> avl (delete_root t)\n 3. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> avl (delete_root t)", "qed simp_all"], ["", "lemma height_delete_root:\n  assumes \"avl t\" and \"t \\<noteq> ET\" \n  shows \"height t = height(delete_root t) \\<or> height t = height(delete_root t) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height t = height (delete_root t) \\<or>\n    height t = height (delete_root t) + 1", "using assms"], ["proof (prove)\nusing this:\n  avl t\n  t \\<noteq> ET\n\ngoal (1 subgoal):\n 1. height t = height (delete_root t) \\<or>\n    height t = height (delete_root t) + 1", "proof (cases t rule: delete_root_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "case (MKT_MKT n ln ll lr lh rn rl rr rh h)"], ["proof (state)\nthis:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "let ?l = \"MKT ln ll lr lh\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "let ?r = \"MKT rn rl rr rh\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "let ?l' = \"snd (delete_max ?l)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "let ?t' = \"mkt_bal_r (fst(delete_max ?l)) ?l' ?r\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "from \\<open>avl t\\<close> and MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"avl ?r\""], ["proof (prove)\nusing this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. avl (MKT rn rl rr rh)", "by simp"], ["proof (state)\nthis:\n  avl (MKT rn rl rr rh)\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "from \\<open>avl t\\<close> and MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"avl ?l\""], ["proof (prove)\nusing this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. avl (MKT ln ll lr lh)", "by simp"], ["proof (state)\nthis:\n  avl (MKT ln ll lr lh)\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "then"], ["proof (chain)\npicking this:\n  avl (MKT ln ll lr lh)", "have \"avl(?l')\""], ["proof (prove)\nusing this:\n  avl (MKT ln ll lr lh)\n\ngoal (1 subgoal):\n 1. avl (snd (delete_max (MKT ln ll lr lh)))", "by (rule avl_delete_max,simp)"], ["proof (state)\nthis:\n  avl (snd (delete_max (MKT ln ll lr lh)))\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "have l'_height: \"height ?l = height ?l' \\<or> height ?l = height ?l' + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height (MKT ln ll lr lh) =\n    height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n    height (MKT ln ll lr lh) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 1", "using \\<open>avl ?l\\<close>"], ["proof (prove)\nusing this:\n  avl (MKT ln ll lr lh)\n\ngoal (1 subgoal):\n 1. height (MKT ln ll lr lh) =\n    height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n    height (MKT ln ll lr lh) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 1", "by (intro avl_delete_max) auto"], ["proof (state)\nthis:\n  height (MKT ln ll lr lh) =\n  height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n  height (MKT ln ll lr lh) = height (snd (delete_max (MKT ln ll lr lh))) + 1\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "have t_height: \"height t = 1 + max (height ?l) (height ?r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height t = 1 + max (height (MKT ln ll lr lh)) (height (MKT rn rl rr rh))", "using \\<open>avl t\\<close> MKT_MKT"], ["proof (prove)\nusing this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. height t = 1 + max (height (MKT ln ll lr lh)) (height (MKT rn rl rr rh))", "by simp"], ["proof (state)\nthis:\n  height t = 1 + max (height (MKT ln ll lr lh)) (height (MKT rn rl rr rh))\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "have \"height t = height ?t' \\<or> height t = height ?t' + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "using  \\<open>avl t\\<close> MKT_MKT"], ["proof (prove)\nusing this:\n  avl t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "proof(cases \"height ?r = height ?l' + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl t; t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h;\n     height (MKT rn rl rr rh) =\n     height (snd (delete_max (MKT ln ll lr lh))) + 2\\<rbrakk>\n    \\<Longrightarrow> height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) \\<or>\n                      height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) +\n                      1\n 2. \\<lbrakk>avl t; t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h;\n     height (MKT rn rl rr rh) \\<noteq>\n     height (snd (delete_max (MKT ln ll lr lh))) + 2\\<rbrakk>\n    \\<Longrightarrow> height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) \\<or>\n                      height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) +\n                      1", "case False"], ["proof (state)\nthis:\n  height (MKT rn rl rr rh) \\<noteq>\n  height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl t; t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h;\n     height (MKT rn rl rr rh) =\n     height (snd (delete_max (MKT ln ll lr lh))) + 2\\<rbrakk>\n    \\<Longrightarrow> height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) \\<or>\n                      height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) +\n                      1\n 2. \\<lbrakk>avl t; t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h;\n     height (MKT rn rl rr rh) \\<noteq>\n     height (snd (delete_max (MKT ln ll lr lh))) + 2\\<rbrakk>\n    \\<Longrightarrow> height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) \\<or>\n                      height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) +\n                      1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "using l'_height t_height False"], ["proof (prove)\nusing this:\n  height (MKT ln ll lr lh) =\n  height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n  height (MKT ln ll lr lh) = height (snd (delete_max (MKT ln ll lr lh))) + 1\n  height t = 1 + max (height (MKT ln ll lr lh)) (height (MKT rn rl rr rh))\n  height (MKT rn rl rr rh) \\<noteq>\n  height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "by (subst  height_mkt_bal_r2[OF \\<open>avl ?l'\\<close> \\<open>avl ?r\\<close> False])+ arith"], ["proof (state)\nthis:\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n  1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h;\n     height (MKT rn rl rr rh) =\n     height (snd (delete_max (MKT ln ll lr lh))) + 2\\<rbrakk>\n    \\<Longrightarrow> height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) \\<or>\n                      height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) +\n                      1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h;\n     height (MKT rn rl rr rh) =\n     height (snd (delete_max (MKT ln ll lr lh))) + 2\\<rbrakk>\n    \\<Longrightarrow> height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) \\<or>\n                      height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) +\n                      1", "case True"], ["proof (state)\nthis:\n  height (MKT rn rl rr rh) = height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h;\n     height (MKT rn rl rr rh) =\n     height (snd (delete_max (MKT ln ll lr lh))) + 2\\<rbrakk>\n    \\<Longrightarrow> height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) \\<or>\n                      height t =\n                      height\n                       (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n                         (snd (delete_max (MKT ln ll lr lh)))\n                         (MKT rn rl rr rh)) +\n                      1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "proof(cases rule: disjE[OF height_mkt_bal_r[OF True \\<open>avl ?l'\\<close> \\<open>avl ?r\\<close>, of \"fst (delete_max ?l)\"]])"], ["proof (state)\ngoal (2 subgoals):\n 1. height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 2 \\<Longrightarrow>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1\n 2. height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 3 \\<Longrightarrow>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "case 1"], ["proof (state)\nthis:\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (2 subgoals):\n 1. height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 2 \\<Longrightarrow>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1\n 2. height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 3 \\<Longrightarrow>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "then"], ["proof (chain)\npicking this:\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "using l'_height t_height True"], ["proof (prove)\nusing this:\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 2\n  height (MKT ln ll lr lh) =\n  height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n  height (MKT ln ll lr lh) = height (snd (delete_max (MKT ln ll lr lh))) + 1\n  height t = 1 + max (height (MKT ln ll lr lh)) (height (MKT rn rl rr rh))\n  height (MKT rn rl rr rh) = height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "by arith"], ["proof (state)\nthis:\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n  1\n\ngoal (1 subgoal):\n 1. height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 3 \\<Longrightarrow>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 3 \\<Longrightarrow>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "case 2"], ["proof (state)\nthis:\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 3\n\ngoal (1 subgoal):\n 1. height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n    height (snd (delete_max (MKT ln ll lr lh))) + 3 \\<Longrightarrow>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "then"], ["proof (chain)\npicking this:\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 3", "show ?thesis"], ["proof (prove)\nusing this:\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 3\n\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "using l'_height t_height True"], ["proof (prove)\nusing this:\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) =\n  height (snd (delete_max (MKT ln ll lr lh))) + 3\n  height (MKT ln ll lr lh) =\n  height (snd (delete_max (MKT ln ll lr lh))) \\<or>\n  height (MKT ln ll lr lh) = height (snd (delete_max (MKT ln ll lr lh))) + 1\n  height t = 1 + max (height (MKT ln ll lr lh)) (height (MKT rn rl rr rh))\n  height (MKT rn rl rr rh) = height (snd (delete_max (MKT ln ll lr lh))) + 2\n\ngoal (1 subgoal):\n 1. height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n    height t =\n    height\n     (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n       (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n    1", "by arith"], ["proof (state)\nthis:\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n  1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n  1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n  1\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 4. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n  1\n\ngoal (1 subgoal):\n 1. height t = height (delete_root t) \\<or>\n    height t = height (delete_root t) + 1", "using MKT_MKT"], ["proof (prove)\nusing this:\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) \\<or>\n  height t =\n  height\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)) +\n  1\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. height t = height (delete_root t) \\<or>\n    height t = height (delete_root t) + 1", "by (auto split:prod.splits simp del:mkt_bal_r.simps)"], ["proof (state)\nthis:\n  height t = height (delete_root t) \\<or>\n  height t = height (delete_root t) + 1\n\ngoal (3 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                         height t = height (delete_root t) + 1\n 3. \\<lbrakk>avl t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> height t = height (delete_root t) \\<or>\n                      height t = height (delete_root t) + 1", "qed simp_all"], ["", "text\\<open>Deletion maintains the AVL property:\\<close>"], ["", "theorem avl_delete_aux:\n  assumes \"avl t\" \n  shows \"avl(delete x t)\" and \"height t = (height (delete x t)) \\<or> height t = height (delete x t) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. avl (delete x t) &&&\n    height t = height (delete x t) \\<or> height t = height (delete x t) + 1", "using assms"], ["proof (prove)\nusing this:\n  avl t\n\ngoal (1 subgoal):\n 1. avl (delete x t) &&&\n    height t = height (delete x t) \\<or> height t = height (delete x t) + 1", "proof (induct t)"], ["proof (state)\ngoal (4 subgoals):\n 1. avl ET \\<Longrightarrow> avl (delete x ET)\n 2. avl ET \\<Longrightarrow>\n    height ET = height (delete x ET) \\<or>\n    height ET = height (delete x ET) + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (delete x t1);\n        avl t1 \\<Longrightarrow>\n        height t1 = height (delete x t1) \\<or>\n        height t1 = height (delete x t1) + 1;\n        avl t2 \\<Longrightarrow> avl (delete x t2);\n        avl t2 \\<Longrightarrow>\n        height t2 = height (delete x t2) \\<or>\n        height t2 = height (delete x t2) + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> avl (delete x (MKT x1 t1 t2 x4))\n 4. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (delete x t1);\n        avl t1 \\<Longrightarrow>\n        height t1 = height (delete x t1) \\<or>\n        height t1 = height (delete x t1) + 1;\n        avl t2 \\<Longrightarrow> avl (delete x t2);\n        avl t2 \\<Longrightarrow>\n        height t2 = height (delete x t2) \\<or>\n        height t2 = height (delete x t2) + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) \\<or>\n                         height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) + 1", "case (MKT n l r h)"], ["proof (state)\nthis:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n\ngoal (4 subgoals):\n 1. avl ET \\<Longrightarrow> avl (delete x ET)\n 2. avl ET \\<Longrightarrow>\n    height ET = height (delete x ET) \\<or>\n    height ET = height (delete x ET) + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (delete x t1);\n        avl t1 \\<Longrightarrow>\n        height t1 = height (delete x t1) \\<or>\n        height t1 = height (delete x t1) + 1;\n        avl t2 \\<Longrightarrow> avl (delete x t2);\n        avl t2 \\<Longrightarrow>\n        height t2 = height (delete x t2) \\<or>\n        height t2 = height (delete x t2) + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> avl (delete x (MKT x1 t1 t2 x4))\n 4. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (delete x t1);\n        avl t1 \\<Longrightarrow>\n        height t1 = height (delete x t1) \\<or>\n        height t1 = height (delete x t1) + 1;\n        avl t2 \\<Longrightarrow> avl (delete x t2);\n        avl t2 \\<Longrightarrow>\n        height t2 = height (delete x t2) \\<or>\n        height t2 = height (delete x t2) + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) \\<or>\n                         height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) + 1", "case 1"], ["proof (state)\nthis:\n  avl (MKT n l r h)\n\ngoal (4 subgoals):\n 1. avl ET \\<Longrightarrow> avl (delete x ET)\n 2. avl ET \\<Longrightarrow>\n    height ET = height (delete x ET) \\<or>\n    height ET = height (delete x ET) + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (delete x t1);\n        avl t1 \\<Longrightarrow>\n        height t1 = height (delete x t1) \\<or>\n        height t1 = height (delete x t1) + 1;\n        avl t2 \\<Longrightarrow> avl (delete x t2);\n        avl t2 \\<Longrightarrow>\n        height t2 = height (delete x t2) \\<or>\n        height t2 = height (delete x t2) + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> avl (delete x (MKT x1 t1 t2 x4))\n 4. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (delete x t1);\n        avl t1 \\<Longrightarrow>\n        height t1 = height (delete x t1) \\<or>\n        height t1 = height (delete x t1) + 1;\n        avl t2 \\<Longrightarrow> avl (delete x t2);\n        avl t2 \\<Longrightarrow>\n        height t2 = height (delete x t2) \\<or>\n        height t2 = height (delete x t2) + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) \\<or>\n                         height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) + 1", "with MKT"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)", "show ?case"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n\ngoal (1 subgoal):\n 1. avl (delete x (MKT n l r h))", "proof(cases \"x = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "case True"], ["proof (state)\nthis:\n  x = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x = n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x = n\n\ngoal (1 subgoal):\n 1. avl (delete x (MKT n l r h))", "by (auto simp:avl_delete_root)"], ["proof (state)\nthis:\n  avl (delete x (MKT n l r h))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x \\<noteq> n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. avl (delete x (MKT n l r h))", "proof(cases \"x<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "case True"], ["proof (state)\nthis:\n  x < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x < n\n\ngoal (1 subgoal):\n 1. avl (delete x (MKT n l r h))", "by (auto simp add:avl_mkt_bal_r simp del:mkt_bal_r.simps)"], ["proof (state)\nthis:\n  avl (delete x (MKT n l r h))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "case False"], ["proof (state)\nthis:\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> avl (delete x (MKT n l r h))", "with MKT 1 \\<open>x\\<noteq>n\\<close>"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x \\<noteq> n\n  \\<not> x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x \\<noteq> n\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. avl (delete x (MKT n l r h))", "by (auto simp add:avl_mkt_bal_l simp del:mkt_bal_l.simps)"], ["proof (state)\nthis:\n  avl (delete x (MKT n l r h))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  avl (delete x (MKT n l r h))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  avl (delete x (MKT n l r h))\n\ngoal (3 subgoals):\n 1. avl ET \\<Longrightarrow> avl (delete x ET)\n 2. avl ET \\<Longrightarrow>\n    height ET = height (delete x ET) \\<or>\n    height ET = height (delete x ET) + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (delete x t1);\n        avl t1 \\<Longrightarrow>\n        height t1 = height (delete x t1) \\<or>\n        height t1 = height (delete x t1) + 1;\n        avl t2 \\<Longrightarrow> avl (delete x t2);\n        avl t2 \\<Longrightarrow>\n        height t2 = height (delete x t2) \\<or>\n        height t2 = height (delete x t2) + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) \\<or>\n                         height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) + 1", "case 2"], ["proof (state)\nthis:\n  avl (MKT n l r h)\n\ngoal (3 subgoals):\n 1. avl ET \\<Longrightarrow> avl (delete x ET)\n 2. avl ET \\<Longrightarrow>\n    height ET = height (delete x ET) \\<or>\n    height ET = height (delete x ET) + 1\n 3. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>avl t1 \\<Longrightarrow> avl (delete x t1);\n        avl t1 \\<Longrightarrow>\n        height t1 = height (delete x t1) \\<or>\n        height t1 = height (delete x t1) + 1;\n        avl t2 \\<Longrightarrow> avl (delete x t2);\n        avl t2 \\<Longrightarrow>\n        height t2 = height (delete x t2) \\<or>\n        height t2 = height (delete x t2) + 1;\n        avl (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) \\<or>\n                         height (MKT x1 t1 t2 x4) =\n                         height (delete x (MKT x1 t1 t2 x4)) + 1", "with MKT"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)", "show ?case"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "proof(cases \"x = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "case True"], ["proof (state)\nthis:\n  x = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "with 1"], ["proof (chain)\npicking this:\n  avl (MKT n l r h)\n  x = n", "have \"height (MKT n l r h) = height(delete_root (MKT n l r h))\n      \\<or> height (MKT n l r h) = height(delete_root (MKT n l r h)) + 1\""], ["proof (prove)\nusing this:\n  avl (MKT n l r h)\n  x = n\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete_root (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete_root (MKT n l r h)) + 1", "by (subst height_delete_root,simp_all)"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete_root (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete_root (MKT n l r h)) + 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "with True"], ["proof (chain)\npicking this:\n  x = n\n  height (MKT n l r h) = height (delete_root (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete_root (MKT n l r h)) + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  x = n\n  height (MKT n l r h) = height (delete_root (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete_root (MKT n l r h)) + 1\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "by simp"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "case False"], ["proof (state)\nthis:\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "with MKT 1"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x \\<noteq> n", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "proof(cases \"x<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "case True"], ["proof (state)\nthis:\n  x < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1\n 2. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "proof(cases \"height r = height (delete x l) + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. height r = height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n 2. height r \\<noteq> height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "case False"], ["proof (state)\nthis:\n  height r \\<noteq> height (delete x l) + 2\n\ngoal (2 subgoals):\n 1. height r = height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n 2. height r \\<noteq> height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "with MKT 1 \\<open>x < n\\<close>"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x < n\n  height r \\<noteq> height (delete x l) + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  x < n\n  height r \\<noteq> height (delete x l) + 2\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "by auto"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal (1 subgoal):\n 1. height r = height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. height r = height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "case True"], ["proof (state)\nthis:\n  height r = height (delete x l) + 2\n\ngoal (1 subgoal):\n 1. height r = height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "then"], ["proof (chain)\npicking this:\n  height r = height (delete x l) + 2", "consider (a) \"height (mkt_bal_r n (delete x l) r) = height (delete x l) + 2\"\n          | (b) \"height (mkt_bal_r n (delete x l) r) = height (delete x l) + 3\""], ["proof (prove)\nusing this:\n  height r = height (delete x l) + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>height (mkt_bal_r n (delete x l) r) =\n             height (delete x l) + 2 \\<Longrightarrow>\n             thesis;\n     height (mkt_bal_r n (delete x l) r) =\n     height (delete x l) + 3 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using MKT 2"], ["proof (prove)\nusing this:\n  height r = height (delete x l) + 2\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>height (mkt_bal_r n (delete x l) r) =\n             height (delete x l) + 2 \\<Longrightarrow>\n             thesis;\n     height (mkt_bal_r n (delete x l) r) =\n     height (delete x l) + 3 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (atomize_elim, intro height_mkt_bal_r) auto"], ["proof (state)\nthis:\n  \\<lbrakk>height (mkt_bal_r n (delete x l) r) =\n           height (delete x l) + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_r n (delete x l) r) =\n   height (delete x l) + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. height r = height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>height (mkt_bal_r n (delete x l) r) =\n           height (delete x l) + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_r n (delete x l) r) =\n   height (delete x l) + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>height (mkt_bal_r n (delete x l) r) =\n           height (delete x l) + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_r n (delete x l) r) =\n   height (delete x l) + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. height (mkt_bal_r n (delete x l) r) =\n    height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n 2. height (mkt_bal_r n (delete x l) r) =\n    height (delete x l) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "case a"], ["proof (state)\nthis:\n  height (mkt_bal_r n (delete x l) r) = height (delete x l) + 2\n\ngoal (2 subgoals):\n 1. height (mkt_bal_r n (delete x l) r) =\n    height (delete x l) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n 2. height (mkt_bal_r n (delete x l) r) =\n    height (delete x l) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "with \\<open>x < n\\<close> MKT 2"], ["proof (chain)\npicking this:\n  x < n\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  height (mkt_bal_r n (delete x l) r) = height (delete x l) + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  x < n\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  height (mkt_bal_r n (delete x l) r) = height (delete x l) + 2\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "by auto"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal (1 subgoal):\n 1. height (mkt_bal_r n (delete x l) r) =\n    height (delete x l) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. height (mkt_bal_r n (delete x l) r) =\n    height (delete x l) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "case b"], ["proof (state)\nthis:\n  height (mkt_bal_r n (delete x l) r) = height (delete x l) + 3\n\ngoal (1 subgoal):\n 1. height (mkt_bal_r n (delete x l) r) =\n    height (delete x l) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "with \\<open>x < n\\<close> MKT 2"], ["proof (chain)\npicking this:\n  x < n\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  height (mkt_bal_r n (delete x l) r) = height (delete x l) + 3", "show ?thesis"], ["proof (prove)\nusing this:\n  x < n\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  height (mkt_bal_r n (delete x l) r) = height (delete x l) + 3\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "by auto"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "case False"], ["proof (state)\nthis:\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l \\<Longrightarrow> avl (delete x l);\n     avl l \\<Longrightarrow>\n     height l = height (delete x l) \\<or>\n     height l = height (delete x l) + 1;\n     avl r \\<Longrightarrow> avl (delete x r);\n     avl r \\<Longrightarrow>\n     height r = height (delete x r) \\<or>\n     height r = height (delete x r) + 1;\n     avl (MKT n l r h); x \\<noteq> n; \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) \\<or>\n                      height (MKT n l r h) =\n                      height (delete x (MKT n l r h)) + 1", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "proof(cases \"height l = height (delete x r) + 2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. height l = height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n 2. height l \\<noteq> height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "case False"], ["proof (state)\nthis:\n  height l \\<noteq> height (delete x r) + 2\n\ngoal (2 subgoals):\n 1. height l = height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n 2. height l \\<noteq> height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "with MKT 1 \\<open>\\<not>x < n\\<close> \\<open>x \\<noteq> n\\<close>"], ["proof (chain)\npicking this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  \\<not> x < n\n  x \\<noteq> n\n  height l \\<noteq> height (delete x r) + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  \\<not> x < n\n  x \\<noteq> n\n  height l \\<noteq> height (delete x r) + 2\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "by auto"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal (1 subgoal):\n 1. height l = height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. height l = height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "case True"], ["proof (state)\nthis:\n  height l = height (delete x r) + 2\n\ngoal (1 subgoal):\n 1. height l = height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "then"], ["proof (chain)\npicking this:\n  height l = height (delete x r) + 2", "consider (a) \"height (mkt_bal_l n l (delete x r)) = height (delete x r) + 2\"\n          | (b) \"height (mkt_bal_l n l (delete x r)) = height (delete x r) + 3\""], ["proof (prove)\nusing this:\n  height l = height (delete x r) + 2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>height (mkt_bal_l n l (delete x r)) =\n             height (delete x r) + 2 \\<Longrightarrow>\n             thesis;\n     height (mkt_bal_l n l (delete x r)) =\n     height (delete x r) + 3 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using MKT 2"], ["proof (prove)\nusing this:\n  height l = height (delete x r) + 2\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>height (mkt_bal_l n l (delete x r)) =\n             height (delete x r) + 2 \\<Longrightarrow>\n             thesis;\n     height (mkt_bal_l n l (delete x r)) =\n     height (delete x r) + 3 \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (atomize_elim, intro height_mkt_bal_l) auto"], ["proof (state)\nthis:\n  \\<lbrakk>height (mkt_bal_l n l (delete x r)) =\n           height (delete x r) + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_l n l (delete x r)) =\n   height (delete x r) + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. height l = height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>height (mkt_bal_l n l (delete x r)) =\n           height (delete x r) + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_l n l (delete x r)) =\n   height (delete x r) + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>height (mkt_bal_l n l (delete x r)) =\n           height (delete x r) + 2 \\<Longrightarrow>\n           ?thesis;\n   height (mkt_bal_l n l (delete x r)) =\n   height (delete x r) + 3 \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. height (mkt_bal_l n l (delete x r)) =\n    height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n 2. height (mkt_bal_l n l (delete x r)) =\n    height (delete x r) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "case a"], ["proof (state)\nthis:\n  height (mkt_bal_l n l (delete x r)) = height (delete x r) + 2\n\ngoal (2 subgoals):\n 1. height (mkt_bal_l n l (delete x r)) =\n    height (delete x r) + 2 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n 2. height (mkt_bal_l n l (delete x r)) =\n    height (delete x r) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "with \\<open>\\<not>x < n\\<close> \\<open>x \\<noteq> n\\<close> MKT 2"], ["proof (chain)\npicking this:\n  \\<not> x < n\n  x \\<noteq> n\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  height (mkt_bal_l n l (delete x r)) = height (delete x r) + 2", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x < n\n  x \\<noteq> n\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  height (mkt_bal_l n l (delete x r)) = height (delete x r) + 2\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "by auto"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal (1 subgoal):\n 1. height (mkt_bal_l n l (delete x r)) =\n    height (delete x r) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. height (mkt_bal_l n l (delete x r)) =\n    height (delete x r) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "case b"], ["proof (state)\nthis:\n  height (mkt_bal_l n l (delete x r)) = height (delete x r) + 3\n\ngoal (1 subgoal):\n 1. height (mkt_bal_l n l (delete x r)) =\n    height (delete x r) + 3 \\<Longrightarrow>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "with \\<open>\\<not>x < n\\<close> \\<open>x \\<noteq> n\\<close> MKT 2"], ["proof (chain)\npicking this:\n  \\<not> x < n\n  x \\<noteq> n\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  height (mkt_bal_l n l (delete x r)) = height (delete x r) + 3", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x < n\n  x \\<noteq> n\n  avl l \\<Longrightarrow> avl (delete x l)\n  avl l \\<Longrightarrow>\n  height l = height (delete x l) \\<or> height l = height (delete x l) + 1\n  avl r \\<Longrightarrow> avl (delete x r)\n  avl r \\<Longrightarrow>\n  height r = height (delete x r) \\<or> height r = height (delete x r) + 1\n  avl (MKT n l r h)\n  height (mkt_bal_l n l (delete x r)) = height (delete x r) + 3\n\ngoal (1 subgoal):\n 1. height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n    height (MKT n l r h) = height (delete x (MKT n l r h)) + 1", "by auto"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  height (MKT n l r h) = height (delete x (MKT n l r h)) \\<or>\n  height (MKT n l r h) = height (delete x (MKT n l r h)) + 1\n\ngoal (2 subgoals):\n 1. avl ET \\<Longrightarrow> avl (delete x ET)\n 2. avl ET \\<Longrightarrow>\n    height ET = height (delete x ET) \\<or>\n    height ET = height (delete x ET) + 1", "qed simp_all"], ["", "lemmas avl_delete = avl_delete_aux(1)"], ["", "subsubsection \\<open>Correctness of insertion\\<close>"], ["", "lemma set_of_mkt_bal_l:\n  \"\\<lbrakk> avl l; avl r \\<rbrakk> \\<Longrightarrow>\n  set_of (mkt_bal_l n l r) = Set.insert n (set_of l \\<union> set_of r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r\\<rbrakk>\n    \\<Longrightarrow> set_of (mkt_bal_l n l r) =\n                      Set.insert n (set_of l \\<union> set_of r)", "by (auto simp: mkt_def split:tree.splits)"], ["", "lemma set_of_mkt_bal_r:\n  \"\\<lbrakk> avl l; avl r \\<rbrakk> \\<Longrightarrow>\n  set_of (mkt_bal_r n l r) = Set.insert n (set_of l \\<union> set_of r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl l; avl r\\<rbrakk>\n    \\<Longrightarrow> set_of (mkt_bal_r n l r) =\n                      Set.insert n (set_of l \\<union> set_of r)", "by (auto simp: mkt_def split:tree.splits)"], ["", "text\\<open>Correctness of @{const insert}:\\<close>"], ["", "theorem set_of_insert:\n  \"avl t \\<Longrightarrow> set_of(insert x t) = Set.insert x (set_of t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. avl t \\<Longrightarrow>\n    set_of (AVL.insert x t) = Set.insert x (set_of t)", "by (induct t) \n   (auto simp: avl_insert set_of_mkt_bal_l set_of_mkt_bal_r simp del:mkt_bal_l.simps mkt_bal_r.simps)"], ["", "subsubsection \\<open>Correctness of deletion\\<close>"], ["", "fun rightmost_item :: \"'a tree \\<Rightarrow> 'a\" where\n\"rightmost_item (MKT n l ET h) = n\" |\n\"rightmost_item (MKT n l r h) = rightmost_item r\""], ["", "lemma avl_dist:\n  \"\\<lbrakk> avl(MKT n l r h); is_ord(MKT n l r h); x \\<in> set_of l \\<rbrakk> \\<Longrightarrow>\n  x \\<notin> set_of r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl (MKT n l r h); is_ord (MKT n l r h);\n     x \\<in> set_of l\\<rbrakk>\n    \\<Longrightarrow> x \\<notin> set_of r", "by fastforce"], ["", "lemma avl_dist2:\n  \"\\<lbrakk> avl(MKT n l r h); is_ord(MKT n l r h); x \\<in> set_of l \\<or> x \\<in> set_of r \\<rbrakk> \\<Longrightarrow>\n  x \\<noteq> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl (MKT n l r h); is_ord (MKT n l r h);\n     x \\<in> set_of l \\<or> x \\<in> set_of r\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> n", "by auto"], ["", "lemma ritem_in_rset: \"r \\<noteq> ET \\<Longrightarrow> rightmost_item r \\<in> set_of r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<noteq> ET \\<Longrightarrow> rightmost_item r \\<in> set_of r", "by(induct r rule:rightmost_item.induct) auto"], ["", "lemma ritem_greatest_in_rset:\n  \"\\<lbrakk> r \\<noteq> ET; is_ord r \\<rbrakk> \\<Longrightarrow>\n  \\<forall>x.  x \\<in> set_of r \\<longrightarrow> x \\<noteq> rightmost_item r \\<longrightarrow> x < rightmost_item r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<noteq> ET; is_ord r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> set_of r \\<longrightarrow>\n                         x \\<noteq> rightmost_item r \\<longrightarrow>\n                         x < rightmost_item r", "proof(induct r rule:rightmost_item.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>MKT n l ET h \\<noteq> ET; is_ord (MKT n l ET h)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            x \\<in> set_of (MKT n l ET h) \\<longrightarrow>\n                            x \\<noteq>\n                            rightmost_item (MKT n l ET h) \\<longrightarrow>\n                            x < rightmost_item (MKT n l ET h)\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>MKT v va vb vc \\<noteq> ET;\n                 is_ord (MKT v va vb vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x.\n                                     x \\<in> set_of\n        (MKT v va vb vc) \\<longrightarrow>\n                                     x \\<noteq>\n                                     rightmost_item\n(MKT v va vb vc) \\<longrightarrow>\n                                     x < rightmost_item (MKT v va vb vc);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET;\n        is_ord (MKT n l (MKT v va vb vc) h)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            x \\<in> set_of\n                                     (MKT n l (MKT v va vb vc)\n h) \\<longrightarrow>\n                            x \\<noteq>\n                            rightmost_item\n                             (MKT n l (MKT v va vb vc) h) \\<longrightarrow>\n                            x < rightmost_item (MKT n l (MKT v va vb vc) h)\n 3. \\<lbrakk>ET \\<noteq> ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> set_of ET \\<longrightarrow>\n                         x \\<noteq> rightmost_item ET \\<longrightarrow>\n                         x < rightmost_item ET", "case (2 n l rn rl rr rh h)"], ["proof (state)\nthis:\n  \\<lbrakk>MKT rn rl rr rh \\<noteq> ET; is_ord (MKT rn rl rr rh)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n                       x \\<noteq>\n                       rightmost_item (MKT rn rl rr rh) \\<longrightarrow>\n                       x < rightmost_item (MKT rn rl rr rh)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>MKT n l ET h \\<noteq> ET; is_ord (MKT n l ET h)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            x \\<in> set_of (MKT n l ET h) \\<longrightarrow>\n                            x \\<noteq>\n                            rightmost_item (MKT n l ET h) \\<longrightarrow>\n                            x < rightmost_item (MKT n l ET h)\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>MKT v va vb vc \\<noteq> ET;\n                 is_ord (MKT v va vb vc)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>x.\n                                     x \\<in> set_of\n        (MKT v va vb vc) \\<longrightarrow>\n                                     x \\<noteq>\n                                     rightmost_item\n(MKT v va vb vc) \\<longrightarrow>\n                                     x < rightmost_item (MKT v va vb vc);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET;\n        is_ord (MKT n l (MKT v va vb vc) h)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            x \\<in> set_of\n                                     (MKT n l (MKT v va vb vc)\n h) \\<longrightarrow>\n                            x \\<noteq>\n                            rightmost_item\n                             (MKT n l (MKT v va vb vc) h) \\<longrightarrow>\n                            x < rightmost_item (MKT n l (MKT v va vb vc) h)\n 3. \\<lbrakk>ET \\<noteq> ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> set_of ET \\<longrightarrow>\n                         x \\<noteq> rightmost_item ET \\<longrightarrow>\n                         x < rightmost_item ET", "show ?case (is \"\\<forall>x. ?P x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x \\<noteq>\n       rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x \\<noteq>\n       rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x \\<noteq>\n       rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "from 2"], ["proof (chain)\npicking this:\n  \\<lbrakk>MKT rn rl rr rh \\<noteq> ET; is_ord (MKT rn rl rr rh)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n                       x \\<noteq>\n                       rightmost_item (MKT rn rl rr rh) \\<longrightarrow>\n                       x < rightmost_item (MKT rn rl rr rh)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (MKT rn rl rr rh) h)", "have \"is_ord (MKT rn rl rr rh)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>MKT rn rl rr rh \\<noteq> ET; is_ord (MKT rn rl rr rh)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n                       x \\<noteq>\n                       rightmost_item (MKT rn rl rr rh) \\<longrightarrow>\n                       x < rightmost_item (MKT rn rl rr rh)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n\ngoal (1 subgoal):\n 1. is_ord (MKT rn rl rr rh)", "by auto"], ["proof (state)\nthis:\n  is_ord (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x \\<noteq>\n       rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "moreover"], ["proof (state)\nthis:\n  is_ord (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x \\<noteq>\n       rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "from 2"], ["proof (chain)\npicking this:\n  \\<lbrakk>MKT rn rl rr rh \\<noteq> ET; is_ord (MKT rn rl rr rh)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n                       x \\<noteq>\n                       rightmost_item (MKT rn rl rr rh) \\<longrightarrow>\n                       x < rightmost_item (MKT rn rl rr rh)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (MKT rn rl rr rh) h)", "have \"n < rightmost_item (MKT rn rl rr rh)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>MKT rn rl rr rh \\<noteq> ET; is_ord (MKT rn rl rr rh)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n                       x \\<noteq>\n                       rightmost_item (MKT rn rl rr rh) \\<longrightarrow>\n                       x < rightmost_item (MKT rn rl rr rh)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n\ngoal (1 subgoal):\n 1. n < rightmost_item (MKT rn rl rr rh)", "by (metis is_ord.simps(2) ritem_in_rset tree.simps(2))"], ["proof (state)\nthis:\n  n < rightmost_item (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x \\<noteq>\n       rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "moreover"], ["proof (state)\nthis:\n  n < rightmost_item (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x \\<noteq>\n       rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "from 2"], ["proof (chain)\npicking this:\n  \\<lbrakk>MKT rn rl rr rh \\<noteq> ET; is_ord (MKT rn rl rr rh)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n                       x \\<noteq>\n                       rightmost_item (MKT rn rl rr rh) \\<longrightarrow>\n                       x < rightmost_item (MKT rn rl rr rh)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (MKT rn rl rr rh) h)", "have \"x \\<in> set_of l \\<longrightarrow> x < rightmost_item (MKT rn rl rr rh)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>MKT rn rl rr rh \\<noteq> ET; is_ord (MKT rn rl rr rh)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n                       x \\<noteq>\n                       rightmost_item (MKT rn rl rr rh) \\<longrightarrow>\n                       x < rightmost_item (MKT rn rl rr rh)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n\ngoal (1 subgoal):\n 1. x \\<in> set_of l \\<longrightarrow> x < rightmost_item (MKT rn rl rr rh)", "by (metis calculation(2) is_ord.simps(2) xt1(10))"], ["proof (state)\nthis:\n  x \\<in> set_of l \\<longrightarrow> x < rightmost_item (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x \\<noteq>\n       rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n       x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "ultimately"], ["proof (chain)\npicking this:\n  is_ord (MKT rn rl rr rh)\n  n < rightmost_item (MKT rn rl rr rh)\n  x \\<in> set_of l \\<longrightarrow> x < rightmost_item (MKT rn rl rr rh)", "show \"?P x\""], ["proof (prove)\nusing this:\n  is_ord (MKT rn rl rr rh)\n  n < rightmost_item (MKT rn rl rr rh)\n  x \\<in> set_of l \\<longrightarrow> x < rightmost_item (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n    x \\<noteq>\n    rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n    x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "using 2"], ["proof (prove)\nusing this:\n  is_ord (MKT rn rl rr rh)\n  n < rightmost_item (MKT rn rl rr rh)\n  x \\<in> set_of l \\<longrightarrow> x < rightmost_item (MKT rn rl rr rh)\n  \\<lbrakk>MKT rn rl rr rh \\<noteq> ET; is_ord (MKT rn rl rr rh)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n                       x \\<noteq>\n                       rightmost_item (MKT rn rl rr rh) \\<longrightarrow>\n                       x < rightmost_item (MKT rn rl rr rh)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n\ngoal (1 subgoal):\n 1. x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n    x \\<noteq>\n    rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n    x < rightmost_item (MKT n l (MKT rn rl rr rh) h)", "by simp"], ["proof (state)\nthis:\n  x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n  x \\<noteq> rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n  x < rightmost_item (MKT n l (MKT rn rl rr rh) h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set_of (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n     x \\<noteq>\n     rightmost_item (MKT n l (MKT rn rl rr rh) h) \\<longrightarrow>\n     x < rightmost_item (MKT n l (MKT rn rl rr rh) h)\n\ngoal (2 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>MKT n l ET h \\<noteq> ET; is_ord (MKT n l ET h)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            x \\<in> set_of (MKT n l ET h) \\<longrightarrow>\n                            x \\<noteq>\n                            rightmost_item (MKT n l ET h) \\<longrightarrow>\n                            x < rightmost_item (MKT n l ET h)\n 2. \\<lbrakk>ET \\<noteq> ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> set_of ET \\<longrightarrow>\n                         x \\<noteq> rightmost_item ET \\<longrightarrow>\n                         x < rightmost_item ET", "qed auto"], ["", "lemma ritem_not_in_ltree:\n  \"\\<lbrakk> avl(MKT n l r h); is_ord(MKT n l r h); r \\<noteq> ET \\<rbrakk> \\<Longrightarrow>\n  rightmost_item r \\<notin> set_of l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl (MKT n l r h); is_ord (MKT n l r h); r \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> rightmost_item r \\<notin> set_of l", "by (metis avl_dist ritem_in_rset)"], ["", "lemma set_of_delete_max:\n  \"\\<lbrakk> avl t; is_ord t; t\\<noteq>ET \\<rbrakk> \\<Longrightarrow>\n   set_of (snd(delete_max t)) = (set_of t) - {rightmost_item t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max t)) =\n                      set_of t - {rightmost_item t}", "proof (induct t rule: delete_max_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "case (MKT n l rn rl rr rh h)"], ["proof (state)\nthis:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> set_of (snd (delete_max (MKT rn rl rr rh))) =\n                    set_of (MKT rn rl rr rh) -\n                    {rightmost_item (MKT rn rl rr rh)}\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "let ?r = \"MKT rn rl rr rh\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "from MKT"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> set_of (snd (delete_max (MKT rn rl rr rh))) =\n                    set_of (MKT rn rl rr rh) -\n                    {rightmost_item (MKT rn rl rr rh)}\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET", "have \"avl l\" and \"avl ?r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> set_of (snd (delete_max (MKT rn rl rr rh))) =\n                    set_of (MKT rn rl rr rh) -\n                    {rightmost_item (MKT rn rl rr rh)}\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (1 subgoal):\n 1. avl l &&& avl (MKT rn rl rr rh)", "by simp_all"], ["proof (state)\nthis:\n  avl l\n  avl (MKT rn rl rr rh)\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "let ?t' = \"mkt_bal_l n l (snd (delete_max ?r))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "from MKT"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> set_of (snd (delete_max (MKT rn rl rr rh))) =\n                    set_of (MKT rn rl rr rh) -\n                    {rightmost_item (MKT rn rl rr rh)}\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET", "have \"avl (snd(delete_max ?r))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> set_of (snd (delete_max (MKT rn rl rr rh))) =\n                    set_of (MKT rn rl rr rh) -\n                    {rightmost_item (MKT rn rl rr rh)}\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (1 subgoal):\n 1. avl (snd (delete_max (MKT rn rl rr rh)))", "by (auto simp add: avl_delete_max)"], ["proof (state)\nthis:\n  avl (snd (delete_max (MKT rn rl rr rh)))\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "with MKT ritem_not_in_ltree[of n l ?r h]"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> set_of (snd (delete_max (MKT rn rl rr rh))) =\n                    set_of (MKT rn rl rr rh) -\n                    {rightmost_item (MKT rn rl rr rh)}\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  \\<lbrakk>avl (MKT n l (MKT rn rl rr rh) h);\n   is_ord (MKT n l (MKT rn rl rr rh) h);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> rightmost_item (MKT rn rl rr rh) \\<notin> set_of l\n  avl (snd (delete_max (MKT rn rl rr rh)))", "have \"set_of ?t' = (set_of l) \\<union> (set_of ?r) - {rightmost_item ?r} \\<union> {n}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> set_of (snd (delete_max (MKT rn rl rr rh))) =\n                    set_of (MKT rn rl rr rh) -\n                    {rightmost_item (MKT rn rl rr rh)}\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  \\<lbrakk>avl (MKT n l (MKT rn rl rr rh) h);\n   is_ord (MKT n l (MKT rn rl rr rh) h);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> rightmost_item (MKT rn rl rr rh) \\<notin> set_of l\n  avl (snd (delete_max (MKT rn rl rr rh)))\n\ngoal (1 subgoal):\n 1. set_of (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh)))) =\n    set_of l \\<union> set_of (MKT rn rl rr rh) -\n    {rightmost_item (MKT rn rl rr rh)} \\<union>\n    {n}", "by (auto simp add:set_of_mkt_bal_l simp del: mkt_bal_l.simps)"], ["proof (state)\nthis:\n  set_of (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh)))) =\n  set_of l \\<union> set_of (MKT rn rl rr rh) -\n  {rightmost_item (MKT rn rl rr rh)} \\<union>\n  {n}\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "moreover"], ["proof (state)\nthis:\n  set_of (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh)))) =\n  set_of l \\<union> set_of (MKT rn rl rr rh) -\n  {rightmost_item (MKT rn rl rr rh)} \\<union>\n  {n}\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "have \"n \\<notin> {rightmost_item ?r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<notin> {rightmost_item (MKT rn rl rr rh)}", "by (metis MKT(2) MKT(3) avl_dist2 ritem_in_rset singletonE tree.simps(3))"], ["proof (state)\nthis:\n  n \\<notin> {rightmost_item (MKT rn rl rr rh)}\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> set_of\n                                   (snd (delete_max (MKT v va vb vc))) =\n                                  set_of (MKT v va vb vc) -\n                                  {rightmost_item (MKT v va vb vc)};\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h))) =\n                         set_of (MKT n l (MKT v va vb vc) h) -\n                         {rightmost_item (MKT n l (MKT v va vb vc) h)}\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "ultimately"], ["proof (chain)\npicking this:\n  set_of (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh)))) =\n  set_of l \\<union> set_of (MKT rn rl rr rh) -\n  {rightmost_item (MKT rn rl rr rh)} \\<union>\n  {n}\n  n \\<notin> {rightmost_item (MKT rn rl rr rh)}", "show ?case"], ["proof (prove)\nusing this:\n  set_of (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh)))) =\n  set_of l \\<union> set_of (MKT rn rl rr rh) -\n  {rightmost_item (MKT rn rl rr rh)} \\<union>\n  {n}\n  n \\<notin> {rightmost_item (MKT rn rl rr rh)}\n\ngoal (1 subgoal):\n 1. set_of (snd (delete_max (MKT n l (MKT rn rl rr rh) h))) =\n    set_of (MKT n l (MKT rn rl rr rh) h) -\n    {rightmost_item (MKT n l (MKT rn rl rr rh) h)}", "by (auto simp add:insert_Diff_if split:prod.splits simp del: mkt_bal_l.simps)"], ["proof (state)\nthis:\n  set_of (snd (delete_max (MKT n l (MKT rn rl rr rh) h))) =\n  set_of (MKT n l (MKT rn rl rr rh) h) -\n  {rightmost_item (MKT n l (MKT rn rl rr rh) h)}\n\ngoal (2 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> set_of (snd (delete_max (MKT n l ET h))) =\n                         set_of (MKT n l ET h) -\n                         {rightmost_item (MKT n l ET h)}\n 2. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> set_of (snd (delete_max ET)) =\n                      set_of ET - {rightmost_item ET}", "qed auto"], ["", "lemma fst_delete_max_eq_ritem:\n  \"t\\<noteq>ET \\<Longrightarrow> fst(delete_max t) = rightmost_item t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> ET \\<Longrightarrow> fst (delete_max t) = rightmost_item t", "by (induct t rule:rightmost_item.induct) (auto split:prod.splits)"], ["", "lemma set_of_delete_root:\n  assumes \"t = MKT n l r h\" and \"avl t\" and \"is_ord t\"\n  shows \"set_of (delete_root t) = (set_of t) - {n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of (delete_root t) = set_of t - {n}", "using assms"], ["proof (prove)\nusing this:\n  t = MKT n l r h\n  avl t\n  is_ord t\n\ngoal (1 subgoal):\n 1. set_of (delete_root t) = set_of t - {n}", "proof(cases t rule:delete_root_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "case(MKT_MKT n ln ll lr lh rn rl rr rh h)"], ["proof (state)\nthis:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "let ?t' = \"mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "from assms MKT_MKT"], ["proof (chain)\npicking this:\n  t = MKT n l r h\n  avl t\n  is_ord t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"avl l\" and \"avl r\" and \"is_ord l\" and \"l\\<noteq>ET\""], ["proof (prove)\nusing this:\n  t = MKT n l r h\n  avl t\n  is_ord t\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. (avl l &&& avl r) &&& is_ord l &&& l \\<noteq> ET", "by auto"], ["proof (state)\nthis:\n  avl l\n  avl r\n  is_ord l\n  l \\<noteq> ET\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "moreover"], ["proof (state)\nthis:\n  avl l\n  avl r\n  is_ord l\n  l \\<noteq> ET\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "from MKT_MKT assms"], ["proof (chain)\npicking this:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  t = MKT n l r h\n  avl t\n  is_ord t", "have \"avl (snd(delete_max l))\""], ["proof (prove)\nusing this:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  t = MKT n l r h\n  avl t\n  is_ord t\n\ngoal (1 subgoal):\n 1. avl (snd (delete_max l))", "by (auto simp add: avl_delete_max)"], ["proof (state)\nthis:\n  avl (snd (delete_max l))\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "ultimately"], ["proof (chain)\npicking this:\n  avl l\n  avl r\n  is_ord l\n  l \\<noteq> ET\n  avl (snd (delete_max l))", "have \"set_of ?t' = (set_of l) \\<union> (set_of r)\""], ["proof (prove)\nusing this:\n  avl l\n  avl r\n  is_ord l\n  l \\<noteq> ET\n  avl (snd (delete_max l))\n\ngoal (1 subgoal):\n 1. set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r) =\n    set_of l \\<union> set_of r", "by (fastforce simp add: Set.insert_Diff ritem_in_rset fst_delete_max_eq_ritem  \n       set_of_delete_max set_of_mkt_bal_r  simp del: mkt_bal_r.simps)"], ["proof (state)\nthis:\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r) =\n  set_of l \\<union> set_of r\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "moreover"], ["proof (state)\nthis:\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r) =\n  set_of l \\<union> set_of r\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "from MKT_MKT assms(1)"], ["proof (chain)\npicking this:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  t = MKT n l r h", "have \"set_of (delete_root t) = set_of ?t'\""], ["proof (prove)\nusing this:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  t = MKT n l r h\n\ngoal (1 subgoal):\n 1. set_of (delete_root t) =\n    set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r)", "by (simp split:prod.split del:mkt_bal_r.simps)"], ["proof (state)\nthis:\n  set_of (delete_root t) =\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r)\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "moreover"], ["proof (state)\nthis:\n  set_of (delete_root t) =\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r)\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "from MKT_MKT assms"], ["proof (chain)\npicking this:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  t = MKT n l r h\n  avl t\n  is_ord t", "have \"(set_of t) - {n} = set_of l \\<union> set_of r\""], ["proof (prove)\nusing this:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  t = MKT n l r h\n  avl t\n  is_ord t\n\ngoal (1 subgoal):\n 1. set_of t - {n} = set_of l \\<union> set_of r", "by (metis Diff_insert_absorb UnE avl_dist2 tree.set(2) tree.inject)"], ["proof (state)\nthis:\n  set_of t - {n} = set_of l \\<union> set_of r\n\ngoal (4 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<And>na v va vb vc vd ve vf vg ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) (MKT vd ve vf vg) ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 4. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "ultimately"], ["proof (chain)\npicking this:\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r) =\n  set_of l \\<union> set_of r\n  set_of (delete_root t) =\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r)\n  set_of t - {n} = set_of l \\<union> set_of r", "show ?thesis"], ["proof (prove)\nusing this:\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r) =\n  set_of l \\<union> set_of r\n  set_of (delete_root t) =\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r)\n  set_of t - {n} = set_of l \\<union> set_of r\n\ngoal (1 subgoal):\n 1. set_of (delete_root t) = set_of t - {n}", "using MKT_MKT assms(1)"], ["proof (prove)\nusing this:\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r) =\n  set_of l \\<union> set_of r\n  set_of (delete_root t) =\n  set_of (mkt_bal_r (fst (delete_max l)) (snd (delete_max l)) r)\n  set_of t - {n} = set_of l \\<union> set_of r\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  t = MKT n l r h\n\ngoal (1 subgoal):\n 1. set_of (delete_root t) = set_of t - {n}", "by (simp del: delete_root.simps)"], ["proof (state)\nthis:\n  set_of (delete_root t) = set_of t - {n}\n\ngoal (3 subgoals):\n 1. \\<And>na ra ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na ET ra ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 2. \\<And>na v va vb vc ha.\n       \\<lbrakk>t = MKT n l r h; avl t; is_ord t;\n        t = MKT na (MKT v va vb vc) ET ha\\<rbrakk>\n       \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}\n 3. \\<lbrakk>t = MKT n l r h; avl t; is_ord t; t = ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete_root t) = set_of t - {n}", "qed auto"], ["", "text\\<open>Correctness of @{const delete}:\\<close>"], ["", "theorem set_of_delete:\n  \"\\<lbrakk> avl t; is_ord t \\<rbrakk> \\<Longrightarrow> set_of (delete x t) = (set_of t) - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x t) = set_of t - {x}", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x ET) = set_of ET - {x}\n 2. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>\\<lbrakk>avl t1; is_ord t1\\<rbrakk>\n                \\<Longrightarrow> set_of (delete x t1) = set_of t1 - {x};\n        \\<lbrakk>avl t2; is_ord t2\\<rbrakk>\n        \\<Longrightarrow> set_of (delete x t2) = set_of t2 - {x};\n        avl (MKT x1 t1 t2 x4); is_ord (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> set_of (delete x (MKT x1 t1 t2 x4)) =\n                         set_of (MKT x1 t1 t2 x4) - {x}", "case (MKT n l r h)"], ["proof (state)\nthis:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x ET) = set_of ET - {x}\n 2. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>\\<lbrakk>avl t1; is_ord t1\\<rbrakk>\n                \\<Longrightarrow> set_of (delete x t1) = set_of t1 - {x};\n        \\<lbrakk>avl t2; is_ord t2\\<rbrakk>\n        \\<Longrightarrow> set_of (delete x t2) = set_of t2 - {x};\n        avl (MKT x1 t1 t2 x4); is_ord (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> set_of (delete x (MKT x1 t1 t2 x4)) =\n                         set_of (MKT x1 t1 t2 x4) - {x}", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n\ngoal (1 subgoal):\n 1. set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}", "proof(cases \"x = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "case True"], ["proof (state)\nthis:\n  x = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "with MKT set_of_delete_root[of \"MKT n l r h\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  \\<lbrakk>MKT n l r h = MKT ?n ?l ?r ?h; avl (MKT n l r h);\n   is_ord (MKT n l r h)\\<rbrakk>\n  \\<Longrightarrow> set_of (delete_root (MKT n l r h)) =\n                    set_of (MKT n l r h) - {?n}\n  x = n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  \\<lbrakk>MKT n l r h = MKT ?n ?l ?r ?h; avl (MKT n l r h);\n   is_ord (MKT n l r h)\\<rbrakk>\n  \\<Longrightarrow> set_of (delete_root (MKT n l r h)) =\n                    set_of (MKT n l r h) - {?n}\n  x = n\n\ngoal (1 subgoal):\n 1. set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}", "by simp"], ["proof (state)\nthis:\n  set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "case False"], ["proof (state)\nthis:\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "with MKT"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x \\<noteq> n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}", "proof(cases \"x<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "case True"], ["proof (state)\nthis:\n  x < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "with True MKT"], ["proof (chain)\npicking this:\n  x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x < n\n\ngoal (1 subgoal):\n 1. set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}", "by (force simp: avl_delete set_of_mkt_bal_r[of \"(delete x l)\" r n] simp del:mkt_bal_r.simps)"], ["proof (state)\nthis:\n  set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "case False"], ["proof (state)\nthis:\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> set_of (delete x l) = set_of l - {x};\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> set_of (delete x r) = set_of r - {x};\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x (MKT n l r h)) =\n                      set_of (MKT n l r h) - {x}", "with False MKT \\<open>x\\<noteq>n\\<close>"], ["proof (chain)\npicking this:\n  \\<not> x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x \\<noteq> n\n  \\<not> x < n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x l) = set_of l - {x}\n  \\<lbrakk>avl r; is_ord r\\<rbrakk>\n  \\<Longrightarrow> set_of (delete x r) = set_of r - {x}\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x \\<noteq> n\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}", "by (force simp: avl_delete set_of_mkt_bal_l[of l \"(delete x r)\" n] simp del:mkt_bal_l.simps)"], ["proof (state)\nthis:\n  set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_of (delete x (MKT n l r h)) = set_of (MKT n l r h) - {x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> set_of (delete x ET) = set_of ET - {x}", "qed simp"], ["", "subsubsection \\<open>Correctness of lookup\\<close>"], ["", "theorem is_in_correct: \"is_ord t \\<Longrightarrow> is_in k t = (k : set_of t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ord t \\<Longrightarrow> is_in k t = (k \\<in> set_of t)", "by (induct t) auto"], ["", "subsubsection \\<open>Insertion maintains order\\<close>"], ["", "lemma is_ord_mkt_bal_l:\n  \"is_ord(MKT n l r h) \\<Longrightarrow> is_ord (mkt_bal_l n l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ord (MKT n l r h) \\<Longrightarrow> is_ord (mkt_bal_l n l r)", "by (cases l) (auto simp: mkt_def split:tree.splits intro: order_less_trans)"], ["", "lemma is_ord_mkt_bal_r: \"is_ord(MKT n l r h) \\<Longrightarrow> is_ord (mkt_bal_r n l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ord (MKT n l r h) \\<Longrightarrow> is_ord (mkt_bal_r n l r)", "by (cases r) (auto simp: mkt_def split:tree.splits intro: order_less_trans)"], ["", "text\\<open>If the order is linear, @{const insert} maintains the order:\\<close>"], ["", "theorem is_ord_insert:\n  \"\\<lbrakk> avl t; is_ord t \\<rbrakk> \\<Longrightarrow> is_ord(insert (x::'a::linorder) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t\\<rbrakk>\n    \\<Longrightarrow> is_ord (AVL.insert x t)", "by (induct t) (simp_all add:is_ord_mkt_bal_l is_ord_mkt_bal_r avl_insert set_of_insert\n                linorder_not_less order_neq_le_trans del:mkt_bal_l.simps mkt_bal_r.simps)"], ["", "subsubsection \\<open>Deletion maintains order\\<close>"], ["", "lemma is_ord_delete_max:\n  \"\\<lbrakk> avl t; is_ord t; t\\<noteq>ET \\<rbrakk> \\<Longrightarrow> is_ord(snd(delete_max t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max t))", "proof(induct t rule:delete_max_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "case(MKT n l rn rl rr rh h)"], ["proof (state)\nthis:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (snd (delete_max (MKT rn rl rr rh)))\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "let ?r = \"MKT rn rl rr rh\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "let ?r' = \"snd(delete_max ?r)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "from MKT"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (snd (delete_max (MKT rn rl rr rh)))\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET", "have \"\\<forall>h. is_ord(MKT n l ?r' h)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (snd (delete_max (MKT rn rl rr rh)))\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (1 subgoal):\n 1. \\<forall>h. is_ord (MKT n l (snd (delete_max (MKT rn rl rr rh))) h)", "by (auto simp: set_of_delete_max)"], ["proof (state)\nthis:\n  \\<forall>h. is_ord (MKT n l (snd (delete_max (MKT rn rl rr rh))) h)\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "moreover"], ["proof (state)\nthis:\n  \\<forall>h. is_ord (MKT n l (snd (delete_max (MKT rn rl rr rh))) h)\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "from MKT"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (snd (delete_max (MKT rn rl rr rh)))\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET", "have \"avl(?r')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (snd (delete_max (MKT rn rl rr rh)))\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n\ngoal (1 subgoal):\n 1. avl (snd (delete_max (MKT rn rl rr rh)))", "by (auto simp: avl_delete_max)"], ["proof (state)\nthis:\n  avl (snd (delete_max (MKT rn rl rr rh)))\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "moreover"], ["proof (state)\nthis:\n  avl (snd (delete_max (MKT rn rl rr rh)))\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "note MKT is_ord_mkt_bal_l[of n l ?r']"], ["proof (state)\nthis:\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (snd (delete_max (MKT rn rl rr rh)))\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (snd (delete_max (MKT rn rl rr rh))) ?h) \\<Longrightarrow>\n  is_ord (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh))))\n\ngoal (3 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<And>n l v va vb vc h.\n       \\<lbrakk>\\<lbrakk>avl (MKT v va vb vc); is_ord (MKT v va vb vc);\n                 MKT v va vb vc \\<noteq> ET\\<rbrakk>\n                \\<Longrightarrow> is_ord\n                                   (snd (delete_max (MKT v va vb vc)));\n        avl (MKT n l (MKT v va vb vc) h);\n        is_ord (MKT n l (MKT v va vb vc) h);\n        MKT n l (MKT v va vb vc) h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord\n                          (snd (delete_max (MKT n l (MKT v va vb vc) h)))\n 3. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>h. is_ord (MKT n l (snd (delete_max (MKT rn rl rr rh))) h)\n  avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (snd (delete_max (MKT rn rl rr rh)))\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (snd (delete_max (MKT rn rl rr rh))) ?h) \\<Longrightarrow>\n  is_ord (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh))))", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>h. is_ord (MKT n l (snd (delete_max (MKT rn rl rr rh))) h)\n  avl (snd (delete_max (MKT rn rl rr rh)))\n  \\<lbrakk>avl (MKT rn rl rr rh); is_ord (MKT rn rl rr rh);\n   MKT rn rl rr rh \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (snd (delete_max (MKT rn rl rr rh)))\n  avl (MKT n l (MKT rn rl rr rh) h)\n  is_ord (MKT n l (MKT rn rl rr rh) h)\n  MKT n l (MKT rn rl rr rh) h \\<noteq> ET\n  is_ord (MKT n l (snd (delete_max (MKT rn rl rr rh))) ?h) \\<Longrightarrow>\n  is_ord (mkt_bal_l n l (snd (delete_max (MKT rn rl rr rh))))\n\ngoal (1 subgoal):\n 1. is_ord (snd (delete_max (MKT n l (MKT rn rl rr rh) h)))", "by (auto split:prod.splits simp del:is_ord.simps mkt_bal_l.simps)"], ["proof (state)\nthis:\n  is_ord (snd (delete_max (MKT n l (MKT rn rl rr rh) h)))\n\ngoal (2 subgoals):\n 1. \\<And>n l h.\n       \\<lbrakk>avl (MKT n l ET h); is_ord (MKT n l ET h);\n        MKT n l ET h \\<noteq> ET\\<rbrakk>\n       \\<Longrightarrow> is_ord (snd (delete_max (MKT n l ET h)))\n 2. \\<lbrakk>avl ET; is_ord ET; ET \\<noteq> ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (snd (delete_max ET))", "qed auto"], ["", "lemma is_ord_delete_root:\n  assumes \"avl t\" and \"is_ord t\" and \"t \\<noteq> ET\"\n  shows \"is_ord (delete_root t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ord (delete_root t)", "using assms"], ["proof (prove)\nusing this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n\ngoal (1 subgoal):\n 1. is_ord (delete_root t)", "proof(cases t rule:delete_root_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "case(MKT_MKT n ln ll lr lh rn rl rr rh h)"], ["proof (state)\nthis:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "let ?l = \"MKT ln ll lr lh\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "let ?r = \"MKT rn rl rr rh\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "let ?l' = \"snd (delete_max ?l)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "let ?n' = \"fst (delete_max ?l)\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "from assms MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"\\<forall>h. is_ord(MKT ?n' ?l' ?r h)\""], ["proof (prove)\nusing this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. \\<forall>h.\n       is_ord\n        (MKT (fst (delete_max (MKT ln ll lr lh)))\n          (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh) h)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n     t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>h.\n                         is_ord\n                          (MKT (fst (delete_max (MKT ln ll lr lh)))\n                            (snd (delete_max (MKT ln ll lr lh)))\n                            (MKT rn rl rr rh) h)", "from assms MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"is_ord ?l'\""], ["proof (prove)\nusing this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. is_ord (snd (delete_max (MKT ln ll lr lh)))", "by (auto simp add: is_ord_delete_max)"], ["proof (state)\nthis:\n  is_ord (snd (delete_max (MKT ln ll lr lh)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n     t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>h.\n                         is_ord\n                          (MKT (fst (delete_max (MKT ln ll lr lh)))\n                            (snd (delete_max (MKT ln ll lr lh)))\n                            (MKT rn rl rr rh) h)", "moreover"], ["proof (state)\nthis:\n  is_ord (snd (delete_max (MKT ln ll lr lh)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n     t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>h.\n                         is_ord\n                          (MKT (fst (delete_max (MKT ln ll lr lh)))\n                            (snd (delete_max (MKT ln ll lr lh)))\n                            (MKT rn rl rr rh) h)", "from assms MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"is_ord ?r\""], ["proof (prove)\nusing this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. is_ord (MKT rn rl rr rh)", "by auto"], ["proof (state)\nthis:\n  is_ord (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n     t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>h.\n                         is_ord\n                          (MKT (fst (delete_max (MKT ln ll lr lh)))\n                            (snd (delete_max (MKT ln ll lr lh)))\n                            (MKT rn rl rr rh) h)", "moreover"], ["proof (state)\nthis:\n  is_ord (MKT rn rl rr rh)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n     t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>h.\n                         is_ord\n                          (MKT (fst (delete_max (MKT ln ll lr lh)))\n                            (snd (delete_max (MKT ln ll lr lh)))\n                            (MKT rn rl rr rh) h)", "from assms MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"\\<forall>x. x \\<in> set_of ?r \\<longrightarrow> ?n' < x\""], ["proof (prove)\nusing this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n       fst (delete_max (MKT ln ll lr lh)) < x", "by (metis fst_delete_max_eq_ritem is_ord.simps(2) order_less_trans ritem_in_rset \n          tree.simps(3))"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n     fst (delete_max (MKT ln ll lr lh)) < x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n     t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>h.\n                         is_ord\n                          (MKT (fst (delete_max (MKT ln ll lr lh)))\n                            (snd (delete_max (MKT ln ll lr lh)))\n                            (MKT rn rl rr rh) h)", "moreover"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n     fst (delete_max (MKT ln ll lr lh)) < x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n     t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>h.\n                         is_ord\n                          (MKT (fst (delete_max (MKT ln ll lr lh)))\n                            (snd (delete_max (MKT ln ll lr lh)))\n                            (MKT rn rl rr rh) h)", "from assms MKT_MKT ritem_greatest_in_rset"], ["proof (chain)\npicking this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  \\<lbrakk>?r \\<noteq> ET; is_ord ?r\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of ?r \\<longrightarrow>\n                       x \\<noteq> rightmost_item ?r \\<longrightarrow>\n                       x < rightmost_item ?r", "have \"\\<forall>x. x \\<in> set_of ?l' \\<longrightarrow> x < ?n'\""], ["proof (prove)\nusing this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  \\<lbrakk>?r \\<noteq> ET; is_ord ?r\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x.\n                       x \\<in> set_of ?r \\<longrightarrow>\n                       x \\<noteq> rightmost_item ?r \\<longrightarrow>\n                       x < rightmost_item ?r\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set_of (snd (delete_max (MKT ln ll lr lh))) \\<longrightarrow>\n       x < fst (delete_max (MKT ln ll lr lh))", "by (metis Diff_iff avl.simps(2) fst_delete_max_eq_ritem is_ord.simps(2) \n          set_of_delete_max singleton_iff tree.simps(3))"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set_of (snd (delete_max (MKT ln ll lr lh))) \\<longrightarrow>\n     x < fst (delete_max (MKT ln ll lr lh))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n     t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\\<rbrakk>\n    \\<Longrightarrow> \\<forall>h.\n                         is_ord\n                          (MKT (fst (delete_max (MKT ln ll lr lh)))\n                            (snd (delete_max (MKT ln ll lr lh)))\n                            (MKT rn rl rr rh) h)", "ultimately"], ["proof (chain)\npicking this:\n  is_ord (snd (delete_max (MKT ln ll lr lh)))\n  is_ord (MKT rn rl rr rh)\n  \\<forall>x.\n     x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n     fst (delete_max (MKT ln ll lr lh)) < x\n  \\<forall>x.\n     x \\<in> set_of (snd (delete_max (MKT ln ll lr lh))) \\<longrightarrow>\n     x < fst (delete_max (MKT ln ll lr lh))", "show ?thesis"], ["proof (prove)\nusing this:\n  is_ord (snd (delete_max (MKT ln ll lr lh)))\n  is_ord (MKT rn rl rr rh)\n  \\<forall>x.\n     x \\<in> set_of (MKT rn rl rr rh) \\<longrightarrow>\n     fst (delete_max (MKT ln ll lr lh)) < x\n  \\<forall>x.\n     x \\<in> set_of (snd (delete_max (MKT ln ll lr lh))) \\<longrightarrow>\n     x < fst (delete_max (MKT ln ll lr lh))\n\ngoal (1 subgoal):\n 1. \\<forall>h.\n       is_ord\n        (MKT (fst (delete_max (MKT ln ll lr lh)))\n          (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh) h)", "by auto"], ["proof (state)\nthis:\n  \\<forall>h.\n     is_ord\n      (MKT (fst (delete_max (MKT ln ll lr lh)))\n        (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh) h)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>h.\n     is_ord\n      (MKT (fst (delete_max (MKT ln ll lr lh)))\n        (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh) h)\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "moreover"], ["proof (state)\nthis:\n  \\<forall>h.\n     is_ord\n      (MKT (fst (delete_max (MKT ln ll lr lh)))\n        (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh) h)\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "from assms MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"avl ?r\""], ["proof (prove)\nusing this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. avl (MKT rn rl rr rh)", "by simp"], ["proof (state)\nthis:\n  avl (MKT rn rl rr rh)\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "moreover"], ["proof (state)\nthis:\n  avl (MKT rn rl rr rh)\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "from assms MKT_MKT"], ["proof (chain)\npicking this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h", "have \"avl ?l'\""], ["proof (prove)\nusing this:\n  avl t\n  is_ord t\n  t \\<noteq> ET\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n\ngoal (1 subgoal):\n 1. avl (snd (delete_max (MKT ln ll lr lh)))", "by (simp add: avl_delete_max)"], ["proof (state)\nthis:\n  avl (snd (delete_max (MKT ln ll lr lh)))\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "moreover"], ["proof (state)\nthis:\n  avl (snd (delete_max (MKT ln ll lr lh)))\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "note MKT_MKT is_ord_mkt_bal_r[of  ?n' ?l' ?r]"], ["proof (state)\nthis:\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  is_ord\n   (MKT (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)\n     ?h) \\<Longrightarrow>\n  is_ord\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh))\n\ngoal (4 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<And>n v va vb vc vd ve vf vg h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) (MKT vd ve vf vg) h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 4. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>h.\n     is_ord\n      (MKT (fst (delete_max (MKT ln ll lr lh)))\n        (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh) h)\n  avl (MKT rn rl rr rh)\n  avl (snd (delete_max (MKT ln ll lr lh)))\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  is_ord\n   (MKT (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)\n     ?h) \\<Longrightarrow>\n  is_ord\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>h.\n     is_ord\n      (MKT (fst (delete_max (MKT ln ll lr lh)))\n        (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh) h)\n  avl (MKT rn rl rr rh)\n  avl (snd (delete_max (MKT ln ll lr lh)))\n  t = MKT n (MKT ln ll lr lh) (MKT rn rl rr rh) h\n  is_ord\n   (MKT (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh)\n     ?h) \\<Longrightarrow>\n  is_ord\n   (mkt_bal_r (fst (delete_max (MKT ln ll lr lh)))\n     (snd (delete_max (MKT ln ll lr lh))) (MKT rn rl rr rh))\n\ngoal (1 subgoal):\n 1. is_ord (delete_root t)", "by (auto simp del:mkt_bal_r.simps is_ord.simps split:prod.splits)"], ["proof (state)\nthis:\n  is_ord (delete_root t)\n\ngoal (3 subgoals):\n 1. \\<And>n r h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = MKT n ET r h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 2. \\<And>n v va vb vc h.\n       \\<lbrakk>avl t; is_ord t; t \\<noteq> ET;\n        t = MKT n (MKT v va vb vc) ET h\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete_root t)\n 3. \\<lbrakk>avl t; is_ord t; t \\<noteq> ET; t = ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete_root t)", "qed simp_all"], ["", "text\\<open>If the order is linear, @{const delete} maintains the order:\\<close>"], ["", "theorem is_ord_delete:\n  \"\\<lbrakk> avl t; is_ord t \\<rbrakk> \\<Longrightarrow> is_ord (delete x t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>avl t; is_ord t\\<rbrakk> \\<Longrightarrow> is_ord (delete x t)", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>avl ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x ET)\n 2. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>\\<lbrakk>avl t1; is_ord t1\\<rbrakk>\n                \\<Longrightarrow> is_ord (delete x t1);\n        \\<lbrakk>avl t2; is_ord t2\\<rbrakk>\n        \\<Longrightarrow> is_ord (delete x t2);\n        avl (MKT x1 t1 t2 x4); is_ord (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete x (MKT x1 t1 t2 x4))", "case (MKT n l r h)"], ["proof (state)\nthis:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>avl ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x ET)\n 2. \\<And>x1 t1 t2 x4.\n       \\<lbrakk>\\<lbrakk>avl t1; is_ord t1\\<rbrakk>\n                \\<Longrightarrow> is_ord (delete x t1);\n        \\<lbrakk>avl t2; is_ord t2\\<rbrakk>\n        \\<Longrightarrow> is_ord (delete x t2);\n        avl (MKT x1 t1 t2 x4); is_ord (MKT x1 t1 t2 x4)\\<rbrakk>\n       \\<Longrightarrow> is_ord (delete x (MKT x1 t1 t2 x4))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n\ngoal (1 subgoal):\n 1. is_ord (delete x (MKT n l r h))", "proof(cases \"x = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "case True"], ["proof (state)\nthis:\n  x = n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x = n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "with MKT is_ord_delete_root[of \"MKT n l r h\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  \\<lbrakk>avl (MKT n l r h); is_ord (MKT n l r h);\n   MKT n l r h \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (delete_root (MKT n l r h))\n  x = n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  \\<lbrakk>avl (MKT n l r h); is_ord (MKT n l r h);\n   MKT n l r h \\<noteq> ET\\<rbrakk>\n  \\<Longrightarrow> is_ord (delete_root (MKT n l r h))\n  x = n\n\ngoal (1 subgoal):\n 1. is_ord (delete x (MKT n l r h))", "by simp"], ["proof (state)\nthis:\n  is_ord (delete x (MKT n l r h))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "with MKT"], ["proof (chain)\npicking this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x \\<noteq> n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x \\<noteq> n\n\ngoal (1 subgoal):\n 1. is_ord (delete x (MKT n l r h))", "proof(cases \"x<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "case True"], ["proof (state)\nthis:\n  x < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "with True MKT"], ["proof (chain)\npicking this:\n  x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x < n", "have \"\\<forall>h. is_ord (MKT n (delete x l) r h)\""], ["proof (prove)\nusing this:\n  x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  x < n\n\ngoal (1 subgoal):\n 1. \\<forall>h. is_ord (MKT n (delete x l) r h)", "by (auto simp:set_of_delete)"], ["proof (state)\nthis:\n  \\<forall>h. is_ord (MKT n (delete x l) r h)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n; x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))\n 2. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "with True MKT is_ord_mkt_bal_r[of n \"(delete x l)\" r]"], ["proof (chain)\npicking this:\n  x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  is_ord (MKT n (delete x l) r ?h) \\<Longrightarrow>\n  is_ord (mkt_bal_r n (delete x l) r)\n  \\<forall>h. is_ord (MKT n (delete x l) r h)", "show ?thesis"], ["proof (prove)\nusing this:\n  x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  is_ord (MKT n (delete x l) r ?h) \\<Longrightarrow>\n  is_ord (mkt_bal_r n (delete x l) r)\n  \\<forall>h. is_ord (MKT n (delete x l) r h)\n\ngoal (1 subgoal):\n 1. is_ord (delete x (MKT n l r h))", "by (auto simp add: avl_delete)"], ["proof (state)\nthis:\n  is_ord (delete x (MKT n l r h))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "case False"], ["proof (state)\nthis:\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "with False MKT"], ["proof (chain)\npicking this:\n  \\<not> x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  \\<not> x < n", "have \"\\<forall>h. is_ord (MKT n l (delete x r) h)\""], ["proof (prove)\nusing this:\n  \\<not> x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  \\<not> x < n\n\ngoal (1 subgoal):\n 1. \\<forall>h. is_ord (MKT n l (delete x r) h)", "by (auto simp:set_of_delete)"], ["proof (state)\nthis:\n  \\<forall>h. is_ord (MKT n l (delete x r) h)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>avl l; is_ord l\\<rbrakk>\n             \\<Longrightarrow> is_ord (delete x l);\n     \\<lbrakk>avl r; is_ord r\\<rbrakk>\n     \\<Longrightarrow> is_ord (delete x r);\n     avl (MKT n l r h); is_ord (MKT n l r h); x \\<noteq> n;\n     \\<not> x < n\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x (MKT n l r h))", "with False MKT is_ord_mkt_bal_l[of n l \"(delete x r)\"] \\<open>x\\<noteq>n\\<close>"], ["proof (chain)\npicking this:\n  \\<not> x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  is_ord (MKT n l (delete x r) ?h) \\<Longrightarrow>\n  is_ord (mkt_bal_l n l (delete x r))\n  x \\<noteq> n\n  \\<forall>h. is_ord (MKT n l (delete x r) h)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> x < n\n  \\<lbrakk>avl l; is_ord l\\<rbrakk> \\<Longrightarrow> is_ord (delete x l)\n  \\<lbrakk>avl r; is_ord r\\<rbrakk> \\<Longrightarrow> is_ord (delete x r)\n  avl (MKT n l r h)\n  is_ord (MKT n l r h)\n  is_ord (MKT n l (delete x r) ?h) \\<Longrightarrow>\n  is_ord (mkt_bal_l n l (delete x r))\n  x \\<noteq> n\n  \\<forall>h. is_ord (MKT n l (delete x r) h)\n\ngoal (1 subgoal):\n 1. is_ord (delete x (MKT n l r h))", "by (simp add: avl_delete)"], ["proof (state)\nthis:\n  is_ord (delete x (MKT n l r h))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_ord (delete x (MKT n l r h))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_ord (delete x (MKT n l r h))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>avl ET; is_ord ET\\<rbrakk>\n    \\<Longrightarrow> is_ord (delete x ET)", "qed simp"], ["", "end"]]}