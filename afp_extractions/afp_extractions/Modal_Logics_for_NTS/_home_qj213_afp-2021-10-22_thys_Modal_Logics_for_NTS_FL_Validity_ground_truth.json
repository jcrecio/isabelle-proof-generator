{"file_name": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS/FL_Validity.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS", "problem_names": ["lemma alpha_Tree_relI [simp]:\n  assumes \"x =\\<^sub>\\<alpha> y\" shows \"(x,y) \\<in> alpha_Tree_rel\"", "lemma alpha_Tree_relE:\n  assumes \"(x,y) \\<in> alpha_Tree_rel\" and \"x =\\<^sub>\\<alpha> y \\<Longrightarrow> P\"\n  shows P", "lemma wf_alpha_Tree_rel_hull_rel_Tree_wf:\n  \"wf (alpha_Tree_rel O hull_rel O Tree_wf)\"", "lemma alpha_Tree_rel_relcomp_trivialI [simp]:\n  assumes \"(x, y) \\<in> R\"\n  shows \"(x, y) \\<in> alpha_Tree_rel O R\"", "lemma alpha_Tree_rel_relcompI [simp]:\n  assumes \"x =\\<^sub>\\<alpha> x'\" and \"(x', y) \\<in> R\"\n  shows \"(x, y) \\<in> alpha_Tree_rel O R\"", "lemma FL_valid_Tree_eqvt': \"FL_valid_Tree P t \\<longleftrightarrow> FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t)\"", "lemma FL_valid_Tree_eqvt [eqvt]:\n    assumes \"FL_valid_Tree P t\" shows \"FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t)\"", "lemma alpha_Tree_FL_valid_Tree:\n    assumes \"t1 =\\<^sub>\\<alpha> t2\"\n    shows \"FL_valid_Tree P t1 \\<longleftrightarrow> FL_valid_Tree P t2\"", "lemma FL_valid_Tree\\<^sub>\\<alpha>_eqvt [eqvt]:\n    assumes \"FL_valid_Tree\\<^sub>\\<alpha> P t\" shows \"FL_valid_Tree\\<^sub>\\<alpha> (p \\<bullet> P) (p \\<bullet> t)\"", "lemma FL_valid_Tree\\<^sub>\\<alpha>_Conj\\<^sub>\\<alpha> [simp]: \"FL_valid_Tree\\<^sub>\\<alpha> P (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) \\<longleftrightarrow> (\\<forall>t\\<^sub>\\<alpha>\\<in>set_bset tset\\<^sub>\\<alpha>. FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>)\"", "lemma FL_valid_Tree\\<^sub>\\<alpha>_Not\\<^sub>\\<alpha> [simp]: \"FL_valid_Tree\\<^sub>\\<alpha> P (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) \\<longleftrightarrow> \\<not> FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>\"", "lemma FL_valid_Tree\\<^sub>\\<alpha>_Pred\\<^sub>\\<alpha> [simp]: \"FL_valid_Tree\\<^sub>\\<alpha> P (Pred\\<^sub>\\<alpha> f \\<phi>) \\<longleftrightarrow> \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\"", "lemma FL_valid_Tree\\<^sub>\\<alpha>_Act\\<^sub>\\<alpha> [simp]: \"FL_valid_Tree\\<^sub>\\<alpha> P (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) \\<longleftrightarrow> (\\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'. Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> = Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>')\"", "lemma FL_valid_eqvt [eqvt]:\n    assumes \"P \\<Turnstile> x\" shows \"(p \\<bullet> P) \\<Turnstile> (p \\<bullet> x)\"", "lemma FL_valid_Conj [simp]:\n    assumes \"finite (supp xset)\"\n    shows \"P \\<Turnstile> Conj xset \\<longleftrightarrow> (\\<forall>x\\<in>set_bset xset. P \\<Turnstile> x)\"", "lemma FL_valid_Not [simp]: \"P \\<Turnstile> Not x \\<longleftrightarrow> \\<not> P \\<Turnstile> x\"", "lemma FL_valid_Pred [simp]: \"P \\<Turnstile> Pred f \\<phi> \\<longleftrightarrow> \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\"", "lemma FL_valid_Act: \"P \\<Turnstile> Act f \\<alpha> x \\<longleftrightarrow> (\\<exists>\\<alpha>' x' P'. Act f \\<alpha> x = Act f \\<alpha>' x' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> P' \\<Turnstile> x')\"", "lemma FL_valid_Act_strong:\n    assumes \"finite (supp X)\"\n    shows \"P \\<Turnstile> Act f \\<alpha> x \\<longleftrightarrow> (\\<exists>\\<alpha>' x' P'. Act f \\<alpha> x = Act f \\<alpha>' x' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X)\"", "lemma FL_valid_Act_fresh:\n    assumes \"bn \\<alpha> \\<sharp>* \\<langle>f\\<rangle>P\"\n    shows \"P \\<Turnstile> Act f \\<alpha> x \\<longleftrightarrow> (\\<exists>P'. \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and> P' \\<Turnstile> x)\""], "translations": [["", "lemma alpha_Tree_relI [simp]:\n  assumes \"x =\\<^sub>\\<alpha> y\" shows \"(x,y) \\<in> alpha_Tree_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> FL_Validity.alpha_Tree_rel", "using assms"], ["proof (prove)\nusing this:\n  x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> FL_Validity.alpha_Tree_rel", "unfolding alpha_Tree_rel_def"], ["proof (prove)\nusing this:\n  x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> {(x, y). x =\\<^sub>\\<alpha> y}", "by simp"], ["", "lemma alpha_Tree_relE:\n  assumes \"(x,y) \\<in> alpha_Tree_rel\" and \"x =\\<^sub>\\<alpha> y \\<Longrightarrow> P\"\n  shows P"], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  (x, y) \\<in> FL_Validity.alpha_Tree_rel\n  x =\\<^sub>\\<alpha> y \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "unfolding alpha_Tree_rel_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> {(x, y). x =\\<^sub>\\<alpha> y}\n  x =\\<^sub>\\<alpha> y \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "by simp"], ["", "lemma wf_alpha_Tree_rel_hull_rel_Tree_wf:\n  \"wf (alpha_Tree_rel O hull_rel O Tree_wf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf)", "proof (rule wf_relcomp_compatible)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf (hull_rel O Tree_wf)\n 2. (hull_rel O Tree_wf) O FL_Validity.alpha_Tree_rel\n    \\<subseteq> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "show \"wf (hull_rel O Tree_wf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (hull_rel O Tree_wf)", "by (metis Tree_wf_eqvt' wf_Tree_wf wf_hull_rel_relcomp)"], ["proof (state)\nthis:\n  wf (hull_rel O Tree_wf)\n\ngoal (1 subgoal):\n 1. (hull_rel O Tree_wf) O FL_Validity.alpha_Tree_rel\n    \\<subseteq> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (hull_rel O Tree_wf) O FL_Validity.alpha_Tree_rel\n    \\<subseteq> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "show \"(hull_rel O Tree_wf) O alpha_Tree_rel \\<subseteq> alpha_Tree_rel O (hull_rel O Tree_wf)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (hull_rel O Tree_wf) O FL_Validity.alpha_Tree_rel\n    \\<subseteq> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (hull_rel O Tree_wf) O\n               FL_Validity.alpha_Tree_rel \\<Longrightarrow>\n       x \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "fix x :: \"('e, 'f, 'g, 'h) Tree \\<times> ('e, 'f, 'g, 'h) Tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (hull_rel O Tree_wf) O\n               FL_Validity.alpha_Tree_rel \\<Longrightarrow>\n       x \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "assume \"x \\<in> (hull_rel O Tree_wf) O alpha_Tree_rel\""], ["proof (state)\nthis:\n  x \\<in> (hull_rel O Tree_wf) O FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (hull_rel O Tree_wf) O\n               FL_Validity.alpha_Tree_rel \\<Longrightarrow>\n       x \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "then"], ["proof (chain)\npicking this:\n  x \\<in> (hull_rel O Tree_wf) O FL_Validity.alpha_Tree_rel", "obtain x1 x2 x3 x4 where x: \"x = (x1,x4)\" and 1: \"(x1,x2) \\<in> hull_rel\" and 2: \"(x2,x3) \\<in> Tree_wf\" and 3: \"(x3,x4) \\<in> alpha_Tree_rel\""], ["proof (prove)\nusing this:\n  x \\<in> (hull_rel O Tree_wf) O FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x4 x2 x3.\n        \\<lbrakk>x = (x1, x4); (x1, x2) \\<in> hull_rel;\n         (x2, x3) \\<in> Tree_wf;\n         (x3, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = (x1, x4)\n  (x1, x2) \\<in> hull_rel\n  (x2, x3) \\<in> Tree_wf\n  (x3, x4) \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (hull_rel O Tree_wf) O\n               FL_Validity.alpha_Tree_rel \\<Longrightarrow>\n       x \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "from 2"], ["proof (chain)\npicking this:\n  (x2, x3) \\<in> Tree_wf", "have \"(x1,x4) \\<in> alpha_Tree_rel O hull_rel O Tree_wf\""], ["proof (prove)\nusing this:\n  (x2, x3) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "using 1 and 3"], ["proof (prove)\nusing this:\n  (x2, x3) \\<in> Tree_wf\n  (x1, x2) \\<in> hull_rel\n  (x3, x4) \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "proof (induct rule: Tree_wf.induct)\n        \\<comment> \\<open>@{const tConj}\\<close>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "fix t and tset :: \"('e,'f,'g,'h) Tree set['e]\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "assume *: \"t \\<in> set_bset tset\" and **: \"(x1,t) \\<in> hull_rel\" and ***: \"(tConj tset, x4) \\<in> alpha_Tree_rel\""], ["proof (state)\nthis:\n  t \\<in> set_bset tset\n  (x1, t) \\<in> hull_rel\n  (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from \"**\""], ["proof (chain)\npicking this:\n  (x1, t) \\<in> hull_rel", "obtain p where x1: \"x1 = p \\<bullet> t\""], ["proof (prove)\nusing this:\n  (x1, t) \\<in> hull_rel\n\ngoal (1 subgoal):\n 1. (\\<And>p. x1 = p \\<bullet> t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hull_rel.cases"], ["proof (prove)\nusing this:\n  (x1, t) \\<in> hull_rel\n  \\<lbrakk>(?a1.0, ?a2.0) \\<in> hull_rel;\n   \\<And>p x.\n      \\<lbrakk>?a1.0 = p \\<bullet> x; ?a2.0 = x\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>p. x1 = p \\<bullet> t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x1 = p \\<bullet> t\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from \"***\""], ["proof (chain)\npicking this:\n  (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel", "have \"tConj tset =\\<^sub>\\<alpha> x4\""], ["proof (prove)\nusing this:\n  (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. tConj tset =\\<^sub>\\<alpha> x4", "by (rule alpha_Tree_relE)"], ["proof (state)\nthis:\n  tConj tset =\\<^sub>\\<alpha> x4\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "then"], ["proof (chain)\npicking this:\n  tConj tset =\\<^sub>\\<alpha> x4", "obtain tset' where x4: \"x4 = tConj tset'\" and \"rel_bset (=\\<^sub>\\<alpha>) tset tset'\""], ["proof (prove)\nusing this:\n  tConj tset =\\<^sub>\\<alpha> x4\n\ngoal (1 subgoal):\n 1. (\\<And>tset'.\n        \\<lbrakk>x4 = tConj tset';\n         rel_bset (=\\<^sub>\\<alpha>) tset tset'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"x4\") simp_all"], ["proof (state)\nthis:\n  x4 = tConj tset'\n  rel_bset (=\\<^sub>\\<alpha>) tset tset'\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "with \"*\""], ["proof (chain)\npicking this:\n  t \\<in> set_bset tset\n  x4 = tConj tset'\n  rel_bset (=\\<^sub>\\<alpha>) tset tset'", "obtain t' where t': \"t' \\<in> set_bset tset'\" and \"t =\\<^sub>\\<alpha> t'\""], ["proof (prove)\nusing this:\n  t \\<in> set_bset tset\n  x4 = tConj tset'\n  rel_bset (=\\<^sub>\\<alpha>) tset tset'\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>t' \\<in> set_bset tset'; t =\\<^sub>\\<alpha> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis rel_bset.rep_eq rel_set_def)"], ["proof (state)\nthis:\n  t' \\<in> set_bset tset'\n  t =\\<^sub>\\<alpha> t'\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "with x1"], ["proof (chain)\npicking this:\n  x1 = p \\<bullet> t\n  t' \\<in> set_bset tset'\n  t =\\<^sub>\\<alpha> t'", "have \"(x1, p \\<bullet> t') \\<in> alpha_Tree_rel\""], ["proof (prove)\nusing this:\n  x1 = p \\<bullet> t\n  t' \\<in> set_bset tset'\n  t =\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff alpha_Tree_relI permute_Tree\\<^sub>\\<alpha>.abs_eq)"], ["proof (state)\nthis:\n  (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "moreover"], ["proof (state)\nthis:\n  (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "have \"(p \\<bullet> t', t') \\<in> hull_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> t', t') \\<in> hull_rel", "by (rule hull_rel.intros)"], ["proof (state)\nthis:\n  (p \\<bullet> t', t') \\<in> hull_rel\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "moreover"], ["proof (state)\nthis:\n  (p \\<bullet> t', t') \\<in> hull_rel\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from x4 and t'"], ["proof (chain)\npicking this:\n  x4 = tConj tset'\n  t' \\<in> set_bset tset'", "have \"(t', x4) \\<in> Tree_wf\""], ["proof (prove)\nusing this:\n  x4 = tConj tset'\n  t' \\<in> set_bset tset'\n\ngoal (1 subgoal):\n 1. (t', x4) \\<in> Tree_wf", "by (simp add: Tree_wf.intros(1))"], ["proof (state)\nthis:\n  (t', x4) \\<in> Tree_wf\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       \\<lbrakk>t \\<in> set_bset tset; (x1, t) \\<in> hull_rel;\n        (tConj tset, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 3. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "ultimately"], ["proof (chain)\npicking this:\n  (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n  (p \\<bullet> t', t') \\<in> hull_rel\n  (t', x4) \\<in> Tree_wf", "show \"(x1,x4) \\<in> alpha_Tree_rel O hull_rel O Tree_wf\""], ["proof (prove)\nusing this:\n  (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n  (p \\<bullet> t', t') \\<in> hull_rel\n  (t', x4) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "by auto"], ["proof (state)\nthis:\n  (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "next\n        \\<comment> \\<open>@{const tNot}\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "assume *: \"(x1,t) \\<in> hull_rel\" and **: \"(tNot t, x4) \\<in> alpha_Tree_rel\""], ["proof (state)\nthis:\n  (x1, t) \\<in> hull_rel\n  (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from \"*\""], ["proof (chain)\npicking this:\n  (x1, t) \\<in> hull_rel", "obtain p where x1: \"x1 = p \\<bullet> t\""], ["proof (prove)\nusing this:\n  (x1, t) \\<in> hull_rel\n\ngoal (1 subgoal):\n 1. (\\<And>p. x1 = p \\<bullet> t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hull_rel.cases"], ["proof (prove)\nusing this:\n  (x1, t) \\<in> hull_rel\n  \\<lbrakk>(?a1.0, ?a2.0) \\<in> hull_rel;\n   \\<And>p x.\n      \\<lbrakk>?a1.0 = p \\<bullet> x; ?a2.0 = x\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>p. x1 = p \\<bullet> t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x1 = p \\<bullet> t\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from \"**\""], ["proof (chain)\npicking this:\n  (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel", "have \"tNot t =\\<^sub>\\<alpha> x4\""], ["proof (prove)\nusing this:\n  (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. tNot t =\\<^sub>\\<alpha> x4", "by (rule alpha_Tree_relE)"], ["proof (state)\nthis:\n  tNot t =\\<^sub>\\<alpha> x4\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "then"], ["proof (chain)\npicking this:\n  tNot t =\\<^sub>\\<alpha> x4", "obtain t' where x4: \"x4 = tNot t'\" and \"t =\\<^sub>\\<alpha> t'\""], ["proof (prove)\nusing this:\n  tNot t =\\<^sub>\\<alpha> x4\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>x4 = tNot t'; t =\\<^sub>\\<alpha> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"x4\") simp_all"], ["proof (state)\nthis:\n  x4 = tNot t'\n  t =\\<^sub>\\<alpha> t'\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "with x1"], ["proof (chain)\npicking this:\n  x1 = p \\<bullet> t\n  x4 = tNot t'\n  t =\\<^sub>\\<alpha> t'", "have \"(x1, p \\<bullet> t') \\<in> alpha_Tree_rel\""], ["proof (prove)\nusing this:\n  x1 = p \\<bullet> t\n  x4 = tNot t'\n  t =\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff alpha_Tree_relI permute_Tree\\<^sub>\\<alpha>.abs_eq x1)"], ["proof (state)\nthis:\n  (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "moreover"], ["proof (state)\nthis:\n  (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "have \"(p \\<bullet> t', t') \\<in> hull_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> t', t') \\<in> hull_rel", "by (rule hull_rel.intros)"], ["proof (state)\nthis:\n  (p \\<bullet> t', t') \\<in> hull_rel\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "moreover"], ["proof (state)\nthis:\n  (p \\<bullet> t', t') \\<in> hull_rel\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from x4"], ["proof (chain)\npicking this:\n  x4 = tNot t'", "have \"(t', x4) \\<in> Tree_wf\""], ["proof (prove)\nusing this:\n  x4 = tNot t'\n\ngoal (1 subgoal):\n 1. (t', x4) \\<in> Tree_wf", "using Tree_wf.intros(2)"], ["proof (prove)\nusing this:\n  x4 = tNot t'\n  (?t, tNot ?t) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (t', x4) \\<in> Tree_wf", "by blast"], ["proof (state)\nthis:\n  (t', x4) \\<in> Tree_wf\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tNot t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf\n 2. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "ultimately"], ["proof (chain)\npicking this:\n  (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n  (p \\<bullet> t', t') \\<in> hull_rel\n  (t', x4) \\<in> Tree_wf", "show \"(x1,x4) \\<in> alpha_Tree_rel O hull_rel O Tree_wf\""], ["proof (prove)\nusing this:\n  (x1, p \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n  (p \\<bullet> t', t') \\<in> hull_rel\n  (t', x4) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "by auto"], ["proof (state)\nthis:\n  (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "next\n        \\<comment> \\<open>@{const tAct}\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "fix f \\<alpha> t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "assume *: \"(x1,t) \\<in> hull_rel\" and **: \"(tAct f \\<alpha> t, x4) \\<in> alpha_Tree_rel\""], ["proof (state)\nthis:\n  (x1, t) \\<in> hull_rel\n  (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from \"*\""], ["proof (chain)\npicking this:\n  (x1, t) \\<in> hull_rel", "obtain p where x1: \"x1 = p \\<bullet> t\""], ["proof (prove)\nusing this:\n  (x1, t) \\<in> hull_rel\n\ngoal (1 subgoal):\n 1. (\\<And>p. x1 = p \\<bullet> t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hull_rel.cases"], ["proof (prove)\nusing this:\n  (x1, t) \\<in> hull_rel\n  \\<lbrakk>(?a1.0, ?a2.0) \\<in> hull_rel;\n   \\<And>p x.\n      \\<lbrakk>?a1.0 = p \\<bullet> x; ?a2.0 = x\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>p. x1 = p \\<bullet> t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x1 = p \\<bullet> t\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from \"**\""], ["proof (chain)\npicking this:\n  (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel", "have \"tAct f \\<alpha> t =\\<^sub>\\<alpha> x4\""], ["proof (prove)\nusing this:\n  (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. tAct f \\<alpha> t =\\<^sub>\\<alpha> x4", "by (rule alpha_Tree_relE)"], ["proof (state)\nthis:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> x4\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "then"], ["proof (chain)\npicking this:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> x4", "obtain q t' where x4: \"x4 = tAct f (q \\<bullet> \\<alpha>) t'\" and \"q \\<bullet> t =\\<^sub>\\<alpha> t'\""], ["proof (prove)\nusing this:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> x4\n\ngoal (1 subgoal):\n 1. (\\<And>q t'.\n        \\<lbrakk>x4 = tAct f (q \\<bullet> \\<alpha>) t';\n         q \\<bullet> t =\\<^sub>\\<alpha> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"x4\") (auto simp add: alpha_set)"], ["proof (state)\nthis:\n  x4 = tAct f (q \\<bullet> \\<alpha>) t'\n  q \\<bullet> t =\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "with x1"], ["proof (chain)\npicking this:\n  x1 = p \\<bullet> t\n  x4 = tAct f (q \\<bullet> \\<alpha>) t'\n  q \\<bullet> t =\\<^sub>\\<alpha> t'", "have \"(x1, p \\<bullet> -q \\<bullet> t') \\<in> alpha_Tree_rel\""], ["proof (prove)\nusing this:\n  x1 = p \\<bullet> t\n  x4 = tAct f (q \\<bullet> \\<alpha>) t'\n  q \\<bullet> t =\\<^sub>\\<alpha> t'\n\ngoal (1 subgoal):\n 1. (x1, p \\<bullet> - q \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff alpha_Tree_relI permute_Tree\\<^sub>\\<alpha>.abs_eq permute_minus_cancel(1))"], ["proof (state)\nthis:\n  (x1, p \\<bullet> - q \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "moreover"], ["proof (state)\nthis:\n  (x1, p \\<bullet> - q \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "have \"(p \\<bullet> -q \\<bullet> t', t') \\<in> hull_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> - q \\<bullet> t', t') \\<in> hull_rel", "by (metis hull_rel.simps permute_plus)"], ["proof (state)\nthis:\n  (p \\<bullet> - q \\<bullet> t', t') \\<in> hull_rel\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "moreover"], ["proof (state)\nthis:\n  (p \\<bullet> - q \\<bullet> t', t') \\<in> hull_rel\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "from x4"], ["proof (chain)\npicking this:\n  x4 = tAct f (q \\<bullet> \\<alpha>) t'", "have \"(t', x4) \\<in> Tree_wf\""], ["proof (prove)\nusing this:\n  x4 = tAct f (q \\<bullet> \\<alpha>) t'\n\ngoal (1 subgoal):\n 1. (t', x4) \\<in> Tree_wf", "by (simp add: Tree_wf.intros(3))"], ["proof (state)\nthis:\n  (t', x4) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. \\<And>t f \\<alpha>.\n       \\<lbrakk>(x1, t) \\<in> hull_rel;\n        (tAct f \\<alpha> t, x4) \\<in> FL_Validity.alpha_Tree_rel\\<rbrakk>\n       \\<Longrightarrow> (x1, x4)\n                         \\<in> FL_Validity.alpha_Tree_rel O\n                               hull_rel O Tree_wf", "ultimately"], ["proof (chain)\npicking this:\n  (x1, p \\<bullet> - q \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n  (p \\<bullet> - q \\<bullet> t', t') \\<in> hull_rel\n  (t', x4) \\<in> Tree_wf", "show \"(x1,x4) \\<in> alpha_Tree_rel O hull_rel O Tree_wf\""], ["proof (prove)\nusing this:\n  (x1, p \\<bullet> - q \\<bullet> t') \\<in> FL_Validity.alpha_Tree_rel\n  (p \\<bullet> - q \\<bullet> t', t') \\<in> hull_rel\n  (t', x4) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "by auto"], ["proof (state)\nthis:\n  (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (hull_rel O Tree_wf) O\n               FL_Validity.alpha_Tree_rel \\<Longrightarrow>\n       x \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "with x"], ["proof (chain)\npicking this:\n  x = (x1, x4)\n  (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "show \"x \\<in> alpha_Tree_rel O hull_rel O Tree_wf\""], ["proof (prove)\nusing this:\n  x = (x1, x4)\n  (x1, x4) \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf\n\ngoal (1 subgoal):\n 1. x \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf", "by simp"], ["proof (state)\nthis:\n  x \\<in> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (hull_rel O Tree_wf) O FL_Validity.alpha_Tree_rel\n  \\<subseteq> FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_Tree_rel_relcomp_trivialI [simp]:\n  assumes \"(x, y) \\<in> R\"\n  shows \"(x, y) \\<in> alpha_Tree_rel O R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> FL_Validity.alpha_Tree_rel O R", "using assms"], ["proof (prove)\nusing this:\n  (x, y) \\<in> R\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> FL_Validity.alpha_Tree_rel O R", "unfolding alpha_Tree_rel_def"], ["proof (prove)\nusing this:\n  (x, y) \\<in> R\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> {(x, y). x =\\<^sub>\\<alpha> y} O R", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff case_prodI mem_Collect_eq relcomp.relcompI)"], ["", "lemma alpha_Tree_rel_relcompI [simp]:\n  assumes \"x =\\<^sub>\\<alpha> x'\" and \"(x', y) \\<in> R\"\n  shows \"(x, y) \\<in> alpha_Tree_rel O R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> FL_Validity.alpha_Tree_rel O R", "using assms"], ["proof (prove)\nusing this:\n  x =\\<^sub>\\<alpha> x'\n  (x', y) \\<in> R\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> FL_Validity.alpha_Tree_rel O R", "unfolding alpha_Tree_rel_def"], ["proof (prove)\nusing this:\n  x =\\<^sub>\\<alpha> x'\n  (x', y) \\<in> R\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> {(x, y). x =\\<^sub>\\<alpha> y} O R", "by (metis case_prodI mem_Collect_eq relcomp.relcompI)"], ["", "subsection \\<open>Validity for infinitely branching trees\\<close>"], ["", "context effect_nominal_ts\nbegin"], ["", "text \\<open>Since we defined formulas via a manual quotient construction, we also need to define\n  validity via lifting from the underlying type of infinitely branching trees. We cannot use\n  {\\bf nominal\\_function} because that generates proof obligations where, for formulas of the\n  form~@{term \"Conj xset\"}, the assumption that~@{term xset} has finite support is missing.\\<close>"], ["", "declare conj_cong [fundef_cong]"], ["", "function (sequential) FL_valid_Tree :: \"'state \\<Rightarrow> ('idx,'pred,'act,'effect) Tree \\<Rightarrow> bool\" where\n    \"FL_valid_Tree P (tConj tset) \\<longleftrightarrow> (\\<forall>t\\<in>set_bset tset. FL_valid_Tree P t)\"\n  | \"FL_valid_Tree P (tNot t) \\<longleftrightarrow> \\<not> FL_valid_Tree P t\"\n  | \"FL_valid_Tree P (tPred f \\<phi>) \\<longleftrightarrow> \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\"\n  | \"FL_valid_Tree P (tAct f \\<alpha> t) \\<longleftrightarrow> (\\<exists>\\<alpha>' t' P'. tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree P' t')\""], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>Pa tset. x = (Pa, tConj tset) \\<Longrightarrow> P;\n        \\<And>Pa t. x = (Pa, tNot t) \\<Longrightarrow> P;\n        \\<And>Pa f \\<phi>. x = (Pa, tPred f \\<phi>) \\<Longrightarrow> P;\n        \\<And>Pa f \\<alpha> t.\n           x = (Pa, tAct f \\<alpha> t) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>P tset Pa tseta.\n       (P, tConj tset) = (Pa, tConj tseta) \\<Longrightarrow>\n       (\\<forall>x1\\<in>set_bset tset. FL_valid_Tree_sumC (P, x1)) =\n       (\\<forall>x1\\<in>set_bset tseta. FL_valid_Tree_sumC (Pa, x1))\n 3. \\<And>P tset Pa t.\n       (P, tConj tset) = (Pa, tNot t) \\<Longrightarrow>\n       (\\<forall>x1\\<in>set_bset tset. FL_valid_Tree_sumC (P, x1)) =\n       (\\<not> FL_valid_Tree_sumC (Pa, t))\n 4. \\<And>P tset Pa f \\<phi>.\n       (P, tConj tset) = (Pa, tPred f \\<phi>) \\<Longrightarrow>\n       (\\<forall>x1\\<in>set_bset tset. FL_valid_Tree_sumC (P, x1)) =\n       \\<langle>f\\<rangle>Pa \\<turnstile> \\<phi>\n 5. \\<And>P tset Pa f \\<alpha> t.\n       (P, tConj tset) = (Pa, tAct f \\<alpha> t) \\<Longrightarrow>\n       (\\<forall>x1\\<in>set_bset tset. FL_valid_Tree_sumC (P, x1)) =\n       (\\<exists>\\<alpha>' t' P'.\n           tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n           \\<langle>f\\<rangle>Pa \\<rightarrow>\n           \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n           FL_valid_Tree_sumC (P', t'))\n 6. \\<And>P t Pa ta.\n       (P, tNot t) = (Pa, tNot ta) \\<Longrightarrow>\n       (\\<not> FL_valid_Tree_sumC (P, t)) =\n       (\\<not> FL_valid_Tree_sumC (Pa, ta))\n 7. \\<And>P t Pa f \\<phi>.\n       (P, tNot t) = (Pa, tPred f \\<phi>) \\<Longrightarrow>\n       (\\<not> FL_valid_Tree_sumC (P, t)) =\n       \\<langle>f\\<rangle>Pa \\<turnstile> \\<phi>\n 8. \\<And>P t Pa f \\<alpha> ta.\n       (P, tNot t) = (Pa, tAct f \\<alpha> ta) \\<Longrightarrow>\n       (\\<not> FL_valid_Tree_sumC (P, t)) =\n       (\\<exists>\\<alpha>' t' P'.\n           tAct f \\<alpha> ta =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n           \\<langle>f\\<rangle>Pa \\<rightarrow>\n           \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n           FL_valid_Tree_sumC (P', t'))\n 9. \\<And>P f \\<phi> Pa fa \\<phi>'.\n       (P, tPred f \\<phi>) = (Pa, tPred fa \\<phi>') \\<Longrightarrow>\n       \\<langle>f\\<rangle>P \\<turnstile> \\<phi> =\n       \\<langle>fa\\<rangle>Pa \\<turnstile> \\<phi>'\n 10. \\<And>P f \\<phi> Pa fa \\<alpha> t.\n        (P, tPred f \\<phi>) = (Pa, tAct fa \\<alpha> t) \\<Longrightarrow>\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi> =\n        (\\<exists>\\<alpha>' t' P'.\n            tAct fa \\<alpha> t =\\<^sub>\\<alpha> tAct fa \\<alpha>' t' \\<and>\n            \\<langle>fa\\<rangle>Pa \\<rightarrow>\n            \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n            FL_valid_Tree_sumC (P', t'))\nA total of 11 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All FL_valid_Tree_dom", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. wf ?R\n 2. \\<And>P tset x.\n       x \\<in> set_bset tset \\<Longrightarrow>\n       ((P, x), P, tConj tset) \\<in> ?R\n 3. \\<And>P t. ((P, t), P, tNot t) \\<in> ?R\n 4. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t) \\<in> ?R", "let ?R = \"inv_image (alpha_Tree_rel O hull_rel O Tree_wf) snd\""], ["proof (state)\ngoal (4 subgoals):\n 1. wf ?R\n 2. \\<And>P tset x.\n       x \\<in> set_bset tset \\<Longrightarrow>\n       ((P, x), P, tConj tset) \\<in> ?R\n 3. \\<And>P t. ((P, t), P, tNot t) \\<in> ?R\n 4. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t) \\<in> ?R", "{"], ["proof (state)\ngoal (4 subgoals):\n 1. wf ?R\n 2. \\<And>P tset x.\n       x \\<in> set_bset tset \\<Longrightarrow>\n       ((P, x), P, tConj tset) \\<in> ?R\n 3. \\<And>P t. ((P, t), P, tNot t) \\<in> ?R\n 4. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t) \\<in> ?R", "show \"wf ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd)", "by (metis wf_alpha_Tree_rel_hull_rel_Tree_wf wf_inv_image)"], ["proof (state)\nthis:\n  wf (inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd)\n\ngoal (3 subgoals):\n 1. \\<And>P tset x.\n       x \\<in> set_bset tset \\<Longrightarrow>\n       ((P, x), P, tConj tset)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 2. \\<And>P t.\n       ((P, t), P, tNot t)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 3. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>P tset x.\n       x \\<in> set_bset tset \\<Longrightarrow>\n       ((P, x), P, tConj tset)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 2. \\<And>P t.\n       ((P, t), P, tNot t)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 3. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "fix P :: 'state and tset :: \"('idx,'pred,'act,'effect) Tree set['idx]\" and t"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>P tset x.\n       x \\<in> set_bset tset \\<Longrightarrow>\n       ((P, x), P, tConj tset)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 2. \\<And>P t.\n       ((P, t), P, tNot t)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 3. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "assume \"t \\<in> set_bset tset\""], ["proof (state)\nthis:\n  t \\<in> set_bset tset\n\ngoal (3 subgoals):\n 1. \\<And>P tset x.\n       x \\<in> set_bset tset \\<Longrightarrow>\n       ((P, x), P, tConj tset)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 2. \\<And>P t.\n       ((P, t), P, tNot t)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 3. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "then"], ["proof (chain)\npicking this:\n  t \\<in> set_bset tset", "show \"((P, t), (P, tConj tset)) \\<in> ?R\""], ["proof (prove)\nusing this:\n  t \\<in> set_bset tset\n\ngoal (1 subgoal):\n 1. ((P, t), P, tConj tset)\n    \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd", "by (simp add: Tree_wf.intros(1))"], ["proof (state)\nthis:\n  ((P, t), P, tConj tset)\n  \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n\ngoal (2 subgoals):\n 1. \\<And>P t.\n       ((P, t), P, tNot t)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 2. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P t.\n       ((P, t), P, tNot t)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 2. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "fix P :: 'state and t :: \"('idx,'pred,'act,'effect) Tree\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P t.\n       ((P, t), P, tNot t)\n       \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n 2. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "show \"((P, t), (P, tNot t)) \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((P, t), P, tNot t)\n    \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd", "by (simp add: Tree_wf.intros(2))"], ["proof (state)\nthis:\n  ((P, t), P, tNot t)\n  \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n\ngoal (1 subgoal):\n 1. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "fix P1 P2 :: 'state and f and \\<alpha>1 \\<alpha>2 and t1 t2 :: \"('idx,'pred,'act,'effect) Tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "assume \"tAct f \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f \\<alpha>2 t2\""], ["proof (state)\nthis:\n  tAct f \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "then"], ["proof (chain)\npicking this:\n  tAct f \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f \\<alpha>2 t2", "obtain p where \"t2 =\\<^sub>\\<alpha> p \\<bullet> t1\""], ["proof (prove)\nusing this:\n  tAct f \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        t2 =\\<^sub>\\<alpha> p \\<bullet> t1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: alphas) (metis alpha_Tree_symp sympE)"], ["proof (state)\nthis:\n  t2 =\\<^sub>\\<alpha> p \\<bullet> t1\n\ngoal (1 subgoal):\n 1. \\<And>P f \\<alpha> t x xa xb.\n       \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>x,xb\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((xb, xa), P, tAct f \\<alpha> t)\n                         \\<in> inv_image\n                                (FL_Validity.alpha_Tree_rel O\n                                 hull_rel O Tree_wf)\n                                snd", "then"], ["proof (chain)\npicking this:\n  t2 =\\<^sub>\\<alpha> p \\<bullet> t1", "show \"((P2, t2), (P1, tAct f \\<alpha>1 t1)) \\<in> ?R\""], ["proof (prove)\nusing this:\n  t2 =\\<^sub>\\<alpha> p \\<bullet> t1\n\ngoal (1 subgoal):\n 1. ((P2, t2), P1, tAct f \\<alpha>1 t1)\n    \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd", "by (simp add: Tree_wf.intros(3))"], ["proof (state)\nthis:\n  ((P2, t2), P1, tAct f \\<alpha>1 t1)\n  \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  tAct ?f10 ?\\<alpha>1.10 ?t1.10 =\\<^sub>\\<alpha>\n  tAct ?f10 ?\\<alpha>2.10 ?t2.10 \\<Longrightarrow>\n  ((?P2.10, ?t2.10), ?P1.10, tAct ?f10 ?\\<alpha>1.10 ?t1.10)\n  \\<in> inv_image (FL_Validity.alpha_Tree_rel O hull_rel O Tree_wf) snd\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>@{const FL_valid_Tree} is equivariant.\\<close>"], ["", "lemma FL_valid_Tree_eqvt': \"FL_valid_Tree P t \\<longleftrightarrow> FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree P t = FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t)", "proof (induction P t rule: FL_valid_Tree.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>P tset.\n       (\\<And>x.\n           x \\<in> set_bset tset \\<Longrightarrow>\n           FL_valid_Tree P x =\n           FL_valid_Tree (p \\<bullet> P) (p \\<bullet> x)) \\<Longrightarrow>\n       FL_valid_Tree P (tConj tset) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. \\<And>P t.\n       FL_valid_Tree P t =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t) \\<Longrightarrow>\n       FL_valid_Tree P (tNot t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tNot t)\n 3. \\<And>P f \\<phi>.\n       FL_valid_Tree P (tPred f \\<phi>) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tPred f \\<phi>)\n 4. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "case (1 P tset)"], ["proof (state)\nthis:\n  ?x7 \\<in> set_bset tset \\<Longrightarrow>\n  FL_valid_Tree P ?x7 = FL_valid_Tree (p \\<bullet> P) (p \\<bullet> ?x7)\n\ngoal (4 subgoals):\n 1. \\<And>P tset.\n       (\\<And>x.\n           x \\<in> set_bset tset \\<Longrightarrow>\n           FL_valid_Tree P x =\n           FL_valid_Tree (p \\<bullet> P) (p \\<bullet> x)) \\<Longrightarrow>\n       FL_valid_Tree P (tConj tset) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. \\<And>P t.\n       FL_valid_Tree P t =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t) \\<Longrightarrow>\n       FL_valid_Tree P (tNot t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tNot t)\n 3. \\<And>P f \\<phi>.\n       FL_valid_Tree P (tPred f \\<phi>) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tPred f \\<phi>)\n 4. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tConj tset) =\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tConj tset) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "assume *: \"FL_valid_Tree P (tConj tset)\""], ["proof (state)\nthis:\n  FL_valid_Tree P (tConj tset)\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tConj tset) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "{"], ["proof (state)\nthis:\n  FL_valid_Tree P (tConj tset)\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tConj tset) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tConj tset) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "assume \"t \\<in> p \\<bullet> set_bset tset\""], ["proof (state)\nthis:\n  t \\<in> p \\<bullet> set_bset tset\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tConj tset) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "with \"1.IH\" and \"*\""], ["proof (chain)\npicking this:\n  ?x7 \\<in> set_bset tset \\<Longrightarrow>\n  FL_valid_Tree P ?x7 = FL_valid_Tree (p \\<bullet> P) (p \\<bullet> ?x7)\n  FL_valid_Tree P (tConj tset)\n  t \\<in> p \\<bullet> set_bset tset", "have \"FL_valid_Tree (p \\<bullet> P) t\""], ["proof (prove)\nusing this:\n  ?x7 \\<in> set_bset tset \\<Longrightarrow>\n  FL_valid_Tree P ?x7 = FL_valid_Tree (p \\<bullet> P) (p \\<bullet> ?x7)\n  FL_valid_Tree P (tConj tset)\n  t \\<in> p \\<bullet> set_bset tset\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) t", "by (metis (no_types, lifting) imageE permute_set_eq_image FL_valid_Tree.simps(1))"], ["proof (state)\nthis:\n  FL_valid_Tree (p \\<bullet> P) t\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tConj tset) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "}"], ["proof (state)\nthis:\n  ?ta9 \\<in> p \\<bullet> set_bset tset \\<Longrightarrow>\n  FL_valid_Tree (p \\<bullet> P) ?ta9\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tConj tset) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n 2. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "then"], ["proof (chain)\npicking this:\n  ?ta9 \\<in> p \\<bullet> set_bset tset \\<Longrightarrow>\n  FL_valid_Tree (p \\<bullet> P) ?ta9", "show \"FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\""], ["proof (prove)\nusing this:\n  ?ta9 \\<in> p \\<bullet> set_bset tset \\<Longrightarrow>\n  FL_valid_Tree (p \\<bullet> P) ?ta9\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)", "by simp"], ["proof (state)\nthis:\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "assume *: \"FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\""], ["proof (state)\nthis:\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "{"], ["proof (state)\nthis:\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "assume \"t \\<in> set_bset tset\""], ["proof (state)\nthis:\n  t \\<in> set_bset tset\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "with \"1.IH\" and \"*\""], ["proof (chain)\npicking this:\n  ?x7 \\<in> set_bset tset \\<Longrightarrow>\n  FL_valid_Tree P ?x7 = FL_valid_Tree (p \\<bullet> P) (p \\<bullet> ?x7)\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n  t \\<in> set_bset tset", "have \"FL_valid_Tree P t\""], ["proof (prove)\nusing this:\n  ?x7 \\<in> set_bset tset \\<Longrightarrow>\n  FL_valid_Tree P ?x7 = FL_valid_Tree (p \\<bullet> P) (p \\<bullet> ?x7)\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n  t \\<in> set_bset tset\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P t", "by (metis mem_permute_iff permute_Tree_tConj set_bset_eqvt FL_valid_Tree.simps(1))"], ["proof (state)\nthis:\n  FL_valid_Tree P t\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "}"], ["proof (state)\nthis:\n  ?ta9 \\<in> set_bset tset \\<Longrightarrow> FL_valid_Tree P ?ta9\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset) \\<Longrightarrow>\n    FL_valid_Tree P (tConj tset)", "then"], ["proof (chain)\npicking this:\n  ?ta9 \\<in> set_bset tset \\<Longrightarrow> FL_valid_Tree P ?ta9", "show \"FL_valid_Tree P (tConj tset)\""], ["proof (prove)\nusing this:\n  ?ta9 \\<in> set_bset tset \\<Longrightarrow> FL_valid_Tree P ?ta9\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tConj tset)", "by simp"], ["proof (state)\nthis:\n  FL_valid_Tree P (tConj tset)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FL_valid_Tree P (tConj tset) =\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tConj tset)\n\ngoal (3 subgoals):\n 1. \\<And>P t.\n       FL_valid_Tree P t =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t) \\<Longrightarrow>\n       FL_valid_Tree P (tNot t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tNot t)\n 2. \\<And>P f \\<phi>.\n       FL_valid_Tree P (tPred f \\<phi>) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tPred f \\<phi>)\n 3. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>P t.\n       FL_valid_Tree P t =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t) \\<Longrightarrow>\n       FL_valid_Tree P (tNot t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tNot t)\n 2. \\<And>P f \\<phi>.\n       FL_valid_Tree P (tPred f \\<phi>) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tPred f \\<phi>)\n 3. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "case 2"], ["proof (state)\nthis:\n  FL_valid_Tree P_ t_ = FL_valid_Tree (p \\<bullet> P_) (p \\<bullet> t_)\n\ngoal (3 subgoals):\n 1. \\<And>P t.\n       FL_valid_Tree P t =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t) \\<Longrightarrow>\n       FL_valid_Tree P (tNot t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tNot t)\n 2. \\<And>P f \\<phi>.\n       FL_valid_Tree P (tPred f \\<phi>) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tPred f \\<phi>)\n 3. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  FL_valid_Tree P_ t_ = FL_valid_Tree (p \\<bullet> P_) (p \\<bullet> t_)", "show ?case"], ["proof (prove)\nusing this:\n  FL_valid_Tree P_ t_ = FL_valid_Tree (p \\<bullet> P_) (p \\<bullet> t_)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P_ (tNot t_) =\n    FL_valid_Tree (p \\<bullet> P_) (p \\<bullet> tNot t_)", "by simp"], ["proof (state)\nthis:\n  FL_valid_Tree P_ (tNot t_) =\n  FL_valid_Tree (p \\<bullet> P_) (p \\<bullet> tNot t_)\n\ngoal (2 subgoals):\n 1. \\<And>P f \\<phi>.\n       FL_valid_Tree P (tPred f \\<phi>) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tPred f \\<phi>)\n 2. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P f \\<phi>.\n       FL_valid_Tree P (tPred f \\<phi>) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tPred f \\<phi>)\n 2. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>P f \\<phi>.\n       FL_valid_Tree P (tPred f \\<phi>) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tPred f \\<phi>)\n 2. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree P_ (tPred f_ \\<phi>_) =\n    FL_valid_Tree (p \\<bullet> P_) (p \\<bullet> tPred f_ \\<phi>_)", "by simp (metis effect_apply_eqvt' permute_minus_cancel(2) satisfies_eqvt)"], ["proof (state)\nthis:\n  FL_valid_Tree P_ (tPred f_ \\<phi>_) =\n  FL_valid_Tree (p \\<bullet> P_) (p \\<bullet> tPred f_ \\<phi>_)\n\ngoal (1 subgoal):\n 1. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "case (4 P f \\<alpha> t)"], ["proof (state)\nthis:\n  \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f ?x7 ?xa7;\n   \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>?x7,?xb7\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?xb7 ?xa7 =\n                    FL_valid_Tree (p \\<bullet> ?xb7) (p \\<bullet> ?xa7)\n\ngoal (1 subgoal):\n 1. \\<And>P f \\<alpha> t.\n       (\\<And>x xa xb.\n           \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f x xa;\n            \\<langle>f\\<rangle>P \\<rightarrow>\n            \\<langle>x,xb\\<rangle>\\<rbrakk>\n           \\<Longrightarrow> FL_valid_Tree xb xa =\n                             FL_valid_Tree (p \\<bullet> xb)\n                              (p \\<bullet> xa)) \\<Longrightarrow>\n       FL_valid_Tree P (tAct f \\<alpha> t) =\n       FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) =\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n 2. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "assume \"FL_valid_Tree P (tAct f \\<alpha> t)\""], ["proof (state)\nthis:\n  FL_valid_Tree P (tAct f \\<alpha> t)\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n 2. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  FL_valid_Tree P (tAct f \\<alpha> t)", "obtain \\<alpha>' t' P' where *: \"tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree P' t'\""], ["proof (prove)\nusing this:\n  FL_valid_Tree P (tAct f \\<alpha> t)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' t' P'.\n        tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n        FL_valid_Tree P' t' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n 2. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "with \"4.IH\""], ["proof (chain)\npicking this:\n  \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f ?x7 ?xa7;\n   \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>?x7,?xb7\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?xb7 ?xa7 =\n                    FL_valid_Tree (p \\<bullet> ?xb7) (p \\<bullet> ?xa7)\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'", "have \"FL_valid_Tree (p \\<bullet> P') (p \\<bullet> t')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f ?x7 ?xa7;\n   \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>?x7,?xb7\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?xb7 ?xa7 =\n                    FL_valid_Tree (p \\<bullet> ?xb7) (p \\<bullet> ?xa7)\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P') (p \\<bullet> t')", "by blast"], ["proof (state)\nthis:\n  FL_valid_Tree (p \\<bullet> P') (p \\<bullet> t')\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n 2. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "moreover"], ["proof (state)\nthis:\n  FL_valid_Tree (p \\<bullet> P') (p \\<bullet> t')\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n 2. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "from \"*\""], ["proof (chain)\npicking this:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'", "have \"p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>', p \\<bullet> P'\\<rangle>\""], ["proof (prove)\nusing this:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n    \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle>", "by (metis transition_eqvt')"], ["proof (state)\nthis:\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle>\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n 2. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle>\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n 2. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "from \"*\""], ["proof (chain)\npicking this:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'", "have \"p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct (p \\<bullet> f) (p \\<bullet> \\<alpha>') (p \\<bullet> t')\""], ["proof (prove)\nusing this:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f \\<alpha>' t' \\<and>\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n    tAct (p \\<bullet> f) (p \\<bullet> \\<alpha>') (p \\<bullet> t')", "by (metis alpha_Tree_eqvt permute_Tree.simps(4))"], ["proof (state)\nthis:\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) (p \\<bullet> \\<alpha>') (p \\<bullet> t')\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n 2. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "ultimately"], ["proof (chain)\npicking this:\n  FL_valid_Tree (p \\<bullet> P') (p \\<bullet> t')\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle>\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) (p \\<bullet> \\<alpha>') (p \\<bullet> t')", "show \"FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\""], ["proof (prove)\nusing this:\n  FL_valid_Tree (p \\<bullet> P') (p \\<bullet> t')\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle>\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) (p \\<bullet> \\<alpha>') (p \\<bullet> t')\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "by auto"], ["proof (state)\nthis:\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "assume \"FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\""], ["proof (state)\nthis:\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)", "obtain \\<alpha>' t' P' where *: \"p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct (p \\<bullet> f) \\<alpha>' t' \\<and> (p \\<bullet> \\<langle>f\\<rangle>P) \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree P' t'\""], ["proof (prove)\nusing this:\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' t' P'.\n        p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n        tAct (p \\<bullet> f) \\<alpha>' t' \\<and>\n        p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n        FL_valid_Tree P' t' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) \\<alpha>' t' \\<and>\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) \\<alpha>' t' \\<and>\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'", "have eq: \"tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f (-p \\<bullet> \\<alpha>') (-p \\<bullet> t')\""], ["proof (prove)\nusing this:\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) \\<alpha>' t' \\<and>\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. tAct f \\<alpha> t =\\<^sub>\\<alpha>\n    tAct f (- p \\<bullet> \\<alpha>') (- p \\<bullet> t')", "by (metis alpha_Tree_eqvt permute_Tree.simps(4) permute_minus_cancel(2))"], ["proof (state)\nthis:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct f (- p \\<bullet> \\<alpha>') (- p \\<bullet> t')\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "moreover"], ["proof (state)\nthis:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct f (- p \\<bullet> \\<alpha>') (- p \\<bullet> t')\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "from \"*\""], ["proof (chain)\npicking this:\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) \\<alpha>' t' \\<and>\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'", "have \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>-p \\<bullet> \\<alpha>', -p \\<bullet> P'\\<rangle>\""], ["proof (prove)\nusing this:\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) \\<alpha>' t' \\<and>\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. \\<langle>f\\<rangle>P \\<rightarrow>\n    \\<langle>- p \\<bullet> \\<alpha>',- p \\<bullet> P'\\<rangle>", "by (metis permute_minus_cancel(2) transition_eqvt')"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>- p \\<bullet> \\<alpha>',- p \\<bullet> P'\\<rangle>\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "moreover"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>- p \\<bullet> \\<alpha>',- p \\<bullet> P'\\<rangle>\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "with \"4.IH\""], ["proof (chain)\npicking this:\n  \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f ?x7 ?xa7;\n   \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>?x7,?xb7\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?xb7 ?xa7 =\n                    FL_valid_Tree (p \\<bullet> ?xb7) (p \\<bullet> ?xa7)\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>- p \\<bullet> \\<alpha>',- p \\<bullet> P'\\<rangle>", "have \"FL_valid_Tree (-p \\<bullet> P') (-p \\<bullet> t')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f ?x7 ?xa7;\n   \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>?x7,?xb7\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?xb7 ?xa7 =\n                    FL_valid_Tree (p \\<bullet> ?xb7) (p \\<bullet> ?xa7)\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>- p \\<bullet> \\<alpha>',- p \\<bullet> P'\\<rangle>\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (- p \\<bullet> P') (- p \\<bullet> t')", "using eq and \"*\""], ["proof (prove)\nusing this:\n  \\<lbrakk>tAct f \\<alpha> t =\\<^sub>\\<alpha> tAct f ?x7 ?xa7;\n   \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>?x7,?xb7\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?xb7 ?xa7 =\n                    FL_valid_Tree (p \\<bullet> ?xb7) (p \\<bullet> ?xa7)\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>- p \\<bullet> \\<alpha>',- p \\<bullet> P'\\<rangle>\n  tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct f (- p \\<bullet> \\<alpha>') (- p \\<bullet> t')\n  p \\<bullet> tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct (p \\<bullet> f) \\<alpha>' t' \\<and>\n  p \\<bullet> \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (- p \\<bullet> P') (- p \\<bullet> t')", "by simp"], ["proof (state)\nthis:\n  FL_valid_Tree (- p \\<bullet> P') (- p \\<bullet> t')\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P)\n     (p \\<bullet> tAct f \\<alpha> t) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f \\<alpha> t)", "ultimately"], ["proof (chain)\npicking this:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct f (- p \\<bullet> \\<alpha>') (- p \\<bullet> t')\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>- p \\<bullet> \\<alpha>',- p \\<bullet> P'\\<rangle>\n  FL_valid_Tree (- p \\<bullet> P') (- p \\<bullet> t')", "show \"FL_valid_Tree P (tAct f \\<alpha> t)\""], ["proof (prove)\nusing this:\n  tAct f \\<alpha> t =\\<^sub>\\<alpha>\n  tAct f (- p \\<bullet> \\<alpha>') (- p \\<bullet> t')\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>- p \\<bullet> \\<alpha>',- p \\<bullet> P'\\<rangle>\n  FL_valid_Tree (- p \\<bullet> P') (- p \\<bullet> t')\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f \\<alpha> t)", "by auto"], ["proof (state)\nthis:\n  FL_valid_Tree P (tAct f \\<alpha> t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FL_valid_Tree P (tAct f \\<alpha> t) =\n  FL_valid_Tree (p \\<bullet> P) (p \\<bullet> tAct f \\<alpha> t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FL_valid_Tree_eqvt [eqvt]:\n    assumes \"FL_valid_Tree P t\" shows \"FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t)", "using assms"], ["proof (prove)\nusing this:\n  FL_valid_Tree P t\n\ngoal (1 subgoal):\n 1. FL_valid_Tree (p \\<bullet> P) (p \\<bullet> t)", "by (metis FL_valid_Tree_eqvt')"], ["", "text \\<open>$\\alpha$-equivalent trees validate the same states.\\<close>"], ["", "lemma alpha_Tree_FL_valid_Tree:\n    assumes \"t1 =\\<^sub>\\<alpha> t2\"\n    shows \"FL_valid_Tree P t1 \\<longleftrightarrow> FL_valid_Tree P t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree P t1 = FL_valid_Tree P t2", "using assms"], ["proof (prove)\nusing this:\n  t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P t1 = FL_valid_Tree P t2", "proof (induction t1 t2 arbitrary: P rule: alpha_Tree_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2 P.\n       \\<lbrakk>\\<And>a b P.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> FL_valid_Tree P a = FL_valid_Tree P b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tConj tset1) =\n                         FL_valid_Tree P (tConj tset2)\n 2. \\<And>t1 t2 P.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>P. FL_valid_Tree P t1 = FL_valid_Tree P t2\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tNot t1) =\n                         FL_valid_Tree P (tNot t2)\n 3. \\<And>f \\<phi> P.\n       FL_valid_Tree P (tPred f \\<phi>) = FL_valid_Tree P (tPred f \\<phi>)\n 4. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2 P.\n       \\<lbrakk>\\<And>p P.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   FL_valid_Tree P (p \\<bullet> t1) = FL_valid_Tree P t2;\n        f1 = f2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tAct f1 \\<alpha>1 t1) =\n                         FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "case tConj"], ["proof (state)\nthis:\n  \\<lbrakk>?a7 \\<in> set_bset tset1_; ?b7 \\<in> set_bset tset2_;\n   ?a7 =\\<^sub>\\<alpha> ?b7\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?P7 ?a7 = FL_valid_Tree ?P7 ?b7\n  rel_bset (=\\<^sub>\\<alpha>) tset1_ tset2_\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2 P.\n       \\<lbrakk>\\<And>a b P.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> FL_valid_Tree P a = FL_valid_Tree P b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tConj tset1) =\n                         FL_valid_Tree P (tConj tset2)\n 2. \\<And>t1 t2 P.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>P. FL_valid_Tree P t1 = FL_valid_Tree P t2\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tNot t1) =\n                         FL_valid_Tree P (tNot t2)\n 3. \\<And>f \\<phi> P.\n       FL_valid_Tree P (tPred f \\<phi>) = FL_valid_Tree P (tPred f \\<phi>)\n 4. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2 P.\n       \\<lbrakk>\\<And>p P.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   FL_valid_Tree P (p \\<bullet> t1) = FL_valid_Tree P t2;\n        f1 = f2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tAct f1 \\<alpha>1 t1) =\n                         FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?a7 \\<in> set_bset tset1_; ?b7 \\<in> set_bset tset2_;\n   ?a7 =\\<^sub>\\<alpha> ?b7\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?P7 ?a7 = FL_valid_Tree ?P7 ?b7\n  rel_bset (=\\<^sub>\\<alpha>) tset1_ tset2_", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a7 \\<in> set_bset tset1_; ?b7 \\<in> set_bset tset2_;\n   ?a7 =\\<^sub>\\<alpha> ?b7\\<rbrakk>\n  \\<Longrightarrow> FL_valid_Tree ?P7 ?a7 = FL_valid_Tree ?P7 ?b7\n  rel_bset (=\\<^sub>\\<alpha>) tset1_ tset2_\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tConj tset1_) = FL_valid_Tree P (tConj tset2_)", "by auto (metis (mono_tags) rel_bset.rep_eq rel_set_def)+"], ["proof (state)\nthis:\n  FL_valid_Tree P (tConj tset1_) = FL_valid_Tree P (tConj tset2_)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2 P.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>P. FL_valid_Tree P t1 = FL_valid_Tree P t2\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tNot t1) =\n                         FL_valid_Tree P (tNot t2)\n 2. \\<And>f \\<phi> P.\n       FL_valid_Tree P (tPred f \\<phi>) = FL_valid_Tree P (tPred f \\<phi>)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2 P.\n       \\<lbrakk>\\<And>p P.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   FL_valid_Tree P (p \\<bullet> t1) = FL_valid_Tree P t2;\n        f1 = f2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tAct f1 \\<alpha>1 t1) =\n                         FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 P.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>P. FL_valid_Tree P t1 = FL_valid_Tree P t2\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tNot t1) =\n                         FL_valid_Tree P (tNot t2)\n 2. \\<And>f \\<phi> P.\n       FL_valid_Tree P (tPred f \\<phi>) = FL_valid_Tree P (tPred f \\<phi>)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2 P.\n       \\<lbrakk>\\<And>p P.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   FL_valid_Tree P (p \\<bullet> t1) = FL_valid_Tree P t2;\n        f1 = f2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tAct f1 \\<alpha>1 t1) =\n                         FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "case (tAct f1 \\<alpha>1 t1 f2 \\<alpha>2 t2)"], ["proof (state)\nthis:\n  ?p7 \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  FL_valid_Tree ?P7 (?p7 \\<bullet> t1) = FL_valid_Tree ?P7 t2\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2 P.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>P. FL_valid_Tree P t1 = FL_valid_Tree P t2\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tNot t1) =\n                         FL_valid_Tree P (tNot t2)\n 2. \\<And>f \\<phi> P.\n       FL_valid_Tree P (tPred f \\<phi>) = FL_valid_Tree P (tPred f \\<phi>)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2 P.\n       \\<lbrakk>\\<And>p P.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   FL_valid_Tree P (p \\<bullet> t1) = FL_valid_Tree P t2;\n        f1 = f2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tAct f1 \\<alpha>1 t1) =\n                         FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f1 \\<alpha>1 t1) =\n    FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f1 \\<alpha>1 t1) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n 2. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "assume \"FL_valid_Tree P (tAct f1 \\<alpha>1 t1)\""], ["proof (state)\nthis:\n  FL_valid_Tree P (tAct f1 \\<alpha>1 t1)\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f1 \\<alpha>1 t1) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n 2. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "then"], ["proof (chain)\npicking this:\n  FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "obtain \\<alpha>' t' P' where \"tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f1 \\<alpha>' t' \\<and> \\<langle>f1\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree P' t'\""], ["proof (prove)\nusing this:\n  FL_valid_Tree P (tAct f1 \\<alpha>1 t1)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' t' P'.\n        tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f1 \\<alpha>' t' \\<and>\n        \\<langle>f1\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n        FL_valid_Tree P' t' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f1 \\<alpha>' t' \\<and>\n  \\<langle>f1\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f1 \\<alpha>1 t1) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n 2. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "moreover"], ["proof (state)\nthis:\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f1 \\<alpha>' t' \\<and>\n  \\<langle>f1\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f1 \\<alpha>1 t1) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n 2. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "from tAct.hyps"], ["proof (chain)\npicking this:\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "have \"tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2\""], ["proof (prove)\nusing this:\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2", "using alpha_tAct"], ["proof (prove)\nusing this:\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  (tAct ?f1.0 ?\\<alpha>1.0 ?t1.0 =\\<^sub>\\<alpha>\n   tAct ?f2.0 ?\\<alpha>2.0 ?t2.0) =\n  (?f1.0 = ?f2.0 \\<and>\n   (\\<exists>p.\n       (bn ?\\<alpha>1.0,\n        ?t1.0) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n          (=\\<^sub>\\<alpha>) p (bn ?\\<alpha>2.0, ?t2.0) \\<and>\n       (bn ?\\<alpha>1.0,\n        ?\\<alpha>1.0) \\<approx>set (=) supp p (bn ?\\<alpha>2.0,\n         ?\\<alpha>2.0)))\n\ngoal (1 subgoal):\n 1. tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2", "by blast"], ["proof (state)\nthis:\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2\n\ngoal (2 subgoals):\n 1. FL_valid_Tree P (tAct f1 \\<alpha>1 t1) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n 2. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "ultimately"], ["proof (chain)\npicking this:\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f1 \\<alpha>' t' \\<and>\n  \\<langle>f1\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2", "show \"FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\""], ["proof (prove)\nusing this:\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f1 \\<alpha>' t' \\<and>\n  \\<langle>f1\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "using tAct.hyps"], ["proof (prove)\nusing this:\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f1 \\<alpha>' t' \\<and>\n  \\<langle>f1\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff FL_valid_Tree.simps(4))"], ["proof (state)\nthis:\n  FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "assume \"FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\""], ["proof (state)\nthis:\n  FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "then"], ["proof (chain)\npicking this:\n  FL_valid_Tree P (tAct f2 \\<alpha>2 t2)", "obtain \\<alpha>' t' P' where \"tAct f2 \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct f2 \\<alpha>' t' \\<and> \\<langle>f2\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree P' t'\""], ["proof (prove)\nusing this:\n  FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' t' P'.\n        tAct f2 \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct f2 \\<alpha>' t' \\<and>\n        \\<langle>f2\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n        FL_valid_Tree P' t' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  tAct f2 \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct f2 \\<alpha>' t' \\<and>\n  \\<langle>f2\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "moreover"], ["proof (state)\nthis:\n  tAct f2 \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct f2 \\<alpha>' t' \\<and>\n  \\<langle>f2\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "from tAct.hyps"], ["proof (chain)\npicking this:\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "have \"tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2\""], ["proof (prove)\nusing this:\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2", "using alpha_tAct"], ["proof (prove)\nusing this:\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  (tAct ?f1.0 ?\\<alpha>1.0 ?t1.0 =\\<^sub>\\<alpha>\n   tAct ?f2.0 ?\\<alpha>2.0 ?t2.0) =\n  (?f1.0 = ?f2.0 \\<and>\n   (\\<exists>p.\n       (bn ?\\<alpha>1.0,\n        ?t1.0) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n          (=\\<^sub>\\<alpha>) p (bn ?\\<alpha>2.0, ?t2.0) \\<and>\n       (bn ?\\<alpha>1.0,\n        ?\\<alpha>1.0) \\<approx>set (=) supp p (bn ?\\<alpha>2.0,\n         ?\\<alpha>2.0)))\n\ngoal (1 subgoal):\n 1. tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2", "by blast"], ["proof (state)\nthis:\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f2 \\<alpha>2 t2) \\<Longrightarrow>\n    FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "ultimately"], ["proof (chain)\npicking this:\n  tAct f2 \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct f2 \\<alpha>' t' \\<and>\n  \\<langle>f2\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2", "show \"FL_valid_Tree P (tAct f1 \\<alpha>1 t1)\""], ["proof (prove)\nusing this:\n  tAct f2 \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct f2 \\<alpha>' t' \\<and>\n  \\<langle>f2\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "using tAct.hyps"], ["proof (prove)\nusing this:\n  tAct f2 \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct f2 \\<alpha>' t' \\<and>\n  \\<langle>f2\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n  FL_valid_Tree P' t'\n  tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct f2 \\<alpha>2 t2\n  f1 = f2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. FL_valid_Tree P (tAct f1 \\<alpha>1 t1)", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff FL_valid_Tree.simps(4))"], ["proof (state)\nthis:\n  FL_valid_Tree P (tAct f1 \\<alpha>1 t1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FL_valid_Tree P (tAct f1 \\<alpha>1 t1) =\n  FL_valid_Tree P (tAct f2 \\<alpha>2 t2)\n\ngoal (2 subgoals):\n 1. \\<And>t1 t2 P.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>P. FL_valid_Tree P t1 = FL_valid_Tree P t2\\<rbrakk>\n       \\<Longrightarrow> FL_valid_Tree P (tNot t1) =\n                         FL_valid_Tree P (tNot t2)\n 2. \\<And>f \\<phi> P.\n       FL_valid_Tree P (tPred f \\<phi>) = FL_valid_Tree P (tPred f \\<phi>)", "qed simp_all"], ["", "subsection \\<open>Validity for trees modulo \\texorpdfstring{$\\alpha$}{alpha}-equivalence\\<close>"], ["", "lift_definition FL_valid_Tree\\<^sub>\\<alpha> :: \"'state \\<Rightarrow> ('idx,'pred,'act,'effect) Tree\\<^sub>\\<alpha> \\<Rightarrow> bool\" is\n    FL_valid_Tree"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>state Tree1 Tree2.\n       Tree1 =\\<^sub>\\<alpha> Tree2 \\<Longrightarrow>\n       FL_valid_Tree state Tree1 = FL_valid_Tree state Tree2", "by (fact alpha_Tree_FL_valid_Tree)"], ["", "lemma FL_valid_Tree\\<^sub>\\<alpha>_eqvt [eqvt]:\n    assumes \"FL_valid_Tree\\<^sub>\\<alpha> P t\" shows \"FL_valid_Tree\\<^sub>\\<alpha> (p \\<bullet> P) (p \\<bullet> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> (p \\<bullet> P) (p \\<bullet> t)", "using assms"], ["proof (prove)\nusing this:\n  FL_valid_Tree\\<^sub>\\<alpha> P t\n\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> (p \\<bullet> P) (p \\<bullet> t)", "by transfer (fact FL_valid_Tree_eqvt)"], ["", "lemma FL_valid_Tree\\<^sub>\\<alpha>_Conj\\<^sub>\\<alpha> [simp]: \"FL_valid_Tree\\<^sub>\\<alpha> P (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) \\<longleftrightarrow> (\\<forall>t\\<^sub>\\<alpha>\\<in>set_bset tset\\<^sub>\\<alpha>. FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    (\\<forall>t\\<^sub>\\<alpha>\\<in>set_bset tset\\<^sub>\\<alpha>.\n        FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    (\\<forall>t\\<^sub>\\<alpha>\\<in>set_bset tset\\<^sub>\\<alpha>.\n        FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>)", "have \"FL_valid_Tree P (rep_Tree\\<^sub>\\<alpha> (abs_Tree\\<^sub>\\<alpha> (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)))) \\<longleftrightarrow> FL_valid_Tree P (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree P\n     (rep_Tree\\<^sub>\\<alpha>\n       (abs_Tree\\<^sub>\\<alpha>\n         (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)))) =\n    FL_valid_Tree P\n     (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "by (metis Tree\\<^sub>\\<alpha>_rep_abs alpha_Tree_FL_valid_Tree)"], ["proof (state)\nthis:\n  FL_valid_Tree P\n   (rep_Tree\\<^sub>\\<alpha>\n     (abs_Tree\\<^sub>\\<alpha>\n       (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)))) =\n  FL_valid_Tree P\n   (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    (\\<forall>t\\<^sub>\\<alpha>\\<in>set_bset tset\\<^sub>\\<alpha>.\n        FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  FL_valid_Tree P\n   (rep_Tree\\<^sub>\\<alpha>\n     (abs_Tree\\<^sub>\\<alpha>\n       (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)))) =\n  FL_valid_Tree P\n   (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "show ?thesis"], ["proof (prove)\nusing this:\n  FL_valid_Tree P\n   (rep_Tree\\<^sub>\\<alpha>\n     (abs_Tree\\<^sub>\\<alpha>\n       (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)))) =\n  FL_valid_Tree P\n   (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    (\\<forall>t\\<^sub>\\<alpha>\\<in>set_bset tset\\<^sub>\\<alpha>.\n        FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>)", "by (simp add: FL_valid_Tree\\<^sub>\\<alpha>_def Conj\\<^sub>\\<alpha>_def map_bset.rep_eq)"], ["proof (state)\nthis:\n  FL_valid_Tree\\<^sub>\\<alpha> P (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n  (\\<forall>t\\<^sub>\\<alpha>\\<in>set_bset tset\\<^sub>\\<alpha>.\n      FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FL_valid_Tree\\<^sub>\\<alpha>_Not\\<^sub>\\<alpha> [simp]: \"FL_valid_Tree\\<^sub>\\<alpha> P (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) \\<longleftrightarrow> \\<not> FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) =\n    (\\<not> FL_valid_Tree\\<^sub>\\<alpha> P t\\<^sub>\\<alpha>)", "by transfer simp"], ["", "lemma FL_valid_Tree\\<^sub>\\<alpha>_Pred\\<^sub>\\<alpha> [simp]: \"FL_valid_Tree\\<^sub>\\<alpha> P (Pred\\<^sub>\\<alpha> f \\<phi>) \\<longleftrightarrow> \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P (Pred\\<^sub>\\<alpha> f \\<phi>) =\n    \\<langle>f\\<rangle>P \\<turnstile> \\<phi>", "by transfer simp"], ["", "lemma FL_valid_Tree\\<^sub>\\<alpha>_Act\\<^sub>\\<alpha> [simp]: \"FL_valid_Tree\\<^sub>\\<alpha> P (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) \\<longleftrightarrow> (\\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'. Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> = Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) =\n    (\\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n        Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n        Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n        FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) \\<Longrightarrow>\n    \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n 2. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "assume \"FL_valid_Tree\\<^sub>\\<alpha> P (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)\""], ["proof (state)\nthis:\n  FL_valid_Tree\\<^sub>\\<alpha> P\n   (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (2 subgoals):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) \\<Longrightarrow>\n    \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n 2. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "moreover"], ["proof (state)\nthis:\n  FL_valid_Tree\\<^sub>\\<alpha> P\n   (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (2 subgoals):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) \\<Longrightarrow>\n    \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n 2. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "have \"Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> = abs_Tree\\<^sub>\\<alpha> (tAct f \\<alpha> (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n    abs_Tree\\<^sub>\\<alpha>\n     (tAct f \\<alpha> (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))", "by (metis Act\\<^sub>\\<alpha>.abs_eq Tree\\<^sub>\\<alpha>_abs_rep)"], ["proof (state)\nthis:\n  Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n  abs_Tree\\<^sub>\\<alpha>\n   (tAct f \\<alpha> (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n\ngoal (2 subgoals):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) \\<Longrightarrow>\n    \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n 2. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "ultimately"], ["proof (chain)\npicking this:\n  FL_valid_Tree\\<^sub>\\<alpha> P\n   (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)\n  Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n  abs_Tree\\<^sub>\\<alpha>\n   (tAct f \\<alpha> (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))", "show \"\\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'. Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> = Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\""], ["proof (prove)\nusing this:\n  FL_valid_Tree\\<^sub>\\<alpha> P\n   (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)\n  Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n  abs_Tree\\<^sub>\\<alpha>\n   (tAct f \\<alpha> (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'", "by (metis Act\\<^sub>\\<alpha>.abs_eq Tree\\<^sub>\\<alpha>.abs_eq_iff FL_valid_Tree.simps(4) FL_valid_Tree\\<^sub>\\<alpha>.abs_eq)"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n     Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n     Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "assume \"\\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'. Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> = Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\""], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n     Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n     Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "moreover"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n     Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n     Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "have \"\\<And>\\<alpha>' t\\<^sub>\\<alpha>'. Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' = abs_Tree\\<^sub>\\<alpha> (tAct f \\<alpha>' (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>' t\\<^sub>\\<alpha>'.\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' =\n       abs_Tree\\<^sub>\\<alpha>\n        (tAct f \\<alpha>' (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>'))", "by (metis Act\\<^sub>\\<alpha>.abs_eq Tree\\<^sub>\\<alpha>_abs_rep)"], ["proof (state)\nthis:\n  Act\\<^sub>\\<alpha> f ?\\<alpha>'8 ?t\\<^sub>\\<alpha>'8 =\n  abs_Tree\\<^sub>\\<alpha>\n   (tAct f ?\\<alpha>'8 (rep_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>'8))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n       Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n       Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n     Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n     Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n  Act\\<^sub>\\<alpha> f ?\\<alpha>'8 ?t\\<^sub>\\<alpha>'8 =\n  abs_Tree\\<^sub>\\<alpha>\n   (tAct f ?\\<alpha>'8 (rep_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>'8))", "show \"FL_valid_Tree\\<^sub>\\<alpha> P (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha>' t\\<^sub>\\<alpha>' P'.\n     Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha> =\n     Act\\<^sub>\\<alpha> f \\<alpha>' t\\<^sub>\\<alpha>' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     FL_valid_Tree\\<^sub>\\<alpha> P' t\\<^sub>\\<alpha>'\n  Act\\<^sub>\\<alpha> f ?\\<alpha>'8 ?t\\<^sub>\\<alpha>'8 =\n  abs_Tree\\<^sub>\\<alpha>\n   (tAct f ?\\<alpha>'8 (rep_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>'8))\n\ngoal (1 subgoal):\n 1. FL_valid_Tree\\<^sub>\\<alpha> P\n     (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff FL_valid_Tree.simps(4) FL_valid_Tree\\<^sub>\\<alpha>.abs_eq FL_valid_Tree\\<^sub>\\<alpha>.rep_eq)"], ["proof (state)\nthis:\n  FL_valid_Tree\\<^sub>\\<alpha> P\n   (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Validity for infinitary formulas\\<close>"], ["", "lift_definition FL_valid :: \"'state \\<Rightarrow> ('idx,'pred,'act,'effect) formula \\<Rightarrow> bool\" (infix \"\\<Turnstile>\" 70) is\n    FL_valid_Tree\\<^sub>\\<alpha>"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma FL_valid_eqvt [eqvt]:\n    assumes \"P \\<Turnstile> x\" shows \"(p \\<bullet> P) \\<Turnstile> (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<Turnstile> p \\<bullet> x", "using assms"], ["proof (prove)\nusing this:\n  P \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<Turnstile> p \\<bullet> x", "by transfer (metis FL_valid_Tree\\<^sub>\\<alpha>_eqvt)"], ["", "lemma FL_valid_Conj [simp]:\n    assumes \"finite (supp xset)\"\n    shows \"P \\<Turnstile> Conj xset \\<longleftrightarrow> (\\<forall>x\\<in>set_bset xset. P \\<Turnstile> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> Conj xset =\n    (\\<forall>x\\<in>set_bset xset. P \\<Turnstile> x)", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Conj xset =\n    (\\<forall>x\\<in>set_bset xset. P \\<Turnstile> x)", "by (simp add: FL_valid_def Conj_def map_bset.rep_eq)"], ["", "lemma FL_valid_Not [simp]: \"P \\<Turnstile> Not x \\<longleftrightarrow> \\<not> P \\<Turnstile> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> FL_Formula.Not x = (\\<not> P \\<Turnstile> x)", "by transfer simp"], ["", "lemma FL_valid_Pred [simp]: \"P \\<Turnstile> Pred f \\<phi> \\<longleftrightarrow> \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> Pred f \\<phi> = \\<langle>f\\<rangle>P \\<turnstile> \\<phi>", "by transfer simp"], ["", "lemma FL_valid_Act: \"P \\<Turnstile> Act f \\<alpha> x \\<longleftrightarrow> (\\<exists>\\<alpha>' x' P'. Act f \\<alpha> x = Act f \\<alpha>' x' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> P' \\<Turnstile> x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> Act f \\<alpha> x =\n    (\\<exists>\\<alpha>' x' P'.\n        Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n        P' \\<Turnstile> x')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x'\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "assume \"P \\<Turnstile> Act f \\<alpha> x\""], ["proof (state)\nthis:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x'\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x'\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "have \"Rep_formula (Abs_formula (Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x))) = Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_formula\n     (Abs_formula (Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x))) =\n    Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x)", "by (metis Act.rep_eq Rep_formula_inverse)"], ["proof (state)\nthis:\n  Rep_formula\n   (Abs_formula (Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x))) =\n  Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x'\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "ultimately"], ["proof (chain)\npicking this:\n  P \\<Turnstile> Act f \\<alpha> x\n  Rep_formula\n   (Abs_formula (Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x))) =\n  Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x)", "show \"\\<exists>\\<alpha>' x' P'. Act f \\<alpha> x = Act f \\<alpha>' x' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> P' \\<Turnstile> x'\""], ["proof (prove)\nusing this:\n  P \\<Turnstile> Act f \\<alpha> x\n  Rep_formula\n   (Abs_formula (Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x))) =\n  Act\\<^sub>\\<alpha> f \\<alpha> (Rep_formula x)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x'", "by (auto simp add: FL_valid_def Act_def) (metis Abs_formula_inverse Rep_formula' hereditarily_fs_alpha_renaming)"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' x' P'.\n     Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     P' \\<Turnstile> x'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "assume \"\\<exists>\\<alpha>' x' P'. Act f \\<alpha> x = Act f \\<alpha>' x' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> P' \\<Turnstile> x'\""], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' x' P'.\n     Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     P' \\<Turnstile> x'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha>' x' P'.\n     Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     P' \\<Turnstile> x'", "show \"P \\<Turnstile> Act f \\<alpha> x\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha>' x' P'.\n     Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     P' \\<Turnstile> x'\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Act f \\<alpha> x", "by (metis Act.rep_eq FL_valid.rep_eq FL_valid_Tree\\<^sub>\\<alpha>_Act\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The binding names in the alpha-variant that witnesses validity may be chosen fresh for any\n  finitely supported context.\\<close>"], ["", "lemma FL_valid_Act_strong:\n    assumes \"finite (supp X)\"\n    shows \"P \\<Turnstile> Act f \\<alpha> x \\<longleftrightarrow> (\\<exists>\\<alpha>' x' P'. Act f \\<alpha> x = Act f \\<alpha>' x' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> Act f \\<alpha> x =\n    (\\<exists>\\<alpha>' x' P'.\n        Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n        P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "assume \"P \\<Turnstile> Act f \\<alpha> x\""], ["proof (state)\nthis:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  P \\<Turnstile> Act f \\<alpha> x", "obtain \\<alpha>' x' P' where eq: \"Act f \\<alpha> x = Act f \\<alpha>' x'\" and trans: \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\" and valid: \"P' \\<Turnstile> x'\""], ["proof (prove)\nusing this:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' x' P'.\n        \\<lbrakk>Act f \\<alpha> x = Act f \\<alpha>' x';\n         \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>;\n         P' \\<Turnstile> x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis FL_valid_Act)"], ["proof (state)\nthis:\n  Act f \\<alpha> x = Act f \\<alpha>' x'\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  P' \\<Turnstile> x'\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "have \"finite (bn \\<alpha>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (bn \\<alpha>')", "by (fact bn_finite)"], ["proof (state)\nthis:\n  finite (bn \\<alpha>')\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  finite (bn \\<alpha>')\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "note \\<open>finite (supp X)\\<close>"], ["proof (state)\nthis:\n  finite (supp X)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  finite (supp X)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "have \"finite (supp (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>', \\<langle>\\<alpha>',P'\\<rangle>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (supp\n       (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n        \\<langle>\\<alpha>',P'\\<rangle>))", "by (simp add: supp_Pair finite_sets_supp finite_supp)"], ["proof (state)\nthis:\n  finite\n   (supp\n     (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n      \\<langle>\\<alpha>',P'\\<rangle>))\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  finite\n   (supp\n     (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n      \\<langle>\\<alpha>',P'\\<rangle>))\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "have \"bn \\<alpha>' \\<sharp>* (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>', \\<langle>\\<alpha>',P'\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn \\<alpha>' \\<sharp>* (supp x' - bn \\<alpha>',\n                            supp \\<alpha>' - bn \\<alpha>',\n                            \\<langle>\\<alpha>',P'\\<rangle>)", "by (simp add: atom_fresh_star_disjoint finite_supp fresh_star_Pair)"], ["proof (state)\nthis:\n  bn \\<alpha>' \\<sharp>* (supp x' - bn \\<alpha>',\n                          supp \\<alpha>' - bn \\<alpha>',\n                          \\<langle>\\<alpha>',P'\\<rangle>)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "ultimately"], ["proof (chain)\npicking this:\n  finite (bn \\<alpha>')\n  finite (supp X)\n  finite\n   (supp\n     (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n      \\<langle>\\<alpha>',P'\\<rangle>))\n  bn \\<alpha>' \\<sharp>* (supp x' - bn \\<alpha>',\n                          supp \\<alpha>' - bn \\<alpha>',\n                          \\<langle>\\<alpha>',P'\\<rangle>)", "obtain p where fresh_X: \"(p \\<bullet> bn \\<alpha>') \\<sharp>* X\" and fresh_p: \"supp (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>', \\<langle>\\<alpha>',P'\\<rangle>) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  finite (bn \\<alpha>')\n  finite (supp X)\n  finite\n   (supp\n     (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n      \\<langle>\\<alpha>',P'\\<rangle>))\n  bn \\<alpha>' \\<sharp>* (supp x' - bn \\<alpha>',\n                          supp \\<alpha>' - bn \\<alpha>',\n                          \\<langle>\\<alpha>',P'\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>') \\<sharp>* X;\n         supp\n          (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n           \\<langle>\\<alpha>',P'\\<rangle>) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis at_set_avoiding2)"], ["proof (state)\nthis:\n  (p \\<bullet> bn \\<alpha>') \\<sharp>* X\n  supp\n   (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n    \\<langle>\\<alpha>',P'\\<rangle>) \\<sharp>* p\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "from fresh_p"], ["proof (chain)\npicking this:\n  supp\n   (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n    \\<langle>\\<alpha>',P'\\<rangle>) \\<sharp>* p", "have \"supp (supp x' - bn \\<alpha>') \\<sharp>* p\" and \"supp (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\" and 1: \"supp \\<langle>\\<alpha>',P'\\<rangle> \\<sharp>* p\""], ["proof (prove)\nusing this:\n  supp\n   (supp x' - bn \\<alpha>', supp \\<alpha>' - bn \\<alpha>',\n    \\<langle>\\<alpha>',P'\\<rangle>) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp (supp x' - bn \\<alpha>') \\<sharp>* p &&&\n    supp (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p &&&\n    supp \\<langle>\\<alpha>',P'\\<rangle> \\<sharp>* p", "by (meson fresh_Pair fresh_def fresh_star_def)+"], ["proof (state)\nthis:\n  supp (supp x' - bn \\<alpha>') \\<sharp>* p\n  supp (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\n  supp \\<langle>\\<alpha>',P'\\<rangle> \\<sharp>* p\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  supp (supp x' - bn \\<alpha>') \\<sharp>* p\n  supp (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\n  supp \\<langle>\\<alpha>',P'\\<rangle> \\<sharp>* p", "have 2: \"(supp x' - bn \\<alpha>') \\<sharp>* p\" and 3: \"(supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\""], ["proof (prove)\nusing this:\n  supp (supp x' - bn \\<alpha>') \\<sharp>* p\n  supp (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\n  supp \\<langle>\\<alpha>',P'\\<rangle> \\<sharp>* p\n\ngoal (1 subgoal):\n 1. (supp x' - bn \\<alpha>') \\<sharp>* p &&&\n    (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p", "by (simp add: finite_supp supp_finite_atom_set)+"], ["proof (state)\nthis:\n  (supp x' - bn \\<alpha>') \\<sharp>* p\n  (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  (supp x' - bn \\<alpha>') \\<sharp>* p\n  (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "from 2"], ["proof (chain)\npicking this:\n  (supp x' - bn \\<alpha>') \\<sharp>* p", "have \"supp (p \\<bullet> x') - bn (p \\<bullet> \\<alpha>') = supp x' - bn \\<alpha>'\""], ["proof (prove)\nusing this:\n  (supp x' - bn \\<alpha>') \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp (p \\<bullet> x') - bn (p \\<bullet> \\<alpha>') =\n    supp x' - bn \\<alpha>'", "by (metis Diff_eqvt atom_set_perm_eq bn_eqvt supp_eqvt)"], ["proof (state)\nthis:\n  supp (p \\<bullet> x') - bn (p \\<bullet> \\<alpha>') =\n  supp x' - bn \\<alpha>'\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  supp (p \\<bullet> x') - bn (p \\<bullet> \\<alpha>') =\n  supp x' - bn \\<alpha>'\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "from 3"], ["proof (chain)\npicking this:\n  (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p", "have \"supp (p \\<bullet> \\<alpha>') - bn (p \\<bullet> \\<alpha>') = supp \\<alpha>' - bn \\<alpha>'\""], ["proof (prove)\nusing this:\n  (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp (p \\<bullet> \\<alpha>') - bn (p \\<bullet> \\<alpha>') =\n    supp \\<alpha>' - bn \\<alpha>'", "by (metis (no_types, hide_lams) Diff_eqvt atom_set_perm_eq bn_eqvt supp_eqvt)"], ["proof (state)\nthis:\n  supp (p \\<bullet> \\<alpha>') - bn (p \\<bullet> \\<alpha>') =\n  supp \\<alpha>' - bn \\<alpha>'\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "ultimately"], ["proof (chain)\npicking this:\n  (supp x' - bn \\<alpha>') \\<sharp>* p\n  (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\n  supp (p \\<bullet> x') - bn (p \\<bullet> \\<alpha>') =\n  supp x' - bn \\<alpha>'\n  supp (p \\<bullet> \\<alpha>') - bn (p \\<bullet> \\<alpha>') =\n  supp \\<alpha>' - bn \\<alpha>'", "have \"Act f \\<alpha>' x' = Act f (p \\<bullet> \\<alpha>') (p \\<bullet> x')\""], ["proof (prove)\nusing this:\n  (supp x' - bn \\<alpha>') \\<sharp>* p\n  (supp \\<alpha>' - bn \\<alpha>') \\<sharp>* p\n  supp (p \\<bullet> x') - bn (p \\<bullet> \\<alpha>') =\n  supp x' - bn \\<alpha>'\n  supp (p \\<bullet> \\<alpha>') - bn (p \\<bullet> \\<alpha>') =\n  supp \\<alpha>' - bn \\<alpha>'\n\ngoal (1 subgoal):\n 1. Act f \\<alpha>' x' = Act f (p \\<bullet> \\<alpha>') (p \\<bullet> x')", "by (auto simp add: Act_eq_iff_perm)"], ["proof (state)\nthis:\n  Act f \\<alpha>' x' = Act f (p \\<bullet> \\<alpha>') (p \\<bullet> x')\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  Act f \\<alpha>' x' = Act f (p \\<bullet> \\<alpha>') (p \\<bullet> x')\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "from 1"], ["proof (chain)\npicking this:\n  supp \\<langle>\\<alpha>',P'\\<rangle> \\<sharp>* p", "have \"\\<langle>p \\<bullet> \\<alpha>', p \\<bullet> P'\\<rangle> = \\<langle>\\<alpha>',P'\\<rangle>\""], ["proof (prove)\nusing this:\n  supp \\<langle>\\<alpha>',P'\\<rangle> \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle> =\n    \\<langle>\\<alpha>',P'\\<rangle>", "by (metis abs_residual_pair_eqvt supp_perm_eq)"], ["proof (state)\nthis:\n  \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle> =\n  \\<langle>\\<alpha>',P'\\<rangle>\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n 2. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "ultimately"], ["proof (chain)\npicking this:\n  Act f \\<alpha>' x' = Act f (p \\<bullet> \\<alpha>') (p \\<bullet> x')\n  \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle> =\n  \\<langle>\\<alpha>',P'\\<rangle>", "show \"\\<exists>\\<alpha>' x' P'. Act f \\<alpha> x = Act f \\<alpha>' x' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\""], ["proof (prove)\nusing this:\n  Act f \\<alpha>' x' = Act f (p \\<bullet> \\<alpha>') (p \\<bullet> x')\n  \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle> =\n  \\<langle>\\<alpha>',P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X", "using eq and trans and valid and fresh_X"], ["proof (prove)\nusing this:\n  Act f \\<alpha>' x' = Act f (p \\<bullet> \\<alpha>') (p \\<bullet> x')\n  \\<langle>p \\<bullet> \\<alpha>',p \\<bullet> P'\\<rangle> =\n  \\<langle>\\<alpha>',P'\\<rangle>\n  Act f \\<alpha> x = Act f \\<alpha>' x'\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  P' \\<Turnstile> x'\n  (p \\<bullet> bn \\<alpha>') \\<sharp>* X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X", "by (metis bn_eqvt FL_valid_eqvt)"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' x' P'.\n     Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "assume \"\\<exists>\\<alpha>' x' P'. Act f \\<alpha> x = Act f \\<alpha>' x' \\<and> \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and> P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\""], ["proof (state)\nthis:\n  \\<exists>\\<alpha>' x' P'.\n     Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha>' x' P'.\n     Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X", "show \"P \\<Turnstile> Act f \\<alpha> x\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha>' x' P'.\n     Act f \\<alpha> x = Act f \\<alpha>' x' \\<and>\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n     P' \\<Turnstile> x' \\<and> bn \\<alpha>' \\<sharp>* X\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Act f \\<alpha> x", "by (metis FL_valid_Act)"], ["proof (state)\nthis:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FL_valid_Act_fresh:\n    assumes \"bn \\<alpha> \\<sharp>* \\<langle>f\\<rangle>P\"\n    shows \"P \\<Turnstile> Act f \\<alpha> x \\<longleftrightarrow> (\\<exists>P'. \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and> P' \\<Turnstile> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> Act f \\<alpha> x =\n    (\\<exists>P'.\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n        P' \\<Turnstile> x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "assume \"P \\<Turnstile> Act f \\<alpha> x\""], ["proof (state)\nthis:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "have \"finite (supp (\\<langle>f\\<rangle>P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (\\<langle>f\\<rangle>P))", "by (fact finite_supp)"], ["proof (state)\nthis:\n  finite (supp (\\<langle>f\\<rangle>P))\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "ultimately"], ["proof (chain)\npicking this:\n  P \\<Turnstile> Act f \\<alpha> x\n  finite (supp (\\<langle>f\\<rangle>P))", "obtain \\<alpha>' x' P' where\n      eq: \"Act f \\<alpha> x = Act f \\<alpha>' x'\" and trans: \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\" and valid: \"P' \\<Turnstile> x'\" and fresh: \"bn \\<alpha>' \\<sharp>* \\<langle>f\\<rangle>P\""], ["proof (prove)\nusing this:\n  P \\<Turnstile> Act f \\<alpha> x\n  finite (supp (\\<langle>f\\<rangle>P))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' x' P'.\n        \\<lbrakk>Act f \\<alpha> x = Act f \\<alpha>' x';\n         \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>;\n         P' \\<Turnstile> x';\n         bn \\<alpha>' \\<sharp>* \\<langle>f\\<rangle>P\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis FL_valid_Act_strong)"], ["proof (state)\nthis:\n  Act f \\<alpha> x = Act f \\<alpha>' x'\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  P' \\<Turnstile> x'\n  bn \\<alpha>' \\<sharp>* \\<langle>f\\<rangle>P\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "from eq"], ["proof (chain)\npicking this:\n  Act f \\<alpha> x = Act f \\<alpha>' x'", "obtain p where p_\\<alpha>: \"\\<alpha>' = p \\<bullet> \\<alpha>\" and p_x: \"x' = p \\<bullet> x\" and supp_p: \"supp p \\<subseteq> bn \\<alpha> \\<union> p \\<bullet> bn \\<alpha>\""], ["proof (prove)\nusing this:\n  Act f \\<alpha> x = Act f \\<alpha>' x'\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>\\<alpha>' = p \\<bullet> \\<alpha>; x' = p \\<bullet> x;\n         supp p\n         \\<subseteq> bn \\<alpha> \\<union> p \\<bullet> bn \\<alpha>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Act_eq_iff_perm_renaming)"], ["proof (state)\nthis:\n  \\<alpha>' = p \\<bullet> \\<alpha>\n  x' = p \\<bullet> x\n  supp p \\<subseteq> bn \\<alpha> \\<union> p \\<bullet> bn \\<alpha>\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "from assms and fresh"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* \\<langle>f\\<rangle>P\n  bn \\<alpha>' \\<sharp>* \\<langle>f\\<rangle>P", "have \"(bn \\<alpha> \\<union> p \\<bullet> bn \\<alpha>) \\<sharp>* \\<langle>f\\<rangle>P\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* \\<langle>f\\<rangle>P\n  bn \\<alpha>' \\<sharp>* \\<langle>f\\<rangle>P\n\ngoal (1 subgoal):\n 1. (bn \\<alpha> \\<union>\n     p \\<bullet> bn \\<alpha>) \\<sharp>* \\<langle>f\\<rangle>P", "using p_\\<alpha>"], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* \\<langle>f\\<rangle>P\n  bn \\<alpha>' \\<sharp>* \\<langle>f\\<rangle>P\n  \\<alpha>' = p \\<bullet> \\<alpha>\n\ngoal (1 subgoal):\n 1. (bn \\<alpha> \\<union>\n     p \\<bullet> bn \\<alpha>) \\<sharp>* \\<langle>f\\<rangle>P", "by (metis bn_eqvt fresh_star_Un)"], ["proof (state)\nthis:\n  (bn \\<alpha> \\<union>\n   p \\<bullet> bn \\<alpha>) \\<sharp>* \\<langle>f\\<rangle>P\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  (bn \\<alpha> \\<union>\n   p \\<bullet> bn \\<alpha>) \\<sharp>* \\<langle>f\\<rangle>P", "have \"supp p \\<sharp>* \\<langle>f\\<rangle>P\""], ["proof (prove)\nusing this:\n  (bn \\<alpha> \\<union>\n   p \\<bullet> bn \\<alpha>) \\<sharp>* \\<langle>f\\<rangle>P\n\ngoal (1 subgoal):\n 1. supp p \\<sharp>* \\<langle>f\\<rangle>P", "using supp_p"], ["proof (prove)\nusing this:\n  (bn \\<alpha> \\<union>\n   p \\<bullet> bn \\<alpha>) \\<sharp>* \\<langle>f\\<rangle>P\n  supp p \\<subseteq> bn \\<alpha> \\<union> p \\<bullet> bn \\<alpha>\n\ngoal (1 subgoal):\n 1. supp p \\<sharp>* \\<langle>f\\<rangle>P", "by (metis fresh_star_def subset_eq)"], ["proof (state)\nthis:\n  supp p \\<sharp>* \\<langle>f\\<rangle>P\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  supp p \\<sharp>* \\<langle>f\\<rangle>P", "have p_P: \"-p \\<bullet> \\<langle>f\\<rangle>P = \\<langle>f\\<rangle>P\""], ["proof (prove)\nusing this:\n  supp p \\<sharp>* \\<langle>f\\<rangle>P\n\ngoal (1 subgoal):\n 1. - p \\<bullet> \\<langle>f\\<rangle>P = \\<langle>f\\<rangle>P", "by (metis perm_supp_eq supp_minus_perm)"], ["proof (state)\nthis:\n  - p \\<bullet> \\<langle>f\\<rangle>P = \\<langle>f\\<rangle>P\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "from trans"], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>", "have \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,-p \\<bullet> P'\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<langle>f\\<rangle>P \\<rightarrow>\n    \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>", "using p_P p_\\<alpha>"], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  - p \\<bullet> \\<langle>f\\<rangle>P = \\<langle>f\\<rangle>P\n  \\<alpha>' = p \\<bullet> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<langle>f\\<rangle>P \\<rightarrow>\n    \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>", "by (metis permute_minus_cancel(1) transition_eqvt')"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "from valid"], ["proof (chain)\npicking this:\n  P' \\<Turnstile> x'", "have \"-p \\<bullet> P' \\<Turnstile> x\""], ["proof (prove)\nusing this:\n  P' \\<Turnstile> x'\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile> x", "using p_x"], ["proof (prove)\nusing this:\n  P' \\<Turnstile> x'\n  x' = p \\<bullet> x\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile> x", "by (metis permute_minus_cancel(1) FL_valid_eqvt)"], ["proof (state)\nthis:\n  - p \\<bullet> P' \\<Turnstile> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Act f \\<alpha> x \\<Longrightarrow>\n    \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x\n 2. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>\n  - p \\<bullet> P' \\<Turnstile> x", "show \"\\<exists>P'. \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and> P' \\<Turnstile> x\""], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>\n  - p \\<bullet> P' \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x", "by meson"], ["proof (state)\nthis:\n  \\<exists>P'.\n     \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n     P' \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "assume \"\\<exists>P'. \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and> P' \\<Turnstile> x\""], ["proof (state)\nthis:\n  \\<exists>P'.\n     \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n     P' \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       P' \\<Turnstile> x \\<Longrightarrow>\n    P \\<Turnstile> Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  \\<exists>P'.\n     \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n     P' \\<Turnstile> x", "show \"P \\<Turnstile> Act f \\<alpha> x\""], ["proof (prove)\nusing this:\n  \\<exists>P'.\n     \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n     P' \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Act f \\<alpha> x", "by (metis FL_valid_Act)"], ["proof (state)\nthis:\n  P \\<Turnstile> Act f \\<alpha> x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}