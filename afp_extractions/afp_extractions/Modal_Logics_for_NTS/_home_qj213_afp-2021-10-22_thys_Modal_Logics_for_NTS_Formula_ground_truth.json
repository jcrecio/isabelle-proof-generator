{"file_name": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS/Formula.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS", "problem_names": ["lemma wf_Tree_wf: \"wf Tree_wf\"", "lemma permute_Tree_tConj [simp]: \"p \\<bullet> tConj tset = tConj (p \\<bullet> tset)\"", "lemma Tree_wf_eqvt_aux:\n  assumes \"(t1, t2) \\<in> Tree_wf\" shows \"(p \\<bullet> t1, p \\<bullet> t2) \\<in> Tree_wf\"", "lemma Tree_wf_eqvt [eqvt, simp]: \"p \\<bullet> Tree_wf = Tree_wf\"", "lemma Tree_wf_eqvt': \"eqvt Tree_wf\"", "lemma supp_tConj [simp]: \"supp (tConj tset) = supp tset\"", "lemma supp_tNot [simp]: \"supp (tNot t) = supp t\"", "lemma supp_tPred [simp]: \"supp (tPred \\<phi>) = supp \\<phi>\"", "lemma supp_tAct [simp]: \"supp (tAct \\<alpha> t) = supp \\<alpha> \\<union> supp t\"", "lemma supp_rel_eqvt [eqvt]:\n  \"p \\<bullet> supp_rel R x = supp_rel (p \\<bullet> R) (p \\<bullet> x)\"", "lemma supp_rel_cong [fundef_cong]:\n  \"\\<lbrakk> x=x'; \\<And>a b. R ((a \\<rightleftharpoons> b) \\<bullet> x') x' \\<longleftrightarrow> R' ((a \\<rightleftharpoons> b) \\<bullet> x') x' \\<rbrakk> \\<Longrightarrow> supp_rel R x = supp_rel R' x'\"", "lemma rel_bset_cong [fundef_cong]:\n  \"\\<lbrakk> x=x'; y=y'; \\<And>a b. a \\<in> set_bset x' \\<Longrightarrow> b \\<in> set_bset y' \\<Longrightarrow> R a b \\<longleftrightarrow> R' a b \\<rbrakk> \\<Longrightarrow> rel_bset R x y \\<longleftrightarrow> rel_bset R' x' y'\"", "lemma alpha_set_cong [fundef_cong]:\n  \"\\<lbrakk> bs=bs'; x=x'; R (p' \\<bullet> x') y' \\<longleftrightarrow> R' (p' \\<bullet> x') y'; f x' = f' x'; f y' = f' y'; p=p'; cs=cs'; y=y' \\<rbrakk> \\<Longrightarrow>\n    alpha_set (bs, x) R f p (cs, y) \\<longleftrightarrow> alpha_set (bs', x') R' f' p' (cs', y')\"", "lemma abs_Tree\\<^sub>p_eq [simp]: \"abs_Tree\\<^sub>p (p \\<bullet> t) = abs_Tree\\<^sub>p t\"", "lemma permute_rep_abs_Tree\\<^sub>p:\n  obtains p where \"rep_Tree\\<^sub>p (abs_Tree\\<^sub>p t) = p \\<bullet> t\"", "lemma Tree_wf\\<^sub>pI [simp]:\n  assumes \"(a, b) \\<in> Tree_wf\"\n  shows \"(abs_Tree\\<^sub>p (p \\<bullet> a), abs_Tree\\<^sub>p b) \\<in> Tree_wf\\<^sub>p\"", "lemma Tree_wf\\<^sub>p_trivialI [simp]:\n  assumes \"(a, b) \\<in> Tree_wf\"\n  shows \"(abs_Tree\\<^sub>p a, abs_Tree\\<^sub>p b) \\<in> Tree_wf\\<^sub>p\"", "lemma Tree_wf\\<^sub>pE:\n  assumes \"(a\\<^sub>p, b\\<^sub>p) \\<in> Tree_wf\\<^sub>p\"\n  obtains a b where \"a\\<^sub>p = abs_Tree\\<^sub>p a\" and \"b\\<^sub>p = abs_Tree\\<^sub>p b\" and \"(a,b) \\<in> Tree_wf\"", "lemma wf_Tree_wf\\<^sub>p: \"wf Tree_wf\\<^sub>p\"", "lemmas alpha_Tree_induct' = alpha_Tree.induct[case_names alpha_tConj alpha_tNot\n  alpha_tPred alpha_tAct \"alpha_other(1)\" \"alpha_other(2)\" \"alpha_other(3)\" \"alpha_other(4)\"\n  \"alpha_other(5)\" \"alpha_other(6)\" \"alpha_other(7)\" \"alpha_other(8)\" \"alpha_other(9)\"\n  \"alpha_other(10)\" \"alpha_other(11)\" \"alpha_other(12)\" \"alpha_other(13)\" \"alpha_other(14)\"\n  \"alpha_other(15)\" \"alpha_other(16)\" \"alpha_other(17)\" \"alpha_other(18)\"]", "lemma alpha_Tree_induct[case_names tConj tNot tPred tAct, consumes 1]:\n  assumes \"t1 =\\<^sub>\\<alpha> t2\"\n  and \"\\<And>tset1 tset2. (\\<And>a b. a \\<in> set_bset tset1 \\<Longrightarrow> b \\<in> set_bset tset2 \\<Longrightarrow> a =\\<^sub>\\<alpha> b \\<Longrightarrow> P a b) \\<Longrightarrow>\n            rel_bset (=\\<^sub>\\<alpha>) tset1 tset2 \\<Longrightarrow> P (tConj tset1) (tConj tset2)\"\n  and \"\\<And>t1 t2. t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow> P t1 t2 \\<Longrightarrow> P (tNot t1) (tNot t2)\"\n  and \"\\<And>\\<phi>. P (tPred \\<phi>) (tPred \\<phi>)\"\n  and \"\\<And>\\<alpha>1 t1 \\<alpha>2 t2. (\\<And>p. p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow> P (p \\<bullet> t1) t2) \\<Longrightarrow>\n            (\\<And>a b. ((a \\<rightleftharpoons> b) \\<bullet> t1) =\\<^sub>\\<alpha> t1 \\<Longrightarrow> P ((a \\<rightleftharpoons> b) \\<bullet> t1) t1) \\<Longrightarrow> (\\<And>a b. ((a \\<rightleftharpoons> b) \\<bullet> t2) =\\<^sub>\\<alpha> t2 \\<Longrightarrow> P ((a \\<rightleftharpoons> b) \\<bullet> t2) t2) \\<Longrightarrow>\n            (\\<exists>p. (bn \\<alpha>1, t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) p (bn \\<alpha>2, t2) \\<and> (bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)) \\<Longrightarrow>\n            P (tAct \\<alpha>1 t1) (tAct \\<alpha>2 t2)\"\n  shows \"P t1 t2\"", "lemma alpha_Tree_eqvt_aux:\n  assumes \"\\<And>a b. (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t \\<longleftrightarrow> p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> p \\<bullet> t\"\n  shows \"p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t = supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)\"", "lemma alpha_Tree_eqvt': \"t1 =\\<^sub>\\<alpha> t2 \\<longleftrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\"", "lemma alpha_Tree_eqvt [eqvt]: \"t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\"", "lemma alpha_Tree_reflp: \"reflp alpha_Tree\"", "lemma alpha_Tree_symp: \"symp alpha_Tree\"", "lemma alpha_Tree_transp: \"transp alpha_Tree\"", "lemma alpha_Tree_equivp: \"equivp alpha_Tree\"", "lemma alpha_Tree_supp_rel:\n  assumes \"t1 =\\<^sub>\\<alpha> t2\"\n  shows \"supp_rel (=\\<^sub>\\<alpha>) t1 = supp_rel (=\\<^sub>\\<alpha>) t2\"", "lemma alpha_Tree_tAct:\n  assumes \"t1 =\\<^sub>\\<alpha> t2\"\n  shows \"tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2\"", "lemma supp_rel_tNot [simp]: \"supp_rel (=\\<^sub>\\<alpha>) (tNot t) = supp_rel (=\\<^sub>\\<alpha>) t\"", "lemma supp_rel_tPred [simp]: \"supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) = supp \\<phi>\"", "lemma infinite_mono: \"infinite S \\<Longrightarrow> (\\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> T) \\<Longrightarrow> infinite T\"", "lemma supp_rel_tAct [simp]:\n  assumes \"finite (supp_rel (=\\<^sub>\\<alpha>) t)\"\n  shows \"supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t) = supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\"", "lemma Tree\\<^sub>\\<alpha>_abs_rep [simp]: \"abs_Tree\\<^sub>\\<alpha> (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = t\\<^sub>\\<alpha>\"", "lemma Tree\\<^sub>\\<alpha>_rep_abs [simp]: \"rep_Tree\\<^sub>\\<alpha> (abs_Tree\\<^sub>\\<alpha> t) =\\<^sub>\\<alpha> t\"", "lemmas permute_Tree\\<^sub>\\<alpha>.abs_eq [eqvt, simp]", "lemma alpha_Tree_permute_rep_commute [simp]: \"p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\\<^sub>\\<alpha> rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\"", "lemma map_bset_abs_rep_Tree\\<^sub>\\<alpha>: \"map_bset abs_Tree\\<^sub>\\<alpha> (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = tset\\<^sub>\\<alpha>\"", "lemma Conj\\<^sub>\\<alpha>_def': \"Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> = abs_Tree\\<^sub>\\<alpha> (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\"", "lemma Conj\\<^sub>\\<alpha>_eqvt [eqvt, simp]: \"p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> = Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)\"", "lemma Not\\<^sub>\\<alpha>_eqvt [eqvt, simp]: \"p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha> = Not\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\"", "lemma Pred\\<^sub>\\<alpha>_eqvt [eqvt, simp]: \"p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi> = Pred\\<^sub>\\<alpha> (p \\<bullet> \\<phi>)\"", "lemma Act\\<^sub>\\<alpha>_eqvt [eqvt, simp]: \"p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha> = Act\\<^sub>\\<alpha> (p \\<bullet> \\<alpha>) (p \\<bullet> t\\<^sub>\\<alpha>)\"", "lemma Conj\\<^sub>\\<alpha>_eq_iff [simp]: \"Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> = Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha> \\<longleftrightarrow> tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>\"", "lemma Not\\<^sub>\\<alpha>_eq_iff [simp]: \"Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> = Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha> \\<longleftrightarrow> t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\"", "lemma Pred\\<^sub>\\<alpha>_eq_iff [simp]: \"Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2 \\<longleftrightarrow> \\<phi>1 = \\<phi>2\"", "lemma Act\\<^sub>\\<alpha>_eq_iff: \"Act\\<^sub>\\<alpha> \\<alpha>1 t1 = Act\\<^sub>\\<alpha> \\<alpha>2 t2 \\<longleftrightarrow> tAct \\<alpha>1 (rep_Tree\\<^sub>\\<alpha> t1) =\\<^sub>\\<alpha> tAct \\<alpha>2 (rep_Tree\\<^sub>\\<alpha> t2)\"", "lemma Tree\\<^sub>\\<alpha>_free [simp]:\n  shows \"Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\"\n  and \"Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq> Pred\\<^sub>\\<alpha> \\<phi>\"\n  and \"Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq> Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>\"\n  and \"Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha> \\<noteq> Pred\\<^sub>\\<alpha> \\<phi>\"\n  and \"Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> \\<noteq> Act\\<^sub>\\<alpha> \\<alpha> t2\\<^sub>\\<alpha>\"\n  and \"Pred\\<^sub>\\<alpha> \\<phi> \\<noteq> Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>\"", "lemma supp_alpha_supp_rel: \"supp t\\<^sub>\\<alpha> = supp_rel (=\\<^sub>\\<alpha>) (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"", "lemma supp_Conj\\<^sub>\\<alpha> [simp]: \"supp (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = supp tset\\<^sub>\\<alpha>\"", "lemma supp_Not\\<^sub>\\<alpha> [simp]: \"supp (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>\"", "lemma supp_Pred\\<^sub>\\<alpha> [simp]: \"supp (Pred\\<^sub>\\<alpha> \\<phi>) = supp \\<phi>\"", "lemma supp_Act\\<^sub>\\<alpha> [simp]:\n  assumes \"finite (supp t\\<^sub>\\<alpha>)\"\n  shows \"supp (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>) = supp \\<alpha> \\<union> supp t\\<^sub>\\<alpha> - bn \\<alpha>\"", "lemma Tree\\<^sub>\\<alpha>_induct [case_names Conj\\<^sub>\\<alpha> Not\\<^sub>\\<alpha> Pred\\<^sub>\\<alpha> Act\\<^sub>\\<alpha> Env\\<^sub>\\<alpha>, induct type: Tree\\<^sub>\\<alpha>]:\n  fixes t\\<^sub>\\<alpha>\n  assumes \"\\<And>tset\\<^sub>\\<alpha>. (\\<And>x. x \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow> P x) \\<Longrightarrow> P (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\"\n    and \"\\<And>t\\<^sub>\\<alpha>. P t\\<^sub>\\<alpha> \\<Longrightarrow> P (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"\n    and \"\\<And>pred. P (Pred\\<^sub>\\<alpha> pred)\"\n    and \"\\<And>act t\\<^sub>\\<alpha>. P t\\<^sub>\\<alpha> \\<Longrightarrow> P (Act\\<^sub>\\<alpha> act t\\<^sub>\\<alpha>)\"\n  shows \"P t\\<^sub>\\<alpha>\"", "lemma hereditarily_fs_eqvt [eqvt]:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\"", "lemma hereditarily_fs_alpha_renaming:\n  assumes \"Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha> = Act\\<^sub>\\<alpha> \\<alpha>' t\\<^sub>\\<alpha>'\"\n  shows \"hereditarily_fs t\\<^sub>\\<alpha> \\<longleftrightarrow> hereditarily_fs t\\<^sub>\\<alpha>'\"", "lemma hereditarily_fs_implies_finite_supp:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"finite (supp t\\<^sub>\\<alpha>)\"", "lemma Abs_formula_inverse [simp]:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"Rep_formula (Abs_formula t\\<^sub>\\<alpha>) = t\\<^sub>\\<alpha>\"", "lemma Rep_formula' [simp]: \"hereditarily_fs (Rep_formula x)\"", "lemma Abs_formula_eqvt [simp]:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"p \\<bullet> Abs_formula t\\<^sub>\\<alpha> = Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)\"", "lemma supp_Abs_formula [simp]:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>\"", "lemmas Rep_formula_eqvt [eqvt, simp] = permute_formula.rep_eq[symmetric]", "lemma supp_Rep_formula [simp]: \"supp (Rep_formula x) = supp x\"", "lemma supp_map_bset_Rep_formula [simp]: \"supp (map_bset Rep_formula xset) = supp xset\"", "lemma finite_supp_implies_hereditarily_fs_Conj\\<^sub>\\<alpha> [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"hereditarily_fs (Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset))\"", "lemma Conj_rep_eq:\n  assumes \"finite (supp xset)\"\n  shows \"Rep_formula (Conj xset) = Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset)\"", "lemma Conj_eqvt [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"p \\<bullet> Conj xset = Conj (p \\<bullet> xset)\"", "lemma Not_eqvt [eqvt, simp]: \"p \\<bullet> Not x = Not (p \\<bullet> x)\"", "lemma Pred_eqvt [eqvt, simp]: \"p \\<bullet> Pred \\<phi> = Pred (p \\<bullet> \\<phi>)\"", "lemma Act_eqvt [eqvt, simp]: \"p \\<bullet> Act \\<alpha> x = Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\"", "lemma supp_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"supp (Conj xset) = supp xset\"", "lemma supp_Not [simp]: \"supp (Not x) = supp x\"", "lemma supp_Pred [simp]: \"supp (Pred \\<phi>) = supp \\<phi>\"", "lemma supp_Act [simp]: \"supp (Act \\<alpha> x) = supp \\<alpha> \\<union> supp x - bn \\<alpha>\"", "lemma bn_fresh_Act [simp]: \"bn \\<alpha> \\<sharp>* Act \\<alpha> x\"", "lemma Conj_eq_iff [simp]:\n  assumes \"finite (supp xset1)\" and \"finite (supp xset2)\"\n  shows \"Conj xset1 = Conj xset2 \\<longleftrightarrow> xset1 = xset2\"", "lemma Not_eq_iff [simp]: \"Not x1 = Not x2 \\<longleftrightarrow> x1 = x2\"", "lemma Pred_eq_iff [simp]: \"Pred \\<phi>1 = Pred \\<phi>2 \\<longleftrightarrow> \\<phi>1 = \\<phi>2\"", "lemma Act_eq_iff: \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<longleftrightarrow> Act\\<^sub>\\<alpha> \\<alpha>1 (Rep_formula x1) = Act\\<^sub>\\<alpha> \\<alpha>2 (Rep_formula x2)\"", "lemma Act_eq_iff_perm: \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<longleftrightarrow>\n  (\\<exists>p. supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and> (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> x1 = x2 \\<and> supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and> (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> \\<alpha>1 = \\<alpha>2)\"\n  (is \"?l \\<longleftrightarrow> ?r\")", "lemma Act_eq_iff_perm_renaming: \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<longleftrightarrow>\n  (\\<exists>p. supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and> (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> x1 = x2 \\<and> supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and> (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and> supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1)\"\n  (is \"?l \\<longleftrightarrow> ?r\")", "lemma Tree_free [simp]:\n  shows \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Not x\"\n  and \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Pred \\<phi>\"\n  and \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\"\n  and \"Not x \\<noteq> Pred \\<phi>\"\n  and \"Not x1 \\<noteq> Act \\<alpha> x2\"\n  and \"Pred \\<phi> \\<noteq> Act \\<alpha> x\"", "lemma formula_induct [case_names Conj Not Pred Act, induct type: formula]:\n  fixes x\n  assumes \"\\<And>xset. finite (supp xset) \\<Longrightarrow> (\\<And>x. x \\<in> set_bset xset \\<Longrightarrow> P x) \\<Longrightarrow> P (Conj xset)\"\n    and \"\\<And>formula. P formula \\<Longrightarrow> P (Not formula)\"\n    and \"\\<And>pred. P (Pred pred)\"\n    and \"\\<And>act formula. P formula \\<Longrightarrow> P (Act act formula)\"\n  shows \"P x\"", "lemma formula_strong_induct_aux:\n  fixes x\n  assumes \"\\<And>xset c. finite (supp xset) \\<Longrightarrow> (\\<And>x. x \\<in> set_bset xset \\<Longrightarrow> (\\<And>c. P c x)) \\<Longrightarrow> P c (Conj xset)\"\n    and \"\\<And>formula c. (\\<And>c. P c formula) \\<Longrightarrow> P c (Not formula)\"\n    and \"\\<And>pred c. P c (Pred pred)\"\n    and \"\\<And>act formula c. bn act \\<sharp>* c \\<Longrightarrow> (\\<And>c. P c formula) \\<Longrightarrow> P c (Act act formula)\"\n  shows \"\\<And>(c :: 'd::fs) p. P c (p \\<bullet> x)\"", "lemmas formula_strong_induct = formula_strong_induct_aux[where p=0, simplified]"], "translations": [["", "lemma wf_Tree_wf: \"wf Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf Tree_wf", "unfolding wf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       (\\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x) \\<longrightarrow>\n       All P", "proof (rule allI, rule impI, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P x", "fix P :: \"('idx,'pred,'act) Tree \\<Rightarrow> bool\" and t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P x", "assume \"\\<forall>x. (\\<forall>y. (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow> P x\""], ["proof (state)\nthis:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P x", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x", "show \"P t\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (1 subgoal):\n 1. P t", "proof (induction t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> set_bset x;\n                    \\<forall>x.\n                       (\\<forall>y.\n                           (y, x) \\<in> Tree_wf \\<longrightarrow>\n                           P y) \\<longrightarrow>\n                       P x\\<rbrakk>\n                   \\<Longrightarrow> P xa;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tConj x)\n 2. \\<And>t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tNot t)\n 3. \\<And>x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P (tPred x)\n 4. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "case tConj"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> set_bset x_;\n   \\<forall>x.\n      (\\<forall>y.\n          (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n      P x\\<rbrakk>\n  \\<Longrightarrow> P ?xa\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>xa.\n                   \\<lbrakk>xa \\<in> set_bset x;\n                    \\<forall>x.\n                       (\\<forall>y.\n                           (y, x) \\<in> Tree_wf \\<longrightarrow>\n                           P y) \\<longrightarrow>\n                       P x\\<rbrakk>\n                   \\<Longrightarrow> P xa;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tConj x)\n 2. \\<And>t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tNot t)\n 3. \\<And>x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P (tPred x)\n 4. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xa \\<in> set_bset x_;\n   \\<forall>x.\n      (\\<forall>y.\n          (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n      P x\\<rbrakk>\n  \\<Longrightarrow> P ?xa\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xa \\<in> set_bset x_;\n   \\<forall>x.\n      (\\<forall>y.\n          (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n      P x\\<rbrakk>\n  \\<Longrightarrow> P ?xa\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (1 subgoal):\n 1. P (tConj x_)", "by (metis Tree.distinct(2) Tree.distinct(5) Tree.inject(1) Tree_wf.cases)"], ["proof (state)\nthis:\n  P (tConj x_)\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tNot t)\n 2. \\<And>x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P (tPred x)\n 3. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tNot t)\n 2. \\<And>x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P (tPred x)\n 3. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "case tNot"], ["proof (state)\nthis:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x \\<Longrightarrow>\n  P t_\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tNot t)\n 2. \\<And>x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P (tPred x)\n 3. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x \\<Longrightarrow>\n  P t_\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x \\<Longrightarrow>\n  P t_\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (1 subgoal):\n 1. P (tNot t_)", "by (metis Tree.distinct(1) Tree.distinct(9) Tree.inject(2) Tree_wf.cases)"], ["proof (state)\nthis:\n  P (tNot t_)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P (tPred x)\n 2. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P (tPred x)\n 2. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "case tPred"], ["proof (state)\nthis:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>x.\n          (\\<forall>y.\n              (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n          P x \\<Longrightarrow>\n       P (tPred x)\n 2. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (1 subgoal):\n 1. P (tPred x_)", "by (metis Tree.distinct(11) Tree.distinct(3) Tree.distinct(7) Tree_wf.cases)"], ["proof (state)\nthis:\n  P (tPred x_)\n\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "case tAct"], ["proof (state)\nthis:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x \\<Longrightarrow>\n  P t_\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       \\<lbrakk>\\<forall>x.\n                   (\\<forall>y.\n                       (y, x) \\<in> Tree_wf \\<longrightarrow>\n                       P y) \\<longrightarrow>\n                   P x \\<Longrightarrow>\n                P t;\n        \\<forall>x.\n           (\\<forall>y.\n               (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n           P x\\<rbrakk>\n       \\<Longrightarrow> P (tAct x1a t)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x \\<Longrightarrow>\n  P t_\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x \\<Longrightarrow>\n  P t_\n  \\<forall>x.\n     (\\<forall>y.\n         (y, x) \\<in> Tree_wf \\<longrightarrow> P y) \\<longrightarrow>\n     P x\n\ngoal (1 subgoal):\n 1. P (tAct x1a_ t_)", "by (metis Tree.distinct(10) Tree.distinct(6) Tree.inject(4) Tree_wf.cases)"], ["proof (state)\nthis:\n  P (tAct x1a_ t_)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P t\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We define a permutation operation on the type of trees.\\<close>"], ["", "instantiation Tree :: (type, pt, pt) pt\nbegin"], ["", "primrec permute_Tree :: \"perm \\<Rightarrow> (_,_,_) Tree \\<Rightarrow> (_,_,_) Tree\" where\n    \"p \\<bullet> (tConj tset) = tConj (map_bset (permute p) tset)\"  \\<comment> \\<open>neat trick to get around the fact that~@{term tset} is not of permutation type yet\\<close>\n  | \"p \\<bullet> (tNot t) = tNot (p \\<bullet> t)\"\n  | \"p \\<bullet> (tPred \\<phi>) = tPred (p \\<bullet> \\<phi>)\"\n  | \"p \\<bullet> (tAct \\<alpha> t) = tAct (p \\<bullet> \\<alpha>) (p \\<bullet> t)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c) Tree, pt_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "fix t :: \"(_,_,_) Tree\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "show \"0 \\<bullet> t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<bullet> t = t", "proof (induction t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           0 \\<bullet> xa = xa) \\<Longrightarrow>\n       0 \\<bullet> tConj x = tConj x\n 2. \\<And>t. 0 \\<bullet> t = t \\<Longrightarrow> 0 \\<bullet> tNot t = tNot t\n 3. \\<And>x. 0 \\<bullet> tPred x = tPred x\n 4. \\<And>x1a t.\n       0 \\<bullet> t = t \\<Longrightarrow>\n       0 \\<bullet> tAct x1a t = tAct x1a t", "case tConj"], ["proof (state)\nthis:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow> 0 \\<bullet> ?xa = ?xa\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           0 \\<bullet> xa = xa) \\<Longrightarrow>\n       0 \\<bullet> tConj x = tConj x\n 2. \\<And>t. 0 \\<bullet> t = t \\<Longrightarrow> 0 \\<bullet> tNot t = tNot t\n 3. \\<And>x. 0 \\<bullet> tPred x = tPred x\n 4. \\<And>x1a t.\n       0 \\<bullet> t = t \\<Longrightarrow>\n       0 \\<bullet> tAct x1a t = tAct x1a t", "then"], ["proof (chain)\npicking this:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow> 0 \\<bullet> ?xa = ?xa", "show ?case"], ["proof (prove)\nusing this:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow> 0 \\<bullet> ?xa = ?xa\n\ngoal (1 subgoal):\n 1. 0 \\<bullet> tConj x_ = tConj x_", "by (simp, transfer) (auto simp: image_def)"], ["proof (state)\nthis:\n  0 \\<bullet> tConj x_ = tConj x_\n\ngoal (3 subgoals):\n 1. \\<And>t. 0 \\<bullet> t = t \\<Longrightarrow> 0 \\<bullet> tNot t = tNot t\n 2. \\<And>x. 0 \\<bullet> tPred x = tPred x\n 3. \\<And>x1a t.\n       0 \\<bullet> t = t \\<Longrightarrow>\n       0 \\<bullet> tAct x1a t = tAct x1a t", "qed simp_all"], ["proof (state)\nthis:\n  0 \\<bullet> t = t\n\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "fix p q :: perm and t :: \"(_,_,_) Tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "show \"(p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t", "proof (induction t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           (p + q) \\<bullet> xa =\n           p \\<bullet> q \\<bullet> xa) \\<Longrightarrow>\n       (p + q) \\<bullet> tConj x = p \\<bullet> q \\<bullet> tConj x\n 2. \\<And>t.\n       (p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t \\<Longrightarrow>\n       (p + q) \\<bullet> tNot t = p \\<bullet> q \\<bullet> tNot t\n 3. \\<And>x. (p + q) \\<bullet> tPred x = p \\<bullet> q \\<bullet> tPred x\n 4. \\<And>x1a t.\n       (p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t \\<Longrightarrow>\n       (p + q) \\<bullet> tAct x1a t = p \\<bullet> q \\<bullet> tAct x1a t", "case tConj"], ["proof (state)\nthis:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow>\n  (p + q) \\<bullet> ?xa = p \\<bullet> q \\<bullet> ?xa\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           (p + q) \\<bullet> xa =\n           p \\<bullet> q \\<bullet> xa) \\<Longrightarrow>\n       (p + q) \\<bullet> tConj x = p \\<bullet> q \\<bullet> tConj x\n 2. \\<And>t.\n       (p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t \\<Longrightarrow>\n       (p + q) \\<bullet> tNot t = p \\<bullet> q \\<bullet> tNot t\n 3. \\<And>x. (p + q) \\<bullet> tPred x = p \\<bullet> q \\<bullet> tPred x\n 4. \\<And>x1a t.\n       (p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t \\<Longrightarrow>\n       (p + q) \\<bullet> tAct x1a t = p \\<bullet> q \\<bullet> tAct x1a t", "then"], ["proof (chain)\npicking this:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow>\n  (p + q) \\<bullet> ?xa = p \\<bullet> q \\<bullet> ?xa", "show ?case"], ["proof (prove)\nusing this:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow>\n  (p + q) \\<bullet> ?xa = p \\<bullet> q \\<bullet> ?xa\n\ngoal (1 subgoal):\n 1. (p + q) \\<bullet> tConj x_ = p \\<bullet> q \\<bullet> tConj x_", "by (simp, transfer) (auto simp: image_def)"], ["proof (state)\nthis:\n  (p + q) \\<bullet> tConj x_ = p \\<bullet> q \\<bullet> tConj x_\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       (p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t \\<Longrightarrow>\n       (p + q) \\<bullet> tNot t = p \\<bullet> q \\<bullet> tNot t\n 2. \\<And>x. (p + q) \\<bullet> tPred x = p \\<bullet> q \\<bullet> tPred x\n 3. \\<And>x1a t.\n       (p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t \\<Longrightarrow>\n       (p + q) \\<bullet> tAct x1a t = p \\<bullet> q \\<bullet> tAct x1a t", "qed simp_all"], ["proof (state)\nthis:\n  (p + q) \\<bullet> t = p \\<bullet> q \\<bullet> t\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Now that the type of trees---and hence the type of (bounded) sets of trees---is a permutation\ntype, we can massage the definition of~@{term \"p \\<bullet> tConj tset\"} into its more usual form.\\<close>"], ["", "lemma permute_Tree_tConj [simp]: \"p \\<bullet> tConj tset = tConj (p \\<bullet> tset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset = tConj (p \\<bullet> tset)", "by (simp add: map_bset_permute)"], ["", "declare permute_Tree.simps(1) [simp del]"], ["", "text \\<open>The relation~@{const Tree_wf} is equivariant.\\<close>"], ["", "lemma Tree_wf_eqvt_aux:\n  assumes \"(t1, t2) \\<in> Tree_wf\" shows \"(p \\<bullet> t1, p \\<bullet> t2) \\<in> Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> t1, p \\<bullet> t2) \\<in> Tree_wf", "using assms"], ["proof (prove)\nusing this:\n  (t1, t2) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (p \\<bullet> t1, p \\<bullet> t2) \\<in> Tree_wf", "proof (induction rule: Tree_wf.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       t \\<in> set_bset tset \\<Longrightarrow>\n       (p \\<bullet> t, p \\<bullet> tConj tset) \\<in> Tree_wf\n 2. \\<And>t. (p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf\n 3. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "fix t :: \"('a,'b,'c) Tree\" and tset :: \"('a,'b,'c) Tree set['a]\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       t \\<in> set_bset tset \\<Longrightarrow>\n       (p \\<bullet> t, p \\<bullet> tConj tset) \\<in> Tree_wf\n 2. \\<And>t. (p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf\n 3. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "assume \"t \\<in> set_bset tset\""], ["proof (state)\nthis:\n  t \\<in> set_bset tset\n\ngoal (3 subgoals):\n 1. \\<And>t tset.\n       t \\<in> set_bset tset \\<Longrightarrow>\n       (p \\<bullet> t, p \\<bullet> tConj tset) \\<in> Tree_wf\n 2. \\<And>t. (p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf\n 3. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "then"], ["proof (chain)\npicking this:\n  t \\<in> set_bset tset", "show \"(p \\<bullet> t, p \\<bullet> tConj tset) \\<in> Tree_wf\""], ["proof (prove)\nusing this:\n  t \\<in> set_bset tset\n\ngoal (1 subgoal):\n 1. (p \\<bullet> t, p \\<bullet> tConj tset) \\<in> Tree_wf", "by (metis Tree_wf.intros(1) mem_permute_iff permute_Tree_tConj set_bset_eqvt)"], ["proof (state)\nthis:\n  (p \\<bullet> t, p \\<bullet> tConj tset) \\<in> Tree_wf\n\ngoal (2 subgoals):\n 1. \\<And>t. (p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf\n 2. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t. (p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf\n 2. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "fix t :: \"('a,'b,'c) Tree\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t. (p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf\n 2. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "show \"(p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf", "by (metis Tree_wf.intros(2) permute_Tree.simps(2))"], ["proof (state)\nthis:\n  (p \\<bullet> t, p \\<bullet> tNot t) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "fix t :: \"('a,'b,'c) Tree\" and \\<alpha>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t \\<alpha>.\n       (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "show \"(p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf", "by (metis Tree_wf.intros(3) permute_Tree.simps(4))"], ["proof (state)\nthis:\n  (p \\<bullet> t, p \\<bullet> tAct \\<alpha> t) \\<in> Tree_wf\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Tree_wf_eqvt [eqvt, simp]: \"p \\<bullet> Tree_wf = Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Tree_wf = Tree_wf", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<bullet> Tree_wf \\<subseteq> Tree_wf\n 2. Tree_wf \\<subseteq> p \\<bullet> Tree_wf", "show \"p \\<bullet> Tree_wf \\<subseteq> Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Tree_wf \\<subseteq> Tree_wf", "by (auto simp add: permute_set_def) (rule Tree_wf_eqvt_aux)"], ["proof (state)\nthis:\n  p \\<bullet> Tree_wf \\<subseteq> Tree_wf\n\ngoal (1 subgoal):\n 1. Tree_wf \\<subseteq> p \\<bullet> Tree_wf", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Tree_wf \\<subseteq> p \\<bullet> Tree_wf", "show \"Tree_wf \\<subseteq> p \\<bullet> Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree_wf \\<subseteq> p \\<bullet> Tree_wf", "by (auto simp add: permute_set_def) (metis Tree_wf_eqvt_aux permute_minus_cancel(1))"], ["proof (state)\nthis:\n  Tree_wf \\<subseteq> p \\<bullet> Tree_wf\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Tree_wf_eqvt': \"eqvt Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt Tree_wf", "by (metis Tree_wf_eqvt eqvtI)"], ["", "text \\<open>The definition of~@{const permute} for trees gives rise to the usual notion of support. The\nfollowing lemmas, one for each constructor, describe the support of trees.\\<close>"], ["", "lemma supp_tConj [simp]: \"supp (tConj tset) = supp tset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (tConj tset) = supp tset", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> tConj tset \\<noteq>\n             tConj tset}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> tset \\<noteq> tset}}", "by simp"], ["", "lemma supp_tNot [simp]: \"supp (tNot t) = supp t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (tNot t) = supp t", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> tNot t \\<noteq> tNot t}} =\n    {a. infinite {b. (a \\<rightleftharpoons> b) \\<bullet> t \\<noteq> t}}", "by simp"], ["", "lemma supp_tPred [simp]: \"supp (tPred \\<phi>) = supp \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (tPred \\<phi>) = supp \\<phi>", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> tPred \\<phi> \\<noteq>\n             tPred \\<phi>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> \\<phi> \\<noteq> \\<phi>}}", "by simp"], ["", "lemma supp_tAct [simp]: \"supp (tAct \\<alpha> t) = supp \\<alpha> \\<union> supp t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (tAct \\<alpha> t) = supp \\<alpha> \\<union> supp t", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t \\<noteq>\n             tAct \\<alpha> t}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n             \\<alpha>}} \\<union>\n    {a. infinite {b. (a \\<rightleftharpoons> b) \\<bullet> t \\<noteq> t}}", "by (simp add: Collect_imp_eq Collect_neg_eq)"], ["", "subsection \\<open>Trees modulo \\texorpdfstring{$\\alpha$}{alpha}-equivalence\\<close>"], ["", "text \\<open>We generalize the notion of support, which considers whether a permuted element is\n\\emph{equal} to itself, to arbitrary endorelations. This is available as @{const supp_rel} in\nNominal Isabelle.\\<close>"], ["", "lemma supp_rel_eqvt [eqvt]:\n  \"p \\<bullet> supp_rel R x = supp_rel (p \\<bullet> R) (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel R x = supp_rel (p \\<bullet> R) (p \\<bullet> x)", "by (simp add: supp_rel_def)"], ["", "text \\<open>Usually, the definition of $\\alpha$-equivalence presupposes a notion of free variables.\nHowever, the variables that are ``free'' in an infinitary conjunction are not necessarily those\nthat are free in one of the conjuncts. For instance, consider a conjunction over \\emph{all} names.\nApplying any permutation will yield the same conjunction, i.e., this conjunction has \\emph{no} free\nvariables.\n\nTo obtain the correct notion of free variables for infinitary conjunctions, we initially defined\n$\\alpha$-equivalence and free variables via mutual recursion. In particular, we defined the free\nvariables of a conjunction as term @{term \"fv_Tree (tConj tset) = supp_rel alpha_Tree (tConj tset)\"}.\n\nWe then realized that it is not necessary to define the concept of ``free variables'' at all, but\nthe definition of $\\alpha$-equivalence becomes much simpler (in particular, it is no longer mutually\nrecursive) if we directly use the support modulo $\\alpha$-equivalence.\\<close>"], ["", "text \\<open>The following lemmas and constructions are used to prove termination of our definition.\\<close>"], ["", "lemma supp_rel_cong [fundef_cong]:\n  \"\\<lbrakk> x=x'; \\<And>a b. R ((a \\<rightleftharpoons> b) \\<bullet> x') x' \\<longleftrightarrow> R' ((a \\<rightleftharpoons> b) \\<bullet> x') x' \\<rbrakk> \\<Longrightarrow> supp_rel R x = supp_rel R' x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = x';\n     \\<And>a b.\n        R ((a \\<rightleftharpoons> b) \\<bullet> x') x' =\n        R' ((a \\<rightleftharpoons> b) \\<bullet> x') x'\\<rbrakk>\n    \\<Longrightarrow> supp_rel R x = supp_rel R' x'", "by (simp add: supp_rel_def)"], ["", "lemma rel_bset_cong [fundef_cong]:\n  \"\\<lbrakk> x=x'; y=y'; \\<And>a b. a \\<in> set_bset x' \\<Longrightarrow> b \\<in> set_bset y' \\<Longrightarrow> R a b \\<longleftrightarrow> R' a b \\<rbrakk> \\<Longrightarrow> rel_bset R x y \\<longleftrightarrow> rel_bset R' x' y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = x'; y = y';\n     \\<And>a b.\n        \\<lbrakk>a \\<in> set_bset x'; b \\<in> set_bset y'\\<rbrakk>\n        \\<Longrightarrow> R a b = R' a b\\<rbrakk>\n    \\<Longrightarrow> rel_bset R x y = rel_bset R' x' y'", "by (simp add: rel_bset_def rel_set_def)"], ["", "lemma alpha_set_cong [fundef_cong]:\n  \"\\<lbrakk> bs=bs'; x=x'; R (p' \\<bullet> x') y' \\<longleftrightarrow> R' (p' \\<bullet> x') y'; f x' = f' x'; f y' = f' y'; p=p'; cs=cs'; y=y' \\<rbrakk> \\<Longrightarrow>\n    alpha_set (bs, x) R f p (cs, y) \\<longleftrightarrow> alpha_set (bs', x') R' f' p' (cs', y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bs = bs'; x = x';\n     R (p' \\<bullet> x') y' = R' (p' \\<bullet> x') y'; f x' = f' x';\n     f y' = f' y'; p = p'; cs = cs'; y = y'\\<rbrakk>\n    \\<Longrightarrow> (bs, x) \\<approx>set R f p (cs, y) =\n                      (bs', x') \\<approx>set R' f' p' (cs', y')", "by (simp add: alpha_set)"], ["", "quotient_type\n  ('idx,'pred,'act) Tree\\<^sub>p = \"('idx,'pred::pt,'act::bn) Tree\" / \"hull_relp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp hull_relp", "by (fact hull_relp_equivp)"], ["", "lemma abs_Tree\\<^sub>p_eq [simp]: \"abs_Tree\\<^sub>p (p \\<bullet> t) = abs_Tree\\<^sub>p t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_Tree\\<^sub>p (p \\<bullet> t) = abs_Tree\\<^sub>p t", "by (metis hull_relp.simps Tree\\<^sub>p.abs_eq_iff)"], ["", "lemma permute_rep_abs_Tree\\<^sub>p:\n  obtains p where \"rep_Tree\\<^sub>p (abs_Tree\\<^sub>p t) = p \\<bullet> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        rep_Tree\\<^sub>p (abs_Tree\\<^sub>p t) =\n        p \\<bullet> t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Quotient3_Tree\\<^sub>p Tree\\<^sub>p.abs_eq_iff rep_abs_rsp hull_relp.simps)"], ["", "lift_definition Tree_wf\\<^sub>p :: \"('idx,'pred::pt,'act::bn) Tree\\<^sub>p rel\" is\n  Tree_wf"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma Tree_wf\\<^sub>pI [simp]:\n  assumes \"(a, b) \\<in> Tree_wf\"\n  shows \"(abs_Tree\\<^sub>p (p \\<bullet> a), abs_Tree\\<^sub>p b) \\<in> Tree_wf\\<^sub>p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (abs_Tree\\<^sub>p (p \\<bullet> a), abs_Tree\\<^sub>p b)\n    \\<in> Tree_wf\\<^sub>p", "using assms"], ["proof (prove)\nusing this:\n  (a, b) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (abs_Tree\\<^sub>p (p \\<bullet> a), abs_Tree\\<^sub>p b)\n    \\<in> Tree_wf\\<^sub>p", "by (metis (erased, lifting) Tree\\<^sub>p.abs_eq_iff Tree_wf\\<^sub>p.abs_eq hull_relp.intros map_prod_simp rev_image_eqI)"], ["", "lemma Tree_wf\\<^sub>p_trivialI [simp]:\n  assumes \"(a, b) \\<in> Tree_wf\"\n  shows \"(abs_Tree\\<^sub>p a, abs_Tree\\<^sub>p b) \\<in> Tree_wf\\<^sub>p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (abs_Tree\\<^sub>p a, abs_Tree\\<^sub>p b) \\<in> Tree_wf\\<^sub>p", "using assms"], ["proof (prove)\nusing this:\n  (a, b) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (abs_Tree\\<^sub>p a, abs_Tree\\<^sub>p b) \\<in> Tree_wf\\<^sub>p", "by (metis Tree_wf\\<^sub>pI permute_zero)"], ["", "lemma Tree_wf\\<^sub>pE:\n  assumes \"(a\\<^sub>p, b\\<^sub>p) \\<in> Tree_wf\\<^sub>p\"\n  obtains a b where \"a\\<^sub>p = abs_Tree\\<^sub>p a\" and \"b\\<^sub>p = abs_Tree\\<^sub>p b\" and \"(a,b) \\<in> Tree_wf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a\\<^sub>p = abs_Tree\\<^sub>p a;\n         b\\<^sub>p = abs_Tree\\<^sub>p b; (a, b) \\<in> Tree_wf\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (a\\<^sub>p, b\\<^sub>p) \\<in> Tree_wf\\<^sub>p\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a\\<^sub>p = abs_Tree\\<^sub>p a;\n         b\\<^sub>p = abs_Tree\\<^sub>p b; (a, b) \\<in> Tree_wf\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Pair_inject Tree_wf\\<^sub>p.abs_eq prod_fun_imageE)"], ["", "lemma wf_Tree_wf\\<^sub>p: \"wf Tree_wf\\<^sub>p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf Tree_wf\\<^sub>p", "proof (rule wf_subset[of \"inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. wf (inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p)\n 2. Tree_wf\\<^sub>p\n    \\<subseteq> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "show \"wf (inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p)", "by (metis Tree_wf_eqvt' wf_Tree_wf wf_hull_rel_relcomp wf_inv_image)"], ["proof (state)\nthis:\n  wf (inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p)\n\ngoal (1 subgoal):\n 1. Tree_wf\\<^sub>p\n    \\<subseteq> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Tree_wf\\<^sub>p\n    \\<subseteq> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "show \"Tree_wf\\<^sub>p \\<subseteq> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree_wf\\<^sub>p\n    \\<subseteq> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "proof (standard, case_tac \"x\", clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "fix a\\<^sub>p b\\<^sub>p :: \"('d, 'e, 'f) Tree\\<^sub>p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "assume \"(a\\<^sub>p, b\\<^sub>p) \\<in> Tree_wf\\<^sub>p\""], ["proof (state)\nthis:\n  (a\\<^sub>p, b\\<^sub>p) \\<in> Tree_wf\\<^sub>p\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "then"], ["proof (chain)\npicking this:\n  (a\\<^sub>p, b\\<^sub>p) \\<in> Tree_wf\\<^sub>p", "obtain a b where 1: \"a\\<^sub>p = abs_Tree\\<^sub>p a\" and 2: \"b\\<^sub>p = abs_Tree\\<^sub>p b\" and 3: \"(a,b) \\<in> Tree_wf\""], ["proof (prove)\nusing this:\n  (a\\<^sub>p, b\\<^sub>p) \\<in> Tree_wf\\<^sub>p\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a\\<^sub>p = abs_Tree\\<^sub>p a;\n         b\\<^sub>p = abs_Tree\\<^sub>p b; (a, b) \\<in> Tree_wf\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule Tree_wf\\<^sub>pE)"], ["proof (state)\nthis:\n  a\\<^sub>p = abs_Tree\\<^sub>p a\n  b\\<^sub>p = abs_Tree\\<^sub>p b\n  (a, b) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "from 1"], ["proof (chain)\npicking this:\n  a\\<^sub>p = abs_Tree\\<^sub>p a", "obtain p where 4: \"rep_Tree\\<^sub>p a\\<^sub>p = p \\<bullet> a\""], ["proof (prove)\nusing this:\n  a\\<^sub>p = abs_Tree\\<^sub>p a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        rep_Tree\\<^sub>p a\\<^sub>p = p \\<bullet> a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis permute_rep_abs_Tree\\<^sub>p)"], ["proof (state)\nthis:\n  rep_Tree\\<^sub>p a\\<^sub>p = p \\<bullet> a\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "from 2"], ["proof (chain)\npicking this:\n  b\\<^sub>p = abs_Tree\\<^sub>p b", "obtain q where 5: \"rep_Tree\\<^sub>p b\\<^sub>p = q \\<bullet> b\""], ["proof (prove)\nusing this:\n  b\\<^sub>p = abs_Tree\\<^sub>p b\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        rep_Tree\\<^sub>p b\\<^sub>p = q \\<bullet> b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis permute_rep_abs_Tree\\<^sub>p)"], ["proof (state)\nthis:\n  rep_Tree\\<^sub>p b\\<^sub>p = q \\<bullet> b\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "have \"(p \\<bullet> a, q \\<bullet> a) \\<in> hull_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> a, q \\<bullet> a) \\<in> hull_rel", "by (metis hull_rel.simps permute_minus_cancel(2) permute_plus)"], ["proof (state)\nthis:\n  (p \\<bullet> a, q \\<bullet> a) \\<in> hull_rel\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "moreover"], ["proof (state)\nthis:\n  (p \\<bullet> a, q \\<bullet> a) \\<in> hull_rel\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "from 3"], ["proof (chain)\npicking this:\n  (a, b) \\<in> Tree_wf", "have \"(q \\<bullet> a, q \\<bullet> b) \\<in> Tree_wf\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (q \\<bullet> a, q \\<bullet> b) \\<in> Tree_wf", "by (rule Tree_wf_eqvt_aux)"], ["proof (state)\nthis:\n  (q \\<bullet> a, q \\<bullet> b) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       (aa, ba) \\<in> Tree_wf\\<^sub>p \\<Longrightarrow>\n       (aa, ba) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "ultimately"], ["proof (chain)\npicking this:\n  (p \\<bullet> a, q \\<bullet> a) \\<in> hull_rel\n  (q \\<bullet> a, q \\<bullet> b) \\<in> Tree_wf", "show \"(a\\<^sub>p, b\\<^sub>p) \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p\""], ["proof (prove)\nusing this:\n  (p \\<bullet> a, q \\<bullet> a) \\<in> hull_rel\n  (q \\<bullet> a, q \\<bullet> b) \\<in> Tree_wf\n\ngoal (1 subgoal):\n 1. (a\\<^sub>p, b\\<^sub>p)\n    \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "using 4 5"], ["proof (prove)\nusing this:\n  (p \\<bullet> a, q \\<bullet> a) \\<in> hull_rel\n  (q \\<bullet> a, q \\<bullet> b) \\<in> Tree_wf\n  rep_Tree\\<^sub>p a\\<^sub>p = p \\<bullet> a\n  rep_Tree\\<^sub>p b\\<^sub>p = q \\<bullet> b\n\ngoal (1 subgoal):\n 1. (a\\<^sub>p, b\\<^sub>p)\n    \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p", "by auto"], ["proof (state)\nthis:\n  (a\\<^sub>p, b\\<^sub>p)\n  \\<in> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Tree_wf\\<^sub>p\n  \\<subseteq> inv_image (hull_rel O Tree_wf) rep_Tree\\<^sub>p\n\ngoal:\nNo subgoals!", "qed"], ["", "fun alpha_Tree_termination :: \"('a, 'b, 'c) Tree \\<times> ('a, 'b, 'c) Tree \\<Rightarrow> ('a, 'b::pt, 'c::bn) Tree\\<^sub>p set\" where\n  \"alpha_Tree_termination (t1, t2) = {abs_Tree\\<^sub>p t1, abs_Tree\\<^sub>p t2}\""], ["", "text \\<open>Here it comes \\ldots\\<close>"], ["", "function (sequential)\n  alpha_Tree :: \"('idx,'pred::pt,'act::bn) Tree \\<Rightarrow> ('idx,'pred,'act) Tree \\<Rightarrow> bool\" (infix \"=\\<^sub>\\<alpha>\" 50) where\n\\<comment> \\<open>@{const alpha_Tree}\\<close>\n  alpha_tConj: \"tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<longleftrightarrow> rel_bset alpha_Tree tset1 tset2\"\n| alpha_tNot: \"tNot t1 =\\<^sub>\\<alpha> tNot t2 \\<longleftrightarrow> t1 =\\<^sub>\\<alpha> t2\"\n| alpha_tPred: \"tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<longleftrightarrow> \\<phi>1 = \\<phi>2\"\n\\<comment> \\<open>the action may have binding names\\<close>\n| alpha_tAct: \"tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<longleftrightarrow>\n    (\\<exists>p. (bn \\<alpha>1, t1) \\<approx>set alpha_Tree (supp_rel alpha_Tree) p (bn \\<alpha>2, t2) \\<and> (bn \\<alpha>1, \\<alpha>1) \\<approx>set ((=)) supp p (bn \\<alpha>2, \\<alpha>2))\"\n| alpha_other: \"_ =\\<^sub>\\<alpha> _ \\<longleftrightarrow> False\"\n\\<comment> \\<open>254 subgoals (!)\\<close>"], ["proof (prove)\ngoal (254 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>tset1 tset2.\n                   x = (tConj tset1, tConj tset2) \\<Longrightarrow> P;\n        \\<And>t1 t2. x = (tNot t1, tNot t2) \\<Longrightarrow> P;\n        \\<And>\\<phi>1 \\<phi>2.\n           x = (tPred \\<phi>1, tPred \\<phi>2) \\<Longrightarrow> P;\n        \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n           x = (tAct \\<alpha>1 t1, tAct \\<alpha>2 t2) \\<Longrightarrow> P;\n        \\<And>v va. x = (tNot v, tConj va) \\<Longrightarrow> P;\n        \\<And>v va. x = (tNot v, tPred va) \\<Longrightarrow> P;\n        \\<And>v va vb. x = (tNot v, tAct va vb) \\<Longrightarrow> P;\n        \\<And>v va. x = (tPred v, tConj va) \\<Longrightarrow> P;\n        \\<And>v va. x = (tPred v, tNot va) \\<Longrightarrow> P;\n        \\<And>v va vb. x = (tPred v, tAct va vb) \\<Longrightarrow> P;\n        \\<And>v va vb. x = (tAct v va, tConj vb) \\<Longrightarrow> P;\n        \\<And>v va vb. x = (tAct v va, tNot vb) \\<Longrightarrow> P;\n        \\<And>v va vb. x = (tAct v va, tPred vb) \\<Longrightarrow> P;\n        \\<And>va v. x = (tConj va, tNot v) \\<Longrightarrow> P;\n        \\<And>va v. x = (tPred va, tNot v) \\<Longrightarrow> P;\n        \\<And>va vb v. x = (tAct va vb, tNot v) \\<Longrightarrow> P;\n        \\<And>va v. x = (tConj va, tPred v) \\<Longrightarrow> P;\n        \\<And>va v. x = (tNot va, tPred v) \\<Longrightarrow> P;\n        \\<And>va vb v. x = (tAct va vb, tPred v) \\<Longrightarrow> P;\n        \\<And>vb v va. x = (tConj vb, tAct v va) \\<Longrightarrow> P;\n        \\<And>vb v va. x = (tNot vb, tAct v va) \\<Longrightarrow> P;\n        \\<And>vb v va.\n           x = (tPred vb, tAct v va) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>tset1 tset2 tset1a tset2a.\n       (tConj tset1, tConj tset2) =\n       (tConj tset1a, tConj tset2a) \\<Longrightarrow>\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1a tset2a\n 3. \\<And>tset1 tset2 t1 t2.\n       (tConj tset1, tConj tset2) = (tNot t1, tNot t2) \\<Longrightarrow>\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n       alpha_Tree_sumC (t1, t2)\n 4. \\<And>tset1 tset2 \\<phi>1 \\<phi>2.\n       (tConj tset1, tConj tset2) =\n       (tPred \\<phi>1, tPred \\<phi>2) \\<Longrightarrow>\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n       (\\<phi>1 = \\<phi>2)\n 5. \\<And>tset1 tset2 \\<alpha>1 t1 \\<alpha>2 t2.\n       (tConj tset1, tConj tset2) =\n       (tAct \\<alpha>1 t1, tAct \\<alpha>2 t2) \\<Longrightarrow>\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n       (\\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (\\<lambda>x0 x1.\n                                 alpha_Tree_sumC\n                                  (x0,\n                                   x1)) supp_rel\n   (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2))\n 6. \\<And>tset1 tset2 v va.\n       (tConj tset1, tConj tset2) = (tNot v, tConj va) \\<Longrightarrow>\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n       False\n 7. \\<And>tset1 tset2 v va.\n       (tConj tset1, tConj tset2) = (tNot v, tPred va) \\<Longrightarrow>\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n       False\n 8. \\<And>tset1 tset2 v va vb.\n       (tConj tset1, tConj tset2) = (tNot v, tAct va vb) \\<Longrightarrow>\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n       False\n 9. \\<And>tset1 tset2 v va.\n       (tConj tset1, tConj tset2) = (tPred v, tConj va) \\<Longrightarrow>\n       rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n       False\n 10. \\<And>tset1 tset2 v va.\n        (tConj tset1, tConj tset2) = (tPred v, tNot va) \\<Longrightarrow>\n        rel_bset (\\<lambda>x0 x1. alpha_Tree_sumC (x0, x1)) tset1 tset2 =\n        False\nA total of 254 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All alpha_Tree_dom", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. wf ?R\n 2. \\<And>tset1 tset2 a b.\n       \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2\\<rbrakk>\n       \\<Longrightarrow> ((a, b), tConj tset1, tConj tset2) \\<in> ?R\n 3. \\<And>t1 t2. ((t1, t2), tNot t1, tNot t2) \\<in> ?R\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x.\n       ((x \\<bullet> t1, t2), tAct \\<alpha>1 t1, tAct \\<alpha>2 t2) \\<in> ?R\n 5. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x a b.\n       (((a \\<rightleftharpoons> b) \\<bullet> t1, t1), tAct \\<alpha>1 t1,\n        tAct \\<alpha>2 t2)\n       \\<in> ?R\n 6. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x a b.\n       (((a \\<rightleftharpoons> b) \\<bullet> t2, t2), tAct \\<alpha>1 t1,\n        tAct \\<alpha>2 t2)\n       \\<in> ?R", "let ?R = \"inv_image (max_ext Tree_wf\\<^sub>p) alpha_Tree_termination\""], ["proof (state)\ngoal (6 subgoals):\n 1. wf ?R\n 2. \\<And>tset1 tset2 a b.\n       \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2\\<rbrakk>\n       \\<Longrightarrow> ((a, b), tConj tset1, tConj tset2) \\<in> ?R\n 3. \\<And>t1 t2. ((t1, t2), tNot t1, tNot t2) \\<in> ?R\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x.\n       ((x \\<bullet> t1, t2), tAct \\<alpha>1 t1, tAct \\<alpha>2 t2) \\<in> ?R\n 5. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x a b.\n       (((a \\<rightleftharpoons> b) \\<bullet> t1, t1), tAct \\<alpha>1 t1,\n        tAct \\<alpha>2 t2)\n       \\<in> ?R\n 6. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x a b.\n       (((a \\<rightleftharpoons> b) \\<bullet> t2, t2), tAct \\<alpha>1 t1,\n        tAct \\<alpha>2 t2)\n       \\<in> ?R", "show \"wf ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image (max_ext Tree_wf\\<^sub>p) alpha_Tree_termination)", "by (metis max_ext_wf wf_Tree_wf\\<^sub>p wf_inv_image)"], ["proof (state)\nthis:\n  wf (inv_image (max_ext Tree_wf\\<^sub>p) alpha_Tree_termination)\n\ngoal (5 subgoals):\n 1. \\<And>tset1 tset2 a b.\n       \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2\\<rbrakk>\n       \\<Longrightarrow> ((a, b), tConj tset1, tConj tset2)\n                         \\<in> inv_image (max_ext Tree_wf\\<^sub>p)\n                                alpha_Tree_termination\n 2. \\<And>t1 t2.\n       ((t1, t2), tNot t1, tNot t2)\n       \\<in> inv_image (max_ext Tree_wf\\<^sub>p) alpha_Tree_termination\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x.\n       ((x \\<bullet> t1, t2), tAct \\<alpha>1 t1, tAct \\<alpha>2 t2)\n       \\<in> inv_image (max_ext Tree_wf\\<^sub>p) alpha_Tree_termination\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x a b.\n       (((a \\<rightleftharpoons> b) \\<bullet> t1, t1), tAct \\<alpha>1 t1,\n        tAct \\<alpha>2 t2)\n       \\<in> inv_image (max_ext Tree_wf\\<^sub>p) alpha_Tree_termination\n 5. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 x a b.\n       (((a \\<rightleftharpoons> b) \\<bullet> t2, t2), tAct \\<alpha>1 t1,\n        tAct \\<alpha>2 t2)\n       \\<in> inv_image (max_ext Tree_wf\\<^sub>p) alpha_Tree_termination", "qed (auto simp add: max_ext.simps Tree_wf.simps simp del: permute_Tree_tConj)"], ["", "text \\<open>We provide more descriptive case names for the automatically generated induction principle.\\<close>"], ["", "lemmas alpha_Tree_induct' = alpha_Tree.induct[case_names alpha_tConj alpha_tNot\n  alpha_tPred alpha_tAct \"alpha_other(1)\" \"alpha_other(2)\" \"alpha_other(3)\" \"alpha_other(4)\"\n  \"alpha_other(5)\" \"alpha_other(6)\" \"alpha_other(7)\" \"alpha_other(8)\" \"alpha_other(9)\"\n  \"alpha_other(10)\" \"alpha_other(11)\" \"alpha_other(12)\" \"alpha_other(13)\" \"alpha_other(14)\"\n  \"alpha_other(15)\" \"alpha_other(16)\" \"alpha_other(17)\" \"alpha_other(18)\"]"], ["", "lemma alpha_Tree_induct[case_names tConj tNot tPred tAct, consumes 1]:\n  assumes \"t1 =\\<^sub>\\<alpha> t2\"\n  and \"\\<And>tset1 tset2. (\\<And>a b. a \\<in> set_bset tset1 \\<Longrightarrow> b \\<in> set_bset tset2 \\<Longrightarrow> a =\\<^sub>\\<alpha> b \\<Longrightarrow> P a b) \\<Longrightarrow>\n            rel_bset (=\\<^sub>\\<alpha>) tset1 tset2 \\<Longrightarrow> P (tConj tset1) (tConj tset2)\"\n  and \"\\<And>t1 t2. t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow> P t1 t2 \\<Longrightarrow> P (tNot t1) (tNot t2)\"\n  and \"\\<And>\\<phi>. P (tPred \\<phi>) (tPred \\<phi>)\"\n  and \"\\<And>\\<alpha>1 t1 \\<alpha>2 t2. (\\<And>p. p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow> P (p \\<bullet> t1) t2) \\<Longrightarrow>\n            (\\<And>a b. ((a \\<rightleftharpoons> b) \\<bullet> t1) =\\<^sub>\\<alpha> t1 \\<Longrightarrow> P ((a \\<rightleftharpoons> b) \\<bullet> t1) t1) \\<Longrightarrow> (\\<And>a b. ((a \\<rightleftharpoons> b) \\<bullet> t2) =\\<^sub>\\<alpha> t2 \\<Longrightarrow> P ((a \\<rightleftharpoons> b) \\<bullet> t2) t2) \\<Longrightarrow>\n            (\\<exists>p. (bn \\<alpha>1, t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) p (bn \\<alpha>2, t2) \\<and> (bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)) \\<Longrightarrow>\n            P (tAct \\<alpha>1 t1) (tAct \\<alpha>2 t2)\"\n  shows \"P t1 t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P t1 t2", "using assms"], ["proof (prove)\nusing this:\n  t1 =\\<^sub>\\<alpha> t2\n  \\<lbrakk>\\<And>a b.\n              \\<lbrakk>a \\<in> set_bset ?tset1.0; b \\<in> set_bset ?tset2.0;\n               a =\\<^sub>\\<alpha> b\\<rbrakk>\n              \\<Longrightarrow> P a b;\n   rel_bset (=\\<^sub>\\<alpha>) ?tset1.0 ?tset2.0\\<rbrakk>\n  \\<Longrightarrow> P (tConj ?tset1.0) (tConj ?tset2.0)\n  \\<lbrakk>?t1.0 =\\<^sub>\\<alpha> ?t2.0; P ?t1.0 ?t2.0\\<rbrakk>\n  \\<Longrightarrow> P (tNot ?t1.0) (tNot ?t2.0)\n  P (tPred ?\\<phi>) (tPred ?\\<phi>)\n  \\<lbrakk>\\<And>p.\n              p \\<bullet> ?t1.0 =\\<^sub>\\<alpha> ?t2.0 \\<Longrightarrow>\n              P (p \\<bullet> ?t1.0) ?t2.0;\n   \\<And>a b.\n      (a \\<rightleftharpoons> b) \\<bullet> ?t1.0 =\\<^sub>\\<alpha>\n      ?t1.0 \\<Longrightarrow>\n      P ((a \\<rightleftharpoons> b) \\<bullet> ?t1.0) ?t1.0;\n   \\<And>a b.\n      (a \\<rightleftharpoons> b) \\<bullet> ?t2.0 =\\<^sub>\\<alpha>\n      ?t2.0 \\<Longrightarrow>\n      P ((a \\<rightleftharpoons> b) \\<bullet> ?t2.0) ?t2.0;\n   \\<exists>p.\n      (bn ?\\<alpha>1.0,\n       ?t1.0) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n         (=\\<^sub>\\<alpha>) p (bn ?\\<alpha>2.0, ?t2.0) \\<and>\n      (bn ?\\<alpha>1.0,\n       ?\\<alpha>1.0) \\<approx>set (=) supp p (bn ?\\<alpha>2.0,\n        ?\\<alpha>2.0)\\<rbrakk>\n  \\<Longrightarrow> P (tAct ?\\<alpha>1.0 ?t1.0) (tAct ?\\<alpha>2.0 ?t2.0)\n\ngoal (1 subgoal):\n 1. P t1 t2", "by (induction t1 t2 rule: alpha_Tree.induct) simp_all"], ["", "text \\<open>$\\alpha$-equivalence is equivariant.\\<close>"], ["", "lemma alpha_Tree_eqvt_aux:\n  assumes \"\\<And>a b. (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t \\<longleftrightarrow> p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> p \\<bullet> t\"\n  shows \"p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t = supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "let ?B = \"{b. \\<not> ((a \\<rightleftharpoons> b) \\<bullet> t) =\\<^sub>\\<alpha> t}\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "let ?pB = \"{b. \\<not> ((p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t) =\\<^sub>\\<alpha> (p \\<bullet> t)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "assume \"finite ?B\""], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "moreover"], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "have \"inj_on (unpermute p) ?pB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (unpermute p)\n     {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n                p \\<bullet> t}", "by (simp add: inj_on_def unpermute_def)"], ["proof (state)\nthis:\n  inj_on (unpermute p)\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "moreover"], ["proof (state)\nthis:\n  inj_on (unpermute p)\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "have \"unpermute p ` ?pB \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unpermute p `\n    {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n               p \\<bullet> t}\n    \\<subseteq> {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                           t}", "using assms"], ["proof (prove)\nusing this:\n  ((?a \\<rightleftharpoons> ?b) \\<bullet> t =\\<^sub>\\<alpha> t) =\n  (p \\<bullet> (?a \\<rightleftharpoons> ?b) \\<bullet> t =\\<^sub>\\<alpha>\n   p \\<bullet> t)\n\ngoal (1 subgoal):\n 1. unpermute p `\n    {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n               p \\<bullet> t}\n    \\<subseteq> {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                           t}", "by auto (metis (erased, lifting) eqvt_bound permute_eqvt swap_eqvt)"], ["proof (state)\nthis:\n  unpermute p `\n  {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n             p \\<bullet> t}\n  \\<subseteq> {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                         t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n  inj_on (unpermute p)\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n  unpermute p `\n  {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n             p \\<bullet> t}\n  \\<subseteq> {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                         t}", "have \"finite ?pB\""], ["proof (prove)\nusing this:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n  inj_on (unpermute p)\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n  unpermute p `\n  {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n             p \\<bullet> t}\n  \\<subseteq> {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                         t}\n\ngoal (1 subgoal):\n 1. finite\n     {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n                p \\<bullet> t}", "by (metis inj_on_finite)"], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "}"], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n              t} \\<Longrightarrow>\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "moreover"], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n              t} \\<Longrightarrow>\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "{"], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n              t} \\<Longrightarrow>\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "assume \"finite ?pB\""], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "moreover"], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "have \"inj_on (permute p) ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (permute p)\n     {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "by (simp add: inj_on_def)"], ["proof (state)\nthis:\n  inj_on (permute p)\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "moreover"], ["proof (state)\nthis:\n  inj_on (permute p)\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "have \"permute p ` ?B \\<subseteq> ?pB\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permute p `\n    {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n    \\<subseteq> {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n                           p \\<bullet> t}", "using assms"], ["proof (prove)\nusing this:\n  ((?a \\<rightleftharpoons> ?b) \\<bullet> t =\\<^sub>\\<alpha> t) =\n  (p \\<bullet> (?a \\<rightleftharpoons> ?b) \\<bullet> t =\\<^sub>\\<alpha>\n   p \\<bullet> t)\n\ngoal (1 subgoal):\n 1. permute p `\n    {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n    \\<subseteq> {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n                           p \\<bullet> t}", "by auto (metis (erased, lifting) permute_eqvt swap_eqvt)"], ["proof (state)\nthis:\n  permute p `\n  {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n  \\<subseteq> {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n                         p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n  inj_on (permute p)\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n  permute p `\n  {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n  \\<subseteq> {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n                         p \\<bullet> t}", "have \"finite ?B\""], ["proof (prove)\nusing this:\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n  inj_on (permute p)\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n  permute p `\n  {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n  \\<subseteq> {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n                         p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. finite\n     {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "by (metis inj_on_finite)"], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "}"], ["proof (state)\nthis:\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t} \\<Longrightarrow>\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "ultimately"], ["proof (chain)\npicking this:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n              t} \\<Longrightarrow>\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t} \\<Longrightarrow>\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "have \"infinite ?B \\<longleftrightarrow> infinite ?pB\""], ["proof (prove)\nusing this:\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n              t} \\<Longrightarrow>\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n  finite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t} \\<Longrightarrow>\n  finite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. infinite\n     {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} =\n    infinite\n     {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n                p \\<bullet> t}", "by auto"], ["proof (state)\nthis:\n  infinite\n   {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} =\n  infinite\n   {b. \\<not> (p \\<bullet> a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "}"], ["proof (state)\nthis:\n  infinite\n   {b. \\<not> (?a2 \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} =\n  infinite\n   {b. \\<not> (p \\<bullet> ?a2 \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "then"], ["proof (chain)\npicking this:\n  infinite\n   {b. \\<not> (?a2 \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} =\n  infinite\n   {b. \\<not> (p \\<bullet> ?a2 \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}", "show ?thesis"], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (?a2 \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} =\n  infinite\n   {b. \\<not> (p \\<bullet> ?a2 \\<rightleftharpoons> b) \\<bullet> p \\<bullet> t =\\<^sub>\\<alpha>\n              p \\<bullet> t}\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)", "by (auto simp add: supp_rel_def permute_set_def) (metis eqvt_bound)"], ["proof (state)\nthis:\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_Tree_eqvt': \"t1 =\\<^sub>\\<alpha> t2 \\<longleftrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t1 =\\<^sub>\\<alpha> t2) =\n    (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2)", "proof (induction t1 t2 rule: alpha_Tree_induct')"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>tset1 tset2.\n       (\\<And>a b.\n           \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2\\<rbrakk>\n           \\<Longrightarrow> (a =\\<^sub>\\<alpha> b) =\n                             (p \\<bullet> a =\\<^sub>\\<alpha>\n                              p \\<bullet> b)) \\<Longrightarrow>\n       (tConj tset1 =\\<^sub>\\<alpha> tConj tset2) =\n       (p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2)\n 2. \\<And>t1 t2.\n       (t1 =\\<^sub>\\<alpha> t2) =\n       (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2) \\<Longrightarrow>\n       (tNot t1 =\\<^sub>\\<alpha> tNot t2) =\n       (p \\<bullet> tNot t1 =\\<^sub>\\<alpha> p \\<bullet> tNot t2)\n 3. \\<And>\\<phi>1 \\<phi>2.\n       (tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2) =\n       (p \\<bullet> tPred \\<phi>1 =\\<^sub>\\<alpha>\n        p \\<bullet> tPred \\<phi>2)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   (x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n                   (p \\<bullet> x \\<bullet> t1 =\\<^sub>\\<alpha>\n                    p \\<bullet> t2);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n            p \\<bullet> t1);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n            p \\<bullet> t2)\\<rbrakk>\n       \\<Longrightarrow> (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          tAct \\<alpha>2 t2) =\n                         (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          p \\<bullet> tAct \\<alpha>2 t2)\n 5. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 6. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tPred va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tPred va)\n 7. \\<And>v va vb.\n       (tNot v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 8. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 9. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tNot va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tNot va)\n 10. \\<And>v va vb.\n        (tPred v =\\<^sub>\\<alpha> tAct va vb) =\n        (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\nA total of 22 subgoals...", "case (alpha_tConj tset1 tset2)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2\\<rbrakk>\n  \\<Longrightarrow> (?a =\\<^sub>\\<alpha> ?b) =\n                    (p \\<bullet> ?a =\\<^sub>\\<alpha> p \\<bullet> ?b)\n\ngoal (22 subgoals):\n 1. \\<And>tset1 tset2.\n       (\\<And>a b.\n           \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2\\<rbrakk>\n           \\<Longrightarrow> (a =\\<^sub>\\<alpha> b) =\n                             (p \\<bullet> a =\\<^sub>\\<alpha>\n                              p \\<bullet> b)) \\<Longrightarrow>\n       (tConj tset1 =\\<^sub>\\<alpha> tConj tset2) =\n       (p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2)\n 2. \\<And>t1 t2.\n       (t1 =\\<^sub>\\<alpha> t2) =\n       (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2) \\<Longrightarrow>\n       (tNot t1 =\\<^sub>\\<alpha> tNot t2) =\n       (p \\<bullet> tNot t1 =\\<^sub>\\<alpha> p \\<bullet> tNot t2)\n 3. \\<And>\\<phi>1 \\<phi>2.\n       (tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2) =\n       (p \\<bullet> tPred \\<phi>1 =\\<^sub>\\<alpha>\n        p \\<bullet> tPred \\<phi>2)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   (x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n                   (p \\<bullet> x \\<bullet> t1 =\\<^sub>\\<alpha>\n                    p \\<bullet> t2);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n            p \\<bullet> t1);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n            p \\<bullet> t2)\\<rbrakk>\n       \\<Longrightarrow> (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          tAct \\<alpha>2 t2) =\n                         (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          p \\<bullet> tAct \\<alpha>2 t2)\n 5. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 6. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tPred va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tPred va)\n 7. \\<And>v va vb.\n       (tNot v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 8. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 9. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tNot va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tNot va)\n 10. \\<And>v va vb.\n        (tPred v =\\<^sub>\\<alpha> tAct va vb) =\n        (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\nA total of 22 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (tConj tset1 =\\<^sub>\\<alpha> tConj tset2) =\n    (p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "assume *: \"tConj tset1 =\\<^sub>\\<alpha> tConj tset2\""], ["proof (state)\nthis:\n  tConj tset1 =\\<^sub>\\<alpha> tConj tset2\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "{"], ["proof (state)\nthis:\n  tConj tset1 =\\<^sub>\\<alpha> tConj tset2\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "assume \"x \\<in> set_bset (p \\<bullet> tset1)\""], ["proof (state)\nthis:\n  x \\<in> set_bset (p \\<bullet> tset1)\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "then"], ["proof (chain)\npicking this:\n  x \\<in> set_bset (p \\<bullet> tset1)", "obtain x' where 1: \"x' \\<in> set_bset tset1\" and 2: \"x = p \\<bullet> x'\""], ["proof (prove)\nusing this:\n  x \\<in> set_bset (p \\<bullet> tset1)\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<in> set_bset tset1; x = p \\<bullet> x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE permute_bset.rep_eq permute_set_eq_image)"], ["proof (state)\nthis:\n  x' \\<in> set_bset tset1\n  x = p \\<bullet> x'\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 1"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset tset1", "obtain y' where 3: \"y' \\<in> set_bset tset2\" and 4: \"x' =\\<^sub>\\<alpha> y'\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset1\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set_bset tset2; x' =\\<^sub>\\<alpha> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \"*\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset1\n  tConj tset1 =\\<^sub>\\<alpha> tConj tset2\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set_bset tset2; x' =\\<^sub>\\<alpha> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (mono_tags, lifting) Formula.alpha_tConj rel_bset.rep_eq rel_set_def)"], ["proof (state)\nthis:\n  y' \\<in> set_bset tset2\n  x' =\\<^sub>\\<alpha> y'\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 3"], ["proof (chain)\npicking this:\n  y' \\<in> set_bset tset2", "have \"p \\<bullet> y' \\<in> set_bset (p \\<bullet> tset2)\""], ["proof (prove)\nusing this:\n  y' \\<in> set_bset tset2\n\ngoal (1 subgoal):\n 1. p \\<bullet> y' \\<in> set_bset (p \\<bullet> tset2)", "by (metis mem_permute_iff set_bset_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> y' \\<in> set_bset (p \\<bullet> tset2)\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> y' \\<in> set_bset (p \\<bullet> tset2)\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 1 and 2 and 3 and 4"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset tset1\n  x = p \\<bullet> x'\n  y' \\<in> set_bset tset2\n  x' =\\<^sub>\\<alpha> y'", "have \"x =\\<^sub>\\<alpha> p \\<bullet> y'\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset1\n  x = p \\<bullet> x'\n  y' \\<in> set_bset tset2\n  x' =\\<^sub>\\<alpha> y'\n\ngoal (1 subgoal):\n 1. x =\\<^sub>\\<alpha> p \\<bullet> y'", "using alpha_tConj.IH"], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset1\n  x = p \\<bullet> x'\n  y' \\<in> set_bset tset2\n  x' =\\<^sub>\\<alpha> y'\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2\\<rbrakk>\n  \\<Longrightarrow> (?a =\\<^sub>\\<alpha> ?b) =\n                    (p \\<bullet> ?a =\\<^sub>\\<alpha> p \\<bullet> ?b)\n\ngoal (1 subgoal):\n 1. x =\\<^sub>\\<alpha> p \\<bullet> y'", "by blast"], ["proof (state)\nthis:\n  x =\\<^sub>\\<alpha> p \\<bullet> y'\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "ultimately"], ["proof (chain)\npicking this:\n  p \\<bullet> y' \\<in> set_bset (p \\<bullet> tset2)\n  x =\\<^sub>\\<alpha> p \\<bullet> y'", "have \"\\<exists>y\\<in>set_bset (p \\<bullet> tset2). x =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  p \\<bullet> y' \\<in> set_bset (p \\<bullet> tset2)\n  x =\\<^sub>\\<alpha> p \\<bullet> y'\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>set_bset (p \\<bullet> tset2). x =\\<^sub>\\<alpha> y", ".."], ["proof (state)\nthis:\n  \\<exists>y\\<in>set_bset (p \\<bullet> tset2). x =\\<^sub>\\<alpha> y\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> set_bset (p \\<bullet> tset1) \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset (p \\<bullet> tset2). ?x2 =\\<^sub>\\<alpha> y\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "moreover"], ["proof (state)\nthis:\n  ?x2 \\<in> set_bset (p \\<bullet> tset1) \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset (p \\<bullet> tset2). ?x2 =\\<^sub>\\<alpha> y\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "{"], ["proof (state)\nthis:\n  ?x2 \\<in> set_bset (p \\<bullet> tset1) \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset (p \\<bullet> tset2). ?x2 =\\<^sub>\\<alpha> y\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "assume \"y \\<in> set_bset (p \\<bullet> tset2)\""], ["proof (state)\nthis:\n  y \\<in> set_bset (p \\<bullet> tset2)\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "then"], ["proof (chain)\npicking this:\n  y \\<in> set_bset (p \\<bullet> tset2)", "obtain y' where 1: \"y' \\<in> set_bset tset2\" and 2: \"p \\<bullet> y' = y\""], ["proof (prove)\nusing this:\n  y \\<in> set_bset (p \\<bullet> tset2)\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set_bset tset2; p \\<bullet> y' = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE permute_bset.rep_eq permute_set_eq_image)"], ["proof (state)\nthis:\n  y' \\<in> set_bset tset2\n  p \\<bullet> y' = y\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 1"], ["proof (chain)\npicking this:\n  y' \\<in> set_bset tset2", "obtain x' where 3: \"x' \\<in> set_bset tset1\" and 4: \"x' =\\<^sub>\\<alpha> y'\""], ["proof (prove)\nusing this:\n  y' \\<in> set_bset tset2\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<in> set_bset tset1; x' =\\<^sub>\\<alpha> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \"*\""], ["proof (prove)\nusing this:\n  y' \\<in> set_bset tset2\n  tConj tset1 =\\<^sub>\\<alpha> tConj tset2\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<in> set_bset tset1; x' =\\<^sub>\\<alpha> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (mono_tags, lifting) Formula.alpha_tConj rel_bset.rep_eq rel_set_def)"], ["proof (state)\nthis:\n  x' \\<in> set_bset tset1\n  x' =\\<^sub>\\<alpha> y'\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 3"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset tset1", "have \"p \\<bullet> x' \\<in> set_bset (p \\<bullet> tset1)\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset1\n\ngoal (1 subgoal):\n 1. p \\<bullet> x' \\<in> set_bset (p \\<bullet> tset1)", "by (metis mem_permute_iff set_bset_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> x' \\<in> set_bset (p \\<bullet> tset1)\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> x' \\<in> set_bset (p \\<bullet> tset1)\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 1 and 2 and 3 and 4"], ["proof (chain)\npicking this:\n  y' \\<in> set_bset tset2\n  p \\<bullet> y' = y\n  x' \\<in> set_bset tset1\n  x' =\\<^sub>\\<alpha> y'", "have \"p \\<bullet> x' =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  y' \\<in> set_bset tset2\n  p \\<bullet> y' = y\n  x' \\<in> set_bset tset1\n  x' =\\<^sub>\\<alpha> y'\n\ngoal (1 subgoal):\n 1. p \\<bullet> x' =\\<^sub>\\<alpha> y", "using alpha_tConj.IH"], ["proof (prove)\nusing this:\n  y' \\<in> set_bset tset2\n  p \\<bullet> y' = y\n  x' \\<in> set_bset tset1\n  x' =\\<^sub>\\<alpha> y'\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2\\<rbrakk>\n  \\<Longrightarrow> (?a =\\<^sub>\\<alpha> ?b) =\n                    (p \\<bullet> ?a =\\<^sub>\\<alpha> p \\<bullet> ?b)\n\ngoal (1 subgoal):\n 1. p \\<bullet> x' =\\<^sub>\\<alpha> y", "by blast"], ["proof (state)\nthis:\n  p \\<bullet> x' =\\<^sub>\\<alpha> y\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "ultimately"], ["proof (chain)\npicking this:\n  p \\<bullet> x' \\<in> set_bset (p \\<bullet> tset1)\n  p \\<bullet> x' =\\<^sub>\\<alpha> y", "have \"\\<exists>x\\<in>set_bset (p \\<bullet> tset1). x =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  p \\<bullet> x' \\<in> set_bset (p \\<bullet> tset1)\n  p \\<bullet> x' =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set_bset (p \\<bullet> tset1). x =\\<^sub>\\<alpha> y", ".."], ["proof (state)\nthis:\n  \\<exists>x\\<in>set_bset (p \\<bullet> tset1). x =\\<^sub>\\<alpha> y\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "}"], ["proof (state)\nthis:\n  ?y2 \\<in> set_bset (p \\<bullet> tset2) \\<Longrightarrow>\n  \\<exists>x\\<in>set_bset (p \\<bullet> tset1). x =\\<^sub>\\<alpha> ?y2\n\ngoal (2 subgoals):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2 \\<Longrightarrow>\n    p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n 2. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "ultimately"], ["proof (chain)\npicking this:\n  ?x2 \\<in> set_bset (p \\<bullet> tset1) \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset (p \\<bullet> tset2). ?x2 =\\<^sub>\\<alpha> y\n  ?y2 \\<in> set_bset (p \\<bullet> tset2) \\<Longrightarrow>\n  \\<exists>x\\<in>set_bset (p \\<bullet> tset1). x =\\<^sub>\\<alpha> ?y2", "show \"p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> set_bset (p \\<bullet> tset1) \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset (p \\<bullet> tset2). ?x2 =\\<^sub>\\<alpha> y\n  ?y2 \\<in> set_bset (p \\<bullet> tset2) \\<Longrightarrow>\n  \\<exists>x\\<in>set_bset (p \\<bullet> tset1). x =\\<^sub>\\<alpha> ?y2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2", "by (simp add: rel_bset_def rel_set_def)"], ["proof (state)\nthis:\n  p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "assume *: \"p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\""], ["proof (state)\nthis:\n  p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "{"], ["proof (state)\nthis:\n  p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "assume 1: \"x \\<in> set_bset tset1\""], ["proof (state)\nthis:\n  x \\<in> set_bset tset1\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "then"], ["proof (chain)\npicking this:\n  x \\<in> set_bset tset1", "have \"p \\<bullet> x \\<in> set_bset (p \\<bullet> tset1)\""], ["proof (prove)\nusing this:\n  x \\<in> set_bset tset1\n\ngoal (1 subgoal):\n 1. p \\<bullet> x \\<in> set_bset (p \\<bullet> tset1)", "by (metis mem_permute_iff set_bset_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> x \\<in> set_bset (p \\<bullet> tset1)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> x \\<in> set_bset (p \\<bullet> tset1)", "obtain y' where 2: \"y' \\<in> set_bset (p \\<bullet> tset2)\" and 3: \"p \\<bullet> x =\\<^sub>\\<alpha> y'\""], ["proof (prove)\nusing this:\n  p \\<bullet> x \\<in> set_bset (p \\<bullet> tset1)\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set_bset (p \\<bullet> tset2);\n         p \\<bullet> x =\\<^sub>\\<alpha> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \"*\""], ["proof (prove)\nusing this:\n  p \\<bullet> x \\<in> set_bset (p \\<bullet> tset1)\n  p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set_bset (p \\<bullet> tset2);\n         p \\<bullet> x =\\<^sub>\\<alpha> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Formula.alpha_tConj permute_Tree_tConj rel_bset.rep_eq rel_set_def)"], ["proof (state)\nthis:\n  y' \\<in> set_bset (p \\<bullet> tset2)\n  p \\<bullet> x =\\<^sub>\\<alpha> y'\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 2"], ["proof (chain)\npicking this:\n  y' \\<in> set_bset (p \\<bullet> tset2)", "obtain y where 4: \"y \\<in> set_bset tset2\" and 5: \"y' = p \\<bullet> y\""], ["proof (prove)\nusing this:\n  y' \\<in> set_bset (p \\<bullet> tset2)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> set_bset tset2; y' = p \\<bullet> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE permute_bset.rep_eq permute_set_eq_image)"], ["proof (state)\nthis:\n  y \\<in> set_bset tset2\n  y' = p \\<bullet> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 1 and 3 and 4 and 5"], ["proof (chain)\npicking this:\n  x \\<in> set_bset tset1\n  p \\<bullet> x =\\<^sub>\\<alpha> y'\n  y \\<in> set_bset tset2\n  y' = p \\<bullet> y", "have \"x =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  x \\<in> set_bset tset1\n  p \\<bullet> x =\\<^sub>\\<alpha> y'\n  y \\<in> set_bset tset2\n  y' = p \\<bullet> y\n\ngoal (1 subgoal):\n 1. x =\\<^sub>\\<alpha> y", "using alpha_tConj.IH"], ["proof (prove)\nusing this:\n  x \\<in> set_bset tset1\n  p \\<bullet> x =\\<^sub>\\<alpha> y'\n  y \\<in> set_bset tset2\n  y' = p \\<bullet> y\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2\\<rbrakk>\n  \\<Longrightarrow> (?a =\\<^sub>\\<alpha> ?b) =\n                    (p \\<bullet> ?a =\\<^sub>\\<alpha> p \\<bullet> ?b)\n\ngoal (1 subgoal):\n 1. x =\\<^sub>\\<alpha> y", "by blast"], ["proof (state)\nthis:\n  x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "with 4"], ["proof (chain)\npicking this:\n  y \\<in> set_bset tset2\n  x =\\<^sub>\\<alpha> y", "have \"\\<exists>y\\<in>set_bset tset2. x =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  y \\<in> set_bset tset2\n  x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. \\<exists>y\\<in>set_bset tset2. x =\\<^sub>\\<alpha> y", ".."], ["proof (state)\nthis:\n  \\<exists>y\\<in>set_bset tset2. x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> set_bset tset1 \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset tset2. ?x2 =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "moreover"], ["proof (state)\nthis:\n  ?x2 \\<in> set_bset tset1 \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset tset2. ?x2 =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "{"], ["proof (state)\nthis:\n  ?x2 \\<in> set_bset tset1 \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset tset2. ?x2 =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "assume 1: \"y \\<in> set_bset tset2\""], ["proof (state)\nthis:\n  y \\<in> set_bset tset2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "then"], ["proof (chain)\npicking this:\n  y \\<in> set_bset tset2", "have \"p \\<bullet> y \\<in> set_bset (p \\<bullet> tset2)\""], ["proof (prove)\nusing this:\n  y \\<in> set_bset tset2\n\ngoal (1 subgoal):\n 1. p \\<bullet> y \\<in> set_bset (p \\<bullet> tset2)", "by (metis mem_permute_iff set_bset_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> y \\<in> set_bset (p \\<bullet> tset2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> y \\<in> set_bset (p \\<bullet> tset2)", "obtain x' where 2: \"x' \\<in> set_bset (p \\<bullet> tset1)\" and 3: \"x' =\\<^sub>\\<alpha> p \\<bullet> y\""], ["proof (prove)\nusing this:\n  p \\<bullet> y \\<in> set_bset (p \\<bullet> tset2)\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<in> set_bset (p \\<bullet> tset1);\n         x' =\\<^sub>\\<alpha> p \\<bullet> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \"*\""], ["proof (prove)\nusing this:\n  p \\<bullet> y \\<in> set_bset (p \\<bullet> tset2)\n  p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<in> set_bset (p \\<bullet> tset1);\n         x' =\\<^sub>\\<alpha> p \\<bullet> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Formula.alpha_tConj permute_Tree_tConj rel_bset.rep_eq rel_set_def)"], ["proof (state)\nthis:\n  x' \\<in> set_bset (p \\<bullet> tset1)\n  x' =\\<^sub>\\<alpha> p \\<bullet> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 2"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset (p \\<bullet> tset1)", "obtain x where 4: \"x \\<in> set_bset tset1\" and 5: \"p \\<bullet> x = x'\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset (p \\<bullet> tset1)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> set_bset tset1; p \\<bullet> x = x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE permute_bset.rep_eq permute_set_eq_image)"], ["proof (state)\nthis:\n  x \\<in> set_bset tset1\n  p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "from 1 and 3 and 4 and 5"], ["proof (chain)\npicking this:\n  y \\<in> set_bset tset2\n  x' =\\<^sub>\\<alpha> p \\<bullet> y\n  x \\<in> set_bset tset1\n  p \\<bullet> x = x'", "have \"x =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  y \\<in> set_bset tset2\n  x' =\\<^sub>\\<alpha> p \\<bullet> y\n  x \\<in> set_bset tset1\n  p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. x =\\<^sub>\\<alpha> y", "using alpha_tConj.IH"], ["proof (prove)\nusing this:\n  y \\<in> set_bset tset2\n  x' =\\<^sub>\\<alpha> p \\<bullet> y\n  x \\<in> set_bset tset1\n  p \\<bullet> x = x'\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2\\<rbrakk>\n  \\<Longrightarrow> (?a =\\<^sub>\\<alpha> ?b) =\n                    (p \\<bullet> ?a =\\<^sub>\\<alpha> p \\<bullet> ?b)\n\ngoal (1 subgoal):\n 1. x =\\<^sub>\\<alpha> y", "by blast"], ["proof (state)\nthis:\n  x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "with 4"], ["proof (chain)\npicking this:\n  x \\<in> set_bset tset1\n  x =\\<^sub>\\<alpha> y", "have \"\\<exists>x\\<in>set_bset tset1. x =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  x \\<in> set_bset tset1\n  x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set_bset tset1. x =\\<^sub>\\<alpha> y", ".."], ["proof (state)\nthis:\n  \\<exists>x\\<in>set_bset tset1. x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "}"], ["proof (state)\nthis:\n  ?y2 \\<in> set_bset tset2 \\<Longrightarrow>\n  \\<exists>x\\<in>set_bset tset1. x =\\<^sub>\\<alpha> ?y2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tConj tset1 =\\<^sub>\\<alpha>\n    p \\<bullet> tConj tset2 \\<Longrightarrow>\n    tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "ultimately"], ["proof (chain)\npicking this:\n  ?x2 \\<in> set_bset tset1 \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset tset2. ?x2 =\\<^sub>\\<alpha> y\n  ?y2 \\<in> set_bset tset2 \\<Longrightarrow>\n  \\<exists>x\\<in>set_bset tset1. x =\\<^sub>\\<alpha> ?y2", "show \"tConj tset1 =\\<^sub>\\<alpha> tConj tset2\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> set_bset tset1 \\<Longrightarrow>\n  \\<exists>y\\<in>set_bset tset2. ?x2 =\\<^sub>\\<alpha> y\n  ?y2 \\<in> set_bset tset2 \\<Longrightarrow>\n  \\<exists>x\\<in>set_bset tset1. x =\\<^sub>\\<alpha> ?y2\n\ngoal (1 subgoal):\n 1. tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "by (simp add: rel_bset_def rel_set_def)"], ["proof (state)\nthis:\n  tConj tset1 =\\<^sub>\\<alpha> tConj tset2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (tConj tset1 =\\<^sub>\\<alpha> tConj tset2) =\n  (p \\<bullet> tConj tset1 =\\<^sub>\\<alpha> p \\<bullet> tConj tset2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       (t1 =\\<^sub>\\<alpha> t2) =\n       (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2) \\<Longrightarrow>\n       (tNot t1 =\\<^sub>\\<alpha> tNot t2) =\n       (p \\<bullet> tNot t1 =\\<^sub>\\<alpha> p \\<bullet> tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       (tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2) =\n       (p \\<bullet> tPred \\<phi>1 =\\<^sub>\\<alpha>\n        p \\<bullet> tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   (x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n                   (p \\<bullet> x \\<bullet> t1 =\\<^sub>\\<alpha>\n                    p \\<bullet> t2);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n            p \\<bullet> t1);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n            p \\<bullet> t2)\\<rbrakk>\n       \\<Longrightarrow> (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          tAct \\<alpha>2 t2) =\n                         (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          p \\<bullet> tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 5. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tPred va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tPred va)\n 6. \\<And>v va vb.\n       (tNot v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 7. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 8. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tNot va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tNot va)\n 9. \\<And>v va vb.\n       (tPred v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 10. \\<And>v va vb.\n        (tAct v va =\\<^sub>\\<alpha> tConj vb) =\n        (p \\<bullet> tAct v va =\\<^sub>\\<alpha> p \\<bullet> tConj vb)\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       (t1 =\\<^sub>\\<alpha> t2) =\n       (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2) \\<Longrightarrow>\n       (tNot t1 =\\<^sub>\\<alpha> tNot t2) =\n       (p \\<bullet> tNot t1 =\\<^sub>\\<alpha> p \\<bullet> tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       (tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2) =\n       (p \\<bullet> tPred \\<phi>1 =\\<^sub>\\<alpha>\n        p \\<bullet> tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   (x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n                   (p \\<bullet> x \\<bullet> t1 =\\<^sub>\\<alpha>\n                    p \\<bullet> t2);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n            p \\<bullet> t1);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n            p \\<bullet> t2)\\<rbrakk>\n       \\<Longrightarrow> (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          tAct \\<alpha>2 t2) =\n                         (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          p \\<bullet> tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 5. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tPred va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tPred va)\n 6. \\<And>v va vb.\n       (tNot v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 7. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 8. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tNot va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tNot va)\n 9. \\<And>v va vb.\n       (tPred v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 10. \\<And>v va vb.\n        (tAct v va =\\<^sub>\\<alpha> tConj vb) =\n        (p \\<bullet> tAct v va =\\<^sub>\\<alpha> p \\<bullet> tConj vb)\nA total of 21 subgoals...", "case (alpha_tAct \\<alpha>1 t1 \\<alpha>2 t2)"], ["proof (state)\nthis:\n  (?x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n  (p \\<bullet> ?x \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2)\n  ((?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n  (p \\<bullet> (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n   p \\<bullet> t1)\n  ((?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n  (p \\<bullet> (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n   p \\<bullet> t2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       (t1 =\\<^sub>\\<alpha> t2) =\n       (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2) \\<Longrightarrow>\n       (tNot t1 =\\<^sub>\\<alpha> tNot t2) =\n       (p \\<bullet> tNot t1 =\\<^sub>\\<alpha> p \\<bullet> tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       (tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2) =\n       (p \\<bullet> tPred \\<phi>1 =\\<^sub>\\<alpha>\n        p \\<bullet> tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   (x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n                   (p \\<bullet> x \\<bullet> t1 =\\<^sub>\\<alpha>\n                    p \\<bullet> t2);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n            p \\<bullet> t1);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n            p \\<bullet> t2)\\<rbrakk>\n       \\<Longrightarrow> (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          tAct \\<alpha>2 t2) =\n                         (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          p \\<bullet> tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 5. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tPred va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tPred va)\n 6. \\<And>v va vb.\n       (tNot v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 7. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 8. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tNot va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tNot va)\n 9. \\<And>v va vb.\n       (tPred v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 10. \\<And>v va vb.\n        (tAct v va =\\<^sub>\\<alpha> tConj vb) =\n        (p \\<bullet> tAct v va =\\<^sub>\\<alpha> p \\<bullet> tConj vb)\nA total of 21 subgoals...", "from alpha_tAct.IH(2)"], ["proof (chain)\npicking this:\n  ((?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n  (p \\<bullet> (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n   p \\<bullet> t1)", "have t1: \"p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 = supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)\""], ["proof (prove)\nusing this:\n  ((?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n  (p \\<bullet> (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n   p \\<bullet> t1)\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)", "by (rule alpha_Tree_eqvt_aux)"], ["proof (state)\nthis:\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       (t1 =\\<^sub>\\<alpha> t2) =\n       (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2) \\<Longrightarrow>\n       (tNot t1 =\\<^sub>\\<alpha> tNot t2) =\n       (p \\<bullet> tNot t1 =\\<^sub>\\<alpha> p \\<bullet> tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       (tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2) =\n       (p \\<bullet> tPred \\<phi>1 =\\<^sub>\\<alpha>\n        p \\<bullet> tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   (x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n                   (p \\<bullet> x \\<bullet> t1 =\\<^sub>\\<alpha>\n                    p \\<bullet> t2);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n            p \\<bullet> t1);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n            p \\<bullet> t2)\\<rbrakk>\n       \\<Longrightarrow> (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          tAct \\<alpha>2 t2) =\n                         (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          p \\<bullet> tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 5. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tPred va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tPred va)\n 6. \\<And>v va vb.\n       (tNot v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 7. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 8. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tNot va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tNot va)\n 9. \\<And>v va vb.\n       (tPred v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 10. \\<And>v va vb.\n        (tAct v va =\\<^sub>\\<alpha> tConj vb) =\n        (p \\<bullet> tAct v va =\\<^sub>\\<alpha> p \\<bullet> tConj vb)\nA total of 21 subgoals...", "from alpha_tAct.IH(3)"], ["proof (chain)\npicking this:\n  ((?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n  (p \\<bullet> (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n   p \\<bullet> t2)", "have t2: \"p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 = supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)\""], ["proof (prove)\nusing this:\n  ((?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n  (p \\<bullet> (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n   p \\<bullet> t2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)", "by (rule alpha_Tree_eqvt_aux)"], ["proof (state)\nthis:\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       (t1 =\\<^sub>\\<alpha> t2) =\n       (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2) \\<Longrightarrow>\n       (tNot t1 =\\<^sub>\\<alpha> tNot t2) =\n       (p \\<bullet> tNot t1 =\\<^sub>\\<alpha> p \\<bullet> tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       (tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2) =\n       (p \\<bullet> tPred \\<phi>1 =\\<^sub>\\<alpha>\n        p \\<bullet> tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   (x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n                   (p \\<bullet> x \\<bullet> t1 =\\<^sub>\\<alpha>\n                    p \\<bullet> t2);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha> t1) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n            p \\<bullet> t1);\n        \\<And>x a b.\n           ((a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha> t2) =\n           (p \\<bullet> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n            p \\<bullet> t2)\\<rbrakk>\n       \\<Longrightarrow> (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          tAct \\<alpha>2 t2) =\n                         (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n                          p \\<bullet> tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 5. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tPred va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tPred va)\n 6. \\<And>v va vb.\n       (tNot v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 7. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 8. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tNot va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tNot va)\n 9. \\<And>v va vb.\n       (tPred v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 10. \\<And>v va vb.\n        (tAct v va =\\<^sub>\\<alpha> tConj vb) =\n        (p \\<bullet> tAct v va =\\<^sub>\\<alpha> p \\<bullet> tConj vb)\nA total of 21 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2) =\n    (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n     p \\<bullet> tAct \\<alpha>2 t2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "assume \"tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\""], ["proof (state)\nthis:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "then"], ["proof (chain)\npicking this:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "obtain q where 1: \"(bn \\<alpha>1, t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) q (bn \\<alpha>2, t2)\" and 2: \"(bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp q (bn \\<alpha>2, \\<alpha>2)\""], ["proof (prove)\nusing this:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>(bn \\<alpha>1,\n                  t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n                 (=\\<^sub>\\<alpha>) q (bn \\<alpha>2, t2);\n         (bn \\<alpha>1,\n          \\<alpha>1) \\<approx>set (=) supp q (bn \\<alpha>2,\n        \\<alpha>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>2, t2)\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp q (bn \\<alpha>2, \\<alpha>2)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 1 and t1 and t2"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>2, t2)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)", "have \"supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) - bn (p \\<bullet> \\<alpha>1) = supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2) - bn (p \\<bullet> \\<alpha>2)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>2, t2)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n    bn (p \\<bullet> \\<alpha>1) =\n    supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2) -\n    bn (p \\<bullet> \\<alpha>2)", "by (metis Diff_eqvt alpha_set bn_eqvt)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n  bn (p \\<bullet> \\<alpha>1) =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2) - bn (p \\<bullet> \\<alpha>2)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n  bn (p \\<bullet> \\<alpha>1) =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2) - bn (p \\<bullet> \\<alpha>2)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 1 and t1"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>2, t2)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)", "have \"(supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) - bn (p \\<bullet> \\<alpha>1)) \\<sharp>* (p + q - p)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>2, t2)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n     bn (p \\<bullet> \\<alpha>1)) \\<sharp>* (p + q - p)", "by (metis Diff_eqvt alpha_set bn_eqvt fresh_star_permute_iff permute_perm_def)"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n   bn (p \\<bullet> \\<alpha>1)) \\<sharp>* (p + q - p)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n   bn (p \\<bullet> \\<alpha>1)) \\<sharp>* (p + q - p)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 1 and alpha_tAct.IH(1)"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>2, t2)\n  (?x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n  (p \\<bullet> ?x \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2)", "have \"p \\<bullet> q \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>2, t2)\n  (?x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n  (p \\<bullet> ?x \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> q \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2", "by (simp add: alpha_set)"], ["proof (state)\nthis:\n  p \\<bullet> q \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> q \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 2"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp q (bn \\<alpha>2, \\<alpha>2)", "have \"p \\<bullet> q \\<bullet> -p \\<bullet> bn (p \\<bullet> \\<alpha>1) = bn (p \\<bullet> \\<alpha>2)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp q (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> q \\<bullet> - p \\<bullet> bn (p \\<bullet> \\<alpha>1) =\n    bn (p \\<bullet> \\<alpha>2)", "by (simp add: alpha_set bn_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> q \\<bullet> - p \\<bullet> bn (p \\<bullet> \\<alpha>1) =\n  bn (p \\<bullet> \\<alpha>2)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "ultimately"], ["proof (chain)\npicking this:\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n  bn (p \\<bullet> \\<alpha>1) =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2) - bn (p \\<bullet> \\<alpha>2)\n  (supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n   bn (p \\<bullet> \\<alpha>1)) \\<sharp>* (p + q - p)\n  p \\<bullet> q \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\n  p \\<bullet> q \\<bullet> - p \\<bullet> bn (p \\<bullet> \\<alpha>1) =\n  bn (p \\<bullet> \\<alpha>2)", "have \"(bn (p \\<bullet> \\<alpha>1), p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) (p + q - p) (bn (p \\<bullet> \\<alpha>2), p \\<bullet> t2)\""], ["proof (prove)\nusing this:\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n  bn (p \\<bullet> \\<alpha>1) =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2) - bn (p \\<bullet> \\<alpha>2)\n  (supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) -\n   bn (p \\<bullet> \\<alpha>1)) \\<sharp>* (p + q - p)\n  p \\<bullet> q \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\n  p \\<bullet> q \\<bullet> - p \\<bullet> bn (p \\<bullet> \\<alpha>1) =\n  bn (p \\<bullet> \\<alpha>2)\n\ngoal (1 subgoal):\n 1. (bn (p \\<bullet> \\<alpha>1),\n     p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n                (=\\<^sub>\\<alpha>) (p + q -\n                                    p) (bn (p \\<bullet> \\<alpha>2),\n  p \\<bullet> t2)", "by (simp add: alpha_set)"], ["proof (state)\nthis:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) (p + q -\n                                  p) (bn (p \\<bullet> \\<alpha>2),\np \\<bullet> t2)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) (p + q -\n                                  p) (bn (p \\<bullet> \\<alpha>2),\np \\<bullet> t2)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 2"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp q (bn \\<alpha>2, \\<alpha>2)", "have \"(bn (p \\<bullet> \\<alpha>1), p \\<bullet> \\<alpha>1) \\<approx>set (=) supp (p + q - p) (bn (p \\<bullet> \\<alpha>2), p \\<bullet> \\<alpha>2)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp q (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. (bn (p \\<bullet> \\<alpha>1),\n     p \\<bullet> \\<alpha>1) \\<approx>set (=) supp (p + q -\n             p) (bn (p \\<bullet> \\<alpha>2), p \\<bullet> \\<alpha>2)", "by (simp add: alpha_set) (metis (mono_tags, lifting) Diff_eqvt bn_eqvt fresh_star_permute_iff permute_minus_cancel(2) permute_perm_def supp_eqvt)"], ["proof (state)\nthis:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp (p + q -\n           p) (bn (p \\<bullet> \\<alpha>2), p \\<bullet> \\<alpha>2)\n\ngoal (2 subgoals):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2\n 2. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "ultimately"], ["proof (chain)\npicking this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) (p + q -\n                                  p) (bn (p \\<bullet> \\<alpha>2),\np \\<bullet> t2)\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp (p + q -\n           p) (bn (p \\<bullet> \\<alpha>2), p \\<bullet> \\<alpha>2)", "show \"p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> p \\<bullet> tAct \\<alpha>2 t2\""], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) (p + q -\n                                  p) (bn (p \\<bullet> \\<alpha>2),\np \\<bullet> t2)\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp (p + q -\n           p) (bn (p \\<bullet> \\<alpha>2), p \\<bullet> \\<alpha>2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2", "by auto"], ["proof (state)\nthis:\n  p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n  p \\<bullet> tAct \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "assume \"p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> p \\<bullet> tAct \\<alpha>2 t2\""], ["proof (state)\nthis:\n  p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n  p \\<bullet> tAct \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n  p \\<bullet> tAct \\<alpha>2 t2", "obtain q where 1: \"(bn (p \\<bullet> \\<alpha>1), p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) q (bn (p \\<bullet> \\<alpha>2), p \\<bullet> t2)\" and 2: \"(bn (p \\<bullet> \\<alpha>1), p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn (p \\<bullet> \\<alpha>2), p \\<bullet> \\<alpha>2)\""], ["proof (prove)\nusing this:\n  p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n  p \\<bullet> tAct \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>(bn (p \\<bullet> \\<alpha>1),\n                  p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n                             (=\\<^sub>\\<alpha>) q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> t2);\n         (bn (p \\<bullet> \\<alpha>1),\n          p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n                     (p \\<bullet> \\<alpha>2),\n                    p \\<bullet> \\<alpha>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> \\<alpha>2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "{"], ["proof (state)\nthis:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> \\<alpha>2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 1 and t1 and t2"], ["proof (chain)\npicking this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)", "have \"supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 = supp_rel (=\\<^sub>\\<alpha>) t2 - bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t1 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n    supp_rel (=\\<^sub>\\<alpha>) t2 - bn \\<alpha>2", "by (metis (no_types, lifting) Diff_eqvt alpha_set bn_eqvt permute_eq_iff)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t2 - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t2 - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "with 1 and t2"], ["proof (chain)\npicking this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t2 - bn \\<alpha>2", "have \"(supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\""], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n  p \\<bullet> supp_rel (=\\<^sub>\\<alpha>) t2 =\n  supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t2)\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t2 - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)", "by (auto simp add: fresh_star_def fresh_perm alphas) (metis (no_types, lifting) DiffI bn_eqvt mem_permute_iff permute_minus_cancel(2))"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 1"], ["proof (chain)\npicking this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)", "have \"- p \\<bullet> q \\<bullet> p \\<bullet> t1 =\\<^sub>\\<alpha> t2\""], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n\ngoal (1 subgoal):\n 1. - p \\<bullet> q \\<bullet> p \\<bullet> t1 =\\<^sub>\\<alpha> t2", "using alpha_tAct.IH(1)"], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n  (?x \\<bullet> t1 =\\<^sub>\\<alpha> t2) =\n  (p \\<bullet> ?x \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2)\n\ngoal (1 subgoal):\n 1. - p \\<bullet> q \\<bullet> p \\<bullet> t1 =\\<^sub>\\<alpha> t2", "by (simp add: alpha_set) (metis (no_types, lifting) permute_eqvt permute_minus_cancel(2))"], ["proof (state)\nthis:\n  - p \\<bullet> q \\<bullet> p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  - p \\<bullet> q \\<bullet> p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 1"], ["proof (chain)\npicking this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)", "have \"- p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n              (=\\<^sub>\\<alpha>) q (bn (p \\<bullet> \\<alpha>2),\n                                    p \\<bullet> t2)\n\ngoal (1 subgoal):\n 1. - p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2", "by (metis alpha_set bn_eqvt permute_minus_cancel(2))"], ["proof (state)\nthis:\n  - p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "ultimately"], ["proof (chain)\npicking this:\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t2 - bn \\<alpha>2\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\n  - p \\<bullet> q \\<bullet> p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n  - p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2", "have \"(bn \\<alpha>1, t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) (-p + q + p) (bn \\<alpha>2, t2)\""], ["proof (prove)\nusing this:\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t2 - bn \\<alpha>2\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\n  - p \\<bullet> q \\<bullet> p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n  - p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (- p + q + p) (bn \\<alpha>2, t2)", "by (simp add: alpha_set)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p + q + p) (bn \\<alpha>2, t2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "}"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p + q + p) (bn \\<alpha>2, t2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p + q + p) (bn \\<alpha>2, t2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "{"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p + q + p) (bn \\<alpha>2, t2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 2"], ["proof (chain)\npicking this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> \\<alpha>2)", "have \"supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> \\<alpha>2)\n\ngoal (1 subgoal):\n 1. supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2", "by (metis (no_types, lifting) Diff_eqvt alpha_set bn_eqvt permute_eq_iff supp_eqvt)"], ["proof (state)\nthis:\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "with 2"], ["proof (chain)\npicking this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> \\<alpha>2)\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2", "have \"(supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* (-p + q + p)\""], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> \\<alpha>2)\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)", "by (auto simp add: fresh_star_def fresh_perm alphas) (metis (no_types, lifting) DiffI bn_eqvt mem_permute_iff permute_minus_cancel(1) supp_eqvt)"], ["proof (state)\nthis:\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "from 2"], ["proof (chain)\npicking this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> \\<alpha>2)", "have \"-p \\<bullet> q \\<bullet> p \\<bullet> \\<alpha>1 = \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn (p \\<bullet> \\<alpha>1),\n   p \\<bullet> \\<alpha>1) \\<approx>set (=) supp q (bn\n              (p \\<bullet> \\<alpha>2),\n             p \\<bullet> \\<alpha>2)\n\ngoal (1 subgoal):\n 1. - p \\<bullet> q \\<bullet> p \\<bullet> \\<alpha>1 = \\<alpha>2", "by (simp add: alpha_set)"], ["proof (state)\nthis:\n  - p \\<bullet> q \\<bullet> p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "moreover"], ["proof (state)\nthis:\n  - p \\<bullet> q \\<bullet> p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "have \"-p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2", "by (simp add: bn_eqvt calculation(3))"], ["proof (state)\nthis:\n  - p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "ultimately"], ["proof (chain)\npicking this:\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\n  - p \\<bullet> q \\<bullet> p \\<bullet> \\<alpha>1 = \\<alpha>2\n  - p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2", "have \"(bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp (-p + q + p) (bn \\<alpha>2, \\<alpha>2)\""], ["proof (prove)\nusing this:\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* (- p + q + p)\n  - p \\<bullet> q \\<bullet> p \\<bullet> \\<alpha>1 = \\<alpha>2\n  - p \\<bullet> q \\<bullet> p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     \\<alpha>1) \\<approx>set (=) supp (- p + q +\n p) (bn \\<alpha>2, \\<alpha>2)", "by (simp add: alpha_set)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp (- p + q + p) (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "}"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp (- p + q + p) (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n    p \\<bullet> tAct \\<alpha>2 t2 \\<Longrightarrow>\n    tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "ultimately"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p + q + p) (bn \\<alpha>2, t2)\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp (- p + q + p) (bn \\<alpha>2, \\<alpha>2)", "show \"tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p + q + p) (bn \\<alpha>2, t2)\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp (- p + q + p) (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "by auto"], ["proof (state)\nthis:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2) =\n  (p \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n   p \\<bullet> tAct \\<alpha>2 t2)\n\ngoal (20 subgoals):\n 1. \\<And>t1 t2.\n       (t1 =\\<^sub>\\<alpha> t2) =\n       (p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2) \\<Longrightarrow>\n       (tNot t1 =\\<^sub>\\<alpha> tNot t2) =\n       (p \\<bullet> tNot t1 =\\<^sub>\\<alpha> p \\<bullet> tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       (tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2) =\n       (p \\<bullet> tPred \\<phi>1 =\\<^sub>\\<alpha>\n        p \\<bullet> tPred \\<phi>2)\n 3. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 4. \\<And>v va.\n       (tNot v =\\<^sub>\\<alpha> tPred va) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tPred va)\n 5. \\<And>v va vb.\n       (tNot v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tNot v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 6. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tConj va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tConj va)\n 7. \\<And>v va.\n       (tPred v =\\<^sub>\\<alpha> tNot va) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tNot va)\n 8. \\<And>v va vb.\n       (tPred v =\\<^sub>\\<alpha> tAct va vb) =\n       (p \\<bullet> tPred v =\\<^sub>\\<alpha> p \\<bullet> tAct va vb)\n 9. \\<And>v va vb.\n       (tAct v va =\\<^sub>\\<alpha> tConj vb) =\n       (p \\<bullet> tAct v va =\\<^sub>\\<alpha> p \\<bullet> tConj vb)\n 10. \\<And>v va vb.\n        (tAct v va =\\<^sub>\\<alpha> tNot vb) =\n        (p \\<bullet> tAct v va =\\<^sub>\\<alpha> p \\<bullet> tNot vb)\nA total of 20 subgoals...", "qed simp_all"], ["", "lemma alpha_Tree_eqvt [eqvt]: \"t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n    p \\<bullet> t1 =\\<^sub>\\<alpha> p \\<bullet> t2", "by (metis alpha_Tree_eqvt')"], ["", "text \\<open>@{const alpha_Tree} is an equivalence relation.\\<close>"], ["", "lemma alpha_Tree_reflp: \"reflp alpha_Tree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflp (=\\<^sub>\\<alpha>)", "proof (rule reflpI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x =\\<^sub>\\<alpha> x", "fix t :: \"('a,'b,'c) Tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x =\\<^sub>\\<alpha> x", "show \"t =\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t =\\<^sub>\\<alpha> t", "proof (induction t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           xa =\\<^sub>\\<alpha> xa) \\<Longrightarrow>\n       tConj x =\\<^sub>\\<alpha> tConj x\n 2. \\<And>t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow> tNot t =\\<^sub>\\<alpha> tNot t\n 3. \\<And>x. tPred x =\\<^sub>\\<alpha> tPred x\n 4. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "case tConj"], ["proof (state)\nthis:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow> ?xa =\\<^sub>\\<alpha> ?xa\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           xa =\\<^sub>\\<alpha> xa) \\<Longrightarrow>\n       tConj x =\\<^sub>\\<alpha> tConj x\n 2. \\<And>t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow> tNot t =\\<^sub>\\<alpha> tNot t\n 3. \\<And>x. tPred x =\\<^sub>\\<alpha> tPred x\n 4. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "then"], ["proof (chain)\npicking this:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow> ?xa =\\<^sub>\\<alpha> ?xa", "show ?case"], ["proof (prove)\nusing this:\n  ?xa \\<in> set_bset x_ \\<Longrightarrow> ?xa =\\<^sub>\\<alpha> ?xa\n\ngoal (1 subgoal):\n 1. tConj x_ =\\<^sub>\\<alpha> tConj x_", "by (metis alpha_tConj rel_bset.rep_eq rel_setI)"], ["proof (state)\nthis:\n  tConj x_ =\\<^sub>\\<alpha> tConj x_\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow> tNot t =\\<^sub>\\<alpha> tNot t\n 2. \\<And>x. tPred x =\\<^sub>\\<alpha> tPred x\n 3. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow> tNot t =\\<^sub>\\<alpha> tNot t\n 2. \\<And>x. tPred x =\\<^sub>\\<alpha> tPred x\n 3. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "case tNot"], ["proof (state)\nthis:\n  t_ =\\<^sub>\\<alpha> t_\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow> tNot t =\\<^sub>\\<alpha> tNot t\n 2. \\<And>x. tPred x =\\<^sub>\\<alpha> tPred x\n 3. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "then"], ["proof (chain)\npicking this:\n  t_ =\\<^sub>\\<alpha> t_", "show ?case"], ["proof (prove)\nusing this:\n  t_ =\\<^sub>\\<alpha> t_\n\ngoal (1 subgoal):\n 1. tNot t_ =\\<^sub>\\<alpha> tNot t_", "by (metis alpha_tNot)"], ["proof (state)\nthis:\n  tNot t_ =\\<^sub>\\<alpha> tNot t_\n\ngoal (2 subgoals):\n 1. \\<And>x. tPred x =\\<^sub>\\<alpha> tPred x\n 2. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. tPred x =\\<^sub>\\<alpha> tPred x\n 2. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "case tPred"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. tPred x =\\<^sub>\\<alpha> tPred x\n 2. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. tPred x_ =\\<^sub>\\<alpha> tPred x_", "by (metis alpha_tPred)"], ["proof (state)\nthis:\n  tPred x_ =\\<^sub>\\<alpha> tPred x_\n\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "case tAct"], ["proof (state)\nthis:\n  t_ =\\<^sub>\\<alpha> t_\n\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       t =\\<^sub>\\<alpha> t \\<Longrightarrow>\n       tAct x1a t =\\<^sub>\\<alpha> tAct x1a t", "then"], ["proof (chain)\npicking this:\n  t_ =\\<^sub>\\<alpha> t_", "show ?case"], ["proof (prove)\nusing this:\n  t_ =\\<^sub>\\<alpha> t_\n\ngoal (1 subgoal):\n 1. tAct x1a_ t_ =\\<^sub>\\<alpha> tAct x1a_ t_", "by (metis (mono_tags) alpha_tAct alpha_refl(1))"], ["proof (state)\nthis:\n  tAct x1a_ t_ =\\<^sub>\\<alpha> tAct x1a_ t_\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t =\\<^sub>\\<alpha> t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_Tree_symp: \"symp alpha_Tree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (=\\<^sub>\\<alpha>)", "proof (rule sympI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. a =\\<^sub>\\<alpha> b \\<Longrightarrow> b =\\<^sub>\\<alpha> a", "fix x y :: \"('a,'b,'c) Tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. a =\\<^sub>\\<alpha> b \\<Longrightarrow> b =\\<^sub>\\<alpha> a", "assume \"x =\\<^sub>\\<alpha> y\""], ["proof (state)\nthis:\n  x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. \\<And>a b. a =\\<^sub>\\<alpha> b \\<Longrightarrow> b =\\<^sub>\\<alpha> a", "then"], ["proof (chain)\npicking this:\n  x =\\<^sub>\\<alpha> y", "show \"y =\\<^sub>\\<alpha> x\""], ["proof (prove)\nusing this:\n  x =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. y =\\<^sub>\\<alpha> x", "proof (induction x y rule: alpha_Tree_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> b =\\<^sub>\\<alpha> a;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> tConj tset2 =\\<^sub>\\<alpha> tConj tset1\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2; t2 =\\<^sub>\\<alpha> t1\\<rbrakk>\n       \\<Longrightarrow> tNot t2 =\\<^sub>\\<alpha> tNot t1\n 3. \\<And>\\<phi>. tPred \\<phi> =\\<^sub>\\<alpha> tPred \\<phi>\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   t2 =\\<^sub>\\<alpha> p \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           t1 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           t2 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n                         tAct \\<alpha>1 t1", "case tConj"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> set_bset tset1_; ?b \\<in> set_bset tset2_;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> ?b =\\<^sub>\\<alpha> ?a\n  rel_bset (=\\<^sub>\\<alpha>) tset1_ tset2_\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> b =\\<^sub>\\<alpha> a;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> tConj tset2 =\\<^sub>\\<alpha> tConj tset1\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2; t2 =\\<^sub>\\<alpha> t1\\<rbrakk>\n       \\<Longrightarrow> tNot t2 =\\<^sub>\\<alpha> tNot t1\n 3. \\<And>\\<phi>. tPred \\<phi> =\\<^sub>\\<alpha> tPred \\<phi>\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   t2 =\\<^sub>\\<alpha> p \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           t1 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           t2 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n                         tAct \\<alpha>1 t1", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?a \\<in> set_bset tset1_; ?b \\<in> set_bset tset2_;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> ?b =\\<^sub>\\<alpha> ?a\n  rel_bset (=\\<^sub>\\<alpha>) tset1_ tset2_", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> set_bset tset1_; ?b \\<in> set_bset tset2_;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> ?b =\\<^sub>\\<alpha> ?a\n  rel_bset (=\\<^sub>\\<alpha>) tset1_ tset2_\n\ngoal (1 subgoal):\n 1. tConj tset2_ =\\<^sub>\\<alpha> tConj tset1_", "by (simp add: rel_bset_def rel_set_def) metis"], ["proof (state)\nthis:\n  tConj tset2_ =\\<^sub>\\<alpha> tConj tset1_\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2; t2 =\\<^sub>\\<alpha> t1\\<rbrakk>\n       \\<Longrightarrow> tNot t2 =\\<^sub>\\<alpha> tNot t1\n 2. \\<And>\\<phi>. tPred \\<phi> =\\<^sub>\\<alpha> tPred \\<phi>\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   t2 =\\<^sub>\\<alpha> p \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           t1 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           t2 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n                         tAct \\<alpha>1 t1", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2; t2 =\\<^sub>\\<alpha> t1\\<rbrakk>\n       \\<Longrightarrow> tNot t2 =\\<^sub>\\<alpha> tNot t1\n 2. \\<And>\\<phi>. tPred \\<phi> =\\<^sub>\\<alpha> tPred \\<phi>\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   t2 =\\<^sub>\\<alpha> p \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           t1 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           t2 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n                         tAct \\<alpha>1 t1", "case (tAct \\<alpha>1 t1 \\<alpha>2 t2)"], ["proof (state)\nthis:\n  ?p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  t2 =\\<^sub>\\<alpha> ?p \\<bullet> t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  t1 =\\<^sub>\\<alpha> (?a \\<rightleftharpoons> ?b) \\<bullet> t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n  t2 \\<Longrightarrow>\n  t2 =\\<^sub>\\<alpha> (?a \\<rightleftharpoons> ?b) \\<bullet> t2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2; t2 =\\<^sub>\\<alpha> t1\\<rbrakk>\n       \\<Longrightarrow> tNot t2 =\\<^sub>\\<alpha> tNot t1\n 2. \\<And>\\<phi>. tPred \\<phi> =\\<^sub>\\<alpha> tPred \\<phi>\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   t2 =\\<^sub>\\<alpha> p \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           t1 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           t2 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n                         tAct \\<alpha>1 t1", "then"], ["proof (chain)\npicking this:\n  ?p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  t2 =\\<^sub>\\<alpha> ?p \\<bullet> t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  t1 =\\<^sub>\\<alpha> (?a \\<rightleftharpoons> ?b) \\<bullet> t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n  t2 \\<Longrightarrow>\n  t2 =\\<^sub>\\<alpha> (?a \\<rightleftharpoons> ?b) \\<bullet> t2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "obtain p where \"(bn \\<alpha>1, t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) p (bn \\<alpha>2, t2) \\<and> (bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\""], ["proof (prove)\nusing this:\n  ?p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  t2 =\\<^sub>\\<alpha> ?p \\<bullet> t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  t1 =\\<^sub>\\<alpha> (?a \\<rightleftharpoons> ?b) \\<bullet> t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n  t2 \\<Longrightarrow>\n  t2 =\\<^sub>\\<alpha> (?a \\<rightleftharpoons> ?b) \\<bullet> t2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        (bn \\<alpha>1,\n         t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n        (bn \\<alpha>1,\n         \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n       \\<alpha>2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2; t2 =\\<^sub>\\<alpha> t1\\<rbrakk>\n       \\<Longrightarrow> tNot t2 =\\<^sub>\\<alpha> tNot t1\n 2. \\<And>\\<phi>. tPred \\<phi> =\\<^sub>\\<alpha> tPred \\<phi>\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   t2 =\\<^sub>\\<alpha> p \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           t1 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           t2 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n                         tAct \\<alpha>1 t1", "then"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "have \"(bn \\<alpha>2, t2) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) (-p) (bn \\<alpha>1, t1) \\<and> (bn \\<alpha>2, \\<alpha>2) \\<approx>set (=) supp (-p) (bn \\<alpha>1, \\<alpha>1)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>2,\n     t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (- p) (bn \\<alpha>1, t1) \\<and>\n    (bn \\<alpha>2,\n     \\<alpha>2) \\<approx>set (=) supp (- p) (bn \\<alpha>1, \\<alpha>1)", "using tAct.IH"], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  ?p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  t2 =\\<^sub>\\<alpha> ?p \\<bullet> t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  t1 =\\<^sub>\\<alpha> (?a \\<rightleftharpoons> ?b) \\<bullet> t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n  t2 \\<Longrightarrow>\n  t2 =\\<^sub>\\<alpha> (?a \\<rightleftharpoons> ?b) \\<bullet> t2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>2,\n     t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (- p) (bn \\<alpha>1, t1) \\<and>\n    (bn \\<alpha>2,\n     \\<alpha>2) \\<approx>set (=) supp (- p) (bn \\<alpha>1, \\<alpha>1)", "by (metis (mono_tags, lifting) alpha_Tree_eqvt alpha_sym(1) permute_minus_cancel(2))"], ["proof (state)\nthis:\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p) (bn \\<alpha>1, t1) \\<and>\n  (bn \\<alpha>2,\n   \\<alpha>2) \\<approx>set (=) supp (- p) (bn \\<alpha>1, \\<alpha>1)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2; t2 =\\<^sub>\\<alpha> t1\\<rbrakk>\n       \\<Longrightarrow> tNot t2 =\\<^sub>\\<alpha> tNot t1\n 2. \\<And>\\<phi>. tPred \\<phi> =\\<^sub>\\<alpha> tPred \\<phi>\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   t2 =\\<^sub>\\<alpha> p \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           t1 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           t2 =\\<^sub>\\<alpha> (a \\<rightleftharpoons> b) \\<bullet> t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n                         tAct \\<alpha>1 t1", "then"], ["proof (chain)\npicking this:\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p) (bn \\<alpha>1, t1) \\<and>\n  (bn \\<alpha>2,\n   \\<alpha>2) \\<approx>set (=) supp (- p) (bn \\<alpha>1, \\<alpha>1)", "show ?case"], ["proof (prove)\nusing this:\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (- p) (bn \\<alpha>1, t1) \\<and>\n  (bn \\<alpha>2,\n   \\<alpha>2) \\<approx>set (=) supp (- p) (bn \\<alpha>1, \\<alpha>1)\n\ngoal (1 subgoal):\n 1. tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct \\<alpha>1 t1", "by auto"], ["proof (state)\nthis:\n  tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct \\<alpha>1 t1\n\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2; t2 =\\<^sub>\\<alpha> t1\\<rbrakk>\n       \\<Longrightarrow> tNot t2 =\\<^sub>\\<alpha> tNot t1\n 2. \\<And>\\<phi>. tPred \\<phi> =\\<^sub>\\<alpha> tPred \\<phi>", "qed simp_all"], ["proof (state)\nthis:\n  y =\\<^sub>\\<alpha> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_Tree_transp: \"transp alpha_Tree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp (=\\<^sub>\\<alpha>)", "proof (rule transpI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x =\\<^sub>\\<alpha> y; y =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> x =\\<^sub>\\<alpha> z", "fix x y z:: \"('a,'b,'c) Tree\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x =\\<^sub>\\<alpha> y; y =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> x =\\<^sub>\\<alpha> z", "assume \"x =\\<^sub>\\<alpha> y\" and \"y =\\<^sub>\\<alpha> z\""], ["proof (state)\nthis:\n  x =\\<^sub>\\<alpha> y\n  y =\\<^sub>\\<alpha> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x =\\<^sub>\\<alpha> y; y =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> x =\\<^sub>\\<alpha> z", "then"], ["proof (chain)\npicking this:\n  x =\\<^sub>\\<alpha> y\n  y =\\<^sub>\\<alpha> z", "show \"x =\\<^sub>\\<alpha> z\""], ["proof (prove)\nusing this:\n  x =\\<^sub>\\<alpha> y\n  y =\\<^sub>\\<alpha> z\n\ngoal (1 subgoal):\n 1. x =\\<^sub>\\<alpha> z", "proof (induction x y arbitrary: z rule: alpha_Tree_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2 z.\n       \\<lbrakk>\\<And>a b z.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b; b =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> a =\\<^sub>\\<alpha> z;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2;\n        tConj tset2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tConj tset1 =\\<^sub>\\<alpha> z\n 2. \\<And>t1 t2 z.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>z.\n           t2 =\\<^sub>\\<alpha> z \\<Longrightarrow> t1 =\\<^sub>\\<alpha> z;\n        tNot t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tNot t1 =\\<^sub>\\<alpha> z\n 3. \\<And>\\<phi> z.\n       tPred \\<phi> =\\<^sub>\\<alpha> z \\<Longrightarrow>\n       tPred \\<phi> =\\<^sub>\\<alpha> z\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "case (tConj tset_x tset_y)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> set_bset tset_x; ?b \\<in> set_bset tset_y;\n   ?a =\\<^sub>\\<alpha> ?b; ?b =\\<^sub>\\<alpha> ?z\\<rbrakk>\n  \\<Longrightarrow> ?a =\\<^sub>\\<alpha> ?z\n  rel_bset (=\\<^sub>\\<alpha>) tset_x tset_y\n  tConj tset_y =\\<^sub>\\<alpha> z\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2 z.\n       \\<lbrakk>\\<And>a b z.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b; b =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> a =\\<^sub>\\<alpha> z;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2;\n        tConj tset2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tConj tset1 =\\<^sub>\\<alpha> z\n 2. \\<And>t1 t2 z.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>z.\n           t2 =\\<^sub>\\<alpha> z \\<Longrightarrow> t1 =\\<^sub>\\<alpha> z;\n        tNot t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tNot t1 =\\<^sub>\\<alpha> z\n 3. \\<And>\\<phi> z.\n       tPred \\<phi> =\\<^sub>\\<alpha> z \\<Longrightarrow>\n       tPred \\<phi> =\\<^sub>\\<alpha> z\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. tConj tset_x =\\<^sub>\\<alpha> z", "proof (cases z)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1. z = tConj x1 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 2. \\<And>x2. z = tNot x2 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 3. \\<And>x3. z = tPred x3 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z", "fix tset_z"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1. z = tConj x1 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 2. \\<And>x2. z = tNot x2 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 3. \\<And>x3. z = tPred x3 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z", "assume z: \"z = tConj tset_z\""], ["proof (state)\nthis:\n  z = tConj tset_z\n\ngoal (4 subgoals):\n 1. \\<And>x1. z = tConj x1 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 2. \\<And>x2. z = tNot x2 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 3. \\<And>x3. z = tPred x3 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z", "have \"rel_bset (=\\<^sub>\\<alpha>) tset_x tset_z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_bset (=\\<^sub>\\<alpha>) tset_x tset_z", "unfolding rel_bset.rep_eq rel_set_def Ball_def Bex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<in> set_bset tset_x \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set_bset tset_z \\<and> x =\\<^sub>\\<alpha> xa)) \\<and>\n    (\\<forall>x.\n        x \\<in> set_bset tset_z \\<longrightarrow>\n        (\\<exists>xa.\n            xa \\<in> set_bset tset_x \\<and> xa =\\<^sub>\\<alpha> x))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x.\n       x \\<in> set_bset tset_x \\<longrightarrow>\n       (\\<exists>xa. xa \\<in> set_bset tset_z \\<and> x =\\<^sub>\\<alpha> xa)\n 2. \\<forall>x.\n       x \\<in> set_bset tset_z \\<longrightarrow>\n       (\\<exists>xa. xa \\<in> set_bset tset_x \\<and> xa =\\<^sub>\\<alpha> x)", "show \"\\<forall>x'. x' \\<in> set_bset tset_x \\<longrightarrow> (\\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x'.\n       x' \\<in> set_bset tset_x \\<longrightarrow>\n       (\\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z')", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x'.\n       x' \\<in> set_bset tset_x \\<Longrightarrow>\n       \\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x'.\n       x' \\<in> set_bset tset_x \\<Longrightarrow>\n       \\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'", "assume 1: \"x' \\<in> set_bset tset_x\""], ["proof (state)\nthis:\n  x' \\<in> set_bset tset_x\n\ngoal (1 subgoal):\n 1. \\<And>x'.\n       x' \\<in> set_bset tset_x \\<Longrightarrow>\n       \\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'", "then"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset tset_x", "obtain y' where 2: \"y' \\<in> set_bset tset_y\" and 3: \"x' =\\<^sub>\\<alpha> y'\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset_x\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set_bset tset_y; x' =\\<^sub>\\<alpha> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis rel_bset.rep_eq rel_set_def tConj.hyps)"], ["proof (state)\nthis:\n  y' \\<in> set_bset tset_y\n  x' =\\<^sub>\\<alpha> y'\n\ngoal (1 subgoal):\n 1. \\<And>x'.\n       x' \\<in> set_bset tset_x \\<Longrightarrow>\n       \\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'", "from 2"], ["proof (chain)\npicking this:\n  y' \\<in> set_bset tset_y", "obtain z' where 4: \"z' \\<in> set_bset tset_z\" and 5: \"y' =\\<^sub>\\<alpha> z'\""], ["proof (prove)\nusing this:\n  y' \\<in> set_bset tset_y\n\ngoal (1 subgoal):\n 1. (\\<And>z'.\n        \\<lbrakk>z' \\<in> set_bset tset_z; y' =\\<^sub>\\<alpha> z'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis alpha_tConj rel_bset.rep_eq rel_set_def tConj.prems z)"], ["proof (state)\nthis:\n  z' \\<in> set_bset tset_z\n  y' =\\<^sub>\\<alpha> z'\n\ngoal (1 subgoal):\n 1. \\<And>x'.\n       x' \\<in> set_bset tset_x \\<Longrightarrow>\n       \\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'", "from 1 2 3 5"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset tset_x\n  y' \\<in> set_bset tset_y\n  x' =\\<^sub>\\<alpha> y'\n  y' =\\<^sub>\\<alpha> z'", "have \"x' =\\<^sub>\\<alpha> z'\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset_x\n  y' \\<in> set_bset tset_y\n  x' =\\<^sub>\\<alpha> y'\n  y' =\\<^sub>\\<alpha> z'\n\ngoal (1 subgoal):\n 1. x' =\\<^sub>\\<alpha> z'", "by (rule tConj.IH)"], ["proof (state)\nthis:\n  x' =\\<^sub>\\<alpha> z'\n\ngoal (1 subgoal):\n 1. \\<And>x'.\n       x' \\<in> set_bset tset_x \\<Longrightarrow>\n       \\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'", "with 4"], ["proof (chain)\npicking this:\n  z' \\<in> set_bset tset_z\n  x' =\\<^sub>\\<alpha> z'", "show \"\\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'\""], ["proof (prove)\nusing this:\n  z' \\<in> set_bset tset_z\n  x' =\\<^sub>\\<alpha> z'\n\ngoal (1 subgoal):\n 1. \\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'", "by auto"], ["proof (state)\nthis:\n  \\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x'.\n     x' \\<in> set_bset tset_x \\<longrightarrow>\n     (\\<exists>z'. z' \\<in> set_bset tset_z \\<and> x' =\\<^sub>\\<alpha> z')\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set_bset tset_z \\<longrightarrow>\n       (\\<exists>xa. xa \\<in> set_bset tset_x \\<and> xa =\\<^sub>\\<alpha> x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set_bset tset_z \\<longrightarrow>\n       (\\<exists>xa. xa \\<in> set_bset tset_x \\<and> xa =\\<^sub>\\<alpha> x)", "show \"\\<forall>z'. z' \\<in> set_bset tset_z \\<longrightarrow> (\\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z'.\n       z' \\<in> set_bset tset_z \\<longrightarrow>\n       (\\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z')", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z'.\n       z' \\<in> set_bset tset_z \\<Longrightarrow>\n       \\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'", "fix z'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z'.\n       z' \\<in> set_bset tset_z \\<Longrightarrow>\n       \\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'", "assume 1: \"z' \\<in> set_bset tset_z\""], ["proof (state)\nthis:\n  z' \\<in> set_bset tset_z\n\ngoal (1 subgoal):\n 1. \\<And>z'.\n       z' \\<in> set_bset tset_z \\<Longrightarrow>\n       \\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'", "then"], ["proof (chain)\npicking this:\n  z' \\<in> set_bset tset_z", "obtain y' where 2: \"y' \\<in> set_bset tset_y\" and 3: \"y' =\\<^sub>\\<alpha> z'\""], ["proof (prove)\nusing this:\n  z' \\<in> set_bset tset_z\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y' \\<in> set_bset tset_y; y' =\\<^sub>\\<alpha> z'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis alpha_tConj rel_bset.rep_eq rel_set_def tConj.prems z)"], ["proof (state)\nthis:\n  y' \\<in> set_bset tset_y\n  y' =\\<^sub>\\<alpha> z'\n\ngoal (1 subgoal):\n 1. \\<And>z'.\n       z' \\<in> set_bset tset_z \\<Longrightarrow>\n       \\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'", "from 2"], ["proof (chain)\npicking this:\n  y' \\<in> set_bset tset_y", "obtain x' where 4: \"x' \\<in> set_bset tset_x\" and 5: \"x' =\\<^sub>\\<alpha> y'\""], ["proof (prove)\nusing this:\n  y' \\<in> set_bset tset_y\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x' \\<in> set_bset tset_x; x' =\\<^sub>\\<alpha> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis rel_bset.rep_eq rel_set_def tConj.hyps)"], ["proof (state)\nthis:\n  x' \\<in> set_bset tset_x\n  x' =\\<^sub>\\<alpha> y'\n\ngoal (1 subgoal):\n 1. \\<And>z'.\n       z' \\<in> set_bset tset_z \\<Longrightarrow>\n       \\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'", "from 4 2 5 3"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset tset_x\n  y' \\<in> set_bset tset_y\n  x' =\\<^sub>\\<alpha> y'\n  y' =\\<^sub>\\<alpha> z'", "have \"x' =\\<^sub>\\<alpha> z'\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset_x\n  y' \\<in> set_bset tset_y\n  x' =\\<^sub>\\<alpha> y'\n  y' =\\<^sub>\\<alpha> z'\n\ngoal (1 subgoal):\n 1. x' =\\<^sub>\\<alpha> z'", "by (rule tConj.IH)"], ["proof (state)\nthis:\n  x' =\\<^sub>\\<alpha> z'\n\ngoal (1 subgoal):\n 1. \\<And>z'.\n       z' \\<in> set_bset tset_z \\<Longrightarrow>\n       \\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'", "with 4"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset tset_x\n  x' =\\<^sub>\\<alpha> z'", "show \"\\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset tset_x\n  x' =\\<^sub>\\<alpha> z'\n\ngoal (1 subgoal):\n 1. \\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'", "by auto"], ["proof (state)\nthis:\n  \\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>z'.\n     z' \\<in> set_bset tset_z \\<longrightarrow>\n     (\\<exists>x'. x' \\<in> set_bset tset_x \\<and> x' =\\<^sub>\\<alpha> z')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rel_bset (=\\<^sub>\\<alpha>) tset_x tset_z\n\ngoal (4 subgoals):\n 1. \\<And>x1. z = tConj x1 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 2. \\<And>x2. z = tNot x2 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 3. \\<And>x3. z = tPred x3 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z", "with z"], ["proof (chain)\npicking this:\n  z = tConj tset_z\n  rel_bset (=\\<^sub>\\<alpha>) tset_x tset_z", "show \"tConj tset_x =\\<^sub>\\<alpha> z\""], ["proof (prove)\nusing this:\n  z = tConj tset_z\n  rel_bset (=\\<^sub>\\<alpha>) tset_x tset_z\n\ngoal (1 subgoal):\n 1. tConj tset_x =\\<^sub>\\<alpha> z", "by simp"], ["proof (state)\nthis:\n  tConj tset_x =\\<^sub>\\<alpha> z\n\ngoal (3 subgoals):\n 1. \\<And>x2. z = tNot x2 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 2. \\<And>x3. z = tPred x3 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z\n 3. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow> tConj tset_x =\\<^sub>\\<alpha> z", "qed (insert tConj.prems, auto)"], ["proof (state)\nthis:\n  tConj tset_x =\\<^sub>\\<alpha> z\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2 z.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>z.\n           t2 =\\<^sub>\\<alpha> z \\<Longrightarrow> t1 =\\<^sub>\\<alpha> z;\n        tNot t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tNot t1 =\\<^sub>\\<alpha> z\n 2. \\<And>\\<phi> z.\n       tPred \\<phi> =\\<^sub>\\<alpha> z \\<Longrightarrow>\n       tPred \\<phi> =\\<^sub>\\<alpha> z\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 z.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>z.\n           t2 =\\<^sub>\\<alpha> z \\<Longrightarrow> t1 =\\<^sub>\\<alpha> z;\n        tNot t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tNot t1 =\\<^sub>\\<alpha> z\n 2. \\<And>\\<phi> z.\n       tPred \\<phi> =\\<^sub>\\<alpha> z \\<Longrightarrow>\n       tPred \\<phi> =\\<^sub>\\<alpha> z\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "case tNot"], ["proof (state)\nthis:\n  t1_ =\\<^sub>\\<alpha> t2_\n  t2_ =\\<^sub>\\<alpha> ?z \\<Longrightarrow> t1_ =\\<^sub>\\<alpha> ?z\n  tNot t2_ =\\<^sub>\\<alpha> z\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2 z.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        \\<And>z.\n           t2 =\\<^sub>\\<alpha> z \\<Longrightarrow> t1 =\\<^sub>\\<alpha> z;\n        tNot t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tNot t1 =\\<^sub>\\<alpha> z\n 2. \\<And>\\<phi> z.\n       tPred \\<phi> =\\<^sub>\\<alpha> z \\<Longrightarrow>\n       tPred \\<phi> =\\<^sub>\\<alpha> z\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "then"], ["proof (chain)\npicking this:\n  t1_ =\\<^sub>\\<alpha> t2_\n  t2_ =\\<^sub>\\<alpha> ?z \\<Longrightarrow> t1_ =\\<^sub>\\<alpha> ?z\n  tNot t2_ =\\<^sub>\\<alpha> z", "show ?case"], ["proof (prove)\nusing this:\n  t1_ =\\<^sub>\\<alpha> t2_\n  t2_ =\\<^sub>\\<alpha> ?z \\<Longrightarrow> t1_ =\\<^sub>\\<alpha> ?z\n  tNot t2_ =\\<^sub>\\<alpha> z\n\ngoal (1 subgoal):\n 1. tNot t1_ =\\<^sub>\\<alpha> z", "by (cases z) simp_all"], ["proof (state)\nthis:\n  tNot t1_ =\\<^sub>\\<alpha> z\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> z.\n       tPred \\<phi> =\\<^sub>\\<alpha> z \\<Longrightarrow>\n       tPred \\<phi> =\\<^sub>\\<alpha> z\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi> z.\n       tPred \\<phi> =\\<^sub>\\<alpha> z \\<Longrightarrow>\n       tPred \\<phi> =\\<^sub>\\<alpha> z\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "case tPred"], ["proof (state)\nthis:\n  tPred \\<phi>_ =\\<^sub>\\<alpha> z\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi> z.\n       tPred \\<phi> =\\<^sub>\\<alpha> z \\<Longrightarrow>\n       tPred \\<phi> =\\<^sub>\\<alpha> z\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "then"], ["proof (chain)\npicking this:\n  tPred \\<phi>_ =\\<^sub>\\<alpha> z", "show ?case"], ["proof (prove)\nusing this:\n  tPred \\<phi>_ =\\<^sub>\\<alpha> z\n\ngoal (1 subgoal):\n 1. tPred \\<phi>_ =\\<^sub>\\<alpha> z", "by simp"], ["proof (state)\nthis:\n  tPred \\<phi>_ =\\<^sub>\\<alpha> z\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "case (tAct \\<alpha>1 t1 \\<alpha>2 t2)"], ["proof (state)\nthis:\n  \\<lbrakk>?p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n   t2 =\\<^sub>\\<alpha> ?z\\<rbrakk>\n  \\<Longrightarrow> ?p \\<bullet> t1 =\\<^sub>\\<alpha> ?z\n  \\<lbrakk>(?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha> t1;\n   t1 =\\<^sub>\\<alpha> ?z\\<rbrakk>\n  \\<Longrightarrow> (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    ?z\n  \\<lbrakk>(?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha> t2;\n   t2 =\\<^sub>\\<alpha> ?z\\<rbrakk>\n  \\<Longrightarrow> (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    ?z\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>1 t1 \\<alpha>2 t2 z.\n       \\<lbrakk>\\<And>p z.\n                   \\<lbrakk>p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n                    t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n                   \\<Longrightarrow> p \\<bullet> t1 =\\<^sub>\\<alpha> z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    t1;\n            t1 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                             z;\n        \\<And>a b z.\n           \\<lbrakk>(a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    t2;\n            t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n           \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                             z;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n        tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\\<rbrakk>\n       \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "proof (cases z)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow>\n       tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "fix \\<alpha> t"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow>\n       tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "assume z: \"z = tAct \\<alpha> t\""], ["proof (state)\nthis:\n  z = tAct \\<alpha> t\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow>\n       tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "obtain p where 1: \"(bn \\<alpha>1, t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) p (bn \\<alpha>2, t2) \\<and> (bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        (bn \\<alpha>1,\n         t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n        (bn \\<alpha>1,\n         \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n       \\<alpha>2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using tAct.hyps"], ["proof (prove)\nusing this:\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        (bn \\<alpha>1,\n         t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n        (bn \\<alpha>1,\n         \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n       \\<alpha>2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow>\n       tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "obtain q where 2: \"(bn \\<alpha>2, t2) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) q (bn \\<alpha>, t) \\<and> (bn \\<alpha>2, \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>, \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        (bn \\<alpha>2,\n         t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) q (bn \\<alpha>, t) \\<and>\n        (bn \\<alpha>2,\n         \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>,\n       \\<alpha>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using tAct.prems z"], ["proof (prove)\nusing this:\n  tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> z\n  z = tAct \\<alpha> t\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        (bn \\<alpha>2,\n         t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) q (bn \\<alpha>, t) \\<and>\n        (bn \\<alpha>2,\n         \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>,\n       \\<alpha>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>, t) \\<and>\n  (bn \\<alpha>2, \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>, \\<alpha>)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow>\n       tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "have \"(bn \\<alpha>1, t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) (q + p) (bn \\<alpha>, t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "have \"supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 = supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n    supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "using 1 and 2"], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>, t) \\<and>\n  (bn \\<alpha>2, \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n    supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "by (metis alpha_set)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "moreover"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "have \"(supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (q + p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (q + p)", "using 1 and 2"], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>, t) \\<and>\n  (bn \\<alpha>2, \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (q + p)", "by (metis alpha_set fresh_star_plus)"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (q + p)\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "moreover"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (q + p)\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "have \"(q + p) \\<bullet> t1 =\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (q + p) \\<bullet> t1 =\\<^sub>\\<alpha> t", "using 1 and 2 and tAct.IH"], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>, t) \\<and>\n  (bn \\<alpha>2, \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>, \\<alpha>)\n  \\<lbrakk>?p \\<bullet> t1 =\\<^sub>\\<alpha> t2;\n   t2 =\\<^sub>\\<alpha> ?z\\<rbrakk>\n  \\<Longrightarrow> ?p \\<bullet> t1 =\\<^sub>\\<alpha> ?z\n  \\<lbrakk>(?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha> t1;\n   t1 =\\<^sub>\\<alpha> ?z\\<rbrakk>\n  \\<Longrightarrow> (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n                    ?z\n  \\<lbrakk>(?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha> t2;\n   t2 =\\<^sub>\\<alpha> ?z\\<rbrakk>\n  \\<Longrightarrow> (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n                    ?z\n\ngoal (1 subgoal):\n 1. (q + p) \\<bullet> t1 =\\<^sub>\\<alpha> t", "by (metis (no_types, lifting) alpha_Tree_eqvt alpha_set permute_minus_cancel(1) permute_plus)"], ["proof (state)\nthis:\n  (q + p) \\<bullet> t1 =\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "moreover"], ["proof (state)\nthis:\n  (q + p) \\<bullet> t1 =\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "have \"(q + p) \\<bullet> bn \\<alpha>1 = bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (q + p) \\<bullet> bn \\<alpha>1 = bn \\<alpha>", "using 1 and 2"], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>, t) \\<and>\n  (bn \\<alpha>2, \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. (q + p) \\<bullet> bn \\<alpha>1 = bn \\<alpha>", "by (metis alpha_set permute_plus)"], ["proof (state)\nthis:\n  (q + p) \\<bullet> bn \\<alpha>1 = bn \\<alpha>\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "ultimately"], ["proof (chain)\npicking this:\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (q + p)\n  (q + p) \\<bullet> t1 =\\<^sub>\\<alpha> t\n  (q + p) \\<bullet> bn \\<alpha>1 = bn \\<alpha>", "show ?thesis"], ["proof (prove)\nusing this:\n  supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* (q + p)\n  (q + p) \\<bullet> t1 =\\<^sub>\\<alpha> t\n  (q + p) \\<bullet> bn \\<alpha>1 = bn \\<alpha>\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)", "by (metis alpha_set)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow>\n       tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "moreover"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow>\n       tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "have \"(bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp (q + p) (bn \\<alpha>, \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     \\<alpha>1) \\<approx>set (=) supp (q + p) (bn \\<alpha>, \\<alpha>)", "using 1 and 2"], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  (bn \\<alpha>2,\n   t2) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) q (bn \\<alpha>, t) \\<and>\n  (bn \\<alpha>2, \\<alpha>2) \\<approx>set (=) supp q (bn \\<alpha>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     \\<alpha>1) \\<approx>set (=) supp (q + p) (bn \\<alpha>, \\<alpha>)", "by (metis (mono_tags) alpha_trans(1) permute_plus)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp (q + p) (bn \\<alpha>, \\<alpha>)\n\ngoal (4 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 4. \\<And>x41 x42.\n       z = tAct x41 x42 \\<Longrightarrow>\n       tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "ultimately"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp (q + p) (bn \\<alpha>, \\<alpha>)", "show \"tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp (q + p) (bn \\<alpha>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "using z"], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) (q + p) (bn \\<alpha>, t)\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp (q + p) (bn \\<alpha>, \\<alpha>)\n  z = tAct \\<alpha> t\n\ngoal (1 subgoal):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "by auto"], ["proof (state)\nthis:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       z = tConj x1 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 2. \\<And>x2.\n       z = tNot x2 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n 3. \\<And>x3.\n       z = tPred x3 \\<Longrightarrow> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z", "qed (insert tAct.prems, auto)"], ["proof (state)\nthis:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x =\\<^sub>\\<alpha> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alpha_Tree_equivp: \"equivp alpha_Tree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (=\\<^sub>\\<alpha>)", "by (auto intro: equivpI alpha_Tree_reflp alpha_Tree_symp alpha_Tree_transp)"], ["", "text \\<open>$alpha$-equivalent trees have the same support modulo $alpha$-equivalence.\\<close>"], ["", "lemma alpha_Tree_supp_rel:\n  assumes \"t1 =\\<^sub>\\<alpha> t2\"\n  shows \"supp_rel (=\\<^sub>\\<alpha>) t1 = supp_rel (=\\<^sub>\\<alpha>) t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) t1 = supp_rel (=\\<^sub>\\<alpha>) t2", "using assms"], ["proof (prove)\nusing this:\n  t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) t1 = supp_rel (=\\<^sub>\\<alpha>) t2", "proof (induction rule: alpha_Tree_induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) a =\n                                     supp_rel (=\\<^sub>\\<alpha>) b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 3. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "case (tConj tset1 tset2)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) ?a =\n                    supp_rel (=\\<^sub>\\<alpha>) ?b\n  rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) a =\n                                     supp_rel (=\\<^sub>\\<alpha>) b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 3. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "have sym: \"\\<And>x y. rel_bset (=\\<^sub>\\<alpha>) x y \\<longleftrightarrow> rel_bset (=\\<^sub>\\<alpha>) y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       rel_bset (=\\<^sub>\\<alpha>) x y = rel_bset (=\\<^sub>\\<alpha>) y x", "by (meson alpha_Tree_symp bset.rel_symp sympE)"], ["proof (state)\nthis:\n  rel_bset (=\\<^sub>\\<alpha>) ?x ?y = rel_bset (=\\<^sub>\\<alpha>) ?y ?x\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) a =\n                                     supp_rel (=\\<^sub>\\<alpha>) b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 3. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "{"], ["proof (state)\nthis:\n  rel_bset (=\\<^sub>\\<alpha>) ?x ?y = rel_bset (=\\<^sub>\\<alpha>) ?y ?x\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) a =\n                                     supp_rel (=\\<^sub>\\<alpha>) b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 3. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "fix a b"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) a =\n                                     supp_rel (=\\<^sub>\\<alpha>) b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 3. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "from tConj.hyps"], ["proof (chain)\npicking this:\n  rel_bset (=\\<^sub>\\<alpha>) tset1 tset2", "have *: \"rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset1) ((a \\<rightleftharpoons> b) \\<bullet> tset2)\""], ["proof (prove)\nusing this:\n  rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\n\ngoal (1 subgoal):\n 1. rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset1)\n     ((a \\<rightleftharpoons> b) \\<bullet> tset2)", "by (metis alpha_tConj alpha_Tree_eqvt permute_Tree_tConj)"], ["proof (state)\nthis:\n  rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset1)\n   ((a \\<rightleftharpoons> b) \\<bullet> tset2)\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) a =\n                                     supp_rel (=\\<^sub>\\<alpha>) b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 3. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "have \"rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset1) tset1 \\<longleftrightarrow> rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset2) tset2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset1)\n     tset1 =\n    rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset2)\n     tset2", "by (rule iffI) (metis \"*\" alpha_Tree_transp bset.rel_transp sym tConj.hyps transpE)+"], ["proof (state)\nthis:\n  rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset1)\n   tset1 =\n  rel_bset (=\\<^sub>\\<alpha>) ((a \\<rightleftharpoons> b) \\<bullet> tset2)\n   tset2\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) a =\n                                     supp_rel (=\\<^sub>\\<alpha>) b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 3. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "}"], ["proof (state)\nthis:\n  rel_bset (=\\<^sub>\\<alpha>)\n   ((?a3 \\<rightleftharpoons> ?b3) \\<bullet> tset1) tset1 =\n  rel_bset (=\\<^sub>\\<alpha>)\n   ((?a3 \\<rightleftharpoons> ?b3) \\<bullet> tset2) tset2\n\ngoal (4 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) a =\n                                     supp_rel (=\\<^sub>\\<alpha>) b;\n        rel_bset (=\\<^sub>\\<alpha>) tset1 tset2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 3. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "then"], ["proof (chain)\npicking this:\n  rel_bset (=\\<^sub>\\<alpha>)\n   ((?a3 \\<rightleftharpoons> ?b3) \\<bullet> tset1) tset1 =\n  rel_bset (=\\<^sub>\\<alpha>)\n   ((?a3 \\<rightleftharpoons> ?b3) \\<bullet> tset2) tset2", "show ?case"], ["proof (prove)\nusing this:\n  rel_bset (=\\<^sub>\\<alpha>)\n   ((?a3 \\<rightleftharpoons> ?b3) \\<bullet> tset1) tset1 =\n  rel_bset (=\\<^sub>\\<alpha>)\n   ((?a3 \\<rightleftharpoons> ?b3) \\<bullet> tset2) tset2\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n    supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)", "by (simp add: supp_rel_def)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) (tConj tset1) =\n  supp_rel (=\\<^sub>\\<alpha>) (tConj tset2)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 2. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 2. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "case tNot"], ["proof (state)\nthis:\n  t1_ =\\<^sub>\\<alpha> t2_\n  supp_rel (=\\<^sub>\\<alpha>) t1_ = supp_rel (=\\<^sub>\\<alpha>) t2_\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2;\n        supp_rel (=\\<^sub>\\<alpha>) t1 =\n        supp_rel (=\\<^sub>\\<alpha>) t2\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tNot t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tNot t2)\n 2. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "then"], ["proof (chain)\npicking this:\n  t1_ =\\<^sub>\\<alpha> t2_\n  supp_rel (=\\<^sub>\\<alpha>) t1_ = supp_rel (=\\<^sub>\\<alpha>) t2_", "show ?case"], ["proof (prove)\nusing this:\n  t1_ =\\<^sub>\\<alpha> t2_\n  supp_rel (=\\<^sub>\\<alpha>) t1_ = supp_rel (=\\<^sub>\\<alpha>) t2_\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tNot t1_) =\n    supp_rel (=\\<^sub>\\<alpha>) (tNot t2_)", "by (simp add: supp_rel_def)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) (tNot t1_) =\n  supp_rel (=\\<^sub>\\<alpha>) (tNot t2_)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "case (tAct \\<alpha>1 t1 \\<alpha>2 t2)"], ["proof (state)\nthis:\n  ?p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  supp_rel (=\\<^sub>\\<alpha>) (?p \\<bullet> t1) =\n  supp_rel (=\\<^sub>\\<alpha>) t2\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  supp_rel (=\\<^sub>\\<alpha>) ((?a \\<rightleftharpoons> ?b) \\<bullet> t1) =\n  supp_rel (=\\<^sub>\\<alpha>) t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n  t2 \\<Longrightarrow>\n  supp_rel (=\\<^sub>\\<alpha>) ((?a \\<rightleftharpoons> ?b) \\<bullet> t2) =\n  supp_rel (=\\<^sub>\\<alpha>) t2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "{"], ["proof (state)\nthis:\n  ?p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  supp_rel (=\\<^sub>\\<alpha>) (?p \\<bullet> t1) =\n  supp_rel (=\\<^sub>\\<alpha>) t2\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  supp_rel (=\\<^sub>\\<alpha>) ((?a \\<rightleftharpoons> ?b) \\<bullet> t1) =\n  supp_rel (=\\<^sub>\\<alpha>) t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n  t2 \\<Longrightarrow>\n  supp_rel (=\\<^sub>\\<alpha>) ((?a \\<rightleftharpoons> ?b) \\<bullet> t2) =\n  supp_rel (=\\<^sub>\\<alpha>) t2\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "have \"tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "using tAct.hyps"], ["proof (prove)\nusing this:\n  \\<exists>p.\n     (bn \\<alpha>1,\n      t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n     (bn \\<alpha>1,\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "by simp"], ["proof (state)\nthis:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "then"], ["proof (chain)\npicking this:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "have \"(a \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>1 t1 \\<longleftrightarrow> (a \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\""], ["proof (prove)\nusing this:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. ((a \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n     tAct \\<alpha>1 t1) =\n    ((a \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n     tAct \\<alpha>2 t2)", "by (metis (no_types, lifting) alpha_Tree_eqvt alpha_Tree_symp alpha_Tree_transp sympE transpE)"], ["proof (state)\nthis:\n  ((a \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>1 t1 =\\<^sub>\\<alpha>\n   tAct \\<alpha>1 t1) =\n  ((a \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>2 t2 =\\<^sub>\\<alpha>\n   tAct \\<alpha>2 t2)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "}"], ["proof (state)\nthis:\n  ((?a2 \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>1\n       t1 =\\<^sub>\\<alpha>\n   tAct \\<alpha>1 t1) =\n  ((?a2 \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>2\n       t2 =\\<^sub>\\<alpha>\n   tAct \\<alpha>2 t2)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)\n 2. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>p.\n                   p \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   supp_rel (=\\<^sub>\\<alpha>) (p \\<bullet> t1) =\n                   supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           supp_rel (=\\<^sub>\\<alpha>) t1;\n        \\<And>a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           supp_rel (=\\<^sub>\\<alpha>)\n            ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           supp_rel (=\\<^sub>\\<alpha>) t2;\n        \\<exists>p.\n           (bn \\<alpha>1,\n            t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n           (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2) \\<and>\n           (bn \\<alpha>1,\n            \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n          \\<alpha>2)\\<rbrakk>\n       \\<Longrightarrow> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n                         supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "then"], ["proof (chain)\npicking this:\n  ((?a2 \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>1\n       t1 =\\<^sub>\\<alpha>\n   tAct \\<alpha>1 t1) =\n  ((?a2 \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>2\n       t2 =\\<^sub>\\<alpha>\n   tAct \\<alpha>2 t2)", "show ?case"], ["proof (prove)\nusing this:\n  ((?a2 \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>1\n       t1 =\\<^sub>\\<alpha>\n   tAct \\<alpha>1 t1) =\n  ((?a2 \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>2\n       t2 =\\<^sub>\\<alpha>\n   tAct \\<alpha>2 t2)\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n    supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)", "by (simp add: supp_rel_def)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>1 t1) =\n  supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha>2 t2)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) =\n       supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>)", "qed simp_all"], ["", "text \\<open>@{const tAct} preserves $\\alpha$-equivalence.\\<close>"], ["", "lemma alpha_Tree_tAct:\n  assumes \"t1 =\\<^sub>\\<alpha> t2\"\n  shows \"tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2", "have \"(bn \\<alpha>, t1) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) 0 (bn \\<alpha>, t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bn \\<alpha>,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) 0 (bn \\<alpha>, t2)", "using assms"], ["proof (prove)\nusing this:\n  t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>,\n     t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n    (=\\<^sub>\\<alpha>) 0 (bn \\<alpha>, t2)", "by (simp add: alpha_Tree_supp_rel alpha_set fresh_star_zero)"], ["proof (state)\nthis:\n  (bn \\<alpha>,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) 0 (bn \\<alpha>, t2)\n\ngoal (1 subgoal):\n 1. tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2", "moreover"], ["proof (state)\nthis:\n  (bn \\<alpha>,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) 0 (bn \\<alpha>, t2)\n\ngoal (1 subgoal):\n 1. tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2", "have \"(bn \\<alpha>, \\<alpha>) \\<approx>set (=) supp 0 (bn \\<alpha>, \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bn \\<alpha>, \\<alpha>) \\<approx>set (=) supp 0 (bn \\<alpha>, \\<alpha>)", "by (metis (full_types) alpha_refl(1))"], ["proof (state)\nthis:\n  (bn \\<alpha>, \\<alpha>) \\<approx>set (=) supp 0 (bn \\<alpha>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2", "ultimately"], ["proof (chain)\npicking this:\n  (bn \\<alpha>,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) 0 (bn \\<alpha>, t2)\n  (bn \\<alpha>, \\<alpha>) \\<approx>set (=) supp 0 (bn \\<alpha>, \\<alpha>)", "show ?thesis"], ["proof (prove)\nusing this:\n  (bn \\<alpha>,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) 0 (bn \\<alpha>, t2)\n  (bn \\<alpha>, \\<alpha>) \\<approx>set (=) supp 0 (bn \\<alpha>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2", "by auto"], ["proof (state)\nthis:\n  tAct \\<alpha> t1 =\\<^sub>\\<alpha> tAct \\<alpha> t2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The following lemmas describe the support modulo $alpha$-equivalence.\\<close>"], ["", "lemma supp_rel_tNot [simp]: \"supp_rel (=\\<^sub>\\<alpha>) (tNot t) = supp_rel (=\\<^sub>\\<alpha>) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tNot t) = supp_rel (=\\<^sub>\\<alpha>) t", "unfolding supp_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> tNot\n                    t =\\<^sub>\\<alpha>\n                    tNot t}} =\n    {a. infinite\n         {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                    t}}", "by simp"], ["", "lemma supp_rel_tPred [simp]: \"supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) = supp \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tPred \\<phi>) = supp \\<phi>", "unfolding supp_rel_def supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> tPred\n                    \\<phi> =\\<^sub>\\<alpha>\n                    tPred \\<phi>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> \\<phi> \\<noteq> \\<phi>}}", "by simp"], ["", "text \\<open>The support modulo $\\alpha$-equivalence of~@{term \"tAct \\<alpha> t\"} is not easily described:\nwhen~@{term t} has infinite support (modulo $\\alpha$-equivalence), the support (modulo\n$\\alpha$-equivalence) of~@{term \"tAct \\<alpha> t\"} may still contain names in~@{term \"bn \\<alpha>\"}. This\nincongruity is avoided when~@{term t} has finite support modulo $\\alpha$-equivalence.\\<close>"], ["", "lemma infinite_mono: \"infinite S \\<Longrightarrow> (\\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> T) \\<Longrightarrow> infinite T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite S;\n     \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> T\\<rbrakk>\n    \\<Longrightarrow> infinite T", "by (metis infinite_super subsetI)"], ["", "lemma supp_rel_tAct [simp]:\n  assumes \"finite (supp_rel (=\\<^sub>\\<alpha>) t)\"\n  shows \"supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t) = supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t) =\n    supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n    \\<subseteq> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n                bn \\<alpha>\n 2. supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n    \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "show \"supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha> \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n    \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "assume \"x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (state)\nthis:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "moreover"], ["proof (state)\nthis:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "{"], ["proof (state)\nthis:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "assume x1: \"x \\<in> supp \\<alpha>\" and x2: \"x \\<notin> bn \\<alpha>\""], ["proof (state)\nthis:\n  x \\<in> supp \\<alpha>\n  x \\<notin> bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "from x1"], ["proof (chain)\npicking this:\n  x \\<in> supp \\<alpha>", "have \"infinite {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>}\""], ["proof (prove)\nusing this:\n  x \\<in> supp \\<alpha>\n\ngoal (1 subgoal):\n 1. infinite\n     {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>}", "unfolding supp_def"], ["proof (prove)\nusing this:\n  x \\<in> {a. infinite\n               {b. (a \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n                   \\<alpha>}}\n\ngoal (1 subgoal):\n 1. infinite\n     {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>}", ".."], ["proof (state)\nthis:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>}", "have \"infinite ({b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} - supp \\<alpha>)\""], ["proof (prove)\nusing this:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>}\n\ngoal (1 subgoal):\n 1. infinite\n     ({b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} -\n      supp \\<alpha>)", "by (simp add: finite_supp)"], ["proof (state)\nthis:\n  infinite\n   ({b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} -\n    supp \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "moreover"], ["proof (state)\nthis:\n  infinite\n   ({b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} -\n    supp \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "{"], ["proof (state)\nthis:\n  infinite\n   ({b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} -\n    supp \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "assume \"b \\<in> {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} - supp \\<alpha>\""], ["proof (state)\nthis:\n  b \\<in> {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n              \\<alpha>} -\n          supp \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  b \\<in> {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n              \\<alpha>} -\n          supp \\<alpha>", "have b1: \"(x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>\" and b2: \"b \\<notin> supp \\<alpha> - bn \\<alpha>\""], ["proof (prove)\nusing this:\n  b \\<in> {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n              \\<alpha>} -\n          supp \\<alpha>\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> &&&\n    b \\<notin> supp \\<alpha> - bn \\<alpha>", "by simp+"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>\n  b \\<notin> supp \\<alpha> - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "from b1"], ["proof (chain)\npicking this:\n  (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>", "have \"sort_of x = sort_of b\""], ["proof (prove)\nusing this:\n  (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>\n\ngoal (1 subgoal):\n 1. sort_of x = sort_of b", "using swap_different_sorts"], ["proof (prove)\nusing this:\n  (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>\n  sort_of ?a \\<noteq> sort_of ?b \\<Longrightarrow>\n  (?a \\<rightleftharpoons> ?b) = 0\n\ngoal (1 subgoal):\n 1. sort_of x = sort_of b", "by fastforce"], ["proof (state)\nthis:\n  sort_of x = sort_of b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  sort_of x = sort_of b", "have \"(x \\<rightleftharpoons> b) \\<bullet> (supp \\<alpha> - bn \\<alpha>) \\<noteq> supp \\<alpha> - bn \\<alpha>\""], ["proof (prove)\nusing this:\n  sort_of x = sort_of b\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> (supp \\<alpha> -\n    bn \\<alpha>) \\<noteq>\n    supp \\<alpha> - bn \\<alpha>", "using b2 x1 x2"], ["proof (prove)\nusing this:\n  sort_of x = sort_of b\n  b \\<notin> supp \\<alpha> - bn \\<alpha>\n  x \\<in> supp \\<alpha>\n  x \\<notin> bn \\<alpha>\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> (supp \\<alpha> -\n    bn \\<alpha>) \\<noteq>\n    supp \\<alpha> - bn \\<alpha>", "by (simp add: swap_set_in)"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> (supp \\<alpha> -\n  bn \\<alpha>) \\<noteq>\n  supp \\<alpha> - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  (x \\<rightleftharpoons> b) \\<bullet> (supp \\<alpha> -\n  bn \\<alpha>) \\<noteq>\n  supp \\<alpha> - bn \\<alpha>", "have \"b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha> tAct \\<alpha> t}\""], ["proof (prove)\nusing this:\n  (x \\<rightleftharpoons> b) \\<bullet> (supp \\<alpha> -\n  bn \\<alpha>) \\<noteq>\n  supp \\<alpha> - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                       t =\\<^sub>\\<alpha>\n                       tAct \\<alpha> t}", "by (auto simp add: alpha_set Diff_eqvt bn_eqvt)"], ["proof (state)\nthis:\n  b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                     t =\\<^sub>\\<alpha>\n                     tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "}"], ["proof (state)\nthis:\n  ?b2\n  \\<in> {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n            \\<alpha>} -\n        supp \\<alpha> \\<Longrightarrow>\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                   t =\\<^sub>\\<alpha>\n                   tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "ultimately"], ["proof (chain)\npicking this:\n  infinite\n   ({b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} -\n    supp \\<alpha>)\n  ?b2\n  \\<in> {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n            \\<alpha>} -\n        supp \\<alpha> \\<Longrightarrow>\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                   t =\\<^sub>\\<alpha>\n                   tAct \\<alpha> t}", "have \"infinite {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha> tAct \\<alpha> t}\""], ["proof (prove)\nusing this:\n  infinite\n   ({b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} -\n    supp \\<alpha>)\n  ?b2\n  \\<in> {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n            \\<alpha>} -\n        supp \\<alpha> \\<Longrightarrow>\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                   t =\\<^sub>\\<alpha>\n                   tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. infinite\n     {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                t =\\<^sub>\\<alpha>\n                tAct \\<alpha> t}", "by (rule infinite_mono)"], ["proof (state)\nthis:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}", "have \"x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\""], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "unfolding supp_rel_def"], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. x \\<in> {a. infinite\n                 {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> tAct\n                            \\<alpha> t =\\<^sub>\\<alpha>\n                            tAct \\<alpha> t}}", ".."], ["proof (state)\nthis:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> supp \\<alpha>; x \\<notin> bn \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> supp \\<alpha>; x \\<notin> bn \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> supp \\<alpha>; x \\<notin> bn \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "assume x1: \"x \\<in> supp_rel (=\\<^sub>\\<alpha>) t\" and x2: \"x \\<notin> bn \\<alpha>\""], ["proof (state)\nthis:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) t\n  x \\<notin> bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "from x1"], ["proof (chain)\npicking this:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) t", "have \"infinite {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\""], ["proof (prove)\nusing this:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. infinite\n     {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "unfolding supp_rel_def"], ["proof (prove)\nusing this:\n  x \\<in> {a. infinite\n               {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                          t}}\n\ngoal (1 subgoal):\n 1. infinite\n     {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", ".."], ["proof (state)\nthis:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "have \"infinite ({b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} - supp_rel (=\\<^sub>\\<alpha>) t)\""], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. infinite\n     ({b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                 t} -\n      supp_rel (=\\<^sub>\\<alpha>) t)", "using assms"], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n  finite (supp_rel (=\\<^sub>\\<alpha>) t)\n\ngoal (1 subgoal):\n 1. infinite\n     ({b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                 t} -\n      supp_rel (=\\<^sub>\\<alpha>) t)", "by simp"], ["proof (state)\nthis:\n  infinite\n   ({b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} -\n    supp_rel (=\\<^sub>\\<alpha>) t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "moreover"], ["proof (state)\nthis:\n  infinite\n   ({b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} -\n    supp_rel (=\\<^sub>\\<alpha>) t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "{"], ["proof (state)\nthis:\n  infinite\n   ({b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} -\n    supp_rel (=\\<^sub>\\<alpha>) t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "assume \"b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} - supp_rel (=\\<^sub>\\<alpha>) t\""], ["proof (state)\nthis:\n  b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                     t} -\n          supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                     t} -\n          supp_rel (=\\<^sub>\\<alpha>) t", "have b1: \"\\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t\" and b2: \"b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (prove)\nusing this:\n  b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                     t} -\n          supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t &&&\n    b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "by simp+"], ["proof (state)\nthis:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t\n  b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "from b1"], ["proof (chain)\npicking this:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t", "have \"(x \\<rightleftharpoons> b) \\<bullet> t \\<noteq> t\""], ["proof (prove)\nusing this:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> t \\<noteq> t", "by (metis alpha_Tree_reflp reflpE)"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> t \\<noteq> t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  (x \\<rightleftharpoons> b) \\<bullet> t \\<noteq> t", "have \"sort_of x = sort_of b\""], ["proof (prove)\nusing this:\n  (x \\<rightleftharpoons> b) \\<bullet> t \\<noteq> t\n\ngoal (1 subgoal):\n 1. sort_of x = sort_of b", "using swap_different_sorts"], ["proof (prove)\nusing this:\n  (x \\<rightleftharpoons> b) \\<bullet> t \\<noteq> t\n  sort_of ?a \\<noteq> sort_of ?b \\<Longrightarrow>\n  (?a \\<rightleftharpoons> ?b) = 0\n\ngoal (1 subgoal):\n 1. sort_of x = sort_of b", "by fastforce"], ["proof (state)\nthis:\n  sort_of x = sort_of b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  sort_of x = sort_of b", "have \"(x \\<rightleftharpoons> b) \\<bullet> (supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>) \\<noteq> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (prove)\nusing this:\n  sort_of x = sort_of b\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> (supp_rel (=\\<^sub>\\<alpha>) t -\n    bn \\<alpha>) \\<noteq>\n    supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "using b2 x1 x2"], ["proof (prove)\nusing this:\n  sort_of x = sort_of b\n  b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) t\n  x \\<notin> bn \\<alpha>\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> (supp_rel (=\\<^sub>\\<alpha>) t -\n    bn \\<alpha>) \\<noteq>\n    supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "by (simp add: swap_set_in)"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> (supp_rel (=\\<^sub>\\<alpha>) t -\n  bn \\<alpha>) \\<noteq>\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  (x \\<rightleftharpoons> b) \\<bullet> (supp_rel (=\\<^sub>\\<alpha>) t -\n  bn \\<alpha>) \\<noteq>\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "have \"supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) - bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) \\<noteq> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (prove)\nusing this:\n  (x \\<rightleftharpoons> b) \\<bullet> (supp_rel (=\\<^sub>\\<alpha>) t -\n  bn \\<alpha>) \\<noteq>\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n    bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) \\<noteq>\n    supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "by (simp add: Diff_eqvt bn_eqvt)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) \\<noteq>\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) \\<noteq>\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "have \"b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha> tAct \\<alpha> t}\""], ["proof (prove)\nusing this:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) \\<noteq>\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                       t =\\<^sub>\\<alpha>\n                       tAct \\<alpha> t}", "by (simp add: alpha_set)"], ["proof (state)\nthis:\n  b \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                     t =\\<^sub>\\<alpha>\n                     tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "}"], ["proof (state)\nthis:\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                   t} -\n        supp_rel (=\\<^sub>\\<alpha>) t \\<Longrightarrow>\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                   t =\\<^sub>\\<alpha>\n                   tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "ultimately"], ["proof (chain)\npicking this:\n  infinite\n   ({b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} -\n    supp_rel (=\\<^sub>\\<alpha>) t)\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                   t} -\n        supp_rel (=\\<^sub>\\<alpha>) t \\<Longrightarrow>\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                   t =\\<^sub>\\<alpha>\n                   tAct \\<alpha> t}", "have \"infinite {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha> tAct \\<alpha> t}\""], ["proof (prove)\nusing this:\n  infinite\n   ({b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t} -\n    supp_rel (=\\<^sub>\\<alpha>) t)\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n                   t} -\n        supp_rel (=\\<^sub>\\<alpha>) t \\<Longrightarrow>\n  ?b2\n  \\<in> {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                   t =\\<^sub>\\<alpha>\n                   tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. infinite\n     {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                t =\\<^sub>\\<alpha>\n                tAct \\<alpha> t}", "by (rule infinite_mono)"], ["proof (state)\nthis:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "then"], ["proof (chain)\npicking this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}", "have \"x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\""], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "unfolding supp_rel_def"], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. x \\<in> {a. infinite\n                 {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> tAct\n                            \\<alpha> t =\\<^sub>\\<alpha>\n                            tAct \\<alpha> t}}", ".."], ["proof (state)\nthis:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> supp_rel (=\\<^sub>\\<alpha>) t;\n   x \\<notin> bn \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha> \\<Longrightarrow>\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  \\<lbrakk>x \\<in> supp \\<alpha>; x \\<notin> bn \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n  \\<lbrakk>x \\<in> supp_rel (=\\<^sub>\\<alpha>) t;\n   x \\<notin> bn \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "show \"x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\""], ["proof (prove)\nusing this:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  \\<lbrakk>x \\<in> supp \\<alpha>; x \\<notin> bn \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n  \\<lbrakk>x \\<in> supp_rel (=\\<^sub>\\<alpha>) t;\n   x \\<notin> bn \\<alpha>\\<rbrakk>\n  \\<Longrightarrow> x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "by auto"], ["proof (state)\nthis:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n    \\<subseteq> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n                bn \\<alpha>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n    \\<subseteq> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n                bn \\<alpha>", "show \"supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t) \\<subseteq> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n    \\<subseteq> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n                bn \\<alpha>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "assume \"x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\""], ["proof (state)\nthis:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "then"], ["proof (chain)\npicking this:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)", "have *: \"infinite {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha> tAct \\<alpha> t}\""], ["proof (prove)\nusing this:\n  x \\<in> supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n\ngoal (1 subgoal):\n 1. infinite\n     {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                t =\\<^sub>\\<alpha>\n                tAct \\<alpha> t}", "unfolding supp_rel_def"], ["proof (prove)\nusing this:\n  x \\<in> {a. infinite\n               {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                          t =\\<^sub>\\<alpha>\n                          tAct \\<alpha> t}}\n\ngoal (1 subgoal):\n 1. infinite\n     {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                t =\\<^sub>\\<alpha>\n                tAct \\<alpha> t}", ".."], ["proof (state)\nthis:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "moreover"], ["proof (state)\nthis:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "{"], ["proof (state)\nthis:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "assume \"\\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha> tAct \\<alpha> t\""], ["proof (state)\nthis:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n         t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "then"], ["proof (chain)\npicking this:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n         t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t", "have \"(x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or> \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t\""], ["proof (prove)\nusing this:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n         t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n    \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t", "using alpha_Tree_tAct"], ["proof (prove)\nusing this:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n         t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t\n  ?t1.0 =\\<^sub>\\<alpha> ?t2.0 \\<Longrightarrow>\n  tAct ?\\<alpha> ?t1.0 =\\<^sub>\\<alpha> tAct ?\\<alpha> ?t2.0\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n    \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t", "by force"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "}"], ["proof (state)\nthis:\n  \\<not> (x \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>\n           t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t \\<Longrightarrow>\n  (x \\<rightleftharpoons> ?b2) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n  \\<not> (x \\<rightleftharpoons> ?b2) \\<bullet> t =\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "ultimately"], ["proof (chain)\npicking this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n  \\<not> (x \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>\n           t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t \\<Longrightarrow>\n  (x \\<rightleftharpoons> ?b2) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n  \\<not> (x \\<rightleftharpoons> ?b2) \\<bullet> t =\\<^sub>\\<alpha> t", "have \"infinite {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or> \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\""], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n  \\<not> (x \\<rightleftharpoons> ?b2) \\<bullet> tAct \\<alpha>\n           t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t \\<Longrightarrow>\n  (x \\<rightleftharpoons> ?b2) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n  \\<not> (x \\<rightleftharpoons> ?b2) \\<bullet> t =\\<^sub>\\<alpha> t\n\ngoal (1 subgoal):\n 1. infinite\n     {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n         \\<alpha> \\<or>\n         \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "by (metis (mono_tags, lifting) infinite_mono mem_Collect_eq)"], ["proof (state)\nthis:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n       \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "then"], ["proof (chain)\npicking this:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n       \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "have \"infinite {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha>} \\<or> infinite {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\""], ["proof (prove)\nusing this:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq> \\<alpha> \\<or>\n       \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. infinite\n     {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n         \\<alpha>} \\<or>\n    infinite\n     {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "by (metis (mono_tags) finite_Collect_disjI)"], ["proof (state)\nthis:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n       \\<alpha>} \\<or>\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "then"], ["proof (chain)\npicking this:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n       \\<alpha>} \\<or>\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}", "have \"x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t\""], ["proof (prove)\nusing this:\n  infinite\n   {b. (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n       \\<alpha>} \\<or>\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t}\n\ngoal (1 subgoal):\n 1. x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t", "by (simp add: supp_def supp_rel_def)"], ["proof (state)\nthis:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "moreover"], ["proof (state)\nthis:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "{"], ["proof (state)\nthis:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "assume **: \"x \\<in> bn \\<alpha>\""], ["proof (state)\nthis:\n  x \\<in> bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "from \"*\""], ["proof (chain)\npicking this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}", "obtain b where b1: \"\\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha> tAct \\<alpha> t\" and b2: \"b \\<notin> supp \\<alpha>\" and b3: \"b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t\""], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>\\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                        t =\\<^sub>\\<alpha>\n                        tAct \\<alpha> t;\n         b \\<notin> supp \\<alpha>;\n         b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  infinite\n   {b. \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n              t =\\<^sub>\\<alpha>\n              tAct \\<alpha> t}\n  finite (supp_rel (=\\<^sub>\\<alpha>) t)\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>\\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n                        t =\\<^sub>\\<alpha>\n                        tAct \\<alpha> t;\n         b \\<notin> supp \\<alpha>;\n         b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) UnCI finite_UnI finite_supp infinite_mono mem_Collect_eq)"], ["proof (state)\nthis:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n         t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t\n  b \\<notin> supp \\<alpha>\n  b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "let ?p = \"(x \\<rightleftharpoons> b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "have \"supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) - bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) = supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n    bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n    supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "using \"**\" and b3"], ["proof (prove)\nusing this:\n  x \\<in> bn \\<alpha>\n  b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n    bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n    supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "by (metis (no_types, lifting) Diff_eqvt Diff_iff alpha_Tree_eqvt' alpha_Tree_eqvt_aux bn_eqvt swap_set_not_in)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "moreover"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "then"], ["proof (chain)\npicking this:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>", "have \"(supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) - bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* ?p\""], ["proof (prove)\nusing this:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n     bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)", "using \"**\" and b3"], ["proof (prove)\nusing this:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  x \\<in> bn \\<alpha>\n  b \\<notin> supp_rel (=\\<^sub>\\<alpha>) t\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n     bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)", "by (metis Diff_iff fresh_perm fresh_star_def swap_atom_simps(3))"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n   bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "moreover"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n   bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "have \"?p \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n    t", "using alpha_Tree_reflp reflpE"], ["proof (prove)\nusing this:\n  reflp (=\\<^sub>\\<alpha>)\n  \\<lbrakk>reflp ?r; ?r ?x ?x \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n    t", "by force"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n  t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "moreover"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n  t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "have \"?p \\<bullet> bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) = bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> bn\n    ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n    bn \\<alpha>", "by (simp add: bn_eqvt)"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> bn\n  ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "moreover"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> bn\n  ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "have \"supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) - bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) = supp \\<alpha> - bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n    bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n    supp \\<alpha> - bn \\<alpha>", "using \"**\" and b2"], ["proof (prove)\nusing this:\n  x \\<in> bn \\<alpha>\n  b \\<notin> supp \\<alpha>\n\ngoal (1 subgoal):\n 1. supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n    bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n    supp \\<alpha> - bn \\<alpha>", "by (metis (mono_tags, hide_lams) Diff_eqvt Diff_iff bn_eqvt supp_eqvt swap_set_not_in)"], ["proof (state)\nthis:\n  supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp \\<alpha> - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "moreover"], ["proof (state)\nthis:\n  supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp \\<alpha> - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "then"], ["proof (chain)\npicking this:\n  supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp \\<alpha> - bn \\<alpha>", "have \"(supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) - bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* ?p\""], ["proof (prove)\nusing this:\n  supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp \\<alpha> - bn \\<alpha>\n\ngoal (1 subgoal):\n 1. (supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n     bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)", "using \"**\" and b2"], ["proof (prove)\nusing this:\n  supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp \\<alpha> - bn \\<alpha>\n  x \\<in> bn \\<alpha>\n  b \\<notin> supp \\<alpha>\n\ngoal (1 subgoal):\n 1. (supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n     bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)", "by (simp add: fresh_star_def fresh_def supp_perm) (metis Diff_iff swap_atom_simps(3))"], ["proof (state)\nthis:\n  (supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n   bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "moreover"], ["proof (state)\nthis:\n  (supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n   bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "have \"?p \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> =\n    \\<alpha>", "by simp"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> =\n  \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "ultimately"], ["proof (chain)\npicking this:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  (supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n   bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)\n  (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n  t\n  (x \\<rightleftharpoons> b) \\<bullet> bn\n  ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  bn \\<alpha>\n  supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp \\<alpha> - bn \\<alpha>\n  (supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n   bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)\n  (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> =\n  \\<alpha>", "have \"(x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha> tAct \\<alpha> t\""], ["proof (prove)\nusing this:\n  supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n  (supp_rel (=\\<^sub>\\<alpha>) ((x \\<rightleftharpoons> b) \\<bullet> t) -\n   bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)\n  (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> t =\\<^sub>\\<alpha>\n  t\n  (x \\<rightleftharpoons> b) \\<bullet> bn\n  ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  bn \\<alpha>\n  supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n  bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) =\n  supp \\<alpha> - bn \\<alpha>\n  (supp ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>) -\n   bn ((x \\<rightleftharpoons> b) \\<bullet> \\<alpha>)) \\<sharp>* (x \\<rightleftharpoons> b)\n  (x \\<rightleftharpoons> b) \\<bullet> (x \\<rightleftharpoons> b) \\<bullet> \\<alpha> =\n  \\<alpha>\n\ngoal (1 subgoal):\n 1. (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha>\n    tAct \\<alpha> t", "by (auto simp add: alpha_set)"], ["proof (state)\nthis:\n  (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha>\n  tAct \\<alpha> t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "with b1"], ["proof (chain)\npicking this:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n         t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t\n  (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha>\n  tAct \\<alpha> t", "have \"False\""], ["proof (prove)\nusing this:\n  \\<not> (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha>\n         t =\\<^sub>\\<alpha>\n         tAct \\<alpha> t\n  (x \\<rightleftharpoons> b) \\<bullet> tAct \\<alpha> t =\\<^sub>\\<alpha>\n  tAct \\<alpha> t\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "}"], ["proof (state)\nthis:\n  x \\<in> bn \\<alpha> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp_rel (=\\<^sub>\\<alpha>)\n                (tAct \\<alpha> t) \\<Longrightarrow>\n       x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n               bn \\<alpha>", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t\n  x \\<in> bn \\<alpha> \\<Longrightarrow> False", "show \"x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\""], ["proof (prove)\nusing this:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t\n  x \\<in> bn \\<alpha> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n            bn \\<alpha>", "by blast"], ["proof (state)\nthis:\n  x \\<in> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t - bn \\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>) (tAct \\<alpha> t)\n  \\<subseteq> supp \\<alpha> \\<union> supp_rel (=\\<^sub>\\<alpha>) t -\n              bn \\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>We define the type of (infinitely branching) trees quotiented by $\\alpha$-equivalence.\\<close>"], ["", "(* FIXME: No map function defined. No relator found. *)"], ["", "quotient_type\n  ('idx,'pred,'act) Tree\\<^sub>\\<alpha> = \"('idx,'pred::pt,'act::bn) Tree\" / \"alpha_Tree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp (=\\<^sub>\\<alpha>)", "by (fact alpha_Tree_equivp)"], ["", "lemma Tree\\<^sub>\\<alpha>_abs_rep [simp]: \"abs_Tree\\<^sub>\\<alpha> (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_Tree\\<^sub>\\<alpha> (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) =\n    t\\<^sub>\\<alpha>", "by (metis Quotient_Tree\\<^sub>\\<alpha> Quotient_abs_rep)"], ["", "lemma Tree\\<^sub>\\<alpha>_rep_abs [simp]: \"rep_Tree\\<^sub>\\<alpha> (abs_Tree\\<^sub>\\<alpha> t) =\\<^sub>\\<alpha> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep_Tree\\<^sub>\\<alpha> (abs_Tree\\<^sub>\\<alpha> t) =\\<^sub>\\<alpha> t", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep)"], ["", "text \\<open>The permutation operation is lifted from trees.\\<close>"], ["", "instantiation Tree\\<^sub>\\<alpha> :: (type, pt, bn) pt\nbegin"], ["", "lift_definition permute_Tree\\<^sub>\\<alpha> :: \"perm \\<Rightarrow> ('a,'b,'c) Tree\\<^sub>\\<alpha> \\<Rightarrow> ('a,'b,'c) Tree\\<^sub>\\<alpha>\"\n    is permute"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>perm Tree1 Tree2.\n       Tree1 =\\<^sub>\\<alpha> Tree2 \\<Longrightarrow>\n       perm \\<bullet> Tree1 =\\<^sub>\\<alpha> perm \\<bullet> Tree2", "by (fact alpha_Tree_eqvt)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c) Tree\\<^sub>\\<alpha>, pt_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "fix t\\<^sub>\\<alpha> :: \"(_,_,_) Tree\\<^sub>\\<alpha>\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "show \"0 \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>", "by transfer (metis alpha_Tree_equivp equivp_reflp permute_zero)"], ["proof (state)\nthis:\n  0 \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "fix p q :: perm and t\\<^sub>\\<alpha> :: \"(_,_,_) Tree\\<^sub>\\<alpha>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "show \"(p + q) \\<bullet> t\\<^sub>\\<alpha> = p \\<bullet> q \\<bullet> t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p + q) \\<bullet> t\\<^sub>\\<alpha> =\n    p \\<bullet> q \\<bullet> t\\<^sub>\\<alpha>", "by transfer (metis alpha_Tree_equivp equivp_reflp permute_plus)"], ["proof (state)\nthis:\n  (p + q) \\<bullet> t\\<^sub>\\<alpha> =\n  p \\<bullet> q \\<bullet> t\\<^sub>\\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>The abstraction function from trees to trees modulo $\\alpha$-equivalence is equivariant. The\nrepresentation function is equivariant modulo $\\alpha$-equivalence.\\<close>"], ["", "lemmas permute_Tree\\<^sub>\\<alpha>.abs_eq [eqvt, simp]"], ["", "lemma alpha_Tree_permute_rep_commute [simp]: \"p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\\<^sub>\\<alpha> rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\\<^sub>\\<alpha>\n    rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep permute_Tree\\<^sub>\\<alpha>.abs_eq)"], ["", "subsection \\<open>Constructors for trees modulo \\texorpdfstring{$\\alpha$}{alpha}-equivalence\\<close>"], ["", "text \\<open>The constructors are lifted from trees.\\<close>"], ["", "lift_definition Conj\\<^sub>\\<alpha> :: \"('idx,'pred,'act) Tree\\<^sub>\\<alpha> set['idx] \\<Rightarrow> ('idx,'pred::pt,'act::bn) Tree\\<^sub>\\<alpha>\" is\n  tConj"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>bset1 bset2.\n       rel_bset (=\\<^sub>\\<alpha>) bset1 bset2 \\<Longrightarrow>\n       tConj bset1 =\\<^sub>\\<alpha> tConj bset2", "by simp"], ["", "lemma map_bset_abs_rep_Tree\\<^sub>\\<alpha>: \"map_bset abs_Tree\\<^sub>\\<alpha> (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = tset\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_bset abs_Tree\\<^sub>\\<alpha>\n     (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    tset\\<^sub>\\<alpha>", "by (metis (full_types) Quotient_Tree\\<^sub>\\<alpha> Quotient_abs_rep bset_lifting.bset_quot_map)"], ["", "lemma Conj\\<^sub>\\<alpha>_def': \"Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> = abs_Tree\\<^sub>\\<alpha> (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    abs_Tree\\<^sub>\\<alpha>\n     (tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "by (metis Conj\\<^sub>\\<alpha>.abs_eq map_bset_abs_rep_Tree\\<^sub>\\<alpha>)"], ["", "lift_definition Not\\<^sub>\\<alpha> :: \"('idx,'pred,'act) Tree\\<^sub>\\<alpha> \\<Rightarrow> ('idx,'pred::pt,'act::bn) Tree\\<^sub>\\<alpha>\" is\n  tNot"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Tree1 Tree2.\n       Tree1 =\\<^sub>\\<alpha> Tree2 \\<Longrightarrow>\n       tNot Tree1 =\\<^sub>\\<alpha> tNot Tree2", "by simp"], ["", "lift_definition Pred\\<^sub>\\<alpha> :: \"'pred \\<Rightarrow> ('idx,'pred::pt,'act::bn) Tree\\<^sub>\\<alpha>\" is\n  tPred"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition Act\\<^sub>\\<alpha> :: \"'act \\<Rightarrow> ('idx,'pred,'act) Tree\\<^sub>\\<alpha> \\<Rightarrow> ('idx,'pred::pt,'act::bn) Tree\\<^sub>\\<alpha>\" is\n  tAct"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>act Tree1 Tree2.\n       Tree1 =\\<^sub>\\<alpha> Tree2 \\<Longrightarrow>\n       tAct act Tree1 =\\<^sub>\\<alpha> tAct act Tree2", "by (fact alpha_Tree_tAct)"], ["", "text \\<open>The lifted constructors are equivariant.\\<close>"], ["", "lemma Conj\\<^sub>\\<alpha>_eqvt [eqvt, simp]: \"p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> = Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "assume \"x \\<in> set_bset (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\""], ["proof (state)\nthis:\n  x \\<in> set_bset\n           (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                         tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set_bset\n           (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                         tset\\<^sub>\\<alpha>)", "obtain y where \"y \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\" and \"x = p \\<bullet> y\""], ["proof (prove)\nusing this:\n  x \\<in> set_bset\n           (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                         tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> set_bset\n                          (map_bset rep_Tree\\<^sub>\\<alpha>\n                            tset\\<^sub>\\<alpha>);\n         x = p \\<bullet> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE permute_bset.rep_eq permute_set_eq_image)"], ["proof (state)\nthis:\n  y \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  x = p \\<bullet> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  y \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  x = p \\<bullet> y", "obtain t\\<^sub>\\<alpha> where 1: \"t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>\" and 2: \"x = p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  y \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  x = p \\<bullet> y\n\ngoal (1 subgoal):\n 1. (\\<And>t\\<^sub>\\<alpha>.\n        \\<lbrakk>t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>;\n         x = p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE map_bset.rep_eq)"], ["proof (state)\nthis:\n  t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>\n  x = p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "let ?x' = \"rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "from 1"], ["proof (chain)\npicking this:\n  t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>", "have \"p \\<bullet> t\\<^sub>\\<alpha> \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)\""], ["proof (prove)\nusing this:\n  t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. p \\<bullet> t\\<^sub>\\<alpha>\n    \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)", "by (metis mem_permute_iff permute_bset.rep_eq)"], ["proof (state)\nthis:\n  p \\<bullet> t\\<^sub>\\<alpha>\n  \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> t\\<^sub>\\<alpha>\n  \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)", "have \"?x' \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>))\""], ["proof (prove)\nusing this:\n  p \\<bullet> t\\<^sub>\\<alpha>\n  \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\n    \\<in> set_bset\n           (map_bset rep_Tree\\<^sub>\\<alpha>\n             (p \\<bullet> tset\\<^sub>\\<alpha>))", "by (simp add: bset.set_map)"], ["proof (state)\nthis:\n  rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\n  \\<in> set_bset\n         (map_bset rep_Tree\\<^sub>\\<alpha>\n           (p \\<bullet> tset\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "moreover"], ["proof (state)\nthis:\n  rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\n  \\<in> set_bset\n         (map_bset rep_Tree\\<^sub>\\<alpha>\n           (p \\<bullet> tset\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "from 2"], ["proof (chain)\npicking this:\n  x = p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>", "have \"x =\\<^sub>\\<alpha> ?x'\""], ["proof (prove)\nusing this:\n  x = p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. x =\\<^sub>\\<alpha>\n    rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)", "by (metis alpha_Tree_permute_rep_commute)"], ["proof (state)\nthis:\n  x =\\<^sub>\\<alpha> rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "ultimately"], ["proof (chain)\npicking this:\n  rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\n  \\<in> set_bset\n         (map_bset rep_Tree\\<^sub>\\<alpha>\n           (p \\<bullet> tset\\<^sub>\\<alpha>))\n  x =\\<^sub>\\<alpha> rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)", "have \"\\<exists>x'\\<in>set_bset (map_bset rep_Tree\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)). x =\\<^sub>\\<alpha> x'\""], ["proof (prove)\nusing this:\n  rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\n  \\<in> set_bset\n         (map_bset rep_Tree\\<^sub>\\<alpha>\n           (p \\<bullet> tset\\<^sub>\\<alpha>))\n  x =\\<^sub>\\<alpha> rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<exists>x'\\<in>set_bset\n                     (map_bset rep_Tree\\<^sub>\\<alpha>\n                       (p \\<bullet> tset\\<^sub>\\<alpha>)).\n       x =\\<^sub>\\<alpha> x'", ".."], ["proof (state)\nthis:\n  \\<exists>x'\\<in>set_bset\n                   (map_bset rep_Tree\\<^sub>\\<alpha>\n                     (p \\<bullet> tset\\<^sub>\\<alpha>)).\n     x =\\<^sub>\\<alpha> x'\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "}"], ["proof (state)\nthis:\n  ?x2\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                       tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  \\<exists>x'\\<in>set_bset\n                   (map_bset rep_Tree\\<^sub>\\<alpha>\n                     (p \\<bullet> tset\\<^sub>\\<alpha>)).\n     ?x2 =\\<^sub>\\<alpha> x'\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "moreover"], ["proof (state)\nthis:\n  ?x2\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                       tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  \\<exists>x'\\<in>set_bset\n                   (map_bset rep_Tree\\<^sub>\\<alpha>\n                     (p \\<bullet> tset\\<^sub>\\<alpha>)).\n     ?x2 =\\<^sub>\\<alpha> x'\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "{"], ["proof (state)\nthis:\n  ?x2\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                       tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  \\<exists>x'\\<in>set_bset\n                   (map_bset rep_Tree\\<^sub>\\<alpha>\n                     (p \\<bullet> tset\\<^sub>\\<alpha>)).\n     ?x2 =\\<^sub>\\<alpha> x'\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "assume \"y \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>))\""], ["proof (state)\nthis:\n  y \\<in> set_bset\n           (map_bset rep_Tree\\<^sub>\\<alpha>\n             (p \\<bullet> tset\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  y \\<in> set_bset\n           (map_bset rep_Tree\\<^sub>\\<alpha>\n             (p \\<bullet> tset\\<^sub>\\<alpha>))", "obtain x where \"x \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)\" and \"rep_Tree\\<^sub>\\<alpha> x = y\""], ["proof (prove)\nusing this:\n  y \\<in> set_bset\n           (map_bset rep_Tree\\<^sub>\\<alpha>\n             (p \\<bullet> tset\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>);\n         rep_Tree\\<^sub>\\<alpha> x = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE map_bset.rep_eq)"], ["proof (state)\nthis:\n  x \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)\n  rep_Tree\\<^sub>\\<alpha> x = y\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)\n  rep_Tree\\<^sub>\\<alpha> x = y", "obtain t\\<^sub>\\<alpha> where 1: \"t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>\" and 2: \"rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>) = y\""], ["proof (prove)\nusing this:\n  x \\<in> set_bset (p \\<bullet> tset\\<^sub>\\<alpha>)\n  rep_Tree\\<^sub>\\<alpha> x = y\n\ngoal (1 subgoal):\n 1. (\\<And>t\\<^sub>\\<alpha>.\n        \\<lbrakk>t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>;\n         rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>) = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis imageE permute_bset.rep_eq permute_set_eq_image)"], ["proof (state)\nthis:\n  t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>) = y\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "let ?y' = \"p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "from 1"], ["proof (chain)\npicking this:\n  t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>", "have \"rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\""], ["proof (prove)\nusing this:\n  t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n    \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)", "by (simp add: bset.set_map)"], ["proof (state)\nthis:\n  rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n  \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n  \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)", "have \"?y' \\<in> set_bset (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\""], ["proof (prove)\nusing this:\n  rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n  \\<in> set_bset (map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n    \\<in> set_bset\n           (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                         tset\\<^sub>\\<alpha>)", "by (metis mem_permute_iff permute_bset.rep_eq)"], ["proof (state)\nthis:\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "from 2"], ["proof (chain)\npicking this:\n  rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>) = y", "have \"?y' =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  rep_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>) = y\n\ngoal (1 subgoal):\n 1. p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\\<^sub>\\<alpha> y", "by (metis alpha_Tree_permute_rep_commute)"], ["proof (state)\nthis:\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "ultimately"], ["proof (chain)\npicking this:\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\\<^sub>\\<alpha> y", "have \"\\<exists>y'\\<in>set_bset (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>). y' =\\<^sub>\\<alpha> y\""], ["proof (prove)\nusing this:\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. \\<exists>y'\\<in>set_bset\n                     (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                                   tset\\<^sub>\\<alpha>).\n       y' =\\<^sub>\\<alpha> y", ".."], ["proof (state)\nthis:\n  \\<exists>y'\\<in>set_bset\n                   (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                                 tset\\<^sub>\\<alpha>).\n     y' =\\<^sub>\\<alpha> y\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "}"], ["proof (state)\nthis:\n  ?y2\n  \\<in> set_bset\n         (map_bset rep_Tree\\<^sub>\\<alpha>\n           (p \\<bullet> tset\\<^sub>\\<alpha>)) \\<Longrightarrow>\n  \\<exists>y'\\<in>set_bset\n                   (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                                 tset\\<^sub>\\<alpha>).\n     y' =\\<^sub>\\<alpha> ?y2\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "ultimately"], ["proof (chain)\npicking this:\n  ?x2\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                       tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  \\<exists>x'\\<in>set_bset\n                   (map_bset rep_Tree\\<^sub>\\<alpha>\n                     (p \\<bullet> tset\\<^sub>\\<alpha>)).\n     ?x2 =\\<^sub>\\<alpha> x'\n  ?y2\n  \\<in> set_bset\n         (map_bset rep_Tree\\<^sub>\\<alpha>\n           (p \\<bullet> tset\\<^sub>\\<alpha>)) \\<Longrightarrow>\n  \\<exists>y'\\<in>set_bset\n                   (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                                 tset\\<^sub>\\<alpha>).\n     y' =\\<^sub>\\<alpha> ?y2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2\n  \\<in> set_bset\n         (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                       tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  \\<exists>x'\\<in>set_bset\n                   (map_bset rep_Tree\\<^sub>\\<alpha>\n                     (p \\<bullet> tset\\<^sub>\\<alpha>)).\n     ?x2 =\\<^sub>\\<alpha> x'\n  ?y2\n  \\<in> set_bset\n         (map_bset rep_Tree\\<^sub>\\<alpha>\n           (p \\<bullet> tset\\<^sub>\\<alpha>)) \\<Longrightarrow>\n  \\<exists>y'\\<in>set_bset\n                   (p \\<bullet> map_bset rep_Tree\\<^sub>\\<alpha>\n                                 tset\\<^sub>\\<alpha>).\n     y' =\\<^sub>\\<alpha> ?y2\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)", "by (simp add: Conj\\<^sub>\\<alpha>_def' map_bset_eqvt rel_bset_def rel_set_def Tree\\<^sub>\\<alpha>.abs_eq_iff)"], ["proof (state)\nthis:\n  p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> =\n  Conj\\<^sub>\\<alpha> (p \\<bullet> tset\\<^sub>\\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Not\\<^sub>\\<alpha>_eqvt [eqvt, simp]: \"p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha> = Not\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)", "by (induct t\\<^sub>\\<alpha>) (simp add: Not\\<^sub>\\<alpha>.abs_eq)"], ["", "lemma Pred\\<^sub>\\<alpha>_eqvt [eqvt, simp]: \"p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi> = Pred\\<^sub>\\<alpha> (p \\<bullet> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi> =\n    Pred\\<^sub>\\<alpha> (p \\<bullet> \\<phi>)", "by (simp add: Pred\\<^sub>\\<alpha>.abs_eq)"], ["", "lemma Act\\<^sub>\\<alpha>_eqvt [eqvt, simp]: \"p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha> = Act\\<^sub>\\<alpha> (p \\<bullet> \\<alpha>) (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha> =\n    Act\\<^sub>\\<alpha> (p \\<bullet> \\<alpha>) (p \\<bullet> t\\<^sub>\\<alpha>)", "by (induct t\\<^sub>\\<alpha>) (simp add: Act\\<^sub>\\<alpha>.abs_eq)"], ["", "text \\<open>The lifted constructors are injective (except for~@{const Act\\<^sub>\\<alpha>}).\\<close>"], ["", "lemma Conj\\<^sub>\\<alpha>_eq_iff [simp]: \"Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> = Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha> \\<longleftrightarrow> tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n     Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>) =\n    (tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>\n 2. tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>", "assume \"Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> = Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>\""], ["proof (state)\nthis:\n  Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n  Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>\n\ngoal (2 subgoals):\n 1. Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>\n 2. tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n  Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>", "have \"tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha> tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)\""], ["proof (prove)\nusing this:\n  Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n  Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. tConj\n     (map_bset rep_Tree\\<^sub>\\<alpha>\n       tset1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n    tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)", "by (metis Conj\\<^sub>\\<alpha>_def' Tree\\<^sub>\\<alpha>.abs_eq_iff)"], ["proof (state)\nthis:\n  tConj\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n  tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)\n\ngoal (2 subgoals):\n 1. Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>\n 2. tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  tConj\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n  tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)", "have \"rel_bset (=\\<^sub>\\<alpha>) (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>) (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)\""], ["proof (prove)\nusing this:\n  tConj\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n  tConj (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. rel_bset (=\\<^sub>\\<alpha>)\n     (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>)\n     (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)", "by (auto elim: alpha_Tree.cases)"], ["proof (state)\nthis:\n  rel_bset (=\\<^sub>\\<alpha>)\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>)\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)\n\ngoal (2 subgoals):\n 1. Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>\n 2. tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  rel_bset (=\\<^sub>\\<alpha>)\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>)\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)", "show \"tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  rel_bset (=\\<^sub>\\<alpha>)\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>)\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>", "using Quotient_Tree\\<^sub>\\<alpha> Quotient_rel_abs2 bset_lifting.bset_quot_map map_bset_abs_rep_Tree\\<^sub>\\<alpha>"], ["proof (prove)\nusing this:\n  rel_bset (=\\<^sub>\\<alpha>)\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha>)\n   (map_bset rep_Tree\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>)\n  Quotient (=\\<^sub>\\<alpha>) abs_Tree\\<^sub>\\<alpha>\n   rep_Tree\\<^sub>\\<alpha> cr_Tree\\<^sub>\\<alpha>\n  \\<lbrakk>Quotient ?R ?Abs ?Rep ?T; ?R (?Rep ?x) ?y\\<rbrakk>\n  \\<Longrightarrow> ?x = ?Abs ?y\n  Quotient ?R ?Abs ?Rep ?T \\<Longrightarrow>\n  Quotient (rel_bset ?R) (map_bset ?Abs) (map_bset ?Rep) (rel_bset ?T)\n  map_bset abs_Tree\\<^sub>\\<alpha>\n   (map_bset rep_Tree\\<^sub>\\<alpha> ?tset\\<^sub>\\<alpha>) =\n  ?tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>", "by fastforce"], ["proof (state)\nthis:\n  tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. tset1\\<^sub>\\<alpha> = tset2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Conj\\<^sub>\\<alpha> tset1\\<^sub>\\<alpha> =\n    Conj\\<^sub>\\<alpha> tset2\\<^sub>\\<alpha>", "qed (fact arg_cong)"], ["", "lemma Not\\<^sub>\\<alpha>_eq_iff [simp]: \"Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> = Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha> \\<longleftrightarrow> t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n     Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>) =\n    (t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\n 2. t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "assume \"Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> = Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>\""], ["proof (state)\nthis:\n  Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n  Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>\n\ngoal (2 subgoals):\n 1. Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\n 2. t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n  Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "have \"tNot (rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha> tNot (rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>)\""], ["proof (prove)\nusing this:\n  Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n  Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. tNot (rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n    tNot (rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>)", "by (metis Not\\<^sub>\\<alpha>.abs_eq Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep)"], ["proof (state)\nthis:\n  tNot (rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n  tNot (rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>)\n\ngoal (2 subgoals):\n 1. Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\n 2. t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  tNot (rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n  tNot (rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>)", "have \"rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\\<^sub>\\<alpha> rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  tNot (rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n  tNot (rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\\<^sub>\\<alpha>\n    rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "using alpha_Tree.cases"], ["proof (prove)\nusing this:\n  tNot (rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha>) =\\<^sub>\\<alpha>\n  tNot (rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>)\n  \\<lbrakk>\\<And>tset1 tset2.\n              ?x = (tConj tset1, tConj tset2) \\<Longrightarrow> ?P;\n   \\<And>t1 t2. ?x = (tNot t1, tNot t2) \\<Longrightarrow> ?P;\n   \\<And>\\<phi>1 \\<phi>2.\n      ?x = (tPred \\<phi>1, tPred \\<phi>2) \\<Longrightarrow> ?P;\n   \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n      ?x = (tAct \\<alpha>1 t1, tAct \\<alpha>2 t2) \\<Longrightarrow> ?P;\n   \\<And>v va. ?x = (tNot v, tConj va) \\<Longrightarrow> ?P;\n   \\<And>v va. ?x = (tNot v, tPred va) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tNot v, tAct va vb) \\<Longrightarrow> ?P;\n   \\<And>v va. ?x = (tPred v, tConj va) \\<Longrightarrow> ?P;\n   \\<And>v va. ?x = (tPred v, tNot va) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tPred v, tAct va vb) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tAct v va, tConj vb) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tAct v va, tNot vb) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tAct v va, tPred vb) \\<Longrightarrow> ?P;\n   \\<And>va v. ?x = (tConj va, tNot v) \\<Longrightarrow> ?P;\n   \\<And>va v. ?x = (tPred va, tNot v) \\<Longrightarrow> ?P;\n   \\<And>va vb v. ?x = (tAct va vb, tNot v) \\<Longrightarrow> ?P;\n   \\<And>va v. ?x = (tConj va, tPred v) \\<Longrightarrow> ?P;\n   \\<And>va v. ?x = (tNot va, tPred v) \\<Longrightarrow> ?P;\n   \\<And>va vb v. ?x = (tAct va vb, tPred v) \\<Longrightarrow> ?P;\n   \\<And>vb v va. ?x = (tConj vb, tAct v va) \\<Longrightarrow> ?P;\n   \\<And>vb v va. ?x = (tNot vb, tAct v va) \\<Longrightarrow> ?P;\n   \\<And>vb v va. ?x = (tPred vb, tAct v va) \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\\<^sub>\\<alpha>\n    rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "by auto"], ["proof (state)\nthis:\n  rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>\n\ngoal (2 subgoals):\n 1. Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\n 2. t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "show \"t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  rep_Tree\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>", "by (metis Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep)"], ["proof (state)\nthis:\n  t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "assume \"t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\""], ["proof (state)\nthis:\n  t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha> \\<Longrightarrow>\n    Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>", "show \"Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> = Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  t1\\<^sub>\\<alpha> = t2\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n    Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>", "by simp"], ["proof (state)\nthis:\n  Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> =\n  Not\\<^sub>\\<alpha> t2\\<^sub>\\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Pred\\<^sub>\\<alpha>_eq_iff [simp]: \"Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2 \\<longleftrightarrow> \\<phi>1 = \\<phi>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2) =\n    (\\<phi>1 = \\<phi>2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Pred\\<^sub>\\<alpha> \\<phi>1 =\n    Pred\\<^sub>\\<alpha> \\<phi>2 \\<Longrightarrow>\n    \\<phi>1 = \\<phi>2\n 2. \\<phi>1 = \\<phi>2 \\<Longrightarrow>\n    Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2", "assume \"Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2\""], ["proof (state)\nthis:\n  Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2\n\ngoal (2 subgoals):\n 1. Pred\\<^sub>\\<alpha> \\<phi>1 =\n    Pred\\<^sub>\\<alpha> \\<phi>2 \\<Longrightarrow>\n    \\<phi>1 = \\<phi>2\n 2. \\<phi>1 = \\<phi>2 \\<Longrightarrow>\n    Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2", "then"], ["proof (chain)\npicking this:\n  Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2", "have \"(tPred \\<phi>1 :: ('d, 'b, 'e) Tree) =\\<^sub>\\<alpha> tPred \\<phi>2\"  \\<comment> \\<open>note the unrelated type\\<close>"], ["proof (prove)\nusing this:\n  Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2\n\ngoal (1 subgoal):\n 1. tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2", "by (metis Pred\\<^sub>\\<alpha>.abs_eq Tree\\<^sub>\\<alpha>.abs_eq_iff)"], ["proof (state)\nthis:\n  tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2\n\ngoal (2 subgoals):\n 1. Pred\\<^sub>\\<alpha> \\<phi>1 =\n    Pred\\<^sub>\\<alpha> \\<phi>2 \\<Longrightarrow>\n    \\<phi>1 = \\<phi>2\n 2. \\<phi>1 = \\<phi>2 \\<Longrightarrow>\n    Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2", "then"], ["proof (chain)\npicking this:\n  tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2", "show \"\\<phi>1 = \\<phi>2\""], ["proof (prove)\nusing this:\n  tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2\n\ngoal (1 subgoal):\n 1. \\<phi>1 = \\<phi>2", "using alpha_Tree.cases"], ["proof (prove)\nusing this:\n  tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2\n  \\<lbrakk>\\<And>tset1 tset2.\n              ?x = (tConj tset1, tConj tset2) \\<Longrightarrow> ?P;\n   \\<And>t1 t2. ?x = (tNot t1, tNot t2) \\<Longrightarrow> ?P;\n   \\<And>\\<phi>1 \\<phi>2.\n      ?x = (tPred \\<phi>1, tPred \\<phi>2) \\<Longrightarrow> ?P;\n   \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n      ?x = (tAct \\<alpha>1 t1, tAct \\<alpha>2 t2) \\<Longrightarrow> ?P;\n   \\<And>v va. ?x = (tNot v, tConj va) \\<Longrightarrow> ?P;\n   \\<And>v va. ?x = (tNot v, tPred va) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tNot v, tAct va vb) \\<Longrightarrow> ?P;\n   \\<And>v va. ?x = (tPred v, tConj va) \\<Longrightarrow> ?P;\n   \\<And>v va. ?x = (tPred v, tNot va) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tPred v, tAct va vb) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tAct v va, tConj vb) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tAct v va, tNot vb) \\<Longrightarrow> ?P;\n   \\<And>v va vb. ?x = (tAct v va, tPred vb) \\<Longrightarrow> ?P;\n   \\<And>va v. ?x = (tConj va, tNot v) \\<Longrightarrow> ?P;\n   \\<And>va v. ?x = (tPred va, tNot v) \\<Longrightarrow> ?P;\n   \\<And>va vb v. ?x = (tAct va vb, tNot v) \\<Longrightarrow> ?P;\n   \\<And>va v. ?x = (tConj va, tPred v) \\<Longrightarrow> ?P;\n   \\<And>va v. ?x = (tNot va, tPred v) \\<Longrightarrow> ?P;\n   \\<And>va vb v. ?x = (tAct va vb, tPred v) \\<Longrightarrow> ?P;\n   \\<And>vb v va. ?x = (tConj vb, tAct v va) \\<Longrightarrow> ?P;\n   \\<And>vb v va. ?x = (tNot vb, tAct v va) \\<Longrightarrow> ?P;\n   \\<And>vb v va. ?x = (tPred vb, tAct v va) \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<phi>1 = \\<phi>2", "by auto"], ["proof (state)\nthis:\n  \\<phi>1 = \\<phi>2\n\ngoal (1 subgoal):\n 1. \\<phi>1 = \\<phi>2 \\<Longrightarrow>\n    Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<phi>1 = \\<phi>2 \\<Longrightarrow>\n    Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2", "assume \"\\<phi>1 = \\<phi>2\""], ["proof (state)\nthis:\n  \\<phi>1 = \\<phi>2\n\ngoal (1 subgoal):\n 1. \\<phi>1 = \\<phi>2 \\<Longrightarrow>\n    Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2", "then"], ["proof (chain)\npicking this:\n  \\<phi>1 = \\<phi>2", "show \"Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2\""], ["proof (prove)\nusing this:\n  \\<phi>1 = \\<phi>2\n\ngoal (1 subgoal):\n 1. Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2", "by simp"], ["proof (state)\nthis:\n  Pred\\<^sub>\\<alpha> \\<phi>1 = Pred\\<^sub>\\<alpha> \\<phi>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Act\\<^sub>\\<alpha>_eq_iff: \"Act\\<^sub>\\<alpha> \\<alpha>1 t1 = Act\\<^sub>\\<alpha> \\<alpha>2 t2 \\<longleftrightarrow> tAct \\<alpha>1 (rep_Tree\\<^sub>\\<alpha> t1) =\\<^sub>\\<alpha> tAct \\<alpha>2 (rep_Tree\\<^sub>\\<alpha> t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Act\\<^sub>\\<alpha> \\<alpha>1 t1 = Act\\<^sub>\\<alpha> \\<alpha>2 t2) =\n    (tAct \\<alpha>1 (rep_Tree\\<^sub>\\<alpha> t1) =\\<^sub>\\<alpha>\n     tAct \\<alpha>2 (rep_Tree\\<^sub>\\<alpha> t2))", "by (metis Act\\<^sub>\\<alpha>.abs_eq Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep)"], ["", "text \\<open>The lifted constructors are free (except for~@{const Act\\<^sub>\\<alpha>}).\\<close>"], ["", "lemma Tree\\<^sub>\\<alpha>_free [simp]:\n  shows \"Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>\"\n  and \"Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq> Pred\\<^sub>\\<alpha> \\<phi>\"\n  and \"Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq> Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>\"\n  and \"Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha> \\<noteq> Pred\\<^sub>\\<alpha> \\<phi>\"\n  and \"Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> \\<noteq> Act\\<^sub>\\<alpha> \\<alpha> t2\\<^sub>\\<alpha>\"\n  and \"Pred\\<^sub>\\<alpha> \\<phi> \\<noteq> Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq>\n     Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha> &&&\n     Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq>\n     Pred\\<^sub>\\<alpha> \\<phi> &&&\n     Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha> \\<noteq>\n     Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>) &&&\n    Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha> \\<noteq>\n    Pred\\<^sub>\\<alpha> \\<phi> &&&\n    Not\\<^sub>\\<alpha> t1\\<^sub>\\<alpha> \\<noteq>\n    Act\\<^sub>\\<alpha> \\<alpha> t2\\<^sub>\\<alpha> &&&\n    Pred\\<^sub>\\<alpha> \\<phi> \\<noteq>\n    Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>", "by (simp add: Conj\\<^sub>\\<alpha>_def' Not\\<^sub>\\<alpha>_def Pred\\<^sub>\\<alpha>_def Act\\<^sub>\\<alpha>_def Tree\\<^sub>\\<alpha>.abs_eq_iff)+"], ["", "text \\<open>The following lemmas describe the support of constructed trees modulo $\\alpha$-equivalence.\\<close>"], ["", "lemma supp_alpha_supp_rel: \"supp t\\<^sub>\\<alpha> = supp_rel (=\\<^sub>\\<alpha>) (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp t\\<^sub>\\<alpha> =\n    supp_rel (=\\<^sub>\\<alpha>) (rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "unfolding supp_def supp_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> t\\<^sub>\\<alpha> \\<noteq>\n             t\\<^sub>\\<alpha>}} =\n    {a. infinite\n         {b. \\<not> (a \\<rightleftharpoons> b) \\<bullet> rep_Tree\\<^sub>\\<alpha>\n                    t\\<^sub>\\<alpha> =\\<^sub>\\<alpha>\n                    rep_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>}}", "by (metis (mono_tags, lifting) Collect_cong Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep alpha_Tree_permute_rep_commute)"], ["", "lemma supp_Conj\\<^sub>\\<alpha> [simp]: \"supp (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = supp tset\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    supp tset\\<^sub>\\<alpha>", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> Conj\\<^sub>\\<alpha>\n             tset\\<^sub>\\<alpha> \\<noteq>\n             Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> tset\\<^sub>\\<alpha> \\<noteq>\n             tset\\<^sub>\\<alpha>}}", "by simp"], ["", "lemma supp_Not\\<^sub>\\<alpha> [simp]: \"supp (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> Not\\<^sub>\\<alpha>\n             t\\<^sub>\\<alpha> \\<noteq>\n             Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> t\\<^sub>\\<alpha> \\<noteq>\n             t\\<^sub>\\<alpha>}}", "by simp"], ["", "lemma supp_Pred\\<^sub>\\<alpha> [simp]: \"supp (Pred\\<^sub>\\<alpha> \\<phi>) = supp \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Pred\\<^sub>\\<alpha> \\<phi>) = supp \\<phi>", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> Pred\\<^sub>\\<alpha>\n             \\<phi> \\<noteq>\n             Pred\\<^sub>\\<alpha> \\<phi>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> \\<phi> \\<noteq> \\<phi>}}", "by simp"], ["", "lemma supp_Act\\<^sub>\\<alpha> [simp]:\n  assumes \"finite (supp t\\<^sub>\\<alpha>)\"\n  shows \"supp (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>) = supp \\<alpha> \\<union> supp t\\<^sub>\\<alpha> - bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>) =\n    supp \\<alpha> \\<union> supp t\\<^sub>\\<alpha> - bn \\<alpha>", "using assms"], ["proof (prove)\nusing this:\n  finite (supp t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. supp (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>) =\n    supp \\<alpha> \\<union> supp t\\<^sub>\\<alpha> - bn \\<alpha>", "by (metis Act\\<^sub>\\<alpha>.abs_eq Tree\\<^sub>\\<alpha>_abs_rep Tree\\<^sub>\\<alpha>_rep_abs alpha_Tree_supp_rel supp_alpha_supp_rel supp_rel_tAct)"], ["", "subsection \\<open>Induction over trees modulo \\texorpdfstring{$\\alpha$}{alpha}-equivalence\\<close>"], ["", "lemma Tree\\<^sub>\\<alpha>_induct [case_names Conj\\<^sub>\\<alpha> Not\\<^sub>\\<alpha> Pred\\<^sub>\\<alpha> Act\\<^sub>\\<alpha> Env\\<^sub>\\<alpha>, induct type: Tree\\<^sub>\\<alpha>]:\n  fixes t\\<^sub>\\<alpha>\n  assumes \"\\<And>tset\\<^sub>\\<alpha>. (\\<And>x. x \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow> P x) \\<Longrightarrow> P (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\"\n    and \"\\<And>t\\<^sub>\\<alpha>. P t\\<^sub>\\<alpha> \\<Longrightarrow> P (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"\n    and \"\\<And>pred. P (Pred\\<^sub>\\<alpha> pred)\"\n    and \"\\<And>act t\\<^sub>\\<alpha>. P t\\<^sub>\\<alpha> \\<Longrightarrow> P (Act\\<^sub>\\<alpha> act t\\<^sub>\\<alpha>)\"\n  shows \"P t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P t\\<^sub>\\<alpha>", "proof (rule Tree\\<^sub>\\<alpha>.abs_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. P (abs_Tree\\<^sub>\\<alpha> y)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. P (abs_Tree\\<^sub>\\<alpha> y)", "show \"P (abs_Tree\\<^sub>\\<alpha> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> t)", "proof (induction t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           P (abs_Tree\\<^sub>\\<alpha> xa)) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tConj x))\n 2. \\<And>t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tNot t))\n 3. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 4. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "case (tConj tset)"], ["proof (state)\nthis:\n  ?xa \\<in> set_bset tset \\<Longrightarrow> P (abs_Tree\\<^sub>\\<alpha> ?xa)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           P (abs_Tree\\<^sub>\\<alpha> xa)) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tConj x))\n 2. \\<And>t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tNot t))\n 3. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 4. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "let ?tset\\<^sub>\\<alpha> = \"map_bset abs_Tree\\<^sub>\\<alpha> tset\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           P (abs_Tree\\<^sub>\\<alpha> xa)) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tConj x))\n 2. \\<And>t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tNot t))\n 3. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 4. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "have \"abs_Tree\\<^sub>\\<alpha> (tConj tset) = Conj\\<^sub>\\<alpha> ?tset\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_Tree\\<^sub>\\<alpha> (tConj tset) =\n    Conj\\<^sub>\\<alpha> (map_bset abs_Tree\\<^sub>\\<alpha> tset)", "by (simp add: Conj\\<^sub>\\<alpha>.abs_eq)"], ["proof (state)\nthis:\n  abs_Tree\\<^sub>\\<alpha> (tConj tset) =\n  Conj\\<^sub>\\<alpha> (map_bset abs_Tree\\<^sub>\\<alpha> tset)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           P (abs_Tree\\<^sub>\\<alpha> xa)) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tConj x))\n 2. \\<And>t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tNot t))\n 3. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 4. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "then"], ["proof (chain)\npicking this:\n  abs_Tree\\<^sub>\\<alpha> (tConj tset) =\n  Conj\\<^sub>\\<alpha> (map_bset abs_Tree\\<^sub>\\<alpha> tset)", "show ?case"], ["proof (prove)\nusing this:\n  abs_Tree\\<^sub>\\<alpha> (tConj tset) =\n  Conj\\<^sub>\\<alpha> (map_bset abs_Tree\\<^sub>\\<alpha> tset)\n\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> (tConj tset))", "using assms(1) tConj.IH"], ["proof (prove)\nusing this:\n  abs_Tree\\<^sub>\\<alpha> (tConj tset) =\n  Conj\\<^sub>\\<alpha> (map_bset abs_Tree\\<^sub>\\<alpha> tset)\n  (\\<And>x.\n      x \\<in> set_bset ?tset\\<^sub>\\<alpha> \\<Longrightarrow>\n      P x) \\<Longrightarrow>\n  P (Conj\\<^sub>\\<alpha> ?tset\\<^sub>\\<alpha>)\n  ?xa \\<in> set_bset tset \\<Longrightarrow> P (abs_Tree\\<^sub>\\<alpha> ?xa)\n\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> (tConj tset))", "by (metis imageE map_bset.rep_eq)"], ["proof (state)\nthis:\n  P (abs_Tree\\<^sub>\\<alpha> (tConj tset))\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tNot t))\n 2. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 3. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tNot t))\n 2. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 3. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "case tNot"], ["proof (state)\nthis:\n  P (abs_Tree\\<^sub>\\<alpha> t_)\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tNot t))\n 2. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 3. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "then"], ["proof (chain)\npicking this:\n  P (abs_Tree\\<^sub>\\<alpha> t_)", "show ?case"], ["proof (prove)\nusing this:\n  P (abs_Tree\\<^sub>\\<alpha> t_)\n\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> (tNot t_))", "using assms(2)"], ["proof (prove)\nusing this:\n  P (abs_Tree\\<^sub>\\<alpha> t_)\n  P ?t\\<^sub>\\<alpha> \\<Longrightarrow>\n  P (Not\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> (tNot t_))", "by (metis Not\\<^sub>\\<alpha>.abs_eq)"], ["proof (state)\nthis:\n  P (abs_Tree\\<^sub>\\<alpha> (tNot t_))\n\ngoal (2 subgoals):\n 1. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 2. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 2. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "case tPred"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. P (abs_Tree\\<^sub>\\<alpha> (tPred x))\n 2. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> (tPred x_))", "using assms(3)"], ["proof (prove)\nusing this:\n  P (Pred\\<^sub>\\<alpha> ?pred)\n\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> (tPred x_))", "by (metis Pred\\<^sub>\\<alpha>.abs_eq)"], ["proof (state)\nthis:\n  P (abs_Tree\\<^sub>\\<alpha> (tPred x_))\n\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "case tAct"], ["proof (state)\nthis:\n  P (abs_Tree\\<^sub>\\<alpha> t_)\n\ngoal (1 subgoal):\n 1. \\<And>x1a t.\n       P (abs_Tree\\<^sub>\\<alpha> t) \\<Longrightarrow>\n       P (abs_Tree\\<^sub>\\<alpha> (tAct x1a t))", "then"], ["proof (chain)\npicking this:\n  P (abs_Tree\\<^sub>\\<alpha> t_)", "show ?case"], ["proof (prove)\nusing this:\n  P (abs_Tree\\<^sub>\\<alpha> t_)\n\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> (tAct x1a_ t_))", "using assms(4)"], ["proof (prove)\nusing this:\n  P (abs_Tree\\<^sub>\\<alpha> t_)\n  P ?t\\<^sub>\\<alpha> \\<Longrightarrow>\n  P (Act\\<^sub>\\<alpha> ?act ?t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. P (abs_Tree\\<^sub>\\<alpha> (tAct x1a_ t_))", "by (metis Act\\<^sub>\\<alpha>.abs_eq)"], ["proof (state)\nthis:\n  P (abs_Tree\\<^sub>\\<alpha> (tAct x1a_ t_))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (abs_Tree\\<^sub>\\<alpha> t)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>There is no (obvious) strong induction principle for trees modulo $\\alpha$-equivalence: since\ntheir support may be infinite, we may not be able to rename bound variables without also renaming\nfree variables.\\<close>"], ["", "subsection \\<open>Hereditarily finitely supported trees\\<close>"], ["", "text \\<open>We cannot obtain the type of infinitary formulas simply as the sub-type of all trees (modulo\n$\\alpha$-equivalence) that are finitely supported: since an infinite set of trees may be finitely\nsupported even though its members are not (and thus, would not be formulas), the sub-type of\n\\emph{all} finitely supported trees does not validate the induction principle that we desire for\nformulas.\n\nInstead, we define \\emph{hereditarily} finitely supported trees. We require that environments and\nstate predicates are finitely supported.\\<close>"], ["", "inductive hereditarily_fs :: \"('idx,'pred::fs,'act::bn) Tree\\<^sub>\\<alpha> \\<Rightarrow> bool\" where\n  Conj\\<^sub>\\<alpha>: \"finite (supp tset\\<^sub>\\<alpha>) \\<Longrightarrow> (\\<And>t\\<^sub>\\<alpha>. t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow> hereditarily_fs t\\<^sub>\\<alpha>) \\<Longrightarrow> hereditarily_fs (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\"\n| Not\\<^sub>\\<alpha>: \"hereditarily_fs t\\<^sub>\\<alpha> \\<Longrightarrow> hereditarily_fs (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"\n| Pred\\<^sub>\\<alpha>: \"hereditarily_fs (Pred\\<^sub>\\<alpha> \\<phi>)\"\n| Act\\<^sub>\\<alpha>: \"hereditarily_fs t\\<^sub>\\<alpha> \\<Longrightarrow> hereditarily_fs (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>)\""], ["", "text \\<open>@{const hereditarily_fs} is equivariant.\\<close>"], ["", "lemma hereditarily_fs_eqvt [eqvt]:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)", "proof (induction rule: hereditarily_fs.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset\\<^sub>\\<alpha>.\n       \\<lbrakk>finite (supp tset\\<^sub>\\<alpha>);\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs t\\<^sub>\\<alpha>;\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Conj\\<^sub>\\<alpha>\n  tset\\<^sub>\\<alpha>)\n 2. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n 3. \\<And>\\<phi>. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>)\n 4. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "case Conj\\<^sub>\\<alpha>"], ["proof (state)\nthis:\n  finite (supp tset\\<^sub>\\<alpha>_)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>_ \\<Longrightarrow>\n  hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>_ \\<Longrightarrow>\n  hereditarily_fs (p \\<bullet> ?t\\<^sub>\\<alpha>)\n\ngoal (4 subgoals):\n 1. \\<And>tset\\<^sub>\\<alpha>.\n       \\<lbrakk>finite (supp tset\\<^sub>\\<alpha>);\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs t\\<^sub>\\<alpha>;\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Conj\\<^sub>\\<alpha>\n  tset\\<^sub>\\<alpha>)\n 2. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n 3. \\<And>\\<phi>. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>)\n 4. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  finite (supp tset\\<^sub>\\<alpha>_)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>_ \\<Longrightarrow>\n  hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>_ \\<Longrightarrow>\n  hereditarily_fs (p \\<bullet> ?t\\<^sub>\\<alpha>)", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp tset\\<^sub>\\<alpha>_)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>_ \\<Longrightarrow>\n  hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha>_ \\<Longrightarrow>\n  hereditarily_fs (p \\<bullet> ?t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. hereditarily_fs (p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>_)", "by (metis (erased, hide_lams) Conj\\<^sub>\\<alpha>_eqvt hereditarily_fs.Conj\\<^sub>\\<alpha> mem_permute_iff permute_finite permute_minus_cancel(1) set_bset_eqvt supp_eqvt)"], ["proof (state)\nthis:\n  hereditarily_fs (p \\<bullet> Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>_)\n\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n 2. \\<And>\\<phi>. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>)\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n 2. \\<And>\\<phi>. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>)\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "case Not\\<^sub>\\<alpha>"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>_)\n\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n 2. \\<And>\\<phi>. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>)\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>_)", "show ?case"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>_)\n\ngoal (1 subgoal):\n 1. hereditarily_fs (p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>_)", "by (metis Not\\<^sub>\\<alpha>_eqvt hereditarily_fs.Not\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  hereditarily_fs (p \\<bullet> Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>_)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>)\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>)\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "case Pred\\<^sub>\\<alpha>"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>)\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>_)", "by (metis Pred\\<^sub>\\<alpha>_eqvt hereditarily_fs.Pred\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  hereditarily_fs (p \\<bullet> Pred\\<^sub>\\<alpha> \\<phi>_)\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "case Act\\<^sub>\\<alpha>"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>_)\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>\n  t\\<^sub>\\<alpha>)", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>_)", "show ?case"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>_)\n\ngoal (1 subgoal):\n 1. hereditarily_fs\n     (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>_ t\\<^sub>\\<alpha>_)", "by (metis Act\\<^sub>\\<alpha>_eqvt hereditarily_fs.Act\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  hereditarily_fs\n   (p \\<bullet> Act\\<^sub>\\<alpha> \\<alpha>_ t\\<^sub>\\<alpha>_)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>@{const hereditarily_fs} is preserved under $\\alpha$-renaming.\\<close>"], ["", "lemma hereditarily_fs_alpha_renaming:\n  assumes \"Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha> = Act\\<^sub>\\<alpha> \\<alpha>' t\\<^sub>\\<alpha>'\"\n  shows \"hereditarily_fs t\\<^sub>\\<alpha> \\<longleftrightarrow> hereditarily_fs t\\<^sub>\\<alpha>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha> = hereditarily_fs t\\<^sub>\\<alpha>'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. hereditarily_fs t\\<^sub>\\<alpha> \\<Longrightarrow>\n    hereditarily_fs t\\<^sub>\\<alpha>'\n 2. hereditarily_fs t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    hereditarily_fs t\\<^sub>\\<alpha>", "assume \"hereditarily_fs t\\<^sub>\\<alpha>\""], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (2 subgoals):\n 1. hereditarily_fs t\\<^sub>\\<alpha> \\<Longrightarrow>\n    hereditarily_fs t\\<^sub>\\<alpha>'\n 2. hereditarily_fs t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    hereditarily_fs t\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>", "show \"hereditarily_fs t\\<^sub>\\<alpha>'\""], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>'", "using assms"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n  Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha> =\n  Act\\<^sub>\\<alpha> \\<alpha>' t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>'", "by (auto simp add: Act\\<^sub>\\<alpha>_def Tree\\<^sub>\\<alpha>.abs_eq_iff alphas) (metis Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep hereditarily_fs_eqvt permute_Tree\\<^sub>\\<alpha>.abs_eq)"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    hereditarily_fs t\\<^sub>\\<alpha>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    hereditarily_fs t\\<^sub>\\<alpha>", "assume \"hereditarily_fs t\\<^sub>\\<alpha>'\""], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>' \\<Longrightarrow>\n    hereditarily_fs t\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>'", "show \"hereditarily_fs t\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>", "using assms"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>'\n  Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha> =\n  Act\\<^sub>\\<alpha> \\<alpha>' t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>", "by (auto simp add: Act\\<^sub>\\<alpha>_def Tree\\<^sub>\\<alpha>.abs_eq_iff alphas) (metis Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep hereditarily_fs_eqvt permute_Tree\\<^sub>\\<alpha>.abs_eq permute_minus_cancel(2))"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Hereditarily finitely supported trees have finite support.\\<close>"], ["", "lemma hereditarily_fs_implies_finite_supp:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"finite (supp t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp t\\<^sub>\\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. finite (supp t\\<^sub>\\<alpha>)", "by (induction rule: hereditarily_fs.induct) (simp_all add: finite_supp)"], ["", "subsection \\<open>Infinitary formulas\\<close>"], ["", "text \\<open>Now, infinitary formulas are simply the sub-type of hereditarily finitely supported trees.\\<close>"], ["", "typedef ('idx,'pred::fs,'act::bn) formula = \"{t\\<^sub>\\<alpha>::('idx,'pred,'act) Tree\\<^sub>\\<alpha>. hereditarily_fs t\\<^sub>\\<alpha>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {t\\<^sub>\\<alpha>. hereditarily_fs t\\<^sub>\\<alpha>}", "by (metis hereditarily_fs.Pred\\<^sub>\\<alpha> mem_Collect_eq)"], ["", "text \\<open>We set up Isabelle's lifting infrastructure so that we can lift definitions from the type of\ntrees modulo $\\alpha$-equivalence to the sub-type of formulas.\\<close>"], ["", "(* FIXME: No relator found. *)"], ["", "setup_lifting type_definition_formula"], ["", "lemma Abs_formula_inverse [simp]:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"Rep_formula (Abs_formula t\\<^sub>\\<alpha>) = t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_formula (Abs_formula t\\<^sub>\\<alpha>) = t\\<^sub>\\<alpha>", "using assms"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. Rep_formula (Abs_formula t\\<^sub>\\<alpha>) = t\\<^sub>\\<alpha>", "by (metis Abs_formula_inverse mem_Collect_eq)"], ["", "lemma Rep_formula' [simp]: \"hereditarily_fs (Rep_formula x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hereditarily_fs (Rep_formula x)", "by (metis Rep_formula mem_Collect_eq)"], ["", "text \\<open>Now we lift the permutation operation.\\<close>"], ["", "instantiation formula :: (type, fs, bn) pt\nbegin"], ["", "lift_definition permute_formula :: \"perm \\<Rightarrow> ('a,'b,'c) formula \\<Rightarrow> ('a,'b,'c) formula\"\n    is permute"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>perm Tree\\<^sub>\\<alpha>.\n       hereditarily_fs Tree\\<^sub>\\<alpha> \\<Longrightarrow>\n       hereditarily_fs (perm \\<bullet> Tree\\<^sub>\\<alpha>)", "by (fact hereditarily_fs_eqvt)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c) formula, pt_class)", "by standard (transfer, simp)+"], ["", "end"], ["", "text \\<open>The abstraction and representation functions for formulas are equivariant, and they preserve\nsupport.\\<close>"], ["", "lemma Abs_formula_eqvt [simp]:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"p \\<bullet> Abs_formula t\\<^sub>\\<alpha> = Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n    Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)", "by (metis assms eq_onp_same_args permute_formula.abs_eq)"], ["", "lemma supp_Abs_formula [simp]:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "fix p :: perm"], ["proof (state)\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "have \"p \\<bullet> Abs_formula t\\<^sub>\\<alpha> = Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n    Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n    Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)", "by (metis Abs_formula_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n  Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n  Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "have \"hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)", "by (metis hereditarily_fs_eqvt)"], ["proof (state)\nthis:\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "ultimately"], ["proof (chain)\npicking this:\n  p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n  Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)", "have \"p \\<bullet> Abs_formula t\\<^sub>\\<alpha> = Abs_formula t\\<^sub>\\<alpha> \\<longleftrightarrow> p \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n  Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. (p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n     Abs_formula t\\<^sub>\\<alpha>) =\n    (p \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n  Abs_formula (p \\<bullet> t\\<^sub>\\<alpha>)\n  hereditarily_fs (p \\<bullet> t\\<^sub>\\<alpha>)\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. (p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n     Abs_formula t\\<^sub>\\<alpha>) =\n    (p \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>)", "by (metis Abs_formula_inverse)"], ["proof (state)\nthis:\n  (p \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n   Abs_formula t\\<^sub>\\<alpha>) =\n  (p \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "}"], ["proof (state)\nthis:\n  (?p2 \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n   Abs_formula t\\<^sub>\\<alpha>) =\n  (?p2 \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  (?p2 \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n   Abs_formula t\\<^sub>\\<alpha>) =\n  (?p2 \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>)", "show ?thesis"], ["proof (prove)\nusing this:\n  (?p2 \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n   Abs_formula t\\<^sub>\\<alpha>) =\n  (?p2 \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>", "unfolding supp_def"], ["proof (prove)\nusing this:\n  (?p2 \\<bullet> Abs_formula t\\<^sub>\\<alpha> =\n   Abs_formula t\\<^sub>\\<alpha>) =\n  (?p2 \\<bullet> t\\<^sub>\\<alpha> = t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> Abs_formula\n             t\\<^sub>\\<alpha> \\<noteq>\n             Abs_formula t\\<^sub>\\<alpha>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> t\\<^sub>\\<alpha> \\<noteq>\n             t\\<^sub>\\<alpha>}}", "by simp"], ["proof (state)\nthis:\n  supp (Abs_formula t\\<^sub>\\<alpha>) = supp t\\<^sub>\\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas Rep_formula_eqvt [eqvt, simp] = permute_formula.rep_eq[symmetric]"], ["", "lemma supp_Rep_formula [simp]: \"supp (Rep_formula x) = supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Rep_formula x) = supp x", "by (metis Rep_formula' Rep_formula_inverse supp_Abs_formula)"], ["", "lemma supp_map_bset_Rep_formula [simp]: \"supp (map_bset Rep_formula xset) = supp xset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (map_bset Rep_formula xset) = supp xset", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. supp (map_bset Rep_formula xset) \\<subseteq> supp xset\n 2. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "have \"eqvt (map_bset Rep_formula)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt (map_bset Rep_formula)", "unfolding eqvt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. p \\<bullet> map_bset Rep_formula = map_bset Rep_formula", "by (simp add: ext)"], ["proof (state)\nthis:\n  eqvt (map_bset Rep_formula)\n\ngoal (2 subgoals):\n 1. supp (map_bset Rep_formula xset) \\<subseteq> supp xset\n 2. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "then"], ["proof (chain)\npicking this:\n  eqvt (map_bset Rep_formula)", "show \"supp (map_bset Rep_formula xset) \\<subseteq> supp xset\""], ["proof (prove)\nusing this:\n  eqvt (map_bset Rep_formula)\n\ngoal (1 subgoal):\n 1. supp (map_bset Rep_formula xset) \\<subseteq> supp xset", "by (fact supp_fun_app_eqvt)"], ["proof (state)\nthis:\n  supp (map_bset Rep_formula xset) \\<subseteq> supp xset\n\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "fix a :: atom"], ["proof (state)\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "have \"inj (map_bset Rep_formula)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (map_bset Rep_formula)", "by (metis bset.inj_map Rep_formula_inject injI)"], ["proof (state)\nthis:\n  inj (map_bset Rep_formula)\n\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "then"], ["proof (chain)\npicking this:\n  inj (map_bset Rep_formula)", "have \"\\<And>x y. x \\<noteq> y \\<Longrightarrow> map_bset Rep_formula x \\<noteq> map_bset Rep_formula y\""], ["proof (prove)\nusing this:\n  inj (map_bset Rep_formula)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<noteq> y \\<Longrightarrow>\n       map_bset Rep_formula x \\<noteq> map_bset Rep_formula y", "by (metis inj_eq)"], ["proof (state)\nthis:\n  ?x1 \\<noteq> ?y1 \\<Longrightarrow>\n  map_bset Rep_formula ?x1 \\<noteq> map_bset Rep_formula ?y1\n\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "then"], ["proof (chain)\npicking this:\n  ?x1 \\<noteq> ?y1 \\<Longrightarrow>\n  map_bset Rep_formula ?x1 \\<noteq> map_bset Rep_formula ?y1", "have \"{b. (a \\<rightleftharpoons> b) \\<bullet> xset \\<noteq> xset} \\<subseteq> {b. (a \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula xset \\<noteq> map_bset Rep_formula xset}\" (is \"?S \\<subseteq> ?T\")"], ["proof (prove)\nusing this:\n  ?x1 \\<noteq> ?y1 \\<Longrightarrow>\n  map_bset Rep_formula ?x1 \\<noteq> map_bset Rep_formula ?y1\n\ngoal (1 subgoal):\n 1. {b. (a \\<rightleftharpoons> b) \\<bullet> xset \\<noteq> xset}\n    \\<subseteq> {b. (a \\<rightleftharpoons> b) \\<bullet> map_bset\n                    Rep_formula xset \\<noteq>\n                    map_bset Rep_formula xset}", "by auto"], ["proof (state)\nthis:\n  {b. (a \\<rightleftharpoons> b) \\<bullet> xset \\<noteq> xset}\n  \\<subseteq> {b. (a \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n                  xset \\<noteq>\n                  map_bset Rep_formula xset}\n\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "then"], ["proof (chain)\npicking this:\n  {b. (a \\<rightleftharpoons> b) \\<bullet> xset \\<noteq> xset}\n  \\<subseteq> {b. (a \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n                  xset \\<noteq>\n                  map_bset Rep_formula xset}", "have \"infinite ?S \\<Longrightarrow> infinite ?T\""], ["proof (prove)\nusing this:\n  {b. (a \\<rightleftharpoons> b) \\<bullet> xset \\<noteq> xset}\n  \\<subseteq> {b. (a \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n                  xset \\<noteq>\n                  map_bset Rep_formula xset}\n\ngoal (1 subgoal):\n 1. infinite\n     {b. (a \\<rightleftharpoons> b) \\<bullet> xset \\<noteq>\n         xset} \\<Longrightarrow>\n    infinite\n     {b. (a \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n         xset \\<noteq>\n         map_bset Rep_formula xset}", "by (metis infinite_super)"], ["proof (state)\nthis:\n  infinite\n   {b. (a \\<rightleftharpoons> b) \\<bullet> xset \\<noteq>\n       xset} \\<Longrightarrow>\n  infinite\n   {b. (a \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n       xset \\<noteq>\n       map_bset Rep_formula xset}\n\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "}"], ["proof (state)\nthis:\n  infinite\n   {b. (?a2 \\<rightleftharpoons> b) \\<bullet> xset \\<noteq>\n       xset} \\<Longrightarrow>\n  infinite\n   {b. (?a2 \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n         xset \\<noteq>\n       map_bset Rep_formula xset}\n\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "then"], ["proof (chain)\npicking this:\n  infinite\n   {b. (?a2 \\<rightleftharpoons> b) \\<bullet> xset \\<noteq>\n       xset} \\<Longrightarrow>\n  infinite\n   {b. (?a2 \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n         xset \\<noteq>\n       map_bset Rep_formula xset}", "show \"supp xset \\<subseteq> supp (map_bset Rep_formula xset)\""], ["proof (prove)\nusing this:\n  infinite\n   {b. (?a2 \\<rightleftharpoons> b) \\<bullet> xset \\<noteq>\n       xset} \\<Longrightarrow>\n  infinite\n   {b. (?a2 \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n         xset \\<noteq>\n       map_bset Rep_formula xset}\n\ngoal (1 subgoal):\n 1. supp xset \\<subseteq> supp (map_bset Rep_formula xset)", "unfolding supp_def"], ["proof (prove)\nusing this:\n  infinite\n   {b. (?a2 \\<rightleftharpoons> b) \\<bullet> xset \\<noteq>\n       xset} \\<Longrightarrow>\n  infinite\n   {b. (?a2 \\<rightleftharpoons> b) \\<bullet> map_bset Rep_formula\n         xset \\<noteq>\n       map_bset Rep_formula xset}\n\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> xset \\<noteq> xset}}\n    \\<subseteq> {a. infinite\n                     {b. (a \\<rightleftharpoons> b) \\<bullet> map_bset\n                         Rep_formula xset \\<noteq>\n                         map_bset Rep_formula xset}}", "by auto"], ["proof (state)\nthis:\n  supp xset \\<subseteq> supp (map_bset Rep_formula xset)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Formulas are in fact finitely supported.\\<close>"], ["", "instance formula :: (type, fs, bn) fs"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b, 'c) formula, fs_class)", "by standard (metis Rep_formula' hereditarily_fs_implies_finite_supp supp_Rep_formula)"], ["", "subsection \\<open>Constructors for infinitary formulas\\<close>"], ["", "text \\<open>We lift the constructors for trees (modulo $\\alpha$-equivalence) to infinitary formulas.\nSince~@{const Conj\\<^sub>\\<alpha>} does not necessarily yield a (hereditarily) finitely supported tree when\napplied to a (potentially infinite) set of (hereditarily) finitely supported trees, we cannot use\nIsabelle's {\\bf lift\\_definition} to define~@{term Conj}. Instead, theorems about terms of the\nform~@{term \"Conj xset\"} will usually carry an assumption that~@{term xset} is finitely supported.\\<close>"], ["", "definition Conj :: \"('idx,'pred,'act) formula set['idx] \\<Rightarrow> ('idx,'pred::fs,'act::bn) formula\" where\n  \"Conj xset = Abs_formula (Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset))\""], ["", "lemma finite_supp_implies_hereditarily_fs_Conj\\<^sub>\\<alpha> [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"hereditarily_fs (Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hereditarily_fs (Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset))", "proof (rule hereditarily_fs.Conj\\<^sub>\\<alpha>)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (supp (map_bset Rep_formula xset))\n 2. \\<And>t\\<^sub>\\<alpha>.\n       t\\<^sub>\\<alpha>\n       \\<in> set_bset (map_bset Rep_formula xset) \\<Longrightarrow>\n       hereditarily_fs t\\<^sub>\\<alpha>", "show \"finite (supp (map_bset Rep_formula xset))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (map_bset Rep_formula xset))", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset Rep_formula xset))", "by (metis supp_map_bset_Rep_formula)"], ["proof (state)\nthis:\n  finite (supp (map_bset Rep_formula xset))\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       t\\<^sub>\\<alpha>\n       \\<in> set_bset (map_bset Rep_formula xset) \\<Longrightarrow>\n       hereditarily_fs t\\<^sub>\\<alpha>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       t\\<^sub>\\<alpha>\n       \\<in> set_bset (map_bset Rep_formula xset) \\<Longrightarrow>\n       hereditarily_fs t\\<^sub>\\<alpha>", "fix t\\<^sub>\\<alpha>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       t\\<^sub>\\<alpha>\n       \\<in> set_bset (map_bset Rep_formula xset) \\<Longrightarrow>\n       hereditarily_fs t\\<^sub>\\<alpha>", "assume \"t\\<^sub>\\<alpha> \\<in> set_bset (map_bset Rep_formula xset)\""], ["proof (state)\nthis:\n  t\\<^sub>\\<alpha> \\<in> set_bset (map_bset Rep_formula xset)\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       t\\<^sub>\\<alpha>\n       \\<in> set_bset (map_bset Rep_formula xset) \\<Longrightarrow>\n       hereditarily_fs t\\<^sub>\\<alpha>", "then"], ["proof (chain)\npicking this:\n  t\\<^sub>\\<alpha> \\<in> set_bset (map_bset Rep_formula xset)", "show \"hereditarily_fs t\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  t\\<^sub>\\<alpha> \\<in> set_bset (map_bset Rep_formula xset)\n\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>", "by (auto simp add: bset.set_map)"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Conj_rep_eq:\n  assumes \"finite (supp xset)\"\n  shows \"Rep_formula (Conj xset) = Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_formula (Conj xset) =\n    Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset)", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. Rep_formula (Conj xset) =\n    Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset)", "unfolding Conj_def"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. Rep_formula\n     (Abs_formula (Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset))) =\n    Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset)", "by simp"], ["", "lift_definition Not :: \"('idx,'pred,'act) formula \\<Rightarrow> ('idx,'pred::fs,'act::bn) formula\" is\n  Not\\<^sub>\\<alpha>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Tree\\<^sub>\\<alpha>.\n       hereditarily_fs Tree\\<^sub>\\<alpha> \\<Longrightarrow>\n       hereditarily_fs (Not\\<^sub>\\<alpha> Tree\\<^sub>\\<alpha>)", "by (fact hereditarily_fs.Not\\<^sub>\\<alpha>)"], ["", "lift_definition Pred :: \"'pred \\<Rightarrow> ('idx,'pred::fs,'act::bn) formula\" is\n  Pred\\<^sub>\\<alpha>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pred. hereditarily_fs (Pred\\<^sub>\\<alpha> pred)", "by (fact hereditarily_fs.Pred\\<^sub>\\<alpha>)"], ["", "lift_definition Act :: \"'act \\<Rightarrow> ('idx,'pred,'act) formula \\<Rightarrow> ('idx,'pred::fs,'act::bn) formula\" is\n  Act\\<^sub>\\<alpha>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>act Tree\\<^sub>\\<alpha>.\n       hereditarily_fs Tree\\<^sub>\\<alpha> \\<Longrightarrow>\n       hereditarily_fs (Act\\<^sub>\\<alpha> act Tree\\<^sub>\\<alpha>)", "by (fact hereditarily_fs.Act\\<^sub>\\<alpha>)"], ["", "text \\<open>The lifted constructors are equivariant (in the case of~@{const Conj}, on finitely supported\narguments).\\<close>"], ["", "lemma Conj_eqvt [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"p \\<bullet> Conj xset = Conj (p \\<bullet> xset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Conj xset = Conj (p \\<bullet> xset)", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Conj xset = Conj (p \\<bullet> xset)", "unfolding Conj_def"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Abs_formula\n                 (Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset)) =\n    Abs_formula\n     (Conj\\<^sub>\\<alpha> (map_bset Rep_formula (p \\<bullet> xset)))", "by simp"], ["", "lemma Not_eqvt [eqvt, simp]: \"p \\<bullet> Not x = Not (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Formula.Not x = Formula.Not (p \\<bullet> x)", "by transfer simp"], ["", "lemma Pred_eqvt [eqvt, simp]: \"p \\<bullet> Pred \\<phi> = Pred (p \\<bullet> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Pred \\<phi> = Pred (p \\<bullet> \\<phi>)", "by transfer simp"], ["", "lemma Act_eqvt [eqvt, simp]: \"p \\<bullet> Act \\<alpha> x = Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Act \\<alpha> x = Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "by transfer simp"], ["", "text \\<open>The following lemmas describe the support of constructed formulas.\\<close>"], ["", "lemma supp_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"supp (Conj xset) = supp xset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Conj xset) = supp xset", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. supp (Conj xset) = supp xset", "unfolding Conj_def"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. supp (Abs_formula (Conj\\<^sub>\\<alpha> (map_bset Rep_formula xset))) =\n    supp xset", "by simp"], ["", "lemma supp_Not [simp]: \"supp (Not x) = supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Formula.Not x) = supp x", "by (metis Not.rep_eq supp_Not\\<^sub>\\<alpha> supp_Rep_formula)"], ["", "lemma supp_Pred [simp]: \"supp (Pred \\<phi>) = supp \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Pred \\<phi>) = supp \\<phi>", "by (metis Pred.rep_eq supp_Pred\\<^sub>\\<alpha> supp_Rep_formula)"], ["", "lemma supp_Act [simp]: \"supp (Act \\<alpha> x) = supp \\<alpha> \\<union> supp x - bn \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Act \\<alpha> x) = supp \\<alpha> \\<union> supp x - bn \\<alpha>", "by (metis Act.rep_eq finite_supp supp_Act\\<^sub>\\<alpha> supp_Rep_formula)"], ["", "lemma bn_fresh_Act [simp]: \"bn \\<alpha> \\<sharp>* Act \\<alpha> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* Act \\<alpha> x", "by (simp add: fresh_def fresh_star_def)"], ["", "text \\<open>The lifted constructors are injective (except for @{const Act}).\\<close>"], ["", "lemma Conj_eq_iff [simp]:\n  assumes \"finite (supp xset1)\" and \"finite (supp xset2)\"\n  shows \"Conj xset1 = Conj xset2 \\<longleftrightarrow> xset1 = xset2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Conj xset1 = Conj xset2) = (xset1 = xset2)", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset1)\n  finite (supp xset2)\n\ngoal (1 subgoal):\n 1. (Conj xset1 = Conj xset2) = (xset1 = xset2)", "by (metis (erased, hide_lams) Conj\\<^sub>\\<alpha>_eq_iff Conj_rep_eq Rep_formula_inverse injI inj_eq bset.inj_map)"], ["", "lemma Not_eq_iff [simp]: \"Not x1 = Not x2 \\<longleftrightarrow> x1 = x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Formula.Not x1 = Formula.Not x2) = (x1 = x2)", "by (metis Not.rep_eq Not\\<^sub>\\<alpha>_eq_iff Rep_formula_inverse)"], ["", "lemma Pred_eq_iff [simp]: \"Pred \\<phi>1 = Pred \\<phi>2 \\<longleftrightarrow> \\<phi>1 = \\<phi>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Pred \\<phi>1 = Pred \\<phi>2) = (\\<phi>1 = \\<phi>2)", "by (metis Pred.rep_eq Pred\\<^sub>\\<alpha>_eq_iff)"], ["", "lemma Act_eq_iff: \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<longleftrightarrow> Act\\<^sub>\\<alpha> \\<alpha>1 (Rep_formula x1) = Act\\<^sub>\\<alpha> \\<alpha>2 (Rep_formula x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Act \\<alpha>1 x1 = Act \\<alpha>2 x2) =\n    (Act\\<^sub>\\<alpha> \\<alpha>1 (Rep_formula x1) =\n     Act\\<^sub>\\<alpha> \\<alpha>2 (Rep_formula x2))", "by (metis Act.rep_eq Rep_formula_inverse)"], ["", "text \\<open>Helpful lemmas for dealing with equalities involving~@{const Act}.\\<close>"], ["", "lemma Act_eq_iff_perm: \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<longleftrightarrow>\n  (\\<exists>p. supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and> (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> x1 = x2 \\<and> supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and> (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> \\<alpha>1 = \\<alpha>2)\"\n  (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Act \\<alpha>1 x1 = Act \\<alpha>2 x2) =\n    (\\<exists>p.\n        supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n        (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n        p \\<bullet> x1 = x2 \\<and>\n        supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n        (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n        p \\<bullet> \\<alpha>1 = \\<alpha>2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "assume \"?l\""], ["proof (state)\nthis:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "then"], ["proof (chain)\npicking this:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "obtain p where alpha: \"(bn \\<alpha>1, rep_Tree\\<^sub>\\<alpha> (Rep_formula x1)) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) p (bn \\<alpha>2, rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\" and eq: \"(bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\""], ["proof (prove)\nusing this:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(bn \\<alpha>1,\n                  rep_Tree\\<^sub>\\<alpha>\n                   (Rep_formula\n                     x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n                     (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n     rep_Tree\\<^sub>\\<alpha> (Rep_formula x2));\n         (bn \\<alpha>1,\n          \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n        \\<alpha>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Act_eq_iff Act\\<^sub>\\<alpha>_eq_iff alpha_tAct)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "from alpha"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))", "have \"supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\n\ngoal (1 subgoal):\n 1. supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2", "by (metis alpha_set.simps supp_Rep_formula supp_alpha_supp_rel)"], ["proof (state)\nthis:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "moreover"], ["proof (state)\nthis:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "from alpha"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))", "have \"(supp x1 - bn \\<alpha>1) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\n\ngoal (1 subgoal):\n 1. (supp x1 - bn \\<alpha>1) \\<sharp>* p", "by (metis alpha_set.simps supp_Rep_formula supp_alpha_supp_rel)"], ["proof (state)\nthis:\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "moreover"], ["proof (state)\nthis:\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "from alpha"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))", "have \"p \\<bullet> x1 = x2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\n\ngoal (1 subgoal):\n 1. p \\<bullet> x1 = x2", "by (metis Rep_formula_eqvt Rep_formula_inject Tree\\<^sub>\\<alpha>.abs_eq_iff Tree\\<^sub>\\<alpha>_abs_rep alpha_Tree_permute_rep_commute alpha_set.simps)"], ["proof (state)\nthis:\n  p \\<bullet> x1 = x2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> x1 = x2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "from eq"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "have \"supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2", "by (metis alpha_set.simps)"], ["proof (state)\nthis:\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "moreover"], ["proof (state)\nthis:\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "from eq"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "have \"(supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p", "by (metis alpha_set.simps)"], ["proof (state)\nthis:\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "moreover"], ["proof (state)\nthis:\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "from eq"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "have \"p \\<bullet> \\<alpha>1 = \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<alpha>1 = \\<alpha>2", "by (simp add: alpha_set.simps)"], ["proof (state)\nthis:\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "ultimately"], ["proof (chain)\npicking this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> x1 = x2\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> \\<alpha>1 = \\<alpha>2", "show \"?r\""], ["proof (prove)\nusing this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> x1 = x2\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2", "by metis"], ["proof (state)\nthis:\n  \\<exists>p.\n     supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n     (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> x1 = x2 \\<and>\n     supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n     (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "assume \"?r\""], ["proof (state)\nthis:\n  \\<exists>p.\n     supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n     (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> x1 = x2 \\<and>\n     supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n     (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "then"], ["proof (chain)\npicking this:\n  \\<exists>p.\n     supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n     (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> x1 = x2 \\<and>\n     supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n     (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> \\<alpha>1 = \\<alpha>2", "obtain p where 1: \"supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\" and 2: \"(supp x1 - bn \\<alpha>1) \\<sharp>* p\" and 3: \"p \\<bullet> x1 = x2\"\n    and 4: \"supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\" and 5: \"(supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\" and 6: \"p \\<bullet> \\<alpha>1 = \\<alpha>2\""], ["proof (prove)\nusing this:\n  \\<exists>p.\n     supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n     (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> x1 = x2 \\<and>\n     supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n     (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2;\n         (supp x1 - bn \\<alpha>1) \\<sharp>* p; p \\<bullet> x1 = x2;\n         supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2;\n         (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p;\n         p \\<bullet> \\<alpha>1 = \\<alpha>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> x1 = x2\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "from 1 2 3 6"], ["proof (chain)\npicking this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> x1 = x2\n  p \\<bullet> \\<alpha>1 = \\<alpha>2", "have \"(bn \\<alpha>1, rep_Tree\\<^sub>\\<alpha> (Rep_formula x1)) \\<approx>set (=\\<^sub>\\<alpha>) (supp_rel (=\\<^sub>\\<alpha>)) p (bn \\<alpha>2, rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\""], ["proof (prove)\nusing this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> x1 = x2\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     rep_Tree\\<^sub>\\<alpha>\n      (Rep_formula\n        x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                              rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))", "by (metis (no_types, lifting) Rep_formula_eqvt alpha_Tree_permute_rep_commute alpha_set.simps bn_eqvt supp_Rep_formula supp_alpha_supp_rel)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "moreover"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "from 4 5 6"], ["proof (chain)\npicking this:\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> \\<alpha>1 = \\<alpha>2", "have \"(bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\""], ["proof (prove)\nusing this:\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "by (simp add: alpha_set.simps bn_eqvt)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "ultimately"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "show \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (Rep_formula\n      x1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (Rep_formula x2))\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "by (metis Act_eq_iff Act\\<^sub>\\<alpha>_eq_iff alpha_tAct)"], ["proof (state)\nthis:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Act_eq_iff_perm_renaming: \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<longleftrightarrow>\n  (\\<exists>p. supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and> (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> x1 = x2 \\<and> supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and> (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and> supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1)\"\n  (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Act \\<alpha>1 x1 = Act \\<alpha>2 x2) =\n    (\\<exists>p.\n        supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n        (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n        p \\<bullet> x1 = x2 \\<and>\n        supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n        (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n        p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n        supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "assume \"?l\""], ["proof (state)\nthis:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "then"], ["proof (chain)\npicking this:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "obtain p where p: \"supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and> (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> x1 = x2 \\<and> supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and> (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and> p \\<bullet> \\<alpha>1 = \\<alpha>2\""], ["proof (prove)\nusing this:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n        (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n        p \\<bullet> x1 = x2 \\<and>\n        supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n        (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n        p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Act_eq_iff_perm)"], ["proof (state)\nthis:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "moreover"], ["proof (state)\nthis:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "obtain q where q_p: \"\\<forall>b\\<in>bn \\<alpha>1. q \\<bullet> b = p \\<bullet> b\" and supp_q: \"supp q \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>\\<forall>b\\<in>bn \\<alpha>1. q \\<bullet> b = p \\<bullet> b;\n         supp q\n         \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis set_renaming_perm2)"], ["proof (state)\nthis:\n  \\<forall>b\\<in>bn \\<alpha>1. q \\<bullet> b = p \\<bullet> b\n  supp q \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "have \"supp q \\<subseteq> supp p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp q \\<subseteq> supp p", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> supp q \\<Longrightarrow> x \\<in> supp p", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> supp q \\<Longrightarrow> x \\<in> supp p", "assume *: \"a \\<in> supp q\""], ["proof (state)\nthis:\n  a \\<in> supp q\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> supp q \\<Longrightarrow> x \\<in> supp p", "then"], ["proof (chain)\npicking this:\n  a \\<in> supp q", "show \"a \\<in> supp p\""], ["proof (prove)\nusing this:\n  a \\<in> supp q\n\ngoal (1 subgoal):\n 1. a \\<in> supp p", "proof (cases \"a \\<in> bn \\<alpha>1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> supp q; a \\<in> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p\n 2. \\<lbrakk>a \\<in> supp q; a \\<notin> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p", "case True"], ["proof (state)\nthis:\n  a \\<in> bn \\<alpha>1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> supp q; a \\<in> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p\n 2. \\<lbrakk>a \\<in> supp q; a \\<notin> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p", "then"], ["proof (chain)\npicking this:\n  a \\<in> bn \\<alpha>1", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. a \\<in> supp p", "using \"*\" q_p"], ["proof (prove)\nusing this:\n  a \\<in> bn \\<alpha>1\n  a \\<in> supp q\n  \\<forall>b\\<in>bn \\<alpha>1. q \\<bullet> b = p \\<bullet> b\n\ngoal (1 subgoal):\n 1. a \\<in> supp p", "by (metis mem_Collect_eq supp_perm)"], ["proof (state)\nthis:\n  a \\<in> supp p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> supp q; a \\<notin> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> supp q; a \\<notin> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p", "case False"], ["proof (state)\nthis:\n  a \\<notin> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> supp q; a \\<notin> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p", "then"], ["proof (chain)\npicking this:\n  a \\<notin> bn \\<alpha>1", "have \"a \\<in> p \\<bullet> bn \\<alpha>1\""], ["proof (prove)\nusing this:\n  a \\<notin> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. a \\<in> p \\<bullet> bn \\<alpha>1", "using \"*\" supp_q"], ["proof (prove)\nusing this:\n  a \\<notin> bn \\<alpha>1\n  a \\<in> supp q\n  supp q \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. a \\<in> p \\<bullet> bn \\<alpha>1", "using UnE subsetCE"], ["proof (prove)\nusing this:\n  a \\<notin> bn \\<alpha>1\n  a \\<in> supp q\n  supp q \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n  \\<lbrakk>?c \\<in> ?A \\<union> ?B; ?c \\<in> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. a \\<in> p \\<bullet> bn \\<alpha>1", "by blast"], ["proof (state)\nthis:\n  a \\<in> p \\<bullet> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> supp q; a \\<notin> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p", "with False"], ["proof (chain)\npicking this:\n  a \\<notin> bn \\<alpha>1\n  a \\<in> p \\<bullet> bn \\<alpha>1", "have \"p \\<bullet> a \\<noteq> a\""], ["proof (prove)\nusing this:\n  a \\<notin> bn \\<alpha>1\n  a \\<in> p \\<bullet> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. p \\<bullet> a \\<noteq> a", "by (metis mem_permute_iff)"], ["proof (state)\nthis:\n  p \\<bullet> a \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> supp q; a \\<notin> bn \\<alpha>1\\<rbrakk>\n    \\<Longrightarrow> a \\<in> supp p", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> a \\<noteq> a", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<bullet> a \\<noteq> a\n\ngoal (1 subgoal):\n 1. a \\<in> supp p", "using fresh_def fresh_perm"], ["proof (prove)\nusing this:\n  p \\<bullet> a \\<noteq> a\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  ?a \\<sharp> ?p = (?p \\<bullet> ?a = ?a)\n\ngoal (1 subgoal):\n 1. a \\<in> supp p", "by blast"], ["proof (state)\nthis:\n  a \\<in> supp p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<in> supp p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  supp q \\<subseteq> supp p\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "with p"], ["proof (chain)\npicking this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n  supp q \\<subseteq> supp p", "have \"(supp x1 - bn \\<alpha>1) \\<sharp>* q\" and \"(supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q\""], ["proof (prove)\nusing this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n  supp q \\<subseteq> supp p\n\ngoal (1 subgoal):\n 1. (supp x1 - bn \\<alpha>1) \\<sharp>* q &&&\n    (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q", "by (meson fresh_def fresh_star_def subset_iff)+"], ["proof (state)\nthis:\n  (supp x1 - bn \\<alpha>1) \\<sharp>* q\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "moreover"], ["proof (state)\nthis:\n  (supp x1 - bn \\<alpha>1) \\<sharp>* q\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "with p and q_p"], ["proof (chain)\npicking this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n  \\<forall>b\\<in>bn \\<alpha>1. q \\<bullet> b = p \\<bullet> b\n  (supp x1 - bn \\<alpha>1) \\<sharp>* q\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q", "have \"\\<And>a. a \\<in> supp \\<alpha>1 \\<Longrightarrow> q \\<bullet> a = p \\<bullet> a\" and \"\\<And>a. a \\<in> supp x1 \\<Longrightarrow> q \\<bullet> a = p \\<bullet> a\""], ["proof (prove)\nusing this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n  \\<forall>b\\<in>bn \\<alpha>1. q \\<bullet> b = p \\<bullet> b\n  (supp x1 - bn \\<alpha>1) \\<sharp>* q\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> supp \\<alpha>1 \\<Longrightarrow>\n        q \\<bullet> a = p \\<bullet> a) &&&\n    (\\<And>a.\n        a \\<in> supp x1 \\<Longrightarrow> q \\<bullet> a = p \\<bullet> a)", "by (metis Diff_iff fresh_perm fresh_star_def)+"], ["proof (state)\nthis:\n  ?a \\<in> supp \\<alpha>1 \\<Longrightarrow> q \\<bullet> ?a = p \\<bullet> ?a\n  ?a \\<in> supp x1 \\<Longrightarrow> q \\<bullet> ?a = p \\<bullet> ?a\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "then"], ["proof (chain)\npicking this:\n  ?a \\<in> supp \\<alpha>1 \\<Longrightarrow> q \\<bullet> ?a = p \\<bullet> ?a\n  ?a \\<in> supp x1 \\<Longrightarrow> q \\<bullet> ?a = p \\<bullet> ?a", "have \"q \\<bullet> \\<alpha>1 = p \\<bullet> \\<alpha>1\" and \"q \\<bullet> x1 = p \\<bullet> x1\""], ["proof (prove)\nusing this:\n  ?a \\<in> supp \\<alpha>1 \\<Longrightarrow> q \\<bullet> ?a = p \\<bullet> ?a\n  ?a \\<in> supp x1 \\<Longrightarrow> q \\<bullet> ?a = p \\<bullet> ?a\n\ngoal (1 subgoal):\n 1. q \\<bullet> \\<alpha>1 = p \\<bullet> \\<alpha>1 &&&\n    q \\<bullet> x1 = p \\<bullet> x1", "by (metis supp_perm_perm_eq)+"], ["proof (state)\nthis:\n  q \\<bullet> \\<alpha>1 = p \\<bullet> \\<alpha>1\n  q \\<bullet> x1 = p \\<bullet> x1\n\ngoal (2 subgoals):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2 \\<Longrightarrow>\n    \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n 2. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "ultimately"], ["proof (chain)\npicking this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* q\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q\n  q \\<bullet> \\<alpha>1 = p \\<bullet> \\<alpha>1\n  q \\<bullet> x1 = p \\<bullet> x1", "show \"?r\""], ["proof (prove)\nusing this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* q\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q\n  q \\<bullet> \\<alpha>1 = p \\<bullet> \\<alpha>1\n  q \\<bullet> x1 = p \\<bullet> x1\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1", "using supp_q"], ["proof (prove)\nusing this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> x1 = x2 \\<and>\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* q\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* q\n  q \\<bullet> \\<alpha>1 = p \\<bullet> \\<alpha>1\n  q \\<bullet> x1 = p \\<bullet> x1\n  supp q \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1", "by (metis bn_eqvt)"], ["proof (state)\nthis:\n  \\<exists>p.\n     supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n     (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> x1 = x2 \\<and>\n     supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n     (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n     supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "assume \"?r\""], ["proof (state)\nthis:\n  \\<exists>p.\n     supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n     (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> x1 = x2 \\<and>\n     supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n     (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n     supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n       (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> x1 = x2 \\<and>\n       supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n       (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n       p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n       supp p\n       \\<subseteq> bn \\<alpha>1 \\<union>\n                   p \\<bullet> bn \\<alpha>1 \\<Longrightarrow>\n    Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "then"], ["proof (chain)\npicking this:\n  \\<exists>p.\n     supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n     (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> x1 = x2 \\<and>\n     supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n     (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n     supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1", "show \"?l\""], ["proof (prove)\nusing this:\n  \\<exists>p.\n     supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2 \\<and>\n     (supp x1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> x1 = x2 \\<and>\n     supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2 \\<and>\n     (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p \\<and>\n     p \\<bullet> \\<alpha>1 = \\<alpha>2 \\<and>\n     supp p \\<subseteq> bn \\<alpha>1 \\<union> p \\<bullet> bn \\<alpha>1\n\ngoal (1 subgoal):\n 1. Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "by (meson Act_eq_iff_perm)"], ["proof (state)\nthis:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The lifted constructors are free (except for @{const Act}).\\<close>"], ["", "lemma Tree_free [simp]:\n  shows \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Not x\"\n  and \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Pred \\<phi>\"\n  and \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\"\n  and \"Not x \\<noteq> Pred \\<phi>\"\n  and \"Not x1 \\<noteq> Act \\<alpha> x2\"\n  and \"Pred \\<phi> \\<noteq> Act \\<alpha> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((finite (supp xset) \\<Longrightarrow>\n      Conj xset \\<noteq> Formula.Not x) &&&\n     (finite (supp xset) \\<Longrightarrow>\n      Conj xset \\<noteq> Pred \\<phi>) &&&\n     (finite (supp xset) \\<Longrightarrow>\n      Conj xset \\<noteq> Act \\<alpha> x)) &&&\n    Formula.Not x \\<noteq> Pred \\<phi> &&&\n    Formula.Not x1 \\<noteq> Act \\<alpha> x2 &&&\n    Pred \\<phi> \\<noteq> Act \\<alpha> x", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Formula.Not x\n 2. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Pred \\<phi>\n 3. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\n 4. Formula.Not x \\<noteq> Pred \\<phi>\n 5. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 6. Pred \\<phi> \\<noteq> Act \\<alpha> x", "show \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Not x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Formula.Not x", "by (metis Conj_rep_eq Not.rep_eq Tree\\<^sub>\\<alpha>_free(1))"], ["proof (state)\nthis:\n  finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Formula.Not x\n\ngoal (5 subgoals):\n 1. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Pred \\<phi>\n 2. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\n 3. Formula.Not x \\<noteq> Pred \\<phi>\n 4. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 5. Pred \\<phi> \\<noteq> Act \\<alpha> x", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Pred \\<phi>\n 2. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\n 3. Formula.Not x \\<noteq> Pred \\<phi>\n 4. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 5. Pred \\<phi> \\<noteq> Act \\<alpha> x", "show \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Pred \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Pred \\<phi>", "by (metis Conj_rep_eq Pred.rep_eq Tree\\<^sub>\\<alpha>_free(2))"], ["proof (state)\nthis:\n  finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Pred \\<phi>\n\ngoal (4 subgoals):\n 1. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\n 2. Formula.Not x \\<noteq> Pred \\<phi>\n 3. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 4. Pred \\<phi> \\<noteq> Act \\<alpha> x", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\n 2. Formula.Not x \\<noteq> Pred \\<phi>\n 3. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 4. Pred \\<phi> \\<noteq> Act \\<alpha> x", "show \"finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x", "by (metis Conj_rep_eq Act.rep_eq Tree\\<^sub>\\<alpha>_free(3))"], ["proof (state)\nthis:\n  finite (supp xset) \\<Longrightarrow> Conj xset \\<noteq> Act \\<alpha> x\n\ngoal (3 subgoals):\n 1. Formula.Not x \\<noteq> Pred \\<phi>\n 2. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 3. Pred \\<phi> \\<noteq> Act \\<alpha> x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. Formula.Not x \\<noteq> Pred \\<phi>\n 2. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 3. Pred \\<phi> \\<noteq> Act \\<alpha> x", "show \"Not x \\<noteq> Pred \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.Not x \\<noteq> Pred \\<phi>", "by (metis Not.rep_eq Pred.rep_eq Tree\\<^sub>\\<alpha>_free(4))"], ["proof (state)\nthis:\n  Formula.Not x \\<noteq> Pred \\<phi>\n\ngoal (2 subgoals):\n 1. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 2. Pred \\<phi> \\<noteq> Act \\<alpha> x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. Formula.Not x1 \\<noteq> Act \\<alpha> x2\n 2. Pred \\<phi> \\<noteq> Act \\<alpha> x", "show \"Not x1 \\<noteq> Act \\<alpha> x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.Not x1 \\<noteq> Act \\<alpha> x2", "by (metis Not.rep_eq Act.rep_eq Tree\\<^sub>\\<alpha>_free(5))"], ["proof (state)\nthis:\n  Formula.Not x1 \\<noteq> Act \\<alpha> x2\n\ngoal (1 subgoal):\n 1. Pred \\<phi> \\<noteq> Act \\<alpha> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Pred \\<phi> \\<noteq> Act \\<alpha> x", "show \"Pred \\<phi> \\<noteq> Act \\<alpha> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pred \\<phi> \\<noteq> Act \\<alpha> x", "by (metis Pred.rep_eq Act.rep_eq Tree\\<^sub>\\<alpha>_free(6))"], ["proof (state)\nthis:\n  Pred \\<phi> \\<noteq> Act \\<alpha> x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Induction over infinitary formulas\\<close>"], ["", "lemma formula_induct [case_names Conj Not Pred Act, induct type: formula]:\n  fixes x\n  assumes \"\\<And>xset. finite (supp xset) \\<Longrightarrow> (\\<And>x. x \\<in> set_bset xset \\<Longrightarrow> P x) \\<Longrightarrow> P (Conj xset)\"\n    and \"\\<And>formula. P formula \\<Longrightarrow> P (Not formula)\"\n    and \"\\<And>pred. P (Pred pred)\"\n    and \"\\<And>act formula. P formula \\<Longrightarrow> P (Act act formula)\"\n  shows \"P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x", "proof (induction x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {t\\<^sub>\\<alpha>.\n                hereditarily_fs t\\<^sub>\\<alpha>} \\<Longrightarrow>\n       P (Abs_formula y)", "fix t\\<^sub>\\<alpha> :: \"('a,'b,'c) Tree\\<^sub>\\<alpha>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {t\\<^sub>\\<alpha>.\n                hereditarily_fs t\\<^sub>\\<alpha>} \\<Longrightarrow>\n       P (Abs_formula y)", "assume \"t\\<^sub>\\<alpha> \\<in> {t\\<^sub>\\<alpha>. hereditarily_fs t\\<^sub>\\<alpha>}\""], ["proof (state)\nthis:\n  t\\<^sub>\\<alpha>\n  \\<in> {t\\<^sub>\\<alpha>. hereditarily_fs t\\<^sub>\\<alpha>}\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {t\\<^sub>\\<alpha>.\n                hereditarily_fs t\\<^sub>\\<alpha>} \\<Longrightarrow>\n       P (Abs_formula y)", "then"], ["proof (chain)\npicking this:\n  t\\<^sub>\\<alpha>\n  \\<in> {t\\<^sub>\\<alpha>. hereditarily_fs t\\<^sub>\\<alpha>}", "have \"hereditarily_fs t\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  t\\<^sub>\\<alpha>\n  \\<in> {t\\<^sub>\\<alpha>. hereditarily_fs t\\<^sub>\\<alpha>}\n\ngoal (1 subgoal):\n 1. hereditarily_fs t\\<^sub>\\<alpha>", "by simp"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {t\\<^sub>\\<alpha>.\n                hereditarily_fs t\\<^sub>\\<alpha>} \\<Longrightarrow>\n       P (Abs_formula y)", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>", "show \"P (Abs_formula t\\<^sub>\\<alpha>)\""], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. P (Abs_formula t\\<^sub>\\<alpha>)", "proof (induction t\\<^sub>\\<alpha>)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset\\<^sub>\\<alpha>.\n       \\<lbrakk>finite (supp tset\\<^sub>\\<alpha>);\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs t\\<^sub>\\<alpha>;\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n 2. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 3. \\<And>\\<phi>. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>))\n 4. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "case (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  finite (supp tset\\<^sub>\\<alpha>)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  P (Abs_formula ?t\\<^sub>\\<alpha>)\n\ngoal (4 subgoals):\n 1. \\<And>tset\\<^sub>\\<alpha>.\n       \\<lbrakk>finite (supp tset\\<^sub>\\<alpha>);\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs t\\<^sub>\\<alpha>;\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n 2. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 3. \\<And>\\<phi>. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>))\n 4. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "let ?tset = \"map_bset Abs_formula tset\\<^sub>\\<alpha>\""], ["proof (state)\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "have \"\\<And>t\\<^sub>\\<alpha>'. t\\<^sub>\\<alpha>' \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow> t\\<^sub>\\<alpha>' = (Rep_formula \\<circ> Abs_formula) t\\<^sub>\\<alpha>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha>'.\n       t\\<^sub>\\<alpha>'\n       \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n       t\\<^sub>\\<alpha>' =\n       (Rep_formula \\<circ> Abs_formula) t\\<^sub>\\<alpha>'", "by (simp add: Conj\\<^sub>\\<alpha>.hyps)"], ["proof (state)\nthis:\n  ?t\\<^sub>\\<alpha>' \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  ?t\\<^sub>\\<alpha>' = (Rep_formula \\<circ> Abs_formula) ?t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  ?t\\<^sub>\\<alpha>' \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  ?t\\<^sub>\\<alpha>' = (Rep_formula \\<circ> Abs_formula) ?t\\<^sub>\\<alpha>'", "have \"tset\\<^sub>\\<alpha> = map_bset (Rep_formula \\<circ> Abs_formula) tset\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  ?t\\<^sub>\\<alpha>' \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  ?t\\<^sub>\\<alpha>' = (Rep_formula \\<circ> Abs_formula) ?t\\<^sub>\\<alpha>'\n\ngoal (1 subgoal):\n 1. tset\\<^sub>\\<alpha> =\n    map_bset (Rep_formula \\<circ> Abs_formula) tset\\<^sub>\\<alpha>", "by (metis bset.map_cong0 bset.map_id id_apply)"], ["proof (state)\nthis:\n  tset\\<^sub>\\<alpha> =\n  map_bset (Rep_formula \\<circ> Abs_formula) tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  tset\\<^sub>\\<alpha> =\n  map_bset (Rep_formula \\<circ> Abs_formula) tset\\<^sub>\\<alpha>", "have *: \"tset\\<^sub>\\<alpha> = map_bset Rep_formula ?tset\""], ["proof (prove)\nusing this:\n  tset\\<^sub>\\<alpha> =\n  map_bset (Rep_formula \\<circ> Abs_formula) tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. tset\\<^sub>\\<alpha> =\n    map_bset Rep_formula (map_bset Abs_formula tset\\<^sub>\\<alpha>)", "by (metis bset.map_comp)"], ["proof (state)\nthis:\n  tset\\<^sub>\\<alpha> =\n  map_bset Rep_formula (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  tset\\<^sub>\\<alpha> =\n  map_bset Rep_formula (map_bset Abs_formula tset\\<^sub>\\<alpha>)", "have \"Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = Conj ?tset\""], ["proof (prove)\nusing this:\n  tset\\<^sub>\\<alpha> =\n  map_bset Rep_formula (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    Conj (map_bset Abs_formula tset\\<^sub>\\<alpha>)", "by (metis Conj_def)"], ["proof (state)\nthis:\n  Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n  Conj (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "moreover"], ["proof (state)\nthis:\n  Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n  Conj (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "from \"*\""], ["proof (chain)\npicking this:\n  tset\\<^sub>\\<alpha> =\n  map_bset Rep_formula (map_bset Abs_formula tset\\<^sub>\\<alpha>)", "have \"finite (supp ?tset)\""], ["proof (prove)\nusing this:\n  tset\\<^sub>\\<alpha> =\n  map_bset Rep_formula (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset Abs_formula tset\\<^sub>\\<alpha>))", "using Conj\\<^sub>\\<alpha>.hyps(1)"], ["proof (prove)\nusing this:\n  tset\\<^sub>\\<alpha> =\n  map_bset Rep_formula (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n  finite (supp tset\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset Abs_formula tset\\<^sub>\\<alpha>))", "by (metis supp_map_bset_Rep_formula)"], ["proof (state)\nthis:\n  finite (supp (map_bset Abs_formula tset\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "moreover"], ["proof (state)\nthis:\n  finite (supp (map_bset Abs_formula tset\\<^sub>\\<alpha>))\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "have \"(\\<And>t. t \\<in> set_bset ?tset \\<Longrightarrow> P t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set_bset\n                (map_bset Abs_formula tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n       P t", "using Conj\\<^sub>\\<alpha>.IH"], ["proof (prove)\nusing this:\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  P (Abs_formula ?t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> set_bset\n                (map_bset Abs_formula tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n       P t", "by (metis imageE map_bset.rep_eq)"], ["proof (state)\nthis:\n  ?t \\<in> set_bset\n            (map_bset Abs_formula tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  P ?t\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "ultimately"], ["proof (chain)\npicking this:\n  Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n  Conj (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n  finite (supp (map_bset Abs_formula tset\\<^sub>\\<alpha>))\n  ?t \\<in> set_bset\n            (map_bset Abs_formula tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  P ?t", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n  Conj (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n  finite (supp (map_bset Abs_formula tset\\<^sub>\\<alpha>))\n  ?t \\<in> set_bset\n            (map_bset Abs_formula tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  P ?t\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "using assms(1)"], ["proof (prove)\nusing this:\n  Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n  Conj (map_bset Abs_formula tset\\<^sub>\\<alpha>)\n  finite (supp (map_bset Abs_formula tset\\<^sub>\\<alpha>))\n  ?t \\<in> set_bset\n            (map_bset Abs_formula tset\\<^sub>\\<alpha>) \\<Longrightarrow>\n  P ?t\n  \\<lbrakk>finite (supp ?xset);\n   \\<And>x. x \\<in> set_bset ?xset \\<Longrightarrow> P x\\<rbrakk>\n  \\<Longrightarrow> P (Conj ?xset)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "by metis"], ["proof (state)\nthis:\n  P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (Abs_formula (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 2. \\<And>\\<phi>. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 2. \\<And>\\<phi>. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "case Not\\<^sub>\\<alpha>"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  P (Abs_formula t\\<^sub>\\<alpha>_)\n\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 2. \\<And>\\<phi>. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  P (Abs_formula t\\<^sub>\\<alpha>_)", "show ?case"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  P (Abs_formula t\\<^sub>\\<alpha>_)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>_))", "using assms(2)"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  P (Abs_formula t\\<^sub>\\<alpha>_)\n  P ?formula \\<Longrightarrow> P (Formula.Not ?formula)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>_))", "by (metis Formula.Abs_formula_inverse Not.rep_eq Rep_formula_inverse)"], ["proof (state)\nthis:\n  P (Abs_formula (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>_))\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "case Pred\\<^sub>\\<alpha>"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>_))", "using assms(3)"], ["proof (prove)\nusing this:\n  P (Pred ?pred)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>_))", "by (metis Pred.abs_eq)"], ["proof (state)\nthis:\n  P (Abs_formula (Pred\\<^sub>\\<alpha> \\<phi>_))\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "case Act\\<^sub>\\<alpha>"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  P (Abs_formula t\\<^sub>\\<alpha>_)\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        P (Abs_formula t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> P (Abs_formula\n                             (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  P (Abs_formula t\\<^sub>\\<alpha>_)", "show ?case"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  P (Abs_formula t\\<^sub>\\<alpha>_)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Act\\<^sub>\\<alpha> \\<alpha>_ t\\<^sub>\\<alpha>_))", "using assms(4)"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>_\n  P (Abs_formula t\\<^sub>\\<alpha>_)\n  P ?formula \\<Longrightarrow> P (Act ?act ?formula)\n\ngoal (1 subgoal):\n 1. P (Abs_formula (Act\\<^sub>\\<alpha> \\<alpha>_ t\\<^sub>\\<alpha>_))", "by (metis Formula.Abs_formula_inverse Act.rep_eq Rep_formula_inverse)"], ["proof (state)\nthis:\n  P (Abs_formula (Act\\<^sub>\\<alpha> \\<alpha>_ t\\<^sub>\\<alpha>_))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (Abs_formula t\\<^sub>\\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Strong induction over infinitary formulas\\<close>"], ["", "lemma formula_strong_induct_aux:\n  fixes x\n  assumes \"\\<And>xset c. finite (supp xset) \\<Longrightarrow> (\\<And>x. x \\<in> set_bset xset \\<Longrightarrow> (\\<And>c. P c x)) \\<Longrightarrow> P c (Conj xset)\"\n    and \"\\<And>formula c. (\\<And>c. P c formula) \\<Longrightarrow> P c (Not formula)\"\n    and \"\\<And>pred c. P c (Pred pred)\"\n    and \"\\<And>act formula c. bn act \\<sharp>* c \\<Longrightarrow> (\\<And>c. P c formula) \\<Longrightarrow> P c (Act act formula)\"\n  shows \"\\<And>(c :: 'd::fs) p. P c (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c p. P c (p \\<bullet> x)", "proof (induction x)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xset c p.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x c p.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P c (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> P c (p \\<bullet> Conj xset)\n 2. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 3. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 4. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "case (Conj xset)"], ["proof (state)\nthis:\n  finite (supp xset)\n  ?x \\<in> set_bset xset \\<Longrightarrow> P ?c (?p \\<bullet> ?x)\n\ngoal (4 subgoals):\n 1. \\<And>xset c p.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x c p.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P c (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> P c (p \\<bullet> Conj xset)\n 2. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 3. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 4. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "moreover"], ["proof (state)\nthis:\n  finite (supp xset)\n  ?x \\<in> set_bset xset \\<Longrightarrow> P ?c (?p \\<bullet> ?x)\n\ngoal (4 subgoals):\n 1. \\<And>xset c p.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x c p.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P c (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> P c (p \\<bullet> Conj xset)\n 2. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 3. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 4. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "then"], ["proof (chain)\npicking this:\n  finite (supp xset)\n  ?x \\<in> set_bset xset \\<Longrightarrow> P ?c (?p \\<bullet> ?x)", "have \"finite (supp (p \\<bullet> xset))\""], ["proof (prove)\nusing this:\n  finite (supp xset)\n  ?x \\<in> set_bset xset \\<Longrightarrow> P ?c (?p \\<bullet> ?x)\n\ngoal (1 subgoal):\n 1. finite (supp (p \\<bullet> xset))", "by (metis permute_finite supp_eqvt)"], ["proof (state)\nthis:\n  finite (supp (p \\<bullet> xset))\n\ngoal (4 subgoals):\n 1. \\<And>xset c p.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x c p.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P c (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> P c (p \\<bullet> Conj xset)\n 2. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 3. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 4. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "moreover"], ["proof (state)\nthis:\n  finite (supp (p \\<bullet> xset))\n\ngoal (4 subgoals):\n 1. \\<And>xset c p.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x c p.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P c (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> P c (p \\<bullet> Conj xset)\n 2. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 3. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 4. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "have \"(\\<And>x c. x \\<in> set_bset (p \\<bullet> xset) \\<Longrightarrow> P c x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x c. x \\<in> set_bset (p \\<bullet> xset) \\<Longrightarrow> P c x", "using Conj.IH"], ["proof (prove)\nusing this:\n  ?x \\<in> set_bset xset \\<Longrightarrow> P ?c (?p \\<bullet> ?x)\n\ngoal (1 subgoal):\n 1. \\<And>x c. x \\<in> set_bset (p \\<bullet> xset) \\<Longrightarrow> P c x", "by (metis (full_types) eqvt_bound mem_permute_iff set_bset_eqvt)"], ["proof (state)\nthis:\n  ?x \\<in> set_bset (p \\<bullet> xset) \\<Longrightarrow> P ?c ?x\n\ngoal (4 subgoals):\n 1. \\<And>xset c p.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x c p.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P c (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> P c (p \\<bullet> Conj xset)\n 2. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 3. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 4. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "ultimately"], ["proof (chain)\npicking this:\n  finite (supp xset)\n  ?x \\<in> set_bset xset \\<Longrightarrow> P ?c (?p \\<bullet> ?x)\n  finite (supp (p \\<bullet> xset))\n  ?x \\<in> set_bset (p \\<bullet> xset) \\<Longrightarrow> P ?c ?x", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp xset)\n  ?x \\<in> set_bset xset \\<Longrightarrow> P ?c (?p \\<bullet> ?x)\n  finite (supp (p \\<bullet> xset))\n  ?x \\<in> set_bset (p \\<bullet> xset) \\<Longrightarrow> P ?c ?x\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Conj xset)", "using assms(1)"], ["proof (prove)\nusing this:\n  finite (supp xset)\n  ?x \\<in> set_bset xset \\<Longrightarrow> P ?c (?p \\<bullet> ?x)\n  finite (supp (p \\<bullet> xset))\n  ?x \\<in> set_bset (p \\<bullet> xset) \\<Longrightarrow> P ?c ?x\n  \\<lbrakk>finite (supp ?xset);\n   \\<And>x c. x \\<in> set_bset ?xset \\<Longrightarrow> P c x\\<rbrakk>\n  \\<Longrightarrow> P ?c (Conj ?xset)\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Conj xset)", "by simp"], ["proof (state)\nthis:\n  P c (p \\<bullet> Conj xset)\n\ngoal (3 subgoals):\n 1. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 2. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 3. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 2. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 3. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "case Not"], ["proof (state)\nthis:\n  P ?c (?p \\<bullet> x_)\n\ngoal (3 subgoals):\n 1. \\<And>x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Formula.Not x)\n 2. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 3. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "then"], ["proof (chain)\npicking this:\n  P ?c (?p \\<bullet> x_)", "show ?case"], ["proof (prove)\nusing this:\n  P ?c (?p \\<bullet> x_)\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Formula.Not x_)", "using assms(2)"], ["proof (prove)\nusing this:\n  P ?c (?p \\<bullet> x_)\n  (\\<And>c. P c ?formula) \\<Longrightarrow> P ?c (Formula.Not ?formula)\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Formula.Not x_)", "by simp"], ["proof (state)\nthis:\n  P c (p \\<bullet> Formula.Not x_)\n\ngoal (2 subgoals):\n 1. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 2. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 2. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "case Pred"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>pred c p. P c (p \\<bullet> Pred pred)\n 2. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Pred pred_)", "using assms(3)"], ["proof (prove)\nusing this:\n  P ?c (Pred ?pred)\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Pred pred_)", "by simp"], ["proof (state)\nthis:\n  P c (p \\<bullet> Pred pred_)\n\ngoal (1 subgoal):\n 1. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "case (Act \\<alpha> x)"], ["proof (state)\nthis:\n  P ?c (?p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. \\<And>act x c p.\n       (\\<And>c p. P c (p \\<bullet> x)) \\<Longrightarrow>\n       P c (p \\<bullet> Act act x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "proof -\n    \\<comment> \\<open>rename~@{term \"bn (p \\<bullet> \\<alpha>)\"} to avoid~@{term c}, without touching~@{term \"Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\"}\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "obtain q where 1: \"(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c\" and 2: \"supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule at_set_avoiding2[of \"bn (p \\<bullet> \\<alpha>)\" c \"Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\", THEN exE])"], ["proof (state)\ngoal (5 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (bn (p \\<bullet> \\<alpha>))\n 2. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp c)\n 3. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)))\n 4. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n   (p \\<bullet> x)\n 5. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q \\<bullet> bn\n    (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n                    supp\n                     (Act (p \\<bullet> \\<alpha>)\n                       (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c \\<and>\n        supp\n         (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (bn (p \\<bullet> \\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (bn (p \\<bullet> \\<alpha>))", "by (fact bn_finite)"], ["proof (state)\nthis:\n  finite (bn (p \\<bullet> \\<alpha>))\n\ngoal (4 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp c)\n 2. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)))\n 3. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n   (p \\<bullet> x)\n 4. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q \\<bullet> bn\n    (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n                    supp\n                     (Act (p \\<bullet> \\<alpha>)\n                       (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c \\<and>\n        supp\n         (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp c)\n 2. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)))\n 3. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n   (p \\<bullet> x)\n 4. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q \\<bullet> bn\n    (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n                    supp\n                     (Act (p \\<bullet> \\<alpha>)\n                       (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c \\<and>\n        supp\n         (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (supp c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp c)", "by (fact finite_supp)"], ["proof (state)\nthis:\n  finite (supp c)\n\ngoal (3 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)))\n 2. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n   (p \\<bullet> x)\n 3. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q \\<bullet> bn\n    (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n                    supp\n                     (Act (p \\<bullet> \\<alpha>)\n                       (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c \\<and>\n        supp\n         (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)))\n 2. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n   (p \\<bullet> x)\n 3. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q \\<bullet> bn\n    (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n                    supp\n                     (Act (p \\<bullet> \\<alpha>)\n                       (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c \\<and>\n        supp\n         (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)))", "by (simp add: finite_supp)"], ["proof (state)\nthis:\n  finite (supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)))\n\ngoal (2 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n   (p \\<bullet> x)\n 2. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q \\<bullet> bn\n    (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n                    supp\n                     (Act (p \\<bullet> \\<alpha>)\n                       (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c \\<and>\n        supp\n         (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>q.\n        \\<lbrakk>(q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n         supp\n          (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n   (p \\<bullet> x)\n 2. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q \\<bullet> bn\n    (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n                    supp\n                     (Act (p \\<bullet> \\<alpha>)\n                       (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c \\<and>\n        supp\n         (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n   (p \\<bullet> x)", "by (simp add: fresh_def fresh_star_def)"], ["proof (state)\nthis:\n  bn (p \\<bullet> \\<alpha>) \\<sharp>* Act (p \\<bullet> \\<alpha>)\n (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>(q \\<bullet> bn\n    (p \\<bullet> \\<alpha>)) \\<sharp>* c;\n                    supp\n                     (Act (p \\<bullet> \\<alpha>)\n                       (p \\<bullet> x)) \\<sharp>* q\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c \\<and>\n        supp\n         (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed metis"], ["proof (state)\nthis:\n  (q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c\n  supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "from 1"], ["proof (chain)\npicking this:\n  (q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c", "have \"bn (q \\<bullet> p \\<bullet> \\<alpha>) \\<sharp>* c\""], ["proof (prove)\nusing this:\n  (q \\<bullet> bn (p \\<bullet> \\<alpha>)) \\<sharp>* c\n\ngoal (1 subgoal):\n 1. bn (q \\<bullet> p \\<bullet> \\<alpha>) \\<sharp>* c", "by (simp add: bn_eqvt)"], ["proof (state)\nthis:\n  bn (q \\<bullet> p \\<bullet> \\<alpha>) \\<sharp>* c\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "moreover"], ["proof (state)\nthis:\n  bn (q \\<bullet> p \\<bullet> \\<alpha>) \\<sharp>* c\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "from Act.IH"], ["proof (chain)\npicking this:\n  P ?c (?p \\<bullet> x)", "have \"\\<And>c. P c (q \\<bullet> p \\<bullet> x)\""], ["proof (prove)\nusing this:\n  P ?c (?p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. \\<And>c. P c (q \\<bullet> p \\<bullet> x)", "by (metis permute_plus)"], ["proof (state)\nthis:\n  P ?c (q \\<bullet> p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "ultimately"], ["proof (chain)\npicking this:\n  bn (q \\<bullet> p \\<bullet> \\<alpha>) \\<sharp>* c\n  P ?c (q \\<bullet> p \\<bullet> x)", "have \"P c (Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x))\""], ["proof (prove)\nusing this:\n  bn (q \\<bullet> p \\<bullet> \\<alpha>) \\<sharp>* c\n  P ?c (q \\<bullet> p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. P c (Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x))", "using assms(4)"], ["proof (prove)\nusing this:\n  bn (q \\<bullet> p \\<bullet> \\<alpha>) \\<sharp>* c\n  P ?c (q \\<bullet> p \\<bullet> x)\n  \\<lbrakk>bn ?act \\<sharp>* ?c; \\<And>c. P c ?formula\\<rbrakk>\n  \\<Longrightarrow> P ?c (Act ?act ?formula)\n\ngoal (1 subgoal):\n 1. P c (Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x))", "by simp"], ["proof (state)\nthis:\n  P c (Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x))\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "moreover"], ["proof (state)\nthis:\n  P c (Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x))\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "from 2"], ["proof (chain)\npicking this:\n  supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q", "have \"Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x) = Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\""], ["proof (prove)\nusing this:\n  supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\n\ngoal (1 subgoal):\n 1. Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x) =\n    Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "using supp_perm_eq"], ["proof (prove)\nusing this:\n  supp (Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)) \\<sharp>* q\n  supp ?x \\<sharp>* ?p \\<Longrightarrow> ?p \\<bullet> ?x = ?x\n\ngoal (1 subgoal):\n 1. Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x) =\n    Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "by fastforce"], ["proof (state)\nthis:\n  Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x) =\n  Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "ultimately"], ["proof (chain)\npicking this:\n  P c (Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x))\n  Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x) =\n  Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "show ?thesis"], ["proof (prove)\nusing this:\n  P c (Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x))\n  Act (q \\<bullet> p \\<bullet> \\<alpha>) (q \\<bullet> p \\<bullet> x) =\n  Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. P c (p \\<bullet> Act \\<alpha> x)", "by simp"], ["proof (state)\nthis:\n  P c (p \\<bullet> Act \\<alpha> x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P c (p \\<bullet> Act \\<alpha> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas formula_strong_induct = formula_strong_induct_aux[where p=0, simplified]"], ["", "declare formula_strong_induct [case_names Conj Not Pred Act]"], ["", "end"]]}