{"file_name": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS/Equivalence_Implies_Bisimilarity.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS", "problem_names": ["lemma is_distinguishing_formula_eqvt (*[eqvt]*):\n    assumes \"x distinguishes P from Q\" shows \"(p \\<bullet> x) distinguishes (p \\<bullet> P) from (p \\<bullet> Q)\"", "lemma equivalent_iff_not_distinguished: \"(P =\\<cdot> Q) \\<longleftrightarrow> \\<not>(\\<exists>x. x distinguishes P from Q)\"", "lemma distinguished_bounded_support:\n    assumes \"x distinguishes P from Q\"\n    obtains y where \"supp y \\<subseteq> supp P\" and \"y distinguishes P from Q\"", "lemma equivalence_is_bisimulation: \"is_bisimulation logically_equivalent\"", "theorem equivalence_implies_bisimilarity: assumes \"P =\\<cdot> Q\" shows \"P \\<sim>\\<cdot> Q\""], "translations": [["", "lemma is_distinguishing_formula_eqvt (*[eqvt]*):\n    assumes \"x distinguishes P from Q\" shows \"(p \\<bullet> x) distinguishes (p \\<bullet> P) from (p \\<bullet> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> x) distinguishes (p \\<bullet> P) from (p \\<bullet> Q)", "using assms"], ["proof (prove)\nusing this:\n  x distinguishes P from Q\n\ngoal (1 subgoal):\n 1. (p \\<bullet> x) distinguishes (p \\<bullet> P) from (p \\<bullet> Q)", "unfolding is_distinguishing_formula_def"], ["proof (prove)\nusing this:\n  P \\<Turnstile> x \\<and> \\<not> Q \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<Turnstile> p \\<bullet> x \\<and>\n    \\<not> p \\<bullet> Q \\<Turnstile> p \\<bullet> x", "by (metis permute_minus_cancel(2) valid_eqvt)"], ["", "lemma equivalent_iff_not_distinguished: \"(P =\\<cdot> Q) \\<longleftrightarrow> \\<not>(\\<exists>x. x distinguishes P from Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P =\\<cdot> Q) = (\\<nexists>x. x distinguishes P from Q)", "by (metis (full_types) is_distinguishing_formula_def logically_equivalent_def valid_Not)"], ["", "text \\<open>There exists a distinguishing formula for~@{term P} and~@{term Q} whose support is contained\n  in~@{term \"supp P\"}.\\<close>"], ["", "lemma distinguished_bounded_support:\n    assumes \"x distinguishes P from Q\"\n    obtains y where \"supp y \\<subseteq> supp P\" and \"y distinguishes P from Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?B = \"{p \\<bullet> x|p. supp P \\<sharp>* p}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"supp P supports ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp P supports {p \\<bullet> x |p. supp P \\<sharp>* p}", "unfolding supports_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       a \\<notin> supp P \\<and> b \\<notin> supp P \\<longrightarrow>\n       (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n       supp P \\<sharp>* p} =\n       {p \\<bullet> x |p. supp P \\<sharp>* p}", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp P; b \\<notin> supp P\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp P \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp P \\<sharp>* p}", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp P; b \\<notin> supp P\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp P \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp P \\<sharp>* p}", "assume a: \"a \\<notin> supp P\" and b: \"b \\<notin> supp P\""], ["proof (state)\nthis:\n  a \\<notin> supp P\n  b \\<notin> supp P\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp P; b \\<notin> supp P\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp P \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp P \\<sharp>* p}", "have \"(a \\<rightleftharpoons> b) \\<bullet> ?B \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n    supp P \\<sharp>* p}\n    \\<subseteq> {p \\<bullet> x |p. supp P \\<sharp>* p}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "assume \"x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> ?B\""], ["proof (state)\nthis:\n  x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n           supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "then"], ["proof (chain)\npicking this:\n  x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n           supp P \\<sharp>* p}", "obtain p where 1: \"x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x\" and 2: \"supp P \\<sharp>* p\""], ["proof (prove)\nusing this:\n  x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n           supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x;\n         supp P \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: permute_set_def)"], ["proof (state)\nthis:\n  x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x\n  supp P \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "let ?q = \"(a \\<rightleftharpoons> b) + p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "from 1"], ["proof (chain)\npicking this:\n  x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x", "have \"x' = ?q \\<bullet> x\""], ["proof (prove)\nusing this:\n  x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x\n\ngoal (1 subgoal):\n 1. x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "moreover"], ["proof (state)\nthis:\n  x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "from a and b and 2"], ["proof (chain)\npicking this:\n  a \\<notin> supp P\n  b \\<notin> supp P\n  supp P \\<sharp>* p", "have \"supp P \\<sharp>* ?q\""], ["proof (prove)\nusing this:\n  a \\<notin> supp P\n  b \\<notin> supp P\n  supp P \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)", "by (metis fresh_perm fresh_star_def fresh_star_plus swap_atom_simps(3))"], ["proof (state)\nthis:\n  supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "ultimately"], ["proof (chain)\npicking this:\n  x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x\n  supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)", "show \"x' \\<in> ?B\""], ["proof (prove)\nusing this:\n  x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x\n  supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n\ngoal (1 subgoal):\n 1. x' \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "by blast"], ["proof (state)\nthis:\n  x' \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp P \\<sharp>* p}\n  \\<subseteq> {p \\<bullet> x |p. supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp P; b \\<notin> supp P\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp P \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp P \\<sharp>* p}", "moreover"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp P \\<sharp>* p}\n  \\<subseteq> {p \\<bullet> x |p. supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp P; b \\<notin> supp P\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp P \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp P \\<sharp>* p}", "have \"?B \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p \\<bullet> x |p. supp P \\<sharp>* p}\n    \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "assume \"x' \\<in> ?B\""], ["proof (state)\nthis:\n  x' \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "then"], ["proof (chain)\npicking this:\n  x' \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}", "obtain p where 1: \"x' = p \\<bullet> x\" and 2: \"supp P \\<sharp>* p\""], ["proof (prove)\nusing this:\n  x' \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>x' = p \\<bullet> x; supp P \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' = p \\<bullet> x\n  supp P \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "let ?q = \"(a \\<rightleftharpoons> b) + p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "from 1"], ["proof (chain)\npicking this:\n  x' = p \\<bullet> x", "have \"x' = (a \\<rightleftharpoons> b) \\<bullet> ?q \\<bullet> x\""], ["proof (prove)\nusing this:\n  x' = p \\<bullet> x\n\ngoal (1 subgoal):\n 1. x' =\n    (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n    p) \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "moreover"], ["proof (state)\nthis:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "from a and b and 2"], ["proof (chain)\npicking this:\n  a \\<notin> supp P\n  b \\<notin> supp P\n  supp P \\<sharp>* p", "have \"supp P \\<sharp>* ?q\""], ["proof (prove)\nusing this:\n  a \\<notin> supp P\n  b \\<notin> supp P\n  supp P \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)", "by (metis fresh_perm fresh_star_def fresh_star_plus swap_atom_simps(3))"], ["proof (state)\nthis:\n  supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p. supp P \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp P \\<sharp>* p}", "ultimately"], ["proof (chain)\npicking this:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n  supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)", "show \"x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> ?B\""], ["proof (prove)\nusing this:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n  supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n\ngoal (1 subgoal):\n 1. x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n             supp P \\<sharp>* p}", "using mem_permute_iff"], ["proof (prove)\nusing this:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n  supp P \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n  (?p \\<bullet> ?x \\<in> ?p \\<bullet> ?X) = (?x \\<in> ?X)\n\ngoal (1 subgoal):\n 1. x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n             supp P \\<sharp>* p}", "by blast"], ["proof (state)\nthis:\n  x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n           supp P \\<sharp>* p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {p \\<bullet> x |p. supp P \\<sharp>* p}\n  \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n              supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp P; b \\<notin> supp P\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp P \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp P \\<sharp>* p}", "ultimately"], ["proof (chain)\npicking this:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp P \\<sharp>* p}\n  \\<subseteq> {p \\<bullet> x |p. supp P \\<sharp>* p}\n  {p \\<bullet> x |p. supp P \\<sharp>* p}\n  \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n              supp P \\<sharp>* p}", "show \"(a \\<rightleftharpoons> b) \\<bullet> ?B = ?B\""], ["proof (prove)\nusing this:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp P \\<sharp>* p}\n  \\<subseteq> {p \\<bullet> x |p. supp P \\<sharp>* p}\n  {p \\<bullet> x |p. supp P \\<sharp>* p}\n  \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n              supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n    supp P \\<sharp>* p} =\n    {p \\<bullet> x |p. supp P \\<sharp>* p}", ".."], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp P \\<sharp>* p} =\n  {p \\<bullet> x |p. supp P \\<sharp>* p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  supp P supports {p \\<bullet> x |p. supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  supp P supports {p \\<bullet> x |p. supp P \\<sharp>* p}", "have supp_B_subset_supp_P: \"supp ?B \\<subseteq> supp P\""], ["proof (prove)\nusing this:\n  supp P supports {p \\<bullet> x |p. supp P \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. supp {p \\<bullet> x |p. supp P \\<sharp>* p} \\<subseteq> supp P", "by (metis (erased, lifting) finite_supp supp_is_subset)"], ["proof (state)\nthis:\n  supp {p \\<bullet> x |p. supp P \\<sharp>* p} \\<subseteq> supp P\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  supp {p \\<bullet> x |p. supp P \\<sharp>* p} \\<subseteq> supp P", "have finite_supp_B: \"finite (supp ?B)\""], ["proof (prove)\nusing this:\n  supp {p \\<bullet> x |p. supp P \\<sharp>* p} \\<subseteq> supp P\n\ngoal (1 subgoal):\n 1. finite (supp {p \\<bullet> x |p. supp P \\<sharp>* p})", "using finite_supp rev_finite_subset"], ["proof (prove)\nusing this:\n  supp {p \\<bullet> x |p. supp P \\<sharp>* p} \\<subseteq> supp P\n  finite (supp ?x)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (supp {p \\<bullet> x |p. supp P \\<sharp>* p})", "by blast"], ["proof (state)\nthis:\n  finite (supp {p \\<bullet> x |p. supp P \\<sharp>* p})\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?B \\<subseteq> (\\<lambda>p. p \\<bullet> x) ` UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p \\<bullet> x |p. supp P \\<sharp>* p}\n    \\<subseteq> range (\\<lambda>p. p \\<bullet> x)", "by auto"], ["proof (state)\nthis:\n  {p \\<bullet> x |p. supp P \\<sharp>* p}\n  \\<subseteq> range (\\<lambda>p. p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  {p \\<bullet> x |p. supp P \\<sharp>* p}\n  \\<subseteq> range (\\<lambda>p. p \\<bullet> x)", "have \"|?B| \\<le>o |UNIV :: perm set|\""], ["proof (prove)\nusing this:\n  {p \\<bullet> x |p. supp P \\<sharp>* p}\n  \\<subseteq> range (\\<lambda>p. p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. |{p \\<bullet> x |p. supp P \\<sharp>* p}| \\<le>o |UNIV|", "by (rule surj_imp_ordLeq)"], ["proof (state)\nthis:\n  |{p \\<bullet> x |p. supp P \\<sharp>* p}| \\<le>o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  |{p \\<bullet> x |p. supp P \\<sharp>* p}| \\<le>o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"|UNIV :: perm set| <o |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "by (metis card_idx_perm)"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"|UNIV :: 'idx set| \\<le>o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o natLeq +c |UNIV|", "by (metis Cnotzero_UNIV ordLeq_csum2)"], ["proof (state)\nthis:\n  |UNIV| \\<le>o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  |{p \\<bullet> x |p. supp P \\<sharp>* p}| <o natLeq +c |UNIV|", "have card_B: \"|?B| <o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\nusing this:\n  |{p \\<bullet> x |p. supp P \\<sharp>* p}| <o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. |{p \\<bullet> x |p. supp P \\<sharp>* p}| <o natLeq +c |UNIV|", "."], ["proof (state)\nthis:\n  |{p \\<bullet> x |p. supp P \\<sharp>* p}| <o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?y = \"Conj (Abs_bset ?B) :: ('idx, 'pred, 'act) formula\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from finite_supp_B and card_B and supp_B_subset_supp_P"], ["proof (chain)\npicking this:\n  finite (supp {p \\<bullet> x |p. supp P \\<sharp>* p})\n  |{p \\<bullet> x |p. supp P \\<sharp>* p}| <o natLeq +c |UNIV|\n  supp {p \\<bullet> x |p. supp P \\<sharp>* p} \\<subseteq> supp P", "have \"supp ?y \\<subseteq> supp P\""], ["proof (prove)\nusing this:\n  finite (supp {p \\<bullet> x |p. supp P \\<sharp>* p})\n  |{p \\<bullet> x |p. supp P \\<sharp>* p}| <o natLeq +c |UNIV|\n  supp {p \\<bullet> x |p. supp P \\<sharp>* p} \\<subseteq> supp P\n\ngoal (1 subgoal):\n 1. supp (Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}))\n    \\<subseteq> supp P", "by simp"], ["proof (state)\nthis:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}))\n  \\<subseteq> supp P\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}))\n  \\<subseteq> supp P\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?y distinguishes P from Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conj\n     (Abs_bset\n       {p \\<bullet> x |p. supp P \\<sharp>* p}) distinguishes P from Q", "unfolding is_distinguishing_formula_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile>\n    Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}) \\<and>\n    \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Turnstile> Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})\n 2. \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})", "from assms"], ["proof (chain)\npicking this:\n  x distinguishes P from Q", "show \"P \\<Turnstile> ?y\""], ["proof (prove)\nusing this:\n  x distinguishes P from Q\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})", "by (auto simp add: card_B finite_supp_B) (metis is_distinguishing_formula_def supp_perm_eq valid_eqvt)"], ["proof (state)\nthis:\n  P \\<Turnstile> Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})\n\ngoal (1 subgoal):\n 1. \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})", "from assms"], ["proof (chain)\npicking this:\n  x distinguishes P from Q", "show \"\\<not> Q \\<Turnstile> ?y\""], ["proof (prove)\nusing this:\n  x distinguishes P from Q\n\ngoal (1 subgoal):\n 1. \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})", "by (auto simp add: card_B finite_supp_B) (metis is_distinguishing_formula_def permute_zero fresh_star_zero)"], ["proof (state)\nthis:\n  \\<not> Q \\<Turnstile>\n         Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Conj\n   (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}) distinguishes P from Q\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>supp y \\<subseteq> supp P;\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}))\n  \\<subseteq> supp P\n  Conj\n   (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}) distinguishes P from Q", "show ?thesis"], ["proof (prove)\nusing this:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}))\n  \\<subseteq> supp P\n  Conj\n   (Abs_bset {p \\<bullet> x |p. supp P \\<sharp>* p}) distinguishes P from Q\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma equivalence_is_bisimulation: \"is_bisimulation logically_equivalent\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "have \"symp logically_equivalent\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (=\\<cdot>)", "by (metis logically_equivalent_def sympI)"], ["proof (state)\nthis:\n  symp (=\\<cdot>)\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "moreover"], ["proof (state)\nthis:\n  symp (=\\<cdot>)\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "{"], ["proof (state)\nthis:\n  symp (=\\<cdot>)\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "fix P Q \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "assume \"P =\\<cdot> Q\""], ["proof (state)\nthis:\n  P =\\<cdot> Q\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "then"], ["proof (chain)\npicking this:\n  P =\\<cdot> Q", "have \"P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  P =\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>", "by (metis logically_equivalent_def valid_Pred)"], ["proof (state)\nthis:\n  P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "}"], ["proof (state)\nthis:\n  ?P9 =\\<cdot> ?Q9 \\<Longrightarrow>\n  ?P9 \\<turnstile> ?\\<phi>9 \\<longrightarrow> ?Q9 \\<turnstile> ?\\<phi>9\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "moreover"], ["proof (state)\nthis:\n  ?P9 =\\<cdot> ?Q9 \\<Longrightarrow>\n  ?P9 \\<turnstile> ?\\<phi>9 \\<longrightarrow> ?Q9 \\<turnstile> ?\\<phi>9\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "{"], ["proof (state)\nthis:\n  ?P9 =\\<cdot> ?Q9 \\<Longrightarrow>\n  ?P9 \\<turnstile> ?\\<phi>9 \\<longrightarrow> ?Q9 \\<turnstile> ?\\<phi>9\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "fix P Q \\<alpha> P'"], ["proof (state)\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "assume \"P =\\<cdot> Q\" and \"bn \\<alpha> \\<sharp>* Q\" and \"P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (state)\nthis:\n  P =\\<cdot> Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "then"], ["proof (chain)\npicking this:\n  P =\\<cdot> Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "have \"\\<exists>Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> P' =\\<cdot> Q'\""], ["proof (prove)\nusing this:\n  P =\\<cdot> Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> P' =\\<cdot> Q'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "let ?Q' = \"{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "assume \"\\<forall>Q'\\<in>?Q'. \\<not> P' =\\<cdot> Q'\""], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> P' =\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "then"], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> P' =\\<cdot> Q'", "have \"\\<forall>Q'\\<in>?Q'. \\<exists>x :: ('idx, 'pred, 'act) formula. x distinguishes P' from Q'\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> P' =\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n       \\<exists>x. x distinguishes P' from Q'", "by (metis equivalent_iff_not_distinguished)"], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x. x distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "then"], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x. x distinguishes P' from Q'", "have \"\\<forall>Q'\\<in>?Q'. \\<exists>x :: ('idx, 'pred, 'act) formula. supp x \\<subseteq> supp P' \\<and> x distinguishes P' from Q'\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x. x distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n       \\<exists>x.\n          supp x \\<subseteq> supp P' \\<and> x distinguishes P' from Q'", "by (metis distinguished_bounded_support)"], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        supp x \\<subseteq> supp P' \\<and> x distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "then"], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        supp x \\<subseteq> supp P' \\<and> x distinguishes P' from Q'", "obtain f :: \"'state \\<Rightarrow> ('idx, 'pred, 'act) formula\" where\n              *: \"\\<forall>Q'\\<in>?Q'. supp (f Q') \\<subseteq> supp P' \\<and> (f Q') distinguishes P' from Q'\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        supp x \\<subseteq> supp P' \\<and> x distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n           supp (f Q') \\<subseteq> supp P' \\<and>\n           f Q' distinguishes P' from Q' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     supp (f Q') \\<subseteq> supp P' \\<and> f Q' distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "have \"supp (f ` ?Q') \\<subseteq> supp P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n    \\<subseteq> supp P'", "by (rule set_bounded_supp, fact finite_supp, cut_tac \"*\", blast)"], ["proof (state)\nthis:\n  supp (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n  \\<subseteq> supp P'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "then"], ["proof (chain)\npicking this:\n  supp (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n  \\<subseteq> supp P'", "have finite_supp_image: \"finite (supp (f ` ?Q'))\""], ["proof (prove)\nusing this:\n  supp (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n  \\<subseteq> supp P'\n\ngoal (1 subgoal):\n 1. finite (supp (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "using finite_supp rev_finite_subset"], ["proof (prove)\nusing this:\n  supp (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n  \\<subseteq> supp P'\n  finite (supp ?x)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (supp (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "by blast"], ["proof (state)\nthis:\n  finite (supp (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "have \"|f ` ?Q'| \\<le>o |UNIV :: 'state set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| \\<le>o |UNIV|", "by (metis card_of_UNIV card_of_image ordLeq_transitive)"], ["proof (state)\nthis:\n  |f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| \\<le>o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "also"], ["proof (state)\nthis:\n  |f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| \\<le>o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "have \"|UNIV :: 'state set| <o |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "by (metis card_idx_state)"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "also"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "have \"|UNIV :: 'idx set| \\<le>o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o natLeq +c |UNIV|", "by (metis Cnotzero_UNIV ordLeq_csum2)"], ["proof (state)\nthis:\n  |UNIV| \\<le>o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "finally"], ["proof (chain)\npicking this:\n  |f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n  natLeq +c |UNIV|", "have card_image: \"|f ` ?Q'| <o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\nusing this:\n  |f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n  natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. |f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n    natLeq +c |UNIV|", "."], ["proof (state)\nthis:\n  |f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n  natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "let ?y = \"Conj (Abs_bset (f ` ?Q')) :: ('idx, 'pred, 'act) formula\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "have \"P \\<Turnstile> Act \\<alpha> ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile>\n    Act \\<alpha>\n     (Conj\n       (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))", "unfolding valid_Act"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act \\<alpha>\n        (Conj\n          (Abs_bset\n            (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))) =\n       Act \\<alpha>' x' \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x'", "proof (standard+)"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<rightarrow> \\<langle>\\<alpha>,?P'4\\<rangle>\n 2. ?P'4 \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "show \"P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "by fact"], ["proof (state)\nthis:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "fix Q'"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "assume \"Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\""], ["proof (state)\nthis:\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "with \"*\""], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     supp (f Q') \\<subseteq> supp P' \\<and> f Q' distinguishes P' from Q'\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>", "have \"P' \\<Turnstile> f Q'\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     supp (f Q') \\<subseteq> supp P' \\<and> f Q' distinguishes P' from Q'\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile> f Q'", "by (metis is_distinguishing_formula_def mem_Collect_eq)"], ["proof (state)\nthis:\n  P' \\<Turnstile> f Q'\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "}"], ["proof (state)\nthis:\n  Q \\<rightarrow> \\<langle>\\<alpha>,?Q'9\\<rangle> \\<Longrightarrow>\n  P' \\<Turnstile> f ?Q'9\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "then"], ["proof (chain)\npicking this:\n  Q \\<rightarrow> \\<langle>\\<alpha>,?Q'9\\<rangle> \\<Longrightarrow>\n  P' \\<Turnstile> f ?Q'9", "show \"P' \\<Turnstile> ?y\""], ["proof (prove)\nusing this:\n  Q \\<rightarrow> \\<langle>\\<alpha>,?Q'9\\<rangle> \\<Longrightarrow>\n  P' \\<Turnstile> f ?Q'9\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "by (simp add: finite_supp_image card_image)"], ["proof (state)\nthis:\n  P' \\<Turnstile>\n  Conj (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<Turnstile>\n  Act \\<alpha>\n   (Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "moreover"], ["proof (state)\nthis:\n  P \\<Turnstile>\n  Act \\<alpha>\n   (Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "have \"\\<not> Q \\<Turnstile> Act \\<alpha> ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Q \\<Turnstile>\n           Act \\<alpha>\n            (Conj\n              (Abs_bset\n                (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. Q \\<Turnstile>\n    Act \\<alpha>\n     (Conj\n       (Abs_bset\n         (f `\n          {Q'.\n           Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<Longrightarrow>\n    False", "assume \"Q \\<Turnstile> Act \\<alpha> ?y\""], ["proof (state)\nthis:\n  Q \\<Turnstile>\n  Act \\<alpha>\n   (Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. Q \\<Turnstile>\n    Act \\<alpha>\n     (Conj\n       (Abs_bset\n         (f `\n          {Q'.\n           Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  Q \\<Turnstile>\n  Act \\<alpha>\n   (Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))", "obtain Q' where 1: \"Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\" and 2: \"Q' \\<Turnstile> ?y\""], ["proof (prove)\nusing this:\n  Q \\<Turnstile>\n  Act \\<alpha>\n   (Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>;\n         Q' \\<Turnstile>\n         Conj\n          (Abs_bset\n            (f `\n             {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>bn \\<alpha> \\<sharp>* Q\\<close>"], ["proof (prove)\nusing this:\n  Q \\<Turnstile>\n  Act \\<alpha>\n   (Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n  bn \\<alpha> \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>;\n         Q' \\<Turnstile>\n         Conj\n          (Abs_bset\n            (f `\n             {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis valid_Act_fresh)"], ["proof (state)\nthis:\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  Q' \\<Turnstile>\n  Conj (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal (1 subgoal):\n 1. Q \\<Turnstile>\n    Act \\<alpha>\n     (Conj\n       (Abs_bset\n         (f `\n          {Q'.\n           Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<Longrightarrow>\n    False", "from 2"], ["proof (chain)\npicking this:\n  Q' \\<Turnstile>\n  Conj (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "have \"\\<And>Q''. Q \\<rightarrow> \\<langle>\\<alpha>,Q''\\<rangle> \\<longrightarrow> Q' \\<Turnstile> f Q''\""], ["proof (prove)\nusing this:\n  Q' \\<Turnstile>\n  Conj (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal (1 subgoal):\n 1. \\<And>Q''.\n       Q \\<rightarrow> \\<langle>\\<alpha>,Q''\\<rangle> \\<longrightarrow>\n       Q' \\<Turnstile> f Q''", "by (simp add: finite_supp_image card_image)"], ["proof (state)\nthis:\n  Q \\<rightarrow> \\<langle>\\<alpha>,?Q''7\\<rangle> \\<longrightarrow>\n  Q' \\<Turnstile> f ?Q''7\n\ngoal (1 subgoal):\n 1. Q \\<Turnstile>\n    Act \\<alpha>\n     (Conj\n       (Abs_bset\n         (f `\n          {Q'.\n           Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<Longrightarrow>\n    False", "with 1 and \"*\""], ["proof (chain)\npicking this:\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     supp (f Q') \\<subseteq> supp P' \\<and> f Q' distinguishes P' from Q'\n  Q \\<rightarrow> \\<langle>\\<alpha>,?Q''7\\<rangle> \\<longrightarrow>\n  Q' \\<Turnstile> f ?Q''7", "show False"], ["proof (prove)\nusing this:\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     supp (f Q') \\<subseteq> supp P' \\<and> f Q' distinguishes P' from Q'\n  Q \\<rightarrow> \\<langle>\\<alpha>,?Q''7\\<rangle> \\<longrightarrow>\n  Q' \\<Turnstile> f ?Q''7\n\ngoal (1 subgoal):\n 1. False", "using is_distinguishing_formula_def"], ["proof (prove)\nusing this:\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     supp (f Q') \\<subseteq> supp P' \\<and> f Q' distinguishes P' from Q'\n  Q \\<rightarrow> \\<langle>\\<alpha>,?Q''7\\<rangle> \\<longrightarrow>\n  Q' \\<Turnstile> f ?Q''7\n  ?x distinguishes ?P from ?Q \\<equiv>\n  ?P \\<Turnstile> ?x \\<and> \\<not> ?Q \\<Turnstile> ?x\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> Q \\<Turnstile>\n         Act \\<alpha>\n          (Conj\n            (Abs_bset\n              (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "ultimately"], ["proof (chain)\npicking this:\n  P \\<Turnstile>\n  Act \\<alpha>\n   (Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n  \\<not> Q \\<Turnstile>\n         Act \\<alpha>\n          (Conj\n            (Abs_bset\n              (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))", "have False"], ["proof (prove)\nusing this:\n  P \\<Turnstile>\n  Act \\<alpha>\n   (Conj\n     (Abs_bset (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n  \\<not> Q \\<Turnstile>\n         Act \\<alpha>\n          (Conj\n            (Abs_bset\n              (f ` {Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<open>P =\\<cdot> Q\\<close> logically_equivalent_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "}"], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> P' =\\<cdot> Q' \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P =\\<cdot> Q; bn \\<alpha> \\<sharp>* Q;\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         P' =\\<cdot> Q'", "then"], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> P' =\\<cdot> Q' \\<Longrightarrow>\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> P' =\\<cdot> Q' \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> P' =\\<cdot> Q'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> P' =\\<cdot> Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> P' =\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?P9 =\\<cdot> ?Q9; bn ?\\<alpha>9 \\<sharp>* ?Q9;\n   ?P9 \\<rightarrow> \\<langle>?\\<alpha>9,?P'9\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q'.\n                       ?Q9 \\<rightarrow>\n                       \\<langle>?\\<alpha>9,Q'\\<rangle> \\<and>\n                       ?P'9 =\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "ultimately"], ["proof (chain)\npicking this:\n  symp (=\\<cdot>)\n  ?P9 =\\<cdot> ?Q9 \\<Longrightarrow>\n  ?P9 \\<turnstile> ?\\<phi>9 \\<longrightarrow> ?Q9 \\<turnstile> ?\\<phi>9\n  \\<lbrakk>?P9 =\\<cdot> ?Q9; bn ?\\<alpha>9 \\<sharp>* ?Q9;\n   ?P9 \\<rightarrow> \\<langle>?\\<alpha>9,?P'9\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q'.\n                       ?Q9 \\<rightarrow>\n                       \\<langle>?\\<alpha>9,Q'\\<rangle> \\<and>\n                       ?P'9 =\\<cdot> Q'", "show ?thesis"], ["proof (prove)\nusing this:\n  symp (=\\<cdot>)\n  ?P9 =\\<cdot> ?Q9 \\<Longrightarrow>\n  ?P9 \\<turnstile> ?\\<phi>9 \\<longrightarrow> ?Q9 \\<turnstile> ?\\<phi>9\n  \\<lbrakk>?P9 =\\<cdot> ?Q9; bn ?\\<alpha>9 \\<sharp>* ?Q9;\n   ?P9 \\<rightarrow> \\<langle>?\\<alpha>9,?P'9\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q'.\n                       ?Q9 \\<rightarrow>\n                       \\<langle>?\\<alpha>9,Q'\\<rangle> \\<and>\n                       ?P'9 =\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. is_bisimulation (=\\<cdot>)", "unfolding is_bisimulation_def"], ["proof (prove)\nusing this:\n  symp (=\\<cdot>)\n  ?P9 =\\<cdot> ?Q9 \\<Longrightarrow>\n  ?P9 \\<turnstile> ?\\<phi>9 \\<longrightarrow> ?Q9 \\<turnstile> ?\\<phi>9\n  \\<lbrakk>?P9 =\\<cdot> ?Q9; bn ?\\<alpha>9 \\<sharp>* ?Q9;\n   ?P9 \\<rightarrow> \\<langle>?\\<alpha>9,?P'9\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q'.\n                       ?Q9 \\<rightarrow>\n                       \\<langle>?\\<alpha>9,Q'\\<rangle> \\<and>\n                       ?P'9 =\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. symp (=\\<cdot>) \\<and>\n    (\\<forall>P Q.\n        P =\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P =\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' =\\<cdot> Q')))", "by metis"], ["proof (state)\nthis:\n  is_bisimulation (=\\<cdot>)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem equivalence_implies_bisimilarity: assumes \"P =\\<cdot> Q\" shows \"P \\<sim>\\<cdot> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot> Q", "using assms"], ["proof (prove)\nusing this:\n  P =\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot> Q", "by (metis bisimilar_def equivalence_is_bisimulation)"], ["", "end"], ["", "end"]]}