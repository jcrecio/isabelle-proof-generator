{"file_name": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS/S_Transform.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS", "problem_names": ["lemma supp_Act [simp]: \"supp (Act \\<alpha>) = supp \\<alpha>\"", "lemma supp_Pred [simp]: \"supp (Pred \\<phi>) = supp \\<phi>\"", "lemma S_satisfies_eqvt: assumes \"P \\<turnstile>\\<^sub>S \\<phi>\" shows \"(p \\<bullet> P) \\<turnstile>\\<^sub>S (p \\<bullet> \\<phi>)\"", "lemma S_transition_eqvt: assumes \"P \\<rightarrow>\\<^sub>S \\<alpha>\\<^sub>SP'\" shows \"(p \\<bullet> P) \\<rightarrow>\\<^sub>S (p \\<bullet> \\<alpha>\\<^sub>SP')\"", "lemma S_transition_cases [case_names Act Pred, consumes 1]: assumes \"P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\"\n    and \"\\<And>\\<alpha>. \\<alpha>\\<^sub>S = Act \\<alpha> \\<Longrightarrow> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow> R\"\n    and \"\\<And>\\<phi>. \\<alpha>\\<^sub>S = Pred \\<phi> \\<Longrightarrow> P' = P \\<Longrightarrow> P \\<turnstile> \\<phi> \\<Longrightarrow> R\"\n    shows R", "lemma S_transition_Act_iff: \"P \\<rightarrow>\\<^sub>S \\<langle>Act \\<alpha>,P'\\<rangle> \\<longleftrightarrow> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\"", "lemma S_transition_Pred_iff: \"P \\<rightarrow>\\<^sub>S \\<langle>Pred \\<phi>,P'\\<rangle> \\<longleftrightarrow> P' = P \\<and> P \\<turnstile> \\<phi>\"", "lemma bisimilar_is_S_transform_bisimulation: \"S_transform.is_bisimulation bisimilar\"", "lemma S_transform_bisimilar_is_bisimulation: \"is_bisimulation S_transform.bisimilar\"", "theorem S_transform_bisimilar_iff: \"P \\<sim>\\<cdot>\\<^sub>S Q \\<longleftrightarrow> P \\<sim>\\<cdot> Q\"", "lemma weakly_bisimilar_tau_transition_weakly_bisimilar:\n    assumes \"P \\<approx>\\<cdot> R\" and \"P \\<Rightarrow> Q\" and \"Q \\<Rightarrow> R\"\n    shows \"Q \\<approx>\\<cdot> R\"", "lemma S_transform_tau_transition_iff: \"P \\<Rightarrow>\\<^sub>S P' \\<longleftrightarrow> P \\<Rightarrow> P'\"", "lemma S_transform_observable_transition_iff: \"P \\<Rightarrow>{Act \\<alpha>}\\<^sub>S P' \\<longleftrightarrow> P \\<Rightarrow>{\\<alpha>} P'\"", "lemma S_transform_weak_transition_iff: \"P \\<Rightarrow>\\<langle>Act \\<alpha>\\<rangle>\\<^sub>S P' \\<longleftrightarrow> P \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> P'\"", "lemma weakly_bisimilar_is_S_transform_weak_bisimulation: \"S_transform.is_weak_bisimulation weakly_bisimilar\"", "lemma S_transform_weakly_bisimilar_is_weak_bisimulation: \"is_weak_bisimulation S_transform.weakly_bisimilar\"", "theorem S_transform_weakly_bisimilar_iff: \"P \\<approx>\\<cdot>\\<^sub>S Q \\<longleftrightarrow> P \\<approx>\\<cdot> Q\"", "lemma S_transform_Tree_eqvt [eqvt]: \"p \\<bullet> S_transform_Tree t = S_transform_Tree (p \\<bullet> t)\"", "lemma alpha_Tree_S_transform_Tree:\n  assumes \"t1 =\\<^sub>\\<alpha> t2\"\n  shows \"S_transform_Tree t1 = S_transform_Tree t2\"", "lemma S_transform_Tree\\<^sub>\\<alpha>_eqvt [eqvt]: \"p \\<bullet> S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> = S_transform_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\"", "lemma S_transform_Tree\\<^sub>\\<alpha>_Conj\\<^sub>\\<alpha> [simp]: \"S_transform_Tree\\<^sub>\\<alpha> (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = Conj\\<^sub>\\<alpha> (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\"", "lemma S_transform_Tree\\<^sub>\\<alpha>_Not\\<^sub>\\<alpha> [simp]: \"S_transform_Tree\\<^sub>\\<alpha> (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = Not\\<^sub>\\<alpha> (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"", "lemma S_transform_Tree\\<^sub>\\<alpha>_Pred\\<^sub>\\<alpha> [simp]: \"S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>) = Act\\<^sub>\\<alpha> (S_action.Pred \\<phi>) (Conj\\<^sub>\\<alpha> bempty)\"", "lemma S_transform_Tree\\<^sub>\\<alpha>_Act\\<^sub>\\<alpha> [simp]: \"S_transform_Tree\\<^sub>\\<alpha> (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>) = Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>) (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"", "lemma finite_supp_map_bset_S_transform_Tree\\<^sub>\\<alpha> [simp]:\n  assumes \"finite (supp tset\\<^sub>\\<alpha>)\"\n  shows \"finite (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\"", "lemma S_transform_Tree\\<^sub>\\<alpha>_preserves_hereditarily_fs:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"", "lemma S_transform_formula_eqvt [eqvt]: \"p \\<bullet> S_transform_formula x = S_transform_formula (p \\<bullet> x)\"", "lemma S_transform_formula_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"S_transform_formula (Conj xset) = Conj\\<^sub>\\<alpha> (map_bset S_transform_formula xset)\"", "lemma S_transform_formula_Not [simp]: \"S_transform_formula (Not x) = Not\\<^sub>\\<alpha> (S_transform_formula x)\"", "lemma S_transform_formula_Pred [simp]: \"S_transform_formula (Formula.Pred \\<phi>) = Act\\<^sub>\\<alpha> (S_action.Pred \\<phi>) (Conj\\<^sub>\\<alpha> bempty)\"", "lemma S_transform_formula_Act [simp]: \"S_transform_formula (Formula.Act \\<alpha> x) = Formula.Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>) (S_transform_formula x)\"", "lemma S_transform_formula_hereditarily_fs [simp]: \"hereditarily_fs (S_transform_formula x)\"", "lemma S_transform_eqvt [eqvt]: \"p \\<bullet> S_transform x = S_transform (p \\<bullet> x)\"", "lemma finite_supp_map_bset_S_transform [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"finite (supp (map_bset S_transform xset))\"", "lemma S_transform_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"S_transform (Conj xset) = Conj (map_bset S_transform xset)\"", "lemma S_transform_Not [simp]: \"S_transform (Not x) = Not (S_transform x)\"", "lemma S_transform_Pred [simp]: \"S_transform (Formula.Pred \\<phi>) = Formula.Act (S_action.Pred \\<phi>) (Conj bempty)\"", "lemma S_transform_Act [simp]: \"S_transform (Formula.Act \\<alpha> x) = Formula.Act (S_action.Act \\<alpha>) (S_transform x)\"", "lemma valid_Conj_bempty [simp]: \"P \\<Turnstile> Conj bempty\"", "theorem valid_iff_valid_S_transform: shows \"P \\<Turnstile> x \\<longleftrightarrow> P \\<Turnstile>\\<^sub>S S_transform x\"", "theorem \"P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow> P \\<sim>\\<cdot> Q\""], "translations": [["", "lemma supp_Act [simp]: \"supp (Act \\<alpha>) = supp \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (S_action.Act \\<alpha>) = supp \\<alpha>", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> S_action.Act\n             \\<alpha> \\<noteq>\n             S_action.Act \\<alpha>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n             \\<alpha>}}", "by simp"], ["", "lemma supp_Pred [simp]: \"supp (Pred \\<phi>) = supp \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (S_action.Pred \\<phi>) = supp \\<phi>", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> S_action.Pred\n             \\<phi> \\<noteq>\n             S_action.Pred \\<phi>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> \\<phi> \\<noteq> \\<phi>}}", "by simp"], ["", "instantiation S_action :: (fs,fs) fs\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) S_action, fs_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "fix x :: \"('a,'b) S_action\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "show \"finite (supp x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp x)", "by (cases x) (simp add: finite_supp)+"], ["proof (state)\nthis:\n  finite (supp x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation S_action :: (bn,fs) bn\nbegin"], ["", "fun bn_S_action :: \"('a,'b) S_action \\<Rightarrow> atom set\" where\n    \"bn_S_action (Act \\<alpha>) = bn \\<alpha>\"\n  | \"bn_S_action (Pred _) = {}\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) S_action, bn_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>. p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)\n 2. \\<And>\\<alpha>. finite (bn \\<alpha>)", "fix p and \\<alpha> :: \"('a,'b) S_action\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>. p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)\n 2. \\<And>\\<alpha>. finite (bn \\<alpha>)", "show \"p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)", "by (cases \\<alpha>) (simp add: bn_eqvt, simp)"], ["proof (state)\nthis:\n  p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>. finite (bn \\<alpha>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>. finite (bn \\<alpha>)", "fix \\<alpha> :: \"('a,'b) S_action\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>. finite (bn \\<alpha>)", "show \"finite (bn \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (bn \\<alpha>)", "by (cases \\<alpha>) (simp add: bn_finite, simp)"], ["proof (state)\nthis:\n  finite (bn \\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Satisfaction\\<close>"], ["", "context nominal_ts\nbegin"], ["", "text \\<open>Here our formalization differs from the informal presentation, where the $S$-transform does\n  not have any predicates. In Isabelle/HOL, there are no empty types; we use type @{typ unit}\n  instead. However, it is clear from the following definition of the satisfaction relation that the\n  single element of this type is not actually used in any meaningful way.\\<close>"], ["", "definition S_satisfies :: \"'state \\<Rightarrow> unit \\<Rightarrow> bool\" (infix \"\\<turnstile>\\<^sub>S\" 70) where\n    \"P \\<turnstile>\\<^sub>S \\<phi> \\<longleftrightarrow> False\""], ["", "lemma S_satisfies_eqvt: assumes \"P \\<turnstile>\\<^sub>S \\<phi>\" shows \"(p \\<bullet> P) \\<turnstile>\\<^sub>S (p \\<bullet> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<turnstile>\\<^sub>S p \\<bullet> \\<phi>", "using assms"], ["proof (prove)\nusing this:\n  P \\<turnstile>\\<^sub>S \\<phi>\n\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<turnstile>\\<^sub>S p \\<bullet> \\<phi>", "by (simp add: S_satisfies_def)"], ["", "end"], ["", "subsection \\<open>Transitions\\<close>"], ["", "context nominal_ts\nbegin"], ["", "inductive S_transition :: \"'state \\<Rightarrow> (('act,'pred) S_action, 'state) residual \\<Rightarrow> bool\" (infix \"\\<rightarrow>\\<^sub>S\" 70) where\n    Act: \"P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow> P \\<rightarrow>\\<^sub>S \\<langle>Act \\<alpha>,P'\\<rangle>\"\n  | Pred: \"P \\<turnstile> \\<phi> \\<Longrightarrow> P \\<rightarrow>\\<^sub>S \\<langle>Pred \\<phi>,P\\<rangle>\""], ["", "lemma S_transition_eqvt: assumes \"P \\<rightarrow>\\<^sub>S \\<alpha>\\<^sub>SP'\" shows \"(p \\<bullet> P) \\<rightarrow>\\<^sub>S (p \\<bullet> \\<alpha>\\<^sub>SP')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<rightarrow>\\<^sub>S p \\<bullet> \\<alpha>\\<^sub>SP'", "using assms"], ["proof (prove)\nusing this:\n  P \\<rightarrow>\\<^sub>S \\<alpha>\\<^sub>SP'\n\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<rightarrow>\\<^sub>S p \\<bullet> \\<alpha>\\<^sub>SP'", "by cases (simp add: S_transition.Act transition_eqvt', simp add: S_transition.Pred satisfies_eqvt)"], ["", "text \\<open>If there is an $S$-transition, there is an ordinary transition with the same residual---it\n  is not necessary to consider alpha-variants.\\<close>"], ["", "lemma S_transition_cases [case_names Act Pred, consumes 1]: assumes \"P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\"\n    and \"\\<And>\\<alpha>. \\<alpha>\\<^sub>S = Act \\<alpha> \\<Longrightarrow> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow> R\"\n    and \"\\<And>\\<phi>. \\<alpha>\\<^sub>S = Pred \\<phi> \\<Longrightarrow> P' = P \\<Longrightarrow> P \\<turnstile> \\<phi> \\<Longrightarrow> R\"\n    shows R"], ["proof (prove)\ngoal (1 subgoal):\n 1. R", "using assms"], ["proof (prove)\nusing this:\n  P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\n  \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act ?\\<alpha>7;\n   P \\<rightarrow> \\<langle>?\\<alpha>7,P'\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> R\n  \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred ?\\<phi>7; P' = P;\n   P \\<turnstile> ?\\<phi>7\\<rbrakk>\n  \\<Longrightarrow> R\n\ngoal (1 subgoal):\n 1. R", "proof (cases rule: S_transition.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha> P'a.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Act \\<alpha>,P'a\\<rangle>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> R\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "case (Act \\<alpha>' P'')"], ["proof (state)\nthis:\n  \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n  \\<langle>S_action.Act \\<alpha>',P''\\<rangle>\n  P \\<rightarrow> \\<langle>\\<alpha>',P''\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha> P'a.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Act \\<alpha>,P'a\\<rangle>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> R\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "let ?Act = \"Act :: 'act \\<Rightarrow> ('act,'pred) S_action\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha> P'a.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Act \\<alpha>,P'a\\<rangle>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> R\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "from \\<open>\\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> = \\<langle>Act \\<alpha>',P''\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n  \\<langle>S_action.Act \\<alpha>',P''\\<rangle>", "obtain \\<alpha> where \"\\<alpha>\\<^sub>S = Act \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n  \\<langle>S_action.Act \\<alpha>',P''\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson bn_S_action.elims residual_empty_bn_eq_iff)"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha> P'a.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Act \\<alpha>,P'a\\<rangle>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> R\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "with \\<open>\\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> = \\<langle>Act \\<alpha>',P''\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n  \\<langle>S_action.Act \\<alpha>',P''\\<rangle>\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>", "obtain p where \"supp (?Act \\<alpha>, P') - bn (?Act \\<alpha>) = supp (?Act \\<alpha>', P'') - bn (?Act \\<alpha>')\"\n      and \"(supp (?Act \\<alpha>, P') - bn (?Act \\<alpha>)) \\<sharp>* p\" and \"p \\<bullet> (?Act \\<alpha>, P') = (?Act \\<alpha>', P'')\" and \"p \\<bullet> bn (?Act \\<alpha>) = bn (?Act \\<alpha>')\""], ["proof (prove)\nusing this:\n  \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n  \\<langle>S_action.Act \\<alpha>',P''\\<rangle>\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>supp (S_action.Act \\<alpha>, P') -\n                 bn (S_action.Act \\<alpha>) =\n                 supp (S_action.Act \\<alpha>', P'') -\n                 bn (S_action.Act \\<alpha>');\n         (supp (S_action.Act \\<alpha>, P') -\n          bn (S_action.Act \\<alpha>)) \\<sharp>* p;\n         p \\<bullet> (S_action.Act \\<alpha>, P') =\n         (S_action.Act \\<alpha>', P'');\n         p \\<bullet> bn (S_action.Act \\<alpha>) =\n         bn (S_action.Act \\<alpha>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: residual_eq_iff_perm)"], ["proof (state)\nthis:\n  supp (S_action.Act \\<alpha>, P') - bn (S_action.Act \\<alpha>) =\n  supp (S_action.Act \\<alpha>', P'') - bn (S_action.Act \\<alpha>')\n  (supp (S_action.Act \\<alpha>, P') -\n   bn (S_action.Act \\<alpha>)) \\<sharp>* p\n  p \\<bullet> (S_action.Act \\<alpha>, P') = (S_action.Act \\<alpha>', P'')\n  p \\<bullet> bn (S_action.Act \\<alpha>) = bn (S_action.Act \\<alpha>')\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha> P'a.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Act \\<alpha>,P'a\\<rangle>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> R\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "then"], ["proof (chain)\npicking this:\n  supp (S_action.Act \\<alpha>, P') - bn (S_action.Act \\<alpha>) =\n  supp (S_action.Act \\<alpha>', P'') - bn (S_action.Act \\<alpha>')\n  (supp (S_action.Act \\<alpha>, P') -\n   bn (S_action.Act \\<alpha>)) \\<sharp>* p\n  p \\<bullet> (S_action.Act \\<alpha>, P') = (S_action.Act \\<alpha>', P'')\n  p \\<bullet> bn (S_action.Act \\<alpha>) = bn (S_action.Act \\<alpha>')", "have \"supp (\\<alpha>, P') - bn \\<alpha> = supp (\\<alpha>', P'') - bn \\<alpha>'\" and \"(supp (\\<alpha>, P') - bn \\<alpha>) \\<sharp>* p\"\n      and \"p \\<bullet> (\\<alpha>, P') = (\\<alpha>', P'')\" and \"p \\<bullet> bn \\<alpha> = bn \\<alpha>'\""], ["proof (prove)\nusing this:\n  supp (S_action.Act \\<alpha>, P') - bn (S_action.Act \\<alpha>) =\n  supp (S_action.Act \\<alpha>', P'') - bn (S_action.Act \\<alpha>')\n  (supp (S_action.Act \\<alpha>, P') -\n   bn (S_action.Act \\<alpha>)) \\<sharp>* p\n  p \\<bullet> (S_action.Act \\<alpha>, P') = (S_action.Act \\<alpha>', P'')\n  p \\<bullet> bn (S_action.Act \\<alpha>) = bn (S_action.Act \\<alpha>')\n\ngoal (1 subgoal):\n 1. (supp (\\<alpha>, P') - bn \\<alpha> =\n     supp (\\<alpha>', P'') - bn \\<alpha>' &&&\n     (supp (\\<alpha>, P') - bn \\<alpha>) \\<sharp>* p) &&&\n    p \\<bullet> (\\<alpha>, P') = (\\<alpha>', P'') &&&\n    p \\<bullet> bn \\<alpha> = bn \\<alpha>'", "by (simp_all add: supp_Pair)"], ["proof (state)\nthis:\n  supp (\\<alpha>, P') - bn \\<alpha> = supp (\\<alpha>', P'') - bn \\<alpha>'\n  (supp (\\<alpha>, P') - bn \\<alpha>) \\<sharp>* p\n  p \\<bullet> (\\<alpha>, P') = (\\<alpha>', P'')\n  p \\<bullet> bn \\<alpha> = bn \\<alpha>'\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha> P'a.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Act \\<alpha>,P'a\\<rangle>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> R\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "then"], ["proof (chain)\npicking this:\n  supp (\\<alpha>, P') - bn \\<alpha> = supp (\\<alpha>', P'') - bn \\<alpha>'\n  (supp (\\<alpha>, P') - bn \\<alpha>) \\<sharp>* p\n  p \\<bullet> (\\<alpha>, P') = (\\<alpha>', P'')\n  p \\<bullet> bn \\<alpha> = bn \\<alpha>'", "have \"\\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>',P''\\<rangle>\""], ["proof (prove)\nusing this:\n  supp (\\<alpha>, P') - bn \\<alpha> = supp (\\<alpha>', P'') - bn \\<alpha>'\n  (supp (\\<alpha>, P') - bn \\<alpha>) \\<sharp>* p\n  p \\<bullet> (\\<alpha>, P') = (\\<alpha>', P'')\n  p \\<bullet> bn \\<alpha> = bn \\<alpha>'\n\ngoal (1 subgoal):\n 1. \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>',P''\\<rangle>", "by (metis residual_eq_iff_perm)"], ["proof (state)\nthis:\n  \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>',P''\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha> P'a.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Act \\<alpha>,P'a\\<rangle>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'a\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> R\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "with \\<open>\\<alpha>\\<^sub>S = Act \\<alpha>\\<close> and \\<open>P \\<rightarrow> \\<langle>\\<alpha>',P''\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  P \\<rightarrow> \\<langle>\\<alpha>',P''\\<rangle>\n  \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>',P''\\<rangle>", "show R"], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  P \\<rightarrow> \\<langle>\\<alpha>',P''\\<rangle>\n  \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>',P''\\<rangle>\n\ngoal (1 subgoal):\n 1. R", "using \\<open>\\<And>\\<alpha>. \\<alpha>\\<^sub>S = Act \\<alpha> \\<Longrightarrow> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow> R\\<close>"], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  P \\<rightarrow> \\<langle>\\<alpha>',P''\\<rangle>\n  \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>',P''\\<rangle>\n  \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act ?\\<alpha>;\n   P \\<rightarrow> \\<langle>?\\<alpha>,P'\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> R\n\ngoal (1 subgoal):\n 1. R", "by metis"], ["proof (state)\nthis:\n  R\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "case (Pred \\<phi>)"], ["proof (state)\nthis:\n  \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n  \\<langle>S_action.Pred \\<phi>,P\\<rangle>\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "from \\<open>\\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> = \\<langle>Pred \\<phi>,P\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n  \\<langle>S_action.Pred \\<phi>,P\\<rangle>", "have \"\\<alpha>\\<^sub>S = Pred \\<phi>\" and \"P' = P\""], ["proof (prove)\nusing this:\n  \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n  \\<langle>S_action.Pred \\<phi>,P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<alpha>\\<^sub>S = S_action.Pred \\<phi> &&& P' = P", "by (metis bn_S_action.simps(2) residual_empty_bn_eq_iff)+"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n  P' = P\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>\\<alpha>.\n                   \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n                    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n                   \\<Longrightarrow> R;\n        \\<And>\\<phi>.\n           \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n            P \\<turnstile> \\<phi>\\<rbrakk>\n           \\<Longrightarrow> R;\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> =\n        \\<langle>S_action.Pred \\<phi>,P\\<rangle>;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> R", "with \\<open>P \\<turnstile> \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  P \\<turnstile> \\<phi>\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n  P' = P", "show R"], ["proof (prove)\nusing this:\n  P \\<turnstile> \\<phi>\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n  P' = P\n\ngoal (1 subgoal):\n 1. R", "using \\<open>\\<And>\\<phi>. \\<alpha>\\<^sub>S = Pred \\<phi> \\<Longrightarrow> P' = P \\<Longrightarrow> P \\<turnstile> \\<phi> \\<Longrightarrow> R\\<close>"], ["proof (prove)\nusing this:\n  P \\<turnstile> \\<phi>\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n  P' = P\n  \\<lbrakk>\\<alpha>\\<^sub>S = S_action.Pred ?\\<phi>; P' = P;\n   P \\<turnstile> ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> R\n\ngoal (1 subgoal):\n 1. R", "by metis"], ["proof (state)\nthis:\n  R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_transition_Act_iff: \"P \\<rightarrow>\\<^sub>S \\<langle>Act \\<alpha>,P'\\<rangle> \\<longleftrightarrow> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle> =\n    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "using S_transition.Act S_transition_cases"], ["proof (prove)\nusing this:\n  ?P \\<rightarrow> \\<langle>?\\<alpha>,?P'\\<rangle> \\<Longrightarrow>\n  ?P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act ?\\<alpha>,?P'\\<rangle>\n  \\<lbrakk>?P \\<rightarrow>\\<^sub>S \\<langle>?\\<alpha>\\<^sub>S,?P'\\<rangle>;\n   \\<And>\\<alpha>.\n      \\<lbrakk>?\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n       ?P \\<rightarrow> \\<langle>\\<alpha>,?P'\\<rangle>\\<rbrakk>\n      \\<Longrightarrow> ?R;\n   \\<And>\\<phi>.\n      \\<lbrakk>?\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; ?P' = ?P;\n       ?P \\<turnstile> \\<phi>\\<rbrakk>\n      \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n\ngoal (1 subgoal):\n 1. P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle> =\n    P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "by fastforce"], ["", "lemma S_transition_Pred_iff: \"P \\<rightarrow>\\<^sub>S \\<langle>Pred \\<phi>,P'\\<rangle> \\<longleftrightarrow> P' = P \\<and> P \\<turnstile> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,P'\\<rangle> =\n    (P' = P \\<and> P \\<turnstile> \\<phi>)", "using S_transition.Pred S_transition_cases"], ["proof (prove)\nusing this:\n  ?P \\<turnstile> ?\\<phi> \\<Longrightarrow>\n  ?P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred ?\\<phi>,?P\\<rangle>\n  \\<lbrakk>?P \\<rightarrow>\\<^sub>S \\<langle>?\\<alpha>\\<^sub>S,?P'\\<rangle>;\n   \\<And>\\<alpha>.\n      \\<lbrakk>?\\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n       ?P \\<rightarrow> \\<langle>\\<alpha>,?P'\\<rangle>\\<rbrakk>\n      \\<Longrightarrow> ?R;\n   \\<And>\\<phi>.\n      \\<lbrakk>?\\<alpha>\\<^sub>S = S_action.Pred \\<phi>; ?P' = ?P;\n       ?P \\<turnstile> \\<phi>\\<rbrakk>\n      \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n\ngoal (1 subgoal):\n 1. P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,P'\\<rangle> =\n    (P' = P \\<and> P \\<turnstile> \\<phi>)", "by fastforce"], ["", "end"], ["", "subsection \\<open>Strong Bisimilarity in the \\texorpdfstring{$S$}{S}-transform\\<close>"], ["", "context nominal_ts\nbegin"], ["", "interpretation S_transform: nominal_ts \"(\\<turnstile>\\<^sub>S)\" \"(\\<rightarrow>\\<^sub>S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nominal_ts (\\<turnstile>\\<^sub>S) (\\<rightarrow>\\<^sub>S)", "by unfold_locales (fact S_satisfies_eqvt, fact S_transition_eqvt)"], ["", "no_notation S_satisfies (infix \"\\<turnstile>\\<^sub>S\" 70) \\<comment> \\<open>denotes @{const S_transform.S_satisfies} instead\\<close>"], ["", "notation S_transform.bisimilar (infix \"\\<sim>\\<cdot>\\<^sub>S\" 100)"], ["", "text \\<open>Bisimilarity is equivalent to bisimilarity in the $S$-transform.\\<close>"], ["", "lemma bisimilar_is_S_transform_bisimulation: \"S_transform.is_bisimulation bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform.is_bisimulation (\\<sim>\\<cdot>)", "unfolding S_transform.is_bisimulation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<sim>\\<cdot>) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot> Q')))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. symp (\\<sim>\\<cdot>)\n 2. (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot> Q')))", "show \"symp bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<sim>\\<cdot>)", "by (fact bisimilar_symp)"], ["proof (state)\nthis:\n  symp (\\<sim>\\<cdot>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot> Q')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot> Q')))", "have \"\\<forall>P Q. P \\<sim>\\<cdot> Q \\<longrightarrow> (\\<forall>\\<phi>. P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow> Q \\<turnstile>\\<^sub>S \\<phi>)\" (is ?S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q.\n       P \\<sim>\\<cdot> Q \\<longrightarrow>\n       (\\<forall>\\<phi>.\n           P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n           Q \\<turnstile>\\<^sub>S \\<phi>)", "by (simp add: S_transform.S_satisfies_def)"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n         Q \\<turnstile>\\<^sub>S \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot> Q')))", "moreover"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n         Q \\<turnstile>\\<^sub>S \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot> Q')))", "have \"\\<forall>P Q. P \\<sim>\\<cdot> Q \\<longrightarrow> (\\<forall>\\<alpha>\\<^sub>S P'. bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow> P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow> (\\<exists>Q'. Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and> P' \\<sim>\\<cdot> Q'))\" (is ?T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q.\n       P \\<sim>\\<cdot> Q \\<longrightarrow>\n       (\\<forall>\\<alpha>\\<^sub>S P'.\n           bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n           P \\<rightarrow>\\<^sub>S\n           \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n           (\\<exists>Q'.\n               Q \\<rightarrow>\\<^sub>S\n               \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n               P' \\<sim>\\<cdot> Q'))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha>\\<^sub>S P'.\n       \\<lbrakk>P \\<sim>\\<cdot> Q; bn \\<alpha>\\<^sub>S \\<sharp>* Q;\n        P \\<rightarrow>\\<^sub>S\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot> Q'", "fix P Q \\<alpha>\\<^sub>S P'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha>\\<^sub>S P'.\n       \\<lbrakk>P \\<sim>\\<cdot> Q; bn \\<alpha>\\<^sub>S \\<sharp>* Q;\n        P \\<rightarrow>\\<^sub>S\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot> Q'", "assume bisim: \"P \\<sim>\\<cdot> Q\" and fresh\\<^sub>S: \"bn \\<alpha>\\<^sub>S \\<sharp>* Q\" and trans\\<^sub>S: \"P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\""], ["proof (state)\nthis:\n  P \\<sim>\\<cdot> Q\n  bn \\<alpha>\\<^sub>S \\<sharp>* Q\n  P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha>\\<^sub>S P'.\n       \\<lbrakk>P \\<sim>\\<cdot> Q; bn \\<alpha>\\<^sub>S \\<sharp>* Q;\n        P \\<rightarrow>\\<^sub>S\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot> Q'", "obtain Q' where \"Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>\" and \"P' \\<sim>\\<cdot> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                 \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n         P' \\<sim>\\<cdot> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using trans\\<^sub>S"], ["proof (prove)\nusing this:\n  P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                 \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n         P' \\<sim>\\<cdot> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases rule: S_transition_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Act \\<alpha>)"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>\\<alpha>\\<^sub>S = Act \\<alpha>\\<close> and fresh\\<^sub>S"], ["proof (chain)\npicking this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  bn \\<alpha>\\<^sub>S \\<sharp>* Q", "have \"bn \\<alpha> \\<sharp>* Q\""], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  bn \\<alpha>\\<^sub>S \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* Q", "by simp"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* Q\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "with bisim and \\<open>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot> Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* Q", "obtain Q' where transQ: \"Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\" and bisim': \"P' \\<sim>\\<cdot> Q'\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot> Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>;\n         P' \\<sim>\\<cdot> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis bisimilar_simulation_step)"], ["proof (state)\nthis:\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  P' \\<sim>\\<cdot> Q'\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>\\<alpha>\\<^sub>S = Act \\<alpha>\\<close> and transQ"], ["proof (chain)\npicking this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>", "have \"Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>", "by (simp add: S_transition.Act)"], ["proof (state)\nthis:\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "with bisim'"], ["proof (chain)\npicking this:\n  P' \\<sim>\\<cdot> Q'\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>", "show \"thesis\""], ["proof (prove)\nusing this:\n  P' \\<sim>\\<cdot> Q'\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>\\<And>Q'. Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<Longrightarrow> P' \\<sim>\\<cdot> Q' \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\nusing this:\n  P' \\<sim>\\<cdot> Q'\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>\n  \\<lbrakk>Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,?Q'\\<rangle>;\n   P' \\<sim>\\<cdot> ?Q'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Pred \\<phi>)"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n  P' = P\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "from bisim and \\<open>P \\<turnstile> \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot> Q\n  P \\<turnstile> \\<phi>", "have \"Q \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot> Q\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. Q \\<turnstile> \\<phi>", "by (metis is_bisimulation_def bisimilar_is_bisimulation)"], ["proof (state)\nthis:\n  Q \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>\\<alpha>\\<^sub>S = Pred \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n  Q \\<turnstile> \\<phi>", "have \"Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n  Q \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q\\<rangle>", "by (simp add: S_transition.Pred)"], ["proof (state)\nthis:\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>;\n                    P' \\<sim>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "with bisim and \\<open>P' = P\\<close>"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot> Q\n  P' = P\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q\\<rangle>", "show \"thesis\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot> Q\n  P' = P\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q\\<rangle>\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>\\<And>Q'. Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<Longrightarrow> P' \\<sim>\\<cdot> Q' \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot> Q\n  P' = P\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q\\<rangle>\n  \\<lbrakk>Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,?Q'\\<rangle>;\n   P' \\<sim>\\<cdot> ?Q'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>\n  P' \\<sim>\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha>\\<^sub>S P'.\n       \\<lbrakk>P \\<sim>\\<cdot> Q; bn \\<alpha>\\<^sub>S \\<sharp>* Q;\n        P \\<rightarrow>\\<^sub>S\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\\<^sub>S\n                            \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot> Q'", "then"], ["proof (chain)\npicking this:\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>\n  P' \\<sim>\\<cdot> Q'", "show \"\\<exists>Q'. Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and> P' \\<sim>\\<cdot> Q'\""], ["proof (prove)\nusing this:\n  Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle>\n  P' \\<sim>\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n       P' \\<sim>\\<cdot> Q'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n     P' \\<sim>\\<cdot> Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>S P'.\n         bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow>\\<^sub>S\n         \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<rightarrow>\\<^sub>S\n             \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n             P' \\<sim>\\<cdot> Q'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot> Q')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n         Q \\<turnstile>\\<^sub>S \\<phi>)\n  \\<forall>P Q.\n     P \\<sim>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>S P'.\n         bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow>\\<^sub>S\n         \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<rightarrow>\\<^sub>S\n             \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n             P' \\<sim>\\<cdot> Q'))", "show \"?S \\<and> ?T\""], ["proof (prove)\nusing this:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n         Q \\<turnstile>\\<^sub>S \\<phi>)\n  \\<forall>P Q.\n     P \\<sim>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>S P'.\n         bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow>\\<^sub>S\n         \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<rightarrow>\\<^sub>S\n             \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n             P' \\<sim>\\<cdot> Q'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha>\\<^sub>S P'.\n            bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>S\n                \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot> Q')))", "by metis"], ["proof (state)\nthis:\n  (\\<forall>P Q.\n      P \\<sim>\\<cdot> Q \\<longrightarrow>\n      (\\<forall>\\<phi>.\n          P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n          Q \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n  (\\<forall>P Q.\n      P \\<sim>\\<cdot> Q \\<longrightarrow>\n      (\\<forall>\\<alpha>\\<^sub>S P'.\n          bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n          P \\<rightarrow>\\<^sub>S\n          \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n          (\\<exists>Q'.\n              Q \\<rightarrow>\\<^sub>S\n              \\<langle>\\<alpha>\\<^sub>S,Q'\\<rangle> \\<and>\n              P' \\<sim>\\<cdot> Q')))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_transform_bisimilar_is_bisimulation: \"is_bisimulation S_transform.bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_bisimulation (\\<sim>\\<cdot>\\<^sub>S)", "unfolding is_bisimulation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<sim>\\<cdot>\\<^sub>S) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot>\\<^sub>S Q')))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. symp (\\<sim>\\<cdot>\\<^sub>S)\n 2. (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot>\\<^sub>S Q')))", "show \"symp S_transform.bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<sim>\\<cdot>\\<^sub>S)", "by (fact S_transform.bisimilar_symp)"], ["proof (state)\nthis:\n  symp (\\<sim>\\<cdot>\\<^sub>S)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot>\\<^sub>S Q')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot>\\<^sub>S Q')))", "have \"\\<forall>P Q. P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow> (\\<forall>\\<phi>. P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>)\" (is ?S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q.\n       P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n       (\\<forall>\\<phi>.\n           P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>)", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> Q \\<turnstile> \\<phi>", "fix P Q \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> Q \\<turnstile> \\<phi>", "assume bisim: \"P \\<sim>\\<cdot>\\<^sub>S Q\" and valid: \"P \\<turnstile> \\<phi>\""], ["proof (state)\nthis:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> Q \\<turnstile> \\<phi>", "from valid"], ["proof (chain)\npicking this:\n  P \\<turnstile> \\<phi>", "have \"P \\<rightarrow>\\<^sub>S \\<langle>Pred \\<phi>,P\\<rangle>\""], ["proof (prove)\nusing this:\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,P\\<rangle>", "by (fact S_transition.Pred)"], ["proof (state)\nthis:\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> Q \\<turnstile> \\<phi>", "moreover"], ["proof (state)\nthis:\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,P\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> Q \\<turnstile> \\<phi>", "have \"bn (Pred \\<phi>) \\<sharp>* Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn (S_action.Pred \\<phi>) \\<sharp>* Q", "by (simp add: fresh_star_def)"], ["proof (state)\nthis:\n  bn (S_action.Pred \\<phi>) \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> Q \\<turnstile> \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,P\\<rangle>\n  bn (S_action.Pred \\<phi>) \\<sharp>* Q", "obtain Q' where trans': \"Q \\<rightarrow>\\<^sub>S \\<langle>Pred \\<phi>,Q'\\<rangle>\""], ["proof (prove)\nusing this:\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,P\\<rangle>\n  bn (S_action.Pred \\<phi>) \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        Q \\<rightarrow>\\<^sub>S\n        \\<langle>S_action.Pred \\<phi>,Q'\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using bisim"], ["proof (prove)\nusing this:\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,P\\<rangle>\n  bn (S_action.Pred \\<phi>) \\<sharp>* Q\n  P \\<sim>\\<cdot>\\<^sub>S Q\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        Q \\<rightarrow>\\<^sub>S\n        \\<langle>S_action.Pred \\<phi>,Q'\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis S_transform.bisimilar_simulation_step)"], ["proof (state)\nthis:\n  Q \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> Q \\<turnstile> \\<phi>", "from trans'"], ["proof (chain)\npicking this:\n  Q \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>", "show \"Q \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  Q \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. Q \\<turnstile> \\<phi>", "using S_transition_Pred_iff"], ["proof (prove)\nusing this:\n  Q \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>\n  ?P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred ?\\<phi>,?P'\\<rangle> =\n  (?P' = ?P \\<and> ?P \\<turnstile> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. Q \\<turnstile> \\<phi>", "by blast"], ["proof (state)\nthis:\n  Q \\<turnstile> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot>\\<^sub>S Q')))", "moreover"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot>\\<^sub>S Q')))", "have \"\\<forall>P Q. P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow> (\\<forall>\\<alpha> P'. bn \\<alpha> \\<sharp>* Q \\<longrightarrow> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow> (\\<exists>Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> P' \\<sim>\\<cdot>\\<^sub>S Q'))\" (is ?T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q.\n       P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n       (\\<forall>\\<alpha> P'.\n           bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n           P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n           (\\<exists>Q'.\n               Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n               P' \\<sim>\\<cdot>\\<^sub>S Q'))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot>\\<^sub>S Q'", "fix P Q \\<alpha> P'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot>\\<^sub>S Q'", "assume bisim: \"P \\<sim>\\<cdot>\\<^sub>S Q\" and fresh: \"bn \\<alpha> \\<sharp>* Q\" and trans: \"P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (state)\nthis:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot>\\<^sub>S Q'", "from trans"], ["proof (chain)\npicking this:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "have \"P \\<rightarrow>\\<^sub>S \\<langle>Act \\<alpha>,P'\\<rangle>\""], ["proof (prove)\nusing this:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle>", "by (fact S_transition.Act)"], ["proof (state)\nthis:\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot>\\<^sub>S Q'", "with bisim and fresh"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle>", "obtain Q' where trans': \"Q \\<rightarrow>\\<^sub>S \\<langle>Act \\<alpha>,Q'\\<rangle>\" and bisim': \"P' \\<sim>\\<cdot>\\<^sub>S Q'\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<rightarrow>\\<^sub>S\n                 \\<langle>S_action.Act \\<alpha>,Q'\\<rangle>;\n         P' \\<sim>\\<cdot>\\<^sub>S Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis S_transform.bisimilar_simulation_step bn_S_action.simps(1))"], ["proof (state)\nthis:\n  Q \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,Q'\\<rangle>\n  P' \\<sim>\\<cdot>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot>\\<^sub>S Q'", "from trans'"], ["proof (chain)\npicking this:\n  Q \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,Q'\\<rangle>", "have \"Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\""], ["proof (prove)\nusing this:\n  Q \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>", "by (metis S_transition_Act_iff)"], ["proof (state)\nthis:\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<sim>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            P' \\<sim>\\<cdot>\\<^sub>S Q'", "with bisim'"], ["proof (chain)\npicking this:\n  P' \\<sim>\\<cdot>\\<^sub>S Q'\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>", "show \"\\<exists>Q'. Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> P' \\<sim>\\<cdot>\\<^sub>S Q'\""], ["proof (prove)\nusing this:\n  P' \\<sim>\\<cdot>\\<^sub>S Q'\n  Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n       P' \\<sim>\\<cdot>\\<^sub>S Q'", "by metis"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n     P' \\<sim>\\<cdot>\\<^sub>S Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<alpha> P'.\n         bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n             P' \\<sim>\\<cdot>\\<^sub>S Q'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot>\\<^sub>S Q')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>)\n  \\<forall>P Q.\n     P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<alpha> P'.\n         bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n             P' \\<sim>\\<cdot>\\<^sub>S Q'))", "show \"?S \\<and> ?T\""], ["proof (prove)\nusing this:\n  \\<forall>P Q.\n     P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P \\<turnstile> \\<phi> \\<longrightarrow> Q \\<turnstile> \\<phi>)\n  \\<forall>P Q.\n     P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<alpha> P'.\n         bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n             P' \\<sim>\\<cdot>\\<^sub>S Q'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile> \\<phi> \\<longrightarrow>\n            Q \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                P' \\<sim>\\<cdot>\\<^sub>S Q')))", "by metis"], ["proof (state)\nthis:\n  (\\<forall>P Q.\n      P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n      (\\<forall>\\<phi>.\n          P \\<turnstile> \\<phi> \\<longrightarrow>\n          Q \\<turnstile> \\<phi>)) \\<and>\n  (\\<forall>P Q.\n      P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n      (\\<forall>\\<alpha> P'.\n          bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n          P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n          (\\<exists>Q'.\n              Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n              P' \\<sim>\\<cdot>\\<^sub>S Q')))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem S_transform_bisimilar_iff: \"P \\<sim>\\<cdot>\\<^sub>S Q \\<longleftrightarrow> P \\<sim>\\<cdot> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q = P \\<sim>\\<cdot> Q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q \\<Longrightarrow> P \\<sim>\\<cdot> Q\n 2. P \\<sim>\\<cdot> Q \\<Longrightarrow> P \\<sim>\\<cdot>\\<^sub>S Q", "assume \"P \\<sim>\\<cdot>\\<^sub>S Q\""], ["proof (state)\nthis:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n\ngoal (2 subgoals):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q \\<Longrightarrow> P \\<sim>\\<cdot> Q\n 2. P \\<sim>\\<cdot> Q \\<Longrightarrow> P \\<sim>\\<cdot>\\<^sub>S Q", "then"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot>\\<^sub>S Q", "show \"P \\<sim>\\<cdot> Q\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot> Q", "by (metis S_transform_bisimilar_is_bisimulation bisimilar_def)"], ["proof (state)\nthis:\n  P \\<sim>\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot> Q \\<Longrightarrow> P \\<sim>\\<cdot>\\<^sub>S Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot> Q \\<Longrightarrow> P \\<sim>\\<cdot>\\<^sub>S Q", "assume \"P \\<sim>\\<cdot> Q\""], ["proof (state)\nthis:\n  P \\<sim>\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot> Q \\<Longrightarrow> P \\<sim>\\<cdot>\\<^sub>S Q", "then"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot> Q", "show \"P \\<sim>\\<cdot>\\<^sub>S Q\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q", "by (metis S_transform.bisimilar_def bisimilar_is_S_transform_bisimulation)"], ["proof (state)\nthis:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Weak Bisimilarity in the \\texorpdfstring{$S$}{S}-transform\\<close>"], ["", "context weak_nominal_ts\nbegin"], ["", "lemma weakly_bisimilar_tau_transition_weakly_bisimilar:\n    assumes \"P \\<approx>\\<cdot> R\" and \"P \\<Rightarrow> Q\" and \"Q \\<Rightarrow> R\"\n    shows \"Q \\<approx>\\<cdot> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<approx>\\<cdot> R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Q \\<approx>\\<cdot> R", "let ?bisim = \"\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S,T} = {Q,R}\""], ["proof (state)\ngoal (1 subgoal):\n 1. Q \\<approx>\\<cdot> R", "have \"is_weak_bisimulation ?bisim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_weak_bisimulation\n     (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})", "unfolding is_weak_bisimulation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}) \\<and>\n    (\\<forall>P Qa \\<phi>.\n        (P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R}) \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Qa \\<Rightarrow> Q' \\<and>\n            (P \\<approx>\\<cdot> Q' \\<or> {P, Q'} = {Q, R}) \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Qa.\n        P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R} \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Qa \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Qa \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                (P' \\<approx>\\<cdot> Q' \\<or> {P', Q'} = {Q, R}))))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. symp (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})\n 2. (\\<forall>P Qa \\<phi>.\n        (P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R}) \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Qa \\<Rightarrow> Q' \\<and>\n            (P \\<approx>\\<cdot> Q' \\<or> {P, Q'} = {Q, R}) \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Qa.\n        P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R} \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Qa \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Qa \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                (P' \\<approx>\\<cdot> Q' \\<or> {P', Q'} = {Q, R}))))", "show \"symp ?bisim\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})", "using weakly_bisimilar_symp"], ["proof (prove)\nusing this:\n  symp (\\<approx>\\<cdot>)\n\ngoal (1 subgoal):\n 1. symp (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})", "by (simp add: insert_commute symp_def)"], ["proof (state)\nthis:\n  symp (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})\n\ngoal (1 subgoal):\n 1. (\\<forall>P Qa \\<phi>.\n        (P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R}) \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Qa \\<Rightarrow> Q' \\<and>\n            (P \\<approx>\\<cdot> Q' \\<or> {P, Q'} = {Q, R}) \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Qa.\n        P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R} \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Qa \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Qa \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                (P' \\<approx>\\<cdot> Q' \\<or> {P', Q'} = {Q, R}))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>P Qa \\<phi>.\n        (P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R}) \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Qa \\<Rightarrow> Q' \\<and>\n            (P \\<approx>\\<cdot> Q' \\<or> {P, Q'} = {Q, R}) \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Qa.\n        P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R} \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Qa \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Qa \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                (P' \\<approx>\\<cdot> Q' \\<or> {P', Q'} = {Q, R}))))", "have \"\\<forall>S T \\<phi>. ?bisim S T \\<and> S \\<turnstile> \\<phi> \\<longrightarrow> (\\<exists>T'. T \\<Rightarrow> T' \\<and> ?bisim S T' \\<and> T' \\<turnstile> \\<phi>)\" (is ?S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>S T \\<phi>.\n       (S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}) \\<and>\n       S \\<turnstile> \\<phi> \\<longrightarrow>\n       (\\<exists>T'.\n           T \\<Rightarrow> T' \\<and>\n           (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n           T' \\<turnstile> \\<phi>)", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S T \\<phi>.\n       \\<lbrakk>S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R};\n        S \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T'.\n                            T \\<Rightarrow> T' \\<and>\n                            (S \\<approx>\\<cdot> T' \\<or>\n                             {S, T'} = {Q, R}) \\<and>\n                            T' \\<turnstile> \\<phi>", "fix S T \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S T \\<phi>.\n       \\<lbrakk>S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R};\n        S \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T'.\n                            T \\<Rightarrow> T' \\<and>\n                            (S \\<approx>\\<cdot> T' \\<or>\n                             {S, T'} = {Q, R}) \\<and>\n                            T' \\<turnstile> \\<phi>", "assume bisim: \"?bisim S T\" and valid: \"S \\<turnstile> \\<phi>\""], ["proof (state)\nthis:\n  S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}\n  S \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>S T \\<phi>.\n       \\<lbrakk>S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R};\n        S \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T'.\n                            T \\<Rightarrow> T' \\<and>\n                            (S \\<approx>\\<cdot> T' \\<or>\n                             {S, T'} = {Q, R}) \\<and>\n                            T' \\<turnstile> \\<phi>", "from bisim"], ["proof (chain)\npicking this:\n  S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}", "show \"\\<exists>T'. T \\<Rightarrow> T' \\<and> ?bisim S T' \\<and> T' \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. S \\<approx>\\<cdot> T \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>\n 2. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "assume \"S \\<approx>\\<cdot> T\""], ["proof (state)\nthis:\n  S \\<approx>\\<cdot> T\n\ngoal (2 subgoals):\n 1. S \\<approx>\\<cdot> T \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>\n 2. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "with valid"], ["proof (chain)\npicking this:\n  S \\<turnstile> \\<phi>\n  S \\<approx>\\<cdot> T", "show ?thesis"], ["proof (prove)\nusing this:\n  S \\<turnstile> \\<phi>\n  S \\<approx>\\<cdot> T\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "by (metis is_weak_bisimulation_def weakly_bisimilar_is_weak_bisimulation)"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow> T' \\<and>\n     (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n     T' \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "assume \"{S, T} = {Q, R}\""], ["proof (state)\nthis:\n  {S, T} = {Q, R}\n\ngoal (1 subgoal):\n 1. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "then"], ["proof (chain)\npicking this:\n  {S, T} = {Q, R}", "have \"S = Q \\<and> T = R \\<or> T = Q \\<and> S = R\""], ["proof (prove)\nusing this:\n  {S, T} = {Q, R}\n\ngoal (1 subgoal):\n 1. S = Q \\<and> T = R \\<or> T = Q \\<and> S = R", "by (metis doubleton_eq_iff)"], ["proof (state)\nthis:\n  S = Q \\<and> T = R \\<or> T = Q \\<and> S = R\n\ngoal (1 subgoal):\n 1. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "then"], ["proof (chain)\npicking this:\n  S = Q \\<and> T = R \\<or> T = Q \\<and> S = R", "show ?thesis"], ["proof (prove)\nusing this:\n  S = Q \\<and> T = R \\<or> T = Q \\<and> S = R\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. S = Q \\<and> T = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>\n 2. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "assume \"S = Q \\<and> T = R\""], ["proof (state)\nthis:\n  S = Q \\<and> T = R\n\ngoal (2 subgoals):\n 1. S = Q \\<and> T = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>\n 2. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "with \\<open>P \\<Rightarrow> Q\\<close> and \\<open>P \\<approx>\\<cdot> R\\<close> and valid"], ["proof (chain)\npicking this:\n  P \\<Rightarrow> Q\n  P \\<approx>\\<cdot> R\n  S \\<turnstile> \\<phi>\n  S = Q \\<and> T = R", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<Rightarrow> Q\n  P \\<approx>\\<cdot> R\n  S \\<turnstile> \\<phi>\n  S = Q \\<and> T = R\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "by (metis is_weak_bisimulation_def tau_transition_trans weakly_bisimilar_is_weak_bisimulation weakly_bisimilar_tau_simulation_step)"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow> T' \\<and>\n     (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n     T' \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "assume \"T = Q \\<and> S = R\""], ["proof (state)\nthis:\n  T = Q \\<and> S = R\n\ngoal (1 subgoal):\n 1. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "with \\<open>Q \\<Rightarrow> R\\<close> and valid"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow> R\n  S \\<turnstile> \\<phi>\n  T = Q \\<and> S = R", "show ?thesis"], ["proof (prove)\nusing this:\n  Q \\<Rightarrow> R\n  S \\<turnstile> \\<phi>\n  T = Q \\<and> S = R\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow> T' \\<and>\n       (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n       T' \\<turnstile> \\<phi>", "by (meson reflpE weakly_bisimilar_reflp)"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow> T' \\<and>\n     (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n     T' \\<turnstile> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow> T' \\<and>\n     (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n     T' \\<turnstile> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow> T' \\<and>\n     (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n     T' \\<turnstile> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>S T \\<phi>.\n     (S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}) \\<and>\n     S \\<turnstile> \\<phi> \\<longrightarrow>\n     (\\<exists>T'.\n         T \\<Rightarrow> T' \\<and>\n         (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n         T' \\<turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Qa \\<phi>.\n        (P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R}) \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Qa \\<Rightarrow> Q' \\<and>\n            (P \\<approx>\\<cdot> Q' \\<or> {P, Q'} = {Q, R}) \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Qa.\n        P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R} \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Qa \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Qa \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                (P' \\<approx>\\<cdot> Q' \\<or> {P', Q'} = {Q, R}))))", "moreover"], ["proof (state)\nthis:\n  \\<forall>S T \\<phi>.\n     (S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}) \\<and>\n     S \\<turnstile> \\<phi> \\<longrightarrow>\n     (\\<exists>T'.\n         T \\<Rightarrow> T' \\<and>\n         (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n         T' \\<turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Qa \\<phi>.\n        (P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R}) \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Qa \\<Rightarrow> Q' \\<and>\n            (P \\<approx>\\<cdot> Q' \\<or> {P, Q'} = {Q, R}) \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Qa.\n        P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R} \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Qa \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Qa \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                (P' \\<approx>\\<cdot> Q' \\<or> {P', Q'} = {Q, R}))))", "have \"\\<forall>S T. ?bisim S T \\<longrightarrow> (\\<forall>\\<alpha> S'. bn \\<alpha> \\<sharp>* T \\<longrightarrow> S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle> \\<longrightarrow> (\\<exists>T'. T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and> ?bisim S' T'))\" (is ?T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>S T.\n       S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R} \\<longrightarrow>\n       (\\<forall>\\<alpha> S'.\n           bn \\<alpha> \\<sharp>* T \\<longrightarrow>\n           S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle> \\<longrightarrow>\n           (\\<exists>T'.\n               T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n               (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S T \\<alpha> S'.\n       \\<lbrakk>S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R};\n        bn \\<alpha> \\<sharp>* T;\n        S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T'.\n                            T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            T' \\<and>\n                            (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "fix S T \\<alpha> S'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S T \\<alpha> S'.\n       \\<lbrakk>S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R};\n        bn \\<alpha> \\<sharp>* T;\n        S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T'.\n                            T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            T' \\<and>\n                            (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "assume bisim: \"?bisim S T\" and fresh: \"bn \\<alpha> \\<sharp>* T\" and trans: \"S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\""], ["proof (state)\nthis:\n  S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}\n  bn \\<alpha> \\<sharp>* T\n  S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>S T \\<alpha> S'.\n       \\<lbrakk>S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R};\n        bn \\<alpha> \\<sharp>* T;\n        S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T'.\n                            T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            T' \\<and>\n                            (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "from bisim"], ["proof (chain)\npicking this:\n  S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}", "show \"\\<exists>T'. T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and> ?bisim S' T'\""], ["proof (prove)\nusing this:\n  S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. S \\<approx>\\<cdot> T \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n 2. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "assume \"S \\<approx>\\<cdot> T\""], ["proof (state)\nthis:\n  S \\<approx>\\<cdot> T\n\ngoal (2 subgoals):\n 1. S \\<approx>\\<cdot> T \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n 2. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "with fresh and trans"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* T\n  S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\n  S \\<approx>\\<cdot> T", "show ?thesis"], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* T\n  S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\n  S \\<approx>\\<cdot> T\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "by (metis is_weak_bisimulation_def weakly_bisimilar_is_weak_bisimulation)"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n     (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n\ngoal (1 subgoal):\n 1. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "assume \"{S, T} = {Q, R}\""], ["proof (state)\nthis:\n  {S, T} = {Q, R}\n\ngoal (1 subgoal):\n 1. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "then"], ["proof (chain)\npicking this:\n  {S, T} = {Q, R}", "have \"S = Q \\<and> T = R \\<or> T = Q \\<and> S = R\""], ["proof (prove)\nusing this:\n  {S, T} = {Q, R}\n\ngoal (1 subgoal):\n 1. S = Q \\<and> T = R \\<or> T = Q \\<and> S = R", "by (metis doubleton_eq_iff)"], ["proof (state)\nthis:\n  S = Q \\<and> T = R \\<or> T = Q \\<and> S = R\n\ngoal (1 subgoal):\n 1. {S, T} = {Q, R} \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "then"], ["proof (chain)\npicking this:\n  S = Q \\<and> T = R \\<or> T = Q \\<and> S = R", "show ?thesis"], ["proof (prove)\nusing this:\n  S = Q \\<and> T = R \\<or> T = Q \\<and> S = R\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. S = Q \\<and> T = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n 2. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "assume \"S = Q \\<and> T = R\""], ["proof (state)\nthis:\n  S = Q \\<and> T = R\n\ngoal (2 subgoals):\n 1. S = Q \\<and> T = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n 2. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "with \\<open>P \\<Rightarrow> Q\\<close> and \\<open>P \\<approx>\\<cdot> R\\<close> and fresh and trans"], ["proof (chain)\npicking this:\n  P \\<Rightarrow> Q\n  P \\<approx>\\<cdot> R\n  bn \\<alpha> \\<sharp>* T\n  S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\n  S = Q \\<and> T = R", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<Rightarrow> Q\n  P \\<approx>\\<cdot> R\n  bn \\<alpha> \\<sharp>* T\n  S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\n  S = Q \\<and> T = R\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "using observable_transition_stepI tau_refl weak_transition_stepI weak_transition_weakI weakly_bisimilar_weak_simulation_step"], ["proof (prove)\nusing this:\n  P \\<Rightarrow> Q\n  P \\<approx>\\<cdot> R\n  bn \\<alpha> \\<sharp>* T\n  S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\n  S = Q \\<and> T = R\n  ?P \\<rightarrow> \\<langle>?\\<alpha>,?P'\\<rangle> \\<Longrightarrow>\n  ?P \\<Rightarrow>{?\\<alpha>} ?P'\n  ?P \\<Rightarrow> ?P\n  ?P \\<Rightarrow>{?\\<alpha>} ?P' \\<Longrightarrow>\n  ?P \\<Rightarrow>\\<langle>?\\<alpha>\\<rangle> ?P'\n  \\<lbrakk>?P \\<Rightarrow> ?Q;\n   ?Q \\<Rightarrow>\\<langle>?\\<alpha>\\<rangle> ?Q';\n   ?Q' \\<Rightarrow> ?P'\\<rbrakk>\n  \\<Longrightarrow> ?P \\<Rightarrow>\\<langle>?\\<alpha>\\<rangle> ?P'\n  \\<lbrakk>?P \\<approx>\\<cdot> ?Q; bn ?\\<alpha> \\<sharp>* ?Q;\n   ?P \\<Rightarrow>\\<langle>?\\<alpha>\\<rangle> ?P';\n   \\<And>Q'.\n      \\<lbrakk>?Q \\<Rightarrow>\\<langle>?\\<alpha>\\<rangle> Q';\n       ?P' \\<approx>\\<cdot> Q'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "by blast"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n     (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n\ngoal (1 subgoal):\n 1. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "assume \"T = Q \\<and> S = R\""], ["proof (state)\nthis:\n  T = Q \\<and> S = R\n\ngoal (1 subgoal):\n 1. T = Q \\<and> S = R \\<Longrightarrow>\n    \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "with \\<open>Q \\<Rightarrow> R\\<close> and trans"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow> R\n  S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\n  T = Q \\<and> S = R", "show ?thesis"], ["proof (prove)\nusing this:\n  Q \\<Rightarrow> R\n  S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle>\n  T = Q \\<and> S = R\n\ngoal (1 subgoal):\n 1. \\<exists>T'.\n       T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n       (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})", "by (metis observable_transition_stepI reflpE tau_refl weak_transition_stepI weak_transition_weakI weakly_bisimilar_reflp)"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n     (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n     (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>T'.\n     T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n     (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>S T.\n     S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R} \\<longrightarrow>\n     (\\<forall>\\<alpha> S'.\n         bn \\<alpha> \\<sharp>* T \\<longrightarrow>\n         S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle> \\<longrightarrow>\n         (\\<exists>T'.\n             T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n             (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Qa \\<phi>.\n        (P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R}) \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Qa \\<Rightarrow> Q' \\<and>\n            (P \\<approx>\\<cdot> Q' \\<or> {P, Q'} = {Q, R}) \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Qa.\n        P \\<approx>\\<cdot> Qa \\<or> {P, Qa} = {Q, R} \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Qa \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Qa \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                (P' \\<approx>\\<cdot> Q' \\<or> {P', Q'} = {Q, R}))))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>S T \\<phi>.\n     (S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}) \\<and>\n     S \\<turnstile> \\<phi> \\<longrightarrow>\n     (\\<exists>T'.\n         T \\<Rightarrow> T' \\<and>\n         (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n         T' \\<turnstile> \\<phi>)\n  \\<forall>S T.\n     S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R} \\<longrightarrow>\n     (\\<forall>\\<alpha> S'.\n         bn \\<alpha> \\<sharp>* T \\<longrightarrow>\n         S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle> \\<longrightarrow>\n         (\\<exists>T'.\n             T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n             (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})))", "show \"?S \\<and> ?T\""], ["proof (prove)\nusing this:\n  \\<forall>S T \\<phi>.\n     (S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}) \\<and>\n     S \\<turnstile> \\<phi> \\<longrightarrow>\n     (\\<exists>T'.\n         T \\<Rightarrow> T' \\<and>\n         (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n         T' \\<turnstile> \\<phi>)\n  \\<forall>S T.\n     S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R} \\<longrightarrow>\n     (\\<forall>\\<alpha> S'.\n         bn \\<alpha> \\<sharp>* T \\<longrightarrow>\n         S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle> \\<longrightarrow>\n         (\\<exists>T'.\n             T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n             (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R})))\n\ngoal (1 subgoal):\n 1. (\\<forall>S T \\<phi>.\n        (S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}) \\<and>\n        S \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>T'.\n            T \\<Rightarrow> T' \\<and>\n            (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n            T' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>S T.\n        S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R} \\<longrightarrow>\n        (\\<forall>\\<alpha> S'.\n            bn \\<alpha> \\<sharp>* T \\<longrightarrow>\n            S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle> \\<longrightarrow>\n            (\\<exists>T'.\n                T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n                (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R}))))", "by metis"], ["proof (state)\nthis:\n  (\\<forall>S T \\<phi>.\n      (S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R}) \\<and>\n      S \\<turnstile> \\<phi> \\<longrightarrow>\n      (\\<exists>T'.\n          T \\<Rightarrow> T' \\<and>\n          (S \\<approx>\\<cdot> T' \\<or> {S, T'} = {Q, R}) \\<and>\n          T' \\<turnstile> \\<phi>)) \\<and>\n  (\\<forall>S T.\n      S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R} \\<longrightarrow>\n      (\\<forall>\\<alpha> S'.\n          bn \\<alpha> \\<sharp>* T \\<longrightarrow>\n          S \\<rightarrow> \\<langle>\\<alpha>,S'\\<rangle> \\<longrightarrow>\n          (\\<exists>T'.\n              T \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> T' \\<and>\n              (S' \\<approx>\\<cdot> T' \\<or> {S', T'} = {Q, R}))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_weak_bisimulation\n   (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})\n\ngoal (1 subgoal):\n 1. Q \\<approx>\\<cdot> R", "then"], ["proof (chain)\npicking this:\n  is_weak_bisimulation\n   (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})", "show ?thesis"], ["proof (prove)\nusing this:\n  is_weak_bisimulation\n   (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})\n\ngoal (1 subgoal):\n 1. Q \\<approx>\\<cdot> R", "using weakly_bisimilar_def"], ["proof (prove)\nusing this:\n  is_weak_bisimulation\n   (\\<lambda>S T. S \\<approx>\\<cdot> T \\<or> {S, T} = {Q, R})\n  ?P \\<approx>\\<cdot> ?Q \\<equiv>\n  \\<exists>R. is_weak_bisimulation R \\<and> R ?P ?Q\n\ngoal (1 subgoal):\n 1. Q \\<approx>\\<cdot> R", "by blast"], ["proof (state)\nthis:\n  Q \\<approx>\\<cdot> R\n\ngoal:\nNo subgoals!", "qed"], ["", "notation S_satisfies (infix \"\\<turnstile>\\<^sub>S\" 70)"], ["", "interpretation S_transform: weak_nominal_ts \"(\\<turnstile>\\<^sub>S)\" \"(\\<rightarrow>\\<^sub>S)\" \"Act \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weak_nominal_ts (\\<turnstile>\\<^sub>S) (\\<rightarrow>\\<^sub>S)\n     (S_action.Act \\<tau>)", "by unfold_locales (fact S_satisfies_eqvt, fact S_transition_eqvt, simp add: tau_eqvt)"], ["", "no_notation S_satisfies (infix \"\\<turnstile>\\<^sub>S\" 70) \\<comment> \\<open>denotes @{const S_transform.S_satisfies} instead\\<close>"], ["", "notation S_transform.tau_transition (infix \"\\<Rightarrow>\\<^sub>S\" 70)"], ["", "notation S_transform.observable_transition (\"_/ \\<Rightarrow>{_}\\<^sub>S/ _\" [70, 70, 71] 71)"], ["", "notation S_transform.weak_transition (\"_/ \\<Rightarrow>\\<langle>_\\<rangle>\\<^sub>S/ _\" [70, 70, 71] 71)"], ["", "notation S_transform.weakly_bisimilar (infix \"\\<approx>\\<cdot>\\<^sub>S\" 100)"], ["", "lemma S_transform_tau_transition_iff: \"P \\<Rightarrow>\\<^sub>S P' \\<longleftrightarrow> P \\<Rightarrow> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Rightarrow>\\<^sub>S P' = P \\<Rightarrow> P'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Rightarrow>\\<^sub>S P' \\<Longrightarrow> P \\<Rightarrow> P'\n 2. P \\<Rightarrow> P' \\<Longrightarrow> P \\<Rightarrow>\\<^sub>S P'", "assume \"P \\<Rightarrow>\\<^sub>S P'\""], ["proof (state)\nthis:\n  P \\<Rightarrow>\\<^sub>S P'\n\ngoal (2 subgoals):\n 1. P \\<Rightarrow>\\<^sub>S P' \\<Longrightarrow> P \\<Rightarrow> P'\n 2. P \\<Rightarrow> P' \\<Longrightarrow> P \\<Rightarrow>\\<^sub>S P'", "then"], ["proof (chain)\npicking this:\n  P \\<Rightarrow>\\<^sub>S P'", "show \"P \\<Rightarrow> P'\""], ["proof (prove)\nusing this:\n  P \\<Rightarrow>\\<^sub>S P'\n\ngoal (1 subgoal):\n 1. P \\<Rightarrow> P'", "by induct (simp, metis S_transition_Act_iff tau_step)"], ["proof (state)\nthis:\n  P \\<Rightarrow> P'\n\ngoal (1 subgoal):\n 1. P \\<Rightarrow> P' \\<Longrightarrow> P \\<Rightarrow>\\<^sub>S P'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<Rightarrow> P' \\<Longrightarrow> P \\<Rightarrow>\\<^sub>S P'", "assume \"P \\<Rightarrow> P'\""], ["proof (state)\nthis:\n  P \\<Rightarrow> P'\n\ngoal (1 subgoal):\n 1. P \\<Rightarrow> P' \\<Longrightarrow> P \\<Rightarrow>\\<^sub>S P'", "then"], ["proof (chain)\npicking this:\n  P \\<Rightarrow> P'", "show \"P \\<Rightarrow>\\<^sub>S P'\""], ["proof (prove)\nusing this:\n  P \\<Rightarrow> P'\n\ngoal (1 subgoal):\n 1. P \\<Rightarrow>\\<^sub>S P'", "by induct (simp, metis S_transform.tau_transition.simps S_transition.Act)"], ["proof (state)\nthis:\n  P \\<Rightarrow>\\<^sub>S P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_transform_observable_transition_iff: \"P \\<Rightarrow>{Act \\<alpha>}\\<^sub>S P' \\<longleftrightarrow> P \\<Rightarrow>{\\<alpha>} P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Rightarrow>{S_action.Act \\<alpha>}\\<^sub>S P' = P\n    \\<Rightarrow>{\\<alpha>} P'", "unfolding S_transform.observable_transition_def observable_transition_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>Q Q'.\n        P \\<Rightarrow>\\<^sub>S Q \\<and>\n        Q \\<rightarrow>\\<^sub>S\n        \\<langle>S_action.Act \\<alpha>,Q'\\<rangle> \\<and>\n        Q' \\<Rightarrow>\\<^sub>S P') =\n    (\\<exists>Q Q'.\n        P \\<Rightarrow> Q \\<and>\n        Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n        Q' \\<Rightarrow> P')", "by (metis S_transform_tau_transition_iff S_transition_Act_iff)"], ["", "lemma S_transform_weak_transition_iff: \"P \\<Rightarrow>\\<langle>Act \\<alpha>\\<rangle>\\<^sub>S P' \\<longleftrightarrow> P \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Rightarrow>\\<langle>S_action.Act \\<alpha>\\<rangle>\\<^sub>S P' = P\n    \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> P'", "by (simp add: S_transform_observable_transition_iff S_transform_tau_transition_iff weak_transition_def)"], ["", "text \\<open>Weak bisimilarity is equivalent to weak bisimilarity in the $S$-transform.\\<close>"], ["", "lemma weakly_bisimilar_is_S_transform_weak_bisimulation: \"S_transform.is_weak_bisimulation weakly_bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform.is_weak_bisimulation (\\<approx>\\<cdot>)", "unfolding S_transform.is_weak_bisimulation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<approx>\\<cdot>) \\<and>\n    (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot> Q \\<and>\n        P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n            P \\<approx>\\<cdot> Q' \\<and>\n            Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\\<^sub>S Q' \\<and>\n                P' \\<approx>\\<cdot> Q')))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. symp (\\<approx>\\<cdot>)\n 2. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot> Q \\<and>\n        P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n            P \\<approx>\\<cdot> Q' \\<and>\n            Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\\<^sub>S Q' \\<and>\n                P' \\<approx>\\<cdot> Q')))", "show \"symp weakly_bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<approx>\\<cdot>)", "by (fact weakly_bisimilar_symp)"], ["proof (state)\nthis:\n  symp (\\<approx>\\<cdot>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot> Q \\<and>\n        P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n            P \\<approx>\\<cdot> Q' \\<and>\n            Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\\<^sub>S Q' \\<and>\n                P' \\<approx>\\<cdot> Q')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot> Q \\<and>\n        P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n            P \\<approx>\\<cdot> Q' \\<and>\n            Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\\<^sub>S Q' \\<and>\n                P' \\<approx>\\<cdot> Q')))", "have \"\\<forall>P Q \\<phi>. P \\<approx>\\<cdot> Q \\<and> P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow> (\\<exists>Q'. Q \\<Rightarrow>\\<^sub>S Q' \\<and> P \\<approx>\\<cdot> Q' \\<and> Q' \\<turnstile>\\<^sub>S \\<phi>)\" (is ?S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q \\<phi>.\n       P \\<approx>\\<cdot> Q \\<and>\n       P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n       (\\<exists>Q'.\n           Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n           P \\<approx>\\<cdot> Q' \\<and> Q' \\<turnstile>\\<^sub>S \\<phi>)", "by (simp add: S_transform.S_satisfies_def)"], ["proof (state)\nthis:\n  \\<forall>P Q \\<phi>.\n     P \\<approx>\\<cdot> Q \\<and>\n     P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n     (\\<exists>Q'.\n         Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n         P \\<approx>\\<cdot> Q' \\<and> Q' \\<turnstile>\\<^sub>S \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot> Q \\<and>\n        P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n            P \\<approx>\\<cdot> Q' \\<and>\n            Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\\<^sub>S Q' \\<and>\n                P' \\<approx>\\<cdot> Q')))", "moreover"], ["proof (state)\nthis:\n  \\<forall>P Q \\<phi>.\n     P \\<approx>\\<cdot> Q \\<and>\n     P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n     (\\<exists>Q'.\n         Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n         P \\<approx>\\<cdot> Q' \\<and> Q' \\<turnstile>\\<^sub>S \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot> Q \\<and>\n        P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n            P \\<approx>\\<cdot> Q' \\<and>\n            Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\\<^sub>S Q' \\<and>\n                P' \\<approx>\\<cdot> Q')))", "have \"\\<forall>P Q. P \\<approx>\\<cdot> Q \\<longrightarrow> (\\<forall>\\<alpha>\\<^sub>S P'. bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow> P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow> (\\<exists>Q'. Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q' \\<and> P' \\<approx>\\<cdot> Q'))\" (is ?T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q.\n       P \\<approx>\\<cdot> Q \\<longrightarrow>\n       (\\<forall>\\<alpha>\\<^sub>S P'.\n           bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n           P \\<rightarrow>\\<^sub>S\n           \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n           (\\<exists>Q'.\n               Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n               Q' \\<and> P' \\<approx>\\<cdot> Q'))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha>\\<^sub>S P'.\n       \\<lbrakk>P \\<approx>\\<cdot> Q; bn \\<alpha>\\<^sub>S \\<sharp>* Q;\n        P \\<rightarrow>\\<^sub>S\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q' \\<and> P' \\<approx>\\<cdot> Q'", "fix P Q \\<alpha>\\<^sub>S P'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha>\\<^sub>S P'.\n       \\<lbrakk>P \\<approx>\\<cdot> Q; bn \\<alpha>\\<^sub>S \\<sharp>* Q;\n        P \\<rightarrow>\\<^sub>S\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q' \\<and> P' \\<approx>\\<cdot> Q'", "assume bisim: \"P \\<approx>\\<cdot> Q\" and fresh\\<^sub>S: \"bn \\<alpha>\\<^sub>S \\<sharp>* Q\" and trans\\<^sub>S: \"P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\""], ["proof (state)\nthis:\n  P \\<approx>\\<cdot> Q\n  bn \\<alpha>\\<^sub>S \\<sharp>* Q\n  P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha>\\<^sub>S P'.\n       \\<lbrakk>P \\<approx>\\<cdot> Q; bn \\<alpha>\\<^sub>S \\<sharp>* Q;\n        P \\<rightarrow>\\<^sub>S\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q' \\<and> P' \\<approx>\\<cdot> Q'", "obtain Q' where \"Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\" and \"P' \\<approx>\\<cdot> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                 Q';\n         P' \\<approx>\\<cdot> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using trans\\<^sub>S"], ["proof (prove)\nusing this:\n  P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                 Q';\n         P' \\<approx>\\<cdot> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases rule: S_transition_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Act \\<alpha>)"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>\\<alpha>\\<^sub>S = Act \\<alpha>\\<close> and fresh\\<^sub>S"], ["proof (chain)\npicking this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  bn \\<alpha>\\<^sub>S \\<sharp>* Q", "have \"bn \\<alpha> \\<sharp>* Q\""], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  bn \\<alpha>\\<^sub>S \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* Q", "by simp"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* Q\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "with bisim and \\<open>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  P \\<approx>\\<cdot> Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* Q", "obtain Q' where transQ: \"Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'\" and bisim': \"P' \\<approx>\\<cdot> Q'\""], ["proof (prove)\nusing this:\n  P \\<approx>\\<cdot> Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q';\n         P' \\<approx>\\<cdot> Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis is_weak_bisimulation_def weakly_bisimilar_is_weak_bisimulation)"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'\n  P' \\<approx>\\<cdot> Q'\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>\\<alpha>\\<^sub>S = Act \\<alpha>\\<close> and transQ"], ["proof (chain)\npicking this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'", "have \"Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\""], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>S = S_action.Act \\<alpha>\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'\n\ngoal (1 subgoal):\n 1. Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'", "by (metis S_transform_weak_transition_iff)"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n\ngoal (2 subgoals):\n 1. \\<And>\\<alpha>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Act \\<alpha>;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "with bisim'"], ["proof (chain)\npicking this:\n  P' \\<approx>\\<cdot> Q'\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'", "show \"thesis\""], ["proof (prove)\nusing this:\n  P' \\<approx>\\<cdot> Q'\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>\\<And>Q'. Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q' \\<Longrightarrow> P' \\<approx>\\<cdot> Q' \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\nusing this:\n  P' \\<approx>\\<cdot> Q'\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n  \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S ?Q';\n   P' \\<approx>\\<cdot> ?Q'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Pred \\<phi>)"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n  P' = P\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "from bisim and \\<open>P \\<turnstile> \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  P \\<approx>\\<cdot> Q\n  P \\<turnstile> \\<phi>", "obtain Q' where \"Q \\<Rightarrow> Q'\" and \"P \\<approx>\\<cdot> Q'\" and \"Q' \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  P \\<approx>\\<cdot> Q\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<Rightarrow> Q'; P \\<approx>\\<cdot> Q';\n         Q' \\<turnstile> \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis is_weak_bisimulation_def weakly_bisimilar_is_weak_bisimulation)"], ["proof (state)\nthis:\n  Q \\<Rightarrow> Q'\n  P \\<approx>\\<cdot> Q'\n  Q' \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>Q \\<Rightarrow> Q'\\<close>"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow> Q'", "have \"Q \\<Rightarrow>\\<^sub>S Q'\""], ["proof (prove)\nusing this:\n  Q \\<Rightarrow> Q'\n\ngoal (1 subgoal):\n 1. Q \\<Rightarrow>\\<^sub>S Q'", "by (metis S_transform_tau_transition_iff)"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>Q' \\<turnstile> \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  Q' \\<turnstile> \\<phi>", "have \"Q' \\<rightarrow>\\<^sub>S \\<langle>Pred \\<phi>,Q'\\<rangle>\""], ["proof (prove)\nusing this:\n  Q' \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>", "by (simp add: S_transition.Pred)"], ["proof (state)\nthis:\n  Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow>\\<^sub>S Q'\n  Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>", "have \"Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\""], ["proof (prove)\nusing this:\n  Q \\<Rightarrow>\\<^sub>S Q'\n  Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'", "using \\<open>\\<alpha>\\<^sub>S = Pred \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  Q \\<Rightarrow>\\<^sub>S Q'\n  Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q'\\<rangle>\n  \\<alpha>\\<^sub>S = S_action.Pred \\<phi>\n\ngoal (1 subgoal):\n 1. Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'", "by (metis S_transform.observable_transitionI S_transform.tau_refl S_transform.weak_transition_stepI)"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<lbrakk>\\<And>Q'.\n                   \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q';\n                    P' \\<approx>\\<cdot> Q'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<alpha>\\<^sub>S = S_action.Pred \\<phi>; P' = P;\n        P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> thesis", "with \\<open>P' = P\\<close> and \\<open>P \\<approx>\\<cdot> Q'\\<close>"], ["proof (chain)\npicking this:\n  P' = P\n  P \\<approx>\\<cdot> Q'\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'", "show \"thesis\""], ["proof (prove)\nusing this:\n  P' = P\n  P \\<approx>\\<cdot> Q'\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>\\<And>Q'. Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q' \\<Longrightarrow> P' \\<approx>\\<cdot> Q' \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\nusing this:\n  P' = P\n  P \\<approx>\\<cdot> Q'\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n  \\<lbrakk>Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S ?Q';\n   P' \\<approx>\\<cdot> ?Q'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n  P' \\<approx>\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha>\\<^sub>S P'.\n       \\<lbrakk>P \\<approx>\\<cdot> Q; bn \\<alpha>\\<^sub>S \\<sharp>* Q;\n        P \\<rightarrow>\\<^sub>S\n        \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                            Q' \\<and> P' \\<approx>\\<cdot> Q'", "then"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n  P' \\<approx>\\<cdot> Q'", "show \"\\<exists>Q'. Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q' \\<and> P' \\<approx>\\<cdot> Q'\""], ["proof (prove)\nusing this:\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q'\n  P' \\<approx>\\<cdot> Q'\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q' \\<and>\n       P' \\<approx>\\<cdot> Q'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S Q' \\<and>\n     P' \\<approx>\\<cdot> Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     P \\<approx>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>S P'.\n         bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow>\\<^sub>S\n         \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n             Q' \\<and> P' \\<approx>\\<cdot> Q'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot> Q \\<and>\n        P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n            P \\<approx>\\<cdot> Q' \\<and>\n            Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\\<^sub>S Q' \\<and>\n                P' \\<approx>\\<cdot> Q')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>P Q \\<phi>.\n     P \\<approx>\\<cdot> Q \\<and>\n     P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n     (\\<exists>Q'.\n         Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n         P \\<approx>\\<cdot> Q' \\<and> Q' \\<turnstile>\\<^sub>S \\<phi>)\n  \\<forall>P Q.\n     P \\<approx>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>S P'.\n         bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow>\\<^sub>S\n         \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n             Q' \\<and> P' \\<approx>\\<cdot> Q'))", "show \"?S \\<and> ?T\""], ["proof (prove)\nusing this:\n  \\<forall>P Q \\<phi>.\n     P \\<approx>\\<cdot> Q \\<and>\n     P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n     (\\<exists>Q'.\n         Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n         P \\<approx>\\<cdot> Q' \\<and> Q' \\<turnstile>\\<^sub>S \\<phi>)\n  \\<forall>P Q.\n     P \\<approx>\\<cdot> Q \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>S P'.\n         bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow>\\<^sub>S\n         \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n             Q' \\<and> P' \\<approx>\\<cdot> Q'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot> Q \\<and>\n        P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n            P \\<approx>\\<cdot> Q' \\<and>\n            Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot> Q \\<longrightarrow>\n        (\\<forall>\\<alpha>\\<^sub>S P'.\n            bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>S\n            \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n                Q' \\<and> P' \\<approx>\\<cdot> Q')))", "by metis"], ["proof (state)\nthis:\n  (\\<forall>P Q \\<phi>.\n      P \\<approx>\\<cdot> Q \\<and>\n      P \\<turnstile>\\<^sub>S \\<phi> \\<longrightarrow>\n      (\\<exists>Q'.\n          Q \\<Rightarrow>\\<^sub>S Q' \\<and>\n          P \\<approx>\\<cdot> Q' \\<and>\n          Q' \\<turnstile>\\<^sub>S \\<phi>)) \\<and>\n  (\\<forall>P Q.\n      P \\<approx>\\<cdot> Q \\<longrightarrow>\n      (\\<forall>\\<alpha>\\<^sub>S P'.\n          bn \\<alpha>\\<^sub>S \\<sharp>* Q \\<longrightarrow>\n          P \\<rightarrow>\\<^sub>S\n          \\<langle>\\<alpha>\\<^sub>S,P'\\<rangle> \\<longrightarrow>\n          (\\<exists>Q'.\n              Q \\<Rightarrow>\\<langle>\\<alpha>\\<^sub>S\\<rangle>\\<^sub>S\n              Q' \\<and> P' \\<approx>\\<cdot> Q')))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_transform_weakly_bisimilar_is_weak_bisimulation: \"is_weak_bisimulation S_transform.weakly_bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_weak_bisimulation (\\<approx>\\<cdot>\\<^sub>S)", "unfolding is_weak_bisimulation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<approx>\\<cdot>\\<^sub>S) \\<and>\n    (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow> Q' \\<and>\n            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                P' \\<approx>\\<cdot>\\<^sub>S Q')))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. symp (\\<approx>\\<cdot>\\<^sub>S)\n 2. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow> Q' \\<and>\n            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                P' \\<approx>\\<cdot>\\<^sub>S Q')))", "show \"symp S_transform.weakly_bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (\\<approx>\\<cdot>\\<^sub>S)", "by (fact S_transform.weakly_bisimilar_symp)"], ["proof (state)\nthis:\n  symp (\\<approx>\\<cdot>\\<^sub>S)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow> Q' \\<and>\n            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                P' \\<approx>\\<cdot>\\<^sub>S Q')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow> Q' \\<and>\n            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                P' \\<approx>\\<cdot>\\<^sub>S Q')))", "have \"\\<forall>P Q \\<phi>. P \\<approx>\\<cdot>\\<^sub>S Q \\<and> P \\<turnstile> \\<phi> \\<longrightarrow> (\\<exists>Q'. Q \\<Rightarrow> Q' \\<and> P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>)\" (is ?S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q \\<phi>.\n       P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n       P \\<turnstile> \\<phi> \\<longrightarrow>\n       (\\<exists>Q'.\n           Q \\<Rightarrow> Q' \\<and>\n           P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>)", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "fix P Q \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "assume bisim: \"P \\<approx>\\<cdot>\\<^sub>S Q\" and valid: \"P \\<turnstile> \\<phi>\""], ["proof (state)\nthis:\n  P \\<approx>\\<cdot>\\<^sub>S Q\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "from valid"], ["proof (chain)\npicking this:\n  P \\<turnstile> \\<phi>", "have \"P \\<Rightarrow>\\<langle>Pred \\<phi>\\<rangle>\\<^sub>S P\""], ["proof (prove)\nusing this:\n  P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. P \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S P", "by (simp add: S_transition.Pred)"], ["proof (state)\nthis:\n  P \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S P\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "moreover"], ["proof (state)\nthis:\n  P \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S P\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "have \"bn (Pred \\<phi>) \\<sharp>* Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn (S_action.Pred \\<phi>) \\<sharp>* Q", "by (simp add: fresh_star_def)"], ["proof (state)\nthis:\n  bn (S_action.Pred \\<phi>) \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  P \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S P\n  bn (S_action.Pred \\<phi>) \\<sharp>* Q", "obtain Q'' where trans': \"Q \\<Rightarrow>\\<langle>Pred \\<phi>\\<rangle>\\<^sub>S Q''\" and bisim': \"P \\<approx>\\<cdot>\\<^sub>S Q''\""], ["proof (prove)\nusing this:\n  P \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S P\n  bn (S_action.Pred \\<phi>) \\<sharp>* Q\n\ngoal (1 subgoal):\n 1. (\\<And>Q''.\n        \\<lbrakk>Q \\<Rightarrow>\\<langle>S_action.Pred\n    \\<phi>\\<rangle>\\<^sub>S\n                 Q'';\n         P \\<approx>\\<cdot>\\<^sub>S Q''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bisim"], ["proof (prove)\nusing this:\n  P \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S P\n  bn (S_action.Pred \\<phi>) \\<sharp>* Q\n  P \\<approx>\\<cdot>\\<^sub>S Q\n\ngoal (1 subgoal):\n 1. (\\<And>Q''.\n        \\<lbrakk>Q \\<Rightarrow>\\<langle>S_action.Pred\n    \\<phi>\\<rangle>\\<^sub>S\n                 Q'';\n         P \\<approx>\\<cdot>\\<^sub>S Q''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis S_transform.weakly_bisimilar_weak_simulation_step)"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S Q''\n  P \\<approx>\\<cdot>\\<^sub>S Q''\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "from trans'"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S Q''", "obtain Q' Q\\<^sub>1 where trans\\<^sub>1: \"Q \\<Rightarrow>\\<^sub>S Q'\" and trans\\<^sub>2: \"Q' \\<rightarrow>\\<^sub>S \\<langle>Pred \\<phi>, Q\\<^sub>1\\<rangle>\" and trans\\<^sub>3: \"Q\\<^sub>1 \\<Rightarrow>\\<^sub>S Q''\""], ["proof (prove)\nusing this:\n  Q \\<Rightarrow>\\<langle>S_action.Pred \\<phi>\\<rangle>\\<^sub>S Q''\n\ngoal (1 subgoal):\n 1. (\\<And>Q' Q\\<^sub>1.\n        \\<lbrakk>Q \\<Rightarrow>\\<^sub>S Q';\n         Q' \\<rightarrow>\\<^sub>S\n         \\<langle>S_action.Pred \\<phi>,Q\\<^sub>1\\<rangle>;\n         Q\\<^sub>1 \\<Rightarrow>\\<^sub>S Q''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: S_transform.observable_transition_def)"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<^sub>S Q'\n  Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q\\<^sub>1\\<rangle>\n  Q\\<^sub>1 \\<Rightarrow>\\<^sub>S Q''\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "from trans\\<^sub>2"], ["proof (chain)\npicking this:\n  Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q\\<^sub>1\\<rangle>", "have eq: \"Q\\<^sub>1 = Q'\" and \"Q' \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q\\<^sub>1\\<rangle>\n\ngoal (1 subgoal):\n 1. Q\\<^sub>1 = Q' &&& Q' \\<turnstile> \\<phi>", "using S_transition_Pred_iff"], ["proof (prove)\nusing this:\n  Q' \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred \\<phi>,Q\\<^sub>1\\<rangle>\n  ?P \\<rightarrow>\\<^sub>S \\<langle>S_action.Pred ?\\<phi>,?P'\\<rangle> =\n  (?P' = ?P \\<and> ?P \\<turnstile> ?\\<phi>)\n\ngoal (1 subgoal):\n 1. Q\\<^sub>1 = Q' &&& Q' \\<turnstile> \\<phi>", "by blast+"], ["proof (state)\nthis:\n  Q\\<^sub>1 = Q'\n  Q' \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "moreover"], ["proof (state)\nthis:\n  Q\\<^sub>1 = Q'\n  Q' \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "from trans\\<^sub>1 and trans\\<^sub>3 and eq and bisim and bisim'"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow>\\<^sub>S Q'\n  Q\\<^sub>1 \\<Rightarrow>\\<^sub>S Q''\n  Q\\<^sub>1 = Q'\n  P \\<approx>\\<cdot>\\<^sub>S Q\n  P \\<approx>\\<cdot>\\<^sub>S Q''", "have \"P \\<approx>\\<cdot>\\<^sub>S Q'\""], ["proof (prove)\nusing this:\n  Q \\<Rightarrow>\\<^sub>S Q'\n  Q\\<^sub>1 \\<Rightarrow>\\<^sub>S Q''\n  Q\\<^sub>1 = Q'\n  P \\<approx>\\<cdot>\\<^sub>S Q\n  P \\<approx>\\<cdot>\\<^sub>S Q''\n\ngoal (1 subgoal):\n 1. P \\<approx>\\<cdot>\\<^sub>S Q'", "by (metis S_transform.weakly_bisimilar_equivp S_transform.weakly_bisimilar_tau_transition_weakly_bisimilar equivp_def)"], ["proof (state)\nthis:\n  P \\<approx>\\<cdot>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "moreover"], ["proof (state)\nthis:\n  P \\<approx>\\<cdot>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "from trans\\<^sub>1"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow>\\<^sub>S Q'", "have \"Q \\<Rightarrow> Q'\""], ["proof (prove)\nusing this:\n  Q \\<Rightarrow>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. Q \\<Rightarrow> Q'", "by (metis S_transform_tau_transition_iff)"], ["proof (state)\nthis:\n  Q \\<Rightarrow> Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<phi>.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow> Q' \\<and>\n                            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n                            Q' \\<turnstile> \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  Q\\<^sub>1 = Q'\n  Q' \\<turnstile> \\<phi>\n  P \\<approx>\\<cdot>\\<^sub>S Q'\n  Q \\<Rightarrow> Q'", "show \"\\<exists>Q'. Q \\<Rightarrow> Q' \\<and> P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  Q\\<^sub>1 = Q'\n  Q' \\<turnstile> \\<phi>\n  P \\<approx>\\<cdot>\\<^sub>S Q'\n  Q \\<Rightarrow> Q'\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       Q \\<Rightarrow> Q' \\<and>\n       P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>", "by metis"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     Q \\<Rightarrow> Q' \\<and>\n     P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q \\<phi>.\n     P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n     P \\<turnstile> \\<phi> \\<longrightarrow>\n     (\\<exists>Q'.\n         Q \\<Rightarrow> Q' \\<and>\n         P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow> Q' \\<and>\n            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                P' \\<approx>\\<cdot>\\<^sub>S Q')))", "moreover"], ["proof (state)\nthis:\n  \\<forall>P Q \\<phi>.\n     P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n     P \\<turnstile> \\<phi> \\<longrightarrow>\n     (\\<exists>Q'.\n         Q \\<Rightarrow> Q' \\<and>\n         P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow> Q' \\<and>\n            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                P' \\<approx>\\<cdot>\\<^sub>S Q')))", "have \"\\<forall>P Q. P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow> (\\<forall>\\<alpha> P'. bn \\<alpha> \\<sharp>* Q \\<longrightarrow> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow> (\\<exists>Q'. Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and> P' \\<approx>\\<cdot>\\<^sub>S Q'))\" (is ?T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q.\n       P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n       (\\<forall>\\<alpha> P'.\n           bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n           P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n           (\\<exists>Q'.\n               Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n               P' \\<approx>\\<cdot>\\<^sub>S Q'))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            Q' \\<and> P' \\<approx>\\<cdot>\\<^sub>S Q'", "fix P Q \\<alpha> P'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            Q' \\<and> P' \\<approx>\\<cdot>\\<^sub>S Q'", "assume bisim: \"P \\<approx>\\<cdot>\\<^sub>S Q\" and fresh: \"bn \\<alpha> \\<sharp>* Q\" and trans: \"P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (state)\nthis:\n  P \\<approx>\\<cdot>\\<^sub>S Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            Q' \\<and> P' \\<approx>\\<cdot>\\<^sub>S Q'", "from trans"], ["proof (chain)\npicking this:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "have \"P \\<rightarrow>\\<^sub>S \\<langle>Act \\<alpha>,P'\\<rangle>\""], ["proof (prove)\nusing this:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle>", "by (fact S_transition.Act)"], ["proof (state)\nthis:\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            Q' \\<and> P' \\<approx>\\<cdot>\\<^sub>S Q'", "with bisim and fresh"], ["proof (chain)\npicking this:\n  P \\<approx>\\<cdot>\\<^sub>S Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle>", "obtain Q' where trans': \"Q \\<Rightarrow>\\<langle>Act \\<alpha>\\<rangle>\\<^sub>S Q'\" and bisim': \"P' \\<approx>\\<cdot>\\<^sub>S Q'\""], ["proof (prove)\nusing this:\n  P \\<approx>\\<cdot>\\<^sub>S Q\n  bn \\<alpha> \\<sharp>* Q\n  P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act \\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<Rightarrow>\\<langle>S_action.Act\n    \\<alpha>\\<rangle>\\<^sub>S\n                 Q';\n         P' \\<approx>\\<cdot>\\<^sub>S Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis S_transform.is_weak_bisimulation_def S_transform.weakly_bisimilar_is_weak_bisimulation bn_S_action.simps(1))"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<langle>S_action.Act \\<alpha>\\<rangle>\\<^sub>S Q'\n  P' \\<approx>\\<cdot>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            Q' \\<and> P' \\<approx>\\<cdot>\\<^sub>S Q'", "from trans'"], ["proof (chain)\npicking this:\n  Q \\<Rightarrow>\\<langle>S_action.Act \\<alpha>\\<rangle>\\<^sub>S Q'", "have \"Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'\""], ["proof (prove)\nusing this:\n  Q \\<Rightarrow>\\<langle>S_action.Act \\<alpha>\\<rangle>\\<^sub>S Q'\n\ngoal (1 subgoal):\n 1. Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'", "by (metis S_transform_weak_transition_iff)"], ["proof (state)\nthis:\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'\n\ngoal (1 subgoal):\n 1. \\<And>P Q \\<alpha> P'.\n       \\<lbrakk>P \\<approx>\\<cdot>\\<^sub>S Q; bn \\<alpha> \\<sharp>* Q;\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle>\n                            Q' \\<and> P' \\<approx>\\<cdot>\\<^sub>S Q'", "with bisim'"], ["proof (chain)\npicking this:\n  P' \\<approx>\\<cdot>\\<^sub>S Q'\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'", "show \"\\<exists>Q'. Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and> P' \\<approx>\\<cdot>\\<^sub>S Q'\""], ["proof (prove)\nusing this:\n  P' \\<approx>\\<cdot>\\<^sub>S Q'\n  Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q'\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n       P' \\<approx>\\<cdot>\\<^sub>S Q'", "by metis"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n     P' \\<approx>\\<cdot>\\<^sub>S Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<alpha> P'.\n         bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n             P' \\<approx>\\<cdot>\\<^sub>S Q'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow> Q' \\<and>\n            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                P' \\<approx>\\<cdot>\\<^sub>S Q')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>P Q \\<phi>.\n     P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n     P \\<turnstile> \\<phi> \\<longrightarrow>\n     (\\<exists>Q'.\n         Q \\<Rightarrow> Q' \\<and>\n         P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>)\n  \\<forall>P Q.\n     P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<alpha> P'.\n         bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n             P' \\<approx>\\<cdot>\\<^sub>S Q'))", "show \"?S \\<and> ?T\""], ["proof (prove)\nusing this:\n  \\<forall>P Q \\<phi>.\n     P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n     P \\<turnstile> \\<phi> \\<longrightarrow>\n     (\\<exists>Q'.\n         Q \\<Rightarrow> Q' \\<and>\n         P \\<approx>\\<cdot>\\<^sub>S Q' \\<and> Q' \\<turnstile> \\<phi>)\n  \\<forall>P Q.\n     P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n     (\\<forall>\\<alpha> P'.\n         bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n         P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q'.\n             Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n             P' \\<approx>\\<cdot>\\<^sub>S Q'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q \\<phi>.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n        P \\<turnstile> \\<phi> \\<longrightarrow>\n        (\\<exists>Q'.\n            Q \\<Rightarrow> Q' \\<and>\n            P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n            Q' \\<turnstile> \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n                P' \\<approx>\\<cdot>\\<^sub>S Q')))", "by metis"], ["proof (state)\nthis:\n  (\\<forall>P Q \\<phi>.\n      P \\<approx>\\<cdot>\\<^sub>S Q \\<and>\n      P \\<turnstile> \\<phi> \\<longrightarrow>\n      (\\<exists>Q'.\n          Q \\<Rightarrow> Q' \\<and>\n          P \\<approx>\\<cdot>\\<^sub>S Q' \\<and>\n          Q' \\<turnstile> \\<phi>)) \\<and>\n  (\\<forall>P Q.\n      P \\<approx>\\<cdot>\\<^sub>S Q \\<longrightarrow>\n      (\\<forall>\\<alpha> P'.\n          bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n          P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n          (\\<exists>Q'.\n              Q \\<Rightarrow>\\<langle>\\<alpha>\\<rangle> Q' \\<and>\n              P' \\<approx>\\<cdot>\\<^sub>S Q')))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem S_transform_weakly_bisimilar_iff: \"P \\<approx>\\<cdot>\\<^sub>S Q \\<longleftrightarrow> P \\<approx>\\<cdot> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<approx>\\<cdot>\\<^sub>S Q = P \\<approx>\\<cdot> Q", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<approx>\\<cdot>\\<^sub>S Q \\<Longrightarrow> P \\<approx>\\<cdot> Q\n 2. P \\<approx>\\<cdot> Q \\<Longrightarrow> P \\<approx>\\<cdot>\\<^sub>S Q", "assume \"P \\<approx>\\<cdot>\\<^sub>S Q\""], ["proof (state)\nthis:\n  P \\<approx>\\<cdot>\\<^sub>S Q\n\ngoal (2 subgoals):\n 1. P \\<approx>\\<cdot>\\<^sub>S Q \\<Longrightarrow> P \\<approx>\\<cdot> Q\n 2. P \\<approx>\\<cdot> Q \\<Longrightarrow> P \\<approx>\\<cdot>\\<^sub>S Q", "then"], ["proof (chain)\npicking this:\n  P \\<approx>\\<cdot>\\<^sub>S Q", "show \"P \\<approx>\\<cdot> Q\""], ["proof (prove)\nusing this:\n  P \\<approx>\\<cdot>\\<^sub>S Q\n\ngoal (1 subgoal):\n 1. P \\<approx>\\<cdot> Q", "by (metis S_transform_weakly_bisimilar_is_weak_bisimulation weakly_bisimilar_def)"], ["proof (state)\nthis:\n  P \\<approx>\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<approx>\\<cdot> Q \\<Longrightarrow> P \\<approx>\\<cdot>\\<^sub>S Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<approx>\\<cdot> Q \\<Longrightarrow> P \\<approx>\\<cdot>\\<^sub>S Q", "assume \"P \\<approx>\\<cdot> Q\""], ["proof (state)\nthis:\n  P \\<approx>\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<approx>\\<cdot> Q \\<Longrightarrow> P \\<approx>\\<cdot>\\<^sub>S Q", "then"], ["proof (chain)\npicking this:\n  P \\<approx>\\<cdot> Q", "show \"P \\<approx>\\<cdot>\\<^sub>S Q\""], ["proof (prove)\nusing this:\n  P \\<approx>\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<approx>\\<cdot>\\<^sub>S Q", "by (metis S_transform.weakly_bisimilar_def weakly_bisimilar_is_S_transform_weak_bisimulation)"], ["proof (state)\nthis:\n  P \\<approx>\\<cdot>\\<^sub>S Q\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Translation of (strong) formulas into formulas without predicates\\<close>"], ["", "text \\<open>Since we defined formulas via a manual quotient construction, we also need to define the\n$S$-transform via lifting from the underlying type of infinitely branching trees. As before, we\ncannot use {\\bf nominal\\_function} because that generates proof obligations where, for formulas\nof the form~@{term \"Conj xset\"}, the assumption that~@{term xset} has finite support is missing.\\<close>"], ["", "text \\<open>The following auxiliary function returns trees (modulo $\\alpha$-equivalence) rather than\nformulas. This allows us to prove equivariance for \\emph{all} argument trees, without an assumption\nthat they are (hereditarily) finitely supported. Further below--after this auxiliary function has\nbeen lifted to (strong) formulas as arguments--we derive a version that returns formulas.\\<close>"], ["", "primrec S_transform_Tree :: \"('idx,'pred::fs,'act::bn) Tree \\<Rightarrow> ('idx, unit, ('act,'pred) S_action) Tree\\<^sub>\\<alpha>\" where\n  \"S_transform_Tree (tConj tset) = Conj\\<^sub>\\<alpha> (map_bset S_transform_Tree tset)\"\n| \"S_transform_Tree (tNot t) = Not\\<^sub>\\<alpha> (S_transform_Tree t)\"\n| \"S_transform_Tree (tPred \\<phi>) = Act\\<^sub>\\<alpha> (S_action.Pred \\<phi>) (Conj\\<^sub>\\<alpha> bempty)\"\n| \"S_transform_Tree (tAct \\<alpha> t) = Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>) (S_transform_Tree t)\""], ["", "lemma S_transform_Tree_eqvt [eqvt]: \"p \\<bullet> S_transform_Tree t = S_transform_Tree (p \\<bullet> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> S_transform_Tree t = S_transform_Tree (p \\<bullet> t)", "proof (induct t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           p \\<bullet> S_transform_Tree xa =\n           S_transform_Tree (p \\<bullet> xa)) \\<Longrightarrow>\n       p \\<bullet> S_transform_Tree (tConj x) =\n       S_transform_Tree (p \\<bullet> tConj x)\n 2. \\<And>t.\n       p \\<bullet> S_transform_Tree t =\n       S_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> S_transform_Tree (tNot t) =\n       S_transform_Tree (p \\<bullet> tNot t)\n 3. \\<And>x.\n       p \\<bullet> S_transform_Tree (tPred x) =\n       S_transform_Tree (p \\<bullet> tPred x)\n 4. \\<And>x1a t.\n       p \\<bullet> S_transform_Tree t =\n       S_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> S_transform_Tree (tAct x1a t) =\n       S_transform_Tree (p \\<bullet> tAct x1a t)", "case (tConj tset)"], ["proof (state)\nthis:\n  ?xa \\<in> set_bset tset \\<Longrightarrow>\n  p \\<bullet> S_transform_Tree ?xa = S_transform_Tree (p \\<bullet> ?xa)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           p \\<bullet> S_transform_Tree xa =\n           S_transform_Tree (p \\<bullet> xa)) \\<Longrightarrow>\n       p \\<bullet> S_transform_Tree (tConj x) =\n       S_transform_Tree (p \\<bullet> tConj x)\n 2. \\<And>t.\n       p \\<bullet> S_transform_Tree t =\n       S_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> S_transform_Tree (tNot t) =\n       S_transform_Tree (p \\<bullet> tNot t)\n 3. \\<And>x.\n       p \\<bullet> S_transform_Tree (tPred x) =\n       S_transform_Tree (p \\<bullet> tPred x)\n 4. \\<And>x1a t.\n       p \\<bullet> S_transform_Tree t =\n       S_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> S_transform_Tree (tAct x1a t) =\n       S_transform_Tree (p \\<bullet> tAct x1a t)", "then"], ["proof (chain)\npicking this:\n  ?xa \\<in> set_bset tset \\<Longrightarrow>\n  p \\<bullet> S_transform_Tree ?xa = S_transform_Tree (p \\<bullet> ?xa)", "show ?case"], ["proof (prove)\nusing this:\n  ?xa \\<in> set_bset tset \\<Longrightarrow>\n  p \\<bullet> S_transform_Tree ?xa = S_transform_Tree (p \\<bullet> ?xa)\n\ngoal (1 subgoal):\n 1. p \\<bullet> S_transform_Tree (tConj tset) =\n    S_transform_Tree (p \\<bullet> tConj tset)", "by simp (metis (no_types, hide_lams) bset.map_cong0 map_bset_eqvt permute_fun_def permute_minus_cancel(1))"], ["proof (state)\nthis:\n  p \\<bullet> S_transform_Tree (tConj tset) =\n  S_transform_Tree (p \\<bullet> tConj tset)\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       p \\<bullet> S_transform_Tree t =\n       S_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> S_transform_Tree (tNot t) =\n       S_transform_Tree (p \\<bullet> tNot t)\n 2. \\<And>x.\n       p \\<bullet> S_transform_Tree (tPred x) =\n       S_transform_Tree (p \\<bullet> tPred x)\n 3. \\<And>x1a t.\n       p \\<bullet> S_transform_Tree t =\n       S_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> S_transform_Tree (tAct x1a t) =\n       S_transform_Tree (p \\<bullet> tAct x1a t)", "qed simp_all"], ["", "text \\<open>@{const S_transform_Tree} respects $\\alpha$-equivalence.\\<close>"], ["", "lemma alpha_Tree_S_transform_Tree:\n  assumes \"t1 =\\<^sub>\\<alpha> t2\"\n  shows \"S_transform_Tree t1 = S_transform_Tree t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_Tree t1 = S_transform_Tree t2", "using assms"], ["proof (prove)\nusing this:\n  t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. S_transform_Tree t1 = S_transform_Tree t2", "proof (induction t1 t2 rule: alpha_Tree_induct')"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> S_transform_Tree a =\n                                     S_transform_Tree b;\n        tConj tset1 =\\<^sub>\\<alpha> tConj tset2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tConj tset1) =\n                         S_transform_Tree (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 3. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 6. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 7. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 9. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 10. \\<And>v va vb.\n        tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n        S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\nA total of 22 subgoals...", "case (alpha_tConj tset1 tset2)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> S_transform_Tree ?a = S_transform_Tree ?b\n  tConj tset1 =\\<^sub>\\<alpha> tConj tset2\n\ngoal (22 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> S_transform_Tree a =\n                                     S_transform_Tree b;\n        tConj tset1 =\\<^sub>\\<alpha> tConj tset2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tConj tset1) =\n                         S_transform_Tree (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 3. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 6. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 7. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 9. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 10. \\<And>v va vb.\n        tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n        S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\nA total of 22 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> S_transform_Tree ?a = S_transform_Tree ?b\n  tConj tset1 =\\<^sub>\\<alpha> tConj tset2", "have \"rel_bset (=) (map_bset S_transform_Tree tset1) (map_bset S_transform_Tree tset2)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> S_transform_Tree ?a = S_transform_Tree ?b\n  tConj tset1 =\\<^sub>\\<alpha> tConj tset2\n\ngoal (1 subgoal):\n 1. rel_bset (=) (map_bset S_transform_Tree tset1)\n     (map_bset S_transform_Tree tset2)", "by (simp add: bset.rel_map(1) bset.rel_map(2) bset.rel_mono_strong)"], ["proof (state)\nthis:\n  rel_bset (=) (map_bset S_transform_Tree tset1)\n   (map_bset S_transform_Tree tset2)\n\ngoal (22 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> S_transform_Tree a =\n                                     S_transform_Tree b;\n        tConj tset1 =\\<^sub>\\<alpha> tConj tset2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tConj tset1) =\n                         S_transform_Tree (tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 3. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 4. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 6. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 7. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 9. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 10. \\<And>v va vb.\n        tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n        S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\nA total of 22 subgoals...", "then"], ["proof (chain)\npicking this:\n  rel_bset (=) (map_bset S_transform_Tree tset1)\n   (map_bset S_transform_Tree tset2)", "show ?case"], ["proof (prove)\nusing this:\n  rel_bset (=) (map_bset S_transform_Tree tset1)\n   (map_bset S_transform_Tree tset2)\n\ngoal (1 subgoal):\n 1. S_transform_Tree (tConj tset1) = S_transform_Tree (tConj tset2)", "by (simp add: bset.rel_eq)"], ["proof (state)\nthis:\n  S_transform_Tree (tConj tset1) = S_transform_Tree (tConj tset2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "case (alpha_tAct \\<alpha>1 t1 \\<alpha>2 t2)"], ["proof (state)\nthis:\n  ?x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  S_transform_Tree (?x \\<bullet> t1) = S_transform_Tree t2\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  S_transform_Tree ((?a \\<rightleftharpoons> ?b) \\<bullet> t1) =\n  S_transform_Tree t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n  t2 \\<Longrightarrow>\n  S_transform_Tree ((?a \\<rightleftharpoons> ?b) \\<bullet> t2) =\n  S_transform_Tree t2\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "from \\<open>tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<close>"], ["proof (chain)\npicking this:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2", "obtain p where *: \"(bn \\<alpha>1, t1) \\<approx>set alpha_Tree (supp_rel alpha_Tree) p (bn \\<alpha>2, t2)\"\n      and **: \"(bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\""], ["proof (prove)\nusing this:\n  tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(bn \\<alpha>1,\n                  t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n                 (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2);\n         (bn \\<alpha>1,\n          \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n        \\<alpha>2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2)\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "from *"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2)", "have fresh: \"(supp_rel alpha_Tree t1 - bn \\<alpha>1) \\<sharp>* p\" and alpha: \"p \\<bullet> t1 =\\<^sub>\\<alpha> t2\" and eq: \"p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2)\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* p &&&\n    p \\<bullet> t1 =\\<^sub>\\<alpha> t2 &&&\n    p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2", "by (auto simp add: alpha_set)"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n  p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "from alpha_tAct.IH(2)"], ["proof (chain)\npicking this:\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  S_transform_Tree ((?a \\<rightleftharpoons> ?b) \\<bullet> t1) =\n  S_transform_Tree t1", "have \"supp_rel alpha_Tree (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) \\<subseteq> supp_rel alpha_Tree t1\""], ["proof (prove)\nusing this:\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  S_transform_Tree ((?a \\<rightleftharpoons> ?b) \\<bullet> t1) =\n  S_transform_Tree t1\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>)\n     (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1))\n    \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) t1", "by (metis (no_types, lifting) infinite_mono alpha_Tree_permute_rep_commute S_transform_Tree_eqvt mem_Collect_eq subsetI supp_rel_def)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1))\n  \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) t1\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "with fresh"], ["proof (chain)\npicking this:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* p\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1))\n  \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) t1", "have fresh': \"(supp_rel alpha_Tree (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) - bn \\<alpha>1) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* p\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1))\n  \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) t1\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>)\n      (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n     bn \\<alpha>1) \\<sharp>* p", "by (meson DiffD1 DiffD2 DiffI fresh_star_def subsetCE)"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "moreover"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "from alpha"], ["proof (chain)\npicking this:\n  p \\<bullet> t1 =\\<^sub>\\<alpha> t2", "have alpha': \"p \\<bullet> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1) =\\<^sub>\\<alpha> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)\""], ["proof (prove)\nusing this:\n  p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. p \\<bullet> rep_Tree\\<^sub>\\<alpha>\n                 (S_transform_Tree t1) =\\<^sub>\\<alpha>\n    rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)", "using alpha_tAct.IH(1)"], ["proof (prove)\nusing this:\n  p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n  ?x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  S_transform_Tree (?x \\<bullet> t1) = S_transform_Tree t2\n\ngoal (1 subgoal):\n 1. p \\<bullet> rep_Tree\\<^sub>\\<alpha>\n                 (S_transform_Tree t1) =\\<^sub>\\<alpha>\n    rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)", "by (metis alpha_Tree_permute_rep_commute S_transform_Tree_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1) =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1) =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "from fresh' alpha' eq"], ["proof (chain)\npicking this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1) =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)\n  p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2", "have \"supp_rel alpha_Tree (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) - bn \\<alpha>1 = supp_rel alpha_Tree (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)) - bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1) =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)\n  p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>)\n     (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n    bn \\<alpha>1 =\n    supp_rel (=\\<^sub>\\<alpha>)\n     (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)) -\n    bn \\<alpha>2", "by (metis (mono_tags) Diff_eqvt alpha_Tree_eqvt' alpha_Tree_eqvt_aux alpha_Tree_supp_rel atom_set_perm_eq)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n  bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)) -\n  bn \\<alpha>2\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1) =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n  bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)) -\n  bn \\<alpha>2", "have \"(bn \\<alpha>1, rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) \\<approx>set alpha_Tree (supp_rel alpha_Tree) p (bn \\<alpha>2, rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2))\""], ["proof (prove)\nusing this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1) =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n  bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)) -\n  bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     rep_Tree\\<^sub>\\<alpha>\n      (S_transform_Tree\n        t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                              rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2))", "using eq"], ["proof (prove)\nusing this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1) =\\<^sub>\\<alpha>\n  rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t1)) -\n  bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>)\n   (rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2)) -\n  bn \\<alpha>2\n  p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     rep_Tree\\<^sub>\\<alpha>\n      (S_transform_Tree\n        t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                              rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2))", "by (simp add: alpha_set)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (S_transform_Tree\n      t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2))\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "moreover"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (S_transform_Tree\n      t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2))\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "from **"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "have \"(bn \\<alpha>1, S_action.Act \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, S_action.Act \\<alpha>2)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     S_action.Act\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n    S_action.Act \\<alpha>2)", "by (metis (mono_tags, lifting) S_Transform.supp_Act alpha_set permute_S_action.simps(1))"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   S_action.Act\n    \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n  S_action.Act \\<alpha>2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (S_transform_Tree\n      t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2))\n  (bn \\<alpha>1,\n   S_action.Act\n    \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n  S_action.Act \\<alpha>2)", "have \"Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>1) (S_transform_Tree t1) = Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>2) (S_transform_Tree t2)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   rep_Tree\\<^sub>\\<alpha>\n    (S_transform_Tree\n      t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            rep_Tree\\<^sub>\\<alpha> (S_transform_Tree t2))\n  (bn \\<alpha>1,\n   S_action.Act\n    \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n  S_action.Act \\<alpha>2)\n\ngoal (1 subgoal):\n 1. Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>1) (S_transform_Tree t1) =\n    Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>2) (S_transform_Tree t2)", "by (auto simp add: Act\\<^sub>\\<alpha>_eq_iff)"], ["proof (state)\nthis:\n  Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>1) (S_transform_Tree t1) =\n  Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>2) (S_transform_Tree t2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>\\<alpha>1 t1 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   S_transform_Tree (x \\<bullet> t1) = S_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           S_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           S_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           S_transform_Tree t2;\n        tAct \\<alpha>1 t1 =\\<^sub>\\<alpha> tAct \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tAct \\<alpha>1 t1) =\n                         S_transform_Tree (tAct \\<alpha>2 t2)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 5. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 6. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 8. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 9. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\nA total of 21 subgoals...", "then"], ["proof (chain)\npicking this:\n  Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>1) (S_transform_Tree t1) =\n  Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>2) (S_transform_Tree t2)", "show ?case"], ["proof (prove)\nusing this:\n  Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>1) (S_transform_Tree t1) =\n  Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>2) (S_transform_Tree t2)\n\ngoal (1 subgoal):\n 1. S_transform_Tree (tAct \\<alpha>1 t1) =\n    S_transform_Tree (tAct \\<alpha>2 t2)", "by simp"], ["proof (state)\nthis:\n  S_transform_Tree (tAct \\<alpha>1 t1) =\n  S_transform_Tree (tAct \\<alpha>2 t2)\n\ngoal (20 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                S_transform_Tree t1 = S_transform_Tree t2;\n        tNot t1 =\\<^sub>\\<alpha> tNot t2\\<rbrakk>\n       \\<Longrightarrow> S_transform_Tree (tNot t1) =\n                         S_transform_Tree (tNot t2)\n 2. \\<And>\\<phi>1 \\<phi>2.\n       tPred \\<phi>1 =\\<^sub>\\<alpha> tPred \\<phi>2 \\<Longrightarrow>\n       S_transform_Tree (tPred \\<phi>1) = S_transform_Tree (tPred \\<phi>2)\n 3. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tConj va)\n 4. \\<And>v va.\n       tNot v =\\<^sub>\\<alpha> tPred va \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tPred va)\n 5. \\<And>v va vb.\n       tNot v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tNot v) = S_transform_Tree (tAct va vb)\n 6. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tConj va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tConj va)\n 7. \\<And>v va.\n       tPred v =\\<^sub>\\<alpha> tNot va \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tNot va)\n 8. \\<And>v va vb.\n       tPred v =\\<^sub>\\<alpha> tAct va vb \\<Longrightarrow>\n       S_transform_Tree (tPred v) = S_transform_Tree (tAct va vb)\n 9. \\<And>v va vb.\n       tAct v va =\\<^sub>\\<alpha> tConj vb \\<Longrightarrow>\n       S_transform_Tree (tAct v va) = S_transform_Tree (tConj vb)\n 10. \\<And>v va vb.\n        tAct v va =\\<^sub>\\<alpha> tNot vb \\<Longrightarrow>\n        S_transform_Tree (tAct v va) = S_transform_Tree (tNot vb)\nA total of 20 subgoals...", "qed simp_all"], ["", "text \\<open>$S$-transform for trees modulo $\\alpha$-equivalence.\\<close>"], ["", "lift_definition S_transform_Tree\\<^sub>\\<alpha> :: \"('idx,'pred::fs,'act::bn) Tree\\<^sub>\\<alpha> \\<Rightarrow> ('idx, unit, ('act,'pred) S_action) Tree\\<^sub>\\<alpha>\" is\n    S_transform_Tree"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Tree1 Tree2.\n       Tree1 =\\<^sub>\\<alpha> Tree2 \\<Longrightarrow>\n       S_transform_Tree Tree1 = S_transform_Tree Tree2", "by (fact alpha_Tree_S_transform_Tree)"], ["", "lemma S_transform_Tree\\<^sub>\\<alpha>_eqvt [eqvt]: \"p \\<bullet> S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> = S_transform_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\n    S_transform_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)", "by transfer (simp)"], ["", "lemma S_transform_Tree\\<^sub>\\<alpha>_Conj\\<^sub>\\<alpha> [simp]: \"S_transform_Tree\\<^sub>\\<alpha> (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = Conj\\<^sub>\\<alpha> (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_Tree\\<^sub>\\<alpha>\n     (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    Conj\\<^sub>\\<alpha>\n     (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)", "by (simp add: Conj\\<^sub>\\<alpha>_def' S_transform_Tree\\<^sub>\\<alpha>.abs_eq) (metis (no_types, lifting) S_transform_Tree\\<^sub>\\<alpha>.rep_eq bset.map_comp bset.map_cong0 comp_apply)"], ["", "lemma S_transform_Tree\\<^sub>\\<alpha>_Not\\<^sub>\\<alpha> [simp]: \"S_transform_Tree\\<^sub>\\<alpha> (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = Not\\<^sub>\\<alpha> (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_Tree\\<^sub>\\<alpha> (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) =\n    Not\\<^sub>\\<alpha> (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "by transfer simp"], ["", "lemma S_transform_Tree\\<^sub>\\<alpha>_Pred\\<^sub>\\<alpha> [simp]: \"S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>) = Act\\<^sub>\\<alpha> (S_action.Pred \\<phi>) (Conj\\<^sub>\\<alpha> bempty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>) =\n    Act\\<^sub>\\<alpha> (S_action.Pred \\<phi>) (Conj\\<^sub>\\<alpha> bempty)", "by transfer simp"], ["", "lemma S_transform_Tree\\<^sub>\\<alpha>_Act\\<^sub>\\<alpha> [simp]: \"S_transform_Tree\\<^sub>\\<alpha> (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>) = Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>) (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_Tree\\<^sub>\\<alpha>\n     (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>) =\n    Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>)\n     (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "by transfer simp"], ["", "lemma finite_supp_map_bset_S_transform_Tree\\<^sub>\\<alpha> [simp]:\n  assumes \"finite (supp tset\\<^sub>\\<alpha>)\"\n  shows \"finite (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "have \"eqvt map_bset\" and \"eqvt S_transform_Tree\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt map_bset &&& eqvt S_transform_Tree\\<^sub>\\<alpha>", "by (simp add: eqvtI)+"], ["proof (state)\nthis:\n  eqvt map_bset\n  eqvt S_transform_Tree\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  eqvt map_bset\n  eqvt S_transform_Tree\\<^sub>\\<alpha>", "have \"supp (map_bset S_transform_Tree\\<^sub>\\<alpha>) = {}\""], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt S_transform_Tree\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. supp (map_bset S_transform_Tree\\<^sub>\\<alpha>) = {}", "using supp_fun_eqvt supp_fun_app_eqvt"], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt S_transform_Tree\\<^sub>\\<alpha>\n  eqvt ?f \\<Longrightarrow> supp ?f = {}\n  eqvt ?f \\<Longrightarrow> supp (?f ?x) \\<subseteq> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset S_transform_Tree\\<^sub>\\<alpha>) = {}", "by blast"], ["proof (state)\nthis:\n  supp (map_bset S_transform_Tree\\<^sub>\\<alpha>) = {}\n\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  supp (map_bset S_transform_Tree\\<^sub>\\<alpha>) = {}", "have \"supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) \\<subseteq> supp tset\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  supp (map_bset S_transform_Tree\\<^sub>\\<alpha>) = {}\n\ngoal (1 subgoal):\n 1. supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n    \\<subseteq> supp tset\\<^sub>\\<alpha>", "using supp_fun_app"], ["proof (prove)\nusing this:\n  supp (map_bset S_transform_Tree\\<^sub>\\<alpha>) = {}\n  supp (?f ?x) \\<subseteq> supp ?f \\<union> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n    \\<subseteq> supp tset\\<^sub>\\<alpha>", "by blast"], ["proof (state)\nthis:\n  supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  \\<subseteq> supp tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "with assms"], ["proof (chain)\npicking this:\n  finite (supp tset\\<^sub>\\<alpha>)\n  supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  \\<subseteq> supp tset\\<^sub>\\<alpha>", "show \"finite (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\""], ["proof (prove)\nusing this:\n  finite (supp tset\\<^sub>\\<alpha>)\n  supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  \\<subseteq> supp tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "by (metis finite_subset)"], ["proof (state)\nthis:\n  finite\n   (supp (map_bset S_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_transform_Tree\\<^sub>\\<alpha>_preserves_hereditarily_fs:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "proof (induct rule: hereditarily_fs.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset\\<^sub>\\<alpha>.\n       \\<lbrakk>finite (supp tset\\<^sub>\\<alpha>);\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs t\\<^sub>\\<alpha>;\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs\n            (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n 2. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 3. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 4. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "case (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  finite (supp tset\\<^sub>\\<alpha>)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>)\n\ngoal (4 subgoals):\n 1. \\<And>tset\\<^sub>\\<alpha>.\n       \\<lbrakk>finite (supp tset\\<^sub>\\<alpha>);\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs t\\<^sub>\\<alpha>;\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           hereditarily_fs\n            (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n 2. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 3. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 4. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  finite (supp tset\\<^sub>\\<alpha>)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>)", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp tset\\<^sub>\\<alpha>)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. hereditarily_fs\n     (S_transform_Tree\\<^sub>\\<alpha>\n       (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "by (auto intro!: hereditarily_fs.Conj\\<^sub>\\<alpha>) (metis imageE map_bset.rep_eq)"], ["proof (state)\nthis:\n  hereditarily_fs\n   (S_transform_Tree\\<^sub>\\<alpha>\n     (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 2. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 2. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "case (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n 2. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "show ?case"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. hereditarily_fs\n     (S_transform_Tree\\<^sub>\\<alpha> (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))", "by (simp add: hereditarily_fs.Not\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  hereditarily_fs\n   (S_transform_Tree\\<^sub>\\<alpha> (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "case (Pred\\<^sub>\\<alpha> \\<phi>)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "have \"finite (supp bempty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp bempty)", "by (simp add: eqvtI supp_fun_eqvt)"], ["proof (state)\nthis:\n  finite (supp bempty)\n\ngoal (2 subgoals):\n 1. \\<And>\\<phi>.\n       hereditarily_fs\n        (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  finite (supp bempty)", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp bempty)\n\ngoal (1 subgoal):\n 1. hereditarily_fs\n     (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))", "using hereditarily_fs.Act\\<^sub>\\<alpha> finite_supp_implies_hereditarily_fs_Conj\\<^sub>\\<alpha>"], ["proof (prove)\nusing this:\n  finite (supp bempty)\n  hereditarily_fs ?t\\<^sub>\\<alpha> \\<Longrightarrow>\n  hereditarily_fs (Act\\<^sub>\\<alpha> ?\\<alpha> ?t\\<^sub>\\<alpha>)\n  finite (supp ?xset) \\<Longrightarrow>\n  hereditarily_fs (Conj\\<^sub>\\<alpha> (map_bset Rep_formula ?xset))\n\ngoal (1 subgoal):\n 1. hereditarily_fs\n     (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))", "by fastforce"], ["proof (state)\nthis:\n  hereditarily_fs\n   (S_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "case (Act\\<^sub>\\<alpha> t\\<^sub>\\<alpha> \\<alpha>)"], ["proof (state)\nthis:\n  hereditarily_fs t\\<^sub>\\<alpha>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> \\<alpha>.\n       \\<lbrakk>hereditarily_fs t\\<^sub>\\<alpha>;\n        hereditarily_fs\n         (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> hereditarily_fs\n                          (S_transform_Tree\\<^sub>\\<alpha>\n                            (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "show ?case"], ["proof (prove)\nusing this:\n  hereditarily_fs t\\<^sub>\\<alpha>\n  hereditarily_fs (S_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. hereditarily_fs\n     (S_transform_Tree\\<^sub>\\<alpha>\n       (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))", "by (simp add: Formula.hereditarily_fs.Act\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  hereditarily_fs\n   (S_transform_Tree\\<^sub>\\<alpha>\n     (Act\\<^sub>\\<alpha> \\<alpha> t\\<^sub>\\<alpha>))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>$S$-transform for (strong) formulas.\\<close>"], ["", "lift_definition S_transform_formula :: \"('idx,'pred::fs,'act::bn) formula \\<Rightarrow> ('idx, unit, ('act,'pred) S_action) Tree\\<^sub>\\<alpha>\" is\n    S_transform_Tree\\<^sub>\\<alpha>"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma S_transform_formula_eqvt [eqvt]: \"p \\<bullet> S_transform_formula x = S_transform_formula (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> S_transform_formula x = S_transform_formula (p \\<bullet> x)", "by transfer (simp)"], ["", "lemma S_transform_formula_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"S_transform_formula (Conj xset) = Conj\\<^sub>\\<alpha> (map_bset S_transform_formula xset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_formula (Conj xset) =\n    Conj\\<^sub>\\<alpha> (map_bset S_transform_formula xset)", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. S_transform_formula (Conj xset) =\n    Conj\\<^sub>\\<alpha> (map_bset S_transform_formula xset)", "by (simp add: Conj_def S_transform_formula_def bset.map_comp map_fun_def)"], ["", "lemma S_transform_formula_Not [simp]: \"S_transform_formula (Not x) = Not\\<^sub>\\<alpha> (S_transform_formula x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_formula (Formula.Not x) =\n    Not\\<^sub>\\<alpha> (S_transform_formula x)", "by transfer simp"], ["", "lemma S_transform_formula_Pred [simp]: \"S_transform_formula (Formula.Pred \\<phi>) = Act\\<^sub>\\<alpha> (S_action.Pred \\<phi>) (Conj\\<^sub>\\<alpha> bempty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_formula (Formula.Pred \\<phi>) =\n    Act\\<^sub>\\<alpha> (S_action.Pred \\<phi>) (Conj\\<^sub>\\<alpha> bempty)", "by transfer simp"], ["", "lemma S_transform_formula_Act [simp]: \"S_transform_formula (Formula.Act \\<alpha> x) = Formula.Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>) (S_transform_formula x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform_formula (Formula.Act \\<alpha> x) =\n    Act\\<^sub>\\<alpha> (S_action.Act \\<alpha>) (S_transform_formula x)", "by transfer simp"], ["", "lemma S_transform_formula_hereditarily_fs [simp]: \"hereditarily_fs (S_transform_formula x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hereditarily_fs (S_transform_formula x)", "by transfer (fact S_transform_Tree\\<^sub>\\<alpha>_preserves_hereditarily_fs)"], ["", "text \\<open>Finally, we define the proper $S$-transform, which returns formulas instead of trees.\\<close>"], ["", "definition S_transform :: \"('idx,'pred::fs,'act::bn) formula \\<Rightarrow> ('idx, unit, ('act,'pred) S_action) formula\" where\n  \"S_transform x = Abs_formula (S_transform_formula x)\""], ["", "lemma S_transform_eqvt [eqvt]: \"p \\<bullet> S_transform x = S_transform (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> S_transform x = S_transform (p \\<bullet> x)", "unfolding S_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Abs_formula (S_transform_formula x) =\n    Abs_formula (S_transform_formula (p \\<bullet> x))", "by simp"], ["", "lemma finite_supp_map_bset_S_transform [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"finite (supp (map_bset S_transform xset))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (map_bset S_transform xset))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (supp (map_bset S_transform xset))", "have \"eqvt map_bset\" and \"eqvt S_transform\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt map_bset &&& eqvt S_transform", "by (simp add: eqvtI)+"], ["proof (state)\nthis:\n  eqvt map_bset\n  eqvt S_transform\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset S_transform xset))", "then"], ["proof (chain)\npicking this:\n  eqvt map_bset\n  eqvt S_transform", "have \"supp (map_bset S_transform) = {}\""], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt S_transform\n\ngoal (1 subgoal):\n 1. supp (map_bset S_transform) = {}", "using supp_fun_eqvt supp_fun_app_eqvt"], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt S_transform\n  eqvt ?f \\<Longrightarrow> supp ?f = {}\n  eqvt ?f \\<Longrightarrow> supp (?f ?x) \\<subseteq> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset S_transform) = {}", "by blast"], ["proof (state)\nthis:\n  supp (map_bset S_transform) = {}\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset S_transform xset))", "then"], ["proof (chain)\npicking this:\n  supp (map_bset S_transform) = {}", "have \"supp (map_bset S_transform xset) \\<subseteq> supp xset\""], ["proof (prove)\nusing this:\n  supp (map_bset S_transform) = {}\n\ngoal (1 subgoal):\n 1. supp (map_bset S_transform xset) \\<subseteq> supp xset", "using supp_fun_app"], ["proof (prove)\nusing this:\n  supp (map_bset S_transform) = {}\n  supp (?f ?x) \\<subseteq> supp ?f \\<union> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset S_transform xset) \\<subseteq> supp xset", "by blast"], ["proof (state)\nthis:\n  supp (map_bset S_transform xset) \\<subseteq> supp xset\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset S_transform xset))", "with assms"], ["proof (chain)\npicking this:\n  finite (supp xset)\n  supp (map_bset S_transform xset) \\<subseteq> supp xset", "show \"finite (supp (map_bset S_transform xset))\""], ["proof (prove)\nusing this:\n  finite (supp xset)\n  supp (map_bset S_transform xset) \\<subseteq> supp xset\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset S_transform xset))", "by (metis finite_subset)"], ["proof (state)\nthis:\n  finite (supp (map_bset S_transform xset))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_transform_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"S_transform (Conj xset) = Conj (map_bset S_transform xset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform (Conj xset) = Conj (map_bset S_transform xset)", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. S_transform (Conj xset) = Conj (map_bset S_transform xset)", "unfolding S_transform_def"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. Abs_formula (S_transform_formula (Conj xset)) =\n    Conj (map_bset (\\<lambda>x. Abs_formula (S_transform_formula x)) xset)", "by (simp, simp add: Conj_def bset.map_comp o_def)"], ["", "lemma S_transform_Not [simp]: \"S_transform (Not x) = Not (S_transform x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform (Formula.Not x) = Formula.Not (S_transform x)", "unfolding S_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_formula (S_transform_formula (Formula.Not x)) =\n    Formula.Not (Abs_formula (S_transform_formula x))", "by (simp add: Not.abs_eq eq_onp_same_args)"], ["", "lemma S_transform_Pred [simp]: \"S_transform (Formula.Pred \\<phi>) = Formula.Act (S_action.Pred \\<phi>) (Conj bempty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform (Formula.Pred \\<phi>) =\n    Formula.Act (S_action.Pred \\<phi>) (Conj bempty)", "unfolding S_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_formula (S_transform_formula (Formula.Pred \\<phi>)) =\n    Formula.Act (S_action.Pred \\<phi>) (Conj bempty)", "by (simp add: Formula.Act_def Conj_rep_eq eqvtI supp_fun_eqvt)"], ["", "lemma S_transform_Act [simp]: \"S_transform (Formula.Act \\<alpha> x) = Formula.Act (S_action.Act \\<alpha>) (S_transform x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S_transform (Formula.Act \\<alpha> x) =\n    Formula.Act (S_action.Act \\<alpha>) (S_transform x)", "unfolding S_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_formula (S_transform_formula (Formula.Act \\<alpha> x)) =\n    Formula.Act (S_action.Act \\<alpha>)\n     (Abs_formula (S_transform_formula x))", "by (simp, simp add: Formula.Act_def)"], ["", "context nominal_ts\nbegin"], ["", "lemma valid_Conj_bempty [simp]: \"P \\<Turnstile> Conj bempty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> Conj bempty", "by (simp add: bempty.rep_eq eqvtI supp_fun_eqvt)"], ["", "notation S_satisfies (infix \"\\<turnstile>\\<^sub>S\" 70)"], ["", "interpretation S_transform: nominal_ts \"(\\<turnstile>\\<^sub>S)\" \"(\\<rightarrow>\\<^sub>S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nominal_ts (\\<turnstile>\\<^sub>S) (\\<rightarrow>\\<^sub>S)", "by unfold_locales (fact S_satisfies_eqvt, fact S_transition_eqvt)"], ["", "notation S_transform.valid (infix \"\\<Turnstile>\\<^sub>S\" 70)"], ["", "text \\<open>The $S$-transform preserves satisfaction of formulas in the following sense:\\<close>"], ["", "theorem valid_iff_valid_S_transform: shows \"P \\<Turnstile> x \\<longleftrightarrow> P \\<Turnstile>\\<^sub>S S_transform x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S S_transform x", "proof (induct x arbitrary: P)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xset P.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x P.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S S_transform x\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> Conj xset =\n                         P \\<Turnstile>\\<^sub>S S_transform (Conj xset)\n 2. \\<And>x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Not x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Not x)\n 3. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 4. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "case (Conj xset)"], ["proof (state)\nthis:\n  finite (supp xset)\n  ?x7 \\<in> set_bset xset \\<Longrightarrow>\n  ?P7 \\<Turnstile> ?x7 = ?P7 \\<Turnstile>\\<^sub>S S_transform ?x7\n\ngoal (4 subgoals):\n 1. \\<And>xset P.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x P.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S S_transform x\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> Conj xset =\n                         P \\<Turnstile>\\<^sub>S S_transform (Conj xset)\n 2. \\<And>x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Not x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Not x)\n 3. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 4. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "then"], ["proof (chain)\npicking this:\n  finite (supp xset)\n  ?x7 \\<in> set_bset xset \\<Longrightarrow>\n  ?P7 \\<Turnstile> ?x7 = ?P7 \\<Turnstile>\\<^sub>S S_transform ?x7", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp xset)\n  ?x7 \\<in> set_bset xset \\<Longrightarrow>\n  ?P7 \\<Turnstile> ?x7 = ?P7 \\<Turnstile>\\<^sub>S S_transform ?x7\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Conj xset =\n    P \\<Turnstile>\\<^sub>S S_transform (Conj xset)", "by auto (metis imageE map_bset.rep_eq, simp add: map_bset.rep_eq)"], ["proof (state)\nthis:\n  P \\<Turnstile> Conj xset = P \\<Turnstile>\\<^sub>S S_transform (Conj xset)\n\ngoal (3 subgoals):\n 1. \\<And>x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Not x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Not x)\n 2. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 3. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Not x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Not x)\n 2. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 3. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "case (Not x)"], ["proof (state)\nthis:\n  ?P7 \\<Turnstile> x = ?P7 \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (3 subgoals):\n 1. \\<And>x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Not x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Not x)\n 2. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 3. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "then"], ["proof (chain)\npicking this:\n  ?P7 \\<Turnstile> x = ?P7 \\<Turnstile>\\<^sub>S S_transform x", "show ?case"], ["proof (prove)\nusing this:\n  ?P7 \\<Turnstile> x = ?P7 \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Formula.Not x =\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Not x)", "by simp"], ["proof (state)\nthis:\n  P \\<Turnstile> Formula.Not x =\n  P \\<Turnstile>\\<^sub>S S_transform (Formula.Not x)\n\ngoal (2 subgoals):\n 1. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 2. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 2. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "case (Pred \\<phi>)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 2. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "let ?\\<phi> = \"Formula.Pred \\<phi> :: ('idx, 'pred, ('act,'pred) S_action) formula\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 2. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "have \"bn (S_action.Pred \\<phi> :: ('act,'pred) S_action) \\<sharp>* P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn (S_action.Pred \\<phi>) \\<sharp>* P", "by (simp add: fresh_star_def)"], ["proof (state)\nthis:\n  bn (S_action.Pred \\<phi>) \\<sharp>* P\n\ngoal (2 subgoals):\n 1. \\<And>pred P.\n       P \\<Turnstile> Formula.Pred pred =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred pred)\n 2. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "then"], ["proof (chain)\npicking this:\n  bn (S_action.Pred \\<phi>) \\<sharp>* P", "show ?case"], ["proof (prove)\nusing this:\n  bn (S_action.Pred \\<phi>) \\<sharp>* P\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Formula.Pred \\<phi> =\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred \\<phi>)", "by (auto simp add: S_transform.valid_Act_fresh S_transition_Pred_iff)"], ["proof (state)\nthis:\n  P \\<Turnstile> Formula.Pred \\<phi> =\n  P \\<Turnstile>\\<^sub>S S_transform (Formula.Pred \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "case (Act \\<alpha> x)"], ["proof (state)\nthis:\n  ?P7 \\<Turnstile> x = ?P7 \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (1 subgoal):\n 1. \\<And>act x P.\n       (\\<And>P.\n           P \\<Turnstile> x =\n           P \\<Turnstile>\\<^sub>S S_transform x) \\<Longrightarrow>\n       P \\<Turnstile> Formula.Act act x =\n       P \\<Turnstile>\\<^sub>S S_transform (Formula.Act act x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x =\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x \\<Longrightarrow>\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n 2. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "assume \"P \\<Turnstile> Formula.Act \\<alpha> x\""], ["proof (state)\nthis:\n  P \\<Turnstile> Formula.Act \\<alpha> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x \\<Longrightarrow>\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n 2. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  P \\<Turnstile> Formula.Act \\<alpha> x", "obtain \\<alpha>' x' P' where eq: \"Formula.Act \\<alpha> x = Formula.Act \\<alpha>' x'\" and trans: \"P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\" and valid: \"P' \\<Turnstile> x'\""], ["proof (prove)\nusing this:\n  P \\<Turnstile> Formula.Act \\<alpha> x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' x' P'.\n        \\<lbrakk>Formula.Act \\<alpha> x = Formula.Act \\<alpha>' x';\n         P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>;\n         P' \\<Turnstile> x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis valid_Act)"], ["proof (state)\nthis:\n  Formula.Act \\<alpha> x = Formula.Act \\<alpha>' x'\n  P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  P' \\<Turnstile> x'\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x \\<Longrightarrow>\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n 2. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "from eq"], ["proof (chain)\npicking this:\n  Formula.Act \\<alpha> x = Formula.Act \\<alpha>' x'", "obtain p where p_x: \"p \\<bullet> x = x'\" and p_\\<alpha>: \"p \\<bullet> \\<alpha> = \\<alpha>'\""], ["proof (prove)\nusing this:\n  Formula.Act \\<alpha> x = Formula.Act \\<alpha>' x'\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<bullet> x = x';\n         p \\<bullet> \\<alpha> = \\<alpha>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Act_eq_iff_perm)"], ["proof (state)\nthis:\n  p \\<bullet> x = x'\n  p \\<bullet> \\<alpha> = \\<alpha>'\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x \\<Longrightarrow>\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n 2. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "from valid"], ["proof (chain)\npicking this:\n  P' \\<Turnstile> x'", "have \"-p \\<bullet> P' \\<Turnstile> x\""], ["proof (prove)\nusing this:\n  P' \\<Turnstile> x'\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile> x", "using p_x"], ["proof (prove)\nusing this:\n  P' \\<Turnstile> x'\n  p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile> x", "by (metis valid_eqvt permute_minus_cancel(2))"], ["proof (state)\nthis:\n  - p \\<bullet> P' \\<Turnstile> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x \\<Longrightarrow>\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n 2. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  - p \\<bullet> P' \\<Turnstile> x", "have \"-p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x\""], ["proof (prove)\nusing this:\n  - p \\<bullet> P' \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x", "using Act.hyps(1)"], ["proof (prove)\nusing this:\n  - p \\<bullet> P' \\<Turnstile> x\n  ?P7 \\<Turnstile> x = ?P7 \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x", "by metis"], ["proof (state)\nthis:\n  - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x \\<Longrightarrow>\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n 2. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x", "have \"P' \\<Turnstile>\\<^sub>S S_transform x'\""], ["proof (prove)\nusing this:\n  - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\\<^sub>S S_transform x'", "by (metis (no_types, lifting) p_x S_transform.valid_eqvt S_transform_eqvt permute_minus_cancel(1))"], ["proof (state)\nthis:\n  P' \\<Turnstile>\\<^sub>S S_transform x'\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x \\<Longrightarrow>\n    P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n 2. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "with eq and trans"], ["proof (chain)\npicking this:\n  Formula.Act \\<alpha> x = Formula.Act \\<alpha>' x'\n  P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  P' \\<Turnstile>\\<^sub>S S_transform x'", "show \"P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\""], ["proof (prove)\nusing this:\n  Formula.Act \\<alpha> x = Formula.Act \\<alpha>' x'\n  P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  P' \\<Turnstile>\\<^sub>S S_transform x'\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)", "using S_transform.valid_Act S_transition.Act"], ["proof (prove)\nusing this:\n  Formula.Act \\<alpha> x = Formula.Act \\<alpha>' x'\n  P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  P' \\<Turnstile>\\<^sub>S S_transform x'\n  ?P \\<Turnstile>\\<^sub>S Formula.Act ?\\<alpha> ?x =\n  (\\<exists>\\<alpha>' x' P'.\n      Formula.Act ?\\<alpha> ?x = Formula.Act \\<alpha>' x' \\<and>\n      ?P \\<rightarrow>\\<^sub>S \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n      P' \\<Turnstile>\\<^sub>S x')\n  ?P \\<rightarrow> \\<langle>?\\<alpha>,?P'\\<rangle> \\<Longrightarrow>\n  ?P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act ?\\<alpha>,?P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)", "by fastforce"], ["proof (state)\nthis:\n  P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "assume *: \"P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\"\n\n      \\<comment> \\<open>rename~@{term \"bn \\<alpha>\"} to avoid~@{term \"P\"}, without touching~@{term \"Formula.Act \\<alpha> x\"}\\<close>"], ["proof (state)\nthis:\n  P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "obtain p where 1: \"(p \\<bullet> bn \\<alpha>) \\<sharp>* P\" and 2: \"supp (Formula.Act \\<alpha> x) \\<sharp>* p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule at_set_avoiding2[of \"bn \\<alpha>\" \"P\" \"Formula.Act \\<alpha> x\", THEN exE])"], ["proof (state)\ngoal (5 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (bn \\<alpha>)\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp P)\n 3. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Formula.Act \\<alpha> x))\n 4. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\n 5. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n                    supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* P \\<and>\n        supp (Formula.Act \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (bn \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (bn \\<alpha>)", "by (fact bn_finite)"], ["proof (state)\nthis:\n  finite (bn \\<alpha>)\n\ngoal (4 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp P)\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Formula.Act \\<alpha> x))\n 3. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\n 4. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n                    supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* P \\<and>\n        supp (Formula.Act \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp P)\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Formula.Act \\<alpha> x))\n 3. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\n 4. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n                    supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* P \\<and>\n        supp (Formula.Act \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (supp P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp P)", "by (fact finite_supp)"], ["proof (state)\nthis:\n  finite (supp P)\n\ngoal (3 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Formula.Act \\<alpha> x))\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\n 3. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n                    supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* P \\<and>\n        supp (Formula.Act \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (Formula.Act \\<alpha> x))\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\n 3. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n                    supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* P \\<and>\n        supp (Formula.Act \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (supp (Formula.Act \\<alpha> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (Formula.Act \\<alpha> x))", "by (fact finite_supp)"], ["proof (state)\nthis:\n  finite (supp (Formula.Act \\<alpha> x))\n\ngoal (2 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\n 2. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n                    supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* P \\<and>\n        supp (Formula.Act \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n         supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\n 2. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n                    supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* P \\<and>\n        supp (Formula.Act \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x", "by simp"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* Formula.Act \\<alpha> x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* P;\n                    supp (Formula.Act \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* P \\<and>\n        supp (Formula.Act \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed metis"], ["proof (state)\nthis:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* P\n  supp (Formula.Act \\<alpha> x) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "from 2"], ["proof (chain)\npicking this:\n  supp (Formula.Act \\<alpha> x) \\<sharp>* p", "have eq: \"Formula.Act \\<alpha> x = Formula.Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\""], ["proof (prove)\nusing this:\n  supp (Formula.Act \\<alpha> x) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. Formula.Act \\<alpha> x =\n    Formula.Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "using supp_perm_eq"], ["proof (prove)\nusing this:\n  supp (Formula.Act \\<alpha> x) \\<sharp>* p\n  supp ?x \\<sharp>* ?p \\<Longrightarrow> ?p \\<bullet> ?x = ?x\n\ngoal (1 subgoal):\n 1. Formula.Act \\<alpha> x =\n    Formula.Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "by fastforce"], ["proof (state)\nthis:\n  Formula.Act \\<alpha> x =\n  Formula.Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "with *"], ["proof (chain)\npicking this:\n  P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n  Formula.Act \\<alpha> x =\n  Formula.Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "have \"P \\<Turnstile>\\<^sub>S Formula.Act (S_action.Act (p \\<bullet> \\<alpha>)) (S_transform (p \\<bullet> x))\""], ["proof (prove)\nusing this:\n  P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n  Formula.Act \\<alpha> x =\n  Formula.Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    Formula.Act (S_action.Act (p \\<bullet> \\<alpha>))\n     (S_transform (p \\<bullet> x))", "by simp"], ["proof (state)\nthis:\n  P \\<Turnstile>\\<^sub>S\n  Formula.Act (S_action.Act (p \\<bullet> \\<alpha>))\n   (S_transform (p \\<bullet> x))\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "with 1"], ["proof (chain)\npicking this:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* P\n  P \\<Turnstile>\\<^sub>S\n  Formula.Act (S_action.Act (p \\<bullet> \\<alpha>))\n   (S_transform (p \\<bullet> x))", "obtain P' where trans: \"P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act (p \\<bullet> \\<alpha>),P'\\<rangle>\" and valid: \"P' \\<Turnstile>\\<^sub>S S_transform (p \\<bullet> x)\""], ["proof (prove)\nusing this:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* P\n  P \\<Turnstile>\\<^sub>S\n  Formula.Act (S_action.Act (p \\<bullet> \\<alpha>))\n   (S_transform (p \\<bullet> x))\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P \\<rightarrow>\\<^sub>S\n                 \\<langle>S_action.Act (p \\<bullet> \\<alpha>),P'\\<rangle>;\n         P' \\<Turnstile>\\<^sub>S S_transform (p \\<bullet> x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis S_transform.valid_Act_fresh bn_S_action.simps(1) bn_eqvt)"], ["proof (state)\nthis:\n  P \\<rightarrow>\\<^sub>S\n  \\<langle>S_action.Act (p \\<bullet> \\<alpha>),P'\\<rangle>\n  P' \\<Turnstile>\\<^sub>S S_transform (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "from valid"], ["proof (chain)\npicking this:\n  P' \\<Turnstile>\\<^sub>S S_transform (p \\<bullet> x)", "have \"-p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x\""], ["proof (prove)\nusing this:\n  P' \\<Turnstile>\\<^sub>S S_transform (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x", "by (metis (no_types, hide_lams) S_transform.valid_eqvt S_transform_eqvt permute_minus_cancel(1))"], ["proof (state)\nthis:\n  - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x", "have \"-p \\<bullet> P' \\<Turnstile> x\""], ["proof (prove)\nusing this:\n  - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile> x", "using Act.hyps(1)"], ["proof (prove)\nusing this:\n  - p \\<bullet> P' \\<Turnstile>\\<^sub>S S_transform x\n  ?P7 \\<Turnstile> x = ?P7 \\<Turnstile>\\<^sub>S S_transform x\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile> x", "by metis"], ["proof (state)\nthis:\n  - p \\<bullet> P' \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  - p \\<bullet> P' \\<Turnstile> x", "have \"P' \\<Turnstile> p \\<bullet> x\""], ["proof (prove)\nusing this:\n  - p \\<bullet> P' \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile> p \\<bullet> x", "by (metis permute_minus_cancel(1) valid_eqvt)"], ["proof (state)\nthis:\n  P' \\<Turnstile> p \\<bullet> x\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "moreover"], ["proof (state)\nthis:\n  P' \\<Turnstile> p \\<bullet> x\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "from trans"], ["proof (chain)\npicking this:\n  P \\<rightarrow>\\<^sub>S\n  \\<langle>S_action.Act (p \\<bullet> \\<alpha>),P'\\<rangle>", "have \"P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\""], ["proof (prove)\nusing this:\n  P \\<rightarrow>\\<^sub>S\n  \\<langle>S_action.Act (p \\<bullet> \\<alpha>),P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>", "using S_transition_Act_iff"], ["proof (prove)\nusing this:\n  P \\<rightarrow>\\<^sub>S\n  \\<langle>S_action.Act (p \\<bullet> \\<alpha>),P'\\<rangle>\n  ?P \\<rightarrow>\\<^sub>S \\<langle>S_action.Act ?\\<alpha>,?P'\\<rangle> =\n  ?P \\<rightarrow> \\<langle>?\\<alpha>,?P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>", "by blast"], ["proof (state)\nthis:\n  P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\\<^sub>S\n    S_transform (Formula.Act \\<alpha> x) \\<Longrightarrow>\n    P \\<Turnstile> Formula.Act \\<alpha> x", "ultimately"], ["proof (chain)\npicking this:\n  P' \\<Turnstile> p \\<bullet> x\n  P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>", "show \"P \\<Turnstile> Formula.Act \\<alpha> x\""], ["proof (prove)\nusing this:\n  P' \\<Turnstile> p \\<bullet> x\n  P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x", "using eq valid_Act"], ["proof (prove)\nusing this:\n  P' \\<Turnstile> p \\<bullet> x\n  P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\n  Formula.Act \\<alpha> x =\n  Formula.Act (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n  ?P \\<Turnstile> Formula.Act ?\\<alpha> ?x =\n  (\\<exists>\\<alpha>' x' P'.\n      Formula.Act ?\\<alpha> ?x = Formula.Act \\<alpha>' x' \\<and>\n      ?P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n      P' \\<Turnstile> x')\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> Formula.Act \\<alpha> x", "by blast"], ["proof (state)\nthis:\n  P \\<Turnstile> Formula.Act \\<alpha> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<Turnstile> Formula.Act \\<alpha> x =\n  P \\<Turnstile>\\<^sub>S S_transform (Formula.Act \\<alpha> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context indexed_nominal_ts\nbegin"], ["", "text \\<open>The following (alternative) proof of the ``$\\rightarrow$'' direction of theorem\n  @{thm S_transform_bisimilar_iff}, namely that bisimilarity in the $S$-transform implies\n  bisimilarity in the original transition system, uses the fact that the $S$-transform(ation)\n  preserves satisfaction of formulas, together with the fact that bisimilarity (in the\n  $S$-transform) implies logical equivalence, and equivalence (in the original transition system)\n  implies bisimilarity. However, since we proved the latter in the context of indexed nominal\n  transition systems, this proof requires an indexed nominal transition system.\\<close>"], ["", "interpretation S_transform: indexed_nominal_ts \"(\\<turnstile>\\<^sub>S)\" \"(\\<rightarrow>\\<^sub>S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexed_nominal_ts TYPE('idx) (\\<turnstile>\\<^sub>S)\n     (\\<rightarrow>\\<^sub>S)", "by unfold_locales (fact S_satisfies_eqvt, fact S_transition_eqvt, fact card_idx_perm, fact card_idx_state)"], ["", "notation S_transform.bisimilar (infix \"\\<sim>\\<cdot>\\<^sub>S\" 100)"], ["", "theorem \"P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow> P \\<sim>\\<cdot> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q \\<longrightarrow> P \\<sim>\\<cdot> Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q \\<Longrightarrow> P \\<sim>\\<cdot> Q", "assume \"P \\<sim>\\<cdot>\\<^sub>S Q\""], ["proof (state)\nthis:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q \\<Longrightarrow> P \\<sim>\\<cdot> Q", "then"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot>\\<^sub>S Q", "have \"S_transform.logically_equivalent P Q\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot>\\<^sub>S Q\n\ngoal (1 subgoal):\n 1. S_transform.logically_equivalent P Q", "by (fact S_transform.bisimilarity_implies_equivalence)"], ["proof (state)\nthis:\n  S_transform.logically_equivalent P Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q \\<Longrightarrow> P \\<sim>\\<cdot> Q", "with valid_iff_valid_S_transform"], ["proof (chain)\npicking this:\n  ?P \\<Turnstile> ?x = ?P \\<Turnstile>\\<^sub>S S_transform ?x\n  S_transform.logically_equivalent P Q", "have \"logically_equivalent P Q\""], ["proof (prove)\nusing this:\n  ?P \\<Turnstile> ?x = ?P \\<Turnstile>\\<^sub>S S_transform ?x\n  S_transform.logically_equivalent P Q\n\ngoal (1 subgoal):\n 1. P =\\<cdot> Q", "using logically_equivalent_def S_transform.logically_equivalent_def"], ["proof (prove)\nusing this:\n  ?P \\<Turnstile> ?x = ?P \\<Turnstile>\\<^sub>S S_transform ?x\n  S_transform.logically_equivalent P Q\n  ?P =\\<cdot> ?Q \\<equiv> \\<forall>x. ?P \\<Turnstile> x = ?Q \\<Turnstile> x\n  S_transform.logically_equivalent ?P ?Q \\<equiv>\n  \\<forall>x. ?P \\<Turnstile>\\<^sub>S x = ?Q \\<Turnstile>\\<^sub>S x\n\ngoal (1 subgoal):\n 1. P =\\<cdot> Q", "by blast"], ["proof (state)\nthis:\n  P =\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>\\<^sub>S Q \\<Longrightarrow> P \\<sim>\\<cdot> Q", "then"], ["proof (chain)\npicking this:\n  P =\\<cdot> Q", "show \"P \\<sim>\\<cdot> Q\""], ["proof (prove)\nusing this:\n  P =\\<cdot> Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot> Q", "by (fact equivalence_implies_bisimilarity)"], ["proof (state)\nthis:\n  P \\<sim>\\<cdot> Q\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Translation of weak formulas into formulas without predicates\\<close>"], ["", "context indexed_weak_nominal_ts\nbegin"], ["", "notation S_satisfies (infix \"\\<turnstile>\\<^sub>S\" 70)"], ["", "interpretation S_transform: indexed_weak_nominal_ts \"S_action.Act \\<tau>\" \"(\\<turnstile>\\<^sub>S)\" \"(\\<rightarrow>\\<^sub>S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexed_weak_nominal_ts TYPE('idx) (S_action.Act \\<tau>)\n     (\\<turnstile>\\<^sub>S) (\\<rightarrow>\\<^sub>S)", "by unfold_locales (fact S_satisfies_eqvt, fact S_transition_eqvt, simp add: tau_eqvt, fact card_idx_perm, fact card_idx_state, fact card_idx_nat)"], ["", "notation S_transform.valid (infix \"\\<Turnstile>\\<^sub>S\" 70)"], ["", "notation S_transform.weakly_bisimilar (infix \"\\<approx>\\<cdot>\\<^sub>S\" 100)"], ["", "text \\<open>The $S$-transform of a weak formula is not necessarily a weak formula. However, the image of\n    all weak formulas under the $S$-transform is adequate for weak bisimilarity.\\<close>"], ["", "corollary \"P \\<approx>\\<cdot>\\<^sub>S Q \\<longleftrightarrow> (\\<forall>x. weak_formula x \\<longrightarrow> P \\<Turnstile>\\<^sub>S S_transform x \\<longleftrightarrow> Q \\<Turnstile>\\<^sub>S S_transform x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<approx>\\<cdot>\\<^sub>S Q =\n    (\\<forall>x.\n        weak_formula x \\<longrightarrow>\n        P \\<Turnstile>\\<^sub>S S_transform x =\n        Q \\<Turnstile>\\<^sub>S S_transform x)", "by (meson valid_iff_valid_S_transform weak_bisimilarity_implies_weak_equivalence weak_equivalence_implies_weak_bisimilarity S_transform_weakly_bisimilar_iff weakly_logically_equivalent_def)"], ["", "text \\<open>For every weak formula, there is an equivalent weak formula over the $S$-transform.\\<close>"], ["", "corollary\n    assumes \"weak_formula x\"\n    obtains y where \"S_transform.weak_formula y\" and \"\\<forall>P. P \\<Turnstile> x \\<longleftrightarrow> P \\<Turnstile>\\<^sub>S y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?S = \"{P. P \\<Turnstile> x}\"\n\n    \\<comment> \\<open>@{term ?S} is finitely supported\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"supp x supports ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x supports {P. P \\<Turnstile> x}", "unfolding supports_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       a \\<notin> supp x \\<and> b \\<notin> supp x \\<longrightarrow>\n       (a \\<rightleftharpoons> b) \\<bullet> {P. P \\<Turnstile> x} =\n       {P. P \\<Turnstile> x}", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "assume a: \"a \\<notin> supp x\" and b: \"b \\<notin> supp x\""], ["proof (state)\nthis:\n  a \\<notin> supp x\n  b \\<notin> supp x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "{"], ["proof (state)\nthis:\n  a \\<notin> supp x\n  b \\<notin> supp x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "from a and b"], ["proof (chain)\npicking this:\n  a \\<notin> supp x\n  b \\<notin> supp x", "have \"(a \\<rightleftharpoons> b) \\<bullet> x = x\""], ["proof (prove)\nusing this:\n  a \\<notin> supp x\n  b \\<notin> supp x\n\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons> b) \\<bullet> x = x", "by (simp add: fresh_def swap_fresh_fresh)"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> x = x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "then"], ["proof (chain)\npicking this:\n  (a \\<rightleftharpoons> b) \\<bullet> x = x", "have \"(a \\<rightleftharpoons> b) \\<bullet> P \\<Turnstile> x \\<longleftrightarrow> P \\<Turnstile> x\""], ["proof (prove)\nusing this:\n  (a \\<rightleftharpoons> b) \\<bullet> x = x\n\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons> b) \\<bullet> P \\<Turnstile> x = P \\<Turnstile> x", "by (metis permute_swap_cancel valid_eqvt)"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> P \\<Turnstile> x = P \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "}"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> ?P9 \\<Turnstile> x =\n  ?P9 \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "note * = this"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> ?P9 \\<Turnstile> x =\n  ?P9 \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp x; b \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {P.\n                         P \\<Turnstile> x} =\n                         {P. P \\<Turnstile> x}", "show \"(a \\<rightleftharpoons> b) \\<bullet> ?S = ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons> b) \\<bullet> {P. P \\<Turnstile> x} =\n    {P. P \\<Turnstile> x}", "by auto (metis mem_Collect_eq mem_permute_iff permute_swap_cancel \"*\", simp add: Collect_eqvt permute_fun_def \"*\")"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> {P. P \\<Turnstile> x} =\n  {P. P \\<Turnstile> x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  supp x supports {P. P \\<Turnstile> x}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  supp x supports {P. P \\<Turnstile> x}", "have \"finite (supp ?S)\""], ["proof (prove)\nusing this:\n  supp x supports {P. P \\<Turnstile> x}\n\ngoal (1 subgoal):\n 1. finite (supp {P. P \\<Turnstile> x})", "using finite_supp supports_finite"], ["proof (prove)\nusing this:\n  supp x supports {P. P \\<Turnstile> x}\n  finite (supp ?x)\n  \\<lbrakk>?S supports ?x; finite ?S\\<rbrakk>\n  \\<Longrightarrow> finite (supp ?x)\n\ngoal (1 subgoal):\n 1. finite (supp {P. P \\<Turnstile> x})", "by blast\n\n    \\<comment> \\<open>@{term ?S} is closed under weak bisimilarity\\<close>"], ["proof (state)\nthis:\n  finite (supp {P. P \\<Turnstile> x})\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  finite (supp {P. P \\<Turnstile> x})\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  finite (supp {P. P \\<Turnstile> x})\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix P Q"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume \"P \\<in> ?S\" and \"P \\<approx>\\<cdot>\\<^sub>S Q\""], ["proof (state)\nthis:\n  P \\<in> {P. P \\<Turnstile> x}\n  P \\<approx>\\<cdot>\\<^sub>S Q\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with \\<open>weak_formula x\\<close>"], ["proof (chain)\npicking this:\n  weak_formula x\n  P \\<in> {P. P \\<Turnstile> x}\n  P \\<approx>\\<cdot>\\<^sub>S Q", "have \"Q \\<in> ?S\""], ["proof (prove)\nusing this:\n  weak_formula x\n  P \\<in> {P. P \\<Turnstile> x}\n  P \\<approx>\\<cdot>\\<^sub>S Q\n\ngoal (1 subgoal):\n 1. Q \\<in> {P. P \\<Turnstile> x}", "using S_transform_weakly_bisimilar_iff weak_bisimilarity_implies_weak_equivalence weakly_logically_equivalent_def"], ["proof (prove)\nusing this:\n  weak_formula x\n  P \\<in> {P. P \\<Turnstile> x}\n  P \\<approx>\\<cdot>\\<^sub>S Q\n  ?P \\<approx>\\<cdot>\\<^sub>S ?Q = ?P \\<approx>\\<cdot> ?Q\n  ?P \\<approx>\\<cdot> ?Q \\<Longrightarrow> ?P \\<equiv>\\<cdot> ?Q\n  ?P \\<equiv>\\<cdot> ?Q \\<equiv>\n  \\<forall>x.\n     weak_formula x \\<longrightarrow> ?P \\<Turnstile> x = ?Q \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. Q \\<in> {P. P \\<Turnstile> x}", "by auto"], ["proof (state)\nthis:\n  Q \\<in> {P. P \\<Turnstile> x}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?P9 \\<in> {P. P \\<Turnstile> x};\n   ?P9 \\<approx>\\<cdot>\\<^sub>S ?Q9\\<rbrakk>\n  \\<Longrightarrow> ?Q9 \\<in> {P. P \\<Turnstile> x}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>S_transform.weak_formula y;\n         \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  finite (supp {P. P \\<Turnstile> x})\n  \\<lbrakk>?P9 \\<in> {P. P \\<Turnstile> x};\n   ?P9 \\<approx>\\<cdot>\\<^sub>S ?Q9\\<rbrakk>\n  \\<Longrightarrow> ?Q9 \\<in> {P. P \\<Turnstile> x}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (supp {P. P \\<Turnstile> x})\n  \\<lbrakk>?P9 \\<in> {P. P \\<Turnstile> x};\n   ?P9 \\<approx>\\<cdot>\\<^sub>S ?Q9\\<rbrakk>\n  \\<Longrightarrow> ?Q9 \\<in> {P. P \\<Turnstile> x}\n\ngoal (1 subgoal):\n 1. thesis", "using S_transform.weak_expressive_completeness that"], ["proof (prove)\nusing this:\n  finite (supp {P. P \\<Turnstile> x})\n  \\<lbrakk>?P9 \\<in> {P. P \\<Turnstile> x};\n   ?P9 \\<approx>\\<cdot>\\<^sub>S ?Q9\\<rbrakk>\n  \\<Longrightarrow> ?Q9 \\<in> {P. P \\<Turnstile> x}\n  \\<lbrakk>finite (supp ?S);\n   \\<And>P Q.\n      \\<lbrakk>P \\<in> ?S; P \\<approx>\\<cdot>\\<^sub>S Q\\<rbrakk>\n      \\<Longrightarrow> Q \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?P \\<Turnstile>\\<^sub>S\n                    Disj\n                     (Abs_bset\n                       (S_transform.characteristic_weak_formula ` ?S)) =\n                    (?P \\<in> ?S)\n  \\<lbrakk>finite (supp ?S);\n   \\<And>P Q.\n      \\<lbrakk>P \\<in> ?S; P \\<approx>\\<cdot>\\<^sub>S Q\\<rbrakk>\n      \\<Longrightarrow> Q \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> S_transform.weak_formula\n                     (Disj\n                       (Abs_bset\n                         (S_transform.characteristic_weak_formula ` ?S)))\n  \\<lbrakk>S_transform.weak_formula ?y7;\n   \\<forall>P. P \\<Turnstile> x = P \\<Turnstile>\\<^sub>S ?y7\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by (metis (no_types, lifting) mem_Collect_eq)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}