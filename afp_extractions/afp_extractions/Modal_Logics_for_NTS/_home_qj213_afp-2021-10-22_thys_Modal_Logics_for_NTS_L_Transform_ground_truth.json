{"file_name": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS/L_Transform.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS", "problem_names": ["lemma supp_AC [simp]: \"supp (AC x) = supp x\"", "lemma supp_EF [simp]: \"supp (EF x) = supp x\"", "lemma supp_Act [simp]: \"supp (Act \\<alpha>) = supp \\<alpha>\"", "lemma supp_Eff [simp]: \"supp (Eff f) = supp f\"", "lemma L_satisfies_eqvt: assumes \"P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>\" shows \"(p \\<bullet> P\\<^sub>L) \\<turnstile>\\<^sub>L (p \\<bullet> \\<phi>)\"", "lemma L_transition_eqvt: assumes \"P\\<^sub>L \\<rightarrow>\\<^sub>L \\<alpha>\\<^sub>LP\\<^sub>L'\" shows \"(p \\<bullet> P\\<^sub>L) \\<rightarrow>\\<^sub>L (p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L')\"", "lemma L_transition_AC_strong:\n    assumes \"finite (supp X)\" and \"AC (f,F,P) \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\"\n    shows \"\\<exists>\\<alpha> P'. P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and> \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> = \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), P')\\<rangle> \\<and> bn \\<alpha> \\<sharp>* X\"", "lemma L_transition_AC_fresh:\n    assumes \"bn \\<alpha> \\<sharp>* (F,f,P)\"\n    shows \"AC (f,F,P) \\<rightarrow>\\<^sub>L \\<langle>Act \\<alpha>, P\\<^sub>L'\\<rangle> \\<longleftrightarrow> (\\<exists>P'. P\\<^sub>L' = EF (L (\\<alpha>,F,f), P') \\<and> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>)\"", "lemma L_transform_Tree_eqvt [eqvt]: \"p \\<bullet> L_transform_Tree t = L_transform_Tree (p \\<bullet> t)\"", "lemma alpha_Tree_L_transform_Tree:\n  assumes \"alpha_Tree t1 t2\"\n  shows \"L_transform_Tree t1 = L_transform_Tree t2\"", "lemma L_transform_Tree\\<^sub>\\<alpha>_eqvt [eqvt]: \"p \\<bullet> L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> = L_transform_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\"", "lemma L_transform_Tree\\<^sub>\\<alpha>_Conj\\<^sub>\\<alpha> [simp]: \"L_transform_Tree\\<^sub>\\<alpha> (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = Formula.Conj\\<^sub>\\<alpha> (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\"", "lemma L_transform_Tree\\<^sub>\\<alpha>_Not\\<^sub>\\<alpha> [simp]: \"L_transform_Tree\\<^sub>\\<alpha> (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = Formula.Not\\<^sub>\\<alpha> (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"", "lemma L_transform_Tree\\<^sub>\\<alpha>_Pred\\<^sub>\\<alpha> [simp]: \"L_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> f \\<phi>) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Pred\\<^sub>\\<alpha> \\<phi>)\"", "lemma L_transform_Tree\\<^sub>\\<alpha>_Act\\<^sub>\\<alpha> [simp]: \"L_transform_Tree\\<^sub>\\<alpha> (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Act\\<^sub>\\<alpha> (Act \\<alpha>) (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\"", "lemma finite_supp_map_bset_L_transform_Tree\\<^sub>\\<alpha> [simp]:\n  assumes \"finite (supp tset\\<^sub>\\<alpha>)\"\n  shows \"finite (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\"", "lemma L_transform_Tree\\<^sub>\\<alpha>_preserves_hereditarily_fs:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"Formula.hereditarily_fs (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\"", "lemma L_transform_formula_eqvt [eqvt]: \"p \\<bullet> L_transform_formula x = L_transform_formula (p \\<bullet> x)\"", "lemma L_transform_formula_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"L_transform_formula (Conj xset) = Formula.Conj\\<^sub>\\<alpha> (map_bset L_transform_formula xset)\"", "lemma L_transform_formula_Not [simp]: \"L_transform_formula (Not x) = Formula.Not\\<^sub>\\<alpha> (L_transform_formula x)\"", "lemma L_transform_formula_Pred [simp]: \"L_transform_formula (Pred f \\<phi>) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Pred\\<^sub>\\<alpha> \\<phi>)\"", "lemma L_transform_formula_Act [simp]: \"L_transform_formula (FL_Formula.Act f \\<alpha> x) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Act\\<^sub>\\<alpha> (Act \\<alpha>) (L_transform_formula x))\"", "lemma L_transform_formula_hereditarily_fs [simp]: \"Formula.hereditarily_fs (L_transform_formula x)\"", "lemma L_transform_eqvt [eqvt]: \"p \\<bullet> L_transform x = L_transform (p \\<bullet> x)\"", "lemma finite_supp_map_bset_L_transform [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"finite (supp (map_bset L_transform xset))\"", "lemma L_transform_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"L_transform (Conj xset) = Formula.Conj (map_bset L_transform xset)\"", "lemma L_transform_Not [simp]: \"L_transform (Not x) = Formula.Not (L_transform x)\"", "lemma L_transform_Pred [simp]: \"L_transform (Pred f \\<phi>) = Formula.Act (Eff f) (Formula.Pred \\<phi>)\"", "lemma L_transform_Act [simp]: \"L_transform (FL_Formula.Act f \\<alpha> x) = Formula.Act (Eff f) (Formula.Act (Act \\<alpha>) (L_transform x))\"", "theorem FL_valid_iff_valid_L_transform:\n    assumes \"(x::('idx,'pred,'act,'effect) formula) \\<in> \\<A>[F]\"\n    shows \"FL_valid P x \\<longleftrightarrow> L_transform.valid (EF (F, P)) (L_transform x)\"", "lemma L_bisimilar_is_L_transform_bisimulation: \"L_transform.is_bisimulation L_bisimilar\"", "lemma invL_FL_bisimilar_is_L_bisimulation: \"is_L_bisimulation invL_FL_bisimilar\"", "theorem \"P \\<sim>\\<cdot>[F] Q \\<longleftrightarrow> EF (F,P) \\<sim>\\<cdot>\\<^sub>L EF(F,Q)\"", "theorem \"EF (F,P) \\<sim>\\<cdot>\\<^sub>L EF(F,Q) \\<longrightarrow> P \\<sim>\\<cdot>[F] Q\""], "translations": [["", "lemma supp_AC [simp]: \"supp (AC x) = supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (AC x) = supp x", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> AC x \\<noteq> AC x}} =\n    {a. infinite {b. (a \\<rightleftharpoons> b) \\<bullet> x \\<noteq> x}}", "by simp"], ["", "lemma supp_EF [simp]: \"supp (EF x) = supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (EF x) = supp x", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> EF x \\<noteq> EF x}} =\n    {a. infinite {b. (a \\<rightleftharpoons> b) \\<bullet> x \\<noteq> x}}", "by simp"], ["", "instantiation L_state :: (fs,fs) fs\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) L_state, fs_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "fix x :: \"('a,'b) L_state\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "show \"finite (supp x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp x)", "by (cases x) (simp add: finite_supp)+"], ["proof (state)\nthis:\n  finite (supp x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Actions and binding names\\<close>"], ["", "datatype ('act,'effect) L_action =\n    Act 'act\n  | Eff 'effect"], ["", "instantiation L_action :: (pt,pt) pt\nbegin"], ["", "fun permute_L_action :: \"perm \\<Rightarrow> ('a,'b) L_action \\<Rightarrow> ('a,'b) L_action\" where\n    \"p \\<bullet> (Act \\<alpha>) = Act (p \\<bullet> \\<alpha>)\"\n  | \"p \\<bullet> (Eff f) = Eff (p \\<bullet> f)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) L_action, pt_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "fix x :: \"('a,'b) L_action\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. 0 \\<bullet> x = x\n 2. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "show \"0 \\<bullet> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<bullet> x = x", "by (cases x, simp_all)"], ["proof (state)\nthis:\n  0 \\<bullet> x = x\n\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "fix p q and x :: \"('a,'b) L_action\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q x. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "show \"(p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x", "by (cases x, simp_all)"], ["proof (state)\nthis:\n  (p + q) \\<bullet> x = p \\<bullet> q \\<bullet> x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "declare permute_L_action.simps [eqvt]"], ["", "lemma supp_Act [simp]: \"supp (Act \\<alpha>) = supp \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (L_action.Act \\<alpha>) = supp \\<alpha>", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> L_action.Act\n             \\<alpha> \\<noteq>\n             L_action.Act \\<alpha>}} =\n    {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> \\<alpha> \\<noteq>\n             \\<alpha>}}", "by simp"], ["", "lemma supp_Eff [simp]: \"supp (Eff f) = supp f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Eff f) = supp f", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> Eff f \\<noteq> Eff f}} =\n    {a. infinite {b. (a \\<rightleftharpoons> b) \\<bullet> f \\<noteq> f}}", "by simp"], ["", "instantiation L_action :: (fs,fs) fs\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) L_action, fs_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "fix x :: \"('a,'b) L_action\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. finite (supp x)", "show \"finite (supp x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp x)", "by (cases x) (simp add: finite_supp)+"], ["proof (state)\nthis:\n  finite (supp x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation L_action :: (bn,fs) bn\nbegin"], ["", "fun bn_L_action :: \"('a,'b) L_action \\<Rightarrow> atom set\" where\n    \"bn_L_action (Act \\<alpha>) = bn \\<alpha>\"\n  | \"bn_L_action (Eff _) = {}\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(('a, 'b) L_action, bn_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>. p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)\n 2. \\<And>\\<alpha>. finite (bn \\<alpha>)", "fix p and \\<alpha> :: \"('a,'b) L_action\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p \\<alpha>. p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)\n 2. \\<And>\\<alpha>. finite (bn \\<alpha>)", "show \"p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)", "by (cases \\<alpha>) (simp add: bn_eqvt, simp)"], ["proof (state)\nthis:\n  p \\<bullet> bn \\<alpha> = bn (p \\<bullet> \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>. finite (bn \\<alpha>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>. finite (bn \\<alpha>)", "fix \\<alpha> :: \"('a,'b) L_action\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha>. finite (bn \\<alpha>)", "show \"finite (bn \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (bn \\<alpha>)", "by (cases \\<alpha>) (simp add: bn_finite, simp)"], ["proof (state)\nthis:\n  finite (bn \\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Satisfaction\\<close>"], ["", "context effect_nominal_ts\nbegin"], ["", "fun L_satisfies :: \"('state,'effect) L_state \\<Rightarrow> 'pred \\<Rightarrow> bool\" (infix \"\\<turnstile>\\<^sub>L\" 70) where\n    \"AC (_,_,P) \\<turnstile>\\<^sub>L \\<phi> \\<longleftrightarrow> P \\<turnstile> \\<phi>\"\n  | \"EF _       \\<turnstile>\\<^sub>L \\<phi> \\<longleftrightarrow> False\""], ["", "lemma L_satisfies_eqvt: assumes \"P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>\" shows \"(p \\<bullet> P\\<^sub>L) \\<turnstile>\\<^sub>L (p \\<bullet> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "proof (cases P\\<^sub>L)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "case (AC fFP)"], ["proof (state)\nthis:\n  P\\<^sub>L = AC fFP\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "with assms"], ["proof (chain)\npicking this:\n  P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>\n  P\\<^sub>L = AC fFP", "have \"snd (snd fFP) \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>\n  P\\<^sub>L = AC fFP\n\ngoal (1 subgoal):\n 1. snd (snd fFP) \\<turnstile> \\<phi>", "by (metis L_satisfies.simps(1) prod.collapse)"], ["proof (state)\nthis:\n  snd (snd fFP) \\<turnstile> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "then"], ["proof (chain)\npicking this:\n  snd (snd fFP) \\<turnstile> \\<phi>", "have \"snd (snd (p \\<bullet> fFP)) \\<turnstile> p \\<bullet> \\<phi>\""], ["proof (prove)\nusing this:\n  snd (snd fFP) \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. snd (snd (p \\<bullet> fFP)) \\<turnstile> p \\<bullet> \\<phi>", "by (metis satisfies_eqvt snd_eqvt)"], ["proof (state)\nthis:\n  snd (snd (p \\<bullet> fFP)) \\<turnstile> p \\<bullet> \\<phi>\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "then"], ["proof (chain)\npicking this:\n  snd (snd (p \\<bullet> fFP)) \\<turnstile> p \\<bullet> \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  snd (snd (p \\<bullet> fFP)) \\<turnstile> p \\<bullet> \\<phi>\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "using AC"], ["proof (prove)\nusing this:\n  snd (snd (p \\<bullet> fFP)) \\<turnstile> p \\<bullet> \\<phi>\n  P\\<^sub>L = AC fFP\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "by (metis L_satisfies.simps(1) permute_L_state.simps(1) prod.collapse)"], ["proof (state)\nthis:\n  p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "case EF"], ["proof (state)\nthis:\n  P\\<^sub>L = EF x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "with assms"], ["proof (chain)\npicking this:\n  P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>\n  P\\<^sub>L = EF x2_", "have \"False\""], ["proof (prove)\nusing this:\n  P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>\n  P\\<^sub>L = EF x2_\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>", ".."], ["proof (state)\nthis:\n  p \\<bullet> P\\<^sub>L \\<turnstile>\\<^sub>L p \\<bullet> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Transitions\\<close>"], ["", "context effect_nominal_ts\nbegin"], ["", "fun L_transition :: \"('state,'effect) L_state \\<Rightarrow> (('act,'effect) L_action, ('state,'effect) L_state) residual \\<Rightarrow> bool\" (infix \"\\<rightarrow>\\<^sub>L\" 70) where\n    \"AC (f,F,P) \\<rightarrow>\\<^sub>L \\<alpha>P' \\<longleftrightarrow> (\\<exists>\\<alpha> P'. P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and> \\<alpha>P' = \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), P')\\<rangle> \\<and> bn \\<alpha> \\<sharp>* (F,f))\" \\<comment> \\<open>note the freshness condition\\<close>\n  | \"EF (F,P) \\<rightarrow>\\<^sub>L \\<alpha>P' \\<longleftrightarrow> (\\<exists>f. f \\<in>\\<^sub>f\\<^sub>s F \\<and> \\<alpha>P' = \\<langle>Eff f, AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>)\""], ["", "lemma L_transition_eqvt: assumes \"P\\<^sub>L \\<rightarrow>\\<^sub>L \\<alpha>\\<^sub>LP\\<^sub>L'\" shows \"(p \\<bullet> P\\<^sub>L) \\<rightarrow>\\<^sub>L (p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n    p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "proof (cases P\\<^sub>L)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "case AC"], ["proof (state)\nthis:\n  P\\<^sub>L = AC x1_\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "{"], ["proof (state)\nthis:\n  P\\<^sub>L = AC x1_\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "fix f F P"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "assume *: \"P\\<^sub>L = AC (f,F,P)\""], ["proof (state)\nthis:\n  P\\<^sub>L = AC (f, F, P)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "with assms"], ["proof (chain)\npicking this:\n  P\\<^sub>L \\<rightarrow>\\<^sub>L \\<alpha>\\<^sub>LP\\<^sub>L'\n  P\\<^sub>L = AC (f, F, P)", "obtain \\<alpha> P' where trans: \"P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\" and \\<alpha>P': \"\\<alpha>\\<^sub>LP\\<^sub>L' = \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), P')\\<rangle>\" and fresh: \"bn \\<alpha> \\<sharp>* (F,f)\""], ["proof (prove)\nusing this:\n  P\\<^sub>L \\<rightarrow>\\<^sub>L \\<alpha>\\<^sub>LP\\<^sub>L'\n  P\\<^sub>L = AC (f, F, P)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> P'.\n        \\<lbrakk>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>;\n         \\<alpha>\\<^sub>LP\\<^sub>L' =\n         \\<langle>L_action.Act\n                   \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>;\n         bn \\<alpha> \\<sharp>* (F, f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "from trans"], ["proof (chain)\npicking this:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "have \"p \\<bullet> P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>, p \\<bullet> P'\\<rangle>\""], ["proof (prove)\nusing this:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<rightarrow>\n    \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle>", "by (simp add: transition_eqvt')"], ["proof (state)\nthis:\n  p \\<bullet> P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "from \\<alpha>P'"], ["proof (chain)\npicking this:\n  \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>", "have \"p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' = \\<langle>Act (p \\<bullet> \\<alpha>), EF (L (p \\<bullet> \\<alpha>, p \\<bullet> F, p \\<bullet> f), p \\<bullet> P')\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n    \\<langle>L_action.Act\n              (p \\<bullet> \\<alpha>),EF\n(L (p \\<bullet> \\<alpha>, p \\<bullet> F, p \\<bullet> f),\n p \\<bullet> P')\\<rangle>", "by (simp add: L_eqvt')"], ["proof (state)\nthis:\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L\n  (p \\<bullet> \\<alpha>, p \\<bullet> F, p \\<bullet> f),\n p \\<bullet> P')\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L\n  (p \\<bullet> \\<alpha>, p \\<bullet> F, p \\<bullet> f),\n p \\<bullet> P')\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "from fresh"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (F, f)", "have \"bn (p \\<bullet> \\<alpha>) \\<sharp>* (p \\<bullet> F, p \\<bullet> f)\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. bn (p \\<bullet> \\<alpha>) \\<sharp>* (p \\<bullet> F, p \\<bullet> f)", "by (metis bn_eqvt fresh_star_Pair fresh_star_permute_iff)"], ["proof (state)\nthis:\n  bn (p \\<bullet> \\<alpha>) \\<sharp>* (p \\<bullet> F, p \\<bullet> f)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "ultimately"], ["proof (chain)\npicking this:\n  p \\<bullet> P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle>\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L\n  (p \\<bullet> \\<alpha>, p \\<bullet> F, p \\<bullet> f),\n p \\<bullet> P')\\<rangle>\n  bn (p \\<bullet> \\<alpha>) \\<sharp>* (p \\<bullet> F, p \\<bullet> f)", "have \"p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\""], ["proof (prove)\nusing this:\n  p \\<bullet> P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle>\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L\n  (p \\<bullet> \\<alpha>, p \\<bullet> F, p \\<bullet> f),\n p \\<bullet> P')\\<rangle>\n  bn (p \\<bullet> \\<alpha>) \\<sharp>* (p \\<bullet> F, p \\<bullet> f)\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n    p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "using \"*\""], ["proof (prove)\nusing this:\n  p \\<bullet> P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle>\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L\n  (p \\<bullet> \\<alpha>, p \\<bullet> F, p \\<bullet> f),\n p \\<bullet> P')\\<rangle>\n  bn (p \\<bullet> \\<alpha>) \\<sharp>* (p \\<bullet> F, p \\<bullet> f)\n  P\\<^sub>L = AC (f, F, P)\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n    p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "by auto"], ["proof (state)\nthis:\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "}"], ["proof (state)\nthis:\n  P\\<^sub>L = AC (?f11, ?F11, ?P11) \\<Longrightarrow>\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       P\\<^sub>L = AC x1 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n 2. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "with AC"], ["proof (chain)\npicking this:\n  P\\<^sub>L = AC x1_\n  P\\<^sub>L = AC (?f11, ?F11, ?P11) \\<Longrightarrow>\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "show ?thesis"], ["proof (prove)\nusing this:\n  P\\<^sub>L = AC x1_\n  P\\<^sub>L = AC (?f11, ?F11, ?P11) \\<Longrightarrow>\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n    p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "by (metis prod.collapse)"], ["proof (state)\nthis:\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "case EF"], ["proof (state)\nthis:\n  P\\<^sub>L = EF x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "{"], ["proof (state)\nthis:\n  P\\<^sub>L = EF x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "fix F P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "assume *: \"P\\<^sub>L = EF (F,P)\""], ["proof (state)\nthis:\n  P\\<^sub>L = EF (F, P)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "with assms"], ["proof (chain)\npicking this:\n  P\\<^sub>L \\<rightarrow>\\<^sub>L \\<alpha>\\<^sub>LP\\<^sub>L'\n  P\\<^sub>L = EF (F, P)", "obtain f where \"f \\<in>\\<^sub>f\\<^sub>s F\" and \"\\<alpha>\\<^sub>LP\\<^sub>L' = \\<langle>Eff f, AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\""], ["proof (prove)\nusing this:\n  P\\<^sub>L \\<rightarrow>\\<^sub>L \\<alpha>\\<^sub>LP\\<^sub>L'\n  P\\<^sub>L = EF (F, P)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F;\n         \\<alpha>\\<^sub>LP\\<^sub>L' =\n         \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "then"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>", "have \"(p \\<bullet> f) \\<in>\\<^sub>f\\<^sub>s (p \\<bullet> F)\" and \"p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' = \\<langle>Eff (p \\<bullet> f), AC (p \\<bullet> f, p \\<bullet> F, \\<langle>p \\<bullet> f\\<rangle>(p \\<bullet> P))\\<rangle>\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (1 subgoal):\n 1. p \\<bullet> f \\<in>\\<^sub>f\\<^sub>s p \\<bullet> F &&&\n    p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n    \\<langle>Eff (p \\<bullet> f),AC (p \\<bullet> f, p \\<bullet> F,\n                                     \\<langle>p \\<bullet> f\\<rangle>(p \\<bullet> P))\\<rangle>", "by simp+"], ["proof (state)\nthis:\n  p \\<bullet> f \\<in>\\<^sub>f\\<^sub>s p \\<bullet> F\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>Eff (p \\<bullet> f),AC (p \\<bullet> f, p \\<bullet> F,\n                                   \\<langle>p \\<bullet> f\\<rangle>(p \\<bullet> P))\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> f \\<in>\\<^sub>f\\<^sub>s p \\<bullet> F\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>Eff (p \\<bullet> f),AC (p \\<bullet> f, p \\<bullet> F,\n                                   \\<langle>p \\<bullet> f\\<rangle>(p \\<bullet> P))\\<rangle>", "have \"p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\""], ["proof (prove)\nusing this:\n  p \\<bullet> f \\<in>\\<^sub>f\\<^sub>s p \\<bullet> F\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>Eff (p \\<bullet> f),AC (p \\<bullet> f, p \\<bullet> F,\n                                   \\<langle>p \\<bullet> f\\<rangle>(p \\<bullet> P))\\<rangle>\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n    p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "using \"*\" L_transition.simps(2) Pair_eqvt permute_L_state.simps(2)"], ["proof (prove)\nusing this:\n  p \\<bullet> f \\<in>\\<^sub>f\\<^sub>s p \\<bullet> F\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L' =\n  \\<langle>Eff (p \\<bullet> f),AC (p \\<bullet> f, p \\<bullet> F,\n                                   \\<langle>p \\<bullet> f\\<rangle>(p \\<bullet> P))\\<rangle>\n  P\\<^sub>L = EF (F, P)\n  EF (?F, ?P) \\<rightarrow>\\<^sub>L ?\\<alpha>P' =\n  (\\<exists>f.\n      f \\<in>\\<^sub>f\\<^sub>s ?F \\<and>\n      ?\\<alpha>P' =\n      \\<langle>Eff f,AC (f, ?F, \\<langle>f\\<rangle>?P)\\<rangle>)\n  ?p \\<bullet> (?x, ?y) = (?p \\<bullet> ?x, ?p \\<bullet> ?y)\n  ?p \\<bullet> EF ?x = EF (?p \\<bullet> ?x)\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n    p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "by force"], ["proof (state)\nthis:\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "}"], ["proof (state)\nthis:\n  P\\<^sub>L = EF (?F11, ?P11) \\<Longrightarrow>\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       P\\<^sub>L = EF x2 \\<Longrightarrow>\n       p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n       p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "with EF"], ["proof (chain)\npicking this:\n  P\\<^sub>L = EF x2_\n  P\\<^sub>L = EF (?F11, ?P11) \\<Longrightarrow>\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "show ?thesis"], ["proof (prove)\nusing this:\n  P\\<^sub>L = EF x2_\n  P\\<^sub>L = EF (?F11, ?P11) \\<Longrightarrow>\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n\ngoal (1 subgoal):\n 1. p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n    p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'", "by (metis prod.collapse)"], ["proof (state)\nthis:\n  p \\<bullet> P\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<alpha>\\<^sub>LP\\<^sub>L'\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The binding names in the alpha-variant that witnesses the $L$-transition may be chosen fresh\n  for any finitely supported context.\\<close>"], ["", "lemma L_transition_AC_strong:\n    assumes \"finite (supp X)\" and \"AC (f,F,P) \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\"\n    shows \"\\<exists>\\<alpha> P'. P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and> \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> = \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), P')\\<rangle> \\<and> bn \\<alpha> \\<sharp>* X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> P'.\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n       \\<langle>L_action.Act\n                 \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n       bn \\<alpha> \\<sharp>* X", "using assms"], ["proof (prove)\nusing this:\n  finite (supp X)\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> P'.\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n       \\<langle>L_action.Act\n                 \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n       bn \\<alpha> \\<sharp>* X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "from \\<open>AC (f,F,P) \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<close>"], ["proof (chain)\npicking this:\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>", "obtain \\<alpha> P' where transition: \"P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\" and alpha: \"\\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> = \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), P')\\<rangle>\" and fresh: \"bn \\<alpha> \\<sharp>* (F,f)\""], ["proof (prove)\nusing this:\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> P'.\n        \\<lbrakk>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>;\n         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n         \\<langle>L_action.Act\n                   \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>;\n         bn \\<alpha> \\<sharp>* (F, f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transition.simps(1))"], ["proof (state)\nthis:\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "let ?Act = \"Act \\<alpha> :: ('act,'effect) L_action\" \\<comment> \\<open>the type annotation prevents a type that is too polymorphic and doesn't fix~@{typ 'effect}\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "have \"finite (bn \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (bn \\<alpha>)", "by (fact bn_finite)"], ["proof (state)\nthis:\n  finite (bn \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "moreover"], ["proof (state)\nthis:\n  finite (bn \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "note \\<open>finite (supp X)\\<close>"], ["proof (state)\nthis:\n  finite (supp X)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "moreover"], ["proof (state)\nthis:\n  finite (supp X)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "have \"finite (supp (\\<langle>?Act, EF (L (\\<alpha>,F,f), P')\\<rangle>, \\<langle>\\<alpha>,P'\\<rangle>, F, f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (supp\n       (\\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n        \\<langle>\\<alpha>,P'\\<rangle>, F, f))", "by (metis finite_Diff finite_UnI finite_supp supp_Pair supp_abs_residual_pair)"], ["proof (state)\nthis:\n  finite\n   (supp\n     (\\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n      \\<langle>\\<alpha>,P'\\<rangle>, F, f))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "moreover"], ["proof (state)\nthis:\n  finite\n   (supp\n     (\\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n      \\<langle>\\<alpha>,P'\\<rangle>, F, f))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "from fresh"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (F, f)", "have \"bn \\<alpha> \\<sharp>* (\\<langle>?Act, EF (L (\\<alpha>,F,f), P')\\<rangle>, \\<langle>\\<alpha>,P'\\<rangle>, F, f)\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* (\\<langle>L_action.Act\n                                     \\<alpha>,EF\n         (L (\\<alpha>, F, f), P')\\<rangle>,\n                           \\<langle>\\<alpha>,P'\\<rangle>, F, f)", "by (auto simp add: fresh_star_def fresh_def supp_Pair supp_abs_residual_pair)"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* (\\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle>,\n                         \\<langle>\\<alpha>,P'\\<rangle>, F, f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "ultimately"], ["proof (chain)\npicking this:\n  finite (bn \\<alpha>)\n  finite (supp X)\n  finite\n   (supp\n     (\\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n      \\<langle>\\<alpha>,P'\\<rangle>, F, f))\n  bn \\<alpha> \\<sharp>* (\\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle>,\n                         \\<langle>\\<alpha>,P'\\<rangle>, F, f)", "obtain p where fresh_X: \"(p \\<bullet> bn \\<alpha>) \\<sharp>* X\" and \"supp (\\<langle>?Act, EF (L (\\<alpha>,F,f), P')\\<rangle>, \\<langle>\\<alpha>,P'\\<rangle>, F, f) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  finite (bn \\<alpha>)\n  finite (supp X)\n  finite\n   (supp\n     (\\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n      \\<langle>\\<alpha>,P'\\<rangle>, F, f))\n  bn \\<alpha> \\<sharp>* (\\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle>,\n                         \\<langle>\\<alpha>,P'\\<rangle>, F, f)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* X;\n         supp\n          (\\<langle>L_action.Act\n                     \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n           \\<langle>\\<alpha>,P'\\<rangle>, F, f) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis at_set_avoiding2)"], ["proof (state)\nthis:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* X\n  supp\n   (\\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n    \\<langle>\\<alpha>,P'\\<rangle>, F, f) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "then"], ["proof (chain)\npicking this:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* X\n  supp\n   (\\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n    \\<langle>\\<alpha>,P'\\<rangle>, F, f) \\<sharp>* p", "have \"supp \\<langle>?Act, EF (L (\\<alpha>,F,f), P')\\<rangle> \\<sharp>* p\" and \"supp \\<langle>\\<alpha>,P'\\<rangle> \\<sharp>* p\" and \"supp (F,f) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* X\n  supp\n   (\\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>,\n    \\<langle>\\<alpha>,P'\\<rangle>, F, f) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp\n     \\<langle>L_action.Act\n               \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<sharp>* p &&&\n    supp \\<langle>\\<alpha>,P'\\<rangle> \\<sharp>* p &&&\n    supp (F, f) \\<sharp>* p", "by (metis fresh_star_Un supp_Pair)+"], ["proof (state)\nthis:\n  supp\n   \\<langle>L_action.Act\n             \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<sharp>* p\n  supp \\<langle>\\<alpha>,P'\\<rangle> \\<sharp>* p\n  supp (F, f) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "then"], ["proof (chain)\npicking this:\n  supp\n   \\<langle>L_action.Act\n             \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<sharp>* p\n  supp \\<langle>\\<alpha>,P'\\<rangle> \\<sharp>* p\n  supp (F, f) \\<sharp>* p", "have \"p \\<bullet> \\<langle>?Act, EF (L (\\<alpha>,F,f), P')\\<rangle> = \\<langle>?Act, EF (L (\\<alpha>,F,f), P')\\<rangle>\" and \"p \\<bullet> \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>,P'\\<rangle>\" and \"p \\<bullet> (F,f) = (F,f)\""], ["proof (prove)\nusing this:\n  supp\n   \\<langle>L_action.Act\n             \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<sharp>* p\n  supp \\<langle>\\<alpha>,P'\\<rangle> \\<sharp>* p\n  supp (F, f) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<langle>L_action.Act\n                          \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> =\n    \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> &&&\n    p \\<bullet> \\<langle>\\<alpha>,P'\\<rangle> =\n    \\<langle>\\<alpha>,P'\\<rangle> &&&\n    p \\<bullet> (F, f) = (F, f)", "by (metis supp_perm_eq)+"], ["proof (state)\nthis:\n  p \\<bullet> \\<langle>L_action.Act\n                        \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  p \\<bullet> \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>,P'\\<rangle>\n  p \\<bullet> (F, f) = (F, f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> \\<langle>L_action.Act\n                        \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  p \\<bullet> \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>,P'\\<rangle>\n  p \\<bullet> (F, f) = (F, f)", "have \"\\<langle>Act (p \\<bullet> \\<alpha>), EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\\<rangle> = \\<langle>?Act, EF (L (\\<alpha>,F,f), P')\\<rangle>\" and \"\\<langle>p \\<bullet> \\<alpha>, p \\<bullet> P'\\<rangle> = \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (prove)\nusing this:\n  p \\<bullet> \\<langle>L_action.Act\n                        \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  p \\<bullet> \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>,P'\\<rangle>\n  p \\<bullet> (F, f) = (F, f)\n\ngoal (1 subgoal):\n 1. \\<langle>L_action.Act\n              (p \\<bullet> \\<alpha>),EF\n(L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\\<rangle> =\n    \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> &&&\n    \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle> =\n    \\<langle>\\<alpha>,P'\\<rangle>", "using permute_L_action.simps(1) permute_L_state.simps(2) abs_residual_pair_eqvt L_eqvt' Pair_eqvt"], ["proof (prove)\nusing this:\n  p \\<bullet> \\<langle>L_action.Act\n                        \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  p \\<bullet> \\<langle>\\<alpha>,P'\\<rangle> = \\<langle>\\<alpha>,P'\\<rangle>\n  p \\<bullet> (F, f) = (F, f)\n  ?p \\<bullet> L_action.Act ?\\<alpha> =\n  L_action.Act (?p \\<bullet> ?\\<alpha>)\n  ?p \\<bullet> EF ?x = EF (?p \\<bullet> ?x)\n  ?p \\<bullet> \\<langle>?\\<alpha>,?P\\<rangle> =\n  \\<langle>?p \\<bullet> ?\\<alpha>,?p \\<bullet> ?P\\<rangle>\n  ?p \\<bullet> L (?\\<alpha>, ?P, ?f) =\n  L (?p \\<bullet> ?\\<alpha>, ?p \\<bullet> ?P, ?p \\<bullet> ?f)\n  ?p \\<bullet> (?x, ?y) = (?p \\<bullet> ?x, ?p \\<bullet> ?y)\n\ngoal (1 subgoal):\n 1. \\<langle>L_action.Act\n              (p \\<bullet> \\<alpha>),EF\n(L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\\<rangle> =\n    \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> &&&\n    \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle> =\n    \\<langle>\\<alpha>,P'\\<rangle>", "by auto"], ["proof (state)\nthis:\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> P')\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle> =\n  \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (supp X);\n     AC (f, F, P) \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                         P \\<rightarrow>\n                         \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n                         \\<langle>L_action.Act\n                                   \\<alpha>,EF\n       (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n                         bn \\<alpha> \\<sharp>* X", "then"], ["proof (chain)\npicking this:\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> P')\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle> =\n  \\<langle>\\<alpha>,P'\\<rangle>", "show \"\\<exists>\\<alpha> P'. P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and> \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> = \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), P')\\<rangle> \\<and> bn \\<alpha> \\<sharp>* X\""], ["proof (prove)\nusing this:\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> P')\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle> =\n  \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> P'.\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n       \\<langle>L_action.Act\n                 \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n       bn \\<alpha> \\<sharp>* X", "using transition and alpha and fresh_X"], ["proof (prove)\nusing this:\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> P')\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  \\<langle>p \\<bullet> \\<alpha>,p \\<bullet> P'\\<rangle> =\n  \\<langle>\\<alpha>,P'\\<rangle>\n  P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* X\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> P'.\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n       \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n       \\<langle>L_action.Act\n                 \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n       bn \\<alpha> \\<sharp>* X", "by (metis bn_eqvt)"], ["proof (state)\nthis:\n  \\<exists>\\<alpha> P'.\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n     \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n     \\<langle>L_action.Act\n               \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle> \\<and>\n     bn \\<alpha> \\<sharp>* X\n\ngoal:\nNo subgoals!", "qed"], ["", "(* bn \\<alpha> \\<sharp>* (F,f) is required for the \\<longleftarrow> implication as well as for the \\<longrightarrow> implication;\n     additionally bn \\<alpha> \\<sharp>* P is required for the \\<longrightarrow> implication. *)"], ["", "lemma L_transition_AC_fresh:\n    assumes \"bn \\<alpha> \\<sharp>* (F,f,P)\"\n    shows \"AC (f,F,P) \\<rightarrow>\\<^sub>L \\<langle>Act \\<alpha>, P\\<^sub>L'\\<rangle> \\<longleftrightarrow> (\\<exists>P'. P\\<^sub>L' = EF (L (\\<alpha>,F,f), P') \\<and> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> =\n    (\\<exists>P'.\n        P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n        P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "assume \"AC (f,F,P) \\<rightarrow>\\<^sub>L \\<langle>Act \\<alpha>, P\\<^sub>L'\\<rangle>\""], ["proof (state)\nthis:\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "moreover"], ["proof (state)\nthis:\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "have \"finite (supp (F,f,P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (F, f, P))", "by (fact finite_supp)"], ["proof (state)\nthis:\n  finite (supp (F, f, P))\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "ultimately"], ["proof (chain)\npicking this:\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>\n  finite (supp (F, f, P))", "obtain \\<alpha>' P' where trans: \"P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\" and eq: \"\\<langle>Act \\<alpha> :: ('act,'effect) L_action, P\\<^sub>L'\\<rangle> = \\<langle>Act \\<alpha>', EF (L (\\<alpha>',F,f), P')\\<rangle>\" and fresh: \"bn \\<alpha>' \\<sharp>* (F,f,P)\""], ["proof (prove)\nusing this:\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>\n  finite (supp (F, f, P))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' P'.\n        \\<lbrakk>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>;\n         \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> =\n         \\<langle>L_action.Act\n                   \\<alpha>',EF (L (\\<alpha>', F, f), P')\\<rangle>;\n         bn \\<alpha>' \\<sharp>* (F, f, P)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using L_transition_AC_strong"], ["proof (prove)\nusing this:\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>\n  finite (supp (F, f, P))\n  \\<lbrakk>finite (supp ?X);\n   AC (?f, ?F, ?P) \\<rightarrow>\\<^sub>L\n   \\<langle>?\\<alpha>\\<^sub>L,?P\\<^sub>L'\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<alpha> P'.\n                       ?P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n                       \\<langle>?\\<alpha>\\<^sub>L,?P\\<^sub>L'\\<rangle> =\n                       \\<langle>L_action.Act\n                                 \\<alpha>,EF\n     (L (\\<alpha>, ?F, ?f), P')\\<rangle> \\<and>\n                       bn \\<alpha> \\<sharp>* ?X\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' P'.\n        \\<lbrakk>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>;\n         \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> =\n         \\<langle>L_action.Act\n                   \\<alpha>',EF (L (\\<alpha>', F, f), P')\\<rangle>;\n         bn \\<alpha>' \\<sharp>* (F, f, P)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>',EF (L (\\<alpha>', F, f), P')\\<rangle>\n  bn \\<alpha>' \\<sharp>* (F, f, P)\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "from eq"], ["proof (chain)\npicking this:\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>',EF (L (\\<alpha>', F, f), P')\\<rangle>", "obtain p where p: \"p \\<bullet> (Act \\<alpha> :: ('act,'effect) L_action, P\\<^sub>L') = (Act \\<alpha>', EF (L (\\<alpha>',F,f), P'))\" and supp_p: \"supp p \\<subseteq> bn (Act \\<alpha> :: ('act,'effect) L_action) \\<union> p \\<bullet> bn (Act \\<alpha> :: ('act,'effect) L_action)\""], ["proof (prove)\nusing this:\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>',EF (L (\\<alpha>', F, f), P')\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<bullet> (L_action.Act \\<alpha>, P\\<^sub>L') =\n                 (L_action.Act \\<alpha>', EF (L (\\<alpha>', F, f), P'));\n         supp p\n         \\<subseteq> bn (L_action.Act \\<alpha>) \\<union>\n                     p \\<bullet> bn (L_action.Act \\<alpha>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using residual_eq_iff_perm_renaming"], ["proof (prove)\nusing this:\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>',EF (L (\\<alpha>', F, f), P')\\<rangle>\n  (\\<langle>?\\<alpha>1.0,?P1.0\\<rangle> =\n   \\<langle>?\\<alpha>2.0,?P2.0\\<rangle>) =\n  (\\<exists>p.\n      supp (?\\<alpha>1.0, ?P1.0) - bn ?\\<alpha>1.0 =\n      supp (?\\<alpha>2.0, ?P2.0) - bn ?\\<alpha>2.0 \\<and>\n      (supp (?\\<alpha>1.0, ?P1.0) - bn ?\\<alpha>1.0) \\<sharp>* p \\<and>\n      p \\<bullet> (?\\<alpha>1.0, ?P1.0) = (?\\<alpha>2.0, ?P2.0) \\<and>\n      p \\<bullet> bn ?\\<alpha>1.0 = bn ?\\<alpha>2.0 \\<and>\n      supp p\n      \\<subseteq> bn ?\\<alpha>1.0 \\<union> p \\<bullet> bn ?\\<alpha>1.0)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<bullet> (L_action.Act \\<alpha>, P\\<^sub>L') =\n                 (L_action.Act \\<alpha>', EF (L (\\<alpha>', F, f), P'));\n         supp p\n         \\<subseteq> bn (L_action.Act \\<alpha>) \\<union>\n                     p \\<bullet> bn (L_action.Act \\<alpha>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  p \\<bullet> (L_action.Act \\<alpha>, P\\<^sub>L') =\n  (L_action.Act \\<alpha>', EF (L (\\<alpha>', F, f), P'))\n  supp p\n  \\<subseteq> bn (L_action.Act \\<alpha>) \\<union>\n              p \\<bullet> bn (L_action.Act \\<alpha>)\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "from p"], ["proof (chain)\npicking this:\n  p \\<bullet> (L_action.Act \\<alpha>, P\\<^sub>L') =\n  (L_action.Act \\<alpha>', EF (L (\\<alpha>', F, f), P'))", "have p_\\<alpha>: \"p \\<bullet> \\<alpha> = \\<alpha>'\" and p_P\\<^sub>L': \"p \\<bullet> P\\<^sub>L' = EF (L (\\<alpha>',F,f), P')\""], ["proof (prove)\nusing this:\n  p \\<bullet> (L_action.Act \\<alpha>, P\\<^sub>L') =\n  (L_action.Act \\<alpha>', EF (L (\\<alpha>', F, f), P'))\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<alpha> = \\<alpha>' &&&\n    p \\<bullet> P\\<^sub>L' = EF (L (\\<alpha>', F, f), P')", "by simp_all"], ["proof (state)\nthis:\n  p \\<bullet> \\<alpha> = \\<alpha>'\n  p \\<bullet> P\\<^sub>L' = EF (L (\\<alpha>', F, f), P')\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "from supp_p and p_\\<alpha> and assms and fresh"], ["proof (chain)\npicking this:\n  supp p\n  \\<subseteq> bn (L_action.Act \\<alpha>) \\<union>\n              p \\<bullet> bn (L_action.Act \\<alpha>)\n  p \\<bullet> \\<alpha> = \\<alpha>'\n  bn \\<alpha> \\<sharp>* (F, f, P)\n  bn \\<alpha>' \\<sharp>* (F, f, P)", "have \"supp p \\<sharp>* (F, f, P)\""], ["proof (prove)\nusing this:\n  supp p\n  \\<subseteq> bn (L_action.Act \\<alpha>) \\<union>\n              p \\<bullet> bn (L_action.Act \\<alpha>)\n  p \\<bullet> \\<alpha> = \\<alpha>'\n  bn \\<alpha> \\<sharp>* (F, f, P)\n  bn \\<alpha>' \\<sharp>* (F, f, P)\n\ngoal (1 subgoal):\n 1. supp p \\<sharp>* (F, f, P)", "by (simp add: bn_eqvt fresh_star_def) blast"], ["proof (state)\nthis:\n  supp p \\<sharp>* (F, f, P)\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "then"], ["proof (chain)\npicking this:\n  supp p \\<sharp>* (F, f, P)", "have p_F: \"p \\<bullet> F = F\" and p_f: \"p \\<bullet> f = f\" and p_P: \"p \\<bullet> P = P\""], ["proof (prove)\nusing this:\n  supp p \\<sharp>* (F, f, P)\n\ngoal (1 subgoal):\n 1. p \\<bullet> F = F &&& p \\<bullet> f = f &&& p \\<bullet> P = P", "by (simp_all add: fresh_star_Pair perm_supp_eq)"], ["proof (state)\nthis:\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n  p \\<bullet> P = P\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "from p_P\\<^sub>L'"], ["proof (chain)\npicking this:\n  p \\<bullet> P\\<^sub>L' = EF (L (\\<alpha>', F, f), P')", "have \"P\\<^sub>L' = -p \\<bullet> EF (L (\\<alpha>',F,f), P')\""], ["proof (prove)\nusing this:\n  p \\<bullet> P\\<^sub>L' = EF (L (\\<alpha>', F, f), P')\n\ngoal (1 subgoal):\n 1. P\\<^sub>L' = - p \\<bullet> EF (L (\\<alpha>', F, f), P')", "by (metis permute_minus_cancel(2))"], ["proof (state)\nthis:\n  P\\<^sub>L' = - p \\<bullet> EF (L (\\<alpha>', F, f), P')\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "then"], ["proof (chain)\npicking this:\n  P\\<^sub>L' = - p \\<bullet> EF (L (\\<alpha>', F, f), P')", "have \"P\\<^sub>L' = EF (L (\\<alpha>,F,f), -p \\<bullet> P')\""], ["proof (prove)\nusing this:\n  P\\<^sub>L' = - p \\<bullet> EF (L (\\<alpha>', F, f), P')\n\ngoal (1 subgoal):\n 1. P\\<^sub>L' = EF (L (\\<alpha>, F, f), - p \\<bullet> P')", "using p_\\<alpha> p_F p_f"], ["proof (prove)\nusing this:\n  P\\<^sub>L' = - p \\<bullet> EF (L (\\<alpha>', F, f), P')\n  p \\<bullet> \\<alpha> = \\<alpha>'\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n\ngoal (1 subgoal):\n 1. P\\<^sub>L' = EF (L (\\<alpha>, F, f), - p \\<bullet> P')", "by simp (metis (full_types) permute_minus_cancel(2))"], ["proof (state)\nthis:\n  P\\<^sub>L' = EF (L (\\<alpha>, F, f), - p \\<bullet> P')\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "moreover"], ["proof (state)\nthis:\n  P\\<^sub>L' = EF (L (\\<alpha>, F, f), - p \\<bullet> P')\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "from trans"], ["proof (chain)\npicking this:\n  P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>", "have \"P \\<rightarrow> \\<langle>\\<alpha>, -p \\<bullet> P'\\<rangle>\""], ["proof (prove)\nusing this:\n  P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P \\<rightarrow> \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>", "using p_P and p_\\<alpha>"], ["proof (prove)\nusing this:\n  P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  p \\<bullet> P = P\n  p \\<bullet> \\<alpha> = \\<alpha>'\n\ngoal (1 subgoal):\n 1. P \\<rightarrow> \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>", "by (metis permute_minus_cancel(2) transition_eqvt')"], ["proof (state)\nthis:\n  P \\<rightarrow> \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>\n\ngoal (2 subgoals):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle> \\<Longrightarrow>\n    \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n 2. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "ultimately"], ["proof (chain)\npicking this:\n  P\\<^sub>L' = EF (L (\\<alpha>, F, f), - p \\<bullet> P')\n  P \\<rightarrow> \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>", "show \"\\<exists>P'. P\\<^sub>L' = EF (L (\\<alpha>,F,f), P') \\<and> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (prove)\nusing this:\n  P\\<^sub>L' = EF (L (\\<alpha>, F, f), - p \\<bullet> P')\n  P \\<rightarrow> \\<langle>\\<alpha>,- p \\<bullet> P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "by blast"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "assume \"\\<exists>P'. P\\<^sub>L' = EF (L (\\<alpha>,F,f), P') \\<and> P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (state)\nthis:\n  \\<exists>P'.\n     P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "moreover"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "from assms"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (F, f, P)", "have \"bn \\<alpha> \\<sharp>* (F,f)\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (F, f, P)\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* (F, f)", "by (simp add: fresh_star_Pair)"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n       P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<Longrightarrow>\n    AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>P'.\n     P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)", "show \"AC (f, F, P) \\<rightarrow>\\<^sub>L \\<langle>Act \\<alpha>, P\\<^sub>L'\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<exists>P'.\n     P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "using L_transition.simps(1)"], ["proof (prove)\nusing this:\n  \\<exists>P'.\n     P\\<^sub>L' = EF (L (\\<alpha>, F, f), P') \\<and>\n     P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)\n  AC (?f, ?F, ?P) \\<rightarrow>\\<^sub>L ?\\<alpha>P' =\n  (\\<exists>\\<alpha> P'.\n      ?P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<and>\n      ?\\<alpha>P' =\n      \\<langle>L_action.Act\n                \\<alpha>,EF (L (\\<alpha>, ?F, ?f), P')\\<rangle> \\<and>\n      bn \\<alpha> \\<sharp>* (?F, ?f))\n\ngoal (1 subgoal):\n 1. AC (f, F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>", "by blast"], ["proof (state)\nthis:\n  AC (f, F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,P\\<^sub>L'\\<rangle>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Translation of \\texorpdfstring{$F/L$}{F/L}-formulas into formulas without effects\\<close>"], ["", "text \\<open>Since we defined formulas via a manual quotient construction, we also need to define the\n$L$-transform via lifting from the underlying type of infinitely branching trees. As before, we\ncannot use {\\bf nominal\\_function} because that generates proof obligations where, for formulas\nof the form~@{term \"Conj xset\"}, the assumption that~@{term xset} has finite support is missing.\\<close>"], ["", "text \\<open>The following auxiliary function returns trees (modulo $\\alpha$-equivalence) rather than\nformulas. This allows us to prove equivariance for \\emph{all} argument trees, without an assumption\nthat they are (hereditarily) finitely supported. Further below--after this auxiliary function has\nbeen lifted to $F/L$-formulas as arguments--we derive a version that returns formulas.\\<close>"], ["", "primrec L_transform_Tree :: \"('idx,'pred::fs,'act::bn,'eff::fs) Tree \\<Rightarrow> ('idx, 'pred, ('act,'eff) L_action) Formula.Tree\\<^sub>\\<alpha>\" where\n  \"L_transform_Tree (tConj tset) = Formula.Conj\\<^sub>\\<alpha> (map_bset L_transform_Tree tset)\"\n| \"L_transform_Tree (tNot t) = Formula.Not\\<^sub>\\<alpha> (L_transform_Tree t)\"\n| \"L_transform_Tree (tPred f \\<phi>) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Pred\\<^sub>\\<alpha> \\<phi>)\"\n| \"L_transform_Tree (tAct f \\<alpha> t) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Act\\<^sub>\\<alpha> (Act \\<alpha>) (L_transform_Tree t))\""], ["", "lemma L_transform_Tree_eqvt [eqvt]: \"p \\<bullet> L_transform_Tree t = L_transform_Tree (p \\<bullet> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> L_transform_Tree t = L_transform_Tree (p \\<bullet> t)", "proof (induct t)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           p \\<bullet> L_transform_Tree xa =\n           L_transform_Tree (p \\<bullet> xa)) \\<Longrightarrow>\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tConj x) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tConj x)\n 2. \\<And>t.\n       p \\<bullet> L_transform_Tree t =\n       L_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tNot t) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tNot t)\n 3. \\<And>x1a x2a.\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tPred x1a x2a) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tPred x1a x2a)\n 4. \\<And>x1a x2a t.\n       p \\<bullet> L_transform_Tree t =\n       L_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tAct x1a x2a t) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tAct x1a x2a t)", "case (tConj tset)"], ["proof (state)\nthis:\n  ?xa \\<in> set_bset tset \\<Longrightarrow>\n  p \\<bullet> L_transform_Tree ?xa = L_transform_Tree (p \\<bullet> ?xa)\n\ngoal (4 subgoals):\n 1. \\<And>x.\n       (\\<And>xa.\n           xa \\<in> set_bset x \\<Longrightarrow>\n           p \\<bullet> L_transform_Tree xa =\n           L_transform_Tree (p \\<bullet> xa)) \\<Longrightarrow>\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tConj x) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tConj x)\n 2. \\<And>t.\n       p \\<bullet> L_transform_Tree t =\n       L_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tNot t) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tNot t)\n 3. \\<And>x1a x2a.\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tPred x1a x2a) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tPred x1a x2a)\n 4. \\<And>x1a x2a t.\n       p \\<bullet> L_transform_Tree t =\n       L_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tAct x1a x2a t) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tAct x1a x2a t)", "then"], ["proof (chain)\npicking this:\n  ?xa \\<in> set_bset tset \\<Longrightarrow>\n  p \\<bullet> L_transform_Tree ?xa = L_transform_Tree (p \\<bullet> ?xa)", "show ?case"], ["proof (prove)\nusing this:\n  ?xa \\<in> set_bset tset \\<Longrightarrow>\n  p \\<bullet> L_transform_Tree ?xa = L_transform_Tree (p \\<bullet> ?xa)\n\ngoal (1 subgoal):\n 1. p \\<bullet> L_transform_Tree (FL_Formula.Tree.tConj tset) =\n    L_transform_Tree (p \\<bullet> FL_Formula.Tree.tConj tset)", "by simp (metis (no_types, hide_lams) bset.map_cong0 map_bset_eqvt permute_fun_def permute_minus_cancel(1))"], ["proof (state)\nthis:\n  p \\<bullet> L_transform_Tree (FL_Formula.Tree.tConj tset) =\n  L_transform_Tree (p \\<bullet> FL_Formula.Tree.tConj tset)\n\ngoal (3 subgoals):\n 1. \\<And>t.\n       p \\<bullet> L_transform_Tree t =\n       L_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tNot t) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tNot t)\n 2. \\<And>x1a x2a.\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tPred x1a x2a) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tPred x1a x2a)\n 3. \\<And>x1a x2a t.\n       p \\<bullet> L_transform_Tree t =\n       L_transform_Tree (p \\<bullet> t) \\<Longrightarrow>\n       p \\<bullet> L_transform_Tree (FL_Formula.Tree.tAct x1a x2a t) =\n       L_transform_Tree (p \\<bullet> FL_Formula.Tree.tAct x1a x2a t)", "qed simp_all"], ["", "text \\<open>@{const L_transform_Tree} respects $\\alpha$-equivalence.\\<close>"], ["", "lemma alpha_Tree_L_transform_Tree:\n  assumes \"alpha_Tree t1 t2\"\n  shows \"L_transform_Tree t1 = L_transform_Tree t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_Tree t1 = L_transform_Tree t2", "using assms"], ["proof (prove)\nusing this:\n  t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. L_transform_Tree t1 = L_transform_Tree t2", "proof (induction t1 t2 rule: alpha_Tree_induct')"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> L_transform_Tree a =\n                                     L_transform_Tree b;\n        FL_Formula.Tree.tConj tset1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj tset2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tConj tset1) =\n                         L_transform_Tree (FL_Formula.Tree.tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 3. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 4. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 5. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 6. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 7. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 9. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 10. \\<And>v va vb vc vd.\n        FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tPred v va) =\n        L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\nA total of 22 subgoals...", "case (alpha_tConj tset1 tset2)"], ["proof (state)\nthis:\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> L_transform_Tree ?a = L_transform_Tree ?b\n  FL_Formula.Tree.tConj tset1 =\\<^sub>\\<alpha> FL_Formula.Tree.tConj tset2\n\ngoal (22 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> L_transform_Tree a =\n                                     L_transform_Tree b;\n        FL_Formula.Tree.tConj tset1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj tset2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tConj tset1) =\n                         L_transform_Tree (FL_Formula.Tree.tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 3. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 4. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 5. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 6. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 7. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 9. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 10. \\<And>v va vb vc vd.\n        FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tPred v va) =\n        L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\nA total of 22 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> L_transform_Tree ?a = L_transform_Tree ?b\n  FL_Formula.Tree.tConj tset1 =\\<^sub>\\<alpha> FL_Formula.Tree.tConj tset2", "have \"rel_bset (=) (map_bset L_transform_Tree tset1) (map_bset L_transform_Tree tset2)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?a \\<in> set_bset tset1; ?b \\<in> set_bset tset2;\n   ?a =\\<^sub>\\<alpha> ?b\\<rbrakk>\n  \\<Longrightarrow> L_transform_Tree ?a = L_transform_Tree ?b\n  FL_Formula.Tree.tConj tset1 =\\<^sub>\\<alpha> FL_Formula.Tree.tConj tset2\n\ngoal (1 subgoal):\n 1. rel_bset (=) (map_bset L_transform_Tree tset1)\n     (map_bset L_transform_Tree tset2)", "by (simp add: bset.rel_map(1) bset.rel_map(2) bset.rel_mono_strong)"], ["proof (state)\nthis:\n  rel_bset (=) (map_bset L_transform_Tree tset1)\n   (map_bset L_transform_Tree tset2)\n\ngoal (22 subgoals):\n 1. \\<And>tset1 tset2.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>a \\<in> set_bset tset1; b \\<in> set_bset tset2;\n                    a =\\<^sub>\\<alpha> b\\<rbrakk>\n                   \\<Longrightarrow> L_transform_Tree a =\n                                     L_transform_Tree b;\n        FL_Formula.Tree.tConj tset1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj tset2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tConj tset1) =\n                         L_transform_Tree (FL_Formula.Tree.tConj tset2)\n 2. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 3. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 4. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 5. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 6. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 7. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 9. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 10. \\<And>v va vb vc vd.\n        FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tPred v va) =\n        L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\nA total of 22 subgoals...", "then"], ["proof (chain)\npicking this:\n  rel_bset (=) (map_bset L_transform_Tree tset1)\n   (map_bset L_transform_Tree tset2)", "show ?case"], ["proof (prove)\nusing this:\n  rel_bset (=) (map_bset L_transform_Tree tset1)\n   (map_bset L_transform_Tree tset2)\n\ngoal (1 subgoal):\n 1. L_transform_Tree (FL_Formula.Tree.tConj tset1) =\n    L_transform_Tree (FL_Formula.Tree.tConj tset2)", "by (simp add: bset.rel_eq)"], ["proof (state)\nthis:\n  L_transform_Tree (FL_Formula.Tree.tConj tset1) =\n  L_transform_Tree (FL_Formula.Tree.tConj tset2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "case (alpha_tAct f1 \\<alpha>1 t1 f2 \\<alpha>2 t2)"], ["proof (state)\nthis:\n  ?x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  L_transform_Tree (?x \\<bullet> t1) = L_transform_Tree t2\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  L_transform_Tree ((?a \\<rightleftharpoons> ?b) \\<bullet> t1) =\n  L_transform_Tree t1\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t2 =\\<^sub>\\<alpha>\n  t2 \\<Longrightarrow>\n  L_transform_Tree ((?a \\<rightleftharpoons> ?b) \\<bullet> t2) =\n  L_transform_Tree t2\n  FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n  FL_Formula.Tree.tAct f2 \\<alpha>2 t2\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "from \\<open>alpha_Tree (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\\<close>"], ["proof (chain)\npicking this:\n  FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n  FL_Formula.Tree.tAct f2 \\<alpha>2 t2", "obtain p where *: \"(bn \\<alpha>1, t1) \\<approx>set alpha_Tree (supp_rel alpha_Tree) p (bn \\<alpha>2, t2)\"\n      and **: \"(bn \\<alpha>1, \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\" and \"f1 = f2\""], ["proof (prove)\nusing this:\n  FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n  FL_Formula.Tree.tAct f2 \\<alpha>2 t2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(bn \\<alpha>1,\n                  t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n                 (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2);\n         (bn \\<alpha>1,\n          \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2);\n         f1 = f2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2)\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n  f1 = f2\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "from *"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2)", "have fresh: \"(supp_rel alpha_Tree t1 - bn \\<alpha>1) \\<sharp>* p\" and alpha: \"alpha_Tree (p \\<bullet> t1) t2\" and eq: \"p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   t1) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n  (=\\<^sub>\\<alpha>) p (bn \\<alpha>2, t2)\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* p &&&\n    p \\<bullet> t1 =\\<^sub>\\<alpha> t2 &&&\n    p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2", "by (auto simp add: alpha_set)"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n  p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "from alpha_tAct.IH(2)"], ["proof (chain)\npicking this:\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  L_transform_Tree ((?a \\<rightleftharpoons> ?b) \\<bullet> t1) =\n  L_transform_Tree t1", "have \"supp_rel Formula.alpha_Tree (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) \\<subseteq> supp_rel alpha_Tree t1\""], ["proof (prove)\nusing this:\n  (?a \\<rightleftharpoons> ?b) \\<bullet> t1 =\\<^sub>\\<alpha>\n  t1 \\<Longrightarrow>\n  L_transform_Tree ((?a \\<rightleftharpoons> ?b) \\<bullet> t1) =\n  L_transform_Tree t1\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>)\n     (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1))\n    \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) t1", "by (metis (no_types, lifting) infinite_mono Formula.alpha_Tree_permute_rep_commute L_transform_Tree_eqvt mem_Collect_eq subsetI supp_rel_def)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1))\n  \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) t1\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "with fresh"], ["proof (chain)\npicking this:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* p\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1))\n  \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) t1", "have fresh': \"(supp_rel Formula.alpha_Tree (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) - bn \\<alpha>1) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (supp_rel (=\\<^sub>\\<alpha>) t1 - bn \\<alpha>1) \\<sharp>* p\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1))\n  \\<subseteq> supp_rel (=\\<^sub>\\<alpha>) t1\n\ngoal (1 subgoal):\n 1. (supp_rel (=\\<^sub>\\<alpha>)\n      (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n     bn \\<alpha>1) \\<sharp>* p", "by (meson DiffD1 DiffD2 DiffI fresh_star_def subsetCE)"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "moreover"], ["proof (state)\nthis:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "from alpha"], ["proof (chain)\npicking this:\n  p \\<bullet> t1 =\\<^sub>\\<alpha> t2", "have alpha': \"Formula.alpha_Tree (p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2))\""], ["proof (prove)\nusing this:\n  p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n\ngoal (1 subgoal):\n 1. p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n                 (L_transform_Tree t1) =\\<^sub>\\<alpha>\n    Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)", "using alpha_tAct.IH(1)"], ["proof (prove)\nusing this:\n  p \\<bullet> t1 =\\<^sub>\\<alpha> t2\n  ?x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n  L_transform_Tree (?x \\<bullet> t1) = L_transform_Tree t2\n\ngoal (1 subgoal):\n 1. p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n                 (L_transform_Tree t1) =\\<^sub>\\<alpha>\n    Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)", "by (metis Formula.alpha_Tree_permute_rep_commute L_transform_Tree_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n               (L_transform_Tree t1) =\\<^sub>\\<alpha>\n  Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "moreover"], ["proof (state)\nthis:\n  p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n               (L_transform_Tree t1) =\\<^sub>\\<alpha>\n  Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "from fresh' alpha' eq"], ["proof (chain)\npicking this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n               (L_transform_Tree t1) =\\<^sub>\\<alpha>\n  Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)\n  p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2", "have \"supp_rel Formula.alpha_Tree (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) - bn \\<alpha>1 = supp_rel Formula.alpha_Tree (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)) - bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n               (L_transform_Tree t1) =\\<^sub>\\<alpha>\n  Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)\n  p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. supp_rel (=\\<^sub>\\<alpha>)\n     (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n    bn \\<alpha>1 =\n    supp_rel (=\\<^sub>\\<alpha>)\n     (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)) -\n    bn \\<alpha>2", "by (metis (mono_tags) Diff_eqvt Formula.alpha_Tree_eqvt' Formula.alpha_Tree_eqvt_aux Formula.alpha_Tree_supp_rel atom_set_perm_eq)"], ["proof (state)\nthis:\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n  bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)) -\n  bn \\<alpha>2\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n               (L_transform_Tree t1) =\\<^sub>\\<alpha>\n  Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n  bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)) -\n  bn \\<alpha>2", "have \"(bn \\<alpha>1, Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) \\<approx>set Formula.alpha_Tree (supp_rel Formula.alpha_Tree) p (bn \\<alpha>2, Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2))\""], ["proof (prove)\nusing this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n               (L_transform_Tree t1) =\\<^sub>\\<alpha>\n  Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n  bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)) -\n  bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     Formula.rep_Tree\\<^sub>\\<alpha>\n      (L_transform_Tree\n        t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                              Formula.rep_Tree\\<^sub>\\<alpha>\n                               (L_transform_Tree t2))", "using eq"], ["proof (prove)\nusing this:\n  (supp_rel (=\\<^sub>\\<alpha>)\n    (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n   bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> Formula.rep_Tree\\<^sub>\\<alpha>\n               (L_transform_Tree t1) =\\<^sub>\\<alpha>\n  Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t1)) -\n  bn \\<alpha>1 =\n  supp_rel (=\\<^sub>\\<alpha>)\n   (Formula.rep_Tree\\<^sub>\\<alpha> (L_transform_Tree t2)) -\n  bn \\<alpha>2\n  p \\<bullet> bn \\<alpha>1 = bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     Formula.rep_Tree\\<^sub>\\<alpha>\n      (L_transform_Tree\n        t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n        (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                              Formula.rep_Tree\\<^sub>\\<alpha>\n                               (L_transform_Tree t2))", "by (simp add: alpha_set)"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   Formula.rep_Tree\\<^sub>\\<alpha>\n    (L_transform_Tree\n      t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            Formula.rep_Tree\\<^sub>\\<alpha>\n                             (L_transform_Tree t2))\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "moreover"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   Formula.rep_Tree\\<^sub>\\<alpha>\n    (L_transform_Tree\n      t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            Formula.rep_Tree\\<^sub>\\<alpha>\n                             (L_transform_Tree t2))\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "from **"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)", "have \"(bn \\<alpha>1, Act \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, Act \\<alpha>2)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2, \\<alpha>2)\n\ngoal (1 subgoal):\n 1. (bn \\<alpha>1,\n     L_action.Act\n      \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n    L_action.Act \\<alpha>2)", "by (metis (mono_tags, lifting) L_Transform.supp_Act alpha_set permute_L_action.simps(1))"], ["proof (state)\nthis:\n  (bn \\<alpha>1,\n   L_action.Act\n    \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n  L_action.Act \\<alpha>2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  (bn \\<alpha>1,\n   Formula.rep_Tree\\<^sub>\\<alpha>\n    (L_transform_Tree\n      t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            Formula.rep_Tree\\<^sub>\\<alpha>\n                             (L_transform_Tree t2))\n  (bn \\<alpha>1,\n   L_action.Act\n    \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n  L_action.Act \\<alpha>2)", "have \"Formula.Act\\<^sub>\\<alpha> (Act \\<alpha>1) (L_transform_Tree t1) = Formula.Act\\<^sub>\\<alpha> (Act \\<alpha>2) (L_transform_Tree t2)\""], ["proof (prove)\nusing this:\n  (bn \\<alpha>1,\n   Formula.rep_Tree\\<^sub>\\<alpha>\n    (L_transform_Tree\n      t1)) \\<approx>set (=\\<^sub>\\<alpha>) supp_rel\n      (=\\<^sub>\\<alpha>) p (bn \\<alpha>2,\n                            Formula.rep_Tree\\<^sub>\\<alpha>\n                             (L_transform_Tree t2))\n  (bn \\<alpha>1,\n   L_action.Act\n    \\<alpha>1) \\<approx>set (=) supp p (bn \\<alpha>2,\n  L_action.Act \\<alpha>2)\n\ngoal (1 subgoal):\n 1. Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>1)\n     (L_transform_Tree t1) =\n    Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>2)\n     (L_transform_Tree t2)", "by (auto simp add: Formula.Act\\<^sub>\\<alpha>_eq_iff)"], ["proof (state)\nthis:\n  Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>1)\n   (L_transform_Tree t1) =\n  Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>2) (L_transform_Tree t2)\n\ngoal (21 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>f1 \\<alpha>1 t1 f2 \\<alpha>2 t2.\n       \\<lbrakk>\\<And>x.\n                   x \\<bullet> t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                   L_transform_Tree (x \\<bullet> t1) = L_transform_Tree t2;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t1 =\\<^sub>\\<alpha>\n           t1 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t1) =\n           L_transform_Tree t1;\n        \\<And>x a b.\n           (a \\<rightleftharpoons> b) \\<bullet> t2 =\\<^sub>\\<alpha>\n           t2 \\<Longrightarrow>\n           L_transform_Tree ((a \\<rightleftharpoons> b) \\<bullet> t2) =\n           L_transform_Tree t2;\n        FL_Formula.Tree.tAct f1 \\<alpha>1 t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tAct f2 \\<alpha>2 t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree\n                          (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n                         L_transform_Tree\n                          (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n 4. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 5. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 6. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 8. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 9. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tConj vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tConj vc)\nA total of 21 subgoals...", "with \\<open>f1 = f2\\<close>"], ["proof (chain)\npicking this:\n  f1 = f2\n  Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>1)\n   (L_transform_Tree t1) =\n  Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>2) (L_transform_Tree t2)", "show ?case"], ["proof (prove)\nusing this:\n  f1 = f2\n  Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>1)\n   (L_transform_Tree t1) =\n  Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>2) (L_transform_Tree t2)\n\ngoal (1 subgoal):\n 1. L_transform_Tree (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n    L_transform_Tree (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)", "by simp"], ["proof (state)\nthis:\n  L_transform_Tree (FL_Formula.Tree.tAct f1 \\<alpha>1 t1) =\n  L_transform_Tree (FL_Formula.Tree.tAct f2 \\<alpha>2 t2)\n\ngoal (20 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>t1 =\\<^sub>\\<alpha> t2 \\<Longrightarrow>\n                L_transform_Tree t1 = L_transform_Tree t2;\n        FL_Formula.Tree.tNot t1 =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot t2\\<rbrakk>\n       \\<Longrightarrow> L_transform_Tree (FL_Formula.Tree.tNot t1) =\n                         L_transform_Tree (FL_Formula.Tree.tNot t2)\n 2. \\<And>f1 \\<phi>1 f2 \\<phi>2.\n       FL_Formula.Tree.tPred f1 \\<phi>1 =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred f2 \\<phi>2 \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred f1 \\<phi>1) =\n       L_transform_Tree (FL_Formula.Tree.tPred f2 \\<phi>2)\n 3. \\<And>v va.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj va \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tConj va)\n 4. \\<And>v va vb.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tPred va vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tPred va vb)\n 5. \\<And>v va vb vc.\n       FL_Formula.Tree.tNot v =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct va vb vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tNot v) =\n       L_transform_Tree (FL_Formula.Tree.tAct va vb vc)\n 6. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tConj vb)\n 7. \\<And>v va vb.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tNot vb \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tNot vb)\n 8. \\<And>v va vb vc vd.\n       FL_Formula.Tree.tPred v va =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tAct vb vc vd \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tPred v va) =\n       L_transform_Tree (FL_Formula.Tree.tAct vb vc vd)\n 9. \\<And>v va vb vc.\n       FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n       FL_Formula.Tree.tConj vc \\<Longrightarrow>\n       L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n       L_transform_Tree (FL_Formula.Tree.tConj vc)\n 10. \\<And>v va vb vc.\n        FL_Formula.Tree.tAct v va vb =\\<^sub>\\<alpha>\n        FL_Formula.Tree.tNot vc \\<Longrightarrow>\n        L_transform_Tree (FL_Formula.Tree.tAct v va vb) =\n        L_transform_Tree (FL_Formula.Tree.tNot vc)\nA total of 20 subgoals...", "qed simp_all"], ["", "text \\<open>$L$-transform for trees modulo $\\alpha$-equivalence.\\<close>"], ["", "lift_definition L_transform_Tree\\<^sub>\\<alpha> :: \"('idx,'pred::fs,'act::bn,'eff::fs) Tree\\<^sub>\\<alpha> \\<Rightarrow> ('idx, 'pred, ('act,'eff) L_action) Formula.Tree\\<^sub>\\<alpha>\" is\n    L_transform_Tree"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Tree1 Tree2.\n       Tree1 =\\<^sub>\\<alpha> Tree2 \\<Longrightarrow>\n       L_transform_Tree Tree1 = L_transform_Tree Tree2", "by (fact alpha_Tree_L_transform_Tree)"], ["", "lemma L_transform_Tree\\<^sub>\\<alpha>_eqvt [eqvt]: \"p \\<bullet> L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> = L_transform_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha> =\n    L_transform_Tree\\<^sub>\\<alpha> (p \\<bullet> t\\<^sub>\\<alpha>)", "by transfer (simp)"], ["", "lemma L_transform_Tree\\<^sub>\\<alpha>_Conj\\<^sub>\\<alpha> [simp]: \"L_transform_Tree\\<^sub>\\<alpha> (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) = Formula.Conj\\<^sub>\\<alpha> (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_Tree\\<^sub>\\<alpha>\n     (FL_Formula.Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) =\n    Formula.Conj\\<^sub>\\<alpha>\n     (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)", "by (simp add: Conj\\<^sub>\\<alpha>_def' L_transform_Tree\\<^sub>\\<alpha>.abs_eq) (metis (no_types, lifting) L_transform_Tree\\<^sub>\\<alpha>.rep_eq bset.map_comp bset.map_cong0 comp_apply)"], ["", "lemma L_transform_Tree\\<^sub>\\<alpha>_Not\\<^sub>\\<alpha> [simp]: \"L_transform_Tree\\<^sub>\\<alpha> (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) = Formula.Not\\<^sub>\\<alpha> (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_Tree\\<^sub>\\<alpha>\n     (FL_Formula.Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>) =\n    Formula.Not\\<^sub>\\<alpha>\n     (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "by transfer simp"], ["", "lemma L_transform_Tree\\<^sub>\\<alpha>_Pred\\<^sub>\\<alpha> [simp]: \"L_transform_Tree\\<^sub>\\<alpha> (Pred\\<^sub>\\<alpha> f \\<phi>) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Pred\\<^sub>\\<alpha> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_Tree\\<^sub>\\<alpha>\n     (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>) =\n    Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Pred\\<^sub>\\<alpha> \\<phi>)", "by transfer simp"], ["", "lemma L_transform_Tree\\<^sub>\\<alpha>_Act\\<^sub>\\<alpha> [simp]: \"L_transform_Tree\\<^sub>\\<alpha> (Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Act\\<^sub>\\<alpha> (Act \\<alpha>) (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_Tree\\<^sub>\\<alpha>\n     (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>) =\n    Formula.Act\\<^sub>\\<alpha> (Eff f)\n     (Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>)\n       (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))", "by transfer simp"], ["", "lemma finite_supp_map_bset_L_transform_Tree\\<^sub>\\<alpha> [simp]:\n  assumes \"finite (supp tset\\<^sub>\\<alpha>)\"\n  shows \"finite (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "have \"eqvt map_bset\" and \"eqvt L_transform_Tree\\<^sub>\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt map_bset &&& eqvt L_transform_Tree\\<^sub>\\<alpha>", "by (simp add: eqvtI)+"], ["proof (state)\nthis:\n  eqvt map_bset\n  eqvt L_transform_Tree\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  eqvt map_bset\n  eqvt L_transform_Tree\\<^sub>\\<alpha>", "have \"supp (map_bset L_transform_Tree\\<^sub>\\<alpha>) = {}\""], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt L_transform_Tree\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. supp (map_bset L_transform_Tree\\<^sub>\\<alpha>) = {}", "using supp_fun_eqvt supp_fun_app_eqvt"], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt L_transform_Tree\\<^sub>\\<alpha>\n  eqvt ?f \\<Longrightarrow> supp ?f = {}\n  eqvt ?f \\<Longrightarrow> supp (?f ?x) \\<subseteq> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset L_transform_Tree\\<^sub>\\<alpha>) = {}", "by blast"], ["proof (state)\nthis:\n  supp (map_bset L_transform_Tree\\<^sub>\\<alpha>) = {}\n\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  supp (map_bset L_transform_Tree\\<^sub>\\<alpha>) = {}", "have \"supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>) \\<subseteq> supp tset\\<^sub>\\<alpha>\""], ["proof (prove)\nusing this:\n  supp (map_bset L_transform_Tree\\<^sub>\\<alpha>) = {}\n\ngoal (1 subgoal):\n 1. supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n    \\<subseteq> supp tset\\<^sub>\\<alpha>", "using supp_fun_app"], ["proof (prove)\nusing this:\n  supp (map_bset L_transform_Tree\\<^sub>\\<alpha>) = {}\n  supp (?f ?x) \\<subseteq> supp ?f \\<union> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n    \\<subseteq> supp tset\\<^sub>\\<alpha>", "by blast"], ["proof (state)\nthis:\n  supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  \\<subseteq> supp tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "with assms"], ["proof (chain)\npicking this:\n  finite (supp tset\\<^sub>\\<alpha>)\n  supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  \\<subseteq> supp tset\\<^sub>\\<alpha>", "show \"finite (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\""], ["proof (prove)\nusing this:\n  finite (supp tset\\<^sub>\\<alpha>)\n  supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)\n  \\<subseteq> supp tset\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. finite\n     (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "by (metis finite_subset)"], ["proof (state)\nthis:\n  finite\n   (supp (map_bset L_transform_Tree\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma L_transform_Tree\\<^sub>\\<alpha>_preserves_hereditarily_fs:\n  assumes \"hereditarily_fs t\\<^sub>\\<alpha>\"\n  shows \"Formula.hereditarily_fs (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.hereditarily_fs\n     (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>\n\ngoal (1 subgoal):\n 1. Formula.hereditarily_fs\n     (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "proof (induct rule: hereditarily_fs.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>tset\\<^sub>\\<alpha>.\n       \\<lbrakk>finite (supp tset\\<^sub>\\<alpha>);\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           Formula.hereditarily_fs\n            (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Conj\\<^sub>\\<alpha>\n                              tset\\<^sub>\\<alpha>))\n 2. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Not\\<^sub>\\<alpha>\n                              t\\<^sub>\\<alpha>))\n 3. \\<And>f \\<phi>.\n       Formula.hereditarily_fs\n        (L_transform_Tree\\<^sub>\\<alpha>\n          (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n 4. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "case (Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  finite (supp tset\\<^sub>\\<alpha>)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  FL_Formula.hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  Formula.hereditarily_fs\n   (L_transform_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>)\n\ngoal (4 subgoals):\n 1. \\<And>tset\\<^sub>\\<alpha>.\n       \\<lbrakk>finite (supp tset\\<^sub>\\<alpha>);\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        \\<And>t\\<^sub>\\<alpha>.\n           t\\<^sub>\\<alpha>\n           \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n           Formula.hereditarily_fs\n            (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Conj\\<^sub>\\<alpha>\n                              tset\\<^sub>\\<alpha>))\n 2. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Not\\<^sub>\\<alpha>\n                              t\\<^sub>\\<alpha>))\n 3. \\<And>f \\<phi>.\n       Formula.hereditarily_fs\n        (L_transform_Tree\\<^sub>\\<alpha>\n          (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n 4. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  finite (supp tset\\<^sub>\\<alpha>)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  FL_Formula.hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  Formula.hereditarily_fs\n   (L_transform_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>)", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp tset\\<^sub>\\<alpha>)\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  FL_Formula.hereditarily_fs ?t\\<^sub>\\<alpha>\n  ?t\\<^sub>\\<alpha> \\<in> set_bset tset\\<^sub>\\<alpha> \\<Longrightarrow>\n  Formula.hereditarily_fs\n   (L_transform_Tree\\<^sub>\\<alpha> ?t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. Formula.hereditarily_fs\n     (L_transform_Tree\\<^sub>\\<alpha>\n       (FL_Formula.Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))", "by (auto intro!: Formula.hereditarily_fs.Conj\\<^sub>\\<alpha>) (metis imageE map_bset.rep_eq)"], ["proof (state)\nthis:\n  Formula.hereditarily_fs\n   (L_transform_Tree\\<^sub>\\<alpha>\n     (FL_Formula.Conj\\<^sub>\\<alpha> tset\\<^sub>\\<alpha>))\n\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Not\\<^sub>\\<alpha>\n                              t\\<^sub>\\<alpha>))\n 2. \\<And>f \\<phi>.\n       Formula.hereditarily_fs\n        (L_transform_Tree\\<^sub>\\<alpha>\n          (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Not\\<^sub>\\<alpha>\n                              t\\<^sub>\\<alpha>))\n 2. \\<And>f \\<phi>.\n       Formula.hereditarily_fs\n        (L_transform_Tree\\<^sub>\\<alpha>\n          (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "case (Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>\n  Formula.hereditarily_fs (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (3 subgoals):\n 1. \\<And>t\\<^sub>\\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Not\\<^sub>\\<alpha>\n                              t\\<^sub>\\<alpha>))\n 2. \\<And>f \\<phi>.\n       Formula.hereditarily_fs\n        (L_transform_Tree\\<^sub>\\<alpha>\n          (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n 3. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>\n  Formula.hereditarily_fs (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "show ?case"], ["proof (prove)\nusing this:\n  FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>\n  Formula.hereditarily_fs (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. Formula.hereditarily_fs\n     (L_transform_Tree\\<^sub>\\<alpha>\n       (FL_Formula.Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))", "by (simp add: Formula.hereditarily_fs.Not\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  Formula.hereditarily_fs\n   (L_transform_Tree\\<^sub>\\<alpha>\n     (FL_Formula.Not\\<^sub>\\<alpha> t\\<^sub>\\<alpha>))\n\ngoal (2 subgoals):\n 1. \\<And>f \\<phi>.\n       Formula.hereditarily_fs\n        (L_transform_Tree\\<^sub>\\<alpha>\n          (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f \\<phi>.\n       Formula.hereditarily_fs\n        (L_transform_Tree\\<^sub>\\<alpha>\n          (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "case (Pred\\<^sub>\\<alpha> f \\<phi>)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>f \\<phi>.\n       Formula.hereditarily_fs\n        (L_transform_Tree\\<^sub>\\<alpha>\n          (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n 2. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.hereditarily_fs\n     (L_transform_Tree\\<^sub>\\<alpha>\n       (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))", "by (simp add: Formula.hereditarily_fs.Act\\<^sub>\\<alpha> Formula.hereditarily_fs.Pred\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  Formula.hereditarily_fs\n   (L_transform_Tree\\<^sub>\\<alpha>\n     (FL_Formula.Pred\\<^sub>\\<alpha> f \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "case (Act\\<^sub>\\<alpha> t\\<^sub>\\<alpha> f \\<alpha>)"], ["proof (state)\nthis:\n  FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>\n  Formula.hereditarily_fs (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<And>t\\<^sub>\\<alpha> f \\<alpha>.\n       \\<lbrakk>FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>;\n        Formula.hereditarily_fs\n         (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\\<rbrakk>\n       \\<Longrightarrow> Formula.hereditarily_fs\n                          (L_transform_Tree\\<^sub>\\<alpha>\n                            (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha>\n                              t\\<^sub>\\<alpha>))", "then"], ["proof (chain)\npicking this:\n  FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>\n  Formula.hereditarily_fs (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)", "show ?case"], ["proof (prove)\nusing this:\n  FL_Formula.hereditarily_fs t\\<^sub>\\<alpha>\n  Formula.hereditarily_fs (L_transform_Tree\\<^sub>\\<alpha> t\\<^sub>\\<alpha>)\n\ngoal (1 subgoal):\n 1. Formula.hereditarily_fs\n     (L_transform_Tree\\<^sub>\\<alpha>\n       (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>))", "by (simp add: Formula.hereditarily_fs.Act\\<^sub>\\<alpha>)"], ["proof (state)\nthis:\n  Formula.hereditarily_fs\n   (L_transform_Tree\\<^sub>\\<alpha>\n     (FL_Formula.Act\\<^sub>\\<alpha> f \\<alpha> t\\<^sub>\\<alpha>))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>$L$-transform for $F/L$-formulas.\\<close>"], ["", "lift_definition L_transform_formula :: \"('idx,'pred::fs,'act::bn,'eff::fs) formula \\<Rightarrow> ('idx, 'pred, ('act,'eff) L_action) Formula.Tree\\<^sub>\\<alpha>\" is\n    L_transform_Tree\\<^sub>\\<alpha>"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma L_transform_formula_eqvt [eqvt]: \"p \\<bullet> L_transform_formula x = L_transform_formula (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> L_transform_formula x = L_transform_formula (p \\<bullet> x)", "by transfer (simp)"], ["", "lemma L_transform_formula_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"L_transform_formula (Conj xset) = Formula.Conj\\<^sub>\\<alpha> (map_bset L_transform_formula xset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_formula (FL_Formula.Conj xset) =\n    Formula.Conj\\<^sub>\\<alpha> (map_bset L_transform_formula xset)", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. L_transform_formula (FL_Formula.Conj xset) =\n    Formula.Conj\\<^sub>\\<alpha> (map_bset L_transform_formula xset)", "by (simp add: Conj_def L_transform_formula_def bset.map_comp map_fun_def)"], ["", "lemma L_transform_formula_Not [simp]: \"L_transform_formula (Not x) = Formula.Not\\<^sub>\\<alpha> (L_transform_formula x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_formula (FL_Formula.Not x) =\n    Formula.Not\\<^sub>\\<alpha> (L_transform_formula x)", "by transfer simp"], ["", "lemma L_transform_formula_Pred [simp]: \"L_transform_formula (Pred f \\<phi>) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Pred\\<^sub>\\<alpha> \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_formula (FL_Formula.Pred f \\<phi>) =\n    Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Pred\\<^sub>\\<alpha> \\<phi>)", "by transfer simp"], ["", "lemma L_transform_formula_Act [simp]: \"L_transform_formula (FL_Formula.Act f \\<alpha> x) = Formula.Act\\<^sub>\\<alpha> (Eff f) (Formula.Act\\<^sub>\\<alpha> (Act \\<alpha>) (L_transform_formula x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform_formula (FL_Formula.Act f \\<alpha> x) =\n    Formula.Act\\<^sub>\\<alpha> (Eff f)\n     (Formula.Act\\<^sub>\\<alpha> (L_action.Act \\<alpha>)\n       (L_transform_formula x))", "by transfer simp"], ["", "lemma L_transform_formula_hereditarily_fs [simp]: \"Formula.hereditarily_fs (L_transform_formula x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.hereditarily_fs (L_transform_formula x)", "by transfer (fact L_transform_Tree\\<^sub>\\<alpha>_preserves_hereditarily_fs)"], ["", "text \\<open>Finally, we define the proper $L$-transform, which returns formulas instead of trees.\\<close>"], ["", "definition L_transform :: \"('idx,'pred::fs,'act::bn,'eff::fs) formula \\<Rightarrow> ('idx, 'pred, ('act,'eff) L_action) Formula.formula\" where\n  \"L_transform x = Formula.Abs_formula (L_transform_formula x)\""], ["", "lemma L_transform_eqvt [eqvt]: \"p \\<bullet> L_transform x = L_transform (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> L_transform x = L_transform (p \\<bullet> x)", "unfolding L_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Formula.formula.Abs_formula (L_transform_formula x) =\n    Formula.formula.Abs_formula (L_transform_formula (p \\<bullet> x))", "by simp"], ["", "lemma finite_supp_map_bset_L_transform [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"finite (supp (map_bset L_transform xset))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (map_bset L_transform xset))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (supp (map_bset L_transform xset))", "have \"eqvt map_bset\" and \"eqvt L_transform\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt map_bset &&& eqvt L_transform", "by (simp add: eqvtI)+"], ["proof (state)\nthis:\n  eqvt map_bset\n  eqvt L_transform\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset L_transform xset))", "then"], ["proof (chain)\npicking this:\n  eqvt map_bset\n  eqvt L_transform", "have \"supp (map_bset L_transform) = {}\""], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt L_transform\n\ngoal (1 subgoal):\n 1. supp (map_bset L_transform) = {}", "using supp_fun_eqvt supp_fun_app_eqvt"], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt L_transform\n  eqvt ?f \\<Longrightarrow> supp ?f = {}\n  eqvt ?f \\<Longrightarrow> supp (?f ?x) \\<subseteq> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset L_transform) = {}", "by blast"], ["proof (state)\nthis:\n  supp (map_bset L_transform) = {}\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset L_transform xset))", "then"], ["proof (chain)\npicking this:\n  supp (map_bset L_transform) = {}", "have \"supp (map_bset L_transform xset) \\<subseteq> supp xset\""], ["proof (prove)\nusing this:\n  supp (map_bset L_transform) = {}\n\ngoal (1 subgoal):\n 1. supp (map_bset L_transform xset) \\<subseteq> supp xset", "using supp_fun_app"], ["proof (prove)\nusing this:\n  supp (map_bset L_transform) = {}\n  supp (?f ?x) \\<subseteq> supp ?f \\<union> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset L_transform xset) \\<subseteq> supp xset", "by blast"], ["proof (state)\nthis:\n  supp (map_bset L_transform xset) \\<subseteq> supp xset\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset L_transform xset))", "with assms"], ["proof (chain)\npicking this:\n  finite (supp xset)\n  supp (map_bset L_transform xset) \\<subseteq> supp xset", "show \"finite (supp (map_bset L_transform xset))\""], ["proof (prove)\nusing this:\n  finite (supp xset)\n  supp (map_bset L_transform xset) \\<subseteq> supp xset\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset L_transform xset))", "by (metis finite_subset)"], ["proof (state)\nthis:\n  finite (supp (map_bset L_transform xset))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma L_transform_Conj [simp]:\n  assumes \"finite (supp xset)\"\n  shows \"L_transform (Conj xset) = Formula.Conj (map_bset L_transform xset)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform (FL_Formula.Conj xset) =\n    Formula.Conj (map_bset L_transform xset)", "using assms"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. L_transform (FL_Formula.Conj xset) =\n    Formula.Conj (map_bset L_transform xset)", "unfolding L_transform_def"], ["proof (prove)\nusing this:\n  finite (supp xset)\n\ngoal (1 subgoal):\n 1. Formula.formula.Abs_formula\n     (L_transform_formula (FL_Formula.Conj xset)) =\n    Formula.Conj\n     (map_bset\n       (\\<lambda>x. Formula.formula.Abs_formula (L_transform_formula x))\n       xset)", "by (simp add: Formula.Conj_def bset.map_comp o_def)"], ["", "lemma L_transform_Not [simp]: \"L_transform (Not x) = Formula.Not (L_transform x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform (FL_Formula.Not x) = Formula.Not (L_transform x)", "unfolding L_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.formula.Abs_formula (L_transform_formula (FL_Formula.Not x)) =\n    Formula.Not (Formula.formula.Abs_formula (L_transform_formula x))", "by (simp add: Formula.Not_def)"], ["", "lemma L_transform_Pred [simp]: \"L_transform (Pred f \\<phi>) = Formula.Act (Eff f) (Formula.Pred \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform (FL_Formula.Pred f \\<phi>) =\n    Formula.Act (Eff f) (Formula.Pred \\<phi>)", "unfolding L_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.formula.Abs_formula\n     (L_transform_formula (FL_Formula.Pred f \\<phi>)) =\n    Formula.Act (Eff f) (Formula.Pred \\<phi>)", "by (simp add: Formula.Act_def Formula.Pred_def Formula.hereditarily_fs.Pred\\<^sub>\\<alpha>)"], ["", "lemma L_transform_Act [simp]: \"L_transform (FL_Formula.Act f \\<alpha> x) = Formula.Act (Eff f) (Formula.Act (Act \\<alpha>) (L_transform x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform (FL_Formula.Act f \\<alpha> x) =\n    Formula.Act (Eff f)\n     (Formula.Act (L_action.Act \\<alpha>) (L_transform x))", "unfolding L_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.formula.Abs_formula\n     (L_transform_formula (FL_Formula.Act f \\<alpha> x)) =\n    Formula.Act (Eff f)\n     (Formula.Act (L_action.Act \\<alpha>)\n       (Formula.formula.Abs_formula (L_transform_formula x)))", "by (simp add: Formula.Act_def Formula.hereditarily_fs.Act\\<^sub>\\<alpha>)"], ["", "context effect_nominal_ts\nbegin"], ["", "interpretation L_transform: nominal_ts \"(\\<turnstile>\\<^sub>L)\" \"(\\<rightarrow>\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nominal_ts (\\<turnstile>\\<^sub>L) (\\<rightarrow>\\<^sub>L)", "by unfold_locales (fact L_satisfies_eqvt, fact L_transition_eqvt)"], ["", "text \\<open>The $L$-transform preserves satisfaction of formulas in the following sense:\\<close>"], ["", "theorem FL_valid_iff_valid_L_transform:\n    assumes \"(x::('idx,'pred,'act,'effect) formula) \\<in> \\<A>[F]\"\n    shows \"FL_valid P x \\<longleftrightarrow> L_transform.valid (EF (F, P)) (L_transform x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> x = L_transform.valid (EF (F, P)) (L_transform x)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> \\<A>[F]\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> x = L_transform.valid (EF (F, P)) (L_transform x)", "proof (induct x arbitrary: P)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xset F P.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x. x \\<in> set_bset xset \\<Longrightarrow> x \\<in> \\<A>[F];\n        \\<And>x P.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P \\<Turnstile> x =\n           L_transform.valid (EF (F, P)) (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Conj xset =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Conj xset))\n 2. \\<And>F x P.\n       \\<lbrakk>x \\<in> \\<A>[F];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (F, P)) (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Not x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Not x))\n 3. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 4. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "case (Conj xset F)"], ["proof (state)\nthis:\n  finite (supp xset)\n  ?x9 \\<in> set_bset xset \\<Longrightarrow> ?x9 \\<in> \\<A>[F]\n  ?x9 \\<in> set_bset xset \\<Longrightarrow>\n  ?P9 \\<Turnstile> ?x9 = L_transform.valid (EF (F, ?P9)) (L_transform ?x9)\n\ngoal (4 subgoals):\n 1. \\<And>xset F P.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x. x \\<in> set_bset xset \\<Longrightarrow> x \\<in> \\<A>[F];\n        \\<And>x P.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           P \\<Turnstile> x =\n           L_transform.valid (EF (F, P)) (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Conj xset =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Conj xset))\n 2. \\<And>F x P.\n       \\<lbrakk>x \\<in> \\<A>[F];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (F, P)) (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Not x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Not x))\n 3. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 4. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "then"], ["proof (chain)\npicking this:\n  finite (supp xset)\n  ?x9 \\<in> set_bset xset \\<Longrightarrow> ?x9 \\<in> \\<A>[F]\n  ?x9 \\<in> set_bset xset \\<Longrightarrow>\n  ?P9 \\<Turnstile> ?x9 = L_transform.valid (EF (F, ?P9)) (L_transform ?x9)", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp xset)\n  ?x9 \\<in> set_bset xset \\<Longrightarrow> ?x9 \\<in> \\<A>[F]\n  ?x9 \\<in> set_bset xset \\<Longrightarrow>\n  ?P9 \\<Turnstile> ?x9 = L_transform.valid (EF (F, ?P9)) (L_transform ?x9)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> FL_Formula.Conj xset =\n    L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Conj xset))", "by auto (metis imageE map_bset.rep_eq, simp add: map_bset.rep_eq)"], ["proof (state)\nthis:\n  P \\<Turnstile> FL_Formula.Conj xset =\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Conj xset))\n\ngoal (3 subgoals):\n 1. \\<And>F x P.\n       \\<lbrakk>x \\<in> \\<A>[F];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (F, P)) (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Not x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Not x))\n 2. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 3. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>F x P.\n       \\<lbrakk>x \\<in> \\<A>[F];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (F, P)) (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Not x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Not x))\n 2. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 3. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "case (Not F x)"], ["proof (state)\nthis:\n  x \\<in> \\<A>[F]\n  ?P9 \\<Turnstile> x = L_transform.valid (EF (F, ?P9)) (L_transform x)\n\ngoal (3 subgoals):\n 1. \\<And>F x P.\n       \\<lbrakk>x \\<in> \\<A>[F];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (F, P)) (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Not x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Not x))\n 2. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 3. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<A>[F]\n  ?P9 \\<Turnstile> x = L_transform.valid (EF (F, ?P9)) (L_transform x)", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> \\<A>[F]\n  ?P9 \\<Turnstile> x = L_transform.valid (EF (F, ?P9)) (L_transform x)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> FL_Formula.Not x =\n    L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Not x))", "by simp"], ["proof (state)\nthis:\n  P \\<Turnstile> FL_Formula.Not x =\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Not x))\n\ngoal (2 subgoals):\n 1. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 2. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 2. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "case (Pred f F \\<phi>)"], ["proof (state)\nthis:\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (2 subgoals):\n 1. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 2. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "let ?\\<phi> = \"Formula.Pred \\<phi> :: ('idx, 'pred, ('act,'effect) L_action) Formula.formula\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f F \\<phi> P.\n       f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow>\n       P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n       L_transform.valid (EF (F, P))\n        (L_transform (FL_Formula.Pred f \\<phi>))\n 2. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n    L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Pred f \\<phi> \\<Longrightarrow>\n    L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "assume \"FL_valid P (Pred f \\<phi>)\""], ["proof (state)\nthis:\n  P \\<Turnstile> FL_Formula.Pred f \\<phi>\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Pred f \\<phi> \\<Longrightarrow>\n    L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "then"], ["proof (chain)\npicking this:\n  P \\<Turnstile> FL_Formula.Pred f \\<phi>", "have \"L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P)) ?\\<phi>\""], ["proof (prove)\nusing this:\n  P \\<Turnstile> FL_Formula.Pred f \\<phi>\n\ngoal (1 subgoal):\n 1. L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P))\n     (Formula.Pred \\<phi>)", "by (simp add: L_transform.valid_Act)"], ["proof (state)\nthis:\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P)) (Formula.Pred \\<phi>)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Pred f \\<phi> \\<Longrightarrow>\n    L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "moreover"], ["proof (state)\nthis:\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P)) (Formula.Pred \\<phi>)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Pred f \\<phi> \\<Longrightarrow>\n    L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "from \\<open>f \\<in>\\<^sub>f\\<^sub>s F\\<close>"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>f\\<^sub>s F", "have \"EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f, AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>", "by (metis L_transition.simps(2))"], ["proof (state)\nthis:\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Pred f \\<phi> \\<Longrightarrow>\n    L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P)) (Formula.Pred \\<phi>)\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>", "show \"L_transform.valid (EF (F, P)) (L_transform (Pred f \\<phi>))\""], ["proof (prove)\nusing this:\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P)) (Formula.Pred \\<phi>)\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))", "using L_transform.valid_Act"], ["proof (prove)\nusing this:\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P)) (Formula.Pred \\<phi>)\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n  L_transform.valid ?P (Formula.Act ?\\<alpha> ?x) =\n  (\\<exists>\\<alpha>' x' P'.\n      Formula.Act ?\\<alpha> ?x = Formula.Act \\<alpha>' x' \\<and>\n      ?P \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n      L_transform.valid P' x')\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))", "by fastforce"], ["proof (state)\nthis:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "assume \"L_transform.valid (EF (F, P)) (L_transform (Pred f \\<phi>))\""], ["proof (state)\nthis:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "then"], ["proof (chain)\npicking this:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))", "obtain P' where trans: \"EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f, P'\\<rangle>\" and valid: \"L_transform.valid P' ?\\<phi>\""], ["proof (prove)\nusing this:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>;\n         L_transform.valid P' (Formula.Pred \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp (metis bn_L_action.simps(2) empty_iff fresh_star_def L_transform.valid_Act_fresh L_transform.valid_Pred L_transition.simps(2))"], ["proof (state)\nthis:\n  EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>\n  L_transform.valid P' (Formula.Pred \\<phi>)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "from trans"], ["proof (chain)\npicking this:\n  EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>", "have \"P' = AC (f, F, \\<langle>f\\<rangle>P)\""], ["proof (prove)\nusing this:\n  EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P' = AC (f, F, \\<langle>f\\<rangle>P)", "by (simp add: residual_empty_bn_eq_iff)"], ["proof (state)\nthis:\n  P' = AC (f, F, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Pred f \\<phi>)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Pred f \\<phi>", "with valid"], ["proof (chain)\npicking this:\n  L_transform.valid P' (Formula.Pred \\<phi>)\n  P' = AC (f, F, \\<langle>f\\<rangle>P)", "show \"FL_valid P (Pred f \\<phi>)\""], ["proof (prove)\nusing this:\n  L_transform.valid P' (Formula.Pred \\<phi>)\n  P' = AC (f, F, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> FL_Formula.Pred f \\<phi>", "by simp"], ["proof (state)\nthis:\n  P \\<Turnstile> FL_Formula.Pred f \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<Turnstile> FL_Formula.Pred f \\<phi> =\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Pred f \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "case (Act f F \\<alpha> x)"], ["proof (state)\nthis:\n  f \\<in>\\<^sub>f\\<^sub>s F\n  bn \\<alpha> \\<sharp>* (F, f)\n  x \\<in> \\<A>[L (\\<alpha>, F, f)]\n  ?P9 \\<Turnstile> x =\n  L_transform.valid (EF (L (\\<alpha>, F, f), ?P9)) (L_transform x)\n\ngoal (1 subgoal):\n 1. \\<And>f F \\<alpha> x P.\n       \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F; bn \\<alpha> \\<sharp>* (F, f);\n        x \\<in> \\<A>[L (\\<alpha>, F, f)];\n        \\<And>P.\n           P \\<Turnstile> x =\n           L_transform.valid (EF (L (\\<alpha>, F, f), P))\n            (L_transform x)\\<rbrakk>\n       \\<Longrightarrow> P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n                         L_transform.valid (EF (F, P))\n                          (L_transform (FL_Formula.Act f \\<alpha> x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "assume \"FL_valid P (FL_Formula.Act f \\<alpha> x)\""], ["proof (state)\nthis:\n  P \\<Turnstile> FL_Formula.Act f \\<alpha> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "obtain \\<alpha>' x' P' where eq: \"FL_Formula.Act f \\<alpha> x = FL_Formula.Act f \\<alpha>' x'\" and trans: \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\" and valid: \"FL_valid P' x'\" and fresh: \"bn \\<alpha>' \\<sharp>* (F, f)\""], ["proof (prove)\nusing this:\n  P \\<Turnstile> FL_Formula.Act f \\<alpha> x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' x' P'.\n        \\<lbrakk>FL_Formula.Act f \\<alpha> x =\n                 FL_Formula.Act f \\<alpha>' x';\n         \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>;\n         P' \\<Turnstile> x'; bn \\<alpha>' \\<sharp>* (F, f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis FL_valid_Act_strong finite_supp)"], ["proof (state)\nthis:\n  FL_Formula.Act f \\<alpha> x = FL_Formula.Act f \\<alpha>' x'\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  P' \\<Turnstile> x'\n  bn \\<alpha>' \\<sharp>* (F, f)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from eq"], ["proof (chain)\npicking this:\n  FL_Formula.Act f \\<alpha> x = FL_Formula.Act f \\<alpha>' x'", "obtain p where p_x: \"p \\<bullet> x = x'\" and p_\\<alpha>: \"p \\<bullet> \\<alpha> = \\<alpha>'\" and supp_p: \"supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\""], ["proof (prove)\nusing this:\n  FL_Formula.Act f \\<alpha> x = FL_Formula.Act f \\<alpha>' x'\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<bullet> x = x'; p \\<bullet> \\<alpha> = \\<alpha>';\n         supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis bn_eqvt FL_Formula.Act_eq_iff_perm_renaming)"], ["proof (state)\nthis:\n  p \\<bullet> x = x'\n  p \\<bullet> \\<alpha> = \\<alpha>'\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from \\<open>bn \\<alpha> \\<sharp>* (F, f)\\<close> and fresh"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (F, f)\n  bn \\<alpha>' \\<sharp>* (F, f)", "have \"supp (F, f) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (F, f)\n  bn \\<alpha>' \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. supp (F, f) \\<sharp>* p", "using supp_p"], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (F, f)\n  bn \\<alpha>' \\<sharp>* (F, f)\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\n\ngoal (1 subgoal):\n 1. supp (F, f) \\<sharp>* p", "by (auto simp add: fresh_star_Pair fresh_star_def supp_Pair fresh_def)"], ["proof (state)\nthis:\n  supp (F, f) \\<sharp>* p\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  supp (F, f) \\<sharp>* p", "have \"p \\<bullet> F = F\" and \"p \\<bullet> f = f\""], ["proof (prove)\nusing this:\n  supp (F, f) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. p \\<bullet> F = F &&& p \\<bullet> f = f", "using supp_perm_eq"], ["proof (prove)\nusing this:\n  supp (F, f) \\<sharp>* p\n  supp ?x \\<sharp>* ?p \\<Longrightarrow> ?p \\<bullet> ?x = ?x\n\ngoal (1 subgoal):\n 1. p \\<bullet> F = F &&& p \\<bullet> f = f", "by fastforce+"], ["proof (state)\nthis:\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from valid"], ["proof (chain)\npicking this:\n  P' \\<Turnstile> x'", "have \"FL_valid (-p \\<bullet> P') x\""], ["proof (prove)\nusing this:\n  P' \\<Turnstile> x'\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile> x", "using p_x"], ["proof (prove)\nusing this:\n  P' \\<Turnstile> x'\n  p \\<bullet> x = x'\n\ngoal (1 subgoal):\n 1. - p \\<bullet> P' \\<Turnstile> x", "by (metis FL_valid_eqvt permute_minus_cancel(2))"], ["proof (state)\nthis:\n  - p \\<bullet> P' \\<Turnstile> x\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  - p \\<bullet> P' \\<Turnstile> x", "have \"L_transform.valid (EF (L (\\<alpha>, F, f), -p \\<bullet> P')) (L_transform x)\""], ["proof (prove)\nusing this:\n  - p \\<bullet> P' \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n     (L_transform x)", "using Act.hyps(4)"], ["proof (prove)\nusing this:\n  - p \\<bullet> P' \\<Turnstile> x\n  ?P9 \\<Turnstile> x =\n  L_transform.valid (EF (L (\\<alpha>, F, f), ?P9)) (L_transform x)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n     (L_transform x)", "by metis"], ["proof (state)\nthis:\n  L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (L_transform x)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (L_transform x)", "have \"L_transform.valid (p \\<bullet> EF (L (\\<alpha>, F, f), -p \\<bullet> P')) (p \\<bullet> L_transform x)\""], ["proof (prove)\nusing this:\n  L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (L_transform x)\n\ngoal (1 subgoal):\n 1. L_transform.valid\n     (p \\<bullet> EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n     (p \\<bullet> L_transform x)", "by (fact L_transform.valid_eqvt)"], ["proof (state)\nthis:\n  L_transform.valid (p \\<bullet> EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (p \\<bullet> L_transform x)\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  L_transform.valid (p \\<bullet> EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (p \\<bullet> L_transform x)", "have \"L_transform.valid (EF (L (\\<alpha>', F, f), P')) (L_transform x')\""], ["proof (prove)\nusing this:\n  L_transform.valid (p \\<bullet> EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (p \\<bullet> L_transform x)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (L (\\<alpha>', F, f), P')) (L_transform x')", "using p_x and p_\\<alpha> and \\<open>p \\<bullet> F = F\\<close> and \\<open>p \\<bullet> f = f\\<close>"], ["proof (prove)\nusing this:\n  L_transform.valid (p \\<bullet> EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (p \\<bullet> L_transform x)\n  p \\<bullet> x = x'\n  p \\<bullet> \\<alpha> = \\<alpha>'\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (L (\\<alpha>', F, f), P')) (L_transform x')", "by simp"], ["proof (state)\nthis:\n  L_transform.valid (EF (L (\\<alpha>', F, f), P')) (L_transform x')\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  L_transform.valid (EF (L (\\<alpha>', F, f), P')) (L_transform x')", "have \"L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P)) (Formula.Act (Act \\<alpha>') (L_transform x'))\""], ["proof (prove)\nusing this:\n  L_transform.valid (EF (L (\\<alpha>', F, f), P')) (L_transform x')\n\ngoal (1 subgoal):\n 1. L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P))\n     (Formula.Act (L_action.Act \\<alpha>') (L_transform x'))", "using trans fresh L_transform.valid_Act"], ["proof (prove)\nusing this:\n  L_transform.valid (EF (L (\\<alpha>', F, f), P')) (L_transform x')\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>',P'\\<rangle>\n  bn \\<alpha>' \\<sharp>* (F, f)\n  L_transform.valid ?P (Formula.Act ?\\<alpha> ?x) =\n  (\\<exists>\\<alpha>' x' P'.\n      Formula.Act ?\\<alpha> ?x = Formula.Act \\<alpha>' x' \\<and>\n      ?P \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n      L_transform.valid P' x')\n\ngoal (1 subgoal):\n 1. L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P))\n     (Formula.Act (L_action.Act \\<alpha>') (L_transform x'))", "by fastforce"], ["proof (state)\nthis:\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P))\n   (Formula.Act (L_action.Act \\<alpha>') (L_transform x'))\n\ngoal (2 subgoals):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x \\<Longrightarrow>\n    L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))\n 2. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "with \\<open>f \\<in>\\<^sub>f\\<^sub>s F\\<close> and eq"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n  FL_Formula.Act f \\<alpha> x = FL_Formula.Act f \\<alpha>' x'\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P))\n   (Formula.Act (L_action.Act \\<alpha>') (L_transform x'))", "show \"L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Act f \\<alpha> x))\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n  FL_Formula.Act f \\<alpha> x = FL_Formula.Act f \\<alpha>' x'\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P))\n   (Formula.Act (L_action.Act \\<alpha>') (L_transform x'))\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))", "using L_transform.valid_Act"], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n  FL_Formula.Act f \\<alpha> x = FL_Formula.Act f \\<alpha>' x'\n  L_transform.valid (AC (f, F, \\<langle>f\\<rangle>P))\n   (Formula.Act (L_action.Act \\<alpha>') (L_transform x'))\n  L_transform.valid ?P (Formula.Act ?\\<alpha> ?x) =\n  (\\<exists>\\<alpha>' x' P'.\n      Formula.Act ?\\<alpha> ?x = Formula.Act \\<alpha>' x' \\<and>\n      ?P \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n      L_transform.valid P' x')\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x))", "by fastforce"], ["proof (state)\nthis:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Act f \\<alpha> x))\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "assume *: \"L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Act f \\<alpha> x))\"\n\n      \\<comment> \\<open>rename~@{term \"bn \\<alpha>\"} to avoid~@{term \"(F, f, P)\"}, without touching~@{term F} or~@{term \"FL_Formula.Act f \\<alpha> x\"}\\<close>"], ["proof (state)\nthis:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Act f \\<alpha> x))\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "obtain p where 1: \"(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P)\" and 2: \"supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule at_set_avoiding2[of \"bn \\<alpha>\" \"(F, f, P)\" \"(F, FL_Formula.Act f \\<alpha> x)\", THEN exE])"], ["proof (state)\ngoal (5 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (bn \\<alpha>)\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (F, f, P))\n 3. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (F, FL_Formula.Act f \\<alpha> x))\n 4. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\n 5. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n                    supp\n                     (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P) \\<and>\n        supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (bn \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (bn \\<alpha>)", "by (fact bn_finite)"], ["proof (state)\nthis:\n  finite (bn \\<alpha>)\n\ngoal (4 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (F, f, P))\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (F, FL_Formula.Act f \\<alpha> x))\n 3. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\n 4. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n                    supp\n                     (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P) \\<and>\n        supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (F, f, P))\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (F, FL_Formula.Act f \\<alpha> x))\n 3. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\n 4. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n                    supp\n                     (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P) \\<and>\n        supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (supp (F, f, P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (F, f, P))", "by (fact finite_supp)"], ["proof (state)\nthis:\n  finite (supp (F, f, P))\n\ngoal (3 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (F, FL_Formula.Act f \\<alpha> x))\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\n 3. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n                    supp\n                     (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P) \\<and>\n        supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    finite (supp (F, FL_Formula.Act f \\<alpha> x))\n 2. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\n 3. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n                    supp\n                     (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P) \\<and>\n        supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"finite (supp (F, FL_Formula.Act f \\<alpha> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (F, FL_Formula.Act f \\<alpha> x))", "by (simp add: finite_supp)"], ["proof (state)\nthis:\n  finite (supp (F, FL_Formula.Act f \\<alpha> x))\n\ngoal (2 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\n 2. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n                    supp\n                     (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P) \\<and>\n        supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>p.\n        \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n         supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\n 2. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n                    supp\n                     (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P) \\<and>\n        supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<open>bn \\<alpha> \\<sharp>* (F, f)\\<close>"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (F, f)", "show \"bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)", "by (simp add: fresh_star_Pair fresh_star_def fresh_def supp_Pair)"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* (F, FL_Formula.Act f \\<alpha> x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>(p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P);\n                    supp\n                     (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        (x \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P) \\<and>\n        supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* x\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed metis"], ["proof (state)\nthis:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P)\n  supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from 2"], ["proof (chain)\npicking this:\n  supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p", "have \"supp F \\<sharp>* p\" and Act_fresh: \"supp (FL_Formula.Act f \\<alpha> x) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  supp (F, FL_Formula.Act f \\<alpha> x) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp F \\<sharp>* p &&& supp (FL_Formula.Act f \\<alpha> x) \\<sharp>* p", "by (simp add: fresh_star_Pair fresh_star_def supp_Pair)+"], ["proof (state)\nthis:\n  supp F \\<sharp>* p\n  supp (FL_Formula.Act f \\<alpha> x) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from \\<open>supp F \\<sharp>* p\\<close>"], ["proof (chain)\npicking this:\n  supp F \\<sharp>* p", "have \"p \\<bullet> F = F\""], ["proof (prove)\nusing this:\n  supp F \\<sharp>* p\n\ngoal (1 subgoal):\n 1. p \\<bullet> F = F", "by (metis supp_perm_eq)"], ["proof (state)\nthis:\n  p \\<bullet> F = F\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from Act_fresh"], ["proof (chain)\npicking this:\n  supp (FL_Formula.Act f \\<alpha> x) \\<sharp>* p", "have \"p \\<bullet> f = f\""], ["proof (prove)\nusing this:\n  supp (FL_Formula.Act f \\<alpha> x) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. p \\<bullet> f = f", "using fresh_star_Un supp_perm_eq"], ["proof (prove)\nusing this:\n  supp (FL_Formula.Act f \\<alpha> x) \\<sharp>* p\n  (?as \\<union> ?bs) \\<sharp>* ?x =\n  (?as \\<sharp>* ?x \\<and> ?bs \\<sharp>* ?x)\n  supp ?x \\<sharp>* ?p \\<Longrightarrow> ?p \\<bullet> ?x = ?x\n\ngoal (1 subgoal):\n 1. p \\<bullet> f = f", "by fastforce"], ["proof (state)\nthis:\n  p \\<bullet> f = f\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from Act_fresh"], ["proof (chain)\npicking this:\n  supp (FL_Formula.Act f \\<alpha> x) \\<sharp>* p", "have eq: \"FL_Formula.Act f \\<alpha> x = FL_Formula.Act f (p \\<bullet> \\<alpha>) (p \\<bullet> x)\""], ["proof (prove)\nusing this:\n  supp (FL_Formula.Act f \\<alpha> x) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. FL_Formula.Act f \\<alpha> x =\n    FL_Formula.Act f (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "by (metis FL_Formula.Act_eq_iff_perm FL_Formula.Act_eqvt supp_perm_eq)"], ["proof (state)\nthis:\n  FL_Formula.Act f \\<alpha> x =\n  FL_Formula.Act f (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "with *"], ["proof (chain)\npicking this:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Act f \\<alpha> x))\n  FL_Formula.Act f \\<alpha> x =\n  FL_Formula.Act f (p \\<bullet> \\<alpha>) (p \\<bullet> x)", "obtain P' where trans: \"EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>\" and valid: \"L_transform.valid P' (Formula.Act (Act (p \\<bullet> \\<alpha>)) (L_transform (p \\<bullet> x)))\""], ["proof (prove)\nusing this:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Act f \\<alpha> x))\n  FL_Formula.Act f \\<alpha> x =\n  FL_Formula.Act f (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>;\n         L_transform.valid P'\n          (Formula.Act (L_action.Act (p \\<bullet> \\<alpha>))\n            (L_transform (p \\<bullet> x)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using L_transform_Act"], ["proof (prove)\nusing this:\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Act f \\<alpha> x))\n  FL_Formula.Act f \\<alpha> x =\n  FL_Formula.Act f (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n  L_transform (FL_Formula.Act ?f ?\\<alpha> ?x) =\n  Formula.Act (Eff ?f)\n   (Formula.Act (L_action.Act ?\\<alpha>) (L_transform ?x))\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>;\n         L_transform.valid P'\n          (Formula.Act (L_action.Act (p \\<bullet> \\<alpha>))\n            (L_transform (p \\<bullet> x)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transform.valid_Act_fresh bn_L_action.simps(2) empty_iff fresh_star_def)"], ["proof (state)\nthis:\n  EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>\n  L_transform.valid P'\n   (Formula.Act (L_action.Act (p \\<bullet> \\<alpha>))\n     (L_transform (p \\<bullet> x)))\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from trans"], ["proof (chain)\npicking this:\n  EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>", "have P': \"P' = AC (f, F, \\<langle>f\\<rangle>P)\""], ["proof (prove)\nusing this:\n  EF (F, P) \\<rightarrow>\\<^sub>L \\<langle>Eff f,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P' = AC (f, F, \\<langle>f\\<rangle>P)", "by (simp add: residual_empty_bn_eq_iff)"], ["proof (state)\nthis:\n  P' = AC (f, F, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "have supp_f_P: \"supp (\\<langle>f\\<rangle>P) \\<subseteq> supp f \\<union> supp P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (\\<langle>f\\<rangle>P) \\<subseteq> supp f \\<union> supp P", "using effect_apply_eqvt supp_fun_app supp_fun_app_eqvt"], ["proof (prove)\nusing this:\n  eqvt effect_apply\n  supp (?f ?x) \\<subseteq> supp ?f \\<union> supp ?x\n  eqvt ?f \\<Longrightarrow> supp (?f ?x) \\<subseteq> supp ?x\n\ngoal (1 subgoal):\n 1. supp (\\<langle>f\\<rangle>P) \\<subseteq> supp f \\<union> supp P", "by fastforce"], ["proof (state)\nthis:\n  supp (\\<langle>f\\<rangle>P) \\<subseteq> supp f \\<union> supp P\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "with 1"], ["proof (chain)\npicking this:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P)\n  supp (\\<langle>f\\<rangle>P) \\<subseteq> supp f \\<union> supp P", "have \"bn (Act (p \\<bullet> \\<alpha>)) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>P)\""], ["proof (prove)\nusing this:\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P)\n  supp (\\<langle>f\\<rangle>P) \\<subseteq> supp f \\<union> supp P\n\ngoal (1 subgoal):\n 1. bn (L_action.Act\n         (p \\<bullet> \\<alpha>)) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>P)", "by (auto simp add: bn_eqvt fresh_star_def fresh_def supp_Pair)"], ["proof (state)\nthis:\n  bn (L_action.Act\n       (p \\<bullet> \\<alpha>)) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "with valid"], ["proof (chain)\npicking this:\n  L_transform.valid P'\n   (Formula.Act (L_action.Act (p \\<bullet> \\<alpha>))\n     (L_transform (p \\<bullet> x)))\n  bn (L_action.Act\n       (p \\<bullet> \\<alpha>)) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>P)", "obtain P'' where trans': \"AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L \\<langle>Act (p \\<bullet> \\<alpha>),P''\\<rangle>\" and valid': \"L_transform.valid P'' (L_transform (p \\<bullet> x))\""], ["proof (prove)\nusing this:\n  L_transform.valid P'\n   (Formula.Act (L_action.Act (p \\<bullet> \\<alpha>))\n     (L_transform (p \\<bullet> x)))\n  bn (L_action.Act\n       (p \\<bullet> \\<alpha>)) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n                 \\<langle>L_action.Act (p \\<bullet> \\<alpha>),P''\\<rangle>;\n         L_transform.valid P'' (L_transform (p \\<bullet> x))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using P'"], ["proof (prove)\nusing this:\n  L_transform.valid P'\n   (Formula.Act (L_action.Act (p \\<bullet> \\<alpha>))\n     (L_transform (p \\<bullet> x)))\n  bn (L_action.Act\n       (p \\<bullet> \\<alpha>)) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>P)\n  P' = AC (f, F, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. (\\<And>P''.\n        \\<lbrakk>AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n                 \\<langle>L_action.Act (p \\<bullet> \\<alpha>),P''\\<rangle>;\n         L_transform.valid P'' (L_transform (p \\<bullet> x))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transform.valid_Act_fresh)"], ["proof (state)\nthis:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act (p \\<bullet> \\<alpha>),P''\\<rangle>\n  L_transform.valid P'' (L_transform (p \\<bullet> x))\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from supp_f_P and 1"], ["proof (chain)\npicking this:\n  supp (\\<langle>f\\<rangle>P) \\<subseteq> supp f \\<union> supp P\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P)", "have \"bn (p \\<bullet> \\<alpha>) \\<sharp>* (F, f, \\<langle>f\\<rangle>P)\""], ["proof (prove)\nusing this:\n  supp (\\<langle>f\\<rangle>P) \\<subseteq> supp f \\<union> supp P\n  (p \\<bullet> bn \\<alpha>) \\<sharp>* (F, f, P)\n\ngoal (1 subgoal):\n 1. bn (p \\<bullet> \\<alpha>) \\<sharp>* (F, f, \\<langle>f\\<rangle>P)", "by (auto simp add: bn_eqvt fresh_star_def fresh_def supp_Pair)"], ["proof (state)\nthis:\n  bn (p \\<bullet> \\<alpha>) \\<sharp>* (F, f, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "with trans'"], ["proof (chain)\npicking this:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act (p \\<bullet> \\<alpha>),P''\\<rangle>\n  bn (p \\<bullet> \\<alpha>) \\<sharp>* (F, f, \\<langle>f\\<rangle>P)", "obtain P' where P'': \"P'' = EF (L (p \\<bullet> \\<alpha>, F, f), P')\" and trans'': \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\""], ["proof (prove)\nusing this:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act (p \\<bullet> \\<alpha>),P''\\<rangle>\n  bn (p \\<bullet> \\<alpha>) \\<sharp>* (F, f, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P'' = EF (L (p \\<bullet> \\<alpha>, F, f), P');\n         \\<langle>f\\<rangle>P \\<rightarrow>\n         \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transition_AC_fresh)"], ["proof (state)\nthis:\n  P'' = EF (L (p \\<bullet> \\<alpha>, F, f), P')\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "from valid'"], ["proof (chain)\npicking this:\n  L_transform.valid P'' (L_transform (p \\<bullet> x))", "have \"L_transform.valid (-p \\<bullet> P'') (L_transform x)\""], ["proof (prove)\nusing this:\n  L_transform.valid P'' (L_transform (p \\<bullet> x))\n\ngoal (1 subgoal):\n 1. L_transform.valid (- p \\<bullet> P'') (L_transform x)", "by (metis (mono_tags) L_transform.valid_eqvt L_transform_eqvt permute_minus_cancel(2))"], ["proof (state)\nthis:\n  L_transform.valid (- p \\<bullet> P'') (L_transform x)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "with P'' \\<open>p \\<bullet> F = F\\<close> \\<open>p \\<bullet> f = f\\<close>"], ["proof (chain)\npicking this:\n  P'' = EF (L (p \\<bullet> \\<alpha>, F, f), P')\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n  L_transform.valid (- p \\<bullet> P'') (L_transform x)", "have \"L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P')) (L_transform x)\""], ["proof (prove)\nusing this:\n  P'' = EF (L (p \\<bullet> \\<alpha>, F, f), P')\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n  L_transform.valid (- p \\<bullet> P'') (L_transform x)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n     (L_transform x)", "by simp (metis pemute_minus_self permute_minus_cancel(1))"], ["proof (state)\nthis:\n  L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (L_transform x)\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "then"], ["proof (chain)\npicking this:\n  L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (L_transform x)", "have \"FL_valid P' (p \\<bullet> x)\""], ["proof (prove)\nusing this:\n  L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (L_transform x)\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile> p \\<bullet> x", "using Act.hyps(4)"], ["proof (prove)\nusing this:\n  L_transform.valid (EF (L (\\<alpha>, F, f), - p \\<bullet> P'))\n   (L_transform x)\n  ?P9 \\<Turnstile> x =\n  L_transform.valid (EF (L (\\<alpha>, F, f), ?P9)) (L_transform x)\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile> p \\<bullet> x", "by (metis FL_valid_eqvt permute_minus_cancel(1))"], ["proof (state)\nthis:\n  P' \\<Turnstile> p \\<bullet> x\n\ngoal (1 subgoal):\n 1. L_transform.valid (EF (F, P))\n     (L_transform (FL_Formula.Act f \\<alpha> x)) \\<Longrightarrow>\n    P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "with trans'' and eq"], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\n  FL_Formula.Act f \\<alpha> x =\n  FL_Formula.Act f (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n  P' \\<Turnstile> p \\<bullet> x", "show \"FL_valid P (FL_Formula.Act f \\<alpha> x)\""], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>P \\<rightarrow>\n  \\<langle>p \\<bullet> \\<alpha>,P'\\<rangle>\n  FL_Formula.Act f \\<alpha> x =\n  FL_Formula.Act f (p \\<bullet> \\<alpha>) (p \\<bullet> x)\n  P' \\<Turnstile> p \\<bullet> x\n\ngoal (1 subgoal):\n 1. P \\<Turnstile> FL_Formula.Act f \\<alpha> x", "by (metis FL_valid_Act)"], ["proof (state)\nthis:\n  P \\<Turnstile> FL_Formula.Act f \\<alpha> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<Turnstile> FL_Formula.Act f \\<alpha> x =\n  L_transform.valid (EF (F, P)) (L_transform (FL_Formula.Act f \\<alpha> x))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Bisimilarity in the \\texorpdfstring{$L$}{L}-transform\\<close>"], ["", "context effect_nominal_ts\nbegin"], ["", "(* Not quite sure why this is needed again? *)"], ["", "interpretation L_transform: nominal_ts \"(\\<turnstile>\\<^sub>L)\" \"(\\<rightarrow>\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nominal_ts (\\<turnstile>\\<^sub>L) (\\<rightarrow>\\<^sub>L)", "by unfold_locales (fact L_satisfies_eqvt, fact L_transition_eqvt)"], ["", "notation L_transform.bisimilar (infix \"\\<sim>\\<cdot>\\<^sub>L\" 100)"], ["", "text \\<open>$F/L$-bisimilarity is equivalent to bisimilarity in the $L$-transform.\\<close>"], ["", "inductive L_bisimilar :: \"('state,'effect) L_state \\<Rightarrow> ('state,'effect) L_state \\<Rightarrow> bool\" where\n    \"P \\<sim>\\<cdot>[F] Q \\<Longrightarrow> L_bisimilar (EF (F,P)) (EF (F,Q))\"\n  | \"P \\<sim>\\<cdot>[F] Q \\<Longrightarrow> f \\<in>\\<^sub>f\\<^sub>s F \\<Longrightarrow> L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P)) (AC (f, F, \\<langle>f\\<rangle>Q))\""], ["", "lemma L_bisimilar_is_L_transform_bisimulation: \"L_transform.is_bisimulation L_bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L_transform.is_bisimulation L_bisimilar", "unfolding L_transform.is_bisimulation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. symp L_bisimilar \\<and>\n    (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>L\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                L_bisimilar P' Q')))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. symp L_bisimilar\n 2. (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>L\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                L_bisimilar P' Q')))", "show \"symp L_bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp L_bisimilar", "by (metis FL_bisimilar_symp L_bisimilar.cases L_bisimilar.intros symp_def)"], ["proof (state)\nthis:\n  symp L_bisimilar\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>L\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                L_bisimilar P' Q')))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>L\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                L_bisimilar P' Q')))", "have \"\\<forall>P\\<^sub>L Q\\<^sub>L. L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow> (\\<forall>\\<phi>. P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow> Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)\" (is ?S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P\\<^sub>L Q\\<^sub>L.\n       L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n       (\\<forall>\\<phi>.\n           P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n           Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)", "using FL_bisimilar_is_L_bisimulation L_bisimilar.simps is_L_bisimulation_def"], ["proof (prove)\nusing this:\n  is_L_bisimulation FL_bisimilar\n  L_bisimilar ?a1.0 ?a2.0 =\n  ((\\<exists>P F Q.\n       ?a1.0 = EF (F, P) \\<and>\n       ?a2.0 = EF (F, Q) \\<and> P \\<sim>\\<cdot>[F] Q) \\<or>\n   (\\<exists>P F Q f.\n       ?a1.0 = AC (f, F, \\<langle>f\\<rangle>P) \\<and>\n       ?a2.0 = AC (f, F, \\<langle>f\\<rangle>Q) \\<and>\n       P \\<sim>\\<cdot>[F] Q \\<and> f \\<in>\\<^sub>f\\<^sub>s F))\n  is_L_bisimulation ?R \\<equiv>\n  \\<forall>F.\n     symp (?R F) \\<and>\n     (\\<forall>P Q.\n         ?R F P Q \\<longrightarrow>\n         (\\<forall>f.\n             f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n             (\\<forall>\\<phi>.\n                 \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow>\n                 \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n     (\\<forall>P Q.\n         ?R F P Q \\<longrightarrow>\n         (\\<forall>f.\n             f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n             (\\<forall>\\<alpha> P'.\n                 bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n  f) \\<longrightarrow>\n                 \\<langle>f\\<rangle>P \\<rightarrow>\n                 \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                 (\\<exists>Q'.\n                     \\<langle>f\\<rangle>Q \\<rightarrow>\n                     \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                     ?R (L (\\<alpha>, F, f)) P' Q'))))\n\ngoal (1 subgoal):\n 1. \\<forall>P\\<^sub>L Q\\<^sub>L.\n       L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n       (\\<forall>\\<phi>.\n           P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n           Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)", "by auto"], ["proof (state)\nthis:\n  \\<forall>P\\<^sub>L Q\\<^sub>L.\n     L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n         Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>L\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                L_bisimilar P' Q')))", "moreover"], ["proof (state)\nthis:\n  \\<forall>P\\<^sub>L Q\\<^sub>L.\n     L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n         Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>L\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                L_bisimilar P' Q')))", "have \"\\<forall>P\\<^sub>L Q\\<^sub>L. L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow> (\\<forall>\\<alpha>\\<^sub>L P\\<^sub>L'. bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L \\<longrightarrow> P\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> \\<longrightarrow> (\\<exists>Q\\<^sub>L'. Q\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and> L_bisimilar P\\<^sub>L' Q\\<^sub>L'))\" (is ?T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P\\<^sub>L Q\\<^sub>L.\n       L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n       (\\<forall>\\<alpha>\\<^sub>L P\\<^sub>L'.\n           bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L \\<longrightarrow>\n           P\\<^sub>L \\<rightarrow>\\<^sub>L\n           \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> \\<longrightarrow>\n           (\\<exists>Q\\<^sub>L'.\n               Q\\<^sub>L \\<rightarrow>\\<^sub>L\n               \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n               L_bisimilar P\\<^sub>L' Q\\<^sub>L'))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P\\<^sub>L Q\\<^sub>L \\<alpha>\\<^sub>L P\\<^sub>L'.\n       \\<lbrakk>L_bisimilar P\\<^sub>L Q\\<^sub>L;\n        bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L;\n        P\\<^sub>L \\<rightarrow>\\<^sub>L\n        \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q\\<^sub>L'.\n                            Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n                            L_bisimilar P\\<^sub>L' Q\\<^sub>L'", "fix P\\<^sub>L Q\\<^sub>L \\<alpha>\\<^sub>L P\\<^sub>L'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P\\<^sub>L Q\\<^sub>L \\<alpha>\\<^sub>L P\\<^sub>L'.\n       \\<lbrakk>L_bisimilar P\\<^sub>L Q\\<^sub>L;\n        bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L;\n        P\\<^sub>L \\<rightarrow>\\<^sub>L\n        \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q\\<^sub>L'.\n                            Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n                            L_bisimilar P\\<^sub>L' Q\\<^sub>L'", "assume L_bisim: \"L_bisimilar P\\<^sub>L Q\\<^sub>L\" and fresh\\<^sub>L: \"bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L\" and trans\\<^sub>L: \"P\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\""], ["proof (state)\nthis:\n  L_bisimilar P\\<^sub>L Q\\<^sub>L\n  bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L\n  P\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P\\<^sub>L Q\\<^sub>L \\<alpha>\\<^sub>L P\\<^sub>L'.\n       \\<lbrakk>L_bisimilar P\\<^sub>L Q\\<^sub>L;\n        bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L;\n        P\\<^sub>L \\<rightarrow>\\<^sub>L\n        \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q\\<^sub>L'.\n                            Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n                            L_bisimilar P\\<^sub>L' Q\\<^sub>L'", "obtain Q\\<^sub>L' where \"Q\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>\" and \"L_bisimilar P\\<^sub>L' Q\\<^sub>L'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Q\\<^sub>L'.\n        \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                 \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n         L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using L_bisim"], ["proof (prove)\nusing this:\n  L_bisimilar P\\<^sub>L Q\\<^sub>L\n\ngoal (1 subgoal):\n 1. (\\<And>Q\\<^sub>L'.\n        \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                 \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n         L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (rule L_bisimilar.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix P F Q"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume P\\<^sub>L: \"P\\<^sub>L = EF (F, P)\" and Q\\<^sub>L: \"Q\\<^sub>L = EF (F, Q)\" and bisim: \"P \\<sim>\\<cdot>[F] Q\""], ["proof (state)\nthis:\n  P\\<^sub>L = EF (F, P)\n  Q\\<^sub>L = EF (F, Q)\n  P \\<sim>\\<cdot>[F] Q\n\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from P\\<^sub>L and trans\\<^sub>L"], ["proof (chain)\npicking this:\n  P\\<^sub>L = EF (F, P)\n  P\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>", "obtain f where effect: \"f \\<in>\\<^sub>f\\<^sub>s F\" and \\<alpha>\\<^sub>LP\\<^sub>L': \"\\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> = \\<langle>Eff f, AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\""], ["proof (prove)\nusing this:\n  P\\<^sub>L = EF (F, P)\n  P\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F;\n         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n         \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using L_transition.simps(2)"], ["proof (prove)\nusing this:\n  P\\<^sub>L = EF (F, P)\n  P\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\n  EF (?F, ?P) \\<rightarrow>\\<^sub>L ?\\<alpha>P' =\n  (\\<exists>f.\n      f \\<in>\\<^sub>f\\<^sub>s ?F \\<and>\n      ?\\<alpha>P' =\n      \\<langle>Eff f,AC (f, ?F, \\<langle>f\\<rangle>?P)\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>f \\<in>\\<^sub>f\\<^sub>s F;\n         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n         \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Q\\<^sub>L and effect"], ["proof (chain)\npicking this:\n  Q\\<^sub>L = EF (F, Q)\n  f \\<in>\\<^sub>f\\<^sub>s F", "have \"Q\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>Eff f, AC (f, F, \\<langle>f\\<rangle>Q)\\<rangle>\""], ["proof (prove)\nusing this:\n  Q\\<^sub>L = EF (F, Q)\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (1 subgoal):\n 1. Q\\<^sub>L \\<rightarrow>\\<^sub>L\n    \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>Q)\\<rangle>", "using L_transition.simps(2)"], ["proof (prove)\nusing this:\n  Q\\<^sub>L = EF (F, Q)\n  f \\<in>\\<^sub>f\\<^sub>s F\n  EF (?F, ?P) \\<rightarrow>\\<^sub>L ?\\<alpha>P' =\n  (\\<exists>f.\n      f \\<in>\\<^sub>f\\<^sub>s ?F \\<and>\n      ?\\<alpha>P' =\n      \\<langle>Eff f,AC (f, ?F, \\<langle>f\\<rangle>?P)\\<rangle>)\n\ngoal (1 subgoal):\n 1. Q\\<^sub>L \\<rightarrow>\\<^sub>L\n    \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>Q)\\<rangle>", "by blast"], ["proof (state)\nthis:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>Q)\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>Q)\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from bisim and effect"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot>[F] Q\n  f \\<in>\\<^sub>f\\<^sub>s F", "have \"L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P)) (AC (f, F, \\<langle>f\\<rangle>Q))\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot>[F] Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (1 subgoal):\n 1. L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P))\n     (AC (f, F, \\<langle>f\\<rangle>Q))", "using L_bisimilar.intros(2)"], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot>[F] Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<lbrakk>?P \\<sim>\\<cdot>[?F] ?Q; ?f \\<in>\\<^sub>f\\<^sub>s ?F\\<rbrakk>\n  \\<Longrightarrow> L_bisimilar (AC (?f, ?F, \\<langle>?f\\<rangle>?P))\n                     (AC (?f, ?F, \\<langle>?f\\<rangle>?Q))\n\ngoal (1 subgoal):\n 1. L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P))\n     (AC (f, F, \\<langle>f\\<rangle>Q))", "by blast"], ["proof (state)\nthis:\n  L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P))\n   (AC (f, F, \\<langle>f\\<rangle>Q))\n\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P))\n   (AC (f, F, \\<langle>f\\<rangle>Q))\n\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<alpha>\\<^sub>LP\\<^sub>L'"], ["proof (chain)\npicking this:\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>", "have \"\\<alpha>\\<^sub>L = Eff f\" and \"P\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>P)\""], ["proof (prove)\nusing this:\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<alpha>\\<^sub>L = Eff f &&&\n    P\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>P)", "by (metis bn_L_action.simps(2) residual_empty_bn_eq_iff)+"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>L = Eff f\n  P\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>P)\n\ngoal (2 subgoals):\n 1. \\<And>P F Q.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = EF (F, P); Q\\<^sub>L = EF (F, Q);\n        P \\<sim>\\<cdot>[F] Q\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>Q)\\<rangle>\n  L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P))\n   (AC (f, F, \\<langle>f\\<rangle>Q))\n  \\<alpha>\\<^sub>L = Eff f\n  P\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>P)", "show \"thesis\""], ["proof (prove)\nusing this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>Q)\\<rangle>\n  L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P))\n   (AC (f, F, \\<langle>f\\<rangle>Q))\n  \\<alpha>\\<^sub>L = Eff f\n  P\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>P)\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>\\<And>Q\\<^sub>L'. Q\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<Longrightarrow> L_bisimilar P\\<^sub>L' Q\\<^sub>L' \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\nusing this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>Q)\\<rangle>\n  L_bisimilar (AC (f, F, \\<langle>f\\<rangle>P))\n   (AC (f, F, \\<langle>f\\<rangle>Q))\n  \\<alpha>\\<^sub>L = Eff f\n  P\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>P)\n  \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n           \\<langle>\\<alpha>\\<^sub>L,?Q\\<^sub>L'\\<rangle>;\n   L_bisimilar P\\<^sub>L' ?Q\\<^sub>L'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix P F Q f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume P\\<^sub>L: \"P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P)\" and Q\\<^sub>L: \"Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)\" and bisim: \"P \\<sim>\\<cdot>[F] Q\" and effect: \"f \\<in>\\<^sub>f\\<^sub>s F\""], ["proof (state)\nthis:\n  P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P)\n  Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)\n  P \\<sim>\\<cdot>[F] Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "have \"finite (supp (\\<langle>f\\<rangle>Q, F, f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (\\<langle>f\\<rangle>Q, F, f))", "by (fact finite_supp)"], ["proof (state)\nthis:\n  finite (supp (\\<langle>f\\<rangle>Q, F, f))\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "with P\\<^sub>L and trans\\<^sub>L"], ["proof (chain)\npicking this:\n  P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P)\n  P\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\n  finite (supp (\\<langle>f\\<rangle>Q, F, f))", "obtain \\<alpha> P' where trans_P: \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\" and \\<alpha>\\<^sub>LP\\<^sub>L': \"\\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> = \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), P')\\<rangle>\" and fresh: \"bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\""], ["proof (prove)\nusing this:\n  P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P)\n  P\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\n  finite (supp (\\<langle>f\\<rangle>Q, F, f))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> P'.\n        \\<lbrakk>\\<langle>f\\<rangle>P \\<rightarrow>\n                 \\<langle>\\<alpha>,P'\\<rangle>;\n         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n         \\<langle>L_action.Act\n                   \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>;\n         bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transition_AC_strong)"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from bisim and effect and fresh and trans_P"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot>[F] Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "obtain Q' where trans_Q: \"\\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\" and bisim': \"P' \\<sim>\\<cdot>[L (\\<alpha>,F,f)] Q'\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot>[F] Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>\\<langle>f\\<rangle>Q \\<rightarrow>\n                 \\<langle>\\<alpha>,Q'\\<rangle>;\n         P' \\<sim>\\<cdot>[L (\\<alpha>, F, f)] Q'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis FL_bisimilar_simulation_step)"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  P' \\<sim>\\<cdot>[L (\\<alpha>, F, f)] Q'\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from fresh"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "have \"bn \\<alpha> \\<sharp>* (F, f)\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* (F, f)", "by (meson fresh_PairD(2) fresh_star_def)"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Q\\<^sub>L and trans_Q"], ["proof (chain)\npicking this:\n  Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)", "have trans_Q\\<^sub>L: \"Q\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), Q')\\<rangle>\""], ["proof (prove)\nusing this:\n  Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. Q\\<^sub>L \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>", "by (metis L_transition.simps(1))"], ["proof (state)\nthis:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from \\<alpha>\\<^sub>LP\\<^sub>L'"], ["proof (chain)\npicking this:\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>", "obtain p where p: \"(\\<alpha>\\<^sub>L,P\\<^sub>L') = p \\<bullet> (Act \\<alpha>, EF (L (\\<alpha>,F,f), P'))\" and supp_p: \"supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>\\<^sub>L\""], ["proof (prove)\nusing this:\n  \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(\\<alpha>\\<^sub>L, P\\<^sub>L') =\n                 p \\<bullet> (L_action.Act \\<alpha>,\n                              EF (L (\\<alpha>, F, f), P'));\n         supp p\n         \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>\\<^sub>L\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) bn_L_action.simps(1) residual_eq_iff_perm_renaming)"], ["proof (state)\nthis:\n  (\\<alpha>\\<^sub>L, P\\<^sub>L') =\n  p \\<bullet> (L_action.Act \\<alpha>, EF (L (\\<alpha>, F, f), P'))\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from supp_p and fresh and fresh\\<^sub>L and Q\\<^sub>L"], ["proof (chain)\npicking this:\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>\\<^sub>L\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L\n  Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)", "have \"supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\""], ["proof (prove)\nusing this:\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>\\<^sub>L\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L\n  Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "unfolding fresh_star_def"], ["proof (prove)\nusing this:\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>\\<^sub>L\n  \\<forall>a\\<in>bn \\<alpha>. a \\<sharp> (\\<langle>f\\<rangle>Q, F, f)\n  \\<forall>a\\<in>bn \\<alpha>\\<^sub>L. a \\<sharp> Q\\<^sub>L\n  Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>supp p. a \\<sharp> (\\<langle>f\\<rangle>Q, F, f)", "by (metis (no_types, hide_lams) Un_iff fresh_Pair fresh_def subsetCE supp_AC)"], ["proof (state)\nthis:\n  supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "have p_fQ: \"p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q\" and p_Ff: \"p \\<bullet> (F,f) = (F,f)\""], ["proof (prove)\nusing this:\n  supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q &&&\n    p \\<bullet> (F, f) = (F, f)", "by (simp add: fresh_star_def perm_supp_eq)+"], ["proof (state)\nthis:\n  p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q\n  p \\<bullet> (F, f) = (F, f)\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from p and p_Ff"], ["proof (chain)\npicking this:\n  (\\<alpha>\\<^sub>L, P\\<^sub>L') =\n  p \\<bullet> (L_action.Act \\<alpha>, EF (L (\\<alpha>, F, f), P'))\n  p \\<bullet> (F, f) = (F, f)", "have \"\\<alpha>\\<^sub>L = Act (p \\<bullet> \\<alpha>)\" and \"P\\<^sub>L' = EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\""], ["proof (prove)\nusing this:\n  (\\<alpha>\\<^sub>L, P\\<^sub>L') =\n  p \\<bullet> (L_action.Act \\<alpha>, EF (L (\\<alpha>, F, f), P'))\n  p \\<bullet> (F, f) = (F, f)\n\ngoal (1 subgoal):\n 1. \\<alpha>\\<^sub>L = L_action.Act (p \\<bullet> \\<alpha>) &&&\n    P\\<^sub>L' = EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')", "by auto"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>L = L_action.Act (p \\<bullet> \\<alpha>)\n  P\\<^sub>L' = EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  \\<alpha>\\<^sub>L = L_action.Act (p \\<bullet> \\<alpha>)\n  P\\<^sub>L' = EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Q\\<^sub>L and p_fQ and p_Ff"], ["proof (chain)\npicking this:\n  Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)\n  p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q\n  p \\<bullet> (F, f) = (F, f)", "have \"p \\<bullet> Q\\<^sub>L = Q\\<^sub>L\""], ["proof (prove)\nusing this:\n  Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q)\n  p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q\n  p \\<bullet> (F, f) = (F, f)\n\ngoal (1 subgoal):\n 1. p \\<bullet> Q\\<^sub>L = Q\\<^sub>L", "by simp"], ["proof (state)\nthis:\n  p \\<bullet> Q\\<^sub>L = Q\\<^sub>L\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "with trans_Q\\<^sub>L"], ["proof (chain)\npicking this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>\n  p \\<bullet> Q\\<^sub>L = Q\\<^sub>L", "have \"Q\\<^sub>L \\<rightarrow>\\<^sub>L p \\<bullet> \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), Q')\\<rangle>\""], ["proof (prove)\nusing this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>\n  p \\<bullet> Q\\<^sub>L = Q\\<^sub>L\n\ngoal (1 subgoal):\n 1. Q\\<^sub>L \\<rightarrow>\\<^sub>L\n    p \\<bullet> \\<langle>L_action.Act\n                          \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>", "by (metis L_transform.transition_eqvt)"], ["proof (state)\nthis:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<langle>L_action.Act\n                        \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<langle>L_action.Act\n                        \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>", "have \"Q\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>Act (p \\<bullet> \\<alpha>), EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q')\\<rangle>\""], ["proof (prove)\nusing this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<langle>L_action.Act\n                        \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>\n\ngoal (1 subgoal):\n 1. Q\\<^sub>L \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act\n              (p \\<bullet> \\<alpha>),EF\n(L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q')\\<rangle>", "using p_Ff"], ["proof (prove)\nusing this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  p \\<bullet> \\<langle>L_action.Act\n                        \\<alpha>,EF (L (\\<alpha>, F, f), Q')\\<rangle>\n  p \\<bullet> (F, f) = (F, f)\n\ngoal (1 subgoal):\n 1. Q\\<^sub>L \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act\n              (p \\<bullet> \\<alpha>),EF\n(L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q')\\<rangle>", "by simp"], ["proof (state)\nthis:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> Q')\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> Q')\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "from p_Ff"], ["proof (chain)\npicking this:\n  p \\<bullet> (F, f) = (F, f)", "have \"p \\<bullet> F = F\" and \"p \\<bullet> f = f\""], ["proof (prove)\nusing this:\n  p \\<bullet> (F, f) = (F, f)\n\ngoal (1 subgoal):\n 1. p \\<bullet> F = F &&& p \\<bullet> f = f", "by simp+"], ["proof (state)\nthis:\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "with bisim'"], ["proof (chain)\npicking this:\n  P' \\<sim>\\<cdot>[L (\\<alpha>, F, f)] Q'\n  p \\<bullet> F = F\n  p \\<bullet> f = f", "have \"(p \\<bullet> P') \\<sim>\\<cdot>[L (p \\<bullet> \\<alpha>, F, f)] (p \\<bullet> Q')\""], ["proof (prove)\nusing this:\n  P' \\<sim>\\<cdot>[L (\\<alpha>, F, f)] Q'\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n\ngoal (1 subgoal):\n 1. p \\<bullet> P' \\<sim>\\<cdot>[L (p \\<bullet> \\<alpha>, F,\n                                    f)] p \\<bullet> Q'", "by (metis FL_bisimilar_eqvt L_eqvt')"], ["proof (state)\nthis:\n  p \\<bullet> P' \\<sim>\\<cdot>[L (p \\<bullet> \\<alpha>, F,\n                                  f)] p \\<bullet> Q'\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  p \\<bullet> P' \\<sim>\\<cdot>[L (p \\<bullet> \\<alpha>, F,\n                                  f)] p \\<bullet> Q'", "have \"L_bisimilar (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')) (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q'))\""], ["proof (prove)\nusing this:\n  p \\<bullet> P' \\<sim>\\<cdot>[L (p \\<bullet> \\<alpha>, F,\n                                  f)] p \\<bullet> Q'\n\ngoal (1 subgoal):\n 1. L_bisimilar (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P'))\n     (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q'))", "by (metis L_bisimilar.intros(1))"], ["proof (state)\nthis:\n  L_bisimilar (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P'))\n   (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q'))\n\ngoal (1 subgoal):\n 1. \\<And>P F Q f.\n       \\<lbrakk>\\<And>Q\\<^sub>L'.\n                   \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>;\n                    L_bisimilar P\\<^sub>L' Q\\<^sub>L'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        P\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>P);\n        Q\\<^sub>L = AC (f, F, \\<langle>f\\<rangle>Q); P \\<sim>\\<cdot>[F] Q;\n        f \\<in>\\<^sub>f\\<^sub>s F\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  \\<alpha>\\<^sub>L = L_action.Act (p \\<bullet> \\<alpha>)\n  P\\<^sub>L' = EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> Q')\\<rangle>\n  L_bisimilar (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P'))\n   (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q'))", "show thesis"], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>L = L_action.Act (p \\<bullet> \\<alpha>)\n  P\\<^sub>L' = EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> Q')\\<rangle>\n  L_bisimilar (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P'))\n   (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q'))\n\ngoal (1 subgoal):\n 1. thesis", "using \\<open>\\<And>Q\\<^sub>L'. Q\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<Longrightarrow> L_bisimilar P\\<^sub>L' Q\\<^sub>L' \\<Longrightarrow> thesis\\<close>"], ["proof (prove)\nusing this:\n  \\<alpha>\\<^sub>L = L_action.Act (p \\<bullet> \\<alpha>)\n  P\\<^sub>L' = EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P')\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act\n            (p \\<bullet> \\<alpha>),EF (L (p \\<bullet> \\<alpha>, F, f),\n p \\<bullet> Q')\\<rangle>\n  L_bisimilar (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> P'))\n   (EF (L (p \\<bullet> \\<alpha>, F, f), p \\<bullet> Q'))\n  \\<lbrakk>Q\\<^sub>L \\<rightarrow>\\<^sub>L\n           \\<langle>\\<alpha>\\<^sub>L,?Q\\<^sub>L'\\<rangle>;\n   L_bisimilar P\\<^sub>L' ?Q\\<^sub>L'\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>\n  L_bisimilar P\\<^sub>L' Q\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<And>P\\<^sub>L Q\\<^sub>L \\<alpha>\\<^sub>L P\\<^sub>L'.\n       \\<lbrakk>L_bisimilar P\\<^sub>L Q\\<^sub>L;\n        bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L;\n        P\\<^sub>L \\<rightarrow>\\<^sub>L\n        \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q\\<^sub>L'.\n                            Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                            \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n                            L_bisimilar P\\<^sub>L' Q\\<^sub>L'", "then"], ["proof (chain)\npicking this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>\n  L_bisimilar P\\<^sub>L' Q\\<^sub>L'", "show \"\\<exists>Q\\<^sub>L'. Q\\<^sub>L \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and> L_bisimilar P\\<^sub>L' Q\\<^sub>L'\""], ["proof (prove)\nusing this:\n  Q\\<^sub>L \\<rightarrow>\\<^sub>L\n  \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle>\n  L_bisimilar P\\<^sub>L' Q\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<exists>Q\\<^sub>L'.\n       Q\\<^sub>L \\<rightarrow>\\<^sub>L\n       \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n       L_bisimilar P\\<^sub>L' Q\\<^sub>L'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Q\\<^sub>L'.\n     Q\\<^sub>L \\<rightarrow>\\<^sub>L\n     \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n     L_bisimilar P\\<^sub>L' Q\\<^sub>L'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P\\<^sub>L Q\\<^sub>L.\n     L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>L P\\<^sub>L'.\n         bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L \\<longrightarrow>\n         P\\<^sub>L \\<rightarrow>\\<^sub>L\n         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q\\<^sub>L'.\n             Q\\<^sub>L \\<rightarrow>\\<^sub>L\n             \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n             L_bisimilar P\\<^sub>L' Q\\<^sub>L'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n            Q \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n    (\\<forall>P Q.\n        L_bisimilar P Q \\<longrightarrow>\n        (\\<forall>\\<alpha> P'.\n            bn \\<alpha> \\<sharp>* Q \\<longrightarrow>\n            P \\<rightarrow>\\<^sub>L\n            \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q'.\n                Q \\<rightarrow>\\<^sub>L \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                L_bisimilar P' Q')))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>P\\<^sub>L Q\\<^sub>L.\n     L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n         Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)\n  \\<forall>P\\<^sub>L Q\\<^sub>L.\n     L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>L P\\<^sub>L'.\n         bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L \\<longrightarrow>\n         P\\<^sub>L \\<rightarrow>\\<^sub>L\n         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q\\<^sub>L'.\n             Q\\<^sub>L \\<rightarrow>\\<^sub>L\n             \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n             L_bisimilar P\\<^sub>L' Q\\<^sub>L'))", "show \"?S \\<and> ?T\""], ["proof (prove)\nusing this:\n  \\<forall>P\\<^sub>L Q\\<^sub>L.\n     L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n     (\\<forall>\\<phi>.\n         P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n         Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)\n  \\<forall>P\\<^sub>L Q\\<^sub>L.\n     L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n     (\\<forall>\\<alpha>\\<^sub>L P\\<^sub>L'.\n         bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L \\<longrightarrow>\n         P\\<^sub>L \\<rightarrow>\\<^sub>L\n         \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> \\<longrightarrow>\n         (\\<exists>Q\\<^sub>L'.\n             Q\\<^sub>L \\<rightarrow>\\<^sub>L\n             \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n             L_bisimilar P\\<^sub>L' Q\\<^sub>L'))\n\ngoal (1 subgoal):\n 1. (\\<forall>P\\<^sub>L Q\\<^sub>L.\n        L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n        (\\<forall>\\<phi>.\n            P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n            Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n    (\\<forall>P\\<^sub>L Q\\<^sub>L.\n        L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n        (\\<forall>\\<alpha>\\<^sub>L P\\<^sub>L'.\n            bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L \\<longrightarrow>\n            P\\<^sub>L \\<rightarrow>\\<^sub>L\n            \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> \\<longrightarrow>\n            (\\<exists>Q\\<^sub>L'.\n                Q\\<^sub>L \\<rightarrow>\\<^sub>L\n                \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n                L_bisimilar P\\<^sub>L' Q\\<^sub>L')))", "by metis"], ["proof (state)\nthis:\n  (\\<forall>P\\<^sub>L Q\\<^sub>L.\n      L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n      (\\<forall>\\<phi>.\n          P\\<^sub>L \\<turnstile>\\<^sub>L \\<phi> \\<longrightarrow>\n          Q\\<^sub>L \\<turnstile>\\<^sub>L \\<phi>)) \\<and>\n  (\\<forall>P\\<^sub>L Q\\<^sub>L.\n      L_bisimilar P\\<^sub>L Q\\<^sub>L \\<longrightarrow>\n      (\\<forall>\\<alpha>\\<^sub>L P\\<^sub>L'.\n          bn \\<alpha>\\<^sub>L \\<sharp>* Q\\<^sub>L \\<longrightarrow>\n          P\\<^sub>L \\<rightarrow>\\<^sub>L\n          \\<langle>\\<alpha>\\<^sub>L,P\\<^sub>L'\\<rangle> \\<longrightarrow>\n          (\\<exists>Q\\<^sub>L'.\n              Q\\<^sub>L \\<rightarrow>\\<^sub>L\n              \\<langle>\\<alpha>\\<^sub>L,Q\\<^sub>L'\\<rangle> \\<and>\n              L_bisimilar P\\<^sub>L' Q\\<^sub>L')))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition invL_FL_bisimilar :: \"'effect first \\<Rightarrow> 'state \\<Rightarrow> 'state \\<Rightarrow> bool\" where\n    \"invL_FL_bisimilar F P Q \\<equiv> EF (F,P) \\<sim>\\<cdot>\\<^sub>L EF(F,Q)\""], ["", "lemma invL_FL_bisimilar_is_L_bisimulation: \"is_L_bisimulation invL_FL_bisimilar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_L_bisimulation invL_FL_bisimilar", "unfolding is_L_bisimulation_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F.\n       symp (invL_FL_bisimilar F) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F.\n       symp (invL_FL_bisimilar F) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "fix F"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F.\n       symp (invL_FL_bisimilar F) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "have \"symp (invL_FL_bisimilar F)\" (is ?R)"], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (invL_FL_bisimilar F)", "by (metis L_transform.bisimilar_symp invL_FL_bisimilar_def symp_def)"], ["proof (state)\nthis:\n  symp (invL_FL_bisimilar F)\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       symp (invL_FL_bisimilar F) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "moreover"], ["proof (state)\nthis:\n  symp (invL_FL_bisimilar F)\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       symp (invL_FL_bisimilar F) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "have \"\\<forall>P Q. invL_FL_bisimilar F P Q \\<longrightarrow> (\\<forall>f. f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow> (\\<forall>\\<phi>. \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))\" (is ?S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q.\n       invL_FL_bisimilar F P Q \\<longrightarrow>\n       (\\<forall>f.\n           f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n           (\\<forall>\\<phi>.\n               \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow>\n               \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "fix P Q f \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "assume bisim: \"invL_FL_bisimilar F P Q\" and effect: \"f \\<in>\\<^sub>f\\<^sub>s F\" and satisfies: \"\\<langle>f\\<rangle>P \\<turnstile> \\<phi>\""], ["proof (state)\nthis:\n  invL_FL_bisimilar F P Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "from bisim"], ["proof (chain)\npicking this:\n  invL_FL_bisimilar F P Q", "have \"EF (F,P) \\<sim>\\<cdot>\\<^sub>L EF (F,Q)\""], ["proof (prove)\nusing this:\n  invL_FL_bisimilar F P Q\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)", "by (metis invL_FL_bisimilar_def)"], ["proof (state)\nthis:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "moreover"], ["proof (state)\nthis:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "have \"bn (Eff f) \\<sharp>* EF (F,Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn (Eff f) \\<sharp>* EF (F, Q)", "by (simp add: fresh_star_def)"], ["proof (state)\nthis:\n  bn (Eff f) \\<sharp>* EF (F, Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "moreover"], ["proof (state)\nthis:\n  bn (Eff f) \\<sharp>* EF (F, Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "from effect"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>f\\<^sub>s F", "have \"EF (F,P) \\<rightarrow>\\<^sub>L \\<langle>Eff f, AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>", "by (metis L_transition.simps(2))"], ["proof (state)\nthis:\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n  bn (Eff f) \\<sharp>* EF (F, Q)\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>", "obtain Q\\<^sub>L' where trans: \"EF (F,Q) \\<rightarrow>\\<^sub>L \\<langle>Eff f, Q\\<^sub>L'\\<rangle>\" and L_bisim: \"AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L'\""], ["proof (prove)\nusing this:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n  bn (Eff f) \\<sharp>* EF (F, Q)\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>Q\\<^sub>L'.\n        \\<lbrakk>EF (F, Q) \\<rightarrow>\\<^sub>L\n                 \\<langle>Eff f,Q\\<^sub>L'\\<rangle>;\n         AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L\n         Q\\<^sub>L'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transform.bisimilar_simulation_step)"], ["proof (state)\nthis:\n  EF (F, Q) \\<rightarrow>\\<^sub>L \\<langle>Eff f,Q\\<^sub>L'\\<rangle>\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "from trans"], ["proof (chain)\npicking this:\n  EF (F, Q) \\<rightarrow>\\<^sub>L \\<langle>Eff f,Q\\<^sub>L'\\<rangle>", "obtain f' where \"\\<langle>Eff f :: ('act,'effect) L_action, Q\\<^sub>L'\\<rangle> = \\<langle>Eff f', AC (f', F, \\<langle>f'\\<rangle>Q)\\<rangle>\""], ["proof (prove)\nusing this:\n  EF (F, Q) \\<rightarrow>\\<^sub>L \\<langle>Eff f,Q\\<^sub>L'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<langle>Eff f,Q\\<^sub>L'\\<rangle> =\n        \\<langle>Eff f',AC (f', F,\n                            \\<langle>f'\\<rangle>Q)\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transition.simps(2))"], ["proof (state)\nthis:\n  \\<langle>Eff f,Q\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f',AC (f', F, \\<langle>f'\\<rangle>Q)\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "then"], ["proof (chain)\npicking this:\n  \\<langle>Eff f,Q\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f',AC (f', F, \\<langle>f'\\<rangle>Q)\\<rangle>", "have Q\\<^sub>L': \"Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)\""], ["proof (prove)\nusing this:\n  \\<langle>Eff f,Q\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f',AC (f', F, \\<langle>f'\\<rangle>Q)\\<rangle>\n\ngoal (1 subgoal):\n 1. Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)", "by (metis L_action.inject(2) bn_L_action.simps(2) residual_empty_bn_eq_iff)"], ["proof (state)\nthis:\n  Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "from satisfies"], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>P \\<turnstile> \\<phi>", "have \"AC (f, F, \\<langle>f\\<rangle>P) \\<turnstile>\\<^sub>L \\<phi>\""], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. AC (f, F, \\<langle>f\\<rangle>P) \\<turnstile>\\<^sub>L \\<phi>", "by (metis L_satisfies.simps(1))"], ["proof (state)\nthis:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<turnstile>\\<^sub>L \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "with L_bisim and Q\\<^sub>L'"], ["proof (chain)\npicking this:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L'\n  Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)\n  AC (f, F, \\<langle>f\\<rangle>P) \\<turnstile>\\<^sub>L \\<phi>", "have \"AC (f, F, \\<langle>f\\<rangle>Q) \\<turnstile>\\<^sub>L \\<phi>\""], ["proof (prove)\nusing this:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L'\n  Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)\n  AC (f, F, \\<langle>f\\<rangle>P) \\<turnstile>\\<^sub>L \\<phi>\n\ngoal (1 subgoal):\n 1. AC (f, F, \\<langle>f\\<rangle>Q) \\<turnstile>\\<^sub>L \\<phi>", "by (metis L_transform.bisimilar_is_bisimulation L_transform.is_bisimulation_def)"], ["proof (state)\nthis:\n  AC (f, F, \\<langle>f\\<rangle>Q) \\<turnstile>\\<^sub>L \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<phi>.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\\<rbrakk>\n       \\<Longrightarrow> \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "then"], ["proof (chain)\npicking this:\n  AC (f, F, \\<langle>f\\<rangle>Q) \\<turnstile>\\<^sub>L \\<phi>", "show \"\\<langle>f\\<rangle>Q \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  AC (f, F, \\<langle>f\\<rangle>Q) \\<turnstile>\\<^sub>L \\<phi>\n\ngoal (1 subgoal):\n 1. \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "by (metis L_satisfies.simps(1))"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     invL_FL_bisimilar F P Q \\<longrightarrow>\n     (\\<forall>f.\n         f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n         (\\<forall>\\<phi>.\n             \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow>\n             \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       symp (invL_FL_bisimilar F) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "moreover"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     invL_FL_bisimilar F P Q \\<longrightarrow>\n     (\\<forall>f.\n         f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n         (\\<forall>\\<phi>.\n             \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow>\n             \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       symp (invL_FL_bisimilar F) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "have \"\\<forall>P Q. invL_FL_bisimilar F P Q \\<longrightarrow> (\\<forall>f. f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow> (\\<forall>\\<alpha> P'. bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f) \\<longrightarrow>\n        \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow> (\\<exists>Q'. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q')))\" (is ?T)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P Q.\n       invL_FL_bisimilar F P Q \\<longrightarrow>\n       (\\<forall>f.\n           f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n           (\\<forall>\\<alpha> P'.\n               bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\nf) \\<longrightarrow>\n               \\<langle>f\\<rangle>P \\<rightarrow>\n               \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n               (\\<exists>Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                   invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q')))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "fix P Q f \\<alpha> P'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "assume bisim: \"invL_FL_bisimilar F P Q\" and effect: \"f \\<in>\\<^sub>f\\<^sub>s F\" and fresh: \"bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\" and trans: \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (state)\nthis:\n  invL_FL_bisimilar F P Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from bisim"], ["proof (chain)\npicking this:\n  invL_FL_bisimilar F P Q", "have \"EF (F,P) \\<sim>\\<cdot>\\<^sub>L EF (F,Q)\""], ["proof (prove)\nusing this:\n  invL_FL_bisimilar F P Q\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)", "by (metis invL_FL_bisimilar_def)"], ["proof (state)\nthis:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "moreover"], ["proof (state)\nthis:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "have \"bn (Eff f) \\<sharp>* EF (F,Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bn (Eff f) \\<sharp>* EF (F, Q)", "by (simp add: fresh_star_def)"], ["proof (state)\nthis:\n  bn (Eff f) \\<sharp>* EF (F, Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "moreover"], ["proof (state)\nthis:\n  bn (Eff f) \\<sharp>* EF (F, Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from effect"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>f\\<^sub>s F", "have \"EF (F,P) \\<rightarrow>\\<^sub>L \\<langle>Eff f, AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<rightarrow>\\<^sub>L\n    \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>", "by (metis L_transition.simps(2))"], ["proof (state)\nthis:\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "ultimately"], ["proof (chain)\npicking this:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n  bn (Eff f) \\<sharp>* EF (F, Q)\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>", "obtain Q\\<^sub>L' where trans\\<^sub>L: \"EF (F,Q) \\<rightarrow>\\<^sub>L \\<langle>Eff f, Q\\<^sub>L'\\<rangle>\" and L_bisim: \"AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L'\""], ["proof (prove)\nusing this:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n  bn (Eff f) \\<sharp>* EF (F, Q)\n  EF (F, P) \\<rightarrow>\\<^sub>L\n  \\<langle>Eff f,AC (f, F, \\<langle>f\\<rangle>P)\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>Q\\<^sub>L'.\n        \\<lbrakk>EF (F, Q) \\<rightarrow>\\<^sub>L\n                 \\<langle>Eff f,Q\\<^sub>L'\\<rangle>;\n         AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L\n         Q\\<^sub>L'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transform.bisimilar_simulation_step)"], ["proof (state)\nthis:\n  EF (F, Q) \\<rightarrow>\\<^sub>L \\<langle>Eff f,Q\\<^sub>L'\\<rangle>\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L'\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from trans\\<^sub>L"], ["proof (chain)\npicking this:\n  EF (F, Q) \\<rightarrow>\\<^sub>L \\<langle>Eff f,Q\\<^sub>L'\\<rangle>", "obtain f' where \"\\<langle>Eff f :: ('act,'effect) L_action, Q\\<^sub>L'\\<rangle> = \\<langle>Eff f', AC (f', F, \\<langle>f'\\<rangle>Q)\\<rangle>\""], ["proof (prove)\nusing this:\n  EF (F, Q) \\<rightarrow>\\<^sub>L \\<langle>Eff f,Q\\<^sub>L'\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<langle>Eff f,Q\\<^sub>L'\\<rangle> =\n        \\<langle>Eff f',AC (f', F,\n                            \\<langle>f'\\<rangle>Q)\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transition.simps(2))"], ["proof (state)\nthis:\n  \\<langle>Eff f,Q\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f',AC (f', F, \\<langle>f'\\<rangle>Q)\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "then"], ["proof (chain)\npicking this:\n  \\<langle>Eff f,Q\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f',AC (f', F, \\<langle>f'\\<rangle>Q)\\<rangle>", "have Q\\<^sub>L': \"Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)\""], ["proof (prove)\nusing this:\n  \\<langle>Eff f,Q\\<^sub>L'\\<rangle> =\n  \\<langle>Eff f',AC (f', F, \\<langle>f'\\<rangle>Q)\\<rangle>\n\ngoal (1 subgoal):\n 1. Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)", "by (metis L_action.inject(2) bn_L_action.simps(2) residual_empty_bn_eq_iff)"], ["proof (state)\nthis:\n  Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from L_bisim and Q\\<^sub>L'"], ["proof (chain)\npicking this:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L'\n  Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)", "have \"AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L AC (f, F, \\<langle>f\\<rangle>Q)\""], ["proof (prove)\nusing this:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L'\n  Q\\<^sub>L' = AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L\n    AC (f, F, \\<langle>f\\<rangle>Q)", "by metis"], ["proof (state)\nthis:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L\n  AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "moreover"], ["proof (state)\nthis:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L\n  AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from fresh"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "have \"bn (Act \\<alpha>) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>Q)\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. bn (L_action.Act \\<alpha>) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>Q)", "by (simp add: fresh_def fresh_star_def supp_Pair)"], ["proof (state)\nthis:\n  bn (L_action.Act \\<alpha>) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "moreover"], ["proof (state)\nthis:\n  bn (L_action.Act \\<alpha>) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>Q)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from fresh"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "have \"bn \\<alpha> \\<sharp>* (F, f)\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* (F, f)", "by (simp add: fresh_star_Pair)"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "with trans"], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)", "have \"AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L \\<langle>Act \\<alpha>, EF (L (\\<alpha>,F,f), P')\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n    \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>", "by (metis L_transition.simps(1))"], ["proof (state)\nthis:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "ultimately"], ["proof (chain)\npicking this:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L\n  AC (f, F, \\<langle>f\\<rangle>Q)\n  bn (L_action.Act \\<alpha>) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>Q)\n  AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>", "obtain Q\\<^sub>L'' where trans\\<^sub>L': \"AC (f, F, \\<langle>f\\<rangle>Q) \\<rightarrow>\\<^sub>L \\<langle>Act \\<alpha>, Q\\<^sub>L''\\<rangle>\" and L_bisim': \"EF (L (\\<alpha>,F,f), P') \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L''\""], ["proof (prove)\nusing this:\n  AC (f, F, \\<langle>f\\<rangle>P) \\<sim>\\<cdot>\\<^sub>L\n  AC (f, F, \\<langle>f\\<rangle>Q)\n  bn (L_action.Act \\<alpha>) \\<sharp>* AC (f, F, \\<langle>f\\<rangle>Q)\n  AC (f, F, \\<langle>f\\<rangle>P) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,EF (L (\\<alpha>, F, f), P')\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>Q\\<^sub>L''.\n        \\<lbrakk>AC (f, F, \\<langle>f\\<rangle>Q) \\<rightarrow>\\<^sub>L\n                 \\<langle>L_action.Act \\<alpha>,Q\\<^sub>L''\\<rangle>;\n         EF (L (\\<alpha>, F, f), P') \\<sim>\\<cdot>\\<^sub>L\n         Q\\<^sub>L''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transform.bisimilar_simulation_step)"], ["proof (state)\nthis:\n  AC (f, F, \\<langle>f\\<rangle>Q) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,Q\\<^sub>L''\\<rangle>\n  EF (L (\\<alpha>, F, f), P') \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L''\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "have \"finite (supp (\\<langle>f\\<rangle>Q, F, f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (\\<langle>f\\<rangle>Q, F, f))", "by (fact finite_supp)"], ["proof (state)\nthis:\n  finite (supp (\\<langle>f\\<rangle>Q, F, f))\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "with trans\\<^sub>L'"], ["proof (chain)\npicking this:\n  AC (f, F, \\<langle>f\\<rangle>Q) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,Q\\<^sub>L''\\<rangle>\n  finite (supp (\\<langle>f\\<rangle>Q, F, f))", "obtain \\<alpha>' Q' where trans': \"\\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>',Q'\\<rangle>\" and alpha: \"\\<langle>Act \\<alpha> :: ('act,'effect) L_action, Q\\<^sub>L''\\<rangle> = \\<langle>Act \\<alpha>', EF (L (\\<alpha>',F,f), Q')\\<rangle>\" and fresh': \"bn \\<alpha>' \\<sharp>* (\\<langle>f\\<rangle>Q, F,f)\""], ["proof (prove)\nusing this:\n  AC (f, F, \\<langle>f\\<rangle>Q) \\<rightarrow>\\<^sub>L\n  \\<langle>L_action.Act \\<alpha>,Q\\<^sub>L''\\<rangle>\n  finite (supp (\\<langle>f\\<rangle>Q, F, f))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>' Q'.\n        \\<lbrakk>\\<langle>f\\<rangle>Q \\<rightarrow>\n                 \\<langle>\\<alpha>',Q'\\<rangle>;\n         \\<langle>L_action.Act \\<alpha>,Q\\<^sub>L''\\<rangle> =\n         \\<langle>L_action.Act\n                   \\<alpha>',EF (L (\\<alpha>', F, f), Q')\\<rangle>;\n         bn \\<alpha>' \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis L_transition_AC_strong)"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>',Q'\\<rangle>\n  \\<langle>L_action.Act \\<alpha>,Q\\<^sub>L''\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>',EF (L (\\<alpha>', F, f), Q')\\<rangle>\n  bn \\<alpha>' \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from alpha"], ["proof (chain)\npicking this:\n  \\<langle>L_action.Act \\<alpha>,Q\\<^sub>L''\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>',EF (L (\\<alpha>', F, f), Q')\\<rangle>", "obtain p where p: \"(Act \\<alpha> :: ('act,'effect) L_action, Q\\<^sub>L'') = p \\<bullet> (Act \\<alpha>', EF (L (\\<alpha>',F,f), Q'))\" and supp_p: \"supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\""], ["proof (prove)\nusing this:\n  \\<langle>L_action.Act \\<alpha>,Q\\<^sub>L''\\<rangle> =\n  \\<langle>L_action.Act \\<alpha>',EF (L (\\<alpha>', F, f), Q')\\<rangle>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>(L_action.Act \\<alpha>, Q\\<^sub>L'') =\n                 p \\<bullet> (L_action.Act \\<alpha>',\n                              EF (L (\\<alpha>', F, f), Q'));\n         supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Un_commute bn_L_action.simps(1) residual_eq_iff_perm_renaming)"], ["proof (state)\nthis:\n  (L_action.Act \\<alpha>, Q\\<^sub>L'') =\n  p \\<bullet> (L_action.Act \\<alpha>', EF (L (\\<alpha>', F, f), Q'))\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from supp_p and fresh and fresh'"], ["proof (chain)\npicking this:\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  bn \\<alpha>' \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "have \"supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F,f)\""], ["proof (prove)\nusing this:\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  bn \\<alpha>' \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "unfolding fresh_star_def"], ["proof (prove)\nusing this:\n  supp p \\<subseteq> bn \\<alpha> \\<union> bn \\<alpha>'\n  \\<forall>a\\<in>bn \\<alpha>. a \\<sharp> (\\<langle>f\\<rangle>Q, F, f)\n  \\<forall>a\\<in>bn \\<alpha>'. a \\<sharp> (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>supp p. a \\<sharp> (\\<langle>f\\<rangle>Q, F, f)", "by (metis (no_types, hide_lams) Un_iff subsetCE)"], ["proof (state)\nthis:\n  supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "then"], ["proof (chain)\npicking this:\n  supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "have p_fQ: \"p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q\" and p_F: \"p \\<bullet> F = F\" and p_f: \"p \\<bullet> f = f\""], ["proof (prove)\nusing this:\n  supp p \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q &&&\n    p \\<bullet> F = F &&& p \\<bullet> f = f", "by (simp add: fresh_star_def perm_supp_eq)+"], ["proof (state)\nthis:\n  p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from p and p_F and p_f"], ["proof (chain)\npicking this:\n  (L_action.Act \\<alpha>, Q\\<^sub>L'') =\n  p \\<bullet> (L_action.Act \\<alpha>', EF (L (\\<alpha>', F, f), Q'))\n  p \\<bullet> F = F\n  p \\<bullet> f = f", "have p_\\<alpha>': \"p \\<bullet> \\<alpha>' = \\<alpha>\" and Q\\<^sub>L'': \"Q\\<^sub>L'' = EF (L (p \\<bullet> \\<alpha>', F, f), p \\<bullet> Q')\""], ["proof (prove)\nusing this:\n  (L_action.Act \\<alpha>, Q\\<^sub>L'') =\n  p \\<bullet> (L_action.Act \\<alpha>', EF (L (\\<alpha>', F, f), Q'))\n  p \\<bullet> F = F\n  p \\<bullet> f = f\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<alpha>' = \\<alpha> &&&\n    Q\\<^sub>L'' = EF (L (p \\<bullet> \\<alpha>', F, f), p \\<bullet> Q')", "by auto"], ["proof (state)\nthis:\n  p \\<bullet> \\<alpha>' = \\<alpha>\n  Q\\<^sub>L'' = EF (L (p \\<bullet> \\<alpha>', F, f), p \\<bullet> Q')\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from trans' and p_fQ and p_\\<alpha>'"], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>',Q'\\<rangle>\n  p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q\n  p \\<bullet> \\<alpha>' = \\<alpha>", "have \"\\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>, p \\<bullet> Q'\\<rangle>\""], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>',Q'\\<rangle>\n  p \\<bullet> \\<langle>f\\<rangle>Q = \\<langle>f\\<rangle>Q\n  p \\<bullet> \\<alpha>' = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<langle>f\\<rangle>Q \\<rightarrow>\n    \\<langle>\\<alpha>,p \\<bullet> Q'\\<rangle>", "by (metis transition_eqvt')"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,p \\<bullet> Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "moreover"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,p \\<bullet> Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "from L_bisim' and Q\\<^sub>L'' and p_\\<alpha>'"], ["proof (chain)\npicking this:\n  EF (L (\\<alpha>, F, f), P') \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L''\n  Q\\<^sub>L'' = EF (L (p \\<bullet> \\<alpha>', F, f), p \\<bullet> Q')\n  p \\<bullet> \\<alpha>' = \\<alpha>", "have \"invL_FL_bisimilar (L (\\<alpha>,F,f)) P' (p \\<bullet> Q')\""], ["proof (prove)\nusing this:\n  EF (L (\\<alpha>, F, f), P') \\<sim>\\<cdot>\\<^sub>L Q\\<^sub>L''\n  Q\\<^sub>L'' = EF (L (p \\<bullet> \\<alpha>', F, f), p \\<bullet> Q')\n  p \\<bullet> \\<alpha>' = \\<alpha>\n\ngoal (1 subgoal):\n 1. invL_FL_bisimilar (L (\\<alpha>, F, f)) P' (p \\<bullet> Q')", "by (metis invL_FL_bisimilar_def)"], ["proof (state)\nthis:\n  invL_FL_bisimilar (L (\\<alpha>, F, f)) P' (p \\<bullet> Q')\n\ngoal (1 subgoal):\n 1. \\<And>P Q f \\<alpha> P'.\n       \\<lbrakk>invL_FL_bisimilar F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n        bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n        \\<langle>f\\<rangle>P \\<rightarrow>\n        \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Q'.\n                            \\<langle>f\\<rangle>Q \\<rightarrow>\n                            \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                            invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,p \\<bullet> Q'\\<rangle>\n  invL_FL_bisimilar (L (\\<alpha>, F, f)) P' (p \\<bullet> Q')", "show \"\\<exists>Q'. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> invL_FL_bisimilar (L (\\<alpha>,F,f)) P' Q'\""], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,p \\<bullet> Q'\\<rangle>\n  invL_FL_bisimilar (L (\\<alpha>, F, f)) P' (p \\<bullet> Q')\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow>\n       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'", "by metis"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n     invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>P Q.\n     invL_FL_bisimilar F P Q \\<longrightarrow>\n     (\\<forall>f.\n         f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n         (\\<forall>\\<alpha> P'.\n             bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n                                    f) \\<longrightarrow>\n             \\<langle>f\\<rangle>P \\<rightarrow>\n             \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n             (\\<exists>Q'.\n                 \\<langle>f\\<rangle>Q \\<rightarrow>\n                 \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                 invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q')))\n\ngoal (1 subgoal):\n 1. \\<And>F.\n       symp (invL_FL_bisimilar F) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           invL_FL_bisimilar F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "ultimately"], ["proof (chain)\npicking this:\n  symp (invL_FL_bisimilar F)\n  \\<forall>P Q.\n     invL_FL_bisimilar F P Q \\<longrightarrow>\n     (\\<forall>f.\n         f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n         (\\<forall>\\<phi>.\n             \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow>\n             \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))\n  \\<forall>P Q.\n     invL_FL_bisimilar F P Q \\<longrightarrow>\n     (\\<forall>f.\n         f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n         (\\<forall>\\<alpha> P'.\n             bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n                                    f) \\<longrightarrow>\n             \\<langle>f\\<rangle>P \\<rightarrow>\n             \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n             (\\<exists>Q'.\n                 \\<langle>f\\<rangle>Q \\<rightarrow>\n                 \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                 invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q')))", "show \"?R \\<and> ?S \\<and> ?T\""], ["proof (prove)\nusing this:\n  symp (invL_FL_bisimilar F)\n  \\<forall>P Q.\n     invL_FL_bisimilar F P Q \\<longrightarrow>\n     (\\<forall>f.\n         f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n         (\\<forall>\\<phi>.\n             \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow>\n             \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))\n  \\<forall>P Q.\n     invL_FL_bisimilar F P Q \\<longrightarrow>\n     (\\<forall>f.\n         f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n         (\\<forall>\\<alpha> P'.\n             bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n                                    f) \\<longrightarrow>\n             \\<langle>f\\<rangle>P \\<rightarrow>\n             \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n             (\\<exists>Q'.\n                 \\<langle>f\\<rangle>Q \\<rightarrow>\n                 \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                 invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q')))\n\ngoal (1 subgoal):\n 1. symp (invL_FL_bisimilar F) \\<and>\n    (\\<forall>P Q.\n        invL_FL_bisimilar F P Q \\<longrightarrow>\n        (\\<forall>f.\n            f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n            (\\<forall>\\<phi>.\n                \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow>\n                \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n    (\\<forall>P Q.\n        invL_FL_bisimilar F P Q \\<longrightarrow>\n        (\\<forall>f.\n            f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n            (\\<forall>\\<alpha> P'.\n                bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n f) \\<longrightarrow>\n                \\<langle>f\\<rangle>P \\<rightarrow>\n                \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                (\\<exists>Q'.\n                    \\<langle>f\\<rangle>Q \\<rightarrow>\n                    \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                    invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))", "by metis"], ["proof (state)\nthis:\n  symp (invL_FL_bisimilar F) \\<and>\n  (\\<forall>P Q.\n      invL_FL_bisimilar F P Q \\<longrightarrow>\n      (\\<forall>f.\n          f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n          (\\<forall>\\<phi>.\n              \\<langle>f\\<rangle>P \\<turnstile> \\<phi> \\<longrightarrow>\n              \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n  (\\<forall>P Q.\n      invL_FL_bisimilar F P Q \\<longrightarrow>\n      (\\<forall>f.\n          f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n          (\\<forall>\\<alpha> P'.\n              bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n                                     f) \\<longrightarrow>\n              \\<langle>f\\<rangle>P \\<rightarrow>\n              \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n              (\\<exists>Q'.\n                  \\<langle>f\\<rangle>Q \\<rightarrow>\n                  \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                  invL_FL_bisimilar (L (\\<alpha>, F, f)) P' Q'))))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem \"P \\<sim>\\<cdot>[F] Q \\<longleftrightarrow> EF (F,P) \\<sim>\\<cdot>\\<^sub>L EF(F,Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<sim>\\<cdot>[F] Q) = EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<sim>\\<cdot>[F] Q \\<Longrightarrow>\n    EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n 2. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "assume \"P \\<sim>\\<cdot>[F] Q\""], ["proof (state)\nthis:\n  P \\<sim>\\<cdot>[F] Q\n\ngoal (2 subgoals):\n 1. P \\<sim>\\<cdot>[F] Q \\<Longrightarrow>\n    EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n 2. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "then"], ["proof (chain)\npicking this:\n  P \\<sim>\\<cdot>[F] Q", "have \"L_bisimilar (EF (F,P)) (EF (F,Q))\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<cdot>[F] Q\n\ngoal (1 subgoal):\n 1. L_bisimilar (EF (F, P)) (EF (F, Q))", "by (metis L_bisimilar.intros(1))"], ["proof (state)\nthis:\n  L_bisimilar (EF (F, P)) (EF (F, Q))\n\ngoal (2 subgoals):\n 1. P \\<sim>\\<cdot>[F] Q \\<Longrightarrow>\n    EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n 2. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "then"], ["proof (chain)\npicking this:\n  L_bisimilar (EF (F, P)) (EF (F, Q))", "show \"EF (F,P) \\<sim>\\<cdot>\\<^sub>L EF(F,Q)\""], ["proof (prove)\nusing this:\n  L_bisimilar (EF (F, P)) (EF (F, Q))\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)", "by (metis L_bisimilar_is_L_transform_bisimulation L_transform.bisimilar_def)"], ["proof (state)\nthis:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "assume \"EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\""], ["proof (state)\nthis:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "then"], ["proof (chain)\npicking this:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)", "have \"invL_FL_bisimilar F P Q\""], ["proof (prove)\nusing this:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. invL_FL_bisimilar F P Q", "by (metis invL_FL_bisimilar_def)"], ["proof (state)\nthis:\n  invL_FL_bisimilar F P Q\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "then"], ["proof (chain)\npicking this:\n  invL_FL_bisimilar F P Q", "show \"P \\<sim>\\<cdot>[F] Q\""], ["proof (prove)\nusing this:\n  invL_FL_bisimilar F P Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>[F] Q", "by (metis invL_FL_bisimilar_is_L_bisimulation FL_bisimilar_def)"], ["proof (state)\nthis:\n  P \\<sim>\\<cdot>[F] Q\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>The following (alternative) proof of the ``$\\leftarrow$'' direction of this equivalence,\nnamely that bisimilarity in the $L$-transform implies $F/L$-bisimilarity, uses the fact that the\n$L$-transform preserves satisfaction of formulas, together with the fact that bisimilarity (in the\n$L$-transform) implies logical equivalence. However, since we proved the latter in the context of\nindexed nominal transition systems, this proof requires an indexed nominal transition system with\neffects where, additionally, the cardinality of the state set of the $L$-transform is bounded. We\ncould re-organize our formalization to remove this assumption: the proof of\n@{thm indexed_nominal_ts.bisimilarity_implies_equivalence} does not actually make use of the\ncardinality assumptions provided by indexed nominal transition systems.\\<close>"], ["", "locale L_transform_indexed_effect_nominal_ts = indexed_effect_nominal_ts L satisfies transition effect_apply\n  for L :: \"('act::bn) \\<times> ('effect::fs) fs_set \\<times> 'effect \\<Rightarrow> 'effect fs_set\" \n  and satisfies :: \"'state::fs \\<Rightarrow> 'pred::fs \\<Rightarrow> bool\" (infix \"\\<turnstile>\" 70)\n  and transition :: \"'state \\<Rightarrow> ('act,'state) residual \\<Rightarrow> bool\" (infix \"\\<rightarrow>\" 70)\n  and effect_apply :: \"'effect \\<Rightarrow> 'state \\<Rightarrow> 'state\" (\"\\<langle>_\\<rangle>_\" [0,101] 100) +\n  assumes card_idx_L_transform_state: \"|UNIV::('state, 'effect) L_state set| <o |UNIV::'idx set|\"\nbegin"], ["", "interpretation L_transform: indexed_nominal_ts \"(\\<turnstile>\\<^sub>L)\" \"(\\<rightarrow>\\<^sub>L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexed_nominal_ts TYPE('idx) (\\<turnstile>\\<^sub>L)\n     (\\<rightarrow>\\<^sub>L)", "by unfold_locales (fact L_satisfies_eqvt, fact L_transition_eqvt, fact card_idx_perm, fact card_idx_L_transform_state)"], ["", "notation L_transform.bisimilar (infix \"\\<sim>\\<cdot>\\<^sub>L\" 100)"], ["", "theorem \"EF (F,P) \\<sim>\\<cdot>\\<^sub>L EF(F,Q) \\<longrightarrow> P \\<sim>\\<cdot>[F] Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "assume \"EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\""], ["proof (state)\nthis:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "then"], ["proof (chain)\npicking this:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)", "have \"L_transform.logically_equivalent (EF (F, P)) (EF (F, Q))\""], ["proof (prove)\nusing this:\n  EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q)\n\ngoal (1 subgoal):\n 1. L_transform.logically_equivalent (EF (F, P)) (EF (F, Q))", "by (fact L_transform.bisimilarity_implies_equivalence)"], ["proof (state)\nthis:\n  L_transform.logically_equivalent (EF (F, P)) (EF (F, Q))\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "with FL_valid_iff_valid_L_transform"], ["proof (chain)\npicking this:\n  ?x \\<in> \\<A>[?F] \\<Longrightarrow>\n  ?P \\<Turnstile> ?x = L_transform.valid (EF (?F, ?P)) (L_transform ?x)\n  L_transform.logically_equivalent (EF (F, P)) (EF (F, Q))", "have \"FL_logically_equivalent F P Q\""], ["proof (prove)\nusing this:\n  ?x \\<in> \\<A>[?F] \\<Longrightarrow>\n  ?P \\<Turnstile> ?x = L_transform.valid (EF (?F, ?P)) (L_transform ?x)\n  L_transform.logically_equivalent (EF (F, P)) (EF (F, Q))\n\ngoal (1 subgoal):\n 1. FL_logically_equivalent F P Q", "using FL_logically_equivalent_def L_transform.logically_equivalent_def"], ["proof (prove)\nusing this:\n  ?x \\<in> \\<A>[?F] \\<Longrightarrow>\n  ?P \\<Turnstile> ?x = L_transform.valid (EF (?F, ?P)) (L_transform ?x)\n  L_transform.logically_equivalent (EF (F, P)) (EF (F, Q))\n  FL_logically_equivalent ?F ?P ?Q \\<equiv>\n  \\<forall>x.\n     x \\<in> \\<A>[?F] \\<longrightarrow>\n     ?P \\<Turnstile> x = ?Q \\<Turnstile> x\n  L_transform.logically_equivalent ?P ?Q \\<equiv>\n  \\<forall>x. L_transform.valid ?P x = L_transform.valid ?Q x\n\ngoal (1 subgoal):\n 1. FL_logically_equivalent F P Q", "by blast"], ["proof (state)\nthis:\n  FL_logically_equivalent F P Q\n\ngoal (1 subgoal):\n 1. EF (F, P) \\<sim>\\<cdot>\\<^sub>L EF (F, Q) \\<Longrightarrow>\n    P \\<sim>\\<cdot>[F] Q", "then"], ["proof (chain)\npicking this:\n  FL_logically_equivalent F P Q", "show \"P \\<sim>\\<cdot>[F] Q\""], ["proof (prove)\nusing this:\n  FL_logically_equivalent F P Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>[F] Q", "by (fact FL_equivalence_implies_bisimilarity)"], ["proof (state)\nthis:\n  P \\<sim>\\<cdot>[F] Q\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}