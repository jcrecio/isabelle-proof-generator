{"file_name": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS/FL_Equivalence_Implies_Bisimilarity.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS", "problem_names": ["lemma is_distinguishing_formula_eqvt (*[eqvt]*):\n    assumes \"x distinguishes P from Q\" shows \"(p \\<bullet> x) distinguishes (p \\<bullet> P) from (p \\<bullet> Q)\"", "lemma FL_equivalent_iff_not_distinguished:\n    \"FL_logically_equivalent F P Q \\<longleftrightarrow> \\<not>(\\<exists>x. x \\<in> \\<A>[F] \\<and> x distinguishes P from Q)\"", "lemma FL_distinguished_bounded_support:\n    assumes \"x \\<in> \\<A>[F]\" and \"x distinguishes P from Q\"\n    obtains y where \"y \\<in> \\<A>[F]\" and \"supp y \\<subseteq> supp (F,P)\" and \"y distinguishes P from Q\"", "lemma FL_equivalence_is_L_bisimulation: \"is_L_bisimulation FL_logically_equivalent\"", "theorem FL_equivalence_implies_bisimilarity: assumes \"FL_logically_equivalent F P Q\" shows \"P \\<sim>\\<cdot>[F] Q\""], "translations": [["", "lemma is_distinguishing_formula_eqvt (*[eqvt]*):\n    assumes \"x distinguishes P from Q\" shows \"(p \\<bullet> x) distinguishes (p \\<bullet> P) from (p \\<bullet> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> x) distinguishes (p \\<bullet> P) from (p \\<bullet> Q)", "using assms"], ["proof (prove)\nusing this:\n  x distinguishes P from Q\n\ngoal (1 subgoal):\n 1. (p \\<bullet> x) distinguishes (p \\<bullet> P) from (p \\<bullet> Q)", "unfolding is_distinguishing_formula_def"], ["proof (prove)\nusing this:\n  P \\<Turnstile> x \\<and> \\<not> Q \\<Turnstile> x\n\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<Turnstile> p \\<bullet> x \\<and>\n    \\<not> p \\<bullet> Q \\<Turnstile> p \\<bullet> x", "by (metis permute_minus_cancel(2) FL_valid_eqvt)"], ["", "lemma FL_equivalent_iff_not_distinguished:\n    \"FL_logically_equivalent F P Q \\<longleftrightarrow> \\<not>(\\<exists>x. x \\<in> \\<A>[F] \\<and> x distinguishes P from Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FL_logically_equivalent F P Q =\n    (\\<nexists>x. x \\<in> \\<A>[F] \\<and> x distinguishes P from Q)", "by (meson FL_logically_equivalent_def Not is_distinguishing_formula_def FL_valid_Not)"], ["", "text \\<open>There exists a distinguishing formula for~@{term P} and~@{term Q} in~\\<open>\\<A>[F]\\<close> whose\n    support is contained in~@{term \"supp (F,P)\"}.\\<close>"], ["", "lemma FL_distinguished_bounded_support:\n    assumes \"x \\<in> \\<A>[F]\" and \"x distinguishes P from Q\"\n    obtains y where \"y \\<in> \\<A>[F]\" and \"supp y \\<subseteq> supp (F,P)\" and \"y distinguishes P from Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?B = \"{p \\<bullet> x|p. supp (F,P) \\<sharp>* p}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"supp (F,P) supports ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (F, P) supports {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "unfolding supports_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       a \\<notin> supp (F, P) \\<and>\n       b \\<notin> supp (F, P) \\<longrightarrow>\n       (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n       supp (F, P) \\<sharp>* p} =\n       {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp (F, P); b \\<notin> supp (F, P)\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp (F, P) \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp (F, P); b \\<notin> supp (F, P)\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp (F, P) \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "assume a: \"a \\<notin> supp (F,P)\" and b: \"b \\<notin> supp (F,P)\""], ["proof (state)\nthis:\n  a \\<notin> supp (F, P)\n  b \\<notin> supp (F, P)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp (F, P); b \\<notin> supp (F, P)\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp (F, P) \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "have \"(a \\<rightleftharpoons> b) \\<bullet> ?B \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n    supp (F, P) \\<sharp>* p}\n    \\<subseteq> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "assume \"x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> ?B\""], ["proof (state)\nthis:\n  x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n           supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "then"], ["proof (chain)\npicking this:\n  x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n           supp (F, P) \\<sharp>* p}", "obtain p where 1: \"x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x\" and 2: \"supp (F,P) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n           supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x;\n         supp (F, P) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: permute_set_def)"], ["proof (state)\nthis:\n  x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x\n  supp (F, P) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "let ?q = \"(a \\<rightleftharpoons> b) + p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "from 1"], ["proof (chain)\npicking this:\n  x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x", "have \"x' = ?q \\<bullet> x\""], ["proof (prove)\nusing this:\n  x' = (a \\<rightleftharpoons> b) \\<bullet> p \\<bullet> x\n\ngoal (1 subgoal):\n 1. x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "moreover"], ["proof (state)\nthis:\n  x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "from a and b and 2"], ["proof (chain)\npicking this:\n  a \\<notin> supp (F, P)\n  b \\<notin> supp (F, P)\n  supp (F, P) \\<sharp>* p", "have \"supp (F,P) \\<sharp>* ?q\""], ["proof (prove)\nusing this:\n  a \\<notin> supp (F, P)\n  b \\<notin> supp (F, P)\n  supp (F, P) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)", "by (metis fresh_perm fresh_star_def fresh_star_plus swap_atom_simps(3))"], ["proof (state)\nthis:\n  supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "ultimately"], ["proof (chain)\npicking this:\n  x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x\n  supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)", "show \"x' \\<in> ?B\""], ["proof (prove)\nusing this:\n  x' = ((a \\<rightleftharpoons> b) + p) \\<bullet> x\n  supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n\ngoal (1 subgoal):\n 1. x' \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "by blast"], ["proof (state)\nthis:\n  x' \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp (F, P) \\<sharp>* p}\n  \\<subseteq> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp (F, P); b \\<notin> supp (F, P)\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp (F, P) \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "moreover"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp (F, P) \\<sharp>* p}\n  \\<subseteq> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp (F, P); b \\<notin> supp (F, P)\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp (F, P) \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "have \"?B \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n    \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p.\n                 supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p.\n                 supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "assume \"x' \\<in> ?B\""], ["proof (state)\nthis:\n  x' \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p.\n                 supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "then"], ["proof (chain)\npicking this:\n  x' \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "obtain p where 1: \"x' = p \\<bullet> x\" and 2: \"supp (F,P) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  x' \\<in> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>x' = p \\<bullet> x; supp (F, P) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' = p \\<bullet> x\n  supp (F, P) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p.\n                 supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "let ?q = \"(a \\<rightleftharpoons> b) + p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p.\n                 supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "from 1"], ["proof (chain)\npicking this:\n  x' = p \\<bullet> x", "have \"x' = (a \\<rightleftharpoons> b) \\<bullet> ?q \\<bullet> x\""], ["proof (prove)\nusing this:\n  x' = p \\<bullet> x\n\ngoal (1 subgoal):\n 1. x' =\n    (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n    p) \\<bullet> x", "by simp"], ["proof (state)\nthis:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p.\n                 supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "moreover"], ["proof (state)\nthis:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p.\n                 supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "from a and b and 2"], ["proof (chain)\npicking this:\n  a \\<notin> supp (F, P)\n  b \\<notin> supp (F, P)\n  supp (F, P) \\<sharp>* p", "have \"supp (F,P) \\<sharp>* ?q\""], ["proof (prove)\nusing this:\n  a \\<notin> supp (F, P)\n  b \\<notin> supp (F, P)\n  supp (F, P) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)", "by (metis fresh_perm fresh_star_def fresh_star_plus swap_atom_simps(3))"], ["proof (state)\nthis:\n  supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {p \\<bullet> x |p.\n                 supp (F, P) \\<sharp>* p} \\<Longrightarrow>\n       xa \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n                supp (F, P) \\<sharp>* p}", "ultimately"], ["proof (chain)\npicking this:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n  supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)", "show \"x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> ?B\""], ["proof (prove)\nusing this:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n  supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n\ngoal (1 subgoal):\n 1. x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n             supp (F, P) \\<sharp>* p}", "using mem_permute_iff"], ["proof (prove)\nusing this:\n  x' =\n  (a \\<rightleftharpoons> b) \\<bullet> ((a \\<rightleftharpoons> b) +\n  p) \\<bullet> x\n  supp (F, P) \\<sharp>* ((a \\<rightleftharpoons> b) + p)\n  (?p \\<bullet> ?x \\<in> ?p \\<bullet> ?X) = (?x \\<in> ?X)\n\ngoal (1 subgoal):\n 1. x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n             supp (F, P) \\<sharp>* p}", "by blast"], ["proof (state)\nthis:\n  x' \\<in> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n           supp (F, P) \\<sharp>* p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n  \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n              supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<notin> supp (F, P); b \\<notin> supp (F, P)\\<rbrakk>\n       \\<Longrightarrow> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |\n                         p. supp (F, P) \\<sharp>* p} =\n                         {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "ultimately"], ["proof (chain)\npicking this:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp (F, P) \\<sharp>* p}\n  \\<subseteq> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n  {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n  \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n              supp (F, P) \\<sharp>* p}", "show \"(a \\<rightleftharpoons> b) \\<bullet> ?B = ?B\""], ["proof (prove)\nusing this:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp (F, P) \\<sharp>* p}\n  \\<subseteq> {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n  {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n  \\<subseteq> (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n              supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n    supp (F, P) \\<sharp>* p} =\n    {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", ".."], ["proof (state)\nthis:\n  (a \\<rightleftharpoons> b) \\<bullet> {p \\<bullet> x |p.\n  supp (F, P) \\<sharp>* p} =\n  {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  supp (F, P) supports {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  supp (F, P) supports {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}", "have supp_B_subset_supp_P: \"supp ?B \\<subseteq> supp (F,P)\""], ["proof (prove)\nusing this:\n  supp (F, P) supports {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n\ngoal (1 subgoal):\n 1. supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p} \\<subseteq> supp (F, P)", "by (metis (erased, lifting) finite_supp supp_is_subset)"], ["proof (state)\nthis:\n  supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p} \\<subseteq> supp (F, P)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p} \\<subseteq> supp (F, P)", "have finite_supp_B: \"finite (supp ?B)\""], ["proof (prove)\nusing this:\n  supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p} \\<subseteq> supp (F, P)\n\ngoal (1 subgoal):\n 1. finite (supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "using finite_supp rev_finite_subset"], ["proof (prove)\nusing this:\n  supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p} \\<subseteq> supp (F, P)\n  finite (supp ?x)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "by blast"], ["proof (state)\nthis:\n  finite (supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?B \\<subseteq> (\\<lambda>p. p \\<bullet> x) ` UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n    \\<subseteq> range (\\<lambda>p. p \\<bullet> x)", "by auto"], ["proof (state)\nthis:\n  {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n  \\<subseteq> range (\\<lambda>p. p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n  \\<subseteq> range (\\<lambda>p. p \\<bullet> x)", "have \"|?B| \\<le>o |UNIV :: perm set|\""], ["proof (prove)\nusing this:\n  {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}\n  \\<subseteq> range (\\<lambda>p. p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| \\<le>o |UNIV|", "by (rule surj_imp_ordLeq)"], ["proof (state)\nthis:\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| \\<le>o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| \\<le>o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"|UNIV :: perm set| <o |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "by (metis card_idx_perm)"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"|UNIV :: 'idx set| \\<le>o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o natLeq +c |UNIV|", "by (metis Cnotzero_UNIV ordLeq_csum2)"], ["proof (state)\nthis:\n  |UNIV| \\<le>o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| <o natLeq +c |UNIV|", "have card_B: \"|?B| <o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\nusing this:\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| <o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| <o natLeq +c |UNIV|", "."], ["proof (state)\nthis:\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| <o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?y = \"Conj (Abs_bset ?B) :: ('idx, 'pred, 'act, 'effect) formula\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from finite_supp_B and card_B and supp_B_subset_supp_P"], ["proof (chain)\npicking this:\n  finite (supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| <o natLeq +c |UNIV|\n  supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p} \\<subseteq> supp (F, P)", "have \"supp ?y \\<subseteq> supp (F,P)\""], ["proof (prove)\nusing this:\n  finite (supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| <o natLeq +c |UNIV|\n  supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p} \\<subseteq> supp (F, P)\n\ngoal (1 subgoal):\n 1. supp (Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))\n    \\<subseteq> supp (F, P)", "by simp"], ["proof (state)\nthis:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))\n  \\<subseteq> supp (F, P)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))\n  \\<subseteq> supp (F, P)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?y \\<in> \\<A>[F]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conj\n     (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) \\<in> \\<A>[F]", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (supp (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))\n 2. \\<And>xa.\n       xa \\<in> set_bset\n                 (Abs_bset\n                   {p \\<bullet> x |p.\n                    supp (F, P) \\<sharp>* p}) \\<Longrightarrow>\n       xa \\<in> \\<A>[F]", "show \"finite (supp (Abs_bset ?B :: (_,_,_,_) formula set['idx]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))", "using finite_supp_B card_B"], ["proof (prove)\nusing this:\n  finite (supp {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| <o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. finite (supp (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))", "by simp"], ["proof (state)\nthis:\n  finite (supp (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> set_bset\n                 (Abs_bset\n                   {p \\<bullet> x |p.\n                    supp (F, P) \\<sharp>* p}) \\<Longrightarrow>\n       xa \\<in> \\<A>[F]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> set_bset\n                 (Abs_bset\n                   {p \\<bullet> x |p.\n                    supp (F, P) \\<sharp>* p}) \\<Longrightarrow>\n       xa \\<in> \\<A>[F]", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> set_bset\n                 (Abs_bset\n                   {p \\<bullet> x |p.\n                    supp (F, P) \\<sharp>* p}) \\<Longrightarrow>\n       xa \\<in> \\<A>[F]", "assume \"x' \\<in> set_bset (Abs_bset ?B :: (_,_,_,_) formula set['idx])\""], ["proof (state)\nthis:\n  x' \\<in> set_bset (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> set_bset\n                 (Abs_bset\n                   {p \\<bullet> x |p.\n                    supp (F, P) \\<sharp>* p}) \\<Longrightarrow>\n       xa \\<in> \\<A>[F]", "then"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "obtain p where p_x: \"x' = p \\<bullet> x\" and fresh_p: \"supp (F,P) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>x' = p \\<bullet> x; supp (F, P) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using card_B"], ["proof (prove)\nusing this:\n  x' \\<in> set_bset (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n  |{p \\<bullet> x |p. supp (F, P) \\<sharp>* p}| <o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>x' = p \\<bullet> x; supp (F, P) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' = p \\<bullet> x\n  supp (F, P) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> set_bset\n                 (Abs_bset\n                   {p \\<bullet> x |p.\n                    supp (F, P) \\<sharp>* p}) \\<Longrightarrow>\n       xa \\<in> \\<A>[F]", "from fresh_p"], ["proof (chain)\npicking this:\n  supp (F, P) \\<sharp>* p", "have \"p \\<bullet> F = F\""], ["proof (prove)\nusing this:\n  supp (F, P) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. p \\<bullet> F = F", "using fresh_star_Pair fresh_star_supp_conv perm_supp_eq"], ["proof (prove)\nusing this:\n  supp (F, P) \\<sharp>* p\n  ?as \\<sharp>* (?x, ?y) = (?as \\<sharp>* ?x \\<and> ?as \\<sharp>* ?y)\n  supp ?x \\<sharp>* ?y \\<Longrightarrow> supp ?y \\<sharp>* ?x\n  supp ?p \\<sharp>* ?x \\<Longrightarrow> ?p \\<bullet> ?x = ?x\n\ngoal (1 subgoal):\n 1. p \\<bullet> F = F", "by blast"], ["proof (state)\nthis:\n  p \\<bullet> F = F\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> set_bset\n                 (Abs_bset\n                   {p \\<bullet> x |p.\n                    supp (F, P) \\<sharp>* p}) \\<Longrightarrow>\n       xa \\<in> \\<A>[F]", "with \\<open>x \\<in> \\<A>[F]\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> \\<A>[F]\n  p \\<bullet> F = F", "show \"x' \\<in> \\<A>[F]\""], ["proof (prove)\nusing this:\n  x \\<in> \\<A>[F]\n  p \\<bullet> F = F\n\ngoal (1 subgoal):\n 1. x' \\<in> \\<A>[F]", "using p_x"], ["proof (prove)\nusing this:\n  x \\<in> \\<A>[F]\n  p \\<bullet> F = F\n  x' = p \\<bullet> x\n\ngoal (1 subgoal):\n 1. x' \\<in> \\<A>[F]", "by (metis is_FL_formula_eqvt)"], ["proof (state)\nthis:\n  x' \\<in> \\<A>[F]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) \\<in> \\<A>[F]\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) \\<in> \\<A>[F]\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?y distinguishes P from Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conj\n     (Abs_bset\n       {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) distinguishes P from Q", "unfolding is_distinguishing_formula_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile>\n    Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) \\<and>\n    \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Turnstile>\n    Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n 2. \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "from \\<open>x distinguishes P from Q\\<close>"], ["proof (chain)\npicking this:\n  x distinguishes P from Q", "show \"P \\<Turnstile> ?y\""], ["proof (prove)\nusing this:\n  x distinguishes P from Q\n\ngoal (1 subgoal):\n 1. P \\<Turnstile>\n    Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "by (auto simp add: card_B finite_supp_B) (metis is_distinguishing_formula_def fresh_star_Un supp_Pair supp_perm_eq FL_valid_eqvt)"], ["proof (state)\nthis:\n  P \\<Turnstile> Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n\ngoal (1 subgoal):\n 1. \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "from \\<open>x distinguishes P from Q\\<close>"], ["proof (chain)\npicking this:\n  x distinguishes P from Q", "show \"\\<not> Q \\<Turnstile> ?y\""], ["proof (prove)\nusing this:\n  x distinguishes P from Q\n\ngoal (1 subgoal):\n 1. \\<not> Q \\<Turnstile>\n           Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})", "by (auto simp add: card_B finite_supp_B) (metis is_distinguishing_formula_def permute_zero fresh_star_zero)"], ["proof (state)\nthis:\n  \\<not> Q \\<Turnstile>\n         Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Conj\n   (Abs_bset\n     {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) distinguishes P from Q\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> \\<A>[F]; supp y \\<subseteq> supp (F, P);\n         y distinguishes P from Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))\n  \\<subseteq> supp (F, P)\n  Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) \\<in> \\<A>[F]\n  Conj\n   (Abs_bset\n     {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) distinguishes P from Q", "show ?thesis"], ["proof (prove)\nusing this:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))\n  \\<subseteq> supp (F, P)\n  Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) \\<in> \\<A>[F]\n  Conj\n   (Abs_bset\n     {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) distinguishes P from Q\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  supp (Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}))\n  \\<subseteq> supp (F, P)\n  Conj (Abs_bset {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) \\<in> \\<A>[F]\n  Conj\n   (Abs_bset\n     {p \\<bullet> x |p. supp (F, P) \\<sharp>* p}) distinguishes P from Q\n  \\<lbrakk>?y9 \\<in> \\<A>[F]; supp ?y9 \\<subseteq> supp (F, P);\n   ?y9 distinguishes P from Q\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FL_equivalence_is_L_bisimulation: \"is_L_bisimulation FL_logically_equivalent\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "fix F"], ["proof (state)\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "have \"symp (FL_logically_equivalent F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp (FL_logically_equivalent F)", "by (rule sympI) (metis FL_logically_equivalent_def)"], ["proof (state)\nthis:\n  symp (FL_logically_equivalent F)\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "}"], ["proof (state)\nthis:\n  symp (FL_logically_equivalent ?F11)\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "moreover"], ["proof (state)\nthis:\n  symp (FL_logically_equivalent ?F11)\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "{"], ["proof (state)\nthis:\n  symp (FL_logically_equivalent ?F11)\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "fix F P Q f \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "assume \"FL_logically_equivalent F P Q\" and \"f \\<in>\\<^sub>f\\<^sub>s F\" and \"\\<langle>f\\<rangle>P \\<turnstile> \\<phi>\""], ["proof (state)\nthis:\n  FL_logically_equivalent F P Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "then"], ["proof (chain)\npicking this:\n  FL_logically_equivalent F P Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<langle>f\\<rangle>P \\<turnstile> \\<phi>", "have \"\\<langle>f\\<rangle>Q \\<turnstile> \\<phi>\""], ["proof (prove)\nusing this:\n  FL_logically_equivalent F P Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  \\<langle>f\\<rangle>P \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>", "by (metis FL_logically_equivalent_def Pred FL_valid_Pred)"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "}"], ["proof (state)\nthis:\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   \\<langle>?f11\\<rangle>?P11 \\<turnstile> ?\\<phi>11\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?f11\\<rangle>?Q11 \\<turnstile> ?\\<phi>11\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   \\<langle>?f11\\<rangle>?P11 \\<turnstile> ?\\<phi>11\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?f11\\<rangle>?Q11 \\<turnstile> ?\\<phi>11\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "{"], ["proof (state)\nthis:\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   \\<langle>?f11\\<rangle>?P11 \\<turnstile> ?\\<phi>11\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?f11\\<rangle>?Q11 \\<turnstile> ?\\<phi>11\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "fix F P Q f \\<alpha> P'"], ["proof (state)\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "assume \"FL_logically_equivalent F P Q\" and \"f \\<in>\\<^sub>f\\<^sub>s F\" and \"bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\" and \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (state)\nthis:\n  FL_logically_equivalent F P Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "then"], ["proof (chain)\npicking this:\n  FL_logically_equivalent F P Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "have \"\\<exists>Q'. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and> FL_logically_equivalent (L (\\<alpha>,F,f)) P' Q'\""], ["proof (prove)\nusing this:\n  FL_logically_equivalent F P Q\n  f \\<in>\\<^sub>f\\<^sub>s F\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow>\n       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n       FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "let ?Q' = \"{Q'. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "assume \"\\<forall>Q'\\<in>?Q'. \\<not> FL_logically_equivalent (L (\\<alpha>,F,f)) P' Q'\""], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "then"], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "have \"\\<forall>Q'\\<in>?Q'. \\<exists>x :: ('idx, 'pred, 'act, 'effect) formula. x \\<in> \\<A>[L (\\<alpha>,F,f)] \\<and> x distinguishes P' from Q'\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'\n\ngoal (1 subgoal):\n 1. \\<forall>Q'\\<in>{Q'.\n                     \\<langle>f\\<rangle>Q \\<rightarrow>\n                     \\<langle>\\<alpha>,Q'\\<rangle>}.\n       \\<exists>x.\n          x \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and> x distinguishes P' from Q'", "by (metis FL_equivalent_iff_not_distinguished)"], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        x \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and> x distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "then"], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        x \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and> x distinguishes P' from Q'", "have \"\\<forall>Q'\\<in>?Q'. \\<exists>x :: ('idx, 'pred, 'act, 'effect) formula. x \\<in> \\<A>[L (\\<alpha>,F,f)] \\<and> supp x \\<subseteq> supp (L (\\<alpha>,F,f), P') \\<and> x distinguishes P' from Q'\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        x \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and> x distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. \\<forall>Q'\\<in>{Q'.\n                     \\<langle>f\\<rangle>Q \\<rightarrow>\n                     \\<langle>\\<alpha>,Q'\\<rangle>}.\n       \\<exists>x.\n          x \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n          supp x \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n          x distinguishes P' from Q'", "by (metis FL_distinguished_bounded_support)"], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        x \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n        supp x \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n        x distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "then"], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        x \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n        supp x \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n        x distinguishes P' from Q'", "obtain g :: \"'state \\<Rightarrow> ('idx, 'pred, 'act, 'effect) formula\" where\n              *: \"\\<forall>Q'\\<in>?Q'. g Q' \\<in> \\<A>[L (\\<alpha>,F,f)] \\<and> supp (g Q') \\<subseteq> supp (L (\\<alpha>,F,f), P') \\<and> (g Q') distinguishes P' from Q'\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<exists>x.\n        x \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n        supp x \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n        x distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<forall>Q'\\<in>{Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle>}.\n           g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n           supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n           g Q' distinguishes P' from Q' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "have \"supp (g ` ?Q') \\<subseteq> supp (L (\\<alpha>,F,f), P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp\n     (g `\n      {Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n    \\<subseteq> supp (L (\\<alpha>, F, f), P')", "by (rule set_bounded_supp, fact finite_supp, cut_tac \"*\", blast)"], ["proof (state)\nthis:\n  supp\n   (g `\n    {Q'. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n  \\<subseteq> supp (L (\\<alpha>, F, f), P')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "then"], ["proof (chain)\npicking this:\n  supp\n   (g `\n    {Q'. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n  \\<subseteq> supp (L (\\<alpha>, F, f), P')", "have finite_supp_image: \"finite (supp (g ` ?Q'))\""], ["proof (prove)\nusing this:\n  supp\n   (g `\n    {Q'. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n  \\<subseteq> supp (L (\\<alpha>, F, f), P')\n\ngoal (1 subgoal):\n 1. finite\n     (supp\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "using finite_supp rev_finite_subset"], ["proof (prove)\nusing this:\n  supp\n   (g `\n    {Q'. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>})\n  \\<subseteq> supp (L (\\<alpha>, F, f), P')\n  finite (supp ?x)\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite\n     (supp\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "by blast"], ["proof (state)\nthis:\n  finite\n   (supp\n     (g `\n      {Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "have \"|g ` ?Q'| \\<le>o |UNIV :: 'state set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |g `\n     {Q'.\n      \\<langle>f\\<rangle>Q \\<rightarrow>\n      \\<langle>\\<alpha>,Q'\\<rangle>}| \\<le>o\n    |UNIV|", "by (metis card_of_UNIV card_of_image ordLeq_transitive)"], ["proof (state)\nthis:\n  |g `\n   {Q'.\n    \\<langle>f\\<rangle>Q \\<rightarrow>\n    \\<langle>\\<alpha>,Q'\\<rangle>}| \\<le>o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "also"], ["proof (state)\nthis:\n  |g `\n   {Q'.\n    \\<langle>f\\<rangle>Q \\<rightarrow>\n    \\<langle>\\<alpha>,Q'\\<rangle>}| \\<le>o\n  |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "have \"|UNIV :: 'state set| <o |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| <o |UNIV|", "by (metis card_idx_state)"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "also"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "have \"|UNIV :: 'idx set| \\<le>o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o natLeq +c |UNIV|", "by (metis Cnotzero_UNIV ordLeq_csum2)"], ["proof (state)\nthis:\n  |UNIV| \\<le>o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "finally"], ["proof (chain)\npicking this:\n  |g `\n   {Q'.\n    \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n  natLeq +c |UNIV|", "have card_image: \"|g ` ?Q'| <o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\nusing this:\n  |g `\n   {Q'.\n    \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n  natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. |g `\n     {Q'.\n      \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n    natLeq +c |UNIV|", "."], ["proof (state)\nthis:\n  |g `\n   {Q'.\n    \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n  natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "let ?y = \"Conj (Abs_bset (g ` ?Q')) :: ('idx, 'pred, 'act, 'effect) formula\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "have \"Act f \\<alpha> ?y \\<in> \\<A>[F]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Act f \\<alpha>\n     (Conj\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<in> \\<A>[F]", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. f \\<in>\\<^sub>f\\<^sub>s F\n 2. bn \\<alpha> \\<sharp>* (F, f)\n 3. Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})) \\<in> \\<A>[L (\\<alpha>, F, f)]", "from \\<open>f \\<in>\\<^sub>f\\<^sub>s F\\<close>"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>f\\<^sub>s F", "show \"f \\<in>\\<^sub>f\\<^sub>s F\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (1 subgoal):\n 1. f \\<in>\\<^sub>f\\<^sub>s F", "."], ["proof (state)\nthis:\n  f \\<in>\\<^sub>f\\<^sub>s F\n\ngoal (2 subgoals):\n 1. bn \\<alpha> \\<sharp>* (F, f)\n 2. Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})) \\<in> \\<A>[L (\\<alpha>, F, f)]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. bn \\<alpha> \\<sharp>* (F, f)\n 2. Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})) \\<in> \\<A>[L (\\<alpha>, F, f)]", "from \\<open>bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\\<close>"], ["proof (chain)\npicking this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)", "show \"bn \\<alpha> \\<sharp>* (F, f)\""], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* (F, f)", "using fresh_star_Pair"], ["proof (prove)\nusing this:\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n  ?as \\<sharp>* (?x, ?y) = (?as \\<sharp>* ?x \\<and> ?as \\<sharp>* ?y)\n\ngoal (1 subgoal):\n 1. bn \\<alpha> \\<sharp>* (F, f)", "by blast"], ["proof (state)\nthis:\n  bn \\<alpha> \\<sharp>* (F, f)\n\ngoal (1 subgoal):\n 1. Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})) \\<in> \\<A>[L (\\<alpha>, F, f)]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})) \\<in> \\<A>[L (\\<alpha>, F, f)]", "show \"Conj (Abs_bset (g ` ?Q')) \\<in> \\<A>[L (\\<alpha>, F, f)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})) \\<in> \\<A>[L (\\<alpha>, F, f)]", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. finite\n     (supp\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>})))\n 2. \\<And>x.\n       x \\<in> set_bset\n                (Abs_bset\n                  (g `\n                   {Q'.\n                    \\<langle>f\\<rangle>Q \\<rightarrow>\n                    \\<langle>\\<alpha>,Q'\\<rangle>})) \\<Longrightarrow>\n       x \\<in> \\<A>[L (\\<alpha>, F, f)]", "show \"finite (supp (Abs_bset (g ` ?Q') :: (_,_,_,_) formula set['idx]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (supp\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>})))", "using finite_supp_image card_image"], ["proof (prove)\nusing this:\n  finite\n   (supp\n     (g `\n      {Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n  |g `\n   {Q'.\n    \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n  natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. finite\n     (supp\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>})))", "by simp"], ["proof (state)\nthis:\n  finite\n   (supp\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_bset\n                (Abs_bset\n                  (g `\n                   {Q'.\n                    \\<langle>f\\<rangle>Q \\<rightarrow>\n                    \\<langle>\\<alpha>,Q'\\<rangle>})) \\<Longrightarrow>\n       x \\<in> \\<A>[L (\\<alpha>, F, f)]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_bset\n                (Abs_bset\n                  (g `\n                   {Q'.\n                    \\<langle>f\\<rangle>Q \\<rightarrow>\n                    \\<langle>\\<alpha>,Q'\\<rangle>})) \\<Longrightarrow>\n       x \\<in> \\<A>[L (\\<alpha>, F, f)]", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_bset\n                (Abs_bset\n                  (g `\n                   {Q'.\n                    \\<langle>f\\<rangle>Q \\<rightarrow>\n                    \\<langle>\\<alpha>,Q'\\<rangle>})) \\<Longrightarrow>\n       x \\<in> \\<A>[L (\\<alpha>, F, f)]", "assume \"x' \\<in> set_bset (Abs_bset (g ` ?Q') :: (_,_,_,_) formula set['idx])\""], ["proof (state)\nthis:\n  x' \\<in> set_bset\n            (Abs_bset\n              (g `\n               {Q'.\n                \\<langle>f\\<rangle>Q \\<rightarrow>\n                \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_bset\n                (Abs_bset\n                  (g `\n                   {Q'.\n                    \\<langle>f\\<rangle>Q \\<rightarrow>\n                    \\<langle>\\<alpha>,Q'\\<rangle>})) \\<Longrightarrow>\n       x \\<in> \\<A>[L (\\<alpha>, F, f)]", "then"], ["proof (chain)\npicking this:\n  x' \\<in> set_bset\n            (Abs_bset\n              (g `\n               {Q'.\n                \\<langle>f\\<rangle>Q \\<rightarrow>\n                \\<langle>\\<alpha>,Q'\\<rangle>}))", "obtain Q' where \"x' = g Q'\" and \"\\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\""], ["proof (prove)\nusing this:\n  x' \\<in> set_bset\n            (Abs_bset\n              (g `\n               {Q'.\n                \\<langle>f\\<rangle>Q \\<rightarrow>\n                \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>x' = g Q';\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using card_image"], ["proof (prove)\nusing this:\n  x' \\<in> set_bset\n            (Abs_bset\n              (g `\n               {Q'.\n                \\<langle>f\\<rangle>Q \\<rightarrow>\n                \\<langle>\\<alpha>,Q'\\<rangle>}))\n  |g `\n   {Q'.\n    \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}| <o\n  natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>x' = g Q';\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x' = g Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_bset\n                (Abs_bset\n                  (g `\n                   {Q'.\n                    \\<langle>f\\<rangle>Q \\<rightarrow>\n                    \\<langle>\\<alpha>,Q'\\<rangle>})) \\<Longrightarrow>\n       x \\<in> \\<A>[L (\\<alpha>, F, f)]", "with \"*\""], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n  x' = g Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>", "show \"x' \\<in> \\<A>[L (\\<alpha>, F, f)]\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n  x' = g Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. x' \\<in> \\<A>[L (\\<alpha>, F, f)]", "using mem_Collect_eq"], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n  x' = g Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. x' \\<in> \\<A>[L (\\<alpha>, F, f)]", "by blast"], ["proof (state)\nthis:\n  x' \\<in> \\<A>[L (\\<alpha>, F, f)]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Conj\n   (Abs_bset\n     (g `\n      {Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow>\n       \\<langle>\\<alpha>,Q'\\<rangle>})) \\<in> \\<A>[L (\\<alpha>, F, f)]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<in> \\<A>[F]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "moreover"], ["proof (state)\nthis:\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<in> \\<A>[F]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "have \"P \\<Turnstile> Act f \\<alpha> ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Turnstile>\n    Act f \\<alpha>\n     (Conj\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>})))", "unfolding FL_valid_Act"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>' x' P'.\n       Act f \\<alpha>\n        (Conj\n          (Abs_bset\n            (g `\n             {Q'.\n              \\<langle>f\\<rangle>Q \\<rightarrow>\n              \\<langle>\\<alpha>,Q'\\<rangle>}))) =\n       Act f \\<alpha>' x' \\<and>\n       \\<langle>f\\<rangle>P \\<rightarrow>\n       \\<langle>\\<alpha>',P'\\<rangle> \\<and>\n       P' \\<Turnstile> x'", "proof (standard+)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,?P'4\\<rangle>\n 2. ?P'4 \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "show \"\\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>", "by fact"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>P \\<rightarrow> \\<langle>\\<alpha>,P'\\<rangle>\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "fix Q'"], ["proof (state)\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "assume \"\\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\""], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "with \"*\""], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>", "have \"P' \\<Turnstile> g Q'\""], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile> g Q'", "by (metis is_distinguishing_formula_def mem_Collect_eq)"], ["proof (state)\nthis:\n  P' \\<Turnstile> g Q'\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "}"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,?Q'11\\<rangle> \\<Longrightarrow>\n  P' \\<Turnstile> g ?Q'11\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "then"], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,?Q'11\\<rangle> \\<Longrightarrow>\n  P' \\<Turnstile> g ?Q'11", "show \"P' \\<Turnstile> ?y\""], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,?Q'11\\<rangle> \\<Longrightarrow>\n  P' \\<Turnstile> g ?Q'11\n\ngoal (1 subgoal):\n 1. P' \\<Turnstile>\n    Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "by (simp add: finite_supp_image card_image)"], ["proof (state)\nthis:\n  P' \\<Turnstile>\n  Conj\n   (Abs_bset\n     (g `\n      {Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<Turnstile>\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "moreover"], ["proof (state)\nthis:\n  P \\<Turnstile>\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "have \"\\<not> Q \\<Turnstile> Act f \\<alpha> ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Q \\<Turnstile>\n           Act f \\<alpha>\n            (Conj\n              (Abs_bset\n                (g `\n                 {Q'.\n                  \\<langle>f\\<rangle>Q \\<rightarrow>\n                  \\<langle>\\<alpha>,Q'\\<rangle>})))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. Q \\<Turnstile>\n    Act f \\<alpha>\n     (Conj\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<Longrightarrow>\n    False", "assume \"Q \\<Turnstile> Act f \\<alpha> ?y\""], ["proof (state)\nthis:\n  Q \\<Turnstile>\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. Q \\<Turnstile>\n    Act f \\<alpha>\n     (Conj\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  Q \\<Turnstile>\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))", "obtain Q' where 1: \"\\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\" and 2: \"Q' \\<Turnstile> ?y\""], ["proof (prove)\nusing this:\n  Q \\<Turnstile>\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>\\<langle>f\\<rangle>Q \\<rightarrow>\n                 \\<langle>\\<alpha>,Q'\\<rangle>;\n         Q' \\<Turnstile>\n         Conj\n          (Abs_bset\n            (g `\n             {Q'.\n              \\<langle>f\\<rangle>Q \\<rightarrow>\n              \\<langle>\\<alpha>,Q'\\<rangle>}))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\\<close>"], ["proof (prove)\nusing this:\n  Q \\<Turnstile>\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))\n  bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f)\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>\\<langle>f\\<rangle>Q \\<rightarrow>\n                 \\<langle>\\<alpha>,Q'\\<rangle>;\n         Q' \\<Turnstile>\n         Conj\n          (Abs_bset\n            (g `\n             {Q'.\n              \\<langle>f\\<rangle>Q \\<rightarrow>\n              \\<langle>\\<alpha>,Q'\\<rangle>}))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis fresh_star_Pair FL_valid_Act_fresh)"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  Q' \\<Turnstile>\n  Conj\n   (Abs_bset\n     (g `\n      {Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal (1 subgoal):\n 1. Q \\<Turnstile>\n    Act f \\<alpha>\n     (Conj\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<Longrightarrow>\n    False", "from 2"], ["proof (chain)\npicking this:\n  Q' \\<Turnstile>\n  Conj\n   (Abs_bset\n     (g `\n      {Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))", "have \"\\<And>Q''. \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q''\\<rangle> \\<longrightarrow> Q' \\<Turnstile> g Q''\""], ["proof (prove)\nusing this:\n  Q' \\<Turnstile>\n  Conj\n   (Abs_bset\n     (g `\n      {Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>}))\n\ngoal (1 subgoal):\n 1. \\<And>Q''.\n       \\<langle>f\\<rangle>Q \\<rightarrow>\n       \\<langle>\\<alpha>,Q''\\<rangle> \\<longrightarrow>\n       Q' \\<Turnstile> g Q''", "by (simp add: finite_supp_image card_image)"], ["proof (state)\nthis:\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,?Q''9\\<rangle> \\<longrightarrow>\n  Q' \\<Turnstile> g ?Q''9\n\ngoal (1 subgoal):\n 1. Q \\<Turnstile>\n    Act f \\<alpha>\n     (Conj\n       (Abs_bset\n         (g `\n          {Q'.\n           \\<langle>f\\<rangle>Q \\<rightarrow>\n           \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<Longrightarrow>\n    False", "with 1 and \"*\""], ["proof (chain)\npicking this:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,?Q''9\\<rangle> \\<longrightarrow>\n  Q' \\<Turnstile> g ?Q''9", "show False"], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,?Q''9\\<rangle> \\<longrightarrow>\n  Q' \\<Turnstile> g ?Q''9\n\ngoal (1 subgoal):\n 1. False", "using is_distinguishing_formula_def"], ["proof (prove)\nusing this:\n  \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle>\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     g Q' \\<in> \\<A>[L (\\<alpha>, F, f)] \\<and>\n     supp (g Q') \\<subseteq> supp (L (\\<alpha>, F, f), P') \\<and>\n     g Q' distinguishes P' from Q'\n  \\<langle>f\\<rangle>Q \\<rightarrow>\n  \\<langle>\\<alpha>,?Q''9\\<rangle> \\<longrightarrow>\n  Q' \\<Turnstile> g ?Q''9\n  ?x distinguishes ?P from ?Q \\<equiv>\n  ?P \\<Turnstile> ?x \\<and> \\<not> ?Q \\<Turnstile> ?x\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> Q \\<Turnstile>\n         Act f \\<alpha>\n          (Conj\n            (Abs_bset\n              (g `\n               {Q'.\n                \\<langle>f\\<rangle>Q \\<rightarrow>\n                \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "ultimately"], ["proof (chain)\npicking this:\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<in> \\<A>[F]\n  P \\<Turnstile>\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))\n  \\<not> Q \\<Turnstile>\n         Act f \\<alpha>\n          (Conj\n            (Abs_bset\n              (g `\n               {Q'.\n                \\<langle>f\\<rangle>Q \\<rightarrow>\n                \\<langle>\\<alpha>,Q'\\<rangle>})))", "have False"], ["proof (prove)\nusing this:\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>}))) \\<in> \\<A>[F]\n  P \\<Turnstile>\n  Act f \\<alpha>\n   (Conj\n     (Abs_bset\n       (g `\n        {Q'.\n         \\<langle>f\\<rangle>Q \\<rightarrow>\n         \\<langle>\\<alpha>,Q'\\<rangle>})))\n  \\<not> Q \\<Turnstile>\n         Act f \\<alpha>\n          (Conj\n            (Abs_bset\n              (g `\n               {Q'.\n                \\<langle>f\\<rangle>Q \\<rightarrow>\n                \\<langle>\\<alpha>,Q'\\<rangle>})))\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<open>FL_logically_equivalent F P Q\\<close> FL_logically_equivalent_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "}"], ["proof (state)\nthis:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> FL_logically_equivalent (L (\\<alpha>, F, f)) P'\n             Q' \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>FL_logically_equivalent F P Q; f \\<in>\\<^sub>f\\<^sub>s F;\n     bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F, f);\n     \\<langle>f\\<rangle>P \\<rightarrow>\n     \\<langle>\\<alpha>,P'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Q'.\n                         \\<langle>f\\<rangle>Q \\<rightarrow>\n                         \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                         FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "then"], ["proof (chain)\npicking this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> FL_logically_equivalent (L (\\<alpha>, F, f)) P'\n             Q' \\<Longrightarrow>\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>Q'\\<in>{Q'.\n                   \\<langle>f\\<rangle>Q \\<rightarrow>\n                   \\<langle>\\<alpha>,Q'\\<rangle>}.\n     \\<not> FL_logically_equivalent (L (\\<alpha>, F, f)) P'\n             Q' \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>Q'.\n       \\<langle>f\\<rangle>Q \\<rightarrow>\n       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n       FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'", "by auto"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n     FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>Q'.\n     \\<langle>f\\<rangle>Q \\<rightarrow> \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n     FL_logically_equivalent (L (\\<alpha>, F, f)) P' Q'\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "}"], ["proof (state)\nthis:\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   bn ?\\<alpha>11 \\<sharp>* (\\<langle>?f11\\<rangle>?Q11, ?F11, ?f11);\n   \\<langle>?f11\\<rangle>?P11 \\<rightarrow>\n   \\<langle>?\\<alpha>11,?P'11\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q'.\n                       \\<langle>?f11\\<rangle>?Q11 \\<rightarrow>\n                       \\<langle>?\\<alpha>11,Q'\\<rangle> \\<and>\n                       FL_logically_equivalent (L (?\\<alpha>11, ?F11, ?f11))\n                        ?P'11 Q'\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "ultimately"], ["proof (chain)\npicking this:\n  symp (FL_logically_equivalent ?F11)\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   \\<langle>?f11\\<rangle>?P11 \\<turnstile> ?\\<phi>11\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?f11\\<rangle>?Q11 \\<turnstile> ?\\<phi>11\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   bn ?\\<alpha>11 \\<sharp>* (\\<langle>?f11\\<rangle>?Q11, ?F11, ?f11);\n   \\<langle>?f11\\<rangle>?P11 \\<rightarrow>\n   \\<langle>?\\<alpha>11,?P'11\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q'.\n                       \\<langle>?f11\\<rangle>?Q11 \\<rightarrow>\n                       \\<langle>?\\<alpha>11,Q'\\<rangle> \\<and>\n                       FL_logically_equivalent (L (?\\<alpha>11, ?F11, ?f11))\n                        ?P'11 Q'", "show ?thesis"], ["proof (prove)\nusing this:\n  symp (FL_logically_equivalent ?F11)\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   \\<langle>?f11\\<rangle>?P11 \\<turnstile> ?\\<phi>11\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?f11\\<rangle>?Q11 \\<turnstile> ?\\<phi>11\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   bn ?\\<alpha>11 \\<sharp>* (\\<langle>?f11\\<rangle>?Q11, ?F11, ?f11);\n   \\<langle>?f11\\<rangle>?P11 \\<rightarrow>\n   \\<langle>?\\<alpha>11,?P'11\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q'.\n                       \\<langle>?f11\\<rangle>?Q11 \\<rightarrow>\n                       \\<langle>?\\<alpha>11,Q'\\<rangle> \\<and>\n                       FL_logically_equivalent (L (?\\<alpha>11, ?F11, ?f11))\n                        ?P'11 Q'\n\ngoal (1 subgoal):\n 1. is_L_bisimulation FL_logically_equivalent", "unfolding is_L_bisimulation_def"], ["proof (prove)\nusing this:\n  symp (FL_logically_equivalent ?F11)\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   \\<langle>?f11\\<rangle>?P11 \\<turnstile> ?\\<phi>11\\<rbrakk>\n  \\<Longrightarrow> \\<langle>?f11\\<rangle>?Q11 \\<turnstile> ?\\<phi>11\n  \\<lbrakk>FL_logically_equivalent ?F11 ?P11 ?Q11;\n   ?f11 \\<in>\\<^sub>f\\<^sub>s ?F11;\n   bn ?\\<alpha>11 \\<sharp>* (\\<langle>?f11\\<rangle>?Q11, ?F11, ?f11);\n   \\<langle>?f11\\<rangle>?P11 \\<rightarrow>\n   \\<langle>?\\<alpha>11,?P'11\\<rangle>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Q'.\n                       \\<langle>?f11\\<rangle>?Q11 \\<rightarrow>\n                       \\<langle>?\\<alpha>11,Q'\\<rangle> \\<and>\n                       FL_logically_equivalent (L (?\\<alpha>11, ?F11, ?f11))\n                        ?P'11 Q'\n\ngoal (1 subgoal):\n 1. \\<forall>F.\n       symp (FL_logically_equivalent F) \\<and>\n       (\\<forall>P Q.\n           FL_logically_equivalent F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<phi>.\n                   \\<langle>f\\<rangle>P \\<turnstile>\n                   \\<phi> \\<longrightarrow>\n                   \\<langle>f\\<rangle>Q \\<turnstile> \\<phi>))) \\<and>\n       (\\<forall>P Q.\n           FL_logically_equivalent F P Q \\<longrightarrow>\n           (\\<forall>f.\n               f \\<in>\\<^sub>f\\<^sub>s F \\<longrightarrow>\n               (\\<forall>\\<alpha> P'.\n                   bn \\<alpha> \\<sharp>* (\\<langle>f\\<rangle>Q, F,\n    f) \\<longrightarrow>\n                   \\<langle>f\\<rangle>P \\<rightarrow>\n                   \\<langle>\\<alpha>,P'\\<rangle> \\<longrightarrow>\n                   (\\<exists>Q'.\n                       \\<langle>f\\<rangle>Q \\<rightarrow>\n                       \\<langle>\\<alpha>,Q'\\<rangle> \\<and>\n                       FL_logically_equivalent (L (\\<alpha>, F, f)) P'\n                        Q'))))", "by metis"], ["proof (state)\nthis:\n  is_L_bisimulation FL_logically_equivalent\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem FL_equivalence_implies_bisimilarity: assumes \"FL_logically_equivalent F P Q\" shows \"P \\<sim>\\<cdot>[F] Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>[F] Q", "using assms"], ["proof (prove)\nusing this:\n  FL_logically_equivalent F P Q\n\ngoal (1 subgoal):\n 1. P \\<sim>\\<cdot>[F] Q", "by (metis FL_bisimilar_def FL_equivalence_is_L_bisimulation)"], ["", "end"], ["", "end"]]}