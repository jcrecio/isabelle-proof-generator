{"file_name": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS/Weak_Formula.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Modal_Logics_for_NTS", "problem_names": ["lemma Act_tau_eq_iff [simp]:\n    \"Act \\<tau> x1 = Act \\<alpha> x2 \\<longleftrightarrow> \\<alpha> = \\<tau> \\<and> x2 = x1\"\n    (is \"?l \\<longleftrightarrow> ?r\")", "lemma card_idx_nat' [simp]:\n    \"|UNIV::nat set| <o natLeq +c |UNIV::'idx set|\"", "lemma tau_steps_eqvt (*[eqvt]*) [simp]:\n    \"p \\<bullet> tau_steps x n = tau_steps (p \\<bullet> x) (p \\<bullet> n)\"", "lemma tau_steps_eqvt' [simp]:\n    \"p \\<bullet> tau_steps x = tau_steps (p \\<bullet> x)\"", "lemma tau_steps_eqvt_raw [simp]:\n    \"p \\<bullet> tau_steps = tau_steps\"", "lemma tau_steps_add [simp]:\n    \"tau_steps (tau_steps x m) n = tau_steps x (m + n)\"", "lemma tau_steps_not_self:\n    \"x = tau_steps x n \\<longleftrightarrow> n = 0\"", "lemma finite_supp_map_bset_tau_steps [simp]:\n    \"finite (supp (map_bset (tau_steps x) (Abs_bset UNIV :: nat set['idx])))\"", "lemma weak_tau_modality_eqvt (*[eqvt]*) [simp]:\n    \"p \\<bullet> weak_tau_modality x = weak_tau_modality (p \\<bullet> x)\"", "lemma weak_tau_modality_eq_iff [simp]:\n    \"weak_tau_modality x = weak_tau_modality y \\<longleftrightarrow> x = y\"", "lemma supp_weak_tau_modality [simp]:\n    \"supp (weak_tau_modality x) = supp x\"", "lemma Act_weak_tau_modality_eq_iff [simp]:\n    \"Act \\<alpha>1 (weak_tau_modality x1) = Act \\<alpha>2 (weak_tau_modality x2) \\<longleftrightarrow> Act \\<alpha>1 x1 = Act \\<alpha>2 x2\"", "lemma weak_action_modality_eqvt (*[eqvt]*) [simp]:\n    \"p \\<bullet> (\\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x) = \\<langle>\\<langle>p \\<bullet> \\<alpha>\\<rangle>\\<rangle>(p \\<bullet> x)\"", "lemma weak_action_modality_tau:\n    \"(\\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>x) = weak_tau_modality x\"", "lemma weak_action_modality_not_tau:\n    assumes \"\\<alpha> \\<noteq> \\<tau>\"\n    shows \"(\\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x) = weak_tau_modality (Act \\<alpha> (weak_tau_modality x))\"", "lemma weak_action_modality_eq:\n    assumes \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2\"\n    shows \"(\\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1) = (\\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2)\"", "lemma finite_supp_wf_Pred [simp]: \"finite (supp (binsert (Pred \\<phi>) (bsingleton x)))\"", "lemma weak_formula_eqvt (*[eqvt]*) [simp]: \"weak_formula x \\<Longrightarrow> weak_formula (p \\<bullet> x)\""], "translations": [["", "lemma Act_tau_eq_iff [simp]:\n    \"Act \\<tau> x1 = Act \\<alpha> x2 \\<longleftrightarrow> \\<alpha> = \\<tau> \\<and> x2 = x1\"\n    (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Act \\<tau> x1 = Act \\<alpha> x2) = (\\<alpha> = \\<tau> \\<and> x2 = x1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Act \\<tau> x1 = Act \\<alpha> x2 \\<Longrightarrow>\n    \\<alpha> = \\<tau> \\<and> x2 = x1\n 2. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "assume \"?l\""], ["proof (state)\nthis:\n  Act \\<tau> x1 = Act \\<alpha> x2\n\ngoal (2 subgoals):\n 1. Act \\<tau> x1 = Act \\<alpha> x2 \\<Longrightarrow>\n    \\<alpha> = \\<tau> \\<and> x2 = x1\n 2. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "then"], ["proof (chain)\npicking this:\n  Act \\<tau> x1 = Act \\<alpha> x2", "obtain p where p_\\<alpha>: \"p \\<bullet> \\<tau> = \\<alpha>\" and p_x: \"p \\<bullet> x1 = x2\" and fresh: \"(supp x1 - bn \\<tau>) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  Act \\<tau> x1 = Act \\<alpha> x2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<bullet> \\<tau> = \\<alpha>; p \\<bullet> x1 = x2;\n         (supp x1 - bn \\<tau>) \\<sharp>* p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Act_eq_iff_perm)"], ["proof (state)\nthis:\n  p \\<bullet> \\<tau> = \\<alpha>\n  p \\<bullet> x1 = x2\n  (supp x1 - bn \\<tau>) \\<sharp>* p\n\ngoal (2 subgoals):\n 1. Act \\<tau> x1 = Act \\<alpha> x2 \\<Longrightarrow>\n    \\<alpha> = \\<tau> \\<and> x2 = x1\n 2. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "from p_\\<alpha>"], ["proof (chain)\npicking this:\n  p \\<bullet> \\<tau> = \\<alpha>", "have \"\\<alpha> = \\<tau>\""], ["proof (prove)\nusing this:\n  p \\<bullet> \\<tau> = \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<tau>", "by (metis tau_eqvt)"], ["proof (state)\nthis:\n  \\<alpha> = \\<tau>\n\ngoal (2 subgoals):\n 1. Act \\<tau> x1 = Act \\<alpha> x2 \\<Longrightarrow>\n    \\<alpha> = \\<tau> \\<and> x2 = x1\n 2. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "moreover"], ["proof (state)\nthis:\n  \\<alpha> = \\<tau>\n\ngoal (2 subgoals):\n 1. Act \\<tau> x1 = Act \\<alpha> x2 \\<Longrightarrow>\n    \\<alpha> = \\<tau> \\<and> x2 = x1\n 2. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "from fresh and p_x"], ["proof (chain)\npicking this:\n  (supp x1 - bn \\<tau>) \\<sharp>* p\n  p \\<bullet> x1 = x2", "have \"x2 = x1\""], ["proof (prove)\nusing this:\n  (supp x1 - bn \\<tau>) \\<sharp>* p\n  p \\<bullet> x1 = x2\n\ngoal (1 subgoal):\n 1. x2 = x1", "by (simp add: supp_perm_eq)"], ["proof (state)\nthis:\n  x2 = x1\n\ngoal (2 subgoals):\n 1. Act \\<tau> x1 = Act \\<alpha> x2 \\<Longrightarrow>\n    \\<alpha> = \\<tau> \\<and> x2 = x1\n 2. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "ultimately"], ["proof (chain)\npicking this:\n  \\<alpha> = \\<tau>\n  x2 = x1", "show \"?r\""], ["proof (prove)\nusing this:\n  \\<alpha> = \\<tau>\n  x2 = x1\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<tau> \\<and> x2 = x1", ".."], ["proof (state)\nthis:\n  \\<alpha> = \\<tau> \\<and> x2 = x1\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "assume \"?r\""], ["proof (state)\nthis:\n  \\<alpha> = \\<tau> \\<and> x2 = x1\n\ngoal (1 subgoal):\n 1. \\<alpha> = \\<tau> \\<and> x2 = x1 \\<Longrightarrow>\n    Act \\<tau> x1 = Act \\<alpha> x2", "then"], ["proof (chain)\npicking this:\n  \\<alpha> = \\<tau> \\<and> x2 = x1", "show \"?l\""], ["proof (prove)\nusing this:\n  \\<alpha> = \\<tau> \\<and> x2 = x1\n\ngoal (1 subgoal):\n 1. Act \\<tau> x1 = Act \\<alpha> x2", "by simp"], ["proof (state)\nthis:\n  Act \\<tau> x1 = Act \\<alpha> x2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Weak action modality\\<close>"], ["", "text \\<open>The definition of (strong) formulas is parametric in the index type, but from now on we\nwant to work with a fixed (sufficiently large) index type.\n\nAlso, we use~@{term \\<tau>} in our definition of weak formulas.\\<close>"], ["", "locale indexed_weak_nominal_ts = weak_nominal_ts satisfies transition\n  for satisfies :: \"'state::fs \\<Rightarrow> 'pred::fs \\<Rightarrow> bool\" (infix \"\\<turnstile>\" 70)\n  and transition :: \"'state \\<Rightarrow> ('act::bn,'state) residual \\<Rightarrow> bool\" (infix \"\\<rightarrow>\" 70) +\n  assumes card_idx_perm: \"|UNIV::perm set| <o |UNIV::'idx set|\"\n      and card_idx_state: \"|UNIV::'state set| <o |UNIV::'idx set|\"\n      and card_idx_nat: \"|UNIV::nat set| <o |UNIV::'idx set|\"\nbegin"], ["", "text \\<open>The assumption @{thm card_idx_nat} is redundant: it is already implied by\n  @{thm card_idx_perm}.  A formal proof of this fact is left for future work.\\<close>"], ["", "lemma card_idx_nat' [simp]:\n    \"|UNIV::nat set| <o natLeq +c |UNIV::'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| <o natLeq +c |UNIV|", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. |UNIV| <o natLeq +c |UNIV|", "note card_idx_nat"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| <o natLeq +c |UNIV|", "also"], ["proof (state)\nthis:\n  |UNIV| <o |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| <o natLeq +c |UNIV|", "have \"|UNIV :: 'idx set| \\<le>o natLeq +c |UNIV :: 'idx set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |UNIV| \\<le>o natLeq +c |UNIV|", "by (metis Cnotzero_UNIV ordLeq_csum2)"], ["proof (state)\nthis:\n  |UNIV| \\<le>o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| <o natLeq +c |UNIV|", "finally"], ["proof (chain)\npicking this:\n  |UNIV| <o natLeq +c |UNIV|", "show ?thesis"], ["proof (prove)\nusing this:\n  |UNIV| <o natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. |UNIV| <o natLeq +c |UNIV|", "."], ["proof (state)\nthis:\n  |UNIV| <o natLeq +c |UNIV|\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec tau_steps :: \"('idx,'pred::fs,'act::bn) formula \\<Rightarrow> nat \\<Rightarrow> ('idx,'pred,'act) formula\"\n    where\n      \"tau_steps x 0       = x\"\n    | \"tau_steps x (Suc n) = Act \\<tau> (tau_steps x n)\""], ["", "lemma tau_steps_eqvt (*[eqvt]*) [simp]:\n    \"p \\<bullet> tau_steps x n = tau_steps (p \\<bullet> x) (p \\<bullet> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> tau_steps x n = tau_steps (p \\<bullet> x) (p \\<bullet> n)", "by (induct n) (simp_all add: permute_nat_def tau_eqvt)"], ["", "lemma tau_steps_eqvt' [simp]:\n    \"p \\<bullet> tau_steps x = tau_steps (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> tau_steps x = tau_steps (p \\<bullet> x)", "by (simp add: permute_fun_def)"], ["", "lemma tau_steps_eqvt_raw [simp]:\n    \"p \\<bullet> tau_steps = tau_steps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> tau_steps = tau_steps", "by (simp add: permute_fun_def)"], ["", "lemma tau_steps_add [simp]:\n    \"tau_steps (tau_steps x m) n = tau_steps x (m + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tau_steps (tau_steps x m) n = tau_steps x (m + n)", "by (induct n) auto"], ["", "lemma tau_steps_not_self:\n    \"x = tau_steps x n \\<longleftrightarrow> n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = tau_steps x n) = (n = 0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x = tau_steps x n \\<Longrightarrow> n = 0\n 2. n = 0 \\<Longrightarrow> x = tau_steps x n", "assume \"x = tau_steps x n\""], ["proof (state)\nthis:\n  x = tau_steps x n\n\ngoal (2 subgoals):\n 1. x = tau_steps x n \\<Longrightarrow> n = 0\n 2. n = 0 \\<Longrightarrow> x = tau_steps x n", "then"], ["proof (chain)\npicking this:\n  x = tau_steps x n", "show \"n = 0\""], ["proof (prove)\nusing this:\n  x = tau_steps x n\n\ngoal (1 subgoal):\n 1. n = 0", "proof (induct n arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x = tau_steps x 0 \\<Longrightarrow> 0 = 0\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x. x = tau_steps x n \\<Longrightarrow> n = 0;\n        x = tau_steps x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "case 0"], ["proof (state)\nthis:\n  x = tau_steps x 0\n\ngoal (2 subgoals):\n 1. \\<And>x. x = tau_steps x 0 \\<Longrightarrow> 0 = 0\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x. x = tau_steps x n \\<Longrightarrow> n = 0;\n        x = tau_steps x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = 0", ".."], ["proof (state)\nthis:\n  0 = 0\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x. x = tau_steps x n \\<Longrightarrow> n = 0;\n        x = tau_steps x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x. x = tau_steps x n \\<Longrightarrow> n = 0;\n        x = tau_steps x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "case (Suc n)"], ["proof (state)\nthis:\n  ?x7 = tau_steps ?x7 n \\<Longrightarrow> n = 0\n  x = tau_steps x (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x. x = tau_steps x n \\<Longrightarrow> n = 0;\n        x = tau_steps x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "then"], ["proof (chain)\npicking this:\n  ?x7 = tau_steps ?x7 n \\<Longrightarrow> n = 0\n  x = tau_steps x (Suc n)", "have \"x = Act \\<tau> (tau_steps x n)\""], ["proof (prove)\nusing this:\n  ?x7 = tau_steps ?x7 n \\<Longrightarrow> n = 0\n  x = tau_steps x (Suc n)\n\ngoal (1 subgoal):\n 1. x = Act \\<tau> (tau_steps x n)", "by simp"], ["proof (state)\nthis:\n  x = Act \\<tau> (tau_steps x n)\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x. x = tau_steps x n \\<Longrightarrow> n = 0;\n        x = tau_steps x (Suc n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "then"], ["proof (chain)\npicking this:\n  x = Act \\<tau> (tau_steps x n)", "show \"Suc n = 0\""], ["proof (prove)\nusing this:\n  x = Act \\<tau> (tau_steps x n)\n\ngoal (1 subgoal):\n 1. Suc n = 0", "proof (induct x)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xset.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x.\n           \\<lbrakk>x \\<in> set_bset xset;\n            x = Act \\<tau> (tau_steps x n)\\<rbrakk>\n           \\<Longrightarrow> Suc n = 0;\n        Conj xset = Act \\<tau> (tau_steps (Conj xset) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0\n 2. \\<And>x.\n       \\<lbrakk>x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0;\n        Formula.Not x = Act \\<tau> (tau_steps (Formula.Not x) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0\n 3. \\<And>pred.\n       Pred pred = Act \\<tau> (tau_steps (Pred pred) n) \\<Longrightarrow>\n       Suc n = 0\n 4. \\<And>act x.\n       \\<lbrakk>x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0;\n        Act act x = Act \\<tau> (tau_steps (Act act x) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "case (Act \\<alpha> x)"], ["proof (state)\nthis:\n  x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0\n  Act \\<alpha> x = Act \\<tau> (tau_steps (Act \\<alpha> x) n)\n\ngoal (4 subgoals):\n 1. \\<And>xset.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x.\n           \\<lbrakk>x \\<in> set_bset xset;\n            x = Act \\<tau> (tau_steps x n)\\<rbrakk>\n           \\<Longrightarrow> Suc n = 0;\n        Conj xset = Act \\<tau> (tau_steps (Conj xset) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0\n 2. \\<And>x.\n       \\<lbrakk>x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0;\n        Formula.Not x = Act \\<tau> (tau_steps (Formula.Not x) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0\n 3. \\<And>pred.\n       Pred pred = Act \\<tau> (tau_steps (Pred pred) n) \\<Longrightarrow>\n       Suc n = 0\n 4. \\<And>act x.\n       \\<lbrakk>x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0;\n        Act act x = Act \\<tau> (tau_steps (Act act x) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "then"], ["proof (chain)\npicking this:\n  x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0\n  Act \\<alpha> x = Act \\<tau> (tau_steps (Act \\<alpha> x) n)", "have \"x = tau_steps (Act \\<tau> x) n\""], ["proof (prove)\nusing this:\n  x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0\n  Act \\<alpha> x = Act \\<tau> (tau_steps (Act \\<alpha> x) n)\n\ngoal (1 subgoal):\n 1. x = tau_steps (Act \\<tau> x) n", "by (metis Act_tau_eq_iff)"], ["proof (state)\nthis:\n  x = tau_steps (Act \\<tau> x) n\n\ngoal (4 subgoals):\n 1. \\<And>xset.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x.\n           \\<lbrakk>x \\<in> set_bset xset;\n            x = Act \\<tau> (tau_steps x n)\\<rbrakk>\n           \\<Longrightarrow> Suc n = 0;\n        Conj xset = Act \\<tau> (tau_steps (Conj xset) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0\n 2. \\<And>x.\n       \\<lbrakk>x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0;\n        Formula.Not x = Act \\<tau> (tau_steps (Formula.Not x) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0\n 3. \\<And>pred.\n       Pred pred = Act \\<tau> (tau_steps (Pred pred) n) \\<Longrightarrow>\n       Suc n = 0\n 4. \\<And>act x.\n       \\<lbrakk>x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0;\n        Act act x = Act \\<tau> (tau_steps (Act act x) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0", "with Act.hyps"], ["proof (chain)\npicking this:\n  x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0\n  x = tau_steps (Act \\<tau> x) n", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0\n  x = tau_steps (Act \\<tau> x) n\n\ngoal (1 subgoal):\n 1. Suc n = 0", "by (metis add_Suc tau_steps.simps(2) tau_steps_add)"], ["proof (state)\nthis:\n  Suc n = 0\n\ngoal (3 subgoals):\n 1. \\<And>xset.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x.\n           \\<lbrakk>x \\<in> set_bset xset;\n            x = Act \\<tau> (tau_steps x n)\\<rbrakk>\n           \\<Longrightarrow> Suc n = 0;\n        Conj xset = Act \\<tau> (tau_steps (Conj xset) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0\n 2. \\<And>x.\n       \\<lbrakk>x = Act \\<tau> (tau_steps x n) \\<Longrightarrow> Suc n = 0;\n        Formula.Not x = Act \\<tau> (tau_steps (Formula.Not x) n)\\<rbrakk>\n       \\<Longrightarrow> Suc n = 0\n 3. \\<And>pred.\n       Pred pred = Act \\<tau> (tau_steps (Pred pred) n) \\<Longrightarrow>\n       Suc n = 0", "qed simp_all"], ["proof (state)\nthis:\n  Suc n = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> x = tau_steps x n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> x = tau_steps x n", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> x = tau_steps x n", "then"], ["proof (chain)\npicking this:\n  n = 0", "show \"x = tau_steps x n\""], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. x = tau_steps x n", "by simp"], ["proof (state)\nthis:\n  x = tau_steps x n\n\ngoal:\nNo subgoals!", "qed"], ["", "definition weak_tau_modality :: \"('idx,'pred::fs,'act::bn) formula \\<Rightarrow> ('idx,'pred,'act) formula\"\n    where\n      \"weak_tau_modality x \\<equiv> Disj (map_bset (tau_steps x) (Abs_bset UNIV))\""], ["", "lemma finite_supp_map_bset_tau_steps [simp]:\n    \"finite (supp (map_bset (tau_steps x) (Abs_bset UNIV :: nat set['idx])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))", "have \"eqvt map_bset\" and \"eqvt tau_steps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt map_bset &&& eqvt tau_steps", "by (simp add: eqvtI)+"], ["proof (state)\nthis:\n  eqvt map_bset\n  eqvt tau_steps\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))", "then"], ["proof (chain)\npicking this:\n  eqvt map_bset\n  eqvt tau_steps", "have \"supp (map_bset (tau_steps x)) \\<subseteq> supp x\""], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt tau_steps\n\ngoal (1 subgoal):\n 1. supp (map_bset (tau_steps x)) \\<subseteq> supp x", "using supp_fun_eqvt supp_fun_app supp_fun_app_eqvt"], ["proof (prove)\nusing this:\n  eqvt map_bset\n  eqvt tau_steps\n  eqvt ?f \\<Longrightarrow> supp ?f = {}\n  supp (?f ?x) \\<subseteq> supp ?f \\<union> supp ?x\n  eqvt ?f \\<Longrightarrow> supp (?f ?x) \\<subseteq> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset (tau_steps x)) \\<subseteq> supp x", "by blast"], ["proof (state)\nthis:\n  supp (map_bset (tau_steps x)) \\<subseteq> supp x\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))", "moreover"], ["proof (state)\nthis:\n  supp (map_bset (tau_steps x)) \\<subseteq> supp x\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))", "have \"supp (Abs_bset UNIV :: nat set['idx]) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (Abs_bset UNIV) = {}", "by (simp add: eqvtI supp_fun_eqvt)"], ["proof (state)\nthis:\n  supp (Abs_bset UNIV) = {}\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))", "ultimately"], ["proof (chain)\npicking this:\n  supp (map_bset (tau_steps x)) \\<subseteq> supp x\n  supp (Abs_bset UNIV) = {}", "have \"supp (map_bset (tau_steps x) (Abs_bset UNIV :: nat set['idx])) \\<subseteq> supp x\""], ["proof (prove)\nusing this:\n  supp (map_bset (tau_steps x)) \\<subseteq> supp x\n  supp (Abs_bset UNIV) = {}\n\ngoal (1 subgoal):\n 1. supp (map_bset (tau_steps x) (Abs_bset UNIV)) \\<subseteq> supp x", "using supp_fun_app"], ["proof (prove)\nusing this:\n  supp (map_bset (tau_steps x)) \\<subseteq> supp x\n  supp (Abs_bset UNIV) = {}\n  supp (?f ?x) \\<subseteq> supp ?f \\<union> supp ?x\n\ngoal (1 subgoal):\n 1. supp (map_bset (tau_steps x) (Abs_bset UNIV)) \\<subseteq> supp x", "by blast"], ["proof (state)\nthis:\n  supp (map_bset (tau_steps x) (Abs_bset UNIV)) \\<subseteq> supp x\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))", "then"], ["proof (chain)\npicking this:\n  supp (map_bset (tau_steps x) (Abs_bset UNIV)) \\<subseteq> supp x", "show ?thesis"], ["proof (prove)\nusing this:\n  supp (map_bset (tau_steps x) (Abs_bset UNIV)) \\<subseteq> supp x\n\ngoal (1 subgoal):\n 1. finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))", "by (metis finite_subset finite_supp)"], ["proof (state)\nthis:\n  finite (supp (map_bset (tau_steps x) (Abs_bset UNIV)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weak_tau_modality_eqvt (*[eqvt]*) [simp]:\n    \"p \\<bullet> weak_tau_modality x = weak_tau_modality (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> weak_tau_modality x = weak_tau_modality (p \\<bullet> x)", "unfolding weak_tau_modality_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> Disj (map_bset (tau_steps x) (Abs_bset UNIV)) =\n    Disj (map_bset (tau_steps (p \\<bullet> x)) (Abs_bset UNIV))", "by (simp add: map_bset_eqvt)"], ["", "lemma weak_tau_modality_eq_iff [simp]:\n    \"weak_tau_modality x = weak_tau_modality y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (weak_tau_modality x = weak_tau_modality y) = (x = y)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. weak_tau_modality x = weak_tau_modality y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "assume \"weak_tau_modality x = weak_tau_modality y\""], ["proof (state)\nthis:\n  weak_tau_modality x = weak_tau_modality y\n\ngoal (2 subgoals):\n 1. weak_tau_modality x = weak_tau_modality y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "then"], ["proof (chain)\npicking this:\n  weak_tau_modality x = weak_tau_modality y", "have \"map_bset (tau_steps x) (Abs_bset UNIV :: _ set['idx]) = map_bset (tau_steps y) (Abs_bset UNIV)\""], ["proof (prove)\nusing this:\n  weak_tau_modality x = weak_tau_modality y\n\ngoal (1 subgoal):\n 1. map_bset (tau_steps x) (Abs_bset UNIV) =\n    map_bset (tau_steps y) (Abs_bset UNIV)", "unfolding weak_tau_modality_def"], ["proof (prove)\nusing this:\n  Disj (map_bset (tau_steps x) (Abs_bset UNIV)) =\n  Disj (map_bset (tau_steps y) (Abs_bset UNIV))\n\ngoal (1 subgoal):\n 1. map_bset (tau_steps x) (Abs_bset UNIV) =\n    map_bset (tau_steps y) (Abs_bset UNIV)", "by simp"], ["proof (state)\nthis:\n  map_bset (tau_steps x) (Abs_bset UNIV) =\n  map_bset (tau_steps y) (Abs_bset UNIV)\n\ngoal (2 subgoals):\n 1. weak_tau_modality x = weak_tau_modality y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "with card_idx_nat'"], ["proof (chain)\npicking this:\n  |UNIV| <o natLeq +c |UNIV|\n  map_bset (tau_steps x) (Abs_bset UNIV) =\n  map_bset (tau_steps y) (Abs_bset UNIV)", "have \"range (tau_steps x) = range (tau_steps y)\"\n      (is \"?X = ?Y\")"], ["proof (prove)\nusing this:\n  |UNIV| <o natLeq +c |UNIV|\n  map_bset (tau_steps x) (Abs_bset UNIV) =\n  map_bset (tau_steps y) (Abs_bset UNIV)\n\ngoal (1 subgoal):\n 1. range (tau_steps x) = range (tau_steps y)", "by (metis Abs_bset_inverse' map_bset.rep_eq)"], ["proof (state)\nthis:\n  range (tau_steps x) = range (tau_steps y)\n\ngoal (2 subgoals):\n 1. weak_tau_modality x = weak_tau_modality y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "then"], ["proof (chain)\npicking this:\n  range (tau_steps x) = range (tau_steps y)", "have \"x \\<in> range (tau_steps y)\" and \"y \\<in> range (tau_steps x)\""], ["proof (prove)\nusing this:\n  range (tau_steps x) = range (tau_steps y)\n\ngoal (1 subgoal):\n 1. x \\<in> range (tau_steps y) &&& y \\<in> range (tau_steps x)", "by (metis range_eqI tau_steps.simps(1))+"], ["proof (state)\nthis:\n  x \\<in> range (tau_steps y)\n  y \\<in> range (tau_steps x)\n\ngoal (2 subgoals):\n 1. weak_tau_modality x = weak_tau_modality y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "then"], ["proof (chain)\npicking this:\n  x \\<in> range (tau_steps y)\n  y \\<in> range (tau_steps x)", "obtain nx ny where x: \"x = tau_steps y nx\" and y: \"y = tau_steps x ny\""], ["proof (prove)\nusing this:\n  x \\<in> range (tau_steps y)\n  y \\<in> range (tau_steps x)\n\ngoal (1 subgoal):\n 1. (\\<And>nx ny.\n        \\<lbrakk>x = tau_steps y nx; y = tau_steps x ny\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = tau_steps y nx\n  y = tau_steps x ny\n\ngoal (2 subgoals):\n 1. weak_tau_modality x = weak_tau_modality y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "then"], ["proof (chain)\npicking this:\n  x = tau_steps y nx\n  y = tau_steps x ny", "have \"ny + nx = 0\""], ["proof (prove)\nusing this:\n  x = tau_steps y nx\n  y = tau_steps x ny\n\ngoal (1 subgoal):\n 1. ny + nx = 0", "by (simp add: tau_steps_not_self)"], ["proof (state)\nthis:\n  ny + nx = 0\n\ngoal (2 subgoals):\n 1. weak_tau_modality x = weak_tau_modality y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "with x and y"], ["proof (chain)\npicking this:\n  x = tau_steps y nx\n  y = tau_steps x ny\n  ny + nx = 0", "show \"x = y\""], ["proof (prove)\nusing this:\n  x = tau_steps y nx\n  y = tau_steps x ny\n  ny + nx = 0\n\ngoal (1 subgoal):\n 1. x = y", "by simp"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "assume \"x = y\""], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> weak_tau_modality x = weak_tau_modality y", "then"], ["proof (chain)\npicking this:\n  x = y", "show \"weak_tau_modality x = weak_tau_modality y\""], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. weak_tau_modality x = weak_tau_modality y", "by simp"], ["proof (state)\nthis:\n  weak_tau_modality x = weak_tau_modality y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma supp_weak_tau_modality [simp]:\n    \"supp (weak_tau_modality x) = supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (weak_tau_modality x) = supp x", "unfolding supp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. infinite\n         {b. (a \\<rightleftharpoons> b) \\<bullet> weak_tau_modality\n             x \\<noteq>\n             weak_tau_modality x}} =\n    {a. infinite {b. (a \\<rightleftharpoons> b) \\<bullet> x \\<noteq> x}}", "by simp"], ["", "lemma Act_weak_tau_modality_eq_iff [simp]:\n    \"Act \\<alpha>1 (weak_tau_modality x1) = Act \\<alpha>2 (weak_tau_modality x2) \\<longleftrightarrow> Act \\<alpha>1 x1 = Act \\<alpha>2 x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Act \\<alpha>1 (weak_tau_modality x1) =\n     Act \\<alpha>2 (weak_tau_modality x2)) =\n    (Act \\<alpha>1 x1 = Act \\<alpha>2 x2)", "by (simp add: Act_eq_iff_perm)"], ["", "definition weak_action_modality :: \"'act \\<Rightarrow> ('idx,'pred::fs,'act::bn) formula \\<Rightarrow> ('idx,'pred,'act) formula\" (\"\\<langle>\\<langle>_\\<rangle>\\<rangle>_\")\n    where\n      \"\\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x \\<equiv> if \\<alpha> = \\<tau> then weak_tau_modality x else weak_tau_modality (Act \\<alpha> (weak_tau_modality x))\""], ["", "lemma weak_action_modality_eqvt (*[eqvt]*) [simp]:\n    \"p \\<bullet> (\\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x) = \\<langle>\\<langle>p \\<bullet> \\<alpha>\\<rangle>\\<rangle>(p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x =\n    \\<langle>\\<langle>p \\<bullet> \\<alpha>\\<rangle>\\<rangle>p \\<bullet> x", "using tau_eqvt weak_action_modality_def"], ["proof (prove)\nusing this:\n  ?p \\<bullet> \\<tau> = \\<tau>\n  \\<langle>\\<langle>?\\<alpha>\\<rangle>\\<rangle>?x \\<equiv>\n  if ?\\<alpha> = \\<tau> then weak_tau_modality ?x\n  else weak_tau_modality (Act ?\\<alpha> (weak_tau_modality ?x))\n\ngoal (1 subgoal):\n 1. p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x =\n    \\<langle>\\<langle>p \\<bullet> \\<alpha>\\<rangle>\\<rangle>p \\<bullet> x", "by fastforce"], ["", "lemma weak_action_modality_tau:\n    \"(\\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>x) = weak_tau_modality x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>x = weak_tau_modality x", "unfolding weak_action_modality_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<tau> = \\<tau> then weak_tau_modality x\n     else weak_tau_modality (Act \\<tau> (weak_tau_modality x))) =\n    weak_tau_modality x", "by simp"], ["", "lemma weak_action_modality_not_tau:\n    assumes \"\\<alpha> \\<noteq> \\<tau>\"\n    shows \"(\\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x) = weak_tau_modality (Act \\<alpha> (weak_tau_modality x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x =\n    weak_tau_modality (Act \\<alpha> (weak_tau_modality x))", "using assms"], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x =\n    weak_tau_modality (Act \\<alpha> (weak_tau_modality x))", "unfolding weak_action_modality_def"], ["proof (prove)\nusing this:\n  \\<alpha> \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. (if \\<alpha> = \\<tau> then weak_tau_modality x\n     else weak_tau_modality (Act \\<alpha> (weak_tau_modality x))) =\n    weak_tau_modality (Act \\<alpha> (weak_tau_modality x))", "by simp"], ["", "text \\<open>Equality is modulo $\\alpha$-equivalence.\\<close>"], ["", "text \\<open>Note that the converse of the following lemma does not hold. For instance,\n  for~@{prop \"\\<alpha> \\<noteq> \\<tau>\"} we have @{prop \"(\\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>(Act \\<alpha> (weak_tau_modality x))) = \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x\"} by definition,\n  but clearly not @{prop \"Act \\<tau> (Act \\<alpha> (weak_tau_modality x)) = Act \\<alpha> x\"}.\\<close>"], ["", "lemma weak_action_modality_eq:\n    assumes \"Act \\<alpha>1 x1 = Act \\<alpha>2 x2\"\n    shows \"(\\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1) = (\\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "proof (cases \"\\<alpha>1 = \\<tau>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha>1 = \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2\n 2. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "case True"], ["proof (state)\nthis:\n  \\<alpha>1 = \\<tau>\n\ngoal (2 subgoals):\n 1. \\<alpha>1 = \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2\n 2. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "with assms"], ["proof (chain)\npicking this:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n  \\<alpha>1 = \\<tau>", "have \"\\<alpha>2 = \\<alpha>1 \\<and> x2 = x1\""], ["proof (prove)\nusing this:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n  \\<alpha>1 = \\<tau>\n\ngoal (1 subgoal):\n 1. \\<alpha>2 = \\<alpha>1 \\<and> x2 = x1", "by (metis Act_tau_eq_iff)"], ["proof (state)\nthis:\n  \\<alpha>2 = \\<alpha>1 \\<and> x2 = x1\n\ngoal (2 subgoals):\n 1. \\<alpha>1 = \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2\n 2. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "then"], ["proof (chain)\npicking this:\n  \\<alpha>2 = \\<alpha>1 \\<and> x2 = x1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha>2 = \\<alpha>1 \\<and> x2 = x1\n\ngoal (1 subgoal):\n 1. \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "by simp"], ["proof (state)\nthis:\n  \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n  \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "case False"], ["proof (state)\nthis:\n  \\<alpha>1 \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "from assms"], ["proof (chain)\npicking this:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "obtain p where 1: \"supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\" and 2: \"(supp x1 - bn \\<alpha>1) \\<sharp>* p\"\n      and 3: \"p \\<bullet> x1 = x2\" and 4: \"supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\" and 5: \"(supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\"\n      and 6: \"p \\<bullet> \\<alpha>1 = \\<alpha>2\""], ["proof (prove)\nusing this:\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2;\n         (supp x1 - bn \\<alpha>1) \\<sharp>* p; p \\<bullet> x1 = x2;\n         supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2;\n         (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p;\n         p \\<bullet> \\<alpha>1 = \\<alpha>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Act_eq_iff_perm)"], ["proof (state)\nthis:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> x1 = x2\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "from 1"], ["proof (chain)\npicking this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2", "have \"supp (weak_tau_modality x1) - bn \\<alpha>1 = supp (weak_tau_modality x2) - bn \\<alpha>2\""], ["proof (prove)\nusing this:\n  supp x1 - bn \\<alpha>1 = supp x2 - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. supp (weak_tau_modality x1) - bn \\<alpha>1 =\n    supp (weak_tau_modality x2) - bn \\<alpha>2", "by (metis supp_weak_tau_modality)"], ["proof (state)\nthis:\n  supp (weak_tau_modality x1) - bn \\<alpha>1 =\n  supp (weak_tau_modality x2) - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "moreover"], ["proof (state)\nthis:\n  supp (weak_tau_modality x1) - bn \\<alpha>1 =\n  supp (weak_tau_modality x2) - bn \\<alpha>2\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "from 2"], ["proof (chain)\npicking this:\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p", "have \"(supp (weak_tau_modality x1) - bn \\<alpha>1) \\<sharp>* p\""], ["proof (prove)\nusing this:\n  (supp x1 - bn \\<alpha>1) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. (supp (weak_tau_modality x1) - bn \\<alpha>1) \\<sharp>* p", "by (metis supp_weak_tau_modality)"], ["proof (state)\nthis:\n  (supp (weak_tau_modality x1) - bn \\<alpha>1) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "moreover"], ["proof (state)\nthis:\n  (supp (weak_tau_modality x1) - bn \\<alpha>1) \\<sharp>* p\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "from 3"], ["proof (chain)\npicking this:\n  p \\<bullet> x1 = x2", "have \"p \\<bullet> weak_tau_modality x1 = weak_tau_modality x2\""], ["proof (prove)\nusing this:\n  p \\<bullet> x1 = x2\n\ngoal (1 subgoal):\n 1. p \\<bullet> weak_tau_modality x1 = weak_tau_modality x2", "by (metis weak_tau_modality_eqvt)"], ["proof (state)\nthis:\n  p \\<bullet> weak_tau_modality x1 = weak_tau_modality x2\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "ultimately"], ["proof (chain)\npicking this:\n  supp (weak_tau_modality x1) - bn \\<alpha>1 =\n  supp (weak_tau_modality x2) - bn \\<alpha>2\n  (supp (weak_tau_modality x1) - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> weak_tau_modality x1 = weak_tau_modality x2", "have \"Act \\<alpha>1 (weak_tau_modality x1) = Act \\<alpha>2 (weak_tau_modality x2)\""], ["proof (prove)\nusing this:\n  supp (weak_tau_modality x1) - bn \\<alpha>1 =\n  supp (weak_tau_modality x2) - bn \\<alpha>2\n  (supp (weak_tau_modality x1) - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> weak_tau_modality x1 = weak_tau_modality x2\n\ngoal (1 subgoal):\n 1. Act \\<alpha>1 (weak_tau_modality x1) =\n    Act \\<alpha>2 (weak_tau_modality x2)", "using 4 and 5 and 6 and Act_eq_iff_perm"], ["proof (prove)\nusing this:\n  supp (weak_tau_modality x1) - bn \\<alpha>1 =\n  supp (weak_tau_modality x2) - bn \\<alpha>2\n  (supp (weak_tau_modality x1) - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> weak_tau_modality x1 = weak_tau_modality x2\n  supp \\<alpha>1 - bn \\<alpha>1 = supp \\<alpha>2 - bn \\<alpha>2\n  (supp \\<alpha>1 - bn \\<alpha>1) \\<sharp>* p\n  p \\<bullet> \\<alpha>1 = \\<alpha>2\n  (Act ?\\<alpha>1.0 ?x1.0 = Act ?\\<alpha>2.0 ?x2.0) =\n  (\\<exists>p.\n      supp ?x1.0 - bn ?\\<alpha>1.0 = supp ?x2.0 - bn ?\\<alpha>2.0 \\<and>\n      (supp ?x1.0 - bn ?\\<alpha>1.0) \\<sharp>* p \\<and>\n      p \\<bullet> ?x1.0 = ?x2.0 \\<and>\n      supp ?\\<alpha>1.0 - bn ?\\<alpha>1.0 =\n      supp ?\\<alpha>2.0 - bn ?\\<alpha>2.0 \\<and>\n      (supp ?\\<alpha>1.0 - bn ?\\<alpha>1.0) \\<sharp>* p \\<and>\n      p \\<bullet> ?\\<alpha>1.0 = ?\\<alpha>2.0)\n\ngoal (1 subgoal):\n 1. Act \\<alpha>1 (weak_tau_modality x1) =\n    Act \\<alpha>2 (weak_tau_modality x2)", "by blast"], ["proof (state)\nthis:\n  Act \\<alpha>1 (weak_tau_modality x1) =\n  Act \\<alpha>2 (weak_tau_modality x2)\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "moreover"], ["proof (state)\nthis:\n  Act \\<alpha>1 (weak_tau_modality x1) =\n  Act \\<alpha>2 (weak_tau_modality x2)\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "from \\<open>\\<alpha>1 \\<noteq> \\<tau>\\<close> and assms"], ["proof (chain)\npicking this:\n  \\<alpha>1 \\<noteq> \\<tau>\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2", "have \"\\<alpha>2 \\<noteq> \\<tau>\""], ["proof (prove)\nusing this:\n  \\<alpha>1 \\<noteq> \\<tau>\n  Act \\<alpha>1 x1 = Act \\<alpha>2 x2\n\ngoal (1 subgoal):\n 1. \\<alpha>2 \\<noteq> \\<tau>", "by (metis Act_tau_eq_iff)"], ["proof (state)\nthis:\n  \\<alpha>2 \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<alpha>1 \\<noteq> \\<tau> \\<Longrightarrow>\n    \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "ultimately"], ["proof (chain)\npicking this:\n  Act \\<alpha>1 (weak_tau_modality x1) =\n  Act \\<alpha>2 (weak_tau_modality x2)\n  \\<alpha>2 \\<noteq> \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  Act \\<alpha>1 (weak_tau_modality x1) =\n  Act \\<alpha>2 (weak_tau_modality x2)\n  \\<alpha>2 \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "using \\<open>\\<alpha>1 \\<noteq> \\<tau>\\<close>"], ["proof (prove)\nusing this:\n  Act \\<alpha>1 (weak_tau_modality x1) =\n  Act \\<alpha>2 (weak_tau_modality x2)\n  \\<alpha>2 \\<noteq> \\<tau>\n  \\<alpha>1 \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n    \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2", "by (simp add: weak_action_modality_not_tau)"], ["proof (state)\nthis:\n  \\<langle>\\<langle>\\<alpha>1\\<rangle>\\<rangle>x1 =\n  \\<langle>\\<langle>\\<alpha>2\\<rangle>\\<rangle>x2\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Weak formulas\\<close>"], ["", "inductive weak_formula :: \"('idx,'pred::fs,'act::bn) formula \\<Rightarrow> bool\"\n    where\n      wf_Conj: \"finite (supp xset) \\<Longrightarrow> (\\<And>x. x \\<in> set_bset xset \\<Longrightarrow> weak_formula x) \\<Longrightarrow> weak_formula (Conj xset)\"\n    | wf_Not: \"weak_formula x \\<Longrightarrow> weak_formula (Not x)\"\n    | wf_Act: \"weak_formula x \\<Longrightarrow> weak_formula (\\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\"\n    | wf_Pred: \"weak_formula x \\<Longrightarrow> weak_formula (\\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>(Conj (binsert (Pred \\<phi>) (bsingleton x))))\""], ["", "lemma finite_supp_wf_Pred [simp]: \"finite (supp (binsert (Pred \\<phi>) (bsingleton x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp (binsert (Pred \\<phi>) (bsingleton x)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (supp (binsert (Pred \\<phi>) (bsingleton x)))", "have \"supp (bsingleton x) \\<subseteq> supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (bsingleton x) \\<subseteq> supp x", "by (simp add: eqvtI supp_fun_app_eqvt)"], ["proof (state)\nthis:\n  supp (bsingleton x) \\<subseteq> supp x\n\ngoal (1 subgoal):\n 1. finite (supp (binsert (Pred \\<phi>) (bsingleton x)))", "moreover"], ["proof (state)\nthis:\n  supp (bsingleton x) \\<subseteq> supp x\n\ngoal (1 subgoal):\n 1. finite (supp (binsert (Pred \\<phi>) (bsingleton x)))", "have \"eqvt binsert\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt binsert", "by (simp add: eqvtI)"], ["proof (state)\nthis:\n  eqvt binsert\n\ngoal (1 subgoal):\n 1. finite (supp (binsert (Pred \\<phi>) (bsingleton x)))", "ultimately"], ["proof (chain)\npicking this:\n  supp (bsingleton x) \\<subseteq> supp x\n  eqvt binsert", "have \"supp (binsert (Pred \\<phi>) (bsingleton x)) \\<subseteq> supp \\<phi> \\<union> supp x\""], ["proof (prove)\nusing this:\n  supp (bsingleton x) \\<subseteq> supp x\n  eqvt binsert\n\ngoal (1 subgoal):\n 1. supp (binsert (Pred \\<phi>) (bsingleton x))\n    \\<subseteq> supp \\<phi> \\<union> supp x", "using supp_fun_app supp_fun_app_eqvt"], ["proof (prove)\nusing this:\n  supp (bsingleton x) \\<subseteq> supp x\n  eqvt binsert\n  supp (?f ?x) \\<subseteq> supp ?f \\<union> supp ?x\n  eqvt ?f \\<Longrightarrow> supp (?f ?x) \\<subseteq> supp ?x\n\ngoal (1 subgoal):\n 1. supp (binsert (Pred \\<phi>) (bsingleton x))\n    \\<subseteq> supp \\<phi> \\<union> supp x", "by fastforce"], ["proof (state)\nthis:\n  supp (binsert (Pred \\<phi>) (bsingleton x))\n  \\<subseteq> supp \\<phi> \\<union> supp x\n\ngoal (1 subgoal):\n 1. finite (supp (binsert (Pred \\<phi>) (bsingleton x)))", "then"], ["proof (chain)\npicking this:\n  supp (binsert (Pred \\<phi>) (bsingleton x))\n  \\<subseteq> supp \\<phi> \\<union> supp x", "show ?thesis"], ["proof (prove)\nusing this:\n  supp (binsert (Pred \\<phi>) (bsingleton x))\n  \\<subseteq> supp \\<phi> \\<union> supp x\n\ngoal (1 subgoal):\n 1. finite (supp (binsert (Pred \\<phi>) (bsingleton x)))", "by (metis finite_UnI finite_supp rev_finite_subset)"], ["proof (state)\nthis:\n  finite (supp (binsert (Pred \\<phi>) (bsingleton x)))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>@{const weak_formula} is equivariant.\\<close>"], ["", "lemma weak_formula_eqvt (*[eqvt]*) [simp]: \"weak_formula x \\<Longrightarrow> weak_formula (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weak_formula x \\<Longrightarrow> weak_formula (p \\<bullet> x)", "proof (induct rule: weak_formula.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xset.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x. x \\<in> set_bset xset \\<Longrightarrow> weak_formula x;\n        \\<And>x.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula (p \\<bullet> Conj xset)\n 2. \\<And>x.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula (p \\<bullet> Formula.Not x)\n 3. \\<And>x \\<alpha>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n 4. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "case (wf_Conj xset)"], ["proof (state)\nthis:\n  finite (supp xset)\n  ?x7 \\<in> set_bset xset \\<Longrightarrow> weak_formula ?x7\n  ?x7 \\<in> set_bset xset \\<Longrightarrow> weak_formula (p \\<bullet> ?x7)\n\ngoal (4 subgoals):\n 1. \\<And>xset.\n       \\<lbrakk>finite (supp xset);\n        \\<And>x. x \\<in> set_bset xset \\<Longrightarrow> weak_formula x;\n        \\<And>x.\n           x \\<in> set_bset xset \\<Longrightarrow>\n           weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula (p \\<bullet> Conj xset)\n 2. \\<And>x.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula (p \\<bullet> Formula.Not x)\n 3. \\<And>x \\<alpha>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n 4. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "then"], ["proof (chain)\npicking this:\n  finite (supp xset)\n  ?x7 \\<in> set_bset xset \\<Longrightarrow> weak_formula ?x7\n  ?x7 \\<in> set_bset xset \\<Longrightarrow> weak_formula (p \\<bullet> ?x7)", "show ?case"], ["proof (prove)\nusing this:\n  finite (supp xset)\n  ?x7 \\<in> set_bset xset \\<Longrightarrow> weak_formula ?x7\n  ?x7 \\<in> set_bset xset \\<Longrightarrow> weak_formula (p \\<bullet> ?x7)\n\ngoal (1 subgoal):\n 1. weak_formula (p \\<bullet> Conj xset)", "by simp (metis (no_types, lifting) imageE permute_finite permute_set_eq_image set_bset_eqvt supp_eqvt weak_formula.wf_Conj)"], ["proof (state)\nthis:\n  weak_formula (p \\<bullet> Conj xset)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula (p \\<bullet> Formula.Not x)\n 2. \\<And>x \\<alpha>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n 3. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula (p \\<bullet> Formula.Not x)\n 2. \\<And>x \\<alpha>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n 3. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "case (wf_Not x)"], ["proof (state)\nthis:\n  weak_formula x\n  weak_formula (p \\<bullet> x)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula (p \\<bullet> Formula.Not x)\n 2. \\<And>x \\<alpha>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n 3. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "then"], ["proof (chain)\npicking this:\n  weak_formula x\n  weak_formula (p \\<bullet> x)", "show ?case"], ["proof (prove)\nusing this:\n  weak_formula x\n  weak_formula (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. weak_formula (p \\<bullet> Formula.Not x)", "by (simp add: weak_formula.wf_Not)"], ["proof (state)\nthis:\n  weak_formula (p \\<bullet> Formula.Not x)\n\ngoal (2 subgoals):\n 1. \\<And>x \\<alpha>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n 2. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x \\<alpha>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n 2. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "case (wf_Act x \\<alpha>)"], ["proof (state)\nthis:\n  weak_formula x\n  weak_formula (p \\<bullet> x)\n\ngoal (2 subgoals):\n 1. \\<And>x \\<alpha>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n 2. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "then"], ["proof (chain)\npicking this:\n  weak_formula x\n  weak_formula (p \\<bullet> x)", "show ?case"], ["proof (prove)\nusing this:\n  weak_formula x\n  weak_formula (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. weak_formula (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)", "by (simp add: weak_formula.wf_Act)"], ["proof (state)\nthis:\n  weak_formula (p \\<bullet> \\<langle>\\<langle>\\<alpha>\\<rangle>\\<rangle>x)\n\ngoal (1 subgoal):\n 1. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "case (wf_Pred x \\<phi>)"], ["proof (state)\nthis:\n  weak_formula x\n  weak_formula (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. \\<And>x \\<phi>.\n       \\<lbrakk>weak_formula x; weak_formula (p \\<bullet> x)\\<rbrakk>\n       \\<Longrightarrow> weak_formula\n                          (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n      (binsert (Pred \\<phi>) (bsingleton x)))", "then"], ["proof (chain)\npicking this:\n  weak_formula x\n  weak_formula (p \\<bullet> x)", "show ?case"], ["proof (prove)\nusing this:\n  weak_formula x\n  weak_formula (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. weak_formula\n     (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n                       (binsert (Pred \\<phi>) (bsingleton x)))", "by (simp add: tau_eqvt weak_formula.wf_Pred)"], ["proof (state)\nthis:\n  weak_formula\n   (p \\<bullet> \\<langle>\\<langle>\\<tau>\\<rangle>\\<rangle>Conj\n                     (binsert (Pred \\<phi>) (bsingleton x)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}