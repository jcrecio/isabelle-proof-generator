{"file_name": "/home/qj213/afp-2021-10-22/thys/Decl_Sem_Fun_PL/DenotCompleteFSet.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Decl_Sem_Fun_PL", "problem_names": ["lemma combine_values:\n  assumes vv: \"isval v\" and v1v: \"v1 \\<in> E v \\<rho>\" and v2v: \"v2 \\<in> E v \\<rho>\"\n  shows \" \\<exists> v3. v3 \\<in> E v \\<rho> \\<and> (v1 \\<squnion> v2 = Some v3)\"", "lemma le_union1: fixes v1::val assumes v12: \"v1 \\<squnion> v2 = Some v12\" shows \"v1 \\<sqsubseteq> v12\"", "lemma le_union2: \"v1 \\<squnion> v2 = Some v12 \\<Longrightarrow> v2 \\<sqsubseteq> v12\"", "lemma le_union_left: \"\\<lbrakk> v1 \\<squnion> v2 = Some v12; v1 \\<sqsubseteq> v3; v2 \\<sqsubseteq> v3 \\<rbrakk> \\<Longrightarrow> v12 \\<sqsubseteq> v3\"", "lemma e_val: \"isval v \\<Longrightarrow> \\<exists> v'. v' \\<in> E v \\<rho>\"", "lemma reverse_subst_lam:\n  assumes fl: \"VFun f \\<in> E (ELam x e) \\<rho>\"\n    and vv: \"is_val v\" and ls: \"ELam x e = ELam x (subst y v e')\" and xy: \"x \\<noteq> y\" \n    and IH: \"\\<forall> v1 v2. v2 \\<in> E (subst y v e') ((x,v1)#\\<rho>) \n        \\<longrightarrow> (\\<exists> \\<rho>' v'. v' \\<in> E v [] \\<and> v2 \\<in> E e' \\<rho>' \\<and> \\<rho>' \\<approx> (y,v')#(x,v1)#\\<rho>)\"\n  shows \"\\<exists> \\<rho>' v''. v'' \\<in> E v [] \\<and> VFun f \\<in> E (ELam x e') \\<rho>' \\<and> \\<rho>' \\<approx> ((y,v'')#\\<rho>)\"", "lemma lookup_ext_none: \"\\<lbrakk> lookup \\<rho> y = None; x \\<noteq> y \\<rbrakk> \\<Longrightarrow> lookup ((x,v)#\\<rho>) y = None\"", "lemma rev_subst_var:\n  assumes ev: \"e = EVar y \\<and> v = e'\" and vv: \"is_val v\" and vp_E: \"v' \\<in> E e' \\<rho>\"\n  shows \"\\<exists> \\<rho>' v''. v'' \\<in> E v [] \\<and> v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> ((y,v'')#\\<rho>)\"", "lemma reverse_subst_pres_denot:\n  assumes vep: \"v' \\<in> E e' \\<rho>\" and vv: \"is_val v\" and ep: \"e' = subst y v e\"\n  shows \"\\<exists> \\<rho>' v''. v'' \\<in> E v [] \\<and> v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> ((y,v'')#\\<rho>)\"", "lemma reverse_step_pres_denot:\n  fixes e::exp assumes e_ep: \"e \\<longrightarrow> e'\" and v_ep: \"v \\<in> E e' \\<rho>\"\n  shows \"v \\<in> E e \\<rho>\"", "lemma reverse_multi_step_pres_denot:\n  fixes e::exp assumes e_ep: \"e \\<longrightarrow>* e'\" and v_ep: \"v \\<in> E e' \\<rho>\" shows \"v \\<in> E e \\<rho>\"", "theorem completeness:\n  assumes ev: \"e \\<longrightarrow>* v\"and vv: \"is_val v\"\n  shows \"\\<exists> v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []\"", "theorem reduce_pres_denot: fixes e::exp assumes r: \"e \\<longrightarrow> e'\" shows \"E e = E e'\"", "theorem multi_reduce_pres_denot: fixes e::exp assumes r: \"e \\<longrightarrow>* e'\" shows \"E e = E e'\"", "theorem complete_wrt_op_sem:\n  assumes e_n: \"e \\<Down> ONat n\" shows \"E e [] = E (ENat n) []\""], "translations": [["", "lemma combine_values:\n  assumes vv: \"isval v\" and v1v: \"v1 \\<in> E v \\<rho>\" and v2v: \"v2 \\<in> E v \\<rho>\"\n  shows \" \\<exists> v3. v3 \\<in> E v \\<rho> \\<and> (v1 \\<squnion> v2 = Some v3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v3. v3 \\<in> E v \\<rho> \\<and> v1 \\<squnion> v2 = Some v3", "using vv v1v v2v"], ["proof (prove)\nusing this:\n  isval v\n  v1 \\<in> E v \\<rho>\n  v2 \\<in> E v \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>v3. v3 \\<in> E v \\<rho> \\<and> v1 \\<squnion> v2 = Some v3", "by (induction v arbitrary: v1 v2 \\<rho>) auto"], ["", "lemma le_union1: fixes v1::val assumes v12: \"v1 \\<squnion> v2 = Some v12\" shows \"v1 \\<sqsubseteq> v12\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 \\<sqsubseteq> v12", "proof (cases v1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. v1 = VNat x1 \\<Longrightarrow> v1 \\<sqsubseteq> v12\n 2. \\<And>x2. v1 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "case (VNat n1)"], ["proof (state)\nthis:\n  v1 = VNat n1\n\ngoal (2 subgoals):\n 1. \\<And>x1. v1 = VNat x1 \\<Longrightarrow> v1 \\<sqsubseteq> v12\n 2. \\<And>x2. v1 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "hence v1: \"v1=VNat n1\""], ["proof (prove)\nusing this:\n  v1 = VNat n1\n\ngoal (1 subgoal):\n 1. v1 = VNat n1", "by simp"], ["proof (state)\nthis:\n  v1 = VNat n1\n\ngoal (2 subgoals):\n 1. \\<And>x1. v1 = VNat x1 \\<Longrightarrow> v1 \\<sqsubseteq> v12\n 2. \\<And>x2. v1 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 \\<sqsubseteq> v12", "proof (cases v2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. v2 = VNat x1 \\<Longrightarrow> v1 \\<sqsubseteq> v12\n 2. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "case (VNat n2)"], ["proof (state)\nthis:\n  v2 = VNat n2\n\ngoal (2 subgoals):\n 1. \\<And>x1. v2 = VNat x1 \\<Longrightarrow> v1 \\<sqsubseteq> v12\n 2. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "with v1 v12"], ["proof (chain)\npicking this:\n  v1 = VNat n1\n  v1 \\<squnion> v2 = Some v12\n  v2 = VNat n2", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 = VNat n1\n  v1 \\<squnion> v2 = Some v12\n  v2 = VNat n2\n\ngoal (1 subgoal):\n 1. v1 \\<sqsubseteq> v12", "by (cases \"n1=n2\") auto"], ["proof (state)\nthis:\n  v1 \\<sqsubseteq> v12\n\ngoal (1 subgoal):\n 1. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "case (VFun x2)"], ["proof (state)\nthis:\n  v2 = VFun x2\n\ngoal (1 subgoal):\n 1. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "with v1 v12"], ["proof (chain)\npicking this:\n  v1 = VNat n1\n  v1 \\<squnion> v2 = Some v12\n  v2 = VFun x2", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 = VNat n1\n  v1 \\<squnion> v2 = Some v12\n  v2 = VFun x2\n\ngoal (1 subgoal):\n 1. v1 \\<sqsubseteq> v12", "by auto"], ["proof (state)\nthis:\n  v1 \\<sqsubseteq> v12\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v1 \\<sqsubseteq> v12\n\ngoal (1 subgoal):\n 1. \\<And>x2. v1 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. v1 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "case (VFun t2)"], ["proof (state)\nthis:\n  v1 = VFun t2\n\ngoal (1 subgoal):\n 1. \\<And>x2. v1 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "from VFun"], ["proof (chain)\npicking this:\n  v1 = VFun t2", "have v1: \"v1=VFun t2\""], ["proof (prove)\nusing this:\n  v1 = VFun t2\n\ngoal (1 subgoal):\n 1. v1 = VFun t2", "by simp"], ["proof (state)\nthis:\n  v1 = VFun t2\n\ngoal (1 subgoal):\n 1. \\<And>x2. v1 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 \\<sqsubseteq> v12", "proof (cases v2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. v2 = VNat x1 \\<Longrightarrow> v1 \\<sqsubseteq> v12\n 2. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "case (VNat n1)"], ["proof (state)\nthis:\n  v2 = VNat n1\n\ngoal (2 subgoals):\n 1. \\<And>x1. v2 = VNat x1 \\<Longrightarrow> v1 \\<sqsubseteq> v12\n 2. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "with v1 v12"], ["proof (chain)\npicking this:\n  v1 = VFun t2\n  v1 \\<squnion> v2 = Some v12\n  v2 = VNat n1", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 = VFun t2\n  v1 \\<squnion> v2 = Some v12\n  v2 = VNat n1\n\ngoal (1 subgoal):\n 1. v1 \\<sqsubseteq> v12", "by auto"], ["proof (state)\nthis:\n  v1 \\<sqsubseteq> v12\n\ngoal (1 subgoal):\n 1. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "case (VFun n2)"], ["proof (state)\nthis:\n  v2 = VFun n2\n\ngoal (1 subgoal):\n 1. \\<And>x2. v2 = VFun x2 \\<Longrightarrow> v1 \\<sqsubseteq> v12", "with v1 v12"], ["proof (chain)\npicking this:\n  v1 = VFun t2\n  v1 \\<squnion> v2 = Some v12\n  v2 = VFun n2", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 = VFun t2\n  v1 \\<squnion> v2 = Some v12\n  v2 = VFun n2\n\ngoal (1 subgoal):\n 1. v1 \\<sqsubseteq> v12", "by auto"], ["proof (state)\nthis:\n  v1 \\<sqsubseteq> v12\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v1 \\<sqsubseteq> v12\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_union2: \"v1 \\<squnion> v2 = Some v12 \\<Longrightarrow> v2 \\<sqsubseteq> v12\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 \\<squnion> v2 = Some v12 \\<Longrightarrow> v2 \\<sqsubseteq> v12", "apply (cases v1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 = VNat x1\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12\n 2. \\<And>x2.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12", "apply (cases v2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 = VNat x1;\n        v2 = VNat x1a\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12\n 2. \\<And>x1 x2.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 = VNat x1;\n        v2 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12\n 3. \\<And>x2.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>(if x1 = x1a then Some (VNat x1) else None) = Some v12;\n        v1 = VNat x1; v2 = VNat x1a\\<rbrakk>\n       \\<Longrightarrow> VNat x1a \\<sqsubseteq> v12\n 2. \\<And>x2.\n       \\<lbrakk>VFun x2 \\<squnion> v2 = Some v12; v1 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12", "apply (rename_tac x1 x1')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x1'.\n       \\<lbrakk>(if x1 = x1' then Some (VNat x1) else None) = Some v12;\n        v1 = VNat x1; v2 = VNat x1'\\<rbrakk>\n       \\<Longrightarrow> VNat x1' \\<sqsubseteq> v12\n 2. \\<And>x2.\n       \\<lbrakk>VFun x2 \\<squnion> v2 = Some v12; v1 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12", "apply (case_tac \"x1 = x1'\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x1'.\n       \\<lbrakk>(if x1 = x1' then Some (VNat x1) else None) = Some v12;\n        v1 = VNat x1; v2 = VNat x1'; x1 = x1'\\<rbrakk>\n       \\<Longrightarrow> VNat x1' \\<sqsubseteq> v12\n 2. \\<And>x1 x1'.\n       \\<lbrakk>(if x1 = x1' then Some (VNat x1) else None) = Some v12;\n        v1 = VNat x1; v2 = VNat x1'; x1 \\<noteq> x1'\\<rbrakk>\n       \\<Longrightarrow> VNat x1' \\<sqsubseteq> v12\n 3. \\<And>x2.\n       \\<lbrakk>VFun x2 \\<squnion> v2 = Some v12; v1 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>VFun x2 \\<squnion> v2 = Some v12; v1 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12", "apply (cases v2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2 x1.\n       \\<lbrakk>VFun x2 \\<squnion> v2 = Some v12; v1 = VFun x2;\n        v2 = VNat x1\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12\n 2. \\<And>x2 x2a.\n       \\<lbrakk>VFun x2 \\<squnion> v2 = Some v12; v1 = VFun x2;\n        v2 = VFun x2a\\<rbrakk>\n       \\<Longrightarrow> v2 \\<sqsubseteq> v12", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma le_union_left: \"\\<lbrakk> v1 \\<squnion> v2 = Some v12; v1 \\<sqsubseteq> v3; v2 \\<sqsubseteq> v3 \\<rbrakk> \\<Longrightarrow> v12 \\<sqsubseteq> v3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 \\<sqsubseteq> v3;\n     v2 \\<sqsubseteq> v3\\<rbrakk>\n    \\<Longrightarrow> v12 \\<sqsubseteq> v3", "apply (cases v1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 \\<sqsubseteq> v3;\n        v2 \\<sqsubseteq> v3; v1 = VNat x1\\<rbrakk>\n       \\<Longrightarrow> v12 \\<sqsubseteq> v3\n 2. \\<And>x2.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 \\<sqsubseteq> v3;\n        v2 \\<sqsubseteq> v3; v1 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v12 \\<sqsubseteq> v3", "apply (cases v2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 \\<sqsubseteq> v3;\n        v2 \\<sqsubseteq> v3; v1 = VNat x1; v2 = VNat x1a\\<rbrakk>\n       \\<Longrightarrow> v12 \\<sqsubseteq> v3\n 2. \\<And>x1 x2.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 \\<sqsubseteq> v3;\n        v2 \\<sqsubseteq> v3; v1 = VNat x1; v2 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v12 \\<sqsubseteq> v3\n 3. \\<And>x2.\n       \\<lbrakk>v1 \\<squnion> v2 = Some v12; v1 \\<sqsubseteq> v3;\n        v2 \\<sqsubseteq> v3; v1 = VFun x2\\<rbrakk>\n       \\<Longrightarrow> v12 \\<sqsubseteq> v3", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma e_val: \"isval v \\<Longrightarrow> \\<exists> v'. v' \\<in> E v \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isval v \\<Longrightarrow> \\<exists>v'. v' \\<in> E v \\<rho>", "apply (case_tac v)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>isval v; v = EVar x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'. v' \\<in> E v \\<rho>\n 2. \\<And>x2.\n       \\<lbrakk>isval v; v = ENat x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'. v' \\<in> E v \\<rho>\n 3. \\<And>x31 x32.\n       \\<lbrakk>isval v; v = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'. v' \\<in> E v \\<rho>\n 4. \\<And>x41 x42.\n       \\<lbrakk>isval v; v = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'. v' \\<in> E v \\<rho>\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>isval v; v = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'. v' \\<in> E v \\<rho>\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>isval v; v = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v'. v' \\<in> E v \\<rho>", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32.\n       \\<lbrakk>isval (ELam x31 x32); v = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>v1 v2.\n                               (v1, v2) \\<in> fset f \\<longrightarrow>\n                               v2 \\<in> E x32 ((x31, v1) # \\<rho>)", "apply (rule_tac x=\"{||}\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32.\n       \\<lbrakk>isval (ELam x31 x32); v = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> \\<forall>v1 v2.\n                            (v1, v2) \\<in> fset {||} \\<longrightarrow>\n                            v2 \\<in> E x32 ((x31, v1) # \\<rho>)", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma reverse_subst_lam:\n  assumes fl: \"VFun f \\<in> E (ELam x e) \\<rho>\"\n    and vv: \"is_val v\" and ls: \"ELam x e = ELam x (subst y v e')\" and xy: \"x \\<noteq> y\" \n    and IH: \"\\<forall> v1 v2. v2 \\<in> E (subst y v e') ((x,v1)#\\<rho>) \n        \\<longrightarrow> (\\<exists> \\<rho>' v'. v' \\<in> E v [] \\<and> v2 \\<in> E e' \\<rho>' \\<and> \\<rho>' \\<approx> (y,v')#(x,v1)#\\<rho>)\"\n  shows \"\\<exists> \\<rho>' v''. v'' \\<in> E v [] \\<and> VFun f \\<in> E (ELam x e') \\<rho>' \\<and> \\<rho>' \\<approx> ((y,v'')#\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n       \\<rho>' \\<approx> (y, v'') # \\<rho>", "using fl vv ls IH xy"], ["proof (prove)\nusing this:\n  VFun f \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>' \\<and>\n         \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n       \\<rho>' \\<approx> (y, v'') # \\<rho>", "proof (induction f arbitrary: x e e' \\<rho> v y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x e e' \\<rho> v y.\n       \\<lbrakk>VFun {||} \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = ELam x (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun {||} \\<in> E (ELam x e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "case empty"], ["proof (state)\nthis:\n  VFun {||} \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. \\<And>x e e' \\<rho> v y.\n       \\<lbrakk>VFun {||} \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = ELam x (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun {||} \\<in> E (ELam x e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from empty(2) is_val_def"], ["proof (chain)\npicking this:\n  is_val v\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}", "obtain v' where vp_v: \"v' \\<in> E v []\""], ["proof (prove)\nusing this:\n  is_val v\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}\n\ngoal (1 subgoal):\n 1. (\\<And>v'. v' \\<in> E v [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using e_val[of v \"[]\"]"], ["proof (prove)\nusing this:\n  is_val v\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}\n  isval v \\<Longrightarrow> \\<exists>v'. v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. (\\<And>v'. v' \\<in> E v [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v' \\<in> E v []\n\ngoal (2 subgoals):\n 1. \\<And>x e e' \\<rho> v y.\n       \\<lbrakk>VFun {||} \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = ELam x (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun {||} \\<in> E (ELam x e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "let ?R = \"(y,v')#\\<rho>\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x e e' \\<rho> v y.\n       \\<lbrakk>VFun {||} \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = ELam x (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun {||} \\<in> E (ELam x e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "have 1: \"VFun {||} \\<in> E (ELam x e') ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. VFun {||} \\<in> E (ELam x e') ((y, v') # \\<rho>)", "by simp"], ["proof (state)\nthis:\n  VFun {||} \\<in> E (ELam x e') ((y, v') # \\<rho>)\n\ngoal (2 subgoals):\n 1. \\<And>x e e' \\<rho> v y.\n       \\<lbrakk>VFun {||} \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = ELam x (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun {||} \\<in> E (ELam x e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "have 2: \"?R \\<approx> (y, v') # \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y, v') # \\<rho> \\<approx> (y, v') # \\<rho>", "by auto"], ["proof (state)\nthis:\n  (y, v') # \\<rho> \\<approx> (y, v') # \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>x e e' \\<rho> v y.\n       \\<lbrakk>VFun {||} \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = ELam x (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun {||} \\<in> E (ELam x e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from vp_v 1 2"], ["proof (chain)\npicking this:\n  v' \\<in> E v []\n  VFun {||} \\<in> E (ELam x e') ((y, v') # \\<rho>)\n  (y, v') # \\<rho> \\<approx> (y, v') # \\<rho>", "show ?case"], ["proof (prove)\nusing this:\n  v' \\<in> E v []\n  VFun {||} \\<in> E (ELam x e') ((y, v') # \\<rho>)\n  (y, v') # \\<rho> \\<approx> (y, v') # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       VFun {||} \\<in> E (ELam x e') \\<rho>'' \\<and>\n       \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     VFun {||} \\<in> E (ELam x e') \\<rho>'' \\<and>\n     \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "case (insert a f x e e' \\<rho> v y)"], ["proof (state)\nthis:\n  a |\\<notin>| f\n  \\<lbrakk>VFun f \\<in> E (ELam ?x ?e) ?\\<rho>; is_val ?v;\n   ELam ?x ?e = ELam ?x (subst ?y ?v ?e');\n   \\<forall>v1 v2.\n      v2 \\<in> E (subst ?y ?v ?e') ((?x, v1) # ?\\<rho>) \\<longrightarrow>\n      (\\<exists>\\<rho>' v'.\n          v' \\<in> E ?v [] \\<and>\n          v2 \\<in> E ?e' \\<rho>' \\<and>\n          \\<rho>' \\<approx> (?y, v') # (?x, v1) # ?\\<rho>);\n   ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       VFun f \\<in> E (ELam ?x ?e') \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from insert(3)"], ["proof (chain)\npicking this:\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>", "have 1: \"VFun f \\<in> E (ELam x e) \\<rho>\""], ["proof (prove)\nusing this:\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n\ngoal (1 subgoal):\n 1. VFun f \\<in> E (ELam x e) \\<rho>", "by auto"], ["proof (state)\nthis:\n  VFun f \\<in> E (ELam x e) \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "obtain v1 v2 where a: \"a = (v1,v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v1 v2. a = (v1, v2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases a) simp"], ["proof (state)\nthis:\n  a = (v1, v2)\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from insert 1"], ["proof (chain)\npicking this:\n  a |\\<notin>| f\n  \\<lbrakk>VFun f \\<in> E (ELam ?x ?e) ?\\<rho>; is_val ?v;\n   ELam ?x ?e = ELam ?x (subst ?y ?v ?e');\n   \\<forall>v1 v2.\n      v2 \\<in> E (subst ?y ?v ?e') ((?x, v1) # ?\\<rho>) \\<longrightarrow>\n      (\\<exists>\\<rho>' v'.\n          v' \\<in> E ?v [] \\<and>\n          v2 \\<in> E ?e' \\<rho>' \\<and>\n          \\<rho>' \\<approx> (?y, v') # (?x, v1) # ?\\<rho>);\n   ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       VFun f \\<in> E (ELam ?x ?e') \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y\n  VFun f \\<in> E (ELam x e) \\<rho>", "have \"\\<exists> \\<rho>' v''. v'' \\<in> E v [] \\<and> VFun f \\<in> E (ELam x e') \\<rho>' \\<and> \\<rho>' \\<approx> ((y,v'')#\\<rho>)\""], ["proof (prove)\nusing this:\n  a |\\<notin>| f\n  \\<lbrakk>VFun f \\<in> E (ELam ?x ?e) ?\\<rho>; is_val ?v;\n   ELam ?x ?e = ELam ?x (subst ?y ?v ?e');\n   \\<forall>v1 v2.\n      v2 \\<in> E (subst ?y ?v ?e') ((?x, v1) # ?\\<rho>) \\<longrightarrow>\n      (\\<exists>\\<rho>' v'.\n          v' \\<in> E ?v [] \\<and>\n          v2 \\<in> E ?e' \\<rho>' \\<and>\n          \\<rho>' \\<approx> (?y, v') # (?x, v1) # ?\\<rho>);\n   ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       VFun f \\<in> E (ELam ?x ?e') \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y\n  VFun f \\<in> E (ELam x e) \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       VFun f \\<in> E (ELam x e') \\<rho>'' \\<and>\n       \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     VFun f \\<in> E (ELam x e') \\<rho>'' \\<and>\n     \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from this"], ["proof (chain)\npicking this:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     VFun f \\<in> E (ELam x e') \\<rho>'' \\<and>\n     \\<rho>'' \\<approx> (y, v'') # \\<rho>", "obtain \\<rho>'' v'' where vpp_v: \"v'' \\<in> E v []\" and f_l: \"VFun f \\<in> E (ELam x e') \\<rho>''\" \n    and rpp_r: \"\\<rho>'' \\<approx> ((y,v'')#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     VFun f \\<in> E (ELam x e') \\<rho>'' \\<and>\n     \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>v'' \\<rho>''.\n        \\<lbrakk>v'' \\<in> E v []; VFun f \\<in> E (ELam x e') \\<rho>'';\n         \\<rho>'' \\<approx> (y, v'') # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v'' \\<in> E v []\n  VFun f \\<in> E (ELam x e') \\<rho>''\n  \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from insert(3) a"], ["proof (chain)\npicking this:\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  a = (v1, v2)", "have v2_e: \"v2 \\<in> E e ((x,v1)#\\<rho>)\""], ["proof (prove)\nusing this:\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  a = (v1, v2)\n\ngoal (1 subgoal):\n 1. v2 \\<in> E e ((x, v1) # \\<rho>)", "using e_lam_elim2"], ["proof (prove)\nusing this:\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  a = (v1, v2)\n  \\<lbrakk>VFun (finsert (?v1.0, ?v2.0) ?f) \\<in> E (ELam ?x ?e) ?\\<rho>;\n   ?v2.0 \\<in> E ?e ((?x, ?v1.0) # ?\\<rho>) \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. v2 \\<in> E e ((x, v1) # \\<rho>)", "by blast"], ["proof (state)\nthis:\n  v2 \\<in> E e ((x, v1) # \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from insert v2_e"], ["proof (chain)\npicking this:\n  a |\\<notin>| f\n  \\<lbrakk>VFun f \\<in> E (ELam ?x ?e) ?\\<rho>; is_val ?v;\n   ELam ?x ?e = ELam ?x (subst ?y ?v ?e');\n   \\<forall>v1 v2.\n      v2 \\<in> E (subst ?y ?v ?e') ((?x, v1) # ?\\<rho>) \\<longrightarrow>\n      (\\<exists>\\<rho>' v'.\n          v' \\<in> E ?v [] \\<and>\n          v2 \\<in> E ?e' \\<rho>' \\<and>\n          \\<rho>' \\<approx> (?y, v') # (?x, v1) # ?\\<rho>);\n   ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       VFun f \\<in> E (ELam ?x ?e') \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y\n  v2 \\<in> E e ((x, v1) # \\<rho>)", "have \"\\<exists>\\<rho>'' v'. v' \\<in> E v [] \\<and> v2 \\<in> E e' \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v')#(x, v1)#\\<rho>\""], ["proof (prove)\nusing this:\n  a |\\<notin>| f\n  \\<lbrakk>VFun f \\<in> E (ELam ?x ?e) ?\\<rho>; is_val ?v;\n   ELam ?x ?e = ELam ?x (subst ?y ?v ?e');\n   \\<forall>v1 v2.\n      v2 \\<in> E (subst ?y ?v ?e') ((?x, v1) # ?\\<rho>) \\<longrightarrow>\n      (\\<exists>\\<rho>' v'.\n          v' \\<in> E ?v [] \\<and>\n          v2 \\<in> E ?e' \\<rho>' \\<and>\n          \\<rho>' \\<approx> (?y, v') # (?x, v1) # ?\\<rho>);\n   ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       VFun f \\<in> E (ELam ?x ?e') \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y\n  v2 \\<in> E e ((x, v1) # \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v'.\n       v' \\<in> E v [] \\<and>\n       v2 \\<in> E e' \\<rho>'' \\<and>\n       \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v'.\n     v' \\<in> E v [] \\<and>\n     v2 \\<in> E e' \\<rho>'' \\<and>\n     \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from this"], ["proof (chain)\npicking this:\n  \\<exists>\\<rho>'' v'.\n     v' \\<in> E v [] \\<and>\n     v2 \\<in> E e' \\<rho>'' \\<and>\n     \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>", "obtain \\<rho>3 v' where vp_v: \"v' \\<in> E v []\" and v2_ep: \"v2 \\<in> E e' \\<rho>3\" \n    and r3: \"\\<rho>3 \\<approx> (y,v') # (x,v1) # \\<rho>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<rho>'' v'.\n     v' \\<in> E v [] \\<and>\n     v2 \\<in> E e' \\<rho>'' \\<and>\n     \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>v' \\<rho>3.\n        \\<lbrakk>v' \\<in> E v []; v2 \\<in> E e' \\<rho>3;\n         \\<rho>3 \\<approx> (y, v') # (x, v1) # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v' \\<in> E v []\n  v2 \\<in> E e' \\<rho>3\n  \\<rho>3 \\<approx> (y, v') # (x, v1) # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from insert(4)"], ["proof (chain)\npicking this:\n  is_val v", "have \"isval v\""], ["proof (prove)\nusing this:\n  is_val v\n\ngoal (1 subgoal):\n 1. isval v", "by auto"], ["proof (state)\nthis:\n  isval v\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from this vp_v vpp_v"], ["proof (chain)\npicking this:\n  isval v\n  v' \\<in> E v []\n  v'' \\<in> E v []", "obtain v3 where v3_v: \"v3 \\<in> E v []\" and vp_vpp: \"v' \\<squnion> v'' = Some v3\""], ["proof (prove)\nusing this:\n  isval v\n  v' \\<in> E v []\n  v'' \\<in> E v []\n\ngoal (1 subgoal):\n 1. (\\<And>v3.\n        \\<lbrakk>v3 \\<in> E v []; v' \\<squnion> v'' = Some v3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using combine_values"], ["proof (prove)\nusing this:\n  isval v\n  v' \\<in> E v []\n  v'' \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3\n\ngoal (1 subgoal):\n 1. (\\<And>v3.\n        \\<lbrakk>v3 \\<in> E v []; v' \\<squnion> v'' = Some v3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v3 \\<in> E v []\n  v' \\<squnion> v'' = Some v3\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "have 4: \"VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "from vp_vpp"], ["proof (chain)\npicking this:\n  v' \\<squnion> v'' = Some v3", "have v3_vpp: \"v'' \\<sqsubseteq> v3\""], ["proof (prove)\nusing this:\n  v' \\<squnion> v'' = Some v3\n\ngoal (1 subgoal):\n 1. v'' \\<sqsubseteq> v3", "using le_union2"], ["proof (prove)\nusing this:\n  v' \\<squnion> v'' = Some v3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. v'' \\<sqsubseteq> v3", "by simp"], ["proof (state)\nthis:\n  v'' \\<sqsubseteq> v3\n\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "from rpp_r v3_vpp"], ["proof (chain)\npicking this:\n  \\<rho>'' \\<approx> (y, v'') # \\<rho>\n  v'' \\<sqsubseteq> v3", "have \"\\<rho>'' \\<sqsubseteq> (y,v3)#\\<rho>\""], ["proof (prove)\nusing this:\n  \\<rho>'' \\<approx> (y, v'') # \\<rho>\n  v'' \\<sqsubseteq> v3\n\ngoal (1 subgoal):\n 1. \\<rho>'' \\<sqsubseteq> (y, v3) # \\<rho>", "by (simp add: env_eq_def env_le_def)"], ["proof (state)\nthis:\n  \\<rho>'' \\<sqsubseteq> (y, v3) # \\<rho>\n\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "from f_l this"], ["proof (chain)\npicking this:\n  VFun f \\<in> E (ELam x e') \\<rho>''\n  \\<rho>'' \\<sqsubseteq> (y, v3) # \\<rho>", "have 2: \"VFun f \\<in> E (ELam x e') ((y, v3) # \\<rho>)\""], ["proof (prove)\nusing this:\n  VFun f \\<in> E (ELam x e') \\<rho>''\n  \\<rho>'' \\<sqsubseteq> (y, v3) # \\<rho>\n\ngoal (1 subgoal):\n 1. VFun f \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  VFun f \\<in> E (ELam x e') ((y, v3) # \\<rho>)\n\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "from vp_vpp"], ["proof (chain)\npicking this:\n  v' \\<squnion> v'' = Some v3", "have vp_v3: \"v' \\<sqsubseteq> v3\""], ["proof (prove)\nusing this:\n  v' \\<squnion> v'' = Some v3\n\ngoal (1 subgoal):\n 1. v' \\<sqsubseteq> v3", "using le_union1"], ["proof (prove)\nusing this:\n  v' \\<squnion> v'' = Some v3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. v' \\<sqsubseteq> v3", "by simp"], ["proof (state)\nthis:\n  v' \\<sqsubseteq> v3\n\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "from vp_v3 r3 insert"], ["proof (chain)\npicking this:\n  v' \\<sqsubseteq> v3\n  \\<rho>3 \\<approx> (y, v') # (x, v1) # \\<rho>\n  a |\\<notin>| f\n  \\<lbrakk>VFun f \\<in> E (ELam ?x ?e) ?\\<rho>; is_val ?v;\n   ELam ?x ?e = ELam ?x (subst ?y ?v ?e');\n   \\<forall>v1 v2.\n      v2 \\<in> E (subst ?y ?v ?e') ((?x, v1) # ?\\<rho>) \\<longrightarrow>\n      (\\<exists>\\<rho>' v'.\n          v' \\<in> E ?v [] \\<and>\n          v2 \\<in> E ?e' \\<rho>' \\<and>\n          \\<rho>' \\<approx> (?y, v') # (?x, v1) # ?\\<rho>);\n   ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       VFun f \\<in> E (ELam ?x ?e') \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y", "have \"\\<rho>3 \\<sqsubseteq> (x,v1)#(y,v3)#\\<rho>\""], ["proof (prove)\nusing this:\n  v' \\<sqsubseteq> v3\n  \\<rho>3 \\<approx> (y, v') # (x, v1) # \\<rho>\n  a |\\<notin>| f\n  \\<lbrakk>VFun f \\<in> E (ELam ?x ?e) ?\\<rho>; is_val ?v;\n   ELam ?x ?e = ELam ?x (subst ?y ?v ?e');\n   \\<forall>v1 v2.\n      v2 \\<in> E (subst ?y ?v ?e') ((?x, v1) # ?\\<rho>) \\<longrightarrow>\n      (\\<exists>\\<rho>' v'.\n          v' \\<in> E ?v [] \\<and>\n          v2 \\<in> E ?e' \\<rho>' \\<and>\n          \\<rho>' \\<approx> (?y, v') # (?x, v1) # ?\\<rho>);\n   ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       VFun f \\<in> E (ELam ?x ?e') \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n  VFun (finsert a f) \\<in> E (ELam x e) \\<rho>\n  is_val v\n  ELam x e = ELam x (subst y v e')\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<rho>3 \\<sqsubseteq> (x, v1) # (y, v3) # \\<rho>", "by (simp add: env_eq_def env_le_def)"], ["proof (state)\nthis:\n  \\<rho>3 \\<sqsubseteq> (x, v1) # (y, v3) # \\<rho>\n\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "from v2_ep this"], ["proof (chain)\npicking this:\n  v2 \\<in> E e' \\<rho>3\n  \\<rho>3 \\<sqsubseteq> (x, v1) # (y, v3) # \\<rho>", "have 3: \"v2 \\<in> E e' ((x,v1)#(y,v3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  v2 \\<in> E e' \\<rho>3\n  \\<rho>3 \\<sqsubseteq> (x, v1) # (y, v3) # \\<rho>\n\ngoal (1 subgoal):\n 1. v2 \\<in> E e' ((x, v1) # (y, v3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  v2 \\<in> E e' ((x, v1) # (y, v3) # \\<rho>)\n\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "from 2 3 a"], ["proof (chain)\npicking this:\n  VFun f \\<in> E (ELam x e') ((y, v3) # \\<rho>)\n  v2 \\<in> E e' ((x, v1) # (y, v3) # \\<rho>)\n  a = (v1, v2)", "show \"?thesis\""], ["proof (prove)\nusing this:\n  VFun f \\<in> E (ELam x e') ((y, v3) # \\<rho>)\n  v2 \\<in> E e' ((x, v1) # (y, v3) # \\<rho>)\n  a = (v1, v2)\n\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "using e_lam_intro2"], ["proof (prove)\nusing this:\n  VFun f \\<in> E (ELam x e') ((y, v3) # \\<rho>)\n  v2 \\<in> E e' ((x, v1) # (y, v3) # \\<rho>)\n  a = (v1, v2)\n  \\<lbrakk>VFun ?f \\<in> E (ELam ?x ?e) ?\\<rho>;\n   ?v2.0 \\<in> E ?e ((?x, ?v1.0) # ?\\<rho>)\\<rbrakk>\n  \\<Longrightarrow> VFun (finsert (?v1.0, ?v2.0) ?f)\n                    \\<in> E (ELam ?x ?e) ?\\<rho>\n\ngoal (1 subgoal):\n 1. VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)", "by blast"], ["proof (state)\nthis:\n  VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "have 5: \"(y, v3) # \\<rho> \\<approx> (y, v3) # \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y, v3) # \\<rho> \\<approx> (y, v3) # \\<rho>", "by auto"], ["proof (state)\nthis:\n  (y, v3) # \\<rho> \\<approx> (y, v3) # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>x f xa e e' \\<rho> v y.\n       \\<lbrakk>x |\\<notin>| f;\n        \\<And>x e e' \\<rho> v y.\n           \\<lbrakk>VFun f \\<in> E (ELam x e) \\<rho>; is_val v;\n            ELam x e = ELam x (subst y v e');\n            \\<forall>v1 v2.\n               v2 \\<in> E (subst y v e')\n                         ((x, v1) # \\<rho>) \\<longrightarrow>\n               (\\<exists>\\<rho>' v'.\n                   v' \\<in> E v [] \\<and>\n                   v2 \\<in> E e' \\<rho>' \\<and>\n                   \\<rho>' \\<approx> (y, v') # (x, v1) # \\<rho>);\n            x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                VFun f \\<in> E (ELam x e') \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        VFun (finsert x f) \\<in> E (ELam xa e) \\<rho>; is_val v;\n        ELam xa e = ELam xa (subst y v e');\n        \\<forall>v1 v2.\n           v2 \\<in> E (subst y v e') ((xa, v1) # \\<rho>) \\<longrightarrow>\n           (\\<exists>\\<rho>' v'.\n               v' \\<in> E v [] \\<and>\n               v2 \\<in> E e' \\<rho>' \\<and>\n               \\<rho>' \\<approx> (y, v') # (xa, v1) # \\<rho>);\n        xa \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            VFun (finsert x f)\n                            \\<in> E (ELam xa e') \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from v3_v 4 5"], ["proof (chain)\npicking this:\n  v3 \\<in> E v []\n  VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)\n  (y, v3) # \\<rho> \\<approx> (y, v3) # \\<rho>", "show ?case"], ["proof (prove)\nusing this:\n  v3 \\<in> E v []\n  VFun (finsert a f) \\<in> E (ELam x e') ((y, v3) # \\<rho>)\n  (y, v3) # \\<rho> \\<approx> (y, v3) # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       VFun (finsert a f) \\<in> E (ELam x e') \\<rho>'' \\<and>\n       \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     VFun (finsert a f) \\<in> E (ELam x e') \\<rho>'' \\<and>\n     \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_ext_none: \"\\<lbrakk> lookup \\<rho> y = None; x \\<noteq> y \\<rbrakk> \\<Longrightarrow> lookup ((x,v)#\\<rho>) y = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lookup \\<rho> y = None; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> lookup ((x, v) # \\<rho>) y = None", "by auto\n\n\\<comment> \\<open>For reverse subst lemma, the variable case shows up over and over, so we prove it as a lemma\\<close>"], ["", "lemma rev_subst_var:\n  assumes ev: \"e = EVar y \\<and> v = e'\" and vv: \"is_val v\" and vp_E: \"v' \\<in> E e' \\<rho>\"\n  shows \"\\<exists> \\<rho>' v''. v'' \\<in> E v [] \\<and> v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> ((y,v'')#\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "from vv"], ["proof (chain)\npicking this:\n  is_val v", "have lx: \"\\<forall> x. x \\<in> FV v \\<longrightarrow> lookup [] x = lookup \\<rho> x\""], ["proof (prove)\nusing this:\n  is_val v\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<in> FV v \\<longrightarrow> lookup [] x = lookup \\<rho> x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in> FV v \\<longrightarrow> lookup [] x = lookup \\<rho> x\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "from ev vp_E lx env_strengthen[of v' v \\<rho> \"[]\"]"], ["proof (chain)\npicking this:\n  e = EVar y \\<and> v = e'\n  v' \\<in> E e' \\<rho>\n  \\<forall>x. x \\<in> FV v \\<longrightarrow> lookup [] x = lookup \\<rho> x\n  \\<lbrakk>v' \\<in> E v \\<rho>;\n   \\<forall>x.\n      x \\<in> FV v \\<longrightarrow> lookup [] x = lookup \\<rho> x\\<rbrakk>\n  \\<Longrightarrow> v' \\<in> E v []", "have n_Ev: \"v' \\<in> E v []\""], ["proof (prove)\nusing this:\n  e = EVar y \\<and> v = e'\n  v' \\<in> E e' \\<rho>\n  \\<forall>x. x \\<in> FV v \\<longrightarrow> lookup [] x = lookup \\<rho> x\n  \\<lbrakk>v' \\<in> E v \\<rho>;\n   \\<forall>x.\n      x \\<in> FV v \\<longrightarrow> lookup [] x = lookup \\<rho> x\\<rbrakk>\n  \\<Longrightarrow> v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. v' \\<in> E v []", "by blast"], ["proof (state)\nthis:\n  v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "have ly: \"lookup ((y,v')#\\<rho>) y = Some v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup ((y, v') # \\<rho>) y = Some v'", "by simp"], ["proof (state)\nthis:\n  lookup ((y, v') # \\<rho>) y = Some v'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "from env_eq_def"], ["proof (chain)\npicking this:\n  ?\\<rho> \\<approx> ?\\<rho>' \\<equiv>\n  \\<forall>x. lookup ?\\<rho> x = lookup ?\\<rho>' x", "have rr: \"((y,v')#\\<rho>) \\<approx> ((y,v')#\\<rho>)\""], ["proof (prove)\nusing this:\n  ?\\<rho> \\<approx> ?\\<rho>' \\<equiv>\n  \\<forall>x. lookup ?\\<rho> x = lookup ?\\<rho>' x\n\ngoal (1 subgoal):\n 1. (y, v') # \\<rho> \\<approx> (y, v') # \\<rho>", "by simp"], ["proof (state)\nthis:\n  (y, v') # \\<rho> \\<approx> (y, v') # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "from ev ly"], ["proof (chain)\npicking this:\n  e = EVar y \\<and> v = e'\n  lookup ((y, v') # \\<rho>) y = Some v'", "have n_Ee: \"v' \\<in> E e ((y,v')#\\<rho>)\""], ["proof (prove)\nusing this:\n  e = EVar y \\<and> v = e'\n  lookup ((y, v') # \\<rho>) y = Some v'\n\ngoal (1 subgoal):\n 1. v' \\<in> E e ((y, v') # \\<rho>)", "by simp"], ["proof (state)\nthis:\n  v' \\<in> E e ((y, v') # \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "from n_Ev rr n_Ee"], ["proof (chain)\npicking this:\n  v' \\<in> E v []\n  (y, v') # \\<rho> \\<approx> (y, v') # \\<rho>\n  v' \\<in> E e ((y, v') # \\<rho>)", "show ?thesis"], ["proof (prove)\nusing this:\n  v' \\<in> E v []\n  (y, v') # \\<rho> \\<approx> (y, v') # \\<rho>\n  v' \\<in> E e ((y, v') # \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reverse_subst_pres_denot:\n  assumes vep: \"v' \\<in> E e' \\<rho>\" and vv: \"is_val v\" and ep: \"e' = subst y v e\"\n  shows \"\\<exists> \\<rho>' v''. v'' \\<in> E v [] \\<and> v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> ((y,v'')#\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "using vep vv ep"], ["proof (prove)\nusing this:\n  v' \\<in> E e' \\<rho>\n  is_val v\n  e' = subst y v e\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>", "proof  (induction arbitrary: v' y v e rule: E.induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>n \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (ENat n) \\<rho>; is_val v;\n        ENat n = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 6. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "case (1 n \\<rho>) \\<comment> \\<open>e' = ENat n\\<close>"], ["proof (state)\nthis:\n  v' \\<in> E (ENat n) \\<rho>\n  is_val v\n  ENat n = subst y v e\n\ngoal (6 subgoals):\n 1. \\<And>n \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (ENat n) \\<rho>; is_val v;\n        ENat n = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 6. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 1(1)"], ["proof (chain)\npicking this:\n  v' \\<in> E (ENat n) \\<rho>", "have vp: \"v' = VNat n\""], ["proof (prove)\nusing this:\n  v' \\<in> E (ENat n) \\<rho>\n\ngoal (1 subgoal):\n 1. v' = VNat n", "by auto"], ["proof (state)\nthis:\n  v' = VNat n\n\ngoal (6 subgoals):\n 1. \\<And>n \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (ENat n) \\<rho>; is_val v;\n        ENat n = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 6. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 1(3)"], ["proof (chain)\npicking this:\n  ENat n = subst y v e", "have \"e = ENat n \\<or> (e = EVar y \\<and> v = ENat n)\""], ["proof (prove)\nusing this:\n  ENat n = subst y v e\n\ngoal (1 subgoal):\n 1. e = ENat n \\<or> e = EVar y \\<and> v = ENat n", "by (cases e, auto)"], ["proof (state)\nthis:\n  e = ENat n \\<or> e = EVar y \\<and> v = ENat n\n\ngoal (6 subgoals):\n 1. \\<And>n \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (ENat n) \\<rho>; is_val v;\n        ENat n = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 6. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "then"], ["proof (chain)\npicking this:\n  e = ENat n \\<or> e = EVar y \\<and> v = ENat n", "show ?case"], ["proof (prove)\nusing this:\n  e = ENat n \\<or> e = EVar y \\<and> v = ENat n\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. e = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. e = EVar y \\<and> v = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "assume e: \"e = ENat n\""], ["proof (state)\nthis:\n  e = ENat n\n\ngoal (2 subgoals):\n 1. e = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. e = EVar y \\<and> v = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from 1(2) e_val is_val_def"], ["proof (chain)\npicking this:\n  is_val v\n  isval ?v \\<Longrightarrow> \\<exists>v'. v' \\<in> E ?v ?\\<rho>\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}", "obtain v'' where vpp_E: \"v'' \\<in> E v []\""], ["proof (prove)\nusing this:\n  is_val v\n  isval ?v \\<Longrightarrow> \\<exists>v'. v' \\<in> E ?v ?\\<rho>\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}\n\ngoal (1 subgoal):\n 1. (\\<And>v''. v'' \\<in> E v [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  v'' \\<in> E v []\n\ngoal (2 subgoals):\n 1. e = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. e = EVar y \\<and> v = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from env_eq_def"], ["proof (chain)\npicking this:\n  ?\\<rho> \\<approx> ?\\<rho>' \\<equiv>\n  \\<forall>x. lookup ?\\<rho> x = lookup ?\\<rho>' x", "have rr: \"((y,v'')#\\<rho>) \\<approx> ((y,v'')#\\<rho>)\""], ["proof (prove)\nusing this:\n  ?\\<rho> \\<approx> ?\\<rho>' \\<equiv>\n  \\<forall>x. lookup ?\\<rho> x = lookup ?\\<rho>' x\n\ngoal (1 subgoal):\n 1. (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>", "by simp"], ["proof (state)\nthis:\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>\n\ngoal (2 subgoals):\n 1. e = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. e = EVar y \\<and> v = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from vp e"], ["proof (chain)\npicking this:\n  v' = VNat n\n  e = ENat n", "have vp_E: \"v' \\<in> E e ((y,v'')#\\<rho>)\""], ["proof (prove)\nusing this:\n  v' = VNat n\n  e = ENat n\n\ngoal (1 subgoal):\n 1. v' \\<in> E e ((y, v'') # \\<rho>)", "by simp"], ["proof (state)\nthis:\n  v' \\<in> E e ((y, v'') # \\<rho>)\n\ngoal (2 subgoals):\n 1. e = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. e = EVar y \\<and> v = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from vpp_E vp_E rr"], ["proof (chain)\npicking this:\n  v'' \\<in> E v []\n  v' \\<in> E e ((y, v'') # \\<rho>)\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>", "show ?thesis"], ["proof (prove)\nusing this:\n  v'' \\<in> E v []\n  v' \\<in> E e ((y, v'') # \\<rho>)\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. e = EVar y \\<and> v = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. e = EVar y \\<and> v = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "assume ev: \"e = EVar y \\<and> v = ENat n\""], ["proof (state)\nthis:\n  e = EVar y \\<and> v = ENat n\n\ngoal (1 subgoal):\n 1. e = EVar y \\<and> v = ENat n \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from ev 1(2) 1(1) rev_subst_var"], ["proof (chain)\npicking this:\n  e = EVar y \\<and> v = ENat n\n  is_val v\n  v' \\<in> E (ENat n) \\<rho>\n  \\<lbrakk>?e = EVar ?y \\<and> ?v = ?e'; is_val ?v;\n   ?v' \\<in> E ?e' ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>", "show ?thesis"], ["proof (prove)\nusing this:\n  e = EVar y \\<and> v = ENat n\n  is_val v\n  v' \\<in> E (ENat n) \\<rho>\n  \\<lbrakk>?e = EVar ?y \\<and> ?v = ?e'; is_val ?v;\n   ?v' \\<in> E ?e' ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "case (2 x \\<rho>) \\<comment> \\<open>e' = EVar x\\<close>"], ["proof (state)\nthis:\n  v' \\<in> E (EVar x) \\<rho>\n  is_val v\n  EVar x = subst y v e\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 2"], ["proof (chain)\npicking this:\n  v' \\<in> E (EVar x) \\<rho>\n  is_val v\n  EVar x = subst y v e", "have e: \"e = EVar x\""], ["proof (prove)\nusing this:\n  v' \\<in> E (EVar x) \\<rho>\n  is_val v\n  EVar x = subst y v e\n\ngoal (1 subgoal):\n 1. e = EVar x", "by (cases e, auto)"], ["proof (state)\nthis:\n  e = EVar x\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 2 e"], ["proof (chain)\npicking this:\n  v' \\<in> E (EVar x) \\<rho>\n  is_val v\n  EVar x = subst y v e\n  e = EVar x", "have xy: \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  v' \\<in> E (EVar x) \\<rho>\n  is_val v\n  EVar x = subst y v e\n  e = EVar x\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by force"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 2(2) e_val is_val_def"], ["proof (chain)\npicking this:\n  is_val v\n  isval ?v \\<Longrightarrow> \\<exists>v'. v' \\<in> E ?v ?\\<rho>\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}", "obtain v'' where vpp_E: \"v'' \\<in> E v []\""], ["proof (prove)\nusing this:\n  is_val v\n  isval ?v \\<Longrightarrow> \\<exists>v'. v' \\<in> E ?v ?\\<rho>\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}\n\ngoal (1 subgoal):\n 1. (\\<And>v''. v'' \\<in> E v [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  v'' \\<in> E v []\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from env_eq_def"], ["proof (chain)\npicking this:\n  ?\\<rho> \\<approx> ?\\<rho>' \\<equiv>\n  \\<forall>x. lookup ?\\<rho> x = lookup ?\\<rho>' x", "have rr: \"((y,v'')#\\<rho>) \\<approx> ((y,v'')#\\<rho>)\""], ["proof (prove)\nusing this:\n  ?\\<rho> \\<approx> ?\\<rho>' \\<equiv>\n  \\<forall>x. lookup ?\\<rho> x = lookup ?\\<rho>' x\n\ngoal (1 subgoal):\n 1. (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>", "by simp"], ["proof (state)\nthis:\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 2(1)"], ["proof (chain)\npicking this:\n  v' \\<in> E (EVar x) \\<rho>", "obtain vx where lx: \"lookup \\<rho> x = Some vx\" and vp_vx: \"v' \\<sqsubseteq> vx\""], ["proof (prove)\nusing this:\n  v' \\<in> E (EVar x) \\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>vx.\n        \\<lbrakk>lookup \\<rho> x = Some vx; v' \\<sqsubseteq> vx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lookup \\<rho> x = Some vx\n  v' \\<sqsubseteq> vx\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from e lx vp_vx xy"], ["proof (chain)\npicking this:\n  e = EVar x\n  lookup \\<rho> x = Some vx\n  v' \\<sqsubseteq> vx\n  x \\<noteq> y", "have vp_E: \"v' \\<in> E e ((y,v'')#\\<rho>)\""], ["proof (prove)\nusing this:\n  e = EVar x\n  lookup \\<rho> x = Some vx\n  v' \\<sqsubseteq> vx\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. v' \\<in> E e ((y, v'') # \\<rho>)", "by simp"], ["proof (state)\nthis:\n  v' \\<in> E e ((y, v'') # \\<rho>)\n\ngoal (5 subgoals):\n 1. \\<And>x \\<rho> v' y v e.\n       \\<lbrakk>v' \\<in> E (EVar x) \\<rho>; is_val v;\n        EVar x = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 5. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from vpp_E rr vp_E"], ["proof (chain)\npicking this:\n  v'' \\<in> E v []\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>\n  v' \\<in> E e ((y, v'') # \\<rho>)", "show ?case"], ["proof (prove)\nusing this:\n  v'' \\<in> E v []\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>\n  v' \\<in> E e ((y, v'') # \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "case (3 x eb \\<rho>)"], ["proof (state)\nthis:\n  \\<lbrakk>(?xaa, ?xab) \\<in> fset ?xb; ?v' \\<in> E eb ((x, ?xaa) # \\<rho>);\n   is_val ?v; eb = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # (x, ?xaa) # \\<rho>\n  v' \\<in> E (ELam x eb) \\<rho>\n  is_val v\n  ELam x eb = subst y v e\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "{"], ["proof (state)\nthis:\n  \\<lbrakk>(?xaa, ?xab) \\<in> fset ?xb; ?v' \\<in> E eb ((x, ?xaa) # \\<rho>);\n   is_val ?v; eb = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # (x, ?xaa) # \\<rho>\n  v' \\<in> E (ELam x eb) \\<rho>\n  is_val v\n  ELam x eb = subst y v e\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "assume ev: \"e = EVar y \\<and> v = ELam x eb\""], ["proof (state)\nthis:\n  e = EVar y \\<and> v = ELam x eb\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from ev 3(3) 3(2) rev_subst_var"], ["proof (chain)\npicking this:\n  e = EVar y \\<and> v = ELam x eb\n  is_val v\n  v' \\<in> E (ELam x eb) \\<rho>\n  \\<lbrakk>?e = EVar ?y \\<and> ?v = ?e'; is_val ?v;\n   ?v' \\<in> E ?e' ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>", "have ?case"], ["proof (prove)\nusing this:\n  e = EVar y \\<and> v = ELam x eb\n  is_val v\n  v' \\<in> E (ELam x eb) \\<rho>\n  \\<lbrakk>?e = EVar ?y \\<and> ?v = ?e'; is_val ?v;\n   ?v' \\<in> E ?e' ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>' \\<and>\n                       \\<rho>' \\<approx> (?y, v'') # ?\\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "}"], ["proof (state)\nthis:\n  e = EVar y \\<and> v = ELam x eb \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "also"], ["proof (state)\nthis:\n  e = EVar y \\<and> v = ELam x eb \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "{"], ["proof (state)\nthis:\n  e = EVar y \\<and> v = ELam x eb \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "assume ex: \"e = ELam x eb \\<and> x = y\""], ["proof (state)\nthis:\n  e = ELam x eb \\<and> x = y\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 3(3) e_val is_val_def"], ["proof (chain)\npicking this:\n  is_val v\n  isval ?v \\<Longrightarrow> \\<exists>v'. v' \\<in> E ?v ?\\<rho>\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}", "obtain v'' where vpp_E: \"v'' \\<in> E v []\""], ["proof (prove)\nusing this:\n  is_val v\n  isval ?v \\<Longrightarrow> \\<exists>v'. v' \\<in> E ?v ?\\<rho>\n  is_val ?v \\<equiv> isval ?v \\<and> FV ?v = {}\n\ngoal (1 subgoal):\n 1. (\\<And>v''. v'' \\<in> E v [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  v'' \\<in> E v []\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from env_eq_def"], ["proof (chain)\npicking this:\n  ?\\<rho> \\<approx> ?\\<rho>' \\<equiv>\n  \\<forall>x. lookup ?\\<rho> x = lookup ?\\<rho>' x", "have rr: \"((y,v'')#\\<rho>) \\<approx> ((y,v'')#\\<rho>)\""], ["proof (prove)\nusing this:\n  ?\\<rho> \\<approx> ?\\<rho>' \\<equiv>\n  \\<forall>x. lookup ?\\<rho> x = lookup ?\\<rho>' x\n\ngoal (1 subgoal):\n 1. (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>", "by simp"], ["proof (state)\nthis:\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from ex"], ["proof (chain)\npicking this:\n  e = ELam x eb \\<and> x = y", "have lz: \"\\<forall> z. z \\<in> FV (ELam x eb) \\<longrightarrow> lookup ((y,v'')#\\<rho>) z = lookup \\<rho> z\""], ["proof (prove)\nusing this:\n  e = ELam x eb \\<and> x = y\n\ngoal (1 subgoal):\n 1. \\<forall>z.\n       z \\<in> FV (ELam x eb) \\<longrightarrow>\n       lookup ((y, v'') # \\<rho>) z = lookup \\<rho> z", "by auto"], ["proof (state)\nthis:\n  \\<forall>z.\n     z \\<in> FV (ELam x eb) \\<longrightarrow>\n     lookup ((y, v'') # \\<rho>) z = lookup \\<rho> z\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from ex 3(2) lz env_strengthen[of v' \"ELam x eb\" \\<rho> \"(y,v'')#\\<rho>\"]"], ["proof (chain)\npicking this:\n  e = ELam x eb \\<and> x = y\n  v' \\<in> E (ELam x eb) \\<rho>\n  \\<forall>z.\n     z \\<in> FV (ELam x eb) \\<longrightarrow>\n     lookup ((y, v'') # \\<rho>) z = lookup \\<rho> z\n  \\<lbrakk>v' \\<in> E (ELam x eb) \\<rho>;\n   \\<forall>xa.\n      xa \\<in> FV (ELam x eb) \\<longrightarrow>\n      lookup ((y, v'') # \\<rho>) xa = lookup \\<rho> xa\\<rbrakk>\n  \\<Longrightarrow> v' \\<in> E (ELam x eb) ((y, v'') # \\<rho>)", "have vp_E: \"v' \\<in> E e ((y,v'')#\\<rho>)\""], ["proof (prove)\nusing this:\n  e = ELam x eb \\<and> x = y\n  v' \\<in> E (ELam x eb) \\<rho>\n  \\<forall>z.\n     z \\<in> FV (ELam x eb) \\<longrightarrow>\n     lookup ((y, v'') # \\<rho>) z = lookup \\<rho> z\n  \\<lbrakk>v' \\<in> E (ELam x eb) \\<rho>;\n   \\<forall>xa.\n      xa \\<in> FV (ELam x eb) \\<longrightarrow>\n      lookup ((y, v'') # \\<rho>) xa = lookup \\<rho> xa\\<rbrakk>\n  \\<Longrightarrow> v' \\<in> E (ELam x eb) ((y, v'') # \\<rho>)\n\ngoal (1 subgoal):\n 1. v' \\<in> E e ((y, v'') # \\<rho>)", "by blast"], ["proof (state)\nthis:\n  v' \\<in> E e ((y, v'') # \\<rho>)\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from vpp_E vp_E rr"], ["proof (chain)\npicking this:\n  v'' \\<in> E v []\n  v' \\<in> E e ((y, v'') # \\<rho>)\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>", "have ?case"], ["proof (prove)\nusing this:\n  v'' \\<in> E v []\n  v' \\<in> E e ((y, v'') # \\<rho>)\n  (y, v'') # \\<rho> \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "}"], ["proof (state)\nthis:\n  e = ELam x eb \\<and> x = y \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "moreover"], ["proof (state)\nthis:\n  e = ELam x eb \\<and> x = y \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "{"], ["proof (state)\nthis:\n  e = ELam x eb \\<and> x = y \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "assume exb: \"\\<exists> e'. e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e'\""], ["proof (state)\nthis:\n  \\<exists>e'. e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e'\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from exb"], ["proof (chain)\npicking this:\n  \\<exists>e'. e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e'", "obtain e'' where e: \"e = ELam x e''\" and xy: \"x \\<noteq> y\" \n      and eb: \"eb = subst y v e''\""], ["proof (prove)\nusing this:\n  \\<exists>e'. e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e'\n\ngoal (1 subgoal):\n 1. (\\<And>e''.\n        \\<lbrakk>e = ELam x e''; x \\<noteq> y; eb = subst y v e''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  e = ELam x e''\n  x \\<noteq> y\n  eb = subst y v e''\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 3(2)"], ["proof (chain)\npicking this:\n  v' \\<in> E (ELam x eb) \\<rho>", "obtain f where vp: \"v' = VFun f\""], ["proof (prove)\nusing this:\n  v' \\<in> E (ELam x eb) \\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>f. v' = VFun f \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  v' = VFun f\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 3(2) vp"], ["proof (chain)\npicking this:\n  v' \\<in> E (ELam x eb) \\<rho>\n  v' = VFun f", "have f_E: \"VFun f \\<in> E (ELam x eb) \\<rho>\""], ["proof (prove)\nusing this:\n  v' \\<in> E (ELam x eb) \\<rho>\n  v' = VFun f\n\ngoal (1 subgoal):\n 1. VFun f \\<in> E (ELam x eb) \\<rho>", "by simp"], ["proof (state)\nthis:\n  VFun f \\<in> E (ELam x eb) \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 3(4) e xy"], ["proof (chain)\npicking this:\n  ELam x eb = subst y v e\n  e = ELam x e''\n  x \\<noteq> y", "have ls: \"ELam x eb = ELam x (subst y v e'')\""], ["proof (prove)\nusing this:\n  ELam x eb = subst y v e\n  e = ELam x e''\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. ELam x eb = ELam x (subst y v e'')", "by simp"], ["proof (state)\nthis:\n  ELam x eb = ELam x (subst y v e'')\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 3(3) eb"], ["proof (chain)\npicking this:\n  is_val v\n  eb = subst y v e''", "have IH: \"\\<forall> v1 v2. v2 \\<in> E (subst y v e'') ((x,v1)#\\<rho>) \n        \\<longrightarrow> (\\<exists> \\<rho>' v'. v' \\<in> E v [] \\<and> v2 \\<in> E e'' \\<rho>' \\<and> \\<rho>' \\<approx> (y,v')#(x,v1)#\\<rho>)\""], ["proof (prove)\nusing this:\n  is_val v\n  eb = subst y v e''\n\ngoal (1 subgoal):\n 1. \\<forall>v1 v2.\n       v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n       (\\<exists>\\<rho>'' v'.\n           v' \\<in> E v [] \\<and>\n           v2 \\<in> E e'' \\<rho>'' \\<and>\n           \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>'' v'.\n                            v' \\<in> E v [] \\<and>\n                            v2 \\<in> E e'' \\<rho>'' \\<and>\n                            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>", "apply (subgoal_tac \"(v1,v2) \\<in> fset {|(v1,v2)|}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>'' v'.\n                            v' \\<in> E v [] \\<and>\n                            v2 \\<in> E e'' \\<rho>'' \\<and>\n                            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>\n 2. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>)\\<rbrakk>\n       \\<Longrightarrow> (v1, v2) \\<in> fset {|(v1, v2)|}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>)\\<rbrakk>\n       \\<Longrightarrow> (v1, v2) \\<in> fset {|(v1, v2)|}\n 2. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>'' v'.\n                            v' \\<in> E v [] \\<and>\n                            v2 \\<in> E e'' \\<rho>'' \\<and>\n                            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>'' v'.\n                            v' \\<in> E v [] \\<and>\n                            v2 \\<in> E e'' \\<rho>'' \\<and>\n                            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>", "apply (rule 3(1))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> (v1, ?xab6 v1 v2) \\<in> fset (?xb6 v1 v2)\n 2. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> v2 \\<in> E eb ((x, v1) # \\<rho>)\n 3. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> is_val v\n 4. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> eb = subst y v e''", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> v2 \\<in> E eb ((x, v1) # \\<rho>)\n 2. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> is_val v\n 3. \\<And>v1 v2.\n       \\<lbrakk>is_val v; eb = subst y v e'';\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>);\n        (v1, v2) \\<in> fset {|(v1, v2)|}\\<rbrakk>\n       \\<Longrightarrow> eb = subst y v e''", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e'' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from f_E 3(3) ls xy IH e vp"], ["proof (chain)\npicking this:\n  VFun f \\<in> E (ELam x eb) \\<rho>\n  is_val v\n  ELam x eb = ELam x (subst y v e'')\n  x \\<noteq> y\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e'' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  e = ELam x e''\n  v' = VFun f", "have ?case"], ["proof (prove)\nusing this:\n  VFun f \\<in> E (ELam x eb) \\<rho>\n  is_val v\n  ELam x eb = ELam x (subst y v e'')\n  x \\<noteq> y\n  \\<forall>v1 v2.\n     v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n     (\\<exists>\\<rho>'' v'.\n         v' \\<in> E v [] \\<and>\n         v2 \\<in> E e'' \\<rho>'' \\<and>\n         \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)\n  e = ELam x e''\n  v' = VFun f\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>VFun f \\<in> E (ELam x (subst y v e'')) \\<rho>; is_val v;\n     x \\<noteq> y;\n     \\<forall>v1 v2.\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n        (\\<exists>\\<rho>'' v'.\n            v' \\<in> E v [] \\<and>\n            v2 \\<in> E e'' \\<rho>'' \\<and>\n            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>);\n     v' = VFun f; e = ELam x e''; eb = subst y v e''\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                         v'' \\<in> E v [] \\<and>\n                         VFun f \\<in> E (ELam x e'') \\<rho>'' \\<and>\n                         \\<rho>'' \\<approx> (y, v'') # \\<rho>", "apply (rule reverse_subst_lam)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>VFun f \\<in> E (ELam x (subst y v e'')) \\<rho>; is_val v;\n     x \\<noteq> y;\n     \\<forall>v1 v2.\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n        (\\<exists>\\<rho>'' v'.\n            v' \\<in> E v [] \\<and>\n            v2 \\<in> E e'' \\<rho>'' \\<and>\n            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>);\n     v' = VFun f; e = ELam x e''; eb = subst y v e''\\<rbrakk>\n    \\<Longrightarrow> VFun f \\<in> E (ELam x ?e14) \\<rho>\n 2. \\<lbrakk>VFun f \\<in> E (ELam x (subst y v e'')) \\<rho>; is_val v;\n     x \\<noteq> y;\n     \\<forall>v1 v2.\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n        (\\<exists>\\<rho>'' v'.\n            v' \\<in> E v [] \\<and>\n            v2 \\<in> E e'' \\<rho>'' \\<and>\n            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>);\n     v' = VFun f; e = ELam x e''; eb = subst y v e''\\<rbrakk>\n    \\<Longrightarrow> is_val v\n 3. \\<lbrakk>VFun f \\<in> E (ELam x (subst y v e'')) \\<rho>; is_val v;\n     x \\<noteq> y;\n     \\<forall>v1 v2.\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n        (\\<exists>\\<rho>'' v'.\n            v' \\<in> E v [] \\<and>\n            v2 \\<in> E e'' \\<rho>'' \\<and>\n            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>);\n     v' = VFun f; e = ELam x e''; eb = subst y v e''\\<rbrakk>\n    \\<Longrightarrow> ELam x ?e14 = ELam x (subst y v e'')\n 4. \\<lbrakk>VFun f \\<in> E (ELam x (subst y v e'')) \\<rho>; is_val v;\n     x \\<noteq> y;\n     \\<forall>v1 v2.\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n        (\\<exists>\\<rho>'' v'.\n            v' \\<in> E v [] \\<and>\n            v2 \\<in> E e'' \\<rho>'' \\<and>\n            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>);\n     v' = VFun f; e = ELam x e''; eb = subst y v e''\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> y\n 5. \\<lbrakk>VFun f \\<in> E (ELam x (subst y v e'')) \\<rho>; is_val v;\n     x \\<noteq> y;\n     \\<forall>v1 v2.\n        v2 \\<in> E (subst y v e'') ((x, v1) # \\<rho>) \\<longrightarrow>\n        (\\<exists>\\<rho>'' v'.\n            v' \\<in> E v [] \\<and>\n            v2 \\<in> E e'' \\<rho>'' \\<and>\n            \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>);\n     v' = VFun f; e = ELam x e''; eb = subst y v e''\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v1 v2.\n                         v2 \\<in> E (subst y v e'')\n                                   ((x, v1) # \\<rho>) \\<longrightarrow>\n                         (\\<exists>\\<rho>'' v'.\n                             v' \\<in> E v [] \\<and>\n                             v2 \\<in> E e'' \\<rho>'' \\<and>\n                             \\<rho>'' \\<approx> (y, v') # (x, v1) # \\<rho>)", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "}"], ["proof (state)\nthis:\n  \\<exists>e'.\n     e = ELam x e' \\<and>\n     x \\<noteq> y \\<and> eb = subst y v e' \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "moreover"], ["proof (state)\nthis:\n  \\<exists>e'.\n     e = ELam x e' \\<and>\n     x \\<noteq> y \\<and> eb = subst y v e' \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 3(4)"], ["proof (chain)\npicking this:\n  ELam x eb = subst y v e", "have \"(e = EVar y \\<and> v = ELam x eb)\n      \\<or> (e = ELam x eb \\<and> x = y)\n      \\<or> (\\<exists> e'. e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e')\""], ["proof (prove)\nusing this:\n  ELam x eb = subst y v e\n\ngoal (1 subgoal):\n 1. e = EVar y \\<and> v = ELam x eb \\<or>\n    e = ELam x eb \\<and> x = y \\<or>\n    (\\<exists>e'.\n        e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e')", "by (cases e) auto"], ["proof (state)\nthis:\n  e = EVar y \\<and> v = ELam x eb \\<or>\n  e = ELam x eb \\<and> x = y \\<or>\n  (\\<exists>e'. e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e')\n\ngoal (4 subgoals):\n 1. \\<And>x e \\<rho> v' y v ea.\n       \\<lbrakk>\\<And>xa xb xaa xab v' y v ea.\n                   \\<lbrakk>(xaa, xab) \\<in> fset xb;\n                    v' \\<in> E e ((x, xaa) # \\<rho>); is_val v;\n                    e = subst y v ea\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E ea \\<rho>' \\<and>\n  \\<rho>' \\<approx> (y, v'') # (x, xaa) # \\<rho>;\n        v' \\<in> E (ELam x e) \\<rho>; is_val v;\n        ELam x e = subst y v ea\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E ea \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 4. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "ultimately"], ["proof (chain)\npicking this:\n  e = EVar y \\<and> v = ELam x eb \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n  e = ELam x eb \\<and> x = y \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n  \\<exists>e'.\n     e = ELam x e' \\<and>\n     x \\<noteq> y \\<and> eb = subst y v e' \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n  e = EVar y \\<and> v = ELam x eb \\<or>\n  e = ELam x eb \\<and> x = y \\<or>\n  (\\<exists>e'. e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e')", "show ?case"], ["proof (prove)\nusing this:\n  e = EVar y \\<and> v = ELam x eb \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n  e = ELam x eb \\<and> x = y \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n  \\<exists>e'.\n     e = ELam x e' \\<and>\n     x \\<noteq> y \\<and> eb = subst y v e' \\<Longrightarrow>\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n  e = EVar y \\<and> v = ELam x eb \\<or>\n  e = ELam x eb \\<and> x = y \\<or>\n  (\\<exists>e'. e = ELam x e' \\<and> x \\<noteq> y \\<and> eb = subst y v e')\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "case (4 e1 e2 \\<rho>) \\<comment> \\<open>e' = EApp e1 e2\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?v' \\<in> E e2 \\<rho>; is_val ?v; e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EApp e1 e2) \\<rho>\n  is_val v\n  EApp e1 e2 = subst y v e\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 4(4) 4(5)"], ["proof (chain)\npicking this:\n  is_val v\n  EApp e1 e2 = subst y v e", "obtain e1' e2' where \n    e: \"e = EApp e1' e2'\" and e1:\"e1 = subst y v e1'\" and e2: \"e2 = subst y v e2'\""], ["proof (prove)\nusing this:\n  is_val v\n  EApp e1 e2 = subst y v e\n\ngoal (1 subgoal):\n 1. (\\<And>e1' e2'.\n        \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n         e2 = subst y v e2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases e)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = EVar x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = ENat x2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x31 x32.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (rename_tac x)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = EVar x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = ENat x2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x31 x32.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EApp e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EApp e1 e2 = subst y v e; e = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>EApp e1 e2 = (if y = x then v else EVar x); e = EVar x;\n        isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x31 x32.\n       \\<lbrakk>EApp e1 e2 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (case_tac \"y = x\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>EApp e1 e2 = (if y = x then v else EVar x); e = EVar x;\n        isval v; FV v = {}; y = x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x.\n       \\<lbrakk>EApp e1 e2 = (if y = x then v else EVar x); e = EVar x;\n        isval v; FV v = {}; y \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x31 x32.\n       \\<lbrakk>EApp e1 e2 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32.\n       \\<lbrakk>EApp e1 e2 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (rename_tac x1 x2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>EApp e1 e2 =\n                (if y = x1 then ELam x1 x2 else ELam x1 (subst y v x2));\n        e = ELam x1 x2; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (case_tac \"y = x1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>EApp e1 e2 =\n                (if y = x1 then ELam x1 x2 else ELam x1 (subst y v x2));\n        e = ELam x1 x2; isval v; FV v = {}; y = x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x1 x2.\n       \\<lbrakk>EApp e1 e2 =\n                (if y = x1 then ELam x1 x2 else ELam x1 (subst y v x2));\n        e = ELam x1 x2; isval v; FV v = {}; y \\<noteq> x1\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  e = EApp e1' e2'\n  e1 = subst y v e1'\n  e2 = subst y v e2'\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 4(3)"], ["proof (chain)\npicking this:\n  v' \\<in> E (EApp e1 e2) \\<rho>", "obtain f v2 and v2'::val and v3' where\n    f_E: \"VFun f \\<in> E e1 \\<rho>\" and v2_E: \"v2 \\<in> E e2 \\<rho>\" and v23: \"(v2',v3') \\<in> fset f\" \n    and v2p_v2: \"v2' \\<sqsubseteq> v2\" and vp_v3: \"v' \\<sqsubseteq> v3'\""], ["proof (prove)\nusing this:\n  v' \\<in> E (EApp e1 e2) \\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>f v2 v2' v3'.\n        \\<lbrakk>VFun f \\<in> E e1 \\<rho>; v2 \\<in> E e2 \\<rho>;\n         (v2', v3') \\<in> fset f; v2' \\<sqsubseteq> v2;\n         v' \\<sqsubseteq> v3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  VFun f \\<in> E e1 \\<rho>\n  v2 \\<in> E e2 \\<rho>\n  (v2', v3') \\<in> fset f\n  v2' \\<sqsubseteq> v2\n  v' \\<sqsubseteq> v3'\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 4(1) f_E 4(4) e1"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  VFun f \\<in> E e1 \\<rho>\n  is_val v\n  e1 = subst y v e1'", "obtain \\<rho>1 w1 where v1_Ev: \"w1 \\<in> E v []\" and f_E1: \"VFun f \\<in> E e1' \\<rho>1\"\n    and r1: \"\\<rho>1 \\<approx> (y,w1)#\\<rho>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  VFun f \\<in> E e1 \\<rho>\n  is_val v\n  e1 = subst y v e1'\n\ngoal (1 subgoal):\n 1. (\\<And>w1 \\<rho>1.\n        \\<lbrakk>w1 \\<in> E v []; VFun f \\<in> E e1' \\<rho>1;\n         \\<rho>1 \\<approx> (y, w1) # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w1 \\<in> E v []\n  VFun f \\<in> E e1' \\<rho>1\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 4(2) v2_E 4(4) e2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v' \\<in> E e2 \\<rho>; is_val ?v; e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v2 \\<in> E e2 \\<rho>\n  is_val v\n  e2 = subst y v e2'", "obtain \\<rho>2 w2 where v2_Ev: \"w2 \\<in> E v []\" and v2_E2: \"v2 \\<in> E e2' \\<rho>2\"\n    and r2: \"\\<rho>2 \\<approx> (y,w2)#\\<rho>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v' \\<in> E e2 \\<rho>; is_val ?v; e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v2 \\<in> E e2 \\<rho>\n  is_val v\n  e2 = subst y v e2'\n\ngoal (1 subgoal):\n 1. (\\<And>w2 \\<rho>2.\n        \\<lbrakk>w2 \\<in> E v []; v2 \\<in> E e2' \\<rho>2;\n         \\<rho>2 \\<approx> (y, w2) # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w2 \\<in> E v []\n  v2 \\<in> E e2' \\<rho>2\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 4(4) v1_Ev v2_Ev combine_values"], ["proof (chain)\npicking this:\n  is_val v\n  w1 \\<in> E v []\n  w2 \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3", "obtain w3 where \n    w3_Ev: \"w3 \\<in> E v []\" and w123: \"w1 \\<squnion> w2 = Some w3\""], ["proof (prove)\nusing this:\n  is_val v\n  w1 \\<in> E v []\n  w2 \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3\n\ngoal (1 subgoal):\n 1. (\\<And>w3.\n        \\<lbrakk>w3 \\<in> E v []; w1 \\<squnion> w2 = Some w3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp only: is_val_def) blast"], ["proof (state)\nthis:\n  w3 \\<in> E v []\n  w1 \\<squnion> w2 = Some w3\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w123 le_union1"], ["proof (chain)\npicking this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0", "have w13: \"w1 \\<sqsubseteq> w3\""], ["proof (prove)\nusing this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. w1 \\<sqsubseteq> w3", "by blast"], ["proof (state)\nthis:\n  w1 \\<sqsubseteq> w3\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w123 le_union2"], ["proof (chain)\npicking this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0", "have w23: \"w2 \\<sqsubseteq> w3\""], ["proof (prove)\nusing this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. w2 \\<sqsubseteq> w3", "by blast"], ["proof (state)\nthis:\n  w2 \\<sqsubseteq> w3\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w13"], ["proof (chain)\npicking this:\n  w1 \\<sqsubseteq> w3", "have r13: \"((y,w1)#\\<rho>) \\<sqsubseteq> ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  w1 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "by (simp add: env_le_def)"], ["proof (state)\nthis:\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w23"], ["proof (chain)\npicking this:\n  w2 \\<sqsubseteq> w3", "have r23: \"((y,w2)#\\<rho>) \\<sqsubseteq> ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  w2 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "by (simp add: env_le_def)"], ["proof (state)\nthis:\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from r1 f_E1"], ["proof (chain)\npicking this:\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n  VFun f \\<in> E e1' \\<rho>1", "have f_E1b: \"VFun f \\<in> E e1' ((y,w1)#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n  VFun f \\<in> E e1' \\<rho>1\n\ngoal (1 subgoal):\n 1. VFun f \\<in> E e1' ((y, w1) # \\<rho>)", "by (rule env_swap)"], ["proof (state)\nthis:\n  VFun f \\<in> E e1' ((y, w1) # \\<rho>)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from f_E1b r13"], ["proof (chain)\npicking this:\n  VFun f \\<in> E e1' ((y, w1) # \\<rho>)\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "have f_E1c: \"VFun f \\<in> E e1' ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  VFun f \\<in> E e1' ((y, w1) # \\<rho>)\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. VFun f \\<in> E e1' ((y, w3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  VFun f \\<in> E e1' ((y, w3) # \\<rho>)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from r2 v2_E2"], ["proof (chain)\npicking this:\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n  v2 \\<in> E e2' \\<rho>2", "have v2_E2b: \"v2 \\<in> E e2' ((y,w2)#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n  v2 \\<in> E e2' \\<rho>2\n\ngoal (1 subgoal):\n 1. v2 \\<in> E e2' ((y, w2) # \\<rho>)", "by (rule env_swap)"], ["proof (state)\nthis:\n  v2 \\<in> E e2' ((y, w2) # \\<rho>)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from v2_E2b r23"], ["proof (chain)\npicking this:\n  v2 \\<in> E e2' ((y, w2) # \\<rho>)\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "have v2_E2c: \"v2 \\<in> E e2' ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  v2 \\<in> E e2' ((y, w2) # \\<rho>)\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. v2 \\<in> E e2' ((y, w3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  v2 \\<in> E e2' ((y, w3) # \\<rho>)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from f_E1c v2_E2c v23 v2p_v2 vp_v3"], ["proof (chain)\npicking this:\n  VFun f \\<in> E e1' ((y, w3) # \\<rho>)\n  v2 \\<in> E e2' ((y, w3) # \\<rho>)\n  (v2', v3') \\<in> fset f\n  v2' \\<sqsubseteq> v2\n  v' \\<sqsubseteq> v3'", "have vp_E2: \"v' \\<in> E (EApp e1' e2') ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  VFun f \\<in> E e1' ((y, w3) # \\<rho>)\n  v2 \\<in> E e2' ((y, w3) # \\<rho>)\n  (v2', v3') \\<in> fset f\n  v2' \\<sqsubseteq> v2\n  v' \\<sqsubseteq> v3'\n\ngoal (1 subgoal):\n 1. v' \\<in> E (EApp e1' e2') ((y, w3) # \\<rho>)", "by blast"], ["proof (state)\nthis:\n  v' \\<in> E (EApp e1' e2') ((y, w3) # \\<rho>)\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "have rr3: \"((y,w3)#\\<rho>) \\<approx> ((y,w3)#\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>", "by (simp add: env_eq_def)"], ["proof (state)\nthis:\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n\ngoal (3 subgoals):\n 1. \\<And>e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb xc xd v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb xc xd v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EApp e1 e2) \\<rho>; is_val v;\n        EApp e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 3. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w3_Ev vp_E2 rr3 e"], ["proof (chain)\npicking this:\n  w3 \\<in> E v []\n  v' \\<in> E (EApp e1' e2') ((y, w3) # \\<rho>)\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n  e = EApp e1' e2'", "show ?case"], ["proof (prove)\nusing this:\n  w3 \\<in> E v []\n  v' \\<in> E (EApp e1' e2') ((y, w3) # \\<rho>)\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n  e = EApp e1' e2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "case (5 f e1 e2 \\<rho>) \\<comment> \\<open>e' = EPrim f e1 e2, very similar to case for EApp\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?v' \\<in> E e2 \\<rho>; is_val ?v; e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EPrim f e1 e2) \\<rho>\n  is_val v\n  EPrim f e1 e2 = subst y v e\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 5(4) 5(5)"], ["proof (chain)\npicking this:\n  is_val v\n  EPrim f e1 e2 = subst y v e", "obtain e1' e2' where \n    e: \"e = EPrim f e1' e2'\" and e1:\"e1 = subst y v e1'\" and e2: \"e2 = subst y v e2'\""], ["proof (prove)\nusing this:\n  is_val v\n  EPrim f e1 e2 = subst y v e\n\ngoal (1 subgoal):\n 1. (\\<And>e1' e2'.\n        \\<lbrakk>e = EPrim f e1' e2'; e1 = subst y v e1';\n         e2 = subst y v e2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases e)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EPrim f e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EPrim f e1 e2 = subst y v e; e = EVar x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EPrim f e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EPrim f e1 e2 = subst y v e; e = ENat x2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x31 x32.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EPrim f e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EPrim f e1 e2 = subst y v e; e = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EPrim f e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EPrim f e1 e2 = subst y v e; e = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EPrim f e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EPrim f e1 e2 = subst y v e;\n        e = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<And>e1' e2'.\n                   \\<lbrakk>e = EPrim f e1' e2'; e1 = subst y v e1';\n                    e2 = subst y v e2'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EPrim f e1 e2 = subst y v e; e = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>EPrim f e1 e2 = (if y = x1 then v else EVar x1);\n        e = EVar x1; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x31 x32.\n       \\<lbrakk>EPrim f e1 e2 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (rename_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>EPrim f e1 e2 = (if y = x then v else EVar x); e = EVar x;\n        isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x31 x32.\n       \\<lbrakk>EPrim f e1 e2 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (case_tac \"y = x\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>EPrim f e1 e2 = (if y = x then v else EVar x); e = EVar x;\n        isval v; FV v = {}; y = x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x.\n       \\<lbrakk>EPrim f e1 e2 = (if y = x then v else EVar x); e = EVar x;\n        isval v; FV v = {}; y \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x31 x32.\n       \\<lbrakk>EPrim f e1 e2 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32.\n       \\<lbrakk>EPrim f e1 e2 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (rename_tac x1 x2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>EPrim f e1 e2 =\n                (if y = x1 then ELam x1 x2 else ELam x1 (subst y v x2));\n        e = ELam x1 x2; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (case_tac \"y = x1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>EPrim f e1 e2 =\n                (if y = x1 then ELam x1 x2 else ELam x1 (subst y v x2));\n        e = ELam x1 x2; isval v; FV v = {}; y = x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x1 x2.\n       \\<lbrakk>EPrim f e1 e2 =\n                (if y = x1 then ELam x1 x2 else ELam x1 (subst y v x2));\n        e = ELam x1 x2; isval v; FV v = {}; y \\<noteq> x1\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  e = EPrim f e1' e2'\n  e1 = subst y v e1'\n  e2 = subst y v e2'\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 5(3)"], ["proof (chain)\npicking this:\n  v' \\<in> E (EPrim f e1 e2) \\<rho>", "obtain n1 n2 where\n    n1_E: \"VNat n1 \\<in> E e1 \\<rho>\" and n2_E: \"VNat n2 \\<in> E e2 \\<rho>\" and vp: \"v' = VNat (f n1 n2)\""], ["proof (prove)\nusing this:\n  v' \\<in> E (EPrim f e1 e2) \\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>VNat n1 \\<in> E e1 \\<rho>; VNat n2 \\<in> E e2 \\<rho>;\n         v' = VNat (f n1 n2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  VNat n1 \\<in> E e1 \\<rho>\n  VNat n2 \\<in> E e2 \\<rho>\n  v' = VNat (f n1 n2)\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 5(1) n1_E 5(4) e1"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  VNat n1 \\<in> E e1 \\<rho>\n  is_val v\n  e1 = subst y v e1'", "obtain \\<rho>1 w1 where v1_Ev: \"w1 \\<in> E v []\" and n1_E1: \"VNat n1 \\<in> E e1' \\<rho>1\"\n    and r1: \"\\<rho>1 \\<approx> (y,w1)#\\<rho>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  VNat n1 \\<in> E e1 \\<rho>\n  is_val v\n  e1 = subst y v e1'\n\ngoal (1 subgoal):\n 1. (\\<And>w1 \\<rho>1.\n        \\<lbrakk>w1 \\<in> E v []; VNat n1 \\<in> E e1' \\<rho>1;\n         \\<rho>1 \\<approx> (y, w1) # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w1 \\<in> E v []\n  VNat n1 \\<in> E e1' \\<rho>1\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 5(2) n2_E 5(4) e2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v' \\<in> E e2 \\<rho>; is_val ?v; e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  VNat n2 \\<in> E e2 \\<rho>\n  is_val v\n  e2 = subst y v e2'", "obtain \\<rho>2 w2 where v2_Ev: \"w2 \\<in> E v []\" and n2_E2: \"VNat n2 \\<in> E e2' \\<rho>2\"\n    and r2: \"\\<rho>2 \\<approx> (y,w2)#\\<rho>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v' \\<in> E e2 \\<rho>; is_val ?v; e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  VNat n2 \\<in> E e2 \\<rho>\n  is_val v\n  e2 = subst y v e2'\n\ngoal (1 subgoal):\n 1. (\\<And>w2 \\<rho>2.\n        \\<lbrakk>w2 \\<in> E v []; VNat n2 \\<in> E e2' \\<rho>2;\n         \\<rho>2 \\<approx> (y, w2) # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w2 \\<in> E v []\n  VNat n2 \\<in> E e2' \\<rho>2\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 5(4) v1_Ev v2_Ev combine_values"], ["proof (chain)\npicking this:\n  is_val v\n  w1 \\<in> E v []\n  w2 \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3", "obtain w3 where \n    w3_Ev: \"w3 \\<in> E v []\" and w123: \"w1 \\<squnion> w2 = Some w3\""], ["proof (prove)\nusing this:\n  is_val v\n  w1 \\<in> E v []\n  w2 \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3\n\ngoal (1 subgoal):\n 1. (\\<And>w3.\n        \\<lbrakk>w3 \\<in> E v []; w1 \\<squnion> w2 = Some w3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp only: is_val_def) blast"], ["proof (state)\nthis:\n  w3 \\<in> E v []\n  w1 \\<squnion> w2 = Some w3\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w123 le_union1"], ["proof (chain)\npicking this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0", "have w13: \"w1 \\<sqsubseteq> w3\""], ["proof (prove)\nusing this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. w1 \\<sqsubseteq> w3", "by blast"], ["proof (state)\nthis:\n  w1 \\<sqsubseteq> w3\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w123 le_union2"], ["proof (chain)\npicking this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0", "have w23: \"w2 \\<sqsubseteq> w3\""], ["proof (prove)\nusing this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. w2 \\<sqsubseteq> w3", "by blast"], ["proof (state)\nthis:\n  w2 \\<sqsubseteq> w3\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w13"], ["proof (chain)\npicking this:\n  w1 \\<sqsubseteq> w3", "have r13: \"((y,w1)#\\<rho>) \\<sqsubseteq> ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  w1 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "by (simp add: env_le_def)"], ["proof (state)\nthis:\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w23"], ["proof (chain)\npicking this:\n  w2 \\<sqsubseteq> w3", "have r23: \"((y,w2)#\\<rho>) \\<sqsubseteq> ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  w2 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "by (simp add: env_le_def)"], ["proof (state)\nthis:\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from r1 n1_E1"], ["proof (chain)\npicking this:\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n  VNat n1 \\<in> E e1' \\<rho>1", "have n1_E1b: \"VNat n1 \\<in> E e1' ((y,w1)#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n  VNat n1 \\<in> E e1' \\<rho>1\n\ngoal (1 subgoal):\n 1. VNat n1 \\<in> E e1' ((y, w1) # \\<rho>)", "by (rule env_swap)"], ["proof (state)\nthis:\n  VNat n1 \\<in> E e1' ((y, w1) # \\<rho>)\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from n1_E1b r13"], ["proof (chain)\npicking this:\n  VNat n1 \\<in> E e1' ((y, w1) # \\<rho>)\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "have n1_E1c: \"VNat n1 \\<in> E e1' ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  VNat n1 \\<in> E e1' ((y, w1) # \\<rho>)\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. VNat n1 \\<in> E e1' ((y, w3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  VNat n1 \\<in> E e1' ((y, w3) # \\<rho>)\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from r2 n2_E2"], ["proof (chain)\npicking this:\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n  VNat n2 \\<in> E e2' \\<rho>2", "have n2_E2b: \"VNat n2 \\<in> E e2' ((y,w2)#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n  VNat n2 \\<in> E e2' \\<rho>2\n\ngoal (1 subgoal):\n 1. VNat n2 \\<in> E e2' ((y, w2) # \\<rho>)", "by (rule env_swap)"], ["proof (state)\nthis:\n  VNat n2 \\<in> E e2' ((y, w2) # \\<rho>)\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from n2_E2b r23"], ["proof (chain)\npicking this:\n  VNat n2 \\<in> E e2' ((y, w2) # \\<rho>)\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "have v2_E2c: \"VNat n2 \\<in> E e2' ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  VNat n2 \\<in> E e2' ((y, w2) # \\<rho>)\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. VNat n2 \\<in> E e2' ((y, w3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  VNat n2 \\<in> E e2' ((y, w3) # \\<rho>)\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from n1_E1c v2_E2c vp"], ["proof (chain)\npicking this:\n  VNat n1 \\<in> E e1' ((y, w3) # \\<rho>)\n  VNat n2 \\<in> E e2' ((y, w3) # \\<rho>)\n  v' = VNat (f n1 n2)", "have vp_E2: \"v' \\<in> E (EPrim f e1' e2') ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  VNat n1 \\<in> E e1' ((y, w3) # \\<rho>)\n  VNat n2 \\<in> E e2' ((y, w3) # \\<rho>)\n  v' = VNat (f n1 n2)\n\ngoal (1 subgoal):\n 1. v' \\<in> E (EPrim f e1' e2') ((y, w3) # \\<rho>)", "by blast"], ["proof (state)\nthis:\n  v' \\<in> E (EPrim f e1' e2') ((y, w3) # \\<rho>)\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "have rr3: \"((y,w3)#\\<rho>) \\<approx> ((y,w3)#\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>", "by (simp add: env_eq_def)"], ["proof (state)\nthis:\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n\ngoal (2 subgoals):\n 1. \\<And>f e1 e2 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa xb v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa xb v' y v e.\n           \\<lbrakk>v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EPrim f e1 e2) \\<rho>; is_val v;\n        EPrim f e1 e2 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>\n 2. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from w3_Ev vp_E2 rr3 e"], ["proof (chain)\npicking this:\n  w3 \\<in> E v []\n  v' \\<in> E (EPrim f e1' e2') ((y, w3) # \\<rho>)\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n  e = EPrim f e1' e2'", "show ?case"], ["proof (prove)\nusing this:\n  w3 \\<in> E v []\n  v' \\<in> E (EPrim f e1' e2') ((y, w3) # \\<rho>)\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n  e = EPrim f e1' e2'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "case (6 e1 e2 e3 \\<rho>) \\<comment> \\<open>e' = EIf e1 e2 e3\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa = 0; ?v' \\<in> E e3 \\<rho>; is_val ?v;\n   e3 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa \\<noteq> 0; ?v' \\<in> E e2 \\<rho>; is_val ?v;\n   e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  is_val v\n  EIf e1 e2 e3 = subst y v e\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 6(5) 6(6)"], ["proof (chain)\npicking this:\n  is_val v\n  EIf e1 e2 e3 = subst y v e", "obtain e1' e2' e3' where \n    e: \"e = EIf e1' e2' e3'\" and e1:\"e1 = subst y v e1'\" and e2: \"e2 = subst y v e2'\"\n    and e3: \"e3 = subst y v e3'\""], ["proof (prove)\nusing this:\n  is_val v\n  EIf e1 e2 e3 = subst y v e\n\ngoal (1 subgoal):\n 1. (\\<And>e1' e2' e3'.\n        \\<lbrakk>e = EIf e1' e2' e3'; e1 = subst y v e1';\n         e2 = subst y v e2'; e3 = subst y v e3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (cases e)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>e1' e2' e3'.\n                   \\<lbrakk>e = EIf e1' e2' e3'; e1 = subst y v e1';\n                    e2 = subst y v e2'; e3 = subst y v e3'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EIf e1 e2 e3 = subst y v e; e = EVar x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>e1' e2' e3'.\n                   \\<lbrakk>e = EIf e1' e2' e3'; e1 = subst y v e1';\n                    e2 = subst y v e2'; e3 = subst y v e3'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EIf e1 e2 e3 = subst y v e; e = ENat x2\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x31 x32.\n       \\<lbrakk>\\<And>e1' e2' e3'.\n                   \\<lbrakk>e = EIf e1' e2' e3'; e1 = subst y v e1';\n                    e2 = subst y v e2'; e3 = subst y v e3'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EIf e1 e2 e3 = subst y v e; e = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> thesis\n 4. \\<And>x41 x42.\n       \\<lbrakk>\\<And>e1' e2' e3'.\n                   \\<lbrakk>e = EIf e1' e2' e3'; e1 = subst y v e1';\n                    e2 = subst y v e2'; e3 = subst y v e3'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EIf e1 e2 e3 = subst y v e; e = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> thesis\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>\\<And>e1' e2' e3'.\n                   \\<lbrakk>e = EIf e1' e2' e3'; e1 = subst y v e1';\n                    e2 = subst y v e2'; e3 = subst y v e3'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EIf e1 e2 e3 = subst y v e; e = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> thesis\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>\\<And>e1' e2' e3'.\n                   \\<lbrakk>e = EIf e1' e2' e3'; e1 = subst y v e1';\n                    e2 = subst y v e2'; e3 = subst y v e3'\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_val v; EIf e1 e2 e3 = subst y v e; e = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>EIf e1 e2 e3 = (if y = x1 then v else EVar x1); e = EVar x1;\n        isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x31 x32.\n       \\<lbrakk>EIf e1 e2 e3 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (case_tac \"y=x1\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>EIf e1 e2 e3 = (if y = x1 then v else EVar x1); e = EVar x1;\n        isval v; FV v = {}; y = x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x1.\n       \\<lbrakk>EIf e1 e2 e3 = (if y = x1 then v else EVar x1); e = EVar x1;\n        isval v; FV v = {}; y \\<noteq> x1\\<rbrakk>\n       \\<Longrightarrow> thesis\n 3. \\<And>x31 x32.\n       \\<lbrakk>EIf e1 e2 e3 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32.\n       \\<lbrakk>EIf e1 e2 e3 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply (case_tac \"y=x31\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x31 x32.\n       \\<lbrakk>EIf e1 e2 e3 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}; y = x31\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>x31 x32.\n       \\<lbrakk>EIf e1 e2 e3 =\n                (if y = x31 then ELam x31 x32\n                 else ELam x31 (subst y v x32));\n        e = ELam x31 x32; isval v; FV v = {}; y \\<noteq> x31\\<rbrakk>\n       \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  e = EIf e1' e2' e3'\n  e1 = subst y v e1'\n  e2 = subst y v e2'\n  e3 = subst y v e3'\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 6(4) e_if_elim"], ["proof (chain)\npicking this:\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  \\<lbrakk>?v \\<in> E (EIf ?e1.0 ?e2.0 ?e3.0) ?\\<rho>;\n   \\<And>n.\n      \\<lbrakk>VNat n \\<in> E ?e1.0 ?\\<rho>;\n       n = 0 \\<longrightarrow> ?v \\<in> E ?e3.0 ?\\<rho>;\n       n \\<noteq> 0 \\<longrightarrow> ?v \\<in> E ?e2.0 ?\\<rho>\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P", "obtain n where n_E: \"VNat n \\<in> E e1 \\<rho>\" and \n    els: \"n = 0 \\<longrightarrow> v' \\<in> E e3 \\<rho>\" and thn: \"n \\<noteq> 0 \\<longrightarrow> v' \\<in> E e2 \\<rho>\""], ["proof (prove)\nusing this:\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  \\<lbrakk>?v \\<in> E (EIf ?e1.0 ?e2.0 ?e3.0) ?\\<rho>;\n   \\<And>n.\n      \\<lbrakk>VNat n \\<in> E ?e1.0 ?\\<rho>;\n       n = 0 \\<longrightarrow> ?v \\<in> E ?e3.0 ?\\<rho>;\n       n \\<noteq> 0 \\<longrightarrow> ?v \\<in> E ?e2.0 ?\\<rho>\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>VNat n \\<in> E e1 \\<rho>;\n         n = 0 \\<longrightarrow> v' \\<in> E e3 \\<rho>;\n         n \\<noteq> 0 \\<longrightarrow> v' \\<in> E e2 \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  VNat n \\<in> E e1 \\<rho>\n  n = 0 \\<longrightarrow> v' \\<in> E e3 \\<rho>\n  n \\<noteq> 0 \\<longrightarrow> v' \\<in> E e2 \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "from 6 n_E e1"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa = 0; ?v' \\<in> E e3 \\<rho>; is_val ?v;\n   e3 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa \\<noteq> 0; ?v' \\<in> E e2 \\<rho>; is_val ?v;\n   e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  is_val v\n  EIf e1 e2 e3 = subst y v e\n  VNat n \\<in> E e1 \\<rho>\n  e1 = subst y v e1'", "obtain \\<rho>1 w1 where w1_Ev: \"w1 \\<in> E v []\" and n_E2: \"VNat n \\<in> E e1' \\<rho>1\"\n    and r1: \"\\<rho>1 \\<approx> (y,w1)#\\<rho>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa = 0; ?v' \\<in> E e3 \\<rho>; is_val ?v;\n   e3 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa \\<noteq> 0; ?v' \\<in> E e2 \\<rho>; is_val ?v;\n   e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  is_val v\n  EIf e1 e2 e3 = subst y v e\n  VNat n \\<in> E e1 \\<rho>\n  e1 = subst y v e1'\n\ngoal (1 subgoal):\n 1. (\\<And>w1 \\<rho>1.\n        \\<lbrakk>w1 \\<in> E v []; VNat n \\<in> E e1' \\<rho>1;\n         \\<rho>1 \\<approx> (y, w1) # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w1 \\<in> E v []\n  VNat n \\<in> E e1' \\<rho>1\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n\ngoal (1 subgoal):\n 1. \\<And>e1 e2 e3 \\<rho> v' y v e.\n       \\<lbrakk>\\<And>x xa v' y v e.\n                   \\<lbrakk>v' \\<in> E e1 \\<rho>; is_val v;\n                    e1 = subst y v e\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>\\<rho>' v''.\n  v'' \\<in> E v [] \\<and>\n  v' \\<in> E e \\<rho>' \\<and> \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa = 0; v' \\<in> E e3 \\<rho>; is_val v;\n            e3 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        \\<And>x xa v' y v e.\n           \\<lbrakk>xa \\<noteq> 0; v' \\<in> E e2 \\<rho>; is_val v;\n            e2 = subst y v e\\<rbrakk>\n           \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                                v'' \\<in> E v [] \\<and>\n                                v' \\<in> E e \\<rho>' \\<and>\n                                \\<rho>' \\<approx> (y, v'') # \\<rho>;\n        v' \\<in> E (EIf e1 e2 e3) \\<rho>; is_val v;\n        EIf e1 e2 e3 = subst y v e\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<rho>' v''.\n                            v'' \\<in> E v [] \\<and>\n                            v' \\<in> E e \\<rho>' \\<and>\n                            \\<rho>' \\<approx> (y, v'') # \\<rho>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "with els"], ["proof (chain)\npicking this:\n  n = 0 \\<longrightarrow> v' \\<in> E e3 \\<rho>\n  n = 0", "have vp_E2: \"v' \\<in> E e3 \\<rho>\""], ["proof (prove)\nusing this:\n  n = 0 \\<longrightarrow> v' \\<in> E e3 \\<rho>\n  n = 0\n\ngoal (1 subgoal):\n 1. v' \\<in> E e3 \\<rho>", "by simp"], ["proof (state)\nthis:\n  v' \\<in> E e3 \\<rho>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from 6 vp_E2 e3"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa = 0; ?v' \\<in> E e3 \\<rho>; is_val ?v;\n   e3 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa \\<noteq> 0; ?v' \\<in> E e2 \\<rho>; is_val ?v;\n   e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  is_val v\n  EIf e1 e2 e3 = subst y v e\n  v' \\<in> E e3 \\<rho>\n  e3 = subst y v e3'", "obtain \\<rho>2 w2 where w2_Ev: \"w2 \\<in> E v []\" and vp_E2: \"v' \\<in> E e3' \\<rho>2\"\n    and r2: \"\\<rho>2 \\<approx> (y,w2)#\\<rho>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa = 0; ?v' \\<in> E e3 \\<rho>; is_val ?v;\n   e3 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa \\<noteq> 0; ?v' \\<in> E e2 \\<rho>; is_val ?v;\n   e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  is_val v\n  EIf e1 e2 e3 = subst y v e\n  v' \\<in> E e3 \\<rho>\n  e3 = subst y v e3'\n\ngoal (1 subgoal):\n 1. (\\<And>w2 \\<rho>2.\n        \\<lbrakk>w2 \\<in> E v []; v' \\<in> E e3' \\<rho>2;\n         \\<rho>2 \\<approx> (y, w2) # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w2 \\<in> E v []\n  v' \\<in> E e3' \\<rho>2\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from 6(5) w1_Ev w2_Ev combine_values"], ["proof (chain)\npicking this:\n  is_val v\n  w1 \\<in> E v []\n  w2 \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3", "obtain w3 where \n      w3_Ev: \"w3 \\<in> E v []\" and w123: \"w1 \\<squnion> w2 = Some w3\""], ["proof (prove)\nusing this:\n  is_val v\n  w1 \\<in> E v []\n  w2 \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3\n\ngoal (1 subgoal):\n 1. (\\<And>w3.\n        \\<lbrakk>w3 \\<in> E v []; w1 \\<squnion> w2 = Some w3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp only: is_val_def) blast"], ["proof (state)\nthis:\n  w3 \\<in> E v []\n  w1 \\<squnion> w2 = Some w3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w123 le_union1"], ["proof (chain)\npicking this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0", "have w13: \"w1 \\<sqsubseteq> w3\""], ["proof (prove)\nusing this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. w1 \\<sqsubseteq> w3", "by blast"], ["proof (state)\nthis:\n  w1 \\<sqsubseteq> w3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w123 le_union2"], ["proof (chain)\npicking this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0", "have w23: \"w2 \\<sqsubseteq> w3\""], ["proof (prove)\nusing this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. w2 \\<sqsubseteq> w3", "by blast"], ["proof (state)\nthis:\n  w2 \\<sqsubseteq> w3\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w13"], ["proof (chain)\npicking this:\n  w1 \\<sqsubseteq> w3", "have r13: \"((y,w1)#\\<rho>) \\<sqsubseteq> ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  w1 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "by (simp add: env_le_def)"], ["proof (state)\nthis:\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w23"], ["proof (chain)\npicking this:\n  w2 \\<sqsubseteq> w3", "have r23: \"((y,w2)#\\<rho>) \\<sqsubseteq> ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  w2 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "by (simp add: env_le_def)"], ["proof (state)\nthis:\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from r1 n_E2"], ["proof (chain)\npicking this:\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n  VNat n \\<in> E e1' \\<rho>1", "have n_E1b: \"VNat n \\<in> E e1' ((y,w1)#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n  VNat n \\<in> E e1' \\<rho>1\n\ngoal (1 subgoal):\n 1. VNat n \\<in> E e1' ((y, w1) # \\<rho>)", "by (rule env_swap)"], ["proof (state)\nthis:\n  VNat n \\<in> E e1' ((y, w1) # \\<rho>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from n_E1b r13"], ["proof (chain)\npicking this:\n  VNat n \\<in> E e1' ((y, w1) # \\<rho>)\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "have n_E1c: \"VNat n \\<in> E e1' ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  VNat n \\<in> E e1' ((y, w1) # \\<rho>)\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. VNat n \\<in> E e1' ((y, w3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  VNat n \\<in> E e1' ((y, w3) # \\<rho>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from r2 vp_E2"], ["proof (chain)\npicking this:\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n  v' \\<in> E e3' \\<rho>2", "have vp_E2b: \"v' \\<in> E e3' ((y,w2)#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n  v' \\<in> E e3' \\<rho>2\n\ngoal (1 subgoal):\n 1. v' \\<in> E e3' ((y, w2) # \\<rho>)", "by (rule env_swap)"], ["proof (state)\nthis:\n  v' \\<in> E e3' ((y, w2) # \\<rho>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from vp_E2b r23"], ["proof (chain)\npicking this:\n  v' \\<in> E e3' ((y, w2) # \\<rho>)\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "have vp_E2c: \"v' \\<in> E e3' ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  v' \\<in> E e3' ((y, w2) # \\<rho>)\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. v' \\<in> E e3' ((y, w3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  v' \\<in> E e3' ((y, w3) # \\<rho>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "have rr3: \"((y,w3)#\\<rho>) \\<approx> ((y,w3)#\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>", "by (simp add: env_eq_def)"], ["proof (state)\nthis:\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from True n_E1c vp_E2c e"], ["proof (chain)\npicking this:\n  n = 0\n  VNat n \\<in> E e1' ((y, w3) # \\<rho>)\n  v' \\<in> E e3' ((y, w3) # \\<rho>)\n  e = EIf e1' e2' e3'", "have vp_E3: \"v' \\<in> E e ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  n = 0\n  VNat n \\<in> E e1' ((y, w3) # \\<rho>)\n  v' \\<in> E e3' ((y, w3) # \\<rho>)\n  e = EIf e1' e2' e3'\n\ngoal (1 subgoal):\n 1. v' \\<in> E e ((y, w3) # \\<rho>)", "by auto"], ["proof (state)\nthis:\n  v' \\<in> E e ((y, w3) # \\<rho>)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w3_Ev rr3 vp_E3"], ["proof (chain)\npicking this:\n  w3 \\<in> E v []\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n  v' \\<in> E e ((y, w3) # \\<rho>)", "show ?thesis"], ["proof (prove)\nusing this:\n  w3 \\<in> E v []\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n  v' \\<in> E e ((y, w3) # \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "with thn"], ["proof (chain)\npicking this:\n  n \\<noteq> 0 \\<longrightarrow> v' \\<in> E e2 \\<rho>\n  n \\<noteq> 0", "have vp_E2: \"v' \\<in> E e2 \\<rho>\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0 \\<longrightarrow> v' \\<in> E e2 \\<rho>\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v' \\<in> E e2 \\<rho>", "by simp"], ["proof (state)\nthis:\n  v' \\<in> E e2 \\<rho>\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from 6 vp_E2 e2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa = 0; ?v' \\<in> E e3 \\<rho>; is_val ?v;\n   e3 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa \\<noteq> 0; ?v' \\<in> E e2 \\<rho>; is_val ?v;\n   e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  is_val v\n  EIf e1 e2 e3 = subst y v e\n  v' \\<in> E e2 \\<rho>\n  e2 = subst y v e2'", "obtain \\<rho>2 w2 where w2_Ev: \"w2 \\<in> E v []\" and vp_E2: \"v' \\<in> E e2' \\<rho>2\"\n    and r2: \"\\<rho>2 \\<approx> (y,w2)#\\<rho>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?v' \\<in> E e1 \\<rho>; is_val ?v; e1 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa = 0; ?v' \\<in> E e3 \\<rho>; is_val ?v;\n   e3 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  \\<lbrakk>?xa \\<noteq> 0; ?v' \\<in> E e2 \\<rho>; is_val ?v;\n   e2 = subst ?y ?v ?e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E ?v [] \\<and>\n                       ?v' \\<in> E ?e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (?y, v'') # \\<rho>\n  v' \\<in> E (EIf e1 e2 e3) \\<rho>\n  is_val v\n  EIf e1 e2 e3 = subst y v e\n  v' \\<in> E e2 \\<rho>\n  e2 = subst y v e2'\n\ngoal (1 subgoal):\n 1. (\\<And>w2 \\<rho>2.\n        \\<lbrakk>w2 \\<in> E v []; v' \\<in> E e2' \\<rho>2;\n         \\<rho>2 \\<approx> (y, w2) # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w2 \\<in> E v []\n  v' \\<in> E e2' \\<rho>2\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from 6(5) w1_Ev w2_Ev combine_values"], ["proof (chain)\npicking this:\n  is_val v\n  w1 \\<in> E v []\n  w2 \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3", "obtain w3 where \n      w3_Ev: \"w3 \\<in> E v []\" and w123: \"w1 \\<squnion> w2 = Some w3\""], ["proof (prove)\nusing this:\n  is_val v\n  w1 \\<in> E v []\n  w2 \\<in> E v []\n  \\<lbrakk>isval ?v; ?v1.0 \\<in> E ?v ?\\<rho>;\n   ?v2.0 \\<in> E ?v ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v3.\n                       v3 \\<in> E ?v ?\\<rho> \\<and>\n                       ?v1.0 \\<squnion> ?v2.0 = Some v3\n\ngoal (1 subgoal):\n 1. (\\<And>w3.\n        \\<lbrakk>w3 \\<in> E v []; w1 \\<squnion> w2 = Some w3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp only: is_val_def) blast"], ["proof (state)\nthis:\n  w3 \\<in> E v []\n  w1 \\<squnion> w2 = Some w3\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w123 le_union1"], ["proof (chain)\npicking this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0", "have w13: \"w1 \\<sqsubseteq> w3\""], ["proof (prove)\nusing this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v1.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. w1 \\<sqsubseteq> w3", "by blast"], ["proof (state)\nthis:\n  w1 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w123 le_union2"], ["proof (chain)\npicking this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0", "have w23: \"w2 \\<sqsubseteq> w3\""], ["proof (prove)\nusing this:\n  w1 \\<squnion> w2 = Some w3\n  ?v1.0 \\<squnion> ?v2.0 = Some ?v12.0 \\<Longrightarrow>\n  ?v2.0 \\<sqsubseteq> ?v12.0\n\ngoal (1 subgoal):\n 1. w2 \\<sqsubseteq> w3", "by blast"], ["proof (state)\nthis:\n  w2 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w13"], ["proof (chain)\npicking this:\n  w1 \\<sqsubseteq> w3", "have r13: \"((y,w1)#\\<rho>) \\<sqsubseteq> ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  w1 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "by (simp add: env_le_def)"], ["proof (state)\nthis:\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w23"], ["proof (chain)\npicking this:\n  w2 \\<sqsubseteq> w3", "have r23: \"((y,w2)#\\<rho>) \\<sqsubseteq> ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  w2 \\<sqsubseteq> w3\n\ngoal (1 subgoal):\n 1. (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "by (simp add: env_le_def)"], ["proof (state)\nthis:\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from r1 n_E2"], ["proof (chain)\npicking this:\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n  VNat n \\<in> E e1' \\<rho>1", "have n_E1b: \"VNat n \\<in> E e1' ((y,w1)#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<rho>1 \\<approx> (y, w1) # \\<rho>\n  VNat n \\<in> E e1' \\<rho>1\n\ngoal (1 subgoal):\n 1. VNat n \\<in> E e1' ((y, w1) # \\<rho>)", "by (rule env_swap)"], ["proof (state)\nthis:\n  VNat n \\<in> E e1' ((y, w1) # \\<rho>)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from n_E1b r13"], ["proof (chain)\npicking this:\n  VNat n \\<in> E e1' ((y, w1) # \\<rho>)\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "have n_E1c: \"VNat n \\<in> E e1' ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  VNat n \\<in> E e1' ((y, w1) # \\<rho>)\n  (y, w1) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. VNat n \\<in> E e1' ((y, w3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  VNat n \\<in> E e1' ((y, w3) # \\<rho>)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from r2 vp_E2"], ["proof (chain)\npicking this:\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n  v' \\<in> E e2' \\<rho>2", "have vp_E2b: \"v' \\<in> E e2' ((y,w2)#\\<rho>)\""], ["proof (prove)\nusing this:\n  \\<rho>2 \\<approx> (y, w2) # \\<rho>\n  v' \\<in> E e2' \\<rho>2\n\ngoal (1 subgoal):\n 1. v' \\<in> E e2' ((y, w2) # \\<rho>)", "by (rule env_swap)"], ["proof (state)\nthis:\n  v' \\<in> E e2' ((y, w2) # \\<rho>)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from vp_E2b r23"], ["proof (chain)\npicking this:\n  v' \\<in> E e2' ((y, w2) # \\<rho>)\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>", "have vp_E2c: \"v' \\<in> E e2' ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  v' \\<in> E e2' ((y, w2) # \\<rho>)\n  (y, w2) # \\<rho> \\<sqsubseteq> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. v' \\<in> E e2' ((y, w3) # \\<rho>)", "by (rule raise_env)"], ["proof (state)\nthis:\n  v' \\<in> E e2' ((y, w3) # \\<rho>)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "have rr3: \"((y,w3)#\\<rho>) \\<approx> ((y,w3)#\\<rho>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>", "by (simp add: env_eq_def)"], ["proof (state)\nthis:\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from False n_E1c vp_E2c e"], ["proof (chain)\npicking this:\n  n \\<noteq> 0\n  VNat n \\<in> E e1' ((y, w3) # \\<rho>)\n  v' \\<in> E e2' ((y, w3) # \\<rho>)\n  e = EIf e1' e2' e3'", "have vp_E3: \"v' \\<in> E e ((y,w3)#\\<rho>)\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  VNat n \\<in> E e1' ((y, w3) # \\<rho>)\n  v' \\<in> E e2' ((y, w3) # \\<rho>)\n  e = EIf e1' e2' e3'\n\ngoal (1 subgoal):\n 1. v' \\<in> E e ((y, w3) # \\<rho>)", "by auto"], ["proof (state)\nthis:\n  v' \\<in> E e ((y, w3) # \\<rho>)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "from w3_Ev rr3 vp_E3"], ["proof (chain)\npicking this:\n  w3 \\<in> E v []\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n  v' \\<in> E e ((y, w3) # \\<rho>)", "show ?thesis"], ["proof (prove)\nusing this:\n  w3 \\<in> E v []\n  (y, w3) # \\<rho> \\<approx> (y, w3) # \\<rho>\n  v' \\<in> E e ((y, w3) # \\<rho>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>'' v''.\n       v'' \\<in> E v [] \\<and>\n       v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<rho>'' v''.\n     v'' \\<in> E v [] \\<and>\n     v' \\<in> E e \\<rho>'' \\<and> \\<rho>'' \\<approx> (y, v'') # \\<rho>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Reverse reduction preserves denotation\""], ["", "lemma reverse_step_pres_denot:\n  fixes e::exp assumes e_ep: \"e \\<longrightarrow> e'\" and v_ep: \"v \\<in> E e' \\<rho>\"\n  shows \"v \\<in> E e \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> E e \\<rho>", "using e_ep v_ep"], ["proof (prove)\nusing this:\n  e \\<longrightarrow> e'\n  v \\<in> E e' \\<rho>\n\ngoal (1 subgoal):\n 1. v \\<in> E e \\<rho>", "proof (induction arbitrary: v \\<rho> rule: reduce.induct)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>v x e va \\<rho>.\n       \\<lbrakk>is_val v; va \\<in> E (subst x v e) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> va \\<in> E (EApp (ELam x e) v) \\<rho>\n 2. \\<And>e1 e1' e2 v \\<rho>.\n       \\<lbrakk>e1 \\<longrightarrow> e1';\n        \\<And>v \\<rho>.\n           v \\<in> E e1' \\<rho> \\<Longrightarrow> v \\<in> E e1 \\<rho>;\n        v \\<in> E (EApp e1' e2) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EApp e1 e2) \\<rho>\n 3. \\<And>e2 e2' e1 v \\<rho>.\n       \\<lbrakk>e2 \\<longrightarrow> e2';\n        \\<And>v \\<rho>.\n           v \\<in> E e2' \\<rho> \\<Longrightarrow> v \\<in> E e2 \\<rho>;\n        v \\<in> E (EApp e1 e2') \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EApp e1 e2) \\<rho>\n 4. \\<And>f n1 n2 v \\<rho>.\n       v \\<in> E (ENat (f n1 n2)) \\<rho> \\<Longrightarrow>\n       v \\<in> E (EPrim f (ENat n1) (ENat n2)) \\<rho>\n 5. \\<And>e1 e1' f e2 v \\<rho>.\n       \\<lbrakk>e1 \\<longrightarrow> e1';\n        \\<And>v \\<rho>.\n           v \\<in> E e1' \\<rho> \\<Longrightarrow> v \\<in> E e1 \\<rho>;\n        v \\<in> E (EPrim f e1' e2) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EPrim f e1 e2) \\<rho>\n 6. \\<And>e2 e2' f e1 v \\<rho>.\n       \\<lbrakk>e2 \\<longrightarrow> e2';\n        \\<And>v \\<rho>.\n           v \\<in> E e2' \\<rho> \\<Longrightarrow> v \\<in> E e2 \\<rho>;\n        v \\<in> E (EPrim f e1 e2') \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EPrim f e1 e2) \\<rho>\n 7. \\<And>thn els v \\<rho>.\n       v \\<in> E els \\<rho> \\<Longrightarrow>\n       v \\<in> E (EIf (ENat 0) thn els) \\<rho>\n 8. \\<And>n thn els v \\<rho>.\n       \\<lbrakk>n \\<noteq> 0; v \\<in> E thn \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EIf (ENat n) thn els) \\<rho>\n 9. \\<And>cond cond' thn els v \\<rho>.\n       \\<lbrakk>cond \\<longrightarrow> cond';\n        \\<And>v \\<rho>.\n           v \\<in> E cond' \\<rho> \\<Longrightarrow> v \\<in> E cond \\<rho>;\n        v \\<in> E (EIf cond' thn els) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EIf cond thn els) \\<rho>", "case (beta v x e v' \\<rho>)"], ["proof (state)\nthis:\n  is_val v\n  v' \\<in> E (subst x v e) \\<rho>\n\ngoal (9 subgoals):\n 1. \\<And>v x e va \\<rho>.\n       \\<lbrakk>is_val v; va \\<in> E (subst x v e) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> va \\<in> E (EApp (ELam x e) v) \\<rho>\n 2. \\<And>e1 e1' e2 v \\<rho>.\n       \\<lbrakk>e1 \\<longrightarrow> e1';\n        \\<And>v \\<rho>.\n           v \\<in> E e1' \\<rho> \\<Longrightarrow> v \\<in> E e1 \\<rho>;\n        v \\<in> E (EApp e1' e2) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EApp e1 e2) \\<rho>\n 3. \\<And>e2 e2' e1 v \\<rho>.\n       \\<lbrakk>e2 \\<longrightarrow> e2';\n        \\<And>v \\<rho>.\n           v \\<in> E e2' \\<rho> \\<Longrightarrow> v \\<in> E e2 \\<rho>;\n        v \\<in> E (EApp e1 e2') \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EApp e1 e2) \\<rho>\n 4. \\<And>f n1 n2 v \\<rho>.\n       v \\<in> E (ENat (f n1 n2)) \\<rho> \\<Longrightarrow>\n       v \\<in> E (EPrim f (ENat n1) (ENat n2)) \\<rho>\n 5. \\<And>e1 e1' f e2 v \\<rho>.\n       \\<lbrakk>e1 \\<longrightarrow> e1';\n        \\<And>v \\<rho>.\n           v \\<in> E e1' \\<rho> \\<Longrightarrow> v \\<in> E e1 \\<rho>;\n        v \\<in> E (EPrim f e1' e2) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EPrim f e1 e2) \\<rho>\n 6. \\<And>e2 e2' f e1 v \\<rho>.\n       \\<lbrakk>e2 \\<longrightarrow> e2';\n        \\<And>v \\<rho>.\n           v \\<in> E e2' \\<rho> \\<Longrightarrow> v \\<in> E e2 \\<rho>;\n        v \\<in> E (EPrim f e1 e2') \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EPrim f e1 e2) \\<rho>\n 7. \\<And>thn els v \\<rho>.\n       v \\<in> E els \\<rho> \\<Longrightarrow>\n       v \\<in> E (EIf (ENat 0) thn els) \\<rho>\n 8. \\<And>n thn els v \\<rho>.\n       \\<lbrakk>n \\<noteq> 0; v \\<in> E thn \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EIf (ENat n) thn els) \\<rho>\n 9. \\<And>cond cond' thn els v \\<rho>.\n       \\<lbrakk>cond \\<longrightarrow> cond';\n        \\<And>v \\<rho>.\n           v \\<in> E cond' \\<rho> \\<Longrightarrow> v \\<in> E cond \\<rho>;\n        v \\<in> E (EIf cond' thn els) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EIf cond thn els) \\<rho>", "from beta"], ["proof (chain)\npicking this:\n  is_val v\n  v' \\<in> E (subst x v e) \\<rho>", "obtain \\<rho>' v'' where 1: \"v'' \\<in> E v []\" and 2: \"v' \\<in> E e \\<rho>'\" and 3: \"\\<rho>' \\<approx> (x, v'') # \\<rho>\""], ["proof (prove)\nusing this:\n  is_val v\n  v' \\<in> E (subst x v e) \\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>v'' \\<rho>''.\n        \\<lbrakk>v'' \\<in> E v []; v' \\<in> E e \\<rho>'';\n         \\<rho>'' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using reverse_subst_pres_denot[of v' \"subst x v e\" \\<rho> v x e]"], ["proof (prove)\nusing this:\n  is_val v\n  v' \\<in> E (subst x v e) \\<rho>\n  \\<lbrakk>v' \\<in> E (subst x v e) \\<rho>; is_val v;\n   subst x v e = subst x v e\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<rho>'' v''.\n                       v'' \\<in> E v [] \\<and>\n                       v' \\<in> E e \\<rho>'' \\<and>\n                       \\<rho>'' \\<approx> (x, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. (\\<And>v'' \\<rho>''.\n        \\<lbrakk>v'' \\<in> E v []; v' \\<in> E e \\<rho>'';\n         \\<rho>'' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v'' \\<in> E v []\n  v' \\<in> E e \\<rho>'\n  \\<rho>' \\<approx> (x, v'') # \\<rho>\n\ngoal (9 subgoals):\n 1. \\<And>v x e va \\<rho>.\n       \\<lbrakk>is_val v; va \\<in> E (subst x v e) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> va \\<in> E (EApp (ELam x e) v) \\<rho>\n 2. \\<And>e1 e1' e2 v \\<rho>.\n       \\<lbrakk>e1 \\<longrightarrow> e1';\n        \\<And>v \\<rho>.\n           v \\<in> E e1' \\<rho> \\<Longrightarrow> v \\<in> E e1 \\<rho>;\n        v \\<in> E (EApp e1' e2) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EApp e1 e2) \\<rho>\n 3. \\<And>e2 e2' e1 v \\<rho>.\n       \\<lbrakk>e2 \\<longrightarrow> e2';\n        \\<And>v \\<rho>.\n           v \\<in> E e2' \\<rho> \\<Longrightarrow> v \\<in> E e2 \\<rho>;\n        v \\<in> E (EApp e1 e2') \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EApp e1 e2) \\<rho>\n 4. \\<And>f n1 n2 v \\<rho>.\n       v \\<in> E (ENat (f n1 n2)) \\<rho> \\<Longrightarrow>\n       v \\<in> E (EPrim f (ENat n1) (ENat n2)) \\<rho>\n 5. \\<And>e1 e1' f e2 v \\<rho>.\n       \\<lbrakk>e1 \\<longrightarrow> e1';\n        \\<And>v \\<rho>.\n           v \\<in> E e1' \\<rho> \\<Longrightarrow> v \\<in> E e1 \\<rho>;\n        v \\<in> E (EPrim f e1' e2) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EPrim f e1 e2) \\<rho>\n 6. \\<And>e2 e2' f e1 v \\<rho>.\n       \\<lbrakk>e2 \\<longrightarrow> e2';\n        \\<And>v \\<rho>.\n           v \\<in> E e2' \\<rho> \\<Longrightarrow> v \\<in> E e2 \\<rho>;\n        v \\<in> E (EPrim f e1 e2') \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EPrim f e1 e2) \\<rho>\n 7. \\<And>thn els v \\<rho>.\n       v \\<in> E els \\<rho> \\<Longrightarrow>\n       v \\<in> E (EIf (ENat 0) thn els) \\<rho>\n 8. \\<And>n thn els v \\<rho>.\n       \\<lbrakk>n \\<noteq> 0; v \\<in> E thn \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EIf (ENat n) thn els) \\<rho>\n 9. \\<And>cond cond' thn els v \\<rho>.\n       \\<lbrakk>cond \\<longrightarrow> cond';\n        \\<And>v \\<rho>.\n           v \\<in> E cond' \\<rho> \\<Longrightarrow> v \\<in> E cond \\<rho>;\n        v \\<in> E (EIf cond' thn els) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EIf cond thn els) \\<rho>", "from beta 1 2 3"], ["proof (chain)\npicking this:\n  is_val v\n  v' \\<in> E (subst x v e) \\<rho>\n  v'' \\<in> E v []\n  v' \\<in> E e \\<rho>'\n  \\<rho>' \\<approx> (x, v'') # \\<rho>", "show ?case"], ["proof (prove)\nusing this:\n  is_val v\n  v' \\<in> E (subst x v e) \\<rho>\n  v'' \\<in> E v []\n  v' \\<in> E e \\<rho>'\n  \\<rho>' \\<approx> (x, v'') # \\<rho>\n\ngoal (1 subgoal):\n 1. v' \\<in> E (EApp (ELam x e) v) \\<rho>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         (\\<forall>v1 v2.\n                             (v1, v2) \\<in> fset f \\<longrightarrow>\n                             v2 \\<in> E e ((x, v1) # \\<rho>)) \\<and>\n                         (\\<exists>v2.\n                             v2 \\<in> E v \\<rho> \\<and>\n                             (\\<exists>v2' v3'.\n                                 (v2', v3') \\<in> fset f \\<and>\n                                 v2' \\<sqsubseteq> v2 \\<and>\n                                 v' \\<sqsubseteq> v3'))", "apply (rule_tac x=\"{|(v'',v')|}\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>v1 v2.\n                          (v1, v2)\n                          \\<in> fset {|(v'', v')|} \\<longrightarrow>\n                          v2 \\<in> E e ((x, v1) # \\<rho>)) \\<and>\n                      (\\<exists>v2.\n                          v2 \\<in> E v \\<rho> \\<and>\n                          (\\<exists>v2' v3'.\n                              (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                              v2' \\<sqsubseteq> v2 \\<and>\n                              v' \\<sqsubseteq> v3'))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>v1 v2.\n                         (v1, v2) \\<in> fset {|(v'', v')|} \\<longrightarrow>\n                         v2 \\<in> E e ((x, v1) # \\<rho>)\n 2. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2.\n                         v2 \\<in> E v \\<rho> \\<and>\n                         (\\<exists>v2' v3'.\n                             (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                             v2' \\<sqsubseteq> v2 \\<and>\n                             v' \\<sqsubseteq> v3')", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v1 v2.\n       \\<lbrakk>v' \\<in> E (subst x v e) \\<rho>; v'' \\<in> E v [];\n        v' \\<in> E e \\<rho>'; \\<rho>' \\<approx> (x, v'') # \\<rho>; isval v;\n        FV v = {}; (v1, v2) \\<in> fset {|(v'', v')|}\\<rbrakk>\n       \\<Longrightarrow> v2 \\<in> E e ((x, v1) # \\<rho>)\n 2. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2.\n                         v2 \\<in> E v \\<rho> \\<and>\n                         (\\<exists>v2' v3'.\n                             (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                             v2' \\<sqsubseteq> v2 \\<and>\n                             v' \\<sqsubseteq> v3')", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v1.\n       \\<lbrakk>v' \\<in> E (subst x v e) \\<rho>; v'' \\<in> E v [];\n        v' \\<in> E e \\<rho>'; \\<rho>' \\<approx> (x, v'') # \\<rho>; isval v;\n        FV v = {}; v1 = v''\\<rbrakk>\n       \\<Longrightarrow> v' \\<in> E e ((x, v'') # \\<rho>)\n 2. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2.\n                         v2 \\<in> E v \\<rho> \\<and>\n                         (\\<exists>v2' v3'.\n                             (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                             v2' \\<sqsubseteq> v2 \\<and>\n                             v' \\<sqsubseteq> v3')", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v1.\n       \\<lbrakk>v' \\<in> E (subst x v e) \\<rho>; v'' \\<in> E v [];\n        v' \\<in> E e \\<rho>'; \\<rho>' \\<approx> (x, v'') # \\<rho>; isval v;\n        FV v = {}\\<rbrakk>\n       \\<Longrightarrow> v' \\<in> E e ((x, v'') # \\<rho>)\n 2. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2.\n                         v2 \\<in> E v \\<rho> \\<and>\n                         (\\<exists>v2' v3'.\n                             (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                             v2' \\<sqsubseteq> v2 \\<and>\n                             v' \\<sqsubseteq> v3')", "apply (rule env_swap)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>v1.\n       \\<lbrakk>v' \\<in> E (subst x v e) \\<rho>; v'' \\<in> E v [];\n        v' \\<in> E e \\<rho>'; \\<rho>' \\<approx> (x, v'') # \\<rho>; isval v;\n        FV v = {}\\<rbrakk>\n       \\<Longrightarrow> ?\\<rho>18 v1 \\<approx> (x, v'') # \\<rho>\n 2. \\<And>v1.\n       \\<lbrakk>v' \\<in> E (subst x v e) \\<rho>; v'' \\<in> E v [];\n        v' \\<in> E e \\<rho>'; \\<rho>' \\<approx> (x, v'') # \\<rho>; isval v;\n        FV v = {}\\<rbrakk>\n       \\<Longrightarrow> v' \\<in> E e (?\\<rho>18 v1)\n 3. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2.\n                         v2 \\<in> E v \\<rho> \\<and>\n                         (\\<exists>v2' v3'.\n                             (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                             v2' \\<sqsubseteq> v2 \\<and>\n                             v' \\<sqsubseteq> v3')", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v1.\n       \\<lbrakk>v' \\<in> E (subst x v e) \\<rho>; v'' \\<in> E v [];\n        v' \\<in> E e \\<rho>'; \\<rho>' \\<approx> (x, v'') # \\<rho>; isval v;\n        FV v = {}\\<rbrakk>\n       \\<Longrightarrow> v' \\<in> E e \\<rho>'\n 2. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2.\n                         v2 \\<in> E v \\<rho> \\<and>\n                         (\\<exists>v2' v3'.\n                             (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                             v2' \\<sqsubseteq> v2 \\<and>\n                             v' \\<sqsubseteq> v3')", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2.\n                         v2 \\<in> E v \\<rho> \\<and>\n                         (\\<exists>v2' v3'.\n                             (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                             v2' \\<sqsubseteq> v2 \\<and>\n                             v' \\<sqsubseteq> v3')", "apply (rule_tac x=v'' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> v'' \\<in> E v \\<rho> \\<and>\n                      (\\<exists>v2' v3'.\n                          (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                          v2' \\<sqsubseteq> v'' \\<and> v' \\<sqsubseteq> v3')", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> v'' \\<in> E v \\<rho>\n 2. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2' v3'.\n                         (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                         v2' \\<sqsubseteq> v'' \\<and> v' \\<sqsubseteq> v3'", "apply (rule env_strengthen)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> v'' \\<in> E v ?\\<rho>29\n 2. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> FV v \\<longrightarrow>\n                         lookup \\<rho> x = lookup ?\\<rho>29 x\n 3. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2' v3'.\n                         (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                         v2' \\<sqsubseteq> v'' \\<and> v' \\<sqsubseteq> v3'", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         x \\<in> FV v \\<longrightarrow>\n                         lookup \\<rho> x = lookup [] x\n 2. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2' v3'.\n                         (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                         v2' \\<sqsubseteq> v'' \\<and> v' \\<sqsubseteq> v3'", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>isval v \\<and> FV v = {}; v' \\<in> E (subst x v e) \\<rho>;\n     v'' \\<in> E v []; v' \\<in> E e \\<rho>';\n     \\<rho>' \\<approx> (x, v'') # \\<rho>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v2' v3'.\n                         (v2', v3') \\<in> fset {|(v'', v')|} \\<and>\n                         v2' \\<sqsubseteq> v'' \\<and> v' \\<sqsubseteq> v3'", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  v' \\<in> E (EApp (ELam x e) v) \\<rho>\n\ngoal (8 subgoals):\n 1. \\<And>e1 e1' e2 v \\<rho>.\n       \\<lbrakk>e1 \\<longrightarrow> e1';\n        \\<And>v \\<rho>.\n           v \\<in> E e1' \\<rho> \\<Longrightarrow> v \\<in> E e1 \\<rho>;\n        v \\<in> E (EApp e1' e2) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EApp e1 e2) \\<rho>\n 2. \\<And>e2 e2' e1 v \\<rho>.\n       \\<lbrakk>e2 \\<longrightarrow> e2';\n        \\<And>v \\<rho>.\n           v \\<in> E e2' \\<rho> \\<Longrightarrow> v \\<in> E e2 \\<rho>;\n        v \\<in> E (EApp e1 e2') \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EApp e1 e2) \\<rho>\n 3. \\<And>f n1 n2 v \\<rho>.\n       v \\<in> E (ENat (f n1 n2)) \\<rho> \\<Longrightarrow>\n       v \\<in> E (EPrim f (ENat n1) (ENat n2)) \\<rho>\n 4. \\<And>e1 e1' f e2 v \\<rho>.\n       \\<lbrakk>e1 \\<longrightarrow> e1';\n        \\<And>v \\<rho>.\n           v \\<in> E e1' \\<rho> \\<Longrightarrow> v \\<in> E e1 \\<rho>;\n        v \\<in> E (EPrim f e1' e2) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EPrim f e1 e2) \\<rho>\n 5. \\<And>e2 e2' f e1 v \\<rho>.\n       \\<lbrakk>e2 \\<longrightarrow> e2';\n        \\<And>v \\<rho>.\n           v \\<in> E e2' \\<rho> \\<Longrightarrow> v \\<in> E e2 \\<rho>;\n        v \\<in> E (EPrim f e1 e2') \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EPrim f e1 e2) \\<rho>\n 6. \\<And>thn els v \\<rho>.\n       v \\<in> E els \\<rho> \\<Longrightarrow>\n       v \\<in> E (EIf (ENat 0) thn els) \\<rho>\n 7. \\<And>n thn els v \\<rho>.\n       \\<lbrakk>n \\<noteq> 0; v \\<in> E thn \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EIf (ENat n) thn els) \\<rho>\n 8. \\<And>cond cond' thn els v \\<rho>.\n       \\<lbrakk>cond \\<longrightarrow> cond';\n        \\<And>v \\<rho>.\n           v \\<in> E cond' \\<rho> \\<Longrightarrow> v \\<in> E cond \\<rho>;\n        v \\<in> E (EIf cond' thn els) \\<rho>\\<rbrakk>\n       \\<Longrightarrow> v \\<in> E (EIf cond thn els) \\<rho>", "qed auto"], ["", "lemma reverse_multi_step_pres_denot:\n  fixes e::exp assumes e_ep: \"e \\<longrightarrow>* e'\" and v_ep: \"v \\<in> E e' \\<rho>\" shows \"v \\<in> E e \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> E e \\<rho>", "using e_ep v_ep reverse_step_pres_denot"], ["proof (prove)\nusing this:\n  e \\<longrightarrow>* e'\n  v \\<in> E e' \\<rho>\n  \\<lbrakk>?e \\<longrightarrow> ?e'; ?v \\<in> E ?e' ?\\<rho>\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> E ?e ?\\<rho>\n\ngoal (1 subgoal):\n 1. v \\<in> E e \\<rho>", "by (induction arbitrary: v \\<rho> rule: multi_step.induct) auto"], ["", "subsection \"Completeness\""], ["", "theorem completeness:\n  assumes ev: \"e \\<longrightarrow>* v\"and vv: \"is_val v\"\n  shows \"\\<exists> v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []", "from vv"], ["proof (chain)\npicking this:\n  is_val v", "have \"\\<exists> v'. v' \\<in> E v []\""], ["proof (prove)\nusing this:\n  is_val v\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E v []", "using e_val"], ["proof (prove)\nusing this:\n  is_val v\n  isval ?v \\<Longrightarrow> \\<exists>v'. v' \\<in> E ?v ?\\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E v []", "by auto"], ["proof (state)\nthis:\n  \\<exists>v'. v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []", "from this"], ["proof (chain)\npicking this:\n  \\<exists>v'. v' \\<in> E v []", "obtain v' where vp_v: \"v' \\<in> E v []\""], ["proof (prove)\nusing this:\n  \\<exists>v'. v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. (\\<And>v'. v' \\<in> E v [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []", "from vp_v vv"], ["proof (chain)\npicking this:\n  v' \\<in> E v []\n  is_val v", "have vp_v2: \"v' \\<in> E v \\<rho>\""], ["proof (prove)\nusing this:\n  v' \\<in> E v []\n  is_val v\n\ngoal (1 subgoal):\n 1. v' \\<in> E v \\<rho>", "using env_strengthen"], ["proof (prove)\nusing this:\n  v' \\<in> E v []\n  is_val v\n  \\<lbrakk>?v \\<in> E ?e ?\\<rho>;\n   \\<forall>x.\n      x \\<in> FV ?e \\<longrightarrow>\n      lookup ?\\<rho>' x = lookup ?\\<rho> x\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> E ?e ?\\<rho>'\n\ngoal (1 subgoal):\n 1. v' \\<in> E v \\<rho>", "by force"], ["proof (state)\nthis:\n  v' \\<in> E v \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []", "from ev vp_v2 reverse_multi_step_pres_denot[of e v v' \\<rho>]"], ["proof (chain)\npicking this:\n  e \\<longrightarrow>* v\n  v' \\<in> E v \\<rho>\n  \\<lbrakk>e \\<longrightarrow>* v; v' \\<in> E v \\<rho>\\<rbrakk>\n  \\<Longrightarrow> v' \\<in> E e \\<rho>", "have \"v' \\<in> E e \\<rho>\""], ["proof (prove)\nusing this:\n  e \\<longrightarrow>* v\n  v' \\<in> E v \\<rho>\n  \\<lbrakk>e \\<longrightarrow>* v; v' \\<in> E v \\<rho>\\<rbrakk>\n  \\<Longrightarrow> v' \\<in> E e \\<rho>\n\ngoal (1 subgoal):\n 1. v' \\<in> E e \\<rho>", "by simp"], ["proof (state)\nthis:\n  v' \\<in> E e \\<rho>\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []", "from this vp_v"], ["proof (chain)\npicking this:\n  v' \\<in> E e \\<rho>\n  v' \\<in> E v []", "show ?thesis"], ["proof (prove)\nusing this:\n  v' \\<in> E e \\<rho>\n  v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []", "by blast"], ["proof (state)\nthis:\n  \\<exists>v'. v' \\<in> E e \\<rho> \\<and> v' \\<in> E v []\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem reduce_pres_denot: fixes e::exp assumes r: \"e \\<longrightarrow> e'\" shows \"E e = E e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E e = E e'", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. E e x = E e' x", "apply (rule equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. E e x \\<subseteq> E e' x\n 2. \\<And>x. E e' x \\<subseteq> E e x", "apply (rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa. xa \\<in> E e x \\<Longrightarrow> xa \\<in> E e' x\n 2. \\<And>x. E e' x \\<subseteq> E e x", "apply (rule subject_reduction)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa. xa \\<in> E e x \\<Longrightarrow> xa \\<in> E (?e7 x xa) x\n 2. \\<And>x xa.\n       xa \\<in> E e x \\<Longrightarrow> ?e7 x xa \\<longrightarrow> e'\n 3. \\<And>x. E e' x \\<subseteq> E e x", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa. xa \\<in> E e x \\<Longrightarrow> e \\<longrightarrow> e'\n 2. \\<And>x. E e' x \\<subseteq> E e x", "using r"], ["proof (prove)\nusing this:\n  e \\<longrightarrow> e'\n\ngoal (2 subgoals):\n 1. \\<And>x xa. xa \\<in> E e x \\<Longrightarrow> e \\<longrightarrow> e'\n 2. \\<And>x. E e' x \\<subseteq> E e x", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. E e' x \\<subseteq> E e x", "apply (rule subsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. xa \\<in> E e' x \\<Longrightarrow> xa \\<in> E e x", "using r"], ["proof (prove)\nusing this:\n  e \\<longrightarrow> e'\n\ngoal (1 subgoal):\n 1. \\<And>x xa. xa \\<in> E e' x \\<Longrightarrow> xa \\<in> E e x", "apply (rule reverse_step_pres_denot)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. xa \\<in> E e' x \\<Longrightarrow> xa \\<in> E e' x", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem multi_reduce_pres_denot: fixes e::exp assumes r: \"e \\<longrightarrow>* e'\" shows \"E e = E e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E e = E e'", "using r reduce_pres_denot"], ["proof (prove)\nusing this:\n  e \\<longrightarrow>* e'\n  ?e \\<longrightarrow> ?e' \\<Longrightarrow> E ?e = E ?e'\n\ngoal (1 subgoal):\n 1. E e = E e'", "by induction auto"], ["", "theorem complete_wrt_op_sem:\n  assumes e_n: \"e \\<Down> ONat n\" shows \"E e [] = E (ENat n) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E e [] = E (ENat n) []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. E e [] = E (ENat n) []", "from e_n"], ["proof (chain)\npicking this:\n  e \\<Down> ONat n", "have 1: \"e \\<longrightarrow>* ENat n\""], ["proof (prove)\nusing this:\n  e \\<Down> ONat n\n\ngoal (1 subgoal):\n 1. e \\<longrightarrow>* ENat n", "unfolding run_def"], ["proof (prove)\nusing this:\n  (\\<exists>v. e \\<longrightarrow>* v \\<and> observe v (ONat n)) \\<or>\n  (diverge e \\<or> goes_wrong e) \\<and> ONat n = OBad\n\ngoal (1 subgoal):\n 1. e \\<longrightarrow>* ENat n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v.\n       e \\<longrightarrow>* v \\<and> observe v (ONat n) \\<Longrightarrow>\n    e \\<longrightarrow>* ENat n", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       e \\<longrightarrow>* v \\<and> observe v (ONat n) \\<Longrightarrow>\n       e \\<longrightarrow>* ENat n", "apply (rename_tac v)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       e \\<longrightarrow>* v \\<and> observe v (ONat n) \\<Longrightarrow>\n       e \\<longrightarrow>* ENat n", "apply (case_tac v)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>v x1.\n       \\<lbrakk>e \\<longrightarrow>* v \\<and> observe v (ONat n);\n        v = EVar x1\\<rbrakk>\n       \\<Longrightarrow> e \\<longrightarrow>* ENat n\n 2. \\<And>v x2.\n       \\<lbrakk>e \\<longrightarrow>* v \\<and> observe v (ONat n);\n        v = ENat x2\\<rbrakk>\n       \\<Longrightarrow> e \\<longrightarrow>* ENat n\n 3. \\<And>v x31 x32.\n       \\<lbrakk>e \\<longrightarrow>* v \\<and> observe v (ONat n);\n        v = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> e \\<longrightarrow>* ENat n\n 4. \\<And>v x41 x42.\n       \\<lbrakk>e \\<longrightarrow>* v \\<and> observe v (ONat n);\n        v = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> e \\<longrightarrow>* ENat n\n 5. \\<And>v x51 x52 x53.\n       \\<lbrakk>e \\<longrightarrow>* v \\<and> observe v (ONat n);\n        v = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> e \\<longrightarrow>* ENat n\n 6. \\<And>v x61 x62 x63.\n       \\<lbrakk>e \\<longrightarrow>* v \\<and> observe v (ONat n);\n        v = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> e \\<longrightarrow>* ENat n", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  e \\<longrightarrow>* ENat n\n\ngoal (1 subgoal):\n 1. E e [] = E (ENat n) []", "from 1"], ["proof (chain)\npicking this:\n  e \\<longrightarrow>* ENat n", "show ?thesis"], ["proof (prove)\nusing this:\n  e \\<longrightarrow>* ENat n\n\ngoal (1 subgoal):\n 1. E e [] = E (ENat n) []", "using multi_reduce_pres_denot"], ["proof (prove)\nusing this:\n  e \\<longrightarrow>* ENat n\n  ?e \\<longrightarrow>* ?e' \\<Longrightarrow> E ?e = E ?e'\n\ngoal (1 subgoal):\n 1. E e [] = E (ENat n) []", "by simp"], ["proof (state)\nthis:\n  E e [] = E (ENat n) []\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}