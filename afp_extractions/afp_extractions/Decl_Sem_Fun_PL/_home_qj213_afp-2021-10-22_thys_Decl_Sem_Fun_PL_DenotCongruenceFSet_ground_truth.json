{"file_name": "/home/qj213/afp-2021-10-22/thys/Decl_Sem_Fun_PL/DenotCongruenceFSet.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Decl_Sem_Fun_PL", "problem_names": ["lemma e_lam_cong[cong]: \"E e  = E e' \\<Longrightarrow> E (ELam x e) = E (ELam x e')\"", "lemma e_app_cong[cong]: \"\\<lbrakk> E e1 = E e1'; E e2 = E e2' \\<rbrakk> \\<Longrightarrow> E (EApp e1 e2) = E (EApp e1' e2')\"", "lemma e_prim_cong[cong]: \"\\<lbrakk> E e1 = E e1'; E e2 = E e2' \\<rbrakk> \\<Longrightarrow> E(EPrim f e1 e2) = E(EPrim f e1' e2')\"", "lemma e_if_cong[cong]: \"\\<lbrakk> E e1 = E e1'; E e2 = E e2'; E e3 = E e3' \\<rbrakk> \n    \\<Longrightarrow> E (EIf e1 e2 e3) = E (EIf e1' e2' e3')\"", "lemma congruence: \"E e = E e' \\<Longrightarrow> E (plug C e) = E (plug C e')\"", "lemma diverge_denot_empty: assumes d: \"diverge e\" and fve: \"FV e = {}\" shows \"E e [] = {}\"", "lemma goes_wrong_denot_empty:\n  assumes gw: \"goes_wrong e\" and fv_e: \"FV e = {}\" shows \"E e [] = {}\"", "lemma denot_empty_diverge: assumes E_e: \"E e [] = {}\" and fv_e: \"FV e = {}\" \n  shows \"diverge e \\<or> goes_wrong e\"", "lemma val_ty_observe:\n  \"\\<lbrakk> A \\<in> E v []; A \\<in> E v' [];\n    observe v ob; isval v'; isval v \\<rbrakk> \\<Longrightarrow> observe v' ob\"", "lemma soundness_wrt_ctx_equiv_aux[rule_format]:\n  assumes e12: \"E e1 = E e2\"\n  and fv_e1: \"FV (plug C e1) = {}\" and fv_e2: \"FV (plug C e2) = {}\"\n  shows \"run (plug C e1) ob \\<longrightarrow> run (plug C e2) ob\"", "theorem denot_sound_wrt_ctx_equiv: assumes e12: \"E e1 = E e2\" shows \"e1 \\<simeq> e2\""], "translations": [["", "lemma e_lam_cong[cong]: \"E e  = E e' \\<Longrightarrow> E (ELam x e) = E (ELam x e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E e = E e' \\<Longrightarrow> E (ELam x e) = E (ELam x e')", "by (rule ext) simp"], ["", "lemma e_app_cong[cong]: \"\\<lbrakk> E e1 = E e1'; E e2 = E e2' \\<rbrakk> \\<Longrightarrow> E (EApp e1 e2) = E (EApp e1' e2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E e1 = E e1'; E e2 = E e2'\\<rbrakk>\n    \\<Longrightarrow> E (EApp e1 e2) = E (EApp e1' e2')", "by (rule ext) simp"], ["", "lemma e_prim_cong[cong]: \"\\<lbrakk> E e1 = E e1'; E e2 = E e2' \\<rbrakk> \\<Longrightarrow> E(EPrim f e1 e2) = E(EPrim f e1' e2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E e1 = E e1'; E e2 = E e2'\\<rbrakk>\n    \\<Longrightarrow> E (EPrim f e1 e2) = E (EPrim f e1' e2')", "by (rule ext) simp"], ["", "lemma e_if_cong[cong]: \"\\<lbrakk> E e1 = E e1'; E e2 = E e2'; E e3 = E e3' \\<rbrakk> \n    \\<Longrightarrow> E (EIf e1 e2 e3) = E (EIf e1' e2' e3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E e1 = E e1'; E e2 = E e2'; E e3 = E e3'\\<rbrakk>\n    \\<Longrightarrow> E (EIf e1 e2 e3) = E (EIf e1' e2' e3')", "by (rule ext) simp"], ["", "datatype ctx = CHole | CLam name ctx | CAppL ctx exp | CAppR exp ctx\n  | CPrimL \"nat \\<Rightarrow> nat \\<Rightarrow> nat\"  ctx exp | CPrimR \"nat \\<Rightarrow> nat \\<Rightarrow> nat\"  exp ctx\n  | CIf1 ctx exp exp | CIf2 exp ctx exp | CIf3 exp exp ctx"], ["", "fun plug :: \"ctx \\<Rightarrow> exp \\<Rightarrow> exp\" where\n  \"plug CHole e = e\" |\n  \"plug (CLam x C) e = ELam x (plug C e)\" |\n  \"plug (CAppL C e2) e = EApp (plug C e) e2\" |\n  \"plug (CAppR e1 C) e = EApp e1 (plug C e)\" |\n  \"plug (CPrimL f C e2) e = EPrim f (plug C e) e2\" |\n  \"plug (CPrimR f e1 C) e = EPrim f e1 (plug C e)\" |\n  \"plug (CIf1 C e2 e3) e = EIf (plug C e) e2 e3\" |\n  \"plug (CIf2 e1 C e3) e = EIf e1 (plug C e) e3\" |\n  \"plug (CIf3 e1 e2 C) e = EIf e1 e2 (plug C e)\""], ["", "lemma congruence: \"E e = E e' \\<Longrightarrow> E (plug C e) = E (plug C e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E e = E e' \\<Longrightarrow> E (plug C e) = E (plug C e')", "proof (induction C arbitrary: e e')"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>C x2 x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf1 C x2 x3) e) =\n                         E (plug (CIf1 C x2 x3) e')\n 8. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf2 x1 C x3) e) =\n                         E (plug (CIf2 x1 C x3) e')\n 9. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "case (CIf1 C e2 e3)"], ["proof (state)\nthis:\n  E ?e = E ?e' \\<Longrightarrow> E (plug C ?e) = E (plug C ?e')\n  E e = E e'\n\ngoal (9 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>C x2 x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf1 C x2 x3) e) =\n                         E (plug (CIf1 C x2 x3) e')\n 8. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf2 x1 C x3) e) =\n                         E (plug (CIf2 x1 C x3) e')\n 9. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "have \"E (EIf (plug C e) e2 e3) = E (EIf (plug C e') e2 e3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E (EIf (plug C e) e2 e3) = E (EIf (plug C e') e2 e3)", "apply (rule e_if_cong)"], ["proof (prove)\ngoal (3 subgoals):\n 1. E (plug C e) = E (plug C e')\n 2. E e2 = E e2\n 3. E e3 = E e3", "using CIf1"], ["proof (prove)\nusing this:\n  E ?e = E ?e' \\<Longrightarrow> E (plug C ?e) = E (plug C ?e')\n  E e = E e'\n\ngoal (3 subgoals):\n 1. E (plug C e) = E (plug C e')\n 2. E e2 = E e2\n 3. E e3 = E e3", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  E (EIf (plug C e) e2 e3) = E (EIf (plug C e') e2 e3)\n\ngoal (9 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>C x2 x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf1 C x2 x3) e) =\n                         E (plug (CIf1 C x2 x3) e')\n 8. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf2 x1 C x3) e) =\n                         E (plug (CIf2 x1 C x3) e')\n 9. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "then"], ["proof (chain)\npicking this:\n  E (EIf (plug C e) e2 e3) = E (EIf (plug C e') e2 e3)", "show ?case"], ["proof (prove)\nusing this:\n  E (EIf (plug C e) e2 e3) = E (EIf (plug C e') e2 e3)\n\ngoal (1 subgoal):\n 1. E (plug (CIf1 C e2 e3) e) = E (plug (CIf1 C e2 e3) e')", "by simp"], ["proof (state)\nthis:\n  E (plug (CIf1 C e2 e3) e) = E (plug (CIf1 C e2 e3) e')\n\ngoal (8 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf2 x1 C x3) e) =\n                         E (plug (CIf2 x1 C x3) e')\n 8. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf2 x1 C x3) e) =\n                         E (plug (CIf2 x1 C x3) e')\n 8. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "case (CIf2 e1 C e3)"], ["proof (state)\nthis:\n  E ?e = E ?e' \\<Longrightarrow> E (plug C ?e) = E (plug C ?e')\n  E e = E e'\n\ngoal (8 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf2 x1 C x3) e) =\n                         E (plug (CIf2 x1 C x3) e')\n 8. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "have \"E (EIf e1 (plug C e) e3) = E (EIf e1 (plug C e') e3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E (EIf e1 (plug C e) e3) = E (EIf e1 (plug C e') e3)", "apply (rule e_if_cong)"], ["proof (prove)\ngoal (3 subgoals):\n 1. E e1 = E e1\n 2. E (plug C e) = E (plug C e')\n 3. E e3 = E e3", "using CIf2"], ["proof (prove)\nusing this:\n  E ?e = E ?e' \\<Longrightarrow> E (plug C ?e) = E (plug C ?e')\n  E e = E e'\n\ngoal (3 subgoals):\n 1. E e1 = E e1\n 2. E (plug C e) = E (plug C e')\n 3. E e3 = E e3", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  E (EIf e1 (plug C e) e3) = E (EIf e1 (plug C e') e3)\n\ngoal (8 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf2 x1 C x3) e) =\n                         E (plug (CIf2 x1 C x3) e')\n 8. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "then"], ["proof (chain)\npicking this:\n  E (EIf e1 (plug C e) e3) = E (EIf e1 (plug C e') e3)", "show ?case"], ["proof (prove)\nusing this:\n  E (EIf e1 (plug C e) e3) = E (EIf e1 (plug C e') e3)\n\ngoal (1 subgoal):\n 1. E (plug (CIf2 e1 C e3) e) = E (plug (CIf2 e1 C e3) e')", "by simp"], ["proof (state)\nthis:\n  E (plug (CIf2 e1 C e3) e) = E (plug (CIf2 e1 C e3) e')\n\ngoal (7 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "case (CIf3 e1 e2 C)"], ["proof (state)\nthis:\n  E ?e = E ?e' \\<Longrightarrow> E (plug C ?e) = E (plug C ?e')\n  E e = E e'\n\ngoal (7 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "have \"E (EIf e1 e2 (plug C e)) = E (EIf e1 e2 (plug C e'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E (EIf e1 e2 (plug C e)) = E (EIf e1 e2 (plug C e'))", "apply (rule e_if_cong)"], ["proof (prove)\ngoal (3 subgoals):\n 1. E e1 = E e1\n 2. E e2 = E e2\n 3. E (plug C e) = E (plug C e')", "using CIf3"], ["proof (prove)\nusing this:\n  E ?e = E ?e' \\<Longrightarrow> E (plug C ?e) = E (plug C ?e')\n  E e = E e'\n\ngoal (3 subgoals):\n 1. E e1 = E e1\n 2. E e2 = E e2\n 3. E (plug C e) = E (plug C e')", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  E (EIf e1 e2 (plug C e)) = E (EIf e1 e2 (plug C e'))\n\ngoal (7 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')\n 7. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CIf3 x1 x2 C) e) =\n                         E (plug (CIf3 x1 x2 C) e')", "then"], ["proof (chain)\npicking this:\n  E (EIf e1 e2 (plug C e)) = E (EIf e1 e2 (plug C e'))", "show ?case"], ["proof (prove)\nusing this:\n  E (EIf e1 e2 (plug C e)) = E (EIf e1 e2 (plug C e'))\n\ngoal (1 subgoal):\n 1. E (plug (CIf3 e1 e2 C) e) = E (plug (CIf3 e1 e2 C) e')", "by simp"], ["proof (state)\nthis:\n  E (plug (CIf3 e1 e2 C) e) = E (plug (CIf3 e1 e2 C) e')\n\ngoal (6 subgoals):\n 1. \\<And>e e'.\n       E e = E e' \\<Longrightarrow> E (plug CHole e) = E (plug CHole e')\n 2. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CLam x1 C) e) = E (plug (CLam x1 C) e')\n 3. \\<And>C x2 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppL C x2) e) = E (plug (CAppL C x2) e')\n 4. \\<And>x1 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CAppR x1 C) e) = E (plug (CAppR x1 C) e')\n 5. \\<And>x1 C x3 e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimL x1 C x3) e) =\n                         E (plug (CPrimL x1 C x3) e')\n 6. \\<And>x1 x2 C e e'.\n       \\<lbrakk>\\<And>e e'.\n                   E e = E e' \\<Longrightarrow>\n                   E (plug C e) = E (plug C e');\n        E e = E e'\\<rbrakk>\n       \\<Longrightarrow> E (plug (CPrimR x1 x2 C) e) =\n                         E (plug (CPrimR x1 x2 C) e')", "qed force+"], ["", "subsection \"Auxiliary lemmas\""], ["", "lemma diverge_denot_empty: assumes d: \"diverge e\" and fve: \"FV e = {}\" shows \"E e [] = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E e [] = {}", "proof (rule classical)"], ["proof (state)\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "assume \"E e [] \\<noteq> {}\""], ["proof (state)\nthis:\n  E e [] \\<noteq> {}\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from this"], ["proof (chain)\npicking this:\n  E e [] \\<noteq> {}", "obtain A where wte: \"A \\<in> E e []\""], ["proof (prove)\nusing this:\n  E e [] \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>A. A \\<in> E e [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A \\<in> E e []\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "have ge: \"good_env [] []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_env [] []", "by blast"], ["proof (state)\nthis:\n  good_env [] []\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from wte ge"], ["proof (chain)\npicking this:\n  A \\<in> E e []\n  good_env [] []", "obtain v where e_v: \"[] \\<turnstile> e \\<Down> v\" and gv: \"v \\<in> good A\""], ["proof (prove)\nusing this:\n  A \\<in> E e []\n  good_env [] []\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>[] \\<turnstile> e \\<Down> v; v \\<in> good A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using denot_terminates"], ["proof (prove)\nusing this:\n  A \\<in> E e []\n  good_env [] []\n  \\<lbrakk>?v' \\<in> E ?e ?\\<rho>'; good_env ?\\<rho> ?\\<rho>'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v.\n                       ?\\<rho> \\<turnstile> ?e \\<Down> v \\<and>\n                       v \\<in> good ?v'\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>[] \\<turnstile> e \\<Down> v; v \\<in> good A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  [] \\<turnstile> e \\<Down> v\n  v \\<in> good A\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from e_v fve"], ["proof (chain)\npicking this:\n  [] \\<turnstile> e \\<Down> v\n  FV e = {}", "obtain v' where e_vp: \"e \\<longrightarrow>* v'\" and val_vp: \"isval v'\""], ["proof (prove)\nusing this:\n  [] \\<turnstile> e \\<Down> v\n  FV e = {}\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>e \\<longrightarrow>* v'; isval v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using sound_wrt_small_step"], ["proof (prove)\nusing this:\n  [] \\<turnstile> e \\<Down> v\n  FV e = {}\n  \\<lbrakk>[] \\<turnstile> ?e \\<Down> ?v; FV ?e = {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v' ob.\n                       ?e \\<longrightarrow>* v' \\<and>\n                       isval v' \\<and> observe v' ob \\<and> bs_observe ?v ob\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>e \\<longrightarrow>* v'; isval v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  e \\<longrightarrow>* v'\n  isval v'\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from d e_vp"], ["proof (chain)\npicking this:\n  diverge e\n  e \\<longrightarrow>* v'", "have \"\\<exists> e'. v' \\<longrightarrow> e'\""], ["proof (prove)\nusing this:\n  diverge e\n  e \\<longrightarrow>* v'\n\ngoal (1 subgoal):\n 1. \\<exists>e'. v' \\<longrightarrow> e'", "by (simp add: diverge_def)"], ["proof (state)\nthis:\n  \\<exists>e'. v' \\<longrightarrow> e'\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "with val_vp"], ["proof (chain)\npicking this:\n  isval v'\n  \\<exists>e'. v' \\<longrightarrow> e'", "have \"False\""], ["proof (prove)\nusing this:\n  isval v'\n  \\<exists>e'. v' \\<longrightarrow> e'\n\ngoal (1 subgoal):\n 1. False", "using val_stuck"], ["proof (prove)\nusing this:\n  isval v'\n  \\<exists>e'. v' \\<longrightarrow> e'\n  isval ?e \\<Longrightarrow> stuck ?e\n\ngoal (1 subgoal):\n 1. False", "by force"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from this"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. E e [] = {}", ".."], ["proof (state)\nthis:\n  E e [] = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma goes_wrong_denot_empty:\n  assumes gw: \"goes_wrong e\" and fv_e: \"FV e = {}\" shows \"E e [] = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E e [] = {}", "proof (rule classical)"], ["proof (state)\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "assume \"E e [] \\<noteq> {}\""], ["proof (state)\nthis:\n  E e [] \\<noteq> {}\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from this"], ["proof (chain)\npicking this:\n  E e [] \\<noteq> {}", "obtain A where wte: \"A \\<in> E e []\""], ["proof (prove)\nusing this:\n  E e [] \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>A. A \\<in> E e [] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A \\<in> E e []\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "have ge: \"good_env [] []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_env [] []", "by blast"], ["proof (state)\nthis:\n  good_env [] []\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from gw"], ["proof (chain)\npicking this:\n  goes_wrong e", "obtain e' where e_ep: \"e \\<longrightarrow>* e'\" and s_ep: \"stuck e'\" and nv_ep: \"\\<not> isval e'\""], ["proof (prove)\nusing this:\n  goes_wrong e\n\ngoal (1 subgoal):\n 1. (\\<And>e'.\n        \\<lbrakk>e \\<longrightarrow>* e'; stuck e'; \\<not> isval e'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e \\<longrightarrow>* e'\n  stuck e'\n  \\<not> isval e'\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from wte e_ep"], ["proof (chain)\npicking this:\n  A \\<in> E e []\n  e \\<longrightarrow>* e'", "have wtep: \"A \\<in> E e' []\""], ["proof (prove)\nusing this:\n  A \\<in> E e []\n  e \\<longrightarrow>* e'\n\ngoal (1 subgoal):\n 1. A \\<in> E e' []", "using preservation"], ["proof (prove)\nusing this:\n  A \\<in> E e []\n  e \\<longrightarrow>* e'\n  \\<lbrakk>?v \\<in> E ?e ?\\<rho>; ?e \\<longrightarrow>* ?e'\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> E ?e' ?\\<rho>\n\ngoal (1 subgoal):\n 1. A \\<in> E e' []", "by blast"], ["proof (state)\nthis:\n  A \\<in> E e' []\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from fv_e e_ep"], ["proof (chain)\npicking this:\n  FV e = {}\n  e \\<longrightarrow>* e'", "have fv_ep: \"FV e' = {}\""], ["proof (prove)\nusing this:\n  FV e = {}\n  e \\<longrightarrow>* e'\n\ngoal (1 subgoal):\n 1. FV e' = {}", "using reduction_pres_fv"], ["proof (prove)\nusing this:\n  FV e = {}\n  e \\<longrightarrow>* e'\n  \\<lbrakk>?e \\<longrightarrow>* ?e'; FV ?e = {}\\<rbrakk>\n  \\<Longrightarrow> FV ?e' = {}\n\ngoal (1 subgoal):\n 1. FV e' = {}", "by auto"], ["proof (state)\nthis:\n  FV e' = {}\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from wtep fv_ep"], ["proof (chain)\npicking this:\n  A \\<in> E e' []\n  FV e' = {}", "have \"is_val e' \\<or> (\\<exists> e''. e' \\<longrightarrow> e'')\""], ["proof (prove)\nusing this:\n  A \\<in> E e' []\n  FV e' = {}\n\ngoal (1 subgoal):\n 1. is_val e' \\<or> (\\<exists>e''. e' \\<longrightarrow> e'')", "using progress[of A e' \"[]\" ]"], ["proof (prove)\nusing this:\n  A \\<in> E e' []\n  FV e' = {}\n  \\<lbrakk>A \\<in> E e' []; [] = []; FV e' = {}\\<rbrakk>\n  \\<Longrightarrow> is_val e' \\<or> (\\<exists>e'a. e' \\<longrightarrow> e'a)\n\ngoal (1 subgoal):\n 1. is_val e' \\<or> (\\<exists>e''. e' \\<longrightarrow> e'')", "by simp"], ["proof (state)\nthis:\n  is_val e' \\<or> (\\<exists>e''. e' \\<longrightarrow> e'')\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from this s_ep nv_ep"], ["proof (chain)\npicking this:\n  is_val e' \\<or> (\\<exists>e''. e' \\<longrightarrow> e'')\n  stuck e'\n  \\<not> isval e'", "have \"False\""], ["proof (prove)\nusing this:\n  is_val e' \\<or> (\\<exists>e''. e' \\<longrightarrow> e'')\n  stuck e'\n  \\<not> isval e'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. E e [] \\<noteq> {} \\<Longrightarrow> E e [] = {}", "from this"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. E e [] = {}", ".."], ["proof (state)\nthis:\n  E e [] = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma denot_empty_diverge: assumes E_e: \"E e [] = {}\" and fv_e: \"FV e = {}\" \n  shows \"diverge e \\<or> goes_wrong e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diverge e \\<or> goes_wrong e", "proof (rule classical)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "assume nd_gw: \"\\<not> (diverge e \\<or> goes_wrong e)\""], ["proof (state)\nthis:\n  \\<not> (diverge e \\<or> goes_wrong e)\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from this"], ["proof (chain)\npicking this:\n  \\<not> (diverge e \\<or> goes_wrong e)", "have nd: \"\\<not> diverge e\""], ["proof (prove)\nusing this:\n  \\<not> (diverge e \\<or> goes_wrong e)\n\ngoal (1 subgoal):\n 1. \\<not> diverge e", "by blast"], ["proof (state)\nthis:\n  \\<not> diverge e\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from nd_gw"], ["proof (chain)\npicking this:\n  \\<not> (diverge e \\<or> goes_wrong e)", "have gw: \"\\<not> goes_wrong e\""], ["proof (prove)\nusing this:\n  \\<not> (diverge e \\<or> goes_wrong e)\n\ngoal (1 subgoal):\n 1. \\<not> goes_wrong e", "by blast"], ["proof (state)\nthis:\n  \\<not> goes_wrong e\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from nd"], ["proof (chain)\npicking this:\n  \\<not> diverge e", "obtain v::exp where e_v: \"e \\<longrightarrow>* v\" and stuck: \"\\<not> (\\<exists> e'. v \\<longrightarrow> e')\""], ["proof (prove)\nusing this:\n  \\<not> diverge e\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>e \\<longrightarrow>* v;\n         \\<nexists>e'. v \\<longrightarrow> e'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp only: diverge_def) blast"], ["proof (state)\nthis:\n  e \\<longrightarrow>* v\n  \\<nexists>e'. v \\<longrightarrow> e'\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from gw e_v stuck"], ["proof (chain)\npicking this:\n  \\<not> goes_wrong e\n  e \\<longrightarrow>* v\n  \\<nexists>e'. v \\<longrightarrow> e'", "have val_v: \"isval v\""], ["proof (prove)\nusing this:\n  \\<not> goes_wrong e\n  e \\<longrightarrow>* v\n  \\<nexists>e'. v \\<longrightarrow> e'\n\ngoal (1 subgoal):\n 1. isval v", "by (simp only: goes_wrong_def stuck_def) blast"], ["proof (state)\nthis:\n  isval v\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from fv_e e_v"], ["proof (chain)\npicking this:\n  FV e = {}\n  e \\<longrightarrow>* v", "have fv_v: \"FV v = {}\""], ["proof (prove)\nusing this:\n  FV e = {}\n  e \\<longrightarrow>* v\n\ngoal (1 subgoal):\n 1. FV v = {}", "using reduction_pres_fv"], ["proof (prove)\nusing this:\n  FV e = {}\n  e \\<longrightarrow>* v\n  \\<lbrakk>?e \\<longrightarrow>* ?e'; FV ?e = {}\\<rbrakk>\n  \\<Longrightarrow> FV ?e' = {}\n\ngoal (1 subgoal):\n 1. FV v = {}", "by auto"], ["proof (state)\nthis:\n  FV v = {}\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from val_v fv_v"], ["proof (chain)\npicking this:\n  isval v\n  FV v = {}", "have val_v2: \"is_val v\""], ["proof (prove)\nusing this:\n  isval v\n  FV v = {}\n\ngoal (1 subgoal):\n 1. is_val v", "by simp"], ["proof (state)\nthis:\n  is_val v\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from e_v val_v2"], ["proof (chain)\npicking this:\n  e \\<longrightarrow>* v\n  is_val v", "obtain A where wte: \"A \\<in> E e []\" and wtv: \"A \\<in> E v []\""], ["proof (prove)\nusing this:\n  e \\<longrightarrow>* v\n  is_val v\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>A \\<in> E e []; A \\<in> E v []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using completeness[of e v]"], ["proof (prove)\nusing this:\n  e \\<longrightarrow>* v\n  is_val v\n  \\<lbrakk>e \\<longrightarrow>* v; is_val v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'. v' \\<in> E e ?\\<rho> \\<and> v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>A \\<in> E e []; A \\<in> E v []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A \\<in> E e []\n  A \\<in> E v []\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from this E_e"], ["proof (chain)\npicking this:\n  A \\<in> E e []\n  A \\<in> E v []\n  E e [] = {}", "have \"False\""], ["proof (prove)\nusing this:\n  A \\<in> E e []\n  A \\<in> E v []\n  E e [] = {}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> (diverge e \\<or> goes_wrong e) \\<Longrightarrow>\n    diverge e \\<or> goes_wrong e", "from this"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. diverge e \\<or> goes_wrong e", ".."], ["proof (state)\nthis:\n  diverge e \\<or> goes_wrong e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma val_ty_observe:\n  \"\\<lbrakk> A \\<in> E v []; A \\<in> E v' [];\n    observe v ob; isval v'; isval v \\<rbrakk> \\<Longrightarrow> observe v' ob\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> E v []; A \\<in> E v' []; observe v ob; isval v';\n     isval v\\<rbrakk>\n    \\<Longrightarrow> observe v' ob", "apply (cases v)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>A \\<in> E v []; A \\<in> E v' []; observe v ob; isval v';\n        isval v; v = EVar x1\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 2. \\<And>x2.\n       \\<lbrakk>A \\<in> E v []; A \\<in> E v' []; observe v ob; isval v';\n        isval v; v = ENat x2\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 3. \\<And>x31 x32.\n       \\<lbrakk>A \\<in> E v []; A \\<in> E v' []; observe v ob; isval v';\n        isval v; v = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 4. \\<And>x41 x42.\n       \\<lbrakk>A \\<in> E v []; A \\<in> E v' []; observe v ob; isval v';\n        isval v; v = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>A \\<in> E v []; A \\<in> E v' []; observe v ob; isval v';\n        isval v; v = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 6. \\<And>x61 x62 x63.\n       \\<lbrakk>A \\<in> E v []; A \\<in> E v' []; observe v ob; isval v';\n        isval v; v = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> observe v' ob", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>A = VNat x2; VNat x2 \\<in> E v' []; observe (ENat x2) ob;\n        isval v'; isval (ENat x2); v = ENat x2\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 2. \\<And>x31 x32 f.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f\\<rbrakk>\n       \\<Longrightarrow> observe v' ob", "apply (cases v')"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x2 x1.\n       \\<lbrakk>A = VNat x2; VNat x2 \\<in> E v' []; observe (ENat x2) ob;\n        isval v'; isval (ENat x2); v = ENat x2; v' = EVar x1\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 2. \\<And>x2 x2a.\n       \\<lbrakk>A = VNat x2; VNat x2 \\<in> E v' []; observe (ENat x2) ob;\n        isval v'; isval (ENat x2); v = ENat x2; v' = ENat x2a\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 3. \\<And>x2 x31 x32.\n       \\<lbrakk>A = VNat x2; VNat x2 \\<in> E v' []; observe (ENat x2) ob;\n        isval v'; isval (ENat x2); v = ENat x2; v' = ELam x31 x32\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 4. \\<And>x2 x41 x42.\n       \\<lbrakk>A = VNat x2; VNat x2 \\<in> E v' []; observe (ENat x2) ob;\n        isval v'; isval (ENat x2); v = ENat x2; v' = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 5. \\<And>x2 x51 x52 x53.\n       \\<lbrakk>A = VNat x2; VNat x2 \\<in> E v' []; observe (ENat x2) ob;\n        isval v'; isval (ENat x2); v = ENat x2;\n        v' = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 6. \\<And>x2 x61 x62 x63.\n       \\<lbrakk>A = VNat x2; VNat x2 \\<in> E v' []; observe (ENat x2) ob;\n        isval v'; isval (ENat x2); v = ENat x2;\n        v' = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 7. \\<And>x31 x32 f.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f\\<rbrakk>\n       \\<Longrightarrow> observe v' ob", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 f.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f\\<rbrakk>\n       \\<Longrightarrow> observe v' ob", "apply (cases v')"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x31 x32 f x1.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = EVar x1\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 2. \\<And>x31 x32 f x2.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = ENat x2\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 3. \\<And>x31 x32 f x31a x32a.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = ELam x31a x32a\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 4. \\<And>x31 x32 f x41 x42.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = EApp x41 x42\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 5. \\<And>x31 x32 f x51 x52 x53.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = EPrim x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> observe v' ob\n 6. \\<And>x31 x32 f x61 x62 x63.\n       \\<lbrakk>VFun f \\<in> E v' []; observe (ELam x31 x32) ob; isval v';\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = EIf x61 x62 x63\\<rbrakk>\n       \\<Longrightarrow> observe v' ob", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 f x31a x32a.\n       \\<lbrakk>\\<forall>v1 v2.\n                   (v1, v2) \\<in> fset f \\<longrightarrow>\n                   v2 \\<in> E x32a [(x31a, v1)];\n        observe (ELam x31 x32) ob; isval (ELam x31a x32a);\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = ELam x31a x32a\\<rbrakk>\n       \\<Longrightarrow> observe (ELam x31a x32a) ob", "apply (cases ob)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x31 x32 f x31a x32a x1.\n       \\<lbrakk>\\<forall>v1 v2.\n                   (v1, v2) \\<in> fset f \\<longrightarrow>\n                   v2 \\<in> E x32a [(x31a, v1)];\n        observe (ELam x31 x32) ob; isval (ELam x31a x32a);\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = ELam x31a x32a; ob = ONat x1\\<rbrakk>\n       \\<Longrightarrow> observe (ELam x31a x32a) ob\n 2. \\<And>x31 x32 f x31a x32a.\n       \\<lbrakk>\\<forall>v1 v2.\n                   (v1, v2) \\<in> fset f \\<longrightarrow>\n                   v2 \\<in> E x32a [(x31a, v1)];\n        observe (ELam x31 x32) ob; isval (ELam x31a x32a);\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = ELam x31a x32a; ob = OFun\\<rbrakk>\n       \\<Longrightarrow> observe (ELam x31a x32a) ob\n 3. \\<And>x31 x32 f x31a x32a.\n       \\<lbrakk>\\<forall>v1 v2.\n                   (v1, v2) \\<in> fset f \\<longrightarrow>\n                   v2 \\<in> E x32a [(x31a, v1)];\n        observe (ELam x31 x32) ob; isval (ELam x31a x32a);\n        isval (ELam x31 x32); v = ELam x31 x32;\n        \\<forall>v1 v2.\n           (v1, v2) \\<in> fset f \\<longrightarrow>\n           v2 \\<in> E x32 [(x31, v1)];\n        A = VFun f; v' = ELam x31a x32a; ob = OBad\\<rbrakk>\n       \\<Longrightarrow> observe (ELam x31a x32a) ob", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Soundness wrt. contextual equivalence\""], ["", "lemma soundness_wrt_ctx_equiv_aux[rule_format]:\n  assumes e12: \"E e1 = E e2\"\n  and fv_e1: \"FV (plug C e1) = {}\" and fv_e2: \"FV (plug C e2) = {}\"\n  shows \"run (plug C e1) ob \\<longrightarrow> run (plug C e2) ob\""], ["proof (prove)\ngoal (1 subgoal):\n 1. plug C e1 \\<Down> ob \\<longrightarrow> plug C e2 \\<Down> ob", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. plug C e1 \\<Down> ob \\<Longrightarrow> plug C e2 \\<Down> ob", "assume run_Ce1: \"run (plug C e1) ob\""], ["proof (state)\nthis:\n  plug C e1 \\<Down> ob\n\ngoal (1 subgoal):\n 1. plug C e1 \\<Down> ob \\<Longrightarrow> plug C e2 \\<Down> ob", "from e12"], ["proof (chain)\npicking this:\n  E e1 = E e2", "have pe12: \"E (plug C e1) = E (plug C e2)\""], ["proof (prove)\nusing this:\n  E e1 = E e2\n\ngoal (1 subgoal):\n 1. E (plug C e1) = E (plug C e2)", "by (rule congruence)"], ["proof (state)\nthis:\n  E (plug C e1) = E (plug C e2)\n\ngoal (1 subgoal):\n 1. plug C e1 \\<Down> ob \\<Longrightarrow> plug C e2 \\<Down> ob", "from run_Ce1"], ["proof (chain)\npicking this:\n  plug C e1 \\<Down> ob", "have \"((\\<exists> v. (plug C e1) \\<longrightarrow>* v \\<and> observe v ob) \n             \\<or> ((diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad))\""], ["proof (prove)\nusing this:\n  plug C e1 \\<Down> ob\n\ngoal (1 subgoal):\n 1. (\\<exists>v. plug C e1 \\<longrightarrow>* v \\<and> observe v ob) \\<or>\n    (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad", "by (simp only: run_def)"], ["proof (state)\nthis:\n  (\\<exists>v. plug C e1 \\<longrightarrow>* v \\<and> observe v ob) \\<or>\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad\n\ngoal (1 subgoal):\n 1. plug C e1 \\<Down> ob \\<Longrightarrow> plug C e2 \\<Down> ob", "from this"], ["proof (chain)\npicking this:\n  (\\<exists>v. plug C e1 \\<longrightarrow>* v \\<and> observe v ob) \\<or>\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad", "show \"run (plug C e2) ob\""], ["proof (prove)\nusing this:\n  (\\<exists>v. plug C e1 \\<longrightarrow>* v \\<and> observe v ob) \\<or>\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad\n\ngoal (1 subgoal):\n 1. plug C e2 \\<Down> ob", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "assume \"\\<exists>v. plug C e1 \\<longrightarrow>* v \\<and> observe v ob\""], ["proof (state)\nthis:\n  \\<exists>v. plug C e1 \\<longrightarrow>* v \\<and> observe v ob\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from this"], ["proof (chain)\npicking this:\n  \\<exists>v. plug C e1 \\<longrightarrow>* v \\<and> observe v ob", "obtain v where r_v: \"plug C e1 \\<longrightarrow>* v\"\n      and ob_v: \"observe v ob\""], ["proof (prove)\nusing this:\n  \\<exists>v. plug C e1 \\<longrightarrow>* v \\<and> observe v ob\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>plug C e1 \\<longrightarrow>* v; observe v ob\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  plug C e1 \\<longrightarrow>* v\n  observe v ob\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from r_v fv_e1"], ["proof (chain)\npicking this:\n  plug C e1 \\<longrightarrow>* v\n  FV (plug C e1) = {}", "have fv_v: \"FV v = {}\""], ["proof (prove)\nusing this:\n  plug C e1 \\<longrightarrow>* v\n  FV (plug C e1) = {}\n\ngoal (1 subgoal):\n 1. FV v = {}", "by (rule reduction_pres_fv)"], ["proof (state)\nthis:\n  FV v = {}\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from ob_v fv_v"], ["proof (chain)\npicking this:\n  observe v ob\n  FV v = {}", "have val_v: \"is_val v\""], ["proof (prove)\nusing this:\n  observe v ob\n  FV v = {}\n\ngoal (1 subgoal):\n 1. is_val v", "by (cases v) auto"], ["proof (state)\nthis:\n  is_val v\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from r_v val_v"], ["proof (chain)\npicking this:\n  plug C e1 \\<longrightarrow>* v\n  is_val v", "obtain A  where ce1a: \"A \\<in> E (plug C e1) []\"\n      and wt_v_ap: \"A \\<in> E v []\""], ["proof (prove)\nusing this:\n  plug C e1 \\<longrightarrow>* v\n  is_val v\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>A \\<in> E (plug C e1) []; A \\<in> E v []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using completeness[of \"plug C e1\" v]"], ["proof (prove)\nusing this:\n  plug C e1 \\<longrightarrow>* v\n  is_val v\n  \\<lbrakk>plug C e1 \\<longrightarrow>* v; is_val v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'.\n                       v' \\<in> E (plug C e1) ?\\<rho> \\<and> v' \\<in> E v []\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>A \\<in> E (plug C e1) []; A \\<in> E v []\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A \\<in> E (plug C e1) []\n  A \\<in> E v []\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from ce1a pe12"], ["proof (chain)\npicking this:\n  A \\<in> E (plug C e1) []\n  E (plug C e1) = E (plug C e2)", "have ce2a: \"A \\<in> E (plug C e2) []\""], ["proof (prove)\nusing this:\n  A \\<in> E (plug C e1) []\n  E (plug C e1) = E (plug C e2)\n\ngoal (1 subgoal):\n 1. A \\<in> E (plug C e2) []", "by force"], ["proof (state)\nthis:\n  A \\<in> E (plug C e2) []\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "have ge: \"good_env [] []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. good_env [] []", "by blast"], ["proof (state)\nthis:\n  good_env [] []\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from ce2a ge"], ["proof (chain)\npicking this:\n  A \\<in> E (plug C e2) []\n  good_env [] []", "obtain v' where Ce2_vp: \"[] \\<turnstile> plug C e2 \\<Down> v'\" and vpa: \"v' \\<in> good A\""], ["proof (prove)\nusing this:\n  A \\<in> E (plug C e2) []\n  good_env [] []\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>[] \\<turnstile> plug C e2 \\<Down> v';\n         v' \\<in> good A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using denot_terminates"], ["proof (prove)\nusing this:\n  A \\<in> E (plug C e2) []\n  good_env [] []\n  \\<lbrakk>?v' \\<in> E ?e ?\\<rho>'; good_env ?\\<rho> ?\\<rho>'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v.\n                       ?\\<rho> \\<turnstile> ?e \\<Down> v \\<and>\n                       v \\<in> good ?v'\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        \\<lbrakk>[] \\<turnstile> plug C e2 \\<Down> v';\n         v' \\<in> good A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  [] \\<turnstile> plug C e2 \\<Down> v'\n  v' \\<in> good A\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from Ce2_vp fv_e2"], ["proof (chain)\npicking this:\n  [] \\<turnstile> plug C e2 \\<Down> v'\n  FV (plug C e2) = {}", "obtain v'' ob' where Ce2_vpp: \"plug C e2 \\<longrightarrow>* v''\" and vvpp: \"isval v''\"\n      and ovpp: \"observe v'' ob'\" and vp_ob: \"bs_observe v' ob'\""], ["proof (prove)\nusing this:\n  [] \\<turnstile> plug C e2 \\<Down> v'\n  FV (plug C e2) = {}\n\ngoal (1 subgoal):\n 1. (\\<And>v'' ob'.\n        \\<lbrakk>plug C e2 \\<longrightarrow>* v''; isval v'';\n         observe v'' ob'; bs_observe v' ob'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using sound_wrt_small_step[of \"plug C e2\" v']"], ["proof (prove)\nusing this:\n  [] \\<turnstile> plug C e2 \\<Down> v'\n  FV (plug C e2) = {}\n  \\<lbrakk>[] \\<turnstile> plug C e2 \\<Down> v';\n   FV (plug C e2) = {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>v'a ob.\n                       plug C e2 \\<longrightarrow>* v'a \\<and>\n                       isval v'a \\<and>\n                       observe v'a ob \\<and> bs_observe v' ob\n\ngoal (1 subgoal):\n 1. (\\<And>v'' ob'.\n        \\<lbrakk>plug C e2 \\<longrightarrow>* v''; isval v'';\n         observe v'' ob'; bs_observe v' ob'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  plug C e2 \\<longrightarrow>* v''\n  isval v''\n  observe v'' ob'\n  bs_observe v' ob'\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from ovpp"], ["proof (chain)\npicking this:\n  observe v'' ob'", "have vpp_ob: \"observe v'' ob\""], ["proof (prove)\nusing this:\n  observe v'' ob'\n\ngoal (1 subgoal):\n 1. observe v'' ob", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. observe v'' ob' \\<Longrightarrow> observe v'' ob", "from ce2a Ce2_vpp"], ["proof (chain)\npicking this:\n  A \\<in> E (plug C e2) []\n  plug C e2 \\<longrightarrow>* v''", "have vpp_app: \"A \\<in> E v'' []\""], ["proof (prove)\nusing this:\n  A \\<in> E (plug C e2) []\n  plug C e2 \\<longrightarrow>* v''\n\ngoal (1 subgoal):\n 1. A \\<in> E v'' []", "using preservation"], ["proof (prove)\nusing this:\n  A \\<in> E (plug C e2) []\n  plug C e2 \\<longrightarrow>* v''\n  \\<lbrakk>?v \\<in> E ?e ?\\<rho>; ?e \\<longrightarrow>* ?e'\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> E ?e' ?\\<rho>\n\ngoal (1 subgoal):\n 1. A \\<in> E v'' []", "by blast"], ["proof (state)\nthis:\n  A \\<in> E v'' []\n\ngoal (1 subgoal):\n 1. observe v'' ob' \\<Longrightarrow> observe v'' ob", "from vpp_app wt_v_ap ob_v vvpp val_v"], ["proof (chain)\npicking this:\n  A \\<in> E v'' []\n  A \\<in> E v []\n  observe v ob\n  isval v''\n  is_val v", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> E v'' []\n  A \\<in> E v []\n  observe v ob\n  isval v''\n  is_val v\n\ngoal (1 subgoal):\n 1. observe v'' ob", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> observe v'' ob", "apply (rule val_ty_observe)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> ?A5 \\<in> E ?v5 []\n 2. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> ?A5 \\<in> E v'' []\n 3. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> observe ?v5 ob\n 4. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> isval v''\n 5. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> isval ?v5", "prefer 3"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> observe ?v5 ob\n 2. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> ?A5 \\<in> E ?v5 []\n 3. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> ?A5 \\<in> E v'' []\n 4. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> isval v''\n 5. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> isval ?v5", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> ?A5 \\<in> E v []\n 2. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> ?A5 \\<in> E v'' []\n 3. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> isval v''\n 4. \\<lbrakk>A \\<in> E v'' []; A \\<in> E v []; observe v ob; isval v'';\n     isval v \\<and> FV v = {}\\<rbrakk>\n    \\<Longrightarrow> isval v", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  observe v'' ob\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  observe v'' ob\n\ngoal (2 subgoals):\n 1. \\<exists>v.\n       plug C e1 \\<longrightarrow>* v \\<and> observe v ob \\<Longrightarrow>\n    plug C e2 \\<Down> ob\n 2. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from Ce2_vpp vpp_ob"], ["proof (chain)\npicking this:\n  plug C e2 \\<longrightarrow>* v''\n  observe v'' ob", "show ?thesis"], ["proof (prove)\nusing this:\n  plug C e2 \\<longrightarrow>* v''\n  observe v'' ob\n\ngoal (1 subgoal):\n 1. plug C e2 \\<Down> ob", "by (simp add: run_def) blast"], ["proof (state)\nthis:\n  plug C e2 \\<Down> ob\n\ngoal (1 subgoal):\n 1. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "assume d_e1: \"(diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad\""], ["proof (state)\nthis:\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad\n\ngoal (1 subgoal):\n 1. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from d_e1 fv_e1"], ["proof (chain)\npicking this:\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad\n  FV (plug C e1) = {}", "have E_Ce1: \"E (plug C e1) [] = {}\""], ["proof (prove)\nusing this:\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad\n  FV (plug C e1) = {}\n\ngoal (1 subgoal):\n 1. E (plug C e1) [] = {}", "using diverge_denot_empty goes_wrong_denot_empty"], ["proof (prove)\nusing this:\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad\n  FV (plug C e1) = {}\n  \\<lbrakk>diverge ?e; FV ?e = {}\\<rbrakk> \\<Longrightarrow> E ?e [] = {}\n  \\<lbrakk>goes_wrong ?e; FV ?e = {}\\<rbrakk> \\<Longrightarrow> E ?e [] = {}\n\ngoal (1 subgoal):\n 1. E (plug C e1) [] = {}", "by blast"], ["proof (state)\nthis:\n  E (plug C e1) [] = {}\n\ngoal (1 subgoal):\n 1. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from E_Ce1 pe12"], ["proof (chain)\npicking this:\n  E (plug C e1) [] = {}\n  E (plug C e1) = E (plug C e2)", "have E_Ce2: \"E (plug C e2) [] = {}\""], ["proof (prove)\nusing this:\n  E (plug C e1) [] = {}\n  E (plug C e1) = E (plug C e2)\n\ngoal (1 subgoal):\n 1. E (plug C e2) [] = {}", "by simp"], ["proof (state)\nthis:\n  E (plug C e2) [] = {}\n\ngoal (1 subgoal):\n 1. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from E_Ce2 fv_e2"], ["proof (chain)\npicking this:\n  E (plug C e2) [] = {}\n  FV (plug C e2) = {}", "have \"diverge (plug C e2) \\<or> goes_wrong (plug C e2)\""], ["proof (prove)\nusing this:\n  E (plug C e2) [] = {}\n  FV (plug C e2) = {}\n\ngoal (1 subgoal):\n 1. diverge (plug C e2) \\<or> goes_wrong (plug C e2)", "using denot_empty_diverge"], ["proof (prove)\nusing this:\n  E (plug C e2) [] = {}\n  FV (plug C e2) = {}\n  \\<lbrakk>E ?e [] = {}; FV ?e = {}\\<rbrakk>\n  \\<Longrightarrow> diverge ?e \\<or> goes_wrong ?e\n\ngoal (1 subgoal):\n 1. diverge (plug C e2) \\<or> goes_wrong (plug C e2)", "by blast"], ["proof (state)\nthis:\n  diverge (plug C e2) \\<or> goes_wrong (plug C e2)\n\ngoal (1 subgoal):\n 1. (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and>\n    ob = OBad \\<Longrightarrow>\n    plug C e2 \\<Down> ob", "from this d_e1"], ["proof (chain)\npicking this:\n  diverge (plug C e2) \\<or> goes_wrong (plug C e2)\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad", "show ?thesis"], ["proof (prove)\nusing this:\n  diverge (plug C e2) \\<or> goes_wrong (plug C e2)\n  (diverge (plug C e1) \\<or> goes_wrong (plug C e1)) \\<and> ob = OBad\n\ngoal (1 subgoal):\n 1. plug C e2 \\<Down> ob", "by (simp add: run_def)"], ["proof (state)\nthis:\n  plug C e2 \\<Down> ob\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  plug C e2 \\<Down> ob\n\ngoal:\nNo subgoals!", "qed"], ["", "definition ctx_equiv :: \"exp \\<Rightarrow> exp \\<Rightarrow> bool\" (infix \"\\<simeq>\" 51) where\n\"e \\<simeq> e' \\<equiv> \\<forall> C ob. FV (plug C e) = {} \\<and> FV (plug C e') = {} \\<longrightarrow>\n   run (plug C e) ob = run (plug C e') ob\""], ["", "theorem denot_sound_wrt_ctx_equiv: assumes e12: \"E e1 = E e2\" shows \"e1 \\<simeq> e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 \\<simeq> e2", "using e12"], ["proof (prove)\nusing this:\n  E e1 = E e2\n\ngoal (1 subgoal):\n 1. e1 \\<simeq> e2", "apply (simp only: ctx_equiv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. E e1 = E e2 \\<Longrightarrow>\n    \\<forall>C ob.\n       FV (plug C e1) = {} \\<and> FV (plug C e2) = {} \\<longrightarrow>\n       plug C e1 \\<Down> ob = plug C e2 \\<Down> ob", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {};\n        FV (plug C e2) = {}\\<rbrakk>\n       \\<Longrightarrow> plug C e1 \\<Down> ob = plug C e2 \\<Down> ob", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e1 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> plug C e2 \\<Down> ob\n 2. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e2 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> plug C e1 \\<Down> ob", "apply (rule soundness_wrt_ctx_equiv_aux)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e1 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> E (?e1.8 C ob) = E e2\n 2. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e1 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> FV (plug C (?e1.8 C ob)) = {}\n 3. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e1 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> FV (plug C e2) = {}\n 4. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e1 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> plug C (?e1.8 C ob) \\<Down> ob\n 5. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e2 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> plug C e1 \\<Down> ob", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e2 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> plug C e1 \\<Down> ob", "apply (rule soundness_wrt_ctx_equiv_aux)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e2 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> E (?e1.13 C ob) = E e1\n 2. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e2 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> FV (plug C (?e1.13 C ob)) = {}\n 3. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e2 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> FV (plug C e1) = {}\n 4. \\<And>C ob.\n       \\<lbrakk>E e1 = E e2; FV (plug C e1) = {}; FV (plug C e2) = {};\n        plug C e2 \\<Down> ob\\<rbrakk>\n       \\<Longrightarrow> plug C (?e1.13 C ob) \\<Down> ob", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}