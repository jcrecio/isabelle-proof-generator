{"file_name": "/home/qj213/afp-2021-10-22/thys/DataRefinementIBP/DataRefinement.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/DataRefinementIBP", "problem_names": ["theorem data_refinement:\n  \"mono R \\<Longrightarrow> \\<Turnstile> p {| S |} q \\<Longrightarrow>  DataRefinement S R R' S' \\<Longrightarrow> \n         \\<Turnstile> (R p) {| S' |} (R' q)\"", "theorem data_refinement2:\n  \"mono R \\<Longrightarrow> \\<Turnstile> p {| S |} q \\<Longrightarrow>  DataRefinement ({.p.} o S) R R' S' \\<Longrightarrow> \n         \\<Turnstile> (R p) {| S' |} (R' q)\"", "theorem data_refinement_hoare:\n  \"mono S \\<Longrightarrow> mono D \\<Longrightarrow> DataRefinement ({.p.} o [:Q:]) {:R:} D S = \n         (\\<forall> s . \\<Turnstile> {s' . s \\<in> R s' \\<and> s \\<in> p} {| S |} (D ((Q s)::'a::order)))\"", "theorem data_refinement_choice1:\n  \"DataRefinement S1 D D' S2 \\<Longrightarrow> DataRefinement S1 D D' S2' \\<Longrightarrow> DataRefinement S1 D D' ( S2 \\<sqinter> S2') \"", "theorem data_refinement_choice2:\n  \"mono D \\<Longrightarrow> DataRefinement S1 D D' S2 \\<Longrightarrow> DataRefinement S1' D D' S2' \\<Longrightarrow> \n     DataRefinement (S1 \\<sqinter> S1') D D' (S2 \\<sqinter> S2')\"", "theorem data_refinement_top [simp]:\n  \"DataRefinement S1 D D' (\\<top>::_::order_top)\"", "lemma Disjunctive_Sup:\n  \"Disjunctive_fun R \\<Longrightarrow> (R .. (Sup X)) =  Sup {y . \\<exists> x \\<in> X . y = (R .. x)}\"", "lemma (in DiagramTermination) disjunctive_SUP_L_P:\n  \"Disjunctive_fun R \\<Longrightarrow> (R .. (SUP_L_P P (pair u i))) =  (SUP_L_P (\\<lambda> w . (R .. (P w)))) (pair u i)\"", "lemma apply_fun_range: \"{y. \\<exists>x. y = (R .. P x)} = range (\\<lambda> x . R .. P x)\"", "lemma [simp]: \"Disjunctive_fun R \\<Longrightarrow> mono ((R i)::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice)\"", "theorem (in DiagramTermination) dgr_data_refinement_1:\n  \"dmono D' \\<Longrightarrow> Disjunctive_fun R \\<Longrightarrow>\n   (\\<forall> w i j . \\<Turnstile> P w i  {| D(i,j) |} SUP_L_P P (pair w i) j) \\<Longrightarrow>\n   (\\<forall> w i j . DataRefinement ((assert (P w i)) o (D (i,j))) (R i) (R j) (D' (i, j))) \\<Longrightarrow>\n   \n   \\<Turnstile> (R .. (Sup (range P))) {| pt D' |} ((R .. (Sup (range P))) \\<sqinter> (-(grd (step D'))))\"", "theorem DataRefinement_mono:\n  \"T \\<le> S \\<Longrightarrow> mono R \\<Longrightarrow> DataRefinement S R R' S' \\<Longrightarrow> DataRefinement T R R' S' \"", "theorem DgrDataRefinement_mono:\n  \"Q \\<le> P \\<Longrightarrow> mono_fun R \\<Longrightarrow> DgrDataRefinement2 P D R D' \\<Longrightarrow> DgrDataRefinement2 Q D R D'\"", "theorem (in DiagramTermination) Diagram_DataRefinement1:\n  \"dmono D \\<Longrightarrow> Disjunctive_fun R \\<Longrightarrow> \\<turnstile> P {| D |} Q \\<Longrightarrow> DgrDataRefinement1 D R D' \\<Longrightarrow>\n      \\<turnstile> (R .. P) {| D' |} ((R .. P) \\<sqinter> (-(grd (step D'))))\"", "lemma comp_left_mono [simp]: \"S \\<le> S' \\<Longrightarrow> S o T \\<le> S' o T\"", "lemma assert_pred_mono [simp]: \"p \\<le> q \\<Longrightarrow> {.p.} \\<le> {.q.}\"", "theorem (in DiagramTermination) Diagram_DataRefinement2:\n  \"dmono D \\<Longrightarrow> Disjunctive_fun R \\<Longrightarrow> \\<turnstile> P {| D |} Q \\<Longrightarrow> DgrDataRefinement2 P D R D' \\<Longrightarrow>\n      \\<turnstile> (R .. P) {| D' |} ((R .. P) \\<sqinter> (-(grd (step D'))))\"", "lemma \"(R'::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Disjunctive \\<Longrightarrow>\n   DataRefinement S R R' S' \\<Longrightarrow> R (- grd S) \\<le> - grd S'\""], "translations": [["", "theorem data_refinement:\n  \"mono R \\<Longrightarrow> \\<Turnstile> p {| S |} q \\<Longrightarrow>  DataRefinement S R R' S' \\<Longrightarrow> \n         \\<Turnstile> (R p) {| S' |} (R' q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono R; \\<Turnstile> p{| S |}q;\n     DataRefinement S R R' S'\\<rbrakk>\n    \\<Longrightarrow> \\<Turnstile> R p{| S' |}R' q", "apply (simp add:  DataRefinement_def Hoare_def le_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     \\<forall>x. R (S x) \\<sqsubseteq> S' (R' x)\\<rbrakk>\n    \\<Longrightarrow> R p \\<sqsubseteq> S' (R' q)", "apply (drule_tac x = q in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> R p \\<sqsubseteq> S' (R' q)", "apply (rule_tac y = \"R (S q)\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> R p \\<sqsubseteq> R (S q)\n 2. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> R (S q) \\<sqsubseteq> S' (R' q)", "apply (drule_tac x = p and y = \"S q\" in monoD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>p \\<sqsubseteq> S q; R (S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> p \\<sqsubseteq> S q\n 2. \\<lbrakk>p \\<sqsubseteq> S q; R (S q) \\<sqsubseteq> S' (R' q);\n     R p \\<sqsubseteq> R (S q)\\<rbrakk>\n    \\<Longrightarrow> R p \\<sqsubseteq> R (S q)\n 3. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> R (S q) \\<sqsubseteq> S' (R' q)", "by simp_all"], ["", "theorem data_refinement2:\n  \"mono R \\<Longrightarrow> \\<Turnstile> p {| S |} q \\<Longrightarrow>  DataRefinement ({.p.} o S) R R' S' \\<Longrightarrow> \n         \\<Turnstile> (R p) {| S' |} (R' q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono R; \\<Turnstile> p{| S |}q;\n     DataRefinement ({. p .} \\<circ> S) R R' S'\\<rbrakk>\n    \\<Longrightarrow> \\<Turnstile> R p{| S' |}R' q", "apply (simp add:  DataRefinement_def Hoare_def le_fun_def assert_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     \\<forall>x. R (p \\<sqinter> S x) \\<sqsubseteq> S' (R' x)\\<rbrakk>\n    \\<Longrightarrow> R p \\<sqsubseteq> S' (R' q)", "apply (drule_tac x = q in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (p \\<sqinter> S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> R p \\<sqsubseteq> S' (R' q)", "apply (subgoal_tac \"p \\<sqinter> S q = p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (p \\<sqinter> S q) \\<sqsubseteq> S' (R' q);\n     p \\<sqinter> S q = p\\<rbrakk>\n    \\<Longrightarrow> R p \\<sqsubseteq> S' (R' q)\n 2. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (p \\<sqinter> S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> p \\<sqinter> S q = p", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (p \\<sqinter> S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> p \\<sqinter> S q = p", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (p \\<sqinter> S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> p \\<sqinter> S q \\<sqsubseteq> p\n 2. \\<lbrakk>mono R; p \\<sqsubseteq> S q;\n     R (p \\<sqinter> S q) \\<sqsubseteq> S' (R' q)\\<rbrakk>\n    \\<Longrightarrow> p \\<sqsubseteq> p \\<sqinter> S q", "by simp_all"], ["", "theorem data_refinement_hoare:\n  \"mono S \\<Longrightarrow> mono D \\<Longrightarrow> DataRefinement ({.p.} o [:Q:]) {:R:} D S = \n         (\\<forall> s . \\<Turnstile> {s' . s \\<in> R s' \\<and> s \\<in> p} {| S |} (D ((Q s)::'a::order)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono S; mono D\\<rbrakk>\n    \\<Longrightarrow> DataRefinement ({. p .} \\<circ> [: Q :]) {: R :} D S =\n                      (\\<forall>s.\n                          \\<Turnstile> {s'.\n  s \\<in> R s' \\<and> s \\<in> p}{| S |}D (Q s))", "apply (simp add: le_fun_def assert_def angelic_def demonic_def Hoare_def DataRefinement_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono S; mono D\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          {s. R s \\<inter>\n                              (p \\<inter> {s. Q s \\<sqsubseteq> x}) \\<noteq>\n                              {}}\n                          \\<subseteq> S (D x)) =\n                      (\\<forall>s.\n                          {s'. s \\<in> R s' \\<and> s \\<in> p}\n                          \\<subseteq> S (D (Q s)))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s x.\n       \\<lbrakk>mono S; mono D;\n        \\<forall>x.\n           {s. R s \\<inter> (p \\<inter> {s. Q s \\<sqsubseteq> x}) \\<noteq>\n               {}}\n           \\<subseteq> S (D x);\n        s \\<in> R x; s \\<in> p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S (D (Q s))\n 2. \\<And>x xa xb.\n       \\<lbrakk>mono S; mono D;\n        \\<forall>s.\n           {s'. s \\<in> R s' \\<and> s \\<in> p} \\<subseteq> S (D (Q s));\n        xa \\<notin> S (D x); xb \\<in> R xa; xb \\<in> p;\n        Q xb \\<sqsubseteq> x\\<rbrakk>\n       \\<Longrightarrow> xb \\<in> {}", "apply (simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s x.\n       \\<lbrakk>mono S; mono D;\n        \\<forall>x.\n           {s. R s \\<inter> (p \\<inter> {s. Q s \\<sqsubseteq> x}) \\<noteq>\n               {}}\n           \\<subseteq> S (D x);\n        s \\<in> R x; s \\<in> p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S (D (Q s))\n 2. \\<And>x xa xb.\n       \\<lbrakk>mono S; mono D;\n        \\<forall>s.\n           {s'. s \\<in> R s' \\<and> s \\<in> p} \\<subseteq> S (D (Q s));\n        xa \\<notin> S (D x); xb \\<in> R xa; xb \\<in> p;\n        Q xb \\<sqsubseteq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule_tac x = \"Q s\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s x.\n       \\<lbrakk>mono S; mono D; s \\<in> R x; s \\<in> p;\n        {sa.\n         R sa \\<inter> (p \\<inter> {sa. Q sa \\<sqsubseteq> Q s}) \\<noteq>\n         {}}\n        \\<subseteq> S (D (Q s))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S (D (Q s))\n 2. \\<And>x xa xb.\n       \\<lbrakk>mono S; mono D;\n        \\<forall>s.\n           {s'. s \\<in> R s' \\<and> s \\<in> p} \\<subseteq> S (D (Q s));\n        xa \\<notin> S (D x); xb \\<in> R xa; xb \\<in> p;\n        Q xb \\<sqsubseteq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto [1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>mono S; mono D;\n        \\<forall>s.\n           {s'. s \\<in> R s' \\<and> s \\<in> p} \\<subseteq> S (D (Q s));\n        xa \\<notin> S (D x); xb \\<in> R xa; xb \\<in> p;\n        Q xb \\<sqsubseteq> x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule_tac x = \"xb\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>mono S; mono D; xa \\<notin> S (D x); xb \\<in> R xa;\n        xb \\<in> p; Q xb \\<sqsubseteq> x;\n        {s'. xb \\<in> R s' \\<and> xb \\<in> p}\n        \\<subseteq> S (D (Q xb))\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>mono S; mono D; xa \\<notin> S (D x); xb \\<in> R xa;\n        xb \\<in> p; Q xb \\<sqsubseteq> x;\n        {s'. xb \\<in> R s'} \\<subseteq> S (D (Q xb))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp add: less_eq_set_def le_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>mono S; mono D; xa \\<notin> S (D x); xb \\<in> R xa;\n        xb \\<in> p; Q xb \\<sqsubseteq> x;\n        \\<forall>x.\n           xb \\<in> R x \\<longrightarrow> x \\<in> S (D (Q xb))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule_tac x = xa in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>mono S; mono D; xa \\<notin> S (D x); xb \\<in> R xa;\n        xb \\<in> p; Q xb \\<sqsubseteq> x;\n        xb \\<in> R xa \\<longrightarrow> xa \\<in> S (D (Q xb))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (simp_all add: mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>\\<forall>x y.\n                   x \\<sqsubseteq> y \\<longrightarrow> S x \\<subseteq> S y;\n        \\<forall>x y.\n           x \\<sqsubseteq> y \\<longrightarrow> D x \\<sqsubseteq> D y;\n        xa \\<notin> S (D x); xb \\<in> R xa; xb \\<in> p;\n        Q xb \\<sqsubseteq> x; xa \\<in> S (D (Q xb))\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["", "theorem data_refinement_choice1:\n  \"DataRefinement S1 D D' S2 \\<Longrightarrow> DataRefinement S1 D D' S2' \\<Longrightarrow> DataRefinement S1 D D' ( S2 \\<sqinter> S2') \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>DataRefinement S1 D D' S2; DataRefinement S1 D D' S2'\\<rbrakk>\n    \\<Longrightarrow> DataRefinement S1 D D' (S2 \\<sqinter> S2')", "by (simp add: DataRefinement_def hoare_choice le_fun_def inf_fun_def)"], ["", "theorem data_refinement_choice2:\n  \"mono D \\<Longrightarrow> DataRefinement S1 D D' S2 \\<Longrightarrow> DataRefinement S1' D D' S2' \\<Longrightarrow> \n     DataRefinement (S1 \\<sqinter> S1') D D' (S2 \\<sqinter> S2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono D; DataRefinement S1 D D' S2;\n     DataRefinement S1' D D' S2'\\<rbrakk>\n    \\<Longrightarrow> DataRefinement (S1 \\<sqinter> S1') D D'\n                       (S2 \\<sqinter> S2')", "apply (simp add: DataRefinement_def inf_fun_def le_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n     \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         D (S1 x \\<sqinter> S1' x) \\<sqsubseteq>\n                         S2 (D' x) \\<and>\n                         D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> S2' (D' x)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> S2 (D' x)\n 2. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> S2' (D' x)", "apply (rule_tac y = \"D (S1 x)\" in order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> D (S1 x)\n 2. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x) \\<sqsubseteq> S2 (D' x)\n 3. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> S2' (D' x)", "apply (drule_tac x = \"S1 x \\<sqinter> S1' x\" and y = \"S1 x\" in monoD)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> S1 x \\<sqinter> S1' x \\<sqsubseteq> S1 x\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x);\n        D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> D (S1 x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> D (S1 x)\n 3. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x) \\<sqsubseteq> S2 (D' x)\n 4. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> S2' (D' x)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> S2' (D' x)", "apply (rule_tac y = \"D (S1' x)\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> D (S1' x)\n 2. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1' x) \\<sqsubseteq> S2' (D' x)", "apply (drule_tac x = \"S1 x \\<sqinter> S1' x\" and y = \"S1' x\" in monoD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> S1 x \\<sqinter> S1' x \\<sqsubseteq> S1' x\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x);\n        D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> D (S1' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1 x \\<sqinter> S1' x) \\<sqsubseteq> D (S1' x)\n 3. \\<And>x.\n       \\<lbrakk>mono D; \\<forall>x. D (S1 x) \\<sqsubseteq> S2 (D' x);\n        \\<forall>x. D (S1' x) \\<sqsubseteq> S2' (D' x)\\<rbrakk>\n       \\<Longrightarrow> D (S1' x) \\<sqsubseteq> S2' (D' x)", "by simp_all"], ["", "theorem data_refinement_top [simp]:\n  \"DataRefinement S1 D D' (\\<top>::_::order_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DataRefinement S1 D D' \\<top>", "by (simp add: DataRefinement_def le_fun_def top_fun_def)"], ["", "definition apply_fun::\"('a\\<Rightarrow>'b\\<Rightarrow>'c)\\<Rightarrow>('a\\<Rightarrow>'b)\\<Rightarrow>'a\\<Rightarrow>'c\" (infixl \"..\" 5) where\n  \"(A .. B) = (\\<lambda> x . (A x) (B x))\""], ["", "definition\n  \"Disjunctive_fun R = (\\<forall> i . (R i) \\<in> Apply.Disjunctive)\""], ["", "lemma Disjunctive_Sup:\n  \"Disjunctive_fun R \\<Longrightarrow> (R .. (Sup X)) =  Sup {y . \\<exists> x \\<in> X . y = (R .. x)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Disjunctive_fun R \\<Longrightarrow>\n    (R .. \\<Squnion>X) = \\<Squnion>{y. \\<exists>x\\<in>X. y = (R .. x)}", "apply (subst fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Disjunctive_fun R \\<Longrightarrow>\n    \\<forall>x.\n       (R .. \\<Squnion>X) x =\n       (\\<Squnion>{y. \\<exists>x\\<in>X. y = (R .. x)}) x", "apply (simp add: apply_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Disjunctive_fun R \\<Longrightarrow>\n    \\<forall>x.\n       R x (SUP f\\<in>X. f x) =\n       (SUP f\\<in>{y. \\<exists>x\\<in>X. y = (\\<lambda>xa. R xa (x xa))}.\n           f x)", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Disjunctive_fun R \\<Longrightarrow>\n       R x (SUP f\\<in>X. f x) =\n       (SUP f\\<in>{y. \\<exists>x\\<in>X. y = (\\<lambda>xa. R xa (x xa))}.\n           f x)", "apply (subst (asm) Disjunctive_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>i. R i \\<in> Apply.Disjunctive \\<Longrightarrow>\n       R x (SUP f\\<in>X. f x) =\n       (SUP f\\<in>{y. \\<exists>x\\<in>X. y = (\\<lambda>xa. R xa (x xa))}.\n           f x)", "apply (drule_tac x = x in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       R x \\<in> Apply.Disjunctive \\<Longrightarrow>\n       R x (SUP f\\<in>X. f x) =\n       (SUP f\\<in>{y. \\<exists>x\\<in>X. y = (\\<lambda>xa. R xa (x xa))}.\n           f x)", "apply (simp add: Apply.Disjunctive_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>X. R x (\\<Squnion>X) = \\<Squnion>(R x ` X) \\<Longrightarrow>\n       \\<Squnion>(R x ` (\\<lambda>f. f x) ` X) =\n       (SUP f\\<in>{y. \\<exists>x\\<in>X. y = (\\<lambda>xa. R xa (x xa))}.\n           f x)", "apply (subgoal_tac \"(R x ` (\\<lambda>f. f x) ` X) =((\\<lambda>f. f x) ` {y. \\<exists>x\\<in>X. y = (\\<lambda>xa. R xa (x xa))})\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>X. R x (\\<Squnion>X) = \\<Squnion>(R x ` X);\n        R x ` (\\<lambda>f. f x) ` X =\n        (\\<lambda>f. f x) `\n        {y. \\<exists>x\\<in>X. y = (\\<lambda>xa. R xa (x xa))}\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(R x ` (\\<lambda>f. f x) ` X) =\n                         (SUP f\\<in>{y. \\<exists>x\\<in>X.\n     y = (\\<lambda>xa. R xa (x xa))}.\n                             f x)\n 2. \\<And>x.\n       \\<forall>X. R x (\\<Squnion>X) = \\<Squnion>(R x ` X) \\<Longrightarrow>\n       R x ` (\\<lambda>f. f x) ` X =\n       (\\<lambda>f. f x) `\n       {y. \\<exists>x\\<in>X. y = (\\<lambda>xa. R xa (x xa))}", "apply (auto simp add: image_image cong del: SUP_cong_simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in DiagramTermination) disjunctive_SUP_L_P:\n  \"Disjunctive_fun R \\<Longrightarrow> (R .. (SUP_L_P P (pair u i))) =  (SUP_L_P (\\<lambda> w . (R .. (P w)))) (pair u i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Disjunctive_fun R \\<Longrightarrow>\n    (R .. SUP_L_P P (pair u i)) = SUP_L_P (\\<lambda>w. R .. P w) (pair u i)", "by (simp add: SUP_L_P_def apply_fun_def Disjunctive_fun_def Apply.Disjunctive_def fun_eq_iff image_comp)"], ["", "lemma apply_fun_range: \"{y. \\<exists>x. y = (R .. P x)} = range (\\<lambda> x . R .. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. \\<exists>x. y = (R .. P x)} = range (\\<lambda>x. R .. P x)", "by (fact full_SetCompr_eq)"], ["", "lemma [simp]: \"Disjunctive_fun R \\<Longrightarrow> mono ((R i)::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Disjunctive_fun R \\<Longrightarrow> mono (R i)", "by (simp add: Disjunctive_fun_def)"], ["", "theorem (in DiagramTermination) dgr_data_refinement_1:\n  \"dmono D' \\<Longrightarrow> Disjunctive_fun R \\<Longrightarrow>\n   (\\<forall> w i j . \\<Turnstile> P w i  {| D(i,j) |} SUP_L_P P (pair w i) j) \\<Longrightarrow>\n   (\\<forall> w i j . DataRefinement ((assert (P w i)) o (D (i,j))) (R i) (R j) (D' (i, j))) \\<Longrightarrow>\n   \n   \\<Turnstile> (R .. (Sup (range P))) {| pt D' |} ((R .. (Sup (range P))) \\<sqinter> (-(grd (step D'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dmono D'; Disjunctive_fun R;\n     \\<forall>w i j. \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n     \\<forall>w i j.\n        DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n         (D' (i, j))\\<rbrakk>\n    \\<Longrightarrow> \\<Turnstile> R ..\n                                   \\<Squnion>range\n        P{| pt D' |}((R .. \\<Squnion>range P) \\<sqinter> - grd (step D'))", "apply (simp add: Disjunctive_Sup apply_fun_range)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dmono D'; Disjunctive_fun R;\n     \\<forall>w i j. \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n     \\<forall>w i j.\n        DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n         (D' (i, j))\\<rbrakk>\n    \\<Longrightarrow> \\<Turnstile> SUP x.\n(R .. P x){| pt D' |}((SUP x. (R .. P x)) \\<sqinter> - grd (step D'))", "apply (rule hoare_diagram2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>dmono D'; Disjunctive_fun R;\n     \\<forall>w i j. \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n     \\<forall>w i j.\n        DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n         (D' (i, j))\\<rbrakk>\n    \\<Longrightarrow> dmono D'\n 2. \\<lbrakk>dmono D'; Disjunctive_fun R;\n     \\<forall>w i j. \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n     \\<forall>w i j.\n        DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n         (D' (i, j))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>u i j.\n                         \\<Turnstile> (R .. P u)\n i{| D' (i, j) |}SUP_L_P (\\<lambda>x. R .. P x) (pair u i) j", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dmono D'; Disjunctive_fun R;\n     \\<forall>w i j. \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n     \\<forall>w i j.\n        DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n         (D' (i, j))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>u i j.\n                         \\<Turnstile> (R .. P u)\n i{| D' (i, j) |}SUP_L_P (\\<lambda>x. R .. P x) (pair u i) j", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u i j.\n       \\<lbrakk>dmono D'; Disjunctive_fun R;\n        \\<forall>w i j.\n           \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n        \\<forall>w i j.\n           DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> (R .. P u)\n i{| D' (i, j) |}SUP_L_P (\\<lambda>x. R .. P x) (pair u i) j", "apply (simp add: disjunctive_SUP_L_P [THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u i j.\n       \\<lbrakk>dmono D'; Disjunctive_fun R;\n        \\<forall>w i j.\n           \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n        \\<forall>w i j.\n           DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> (R .. P u)\n i{| D' (i, j) |}(R .. SUP_L_P P (pair u i)) j", "apply (simp add: apply_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u i j.\n       \\<lbrakk>dmono D'; Disjunctive_fun R;\n        \\<forall>w i j.\n           \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n        \\<forall>w i j.\n           DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> R i\n (P u i){| D' (i, j) |}R j (SUP_L_P P (pair u i) j)", "apply (rule_tac S = \"D (i, j)\" in data_refinement2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>u i j.\n       \\<lbrakk>dmono D'; Disjunctive_fun R;\n        \\<forall>w i j.\n           \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n        \\<forall>w i j.\n           DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 2. \\<And>u i j.\n       \\<lbrakk>dmono D'; Disjunctive_fun R;\n        \\<forall>w i j.\n           \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n        \\<forall>w i j.\n           DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> P u\n i{| D (i, j) |}SUP_L_P P (pair u i) j\n 3. \\<And>u i j.\n       \\<lbrakk>dmono D'; Disjunctive_fun R;\n        \\<forall>w i j.\n           \\<Turnstile> P w i{| D (i, j) |}SUP_L_P P (pair w i) j;\n        \\<forall>w i j.\n           DataRefinement ({. P w i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> DataRefinement ({. P u i .} \\<circ> D (i, j)) (R i)\n                          (R j) (D' (i, j))", "by auto"], ["", "definition\n  \"DgrDataRefinement1 D R D' = (\\<forall> i j . DataRefinement (D (i , j)) (R i) (R j) (D' (i, j)))\""], ["", "definition\n  \"DgrDataRefinement2 P D R D' = (\\<forall> i j . DataRefinement ({.P i.} o D (i , j)) (R i) (R j) (D' (i, j)))\""], ["", "theorem DataRefinement_mono:\n  \"T \\<le> S \\<Longrightarrow> mono R \\<Longrightarrow> DataRefinement S R R' S' \\<Longrightarrow> DataRefinement T R R' S' \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<sqsubseteq> S; mono R; DataRefinement S R R' S'\\<rbrakk>\n    \\<Longrightarrow> DataRefinement T R R' S'", "apply (simp add: DataRefinement_def mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<sqsubseteq> S;\n     \\<forall>x y.\n        x \\<sqsubseteq> y \\<longrightarrow> R x \\<sqsubseteq> R y;\n     R \\<circ> S \\<sqsubseteq> S' \\<circ> R'\\<rbrakk>\n    \\<Longrightarrow> R \\<circ> T \\<sqsubseteq> S' \\<circ> R'", "apply (subst le_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>T \\<sqsubseteq> S;\n     \\<forall>x y.\n        x \\<sqsubseteq> y \\<longrightarrow> R x \\<sqsubseteq> R y;\n     R \\<circ> S \\<sqsubseteq> S' \\<circ> R'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (R \\<circ> T) x \\<sqsubseteq> (S' \\<circ> R') x", "apply (simp add: le_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. T x \\<sqsubseteq> S x;\n     \\<forall>x y.\n        x \\<sqsubseteq> y \\<longrightarrow> R x \\<sqsubseteq> R y;\n     \\<forall>x. R (S x) \\<sqsubseteq> S' (R' x)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. R (T x) \\<sqsubseteq> S' (R' x)", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. T x \\<sqsubseteq> S x;\n        \\<forall>x y.\n           x \\<sqsubseteq> y \\<longrightarrow> R x \\<sqsubseteq> R y;\n        \\<forall>x. R (S x) \\<sqsubseteq> S' (R' x)\\<rbrakk>\n       \\<Longrightarrow> R (T x) \\<sqsubseteq> S' (R' x)", "apply (rule_tac y = \"R (S x)\" in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x. T x \\<sqsubseteq> S x;\n        \\<forall>x y.\n           x \\<sqsubseteq> y \\<longrightarrow> R x \\<sqsubseteq> R y;\n        \\<forall>x. R (S x) \\<sqsubseteq> S' (R' x)\\<rbrakk>\n       \\<Longrightarrow> R (T x) \\<sqsubseteq> R (S x)\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x. T x \\<sqsubseteq> S x;\n        \\<forall>x y.\n           x \\<sqsubseteq> y \\<longrightarrow> R x \\<sqsubseteq> R y;\n        \\<forall>x. R (S x) \\<sqsubseteq> S' (R' x)\\<rbrakk>\n       \\<Longrightarrow> R (S x) \\<sqsubseteq> S' (R' x)", "by simp_all"], ["", "definition\n  \"mono_fun R = (\\<forall> i . mono (R i))\""], ["", "theorem DgrDataRefinement_mono:\n  \"Q \\<le> P \\<Longrightarrow> mono_fun R \\<Longrightarrow> DgrDataRefinement2 P D R D' \\<Longrightarrow> DgrDataRefinement2 Q D R D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Q \\<sqsubseteq> P; mono_fun R;\n     DgrDataRefinement2 P D R D'\\<rbrakk>\n    \\<Longrightarrow> DgrDataRefinement2 Q D R D'", "apply (simp add: DgrDataRefinement2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Q \\<sqsubseteq> P; mono_fun R;\n     \\<forall>i j.\n        DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n         (D' (i, j))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i j.\n                         DataRefinement ({. Q i .} \\<circ> D (i, j)) (R i)\n                          (R j) (D' (i, j))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>Q \\<sqsubseteq> P; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> DataRefinement ({. Q i .} \\<circ> D (i, j)) (R i)\n                          (R j) (D' (i, j))", "apply (rule_tac S = \"{.P i.} o D(i, j)\" in DataRefinement_mono)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>Q \\<sqsubseteq> P; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> {. Q i .} \\<circ> D (i, j) \\<sqsubseteq>\n                         {. P i .} \\<circ> D (i, j)\n 2. \\<And>i j.\n       \\<lbrakk>Q \\<sqsubseteq> P; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 3. \\<And>i j.\n       \\<lbrakk>Q \\<sqsubseteq> P; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> DataRefinement ({. P i .} \\<circ> D (i, j)) (R i)\n                          (R j) (D' (i, j))", "apply (simp_all add: le_fun_def assert_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<forall>x. Q x \\<sqsubseteq> P x; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Q i \\<sqinter> D (i, j) x \\<sqsubseteq> P i\n 2. \\<And>i.\n       \\<lbrakk>\\<forall>x. Q x \\<sqsubseteq> P x; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> mono (R i)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j x.\n       \\<lbrakk>\\<forall>x. Q x \\<sqsubseteq> P x; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> Q i \\<sqinter> D (i, j) x \\<sqsubseteq> P i\n 2. \\<And>i.\n       \\<lbrakk>\\<forall>x. Q x \\<sqsubseteq> P x; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> mono (R i)", "apply (rule_tac y = \"Q i\" in order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j x.\n       \\<lbrakk>\\<forall>x. Q x \\<sqsubseteq> P x; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> Q i \\<sqinter> D (i, j) x \\<sqsubseteq> Q i\n 2. \\<And>i j x.\n       \\<lbrakk>\\<forall>x. Q x \\<sqsubseteq> P x; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> Q i \\<sqsubseteq> P i\n 3. \\<And>i.\n       \\<lbrakk>\\<forall>x. Q x \\<sqsubseteq> P x; mono_fun R;\n        \\<forall>i j.\n           DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j))\\<rbrakk>\n       \\<Longrightarrow> mono (R i)", "by (simp_all add: mono_fun_def)"], ["", "text\\<open>\nNext theorem is the diagram version of the data refinement theorem. If the\ndiagram demonic choice $T$ is correct, and it is refined by $D$, then\n$D$ is also correct. One important point in this theorem is that \nif the diagram demonic choice $T$ terminates, then $D$ also terminates.\n\\<close>"], ["", "theorem (in DiagramTermination) Diagram_DataRefinement1:\n  \"dmono D \\<Longrightarrow> Disjunctive_fun R \\<Longrightarrow> \\<turnstile> P {| D |} Q \\<Longrightarrow> DgrDataRefinement1 D R D' \\<Longrightarrow>\n      \\<turnstile> (R .. P) {| D' |} ((R .. P) \\<sqinter> (-(grd (step D'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dmono D; Disjunctive_fun R; \\<turnstile> P{| D |}Q ;\n     DgrDataRefinement1 D R D'\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile> R ..\n                                   P{| D' |}((R .. P) \\<sqinter>\n       - grd (step D'))", "apply (unfold Hoare_dgr_def DgrDataRefinement1_def dgr_demonic_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dmono D; Disjunctive_fun R;\n     \\<exists>X.\n        (\\<forall>u i j.\n            \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j) \\<and>\n        P = \\<Squnion>range X \\<and>\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n     \\<forall>i j.\n        DataRefinement (D (i, j)) (R i) (R j) (D' (i, j))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>X.\n                         (\\<forall>u i j.\n                             \\<Turnstile> X u\n     i{| D' (i, j) |}SUP_L_P X (pair u i) j) \\<and>\n                         (R .. P) = \\<Squnion>range X \\<and>\n                         (R .. P) \\<sqinter> - grd (step D') =\n                         \\<Squnion>range X \\<sqinter> - grd (step D')", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Xa.\n                            (\\<forall>u i j.\n                                \\<Turnstile> Xa u\n        i{| D' (i, j) |}SUP_L_P Xa (pair u i) j) \\<and>\n                            (R .. \\<Squnion>range X) =\n                            \\<Squnion>range Xa \\<and>\n                            (R .. \\<Squnion>range X) \\<sqinter>\n                            - grd (step D') =\n                            \\<Squnion>range Xa \\<sqinter> - grd (step D')", "apply (rule_tac x=\"\\<lambda> w . R .. (X w)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>u i j.\n                             \\<Turnstile> (R .. X u)\n     i{| D' (i, j) |}SUP_L_P (\\<lambda>w. R .. X w) (pair u i) j) \\<and>\n                         (R .. \\<Squnion>range X) =\n                         (SUP w. (R .. X w)) \\<and>\n                         (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP w. (R .. X w)) \\<sqinter> - grd (step D')", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> (R .. X u)\n i{| D' (i, j) |}SUP_L_P (\\<lambda>w. R .. X w) (pair u i) j\n 2. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) = (SUP w. (R .. X w))\n 3. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP w. (R .. X w)) \\<sqinter> - grd (step D')", "apply (unfold disjunctive_SUP_L_P [THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> (R .. X u)\n i{| D' (i, j) |}(R .. SUP_L_P X (pair u i)) j\n 2. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) = (SUP w. (R .. X w))\n 3. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP w. (R .. X w)) \\<sqinter> - grd (step D')", "apply (simp add: apply_fun_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> R i\n (X u i){| D' (i, j) |}R j (SUP_L_P X (pair u i) j)\n 2. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) = (SUP w. (R .. X w))\n 3. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP w. (R .. X w)) \\<sqinter> - grd (step D')", "apply (rule_tac S = \"D (i,j)\" and R = \"R i\" and R' = \"R j\" in data_refinement)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 2. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> X u\n i{| D (i, j) |}SUP_L_P X (pair u i) j\n 3. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> DataRefinement (D (i, j)) (R i) (R j) (D' (i, j))\n 4. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) = (SUP w. (R .. X w))\n 5. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j. DataRefinement (D (i, j)) (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP w. (R .. X w)) \\<sqinter> - grd (step D')", "by (simp_all add: Disjunctive_Sup apply_fun_range)"], ["", "lemma comp_left_mono [simp]: \"S \\<le> S' \\<Longrightarrow> S o T \\<le> S' o T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<sqsubseteq> S' \\<Longrightarrow>\n    S \\<circ> T \\<sqsubseteq> S' \\<circ> T", "by (simp add: le_fun_def)"], ["", "lemma assert_pred_mono [simp]: \"p \\<le> q \\<Longrightarrow> {.p.} \\<le> {.q.}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<sqsubseteq> q \\<Longrightarrow> {. p .} \\<sqsubseteq> {. q .}", "apply (simp add: le_fun_def assert_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<sqsubseteq> q \\<Longrightarrow>\n    \\<forall>x. p \\<sqinter> x \\<sqsubseteq> q", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       p \\<sqsubseteq> q \\<Longrightarrow> p \\<sqinter> x \\<sqsubseteq> q", "apply (rule_tac y = p in order_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       p \\<sqsubseteq> q \\<Longrightarrow> p \\<sqinter> x \\<sqsubseteq> p\n 2. \\<And>x. p \\<sqsubseteq> q \\<Longrightarrow> p \\<sqsubseteq> q", "by simp_all"], ["", "theorem (in DiagramTermination) Diagram_DataRefinement2:\n  \"dmono D \\<Longrightarrow> Disjunctive_fun R \\<Longrightarrow> \\<turnstile> P {| D |} Q \\<Longrightarrow> DgrDataRefinement2 P D R D' \\<Longrightarrow>\n      \\<turnstile> (R .. P) {| D' |} ((R .. P) \\<sqinter> (-(grd (step D'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dmono D; Disjunctive_fun R; \\<turnstile> P{| D |}Q ;\n     DgrDataRefinement2 P D R D'\\<rbrakk>\n    \\<Longrightarrow> \\<turnstile> R ..\n                                   P{| D' |}((R .. P) \\<sqinter>\n       - grd (step D'))", "apply (unfold Hoare_dgr_def DgrDataRefinement2_def dgr_demonic_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dmono D; Disjunctive_fun R;\n     \\<exists>X.\n        (\\<forall>u i j.\n            \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j) \\<and>\n        P = \\<Squnion>range X \\<and>\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n     \\<forall>i j.\n        DataRefinement ({. P i .} \\<circ> D (i, j)) (R i) (R j)\n         (D' (i, j))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>X.\n                         (\\<forall>u i j.\n                             \\<Turnstile> X u\n     i{| D' (i, j) |}SUP_L_P X (pair u i) j) \\<and>\n                         (R .. P) = \\<Squnion>range X \\<and>\n                         (R .. P) \\<sqinter> - grd (step D') =\n                         \\<Squnion>range X \\<sqinter> - grd (step D')", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Xa.\n                            (\\<forall>u i j.\n                                \\<Turnstile> Xa u\n        i{| D' (i, j) |}SUP_L_P Xa (pair u i) j) \\<and>\n                            (R .. \\<Squnion>range X) =\n                            \\<Squnion>range Xa \\<and>\n                            (R .. \\<Squnion>range X) \\<sqinter>\n                            - grd (step D') =\n                            \\<Squnion>range Xa \\<sqinter> - grd (step D')", "apply (rule_tac x=\"\\<lambda> w . R .. (X w)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>u i j.\n                             \\<Turnstile> (R .. X u)\n     i{| D' (i, j) |}SUP_L_P (\\<lambda>w. R .. X w) (pair u i) j) \\<and>\n                         (R .. \\<Squnion>range X) =\n                         (SUP x. (R .. X x)) \\<and>\n                         (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> (R .. X u)\n i{| D' (i, j) |}SUP_L_P (\\<lambda>w. R .. X w) (pair u i) j\n 2. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) = (SUP x. (R .. X x))\n 3. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (unfold disjunctive_SUP_L_P [THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> (R .. X u)\n i{| D' (i, j) |}(R .. SUP_L_P X (pair u i)) j\n 2. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) = (SUP x. (R .. X x))\n 3. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (simp add: apply_fun_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> R i\n (X u i){| D' (i, j) |}R j (SUP_L_P X (pair u i) j)\n 2. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) = (SUP x. (R .. X x))\n 3. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (rule_tac S = \"D (i,j)\" and R = \"R i\" and R' = \"R j\" in data_refinement2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 2. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile> X u\n i{| D (i, j) |}SUP_L_P X (pair u i) j\n 3. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> DataRefinement ({. X u i .} \\<circ> D (i, j)) (R i)\n                          (R j) (D' (i, j))\n 4. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) = (SUP x. (R .. X x))\n 5. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> (R .. \\<Squnion>range X) \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (simp_all add: Disjunctive_Sup)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> DataRefinement ({. X u i .} \\<circ> D (i, j)) (R i)\n                          (R j) (D' (i, j))\n 2. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x. y = (R .. X x)} =\n                         (SUP x. (R .. X x))\n 3. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x.\n    y = (R .. X x)} \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (rule_tac S = \"{.Sup (range X) i.} \\<circ> D (i, j)\" in DataRefinement_mono)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> {. X u i .} \\<circ> D (i, j) \\<sqsubseteq>\n                         {. (\\<Squnion>range X) i .} \\<circ> D (i, j)\n 2. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 3. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> DataRefinement\n                          ({. (\\<Squnion>range X) i .} \\<circ> D (i, j))\n                          (R i) (R j) (D' (i, j))\n 4. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x. y = (R .. X x)} =\n                         (SUP x. (R .. X x))\n 5. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x.\n    y = (R .. X x)} \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (rule comp_left_mono)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> {. X u i .} \\<sqsubseteq>\n                         {. (\\<Squnion>range X) i .}\n 2. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 3. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> DataRefinement\n                          ({. (\\<Squnion>range X) i .} \\<circ> D (i, j))\n                          (R i) (R j) (D' (i, j))\n 4. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x. y = (R .. X x)} =\n                         (SUP x. (R .. X x))\n 5. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x.\n    y = (R .. X x)} \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (rule assert_pred_mono)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> X u i \\<sqsubseteq> (\\<Squnion>range X) i\n 2. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 3. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> DataRefinement\n                          ({. (\\<Squnion>range X) i .} \\<circ> D (i, j))\n                          (R i) (R j) (D' (i, j))\n 4. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x. y = (R .. X x)} =\n                         (SUP x. (R .. X x))\n 5. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x.\n    y = (R .. X x)} \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (simp add: Sup_fun_def comp_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X u i.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement\n            (\\<lambda>x. {. SUP x\\<in>range X. x i .} (D (i, j) x)) (R i)\n            (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q =\n        (\\<lambda>x. SUP xa\\<in>range X. xa x) \\<sqinter> - grd (step D);\n        P = (\\<lambda>x. SUP xa\\<in>range X. xa x)\\<rbrakk>\n       \\<Longrightarrow> X u i \\<sqsubseteq> (SUP x\\<in>range X. x i)\n 2. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 3. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> DataRefinement\n                          ({. (\\<Squnion>range X) i .} \\<circ> D (i, j))\n                          (R i) (R j) (D' (i, j))\n 4. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x. y = (R .. X x)} =\n                         (SUP x. (R .. X x))\n 5. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x.\n    y = (R .. X x)} \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (rule SUP_upper)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>X u i.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement\n            (\\<lambda>x. {. SUP x\\<in>range X. x i .} (D (i, j) x)) (R i)\n            (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q =\n        (\\<lambda>x. SUP xa\\<in>range X. xa x) \\<sqinter> - grd (step D);\n        P = (\\<lambda>x. SUP xa\\<in>range X. xa x)\\<rbrakk>\n       \\<Longrightarrow> X u \\<in> range X\n 2. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> mono (R i)\n 3. \\<And>X u i j.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> DataRefinement\n                          ({. (\\<Squnion>range X) i .} \\<circ> D (i, j))\n                          (R i) (R j) (D' (i, j))\n 4. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x. y = (R .. X x)} =\n                         (SUP x. (R .. X x))\n 5. \\<And>X.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x\\<in>range X. x i .} \\<circ> D (i, j))\n            (R i) (R j) (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        Q = \\<Squnion>range X \\<sqinter> - grd (step D);\n        P = \\<Squnion>range X\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>{y. \\<exists>x.\n    y = (R .. X x)} \\<sqinter>\n                         - grd (step D') =\n                         (SUP x. (R .. X x)) \\<sqinter> - grd (step D')", "apply (auto simp add: apply_fun_def apply_fun_range image_image fun_eq_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X x.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x. X x i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        \\<forall>x. Q x = (SUP xa. X xa x) \\<sqinter> - grd (step D) x;\n        \\<forall>x. P x = (SUP xa. X xa x)\\<rbrakk>\n       \\<Longrightarrow> (SUP f\\<in>{y. \\<exists>x.\n     \\<forall>xa. y xa = R xa (X x xa)}.\n                             f x) =\n                         (SUP xa. R x (X xa x))\n 2. \\<And>X x.\n       \\<lbrakk>dmono D; Disjunctive_fun R;\n        \\<forall>i j.\n           DataRefinement ({. SUP x. X x i .} \\<circ> D (i, j)) (R i) (R j)\n            (D' (i, j));\n        \\<forall>u i j.\n           \\<Turnstile> X u i{| D (i, j) |}SUP_L_P X (pair u i) j;\n        \\<forall>x. Q x = (SUP xa. X xa x) \\<sqinter> - grd (step D) x;\n        \\<forall>x. P x = (SUP xa. X xa x)\\<rbrakk>\n       \\<Longrightarrow> (SUP f\\<in>{y. \\<exists>x.\n     \\<forall>xa. y xa = R xa (X x xa)}.\n                             f x) \\<sqinter>\n                         - grd (step D') x =\n                         (SUP xa. R x (X xa x)) \\<sqinter> - grd (step D') x", "apply (auto intro!: arg_cong [where f = Sup] arg_cong2 [where f = inf])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"(R'::'a::complete_lattice \\<Rightarrow> 'b::complete_lattice) \\<in> Apply.Disjunctive \\<Longrightarrow>\n   DataRefinement S R R' S' \\<Longrightarrow> R (- grd S) \\<le> - grd S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R' \\<in> Apply.Disjunctive; DataRefinement S R R' S'\\<rbrakk>\n    \\<Longrightarrow> R (- grd S) \\<sqsubseteq> - grd S'", "apply (simp add: DataRefinement_def grd_def le_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R' \\<in> Apply.Disjunctive;\n     \\<forall>x. R (S x) \\<sqsubseteq> S' (R' x)\\<rbrakk>\n    \\<Longrightarrow> R (S \\<bottom>) \\<sqsubseteq> S' \\<bottom>", "apply (drule_tac x = \"\\<bottom>\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R' \\<in> Apply.Disjunctive;\n     R (S \\<bottom>) \\<sqsubseteq> S' (R' \\<bottom>)\\<rbrakk>\n    \\<Longrightarrow> R (S \\<bottom>) \\<sqsubseteq> S' \\<bottom>", "by simp"], ["", "end"]]}