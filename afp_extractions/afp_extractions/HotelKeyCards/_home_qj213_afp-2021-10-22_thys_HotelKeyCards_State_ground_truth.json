{"file_name": "/home/qj213/afp-2021-10-22/thys/HotelKeyCards/State.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HotelKeyCards", "problem_names": ["lemma currk_issued[simp]: \"s : reach \\<Longrightarrow> currk s r : issued s\"", "lemma key1_issued[simp]: \"s : reach \\<Longrightarrow> (k,k') : cards s g \\<Longrightarrow> k : issued s\"", "lemma key2_issued[simp]: \"s : reach \\<Longrightarrow> (k,k') : cards s g \\<Longrightarrow> k' : issued s\"", "lemma roomk_issued[simp]: \"s : reach \\<Longrightarrow> roomk s k : issued s\"", "lemma currk_inj[simp]:\n \"s : reach \\<Longrightarrow> \\<forall>r r'. (currk s r = currk s r') = (r = r')\"", "lemma key1_not_currk[simp]:\n \"s : reach \\<Longrightarrow> (currk s r,k') \\<notin> cards s g\"", "lemma guest_key2_disj[simp]: \n \"\\<lbrakk> s : reach; (k\\<^sub>1,k) \\<in> cards s g\\<^sub>1; (k\\<^sub>2,k) \\<in> cards s g\\<^sub>2 \\<rbrakk> \\<Longrightarrow> g\\<^sub>1=g\\<^sub>2\"", "lemma safe_roomk_currk[simp]:\n \"s : reach \\<Longrightarrow> safe s r \\<Longrightarrow> roomk s r = currk s r\"", "lemma safe_only_owner_enter_normal_aux[simp]:\n \"\\<lbrakk> s : reach; safe s r; (k',roomk s r) \\<in> cards s g \\<rbrakk> \\<Longrightarrow> owns s r = Some g\"", "lemma safe_only_owner_enter_normal:\nassumes \"s : reach\"\nshows \"\\<lbrakk> safe s r; (k',roomk s r) \\<in> cards s g \\<rbrakk> \\<Longrightarrow> owns s r = Some g\"", "theorem \"s : reach \\<Longrightarrow> safe s r \\<Longrightarrow> g : isin s r \\<Longrightarrow> owns s r = Some g\"", "theorem safe: assumes \"s : reach\"\nshows \"safe s r \\<Longrightarrow> g : isin s r \\<Longrightarrow> owns s r = Some g\""], "translations": [["", "lemma currk_issued[simp]: \"s : reach \\<Longrightarrow> currk s r : issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> reach \\<Longrightarrow> currk s r \\<in> issued s", "by (induct set: reach) auto"], ["", "lemma key1_issued[simp]: \"s : reach \\<Longrightarrow> (k,k') : cards s g \\<Longrightarrow> k : issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> reach; (k, k') \\<in> cards s g\\<rbrakk>\n    \\<Longrightarrow> k \\<in> issued s", "by (induct set: reach) auto"], ["", "lemma key2_issued[simp]: \"s : reach \\<Longrightarrow> (k,k') : cards s g \\<Longrightarrow> k' : issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> reach; (k, k') \\<in> cards s g\\<rbrakk>\n    \\<Longrightarrow> k' \\<in> issued s", "by (induct set: reach) auto"], ["", "lemma roomk_issued[simp]: \"s : reach \\<Longrightarrow> roomk s k : issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> reach \\<Longrightarrow> roomk s k \\<in> issued s", "by (induct set: reach) auto"], ["", "lemma currk_inj[simp]:\n \"s : reach \\<Longrightarrow> \\<forall>r r'. (currk s r = currk s r') = (r = r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> reach \\<Longrightarrow>\n    \\<forall>r r'. (currk s r = currk s r') = (r = r')", "by (induct set: reach) (auto simp:inj_on_def)"], ["", "lemma key1_not_currk[simp]:\n \"s : reach \\<Longrightarrow> (currk s r,k') \\<notin> cards s g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> reach \\<Longrightarrow> (currk s r, k') \\<notin> cards s g", "by (induct set: reach) auto"], ["", "lemma guest_key2_disj[simp]: \n \"\\<lbrakk> s : reach; (k\\<^sub>1,k) \\<in> cards s g\\<^sub>1; (k\\<^sub>2,k) \\<in> cards s g\\<^sub>2 \\<rbrakk> \\<Longrightarrow> g\\<^sub>1=g\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> reach; (k\\<^sub>1, k) \\<in> cards s g\\<^sub>1;\n     (k\\<^sub>2, k) \\<in> cards s g\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> g\\<^sub>1 = g\\<^sub>2", "by (induct set: reach) auto"], ["", "lemma safe_roomk_currk[simp]:\n \"s : reach \\<Longrightarrow> safe s r \\<Longrightarrow> roomk s r = currk s r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> reach; safe s r\\<rbrakk>\n    \\<Longrightarrow> roomk s r = currk s r", "by (induct set: reach) auto"], ["", "lemma safe_only_owner_enter_normal_aux[simp]:\n \"\\<lbrakk> s : reach; safe s r; (k',roomk s r) \\<in> cards s g \\<rbrakk> \\<Longrightarrow> owns s r = Some g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> reach; safe s r;\n     (k', roomk s r) \\<in> cards s g\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "by (induct set: reach) (auto)"], ["", "lemma safe_only_owner_enter_normal:\nassumes \"s : reach\"\nshows \"\\<lbrakk> safe s r; (k',roomk s r) \\<in> cards s g \\<rbrakk> \\<Longrightarrow> owns s r = Some g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reach\n\ngoal (1 subgoal):\n 1. \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "proof induct"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        (k',\n         roomk\n          \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n             cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n             safe = \\<lambda>r. True\\<rparr>\n          r)\n        \\<in> cards\n               \\<lparr>owns = Map.empty, currk = initk,\n                  issued = range initk, cards = \\<lambda>g. {},\n                  roomk = initk, isin = \\<lambda>r. {},\n                  safe = \\<lambda>r. True\\<rparr>\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>currk := (currk s)(ra := k),\n               issued := issued s \\<union> {k},\n               cards := (cards s)\n                 (ga := cards s ga \\<union> {(currk s ra, k)}),\n               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n               safe := (safe s)(ra := False)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>currk := (currk s)(ra := k),\n                    issued := issued s \\<union> {k},\n                    cards := (cards s)\n                      (ga := cards s ga \\<union> {(currk s ra, k)}),\n                    owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                    safe := (safe s)(ra := False)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k'a ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k'a) \\<in> cards s ga; roomk s ra \\<in> {k, k'a};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'a),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n               roomk := (roomk s)(ra := k'a),\n               safe := (safe s)\n                 (ra :=\n                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                    isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                    safe s ra)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                    roomk := (roomk s)(ra := k'a),\n                    safe := (safe s)\n                      (ra :=\n                         owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                         isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                         safe s ra)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'a),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k'a = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        (k',\n         roomk (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "case (enter_room s k k1 g1 r1)"], ["proof (state)\nthis:\n  s \\<in> reach\n  \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  (k, k1) \\<in> cards s g1\n  roomk s r1 \\<in> {k, k1}\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  (k',\n   roomk\n    (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n         roomk := (roomk s)(r1 := k1),\n         safe := (safe s)\n           (r1 :=\n              owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n              isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n              safe s r1)\\<rparr>)\n    r)\n  \\<in> cards\n         (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n              roomk := (roomk s)(r1 := k1),\n              safe := (safe s)\n                (r1 :=\n                   owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                   isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n                   safe s r1)\\<rparr>)\n         g\n\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        (k',\n         roomk\n          \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n             cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n             safe = \\<lambda>r. True\\<rparr>\n          r)\n        \\<in> cards\n               \\<lparr>owns = Map.empty, currk = initk,\n                  issued = range initk, cards = \\<lambda>g. {},\n                  roomk = initk, isin = \\<lambda>r. {},\n                  safe = \\<lambda>r. True\\<rparr>\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>currk := (currk s)(ra := k),\n               issued := issued s \\<union> {k},\n               cards := (cards s)\n                 (ga := cards s ga \\<union> {(currk s ra, k)}),\n               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n               safe := (safe s)(ra := False)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>currk := (currk s)(ra := k),\n                    issued := issued s \\<union> {k},\n                    cards := (cards s)\n                      (ga := cards s ga \\<union> {(currk s ra, k)}),\n                    owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                    safe := (safe s)(ra := False)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k'a ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k'a) \\<in> cards s ga; roomk s ra \\<in> {k, k'a};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'a),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n               roomk := (roomk s)(ra := k'a),\n               safe := (safe s)\n                 (ra :=\n                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                    isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                    safe s ra)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                    roomk := (roomk s)(ra := k'a),\n                    safe := (safe s)\n                      (ra :=\n                         owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                         isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                         safe s ra)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'a),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k'a = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        (k',\n         roomk (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "let ?s' = \"s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n               roomk := (roomk s)(r1 := k1),\n               safe := (safe s)\n                 (r1 :=\n                    owns s r1 = Some g1 \\<and> isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n                    safe s r1)\\<rparr>\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        (k',\n         roomk\n          \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n             cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n             safe = \\<lambda>r. True\\<rparr>\n          r)\n        \\<in> cards\n               \\<lparr>owns = Map.empty, currk = initk,\n                  issued = range initk, cards = \\<lambda>g. {},\n                  roomk = initk, isin = \\<lambda>r. {},\n                  safe = \\<lambda>r. True\\<rparr>\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>currk := (currk s)(ra := k),\n               issued := issued s \\<union> {k},\n               cards := (cards s)\n                 (ga := cards s ga \\<union> {(currk s ra, k)}),\n               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n               safe := (safe s)(ra := False)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>currk := (currk s)(ra := k),\n                    issued := issued s \\<union> {k},\n                    cards := (cards s)\n                      (ga := cards s ga \\<union> {(currk s ra, k)}),\n                    owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                    safe := (safe s)(ra := False)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k'a ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k'a) \\<in> cards s ga; roomk s ra \\<in> {k, k'a};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'a),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n               roomk := (roomk s)(ra := k'a),\n               safe := (safe s)\n                 (ra :=\n                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                    isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                    safe s ra)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                    roomk := (roomk s)(ra := k'a),\n                    safe := (safe s)\n                      (ra :=\n                         owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                         isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                         safe s ra)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'a),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k'a = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        (k',\n         roomk (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "note s = \\<open>s \\<in> reach\\<close>\n  and IH = \\<open>\\<lbrakk> safe s r; (k', roomk s r) \\<in> cards s g \\<rbrakk> \\<Longrightarrow> owns s r = Some g\\<close>\n  and card_g1 = \\<open>(k,k1) \\<in> cards s g1\\<close> and safe = \\<open>safe ?s' r\\<close>\n  and card_g = \\<open>(k',roomk ?s' r) \\<in> cards ?s' g\\<close>"], ["proof (state)\nthis:\n  s \\<in> reach\n  \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  (k, k1) \\<in> cards s g1\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  (k',\n   roomk\n    (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n         roomk := (roomk s)(r1 := k1),\n         safe := (safe s)\n           (r1 :=\n              owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n              isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n              safe s r1)\\<rparr>)\n    r)\n  \\<in> cards\n         (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n              roomk := (roomk s)(r1 := k1),\n              safe := (safe s)\n                (r1 :=\n                   owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                   isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n                   safe s r1)\\<rparr>)\n         g\n\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        (k',\n         roomk\n          \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n             cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n             safe = \\<lambda>r. True\\<rparr>\n          r)\n        \\<in> cards\n               \\<lparr>owns = Map.empty, currk = initk,\n                  issued = range initk, cards = \\<lambda>g. {},\n                  roomk = initk, isin = \\<lambda>r. {},\n                  safe = \\<lambda>r. True\\<rparr>\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>currk := (currk s)(ra := k),\n               issued := issued s \\<union> {k},\n               cards := (cards s)\n                 (ga := cards s ga \\<union> {(currk s ra, k)}),\n               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n               safe := (safe s)(ra := False)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>currk := (currk s)(ra := k),\n                    issued := issued s \\<union> {k},\n                    cards := (cards s)\n                      (ga := cards s ga \\<union> {(currk s ra, k)}),\n                    owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                    safe := (safe s)(ra := False)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k'a ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k'a) \\<in> cards s ga; roomk s ra \\<in> {k, k'a};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'a),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n               roomk := (roomk s)(ra := k'a),\n               safe := (safe s)\n                 (ra :=\n                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                    isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                    safe s ra)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                    roomk := (roomk s)(ra := k'a),\n                    safe := (safe s)\n                      (ra :=\n                         owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                         isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                         safe s ra)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'a),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k'a = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        (k',\n         roomk (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "have \"roomk s r1 = k \\<or> roomk s r1 = k1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. roomk s r1 = k \\<or> roomk s r1 = k1", "using \\<open>roomk s r1 \\<in> {k,k1}\\<close>"], ["proof (prove)\nusing this:\n  roomk s r1 \\<in> {k, k1}\n\ngoal (1 subgoal):\n 1. roomk s r1 = k \\<or> roomk s r1 = k1", "by simp"], ["proof (state)\nthis:\n  roomk s r1 = k \\<or> roomk s r1 = k1\n\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        (k',\n         roomk\n          \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n             cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n             safe = \\<lambda>r. True\\<rparr>\n          r)\n        \\<in> cards\n               \\<lparr>owns = Map.empty, currk = initk,\n                  issued = range initk, cards = \\<lambda>g. {},\n                  roomk = initk, isin = \\<lambda>r. {},\n                  safe = \\<lambda>r. True\\<rparr>\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>currk := (currk s)(ra := k),\n               issued := issued s \\<union> {k},\n               cards := (cards s)\n                 (ga := cards s ga \\<union> {(currk s ra, k)}),\n               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n               safe := (safe s)(ra := False)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>currk := (currk s)(ra := k),\n                    issued := issued s \\<union> {k},\n                    cards := (cards s)\n                      (ga := cards s ga \\<union> {(currk s ra, k)}),\n                    owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                    safe := (safe s)(ra := False)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k'a ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k'a) \\<in> cards s ga; roomk s ra \\<in> {k, k'a};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'a),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n               roomk := (roomk s)(ra := k'a),\n               safe := (safe s)\n                 (ra :=\n                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                    isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                    safe s ra)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                    roomk := (roomk s)(ra := k'a),\n                    safe := (safe s)\n                      (ra :=\n                         owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                         isin s ra = {} \\<and> k'a = currk s ra \\<or>\n                         safe s ra)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'a),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k'a = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        (k',\n         roomk (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "thus ?case"], ["proof (prove)\nusing this:\n  roomk s r1 = k \\<or> roomk s r1 = k1\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. roomk s r1 = k \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. roomk s r1 = k1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume [symmetric,simp]: \"roomk s r1 = k\""], ["proof (state)\nthis:\n  k = roomk s r1\n\ngoal (2 subgoals):\n 1. roomk s r1 = k \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. roomk s r1 = k1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "proof (cases \"r1 = r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. r1 \\<noteq> r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume \"r1 \\<noteq> r\""], ["proof (state)\nthis:\n  r1 \\<noteq> r\n\ngoal (2 subgoals):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. r1 \\<noteq> r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "with IH safe card_g"], ["proof (chain)\npicking this:\n  \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  (k',\n   roomk\n    (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n         roomk := (roomk s)(r1 := k1),\n         safe := (safe s)\n           (r1 :=\n              owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n              isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n              safe s r1)\\<rparr>)\n    r)\n  \\<in> cards\n         (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n              roomk := (roomk s)(r1 := k1),\n              safe := (safe s)\n                (r1 :=\n                   owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                   isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n                   safe s r1)\\<rparr>)\n         g\n  r1 \\<noteq> r", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  (k',\n   roomk\n    (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n         roomk := (roomk s)(r1 := k1),\n         safe := (safe s)\n           (r1 :=\n              owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n              isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n              safe s r1)\\<rparr>)\n    r)\n  \\<in> cards\n         (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n              roomk := (roomk s)(r1 := k1),\n              safe := (safe s)\n                (r1 :=\n                   owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                   isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n                   safe s r1)\\<rparr>)\n         g\n  r1 \\<noteq> r\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (1 subgoal):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume [simp]: \"r1 = r\""], ["proof (state)\nthis:\n  r1 = r\n\ngoal (1 subgoal):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "hence safe': \"owns s r = Some g1 \\<or> safe s r\""], ["proof (prove)\nusing this:\n  r1 = r\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<or> safe s r", "using safe"], ["proof (prove)\nusing this:\n  r1 = r\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<or> safe s r", "by auto"], ["proof (state)\nthis:\n  owns s r = \\<lfloor>g1\\<rfloor> \\<or> safe s r\n\ngoal (1 subgoal):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  owns s r = \\<lfloor>g1\\<rfloor> \\<or> safe s r\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume \"safe s r\""], ["proof (state)\nthis:\n  safe s r\n\ngoal (2 subgoals):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "with s card_g1"], ["proof (chain)\npicking this:\n  s \\<in> reach\n  (k, k1) \\<in> cards s g1\n  safe s r", "have False"], ["proof (prove)\nusing this:\n  s \\<in> reach\n  (k, k1) \\<in> cards s g1\n  safe s r\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", ".."], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume [simp]: \"owns s r = Some g1\""], ["proof (state)\nthis:\n  owns s r = \\<lfloor>g1\\<rfloor>\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "thus \"owns ?s' r = Some g\""], ["proof (prove)\nusing this:\n  owns s r = \\<lfloor>g1\\<rfloor>\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "using s card_g card_g1"], ["proof (prove)\nusing this:\n  owns s r = \\<lfloor>g1\\<rfloor>\n  s \\<in> reach\n  (k',\n   roomk\n    (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n         roomk := (roomk s)(r1 := k1),\n         safe := (safe s)\n           (r1 :=\n              owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n              isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n              safe s r1)\\<rparr>)\n    r)\n  \\<in> cards\n         (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n              roomk := (roomk s)(r1 := k1),\n              safe := (safe s)\n                (r1 :=\n                   owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                   isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n                   safe s r1)\\<rparr>)\n         g\n  (k, k1) \\<in> cards s g1\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (1 subgoal):\n 1. roomk s r1 = k1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. roomk s r1 = k1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume \"roomk s r1 = k1\""], ["proof (state)\nthis:\n  roomk s r1 = k1\n\ngoal (1 subgoal):\n 1. roomk s r1 = k1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "with enter_room"], ["proof (chain)\npicking this:\n  s \\<in> reach\n  \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  (k, k1) \\<in> cards s g1\n  roomk s r1 \\<in> {k, k1}\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  (k',\n   roomk\n    (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n         roomk := (roomk s)(r1 := k1),\n         safe := (safe s)\n           (r1 :=\n              owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n              isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n              safe s r1)\\<rparr>)\n    r)\n  \\<in> cards\n         (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n              roomk := (roomk s)(r1 := k1),\n              safe := (safe s)\n                (r1 :=\n                   owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                   isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n                   safe s r1)\\<rparr>)\n         g\n  roomk s r1 = k1", "show ?case"], ["proof (prove)\nusing this:\n  s \\<in> reach\n  \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  (k, k1) \\<in> cards s g1\n  roomk s r1 \\<in> {k, k1}\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  (k',\n   roomk\n    (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n         roomk := (roomk s)(r1 := k1),\n         safe := (safe s)\n           (r1 :=\n              owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n              isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n              safe s r1)\\<rparr>)\n    r)\n  \\<in> cards\n         (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n              roomk := (roomk s)(r1 := k1),\n              safe := (safe s)\n                (r1 :=\n                   owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                   isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n                   safe s r1)\\<rparr>)\n         g\n  roomk s r1 = k1\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k1),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k1),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k1 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (3 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        (k',\n         roomk\n          \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n             cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n             safe = \\<lambda>r. True\\<rparr>\n          r)\n        \\<in> cards\n               \\<lparr>owns = Map.empty, currk = initk,\n                  issued = range initk, cards = \\<lambda>g. {},\n                  roomk = initk, isin = \\<lambda>r. {},\n                  safe = \\<lambda>r. True\\<rparr>\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        (k',\n         roomk\n          (s\\<lparr>currk := (currk s)(ra := k),\n               issued := issued s \\<union> {k},\n               cards := (cards s)\n                 (ga := cards s ga \\<union> {(currk s ra, k)}),\n               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n               safe := (safe s)(ra := False)\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>currk := (currk s)(ra := k),\n                    issued := issued s \\<union> {k},\n                    cards := (cards s)\n                      (ga := cards s ga \\<union> {(currk s ra, k)}),\n                    owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                    safe := (safe s)(ra := False)\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; (k', roomk s r) \\<in> cards s g\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        (k',\n         roomk (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n          r)\n        \\<in> cards\n               (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n               g\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "qed auto"], ["", "theorem \"s : reach \\<Longrightarrow> safe s r \\<Longrightarrow> g : isin s r \\<Longrightarrow> owns s r = Some g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> reach; safe s r; g \\<in> isin s r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "by (induct set: reach) auto"], ["", "theorem safe: assumes \"s : reach\"\nshows \"safe s r \\<Longrightarrow> g : isin s r \\<Longrightarrow> owns s r = Some g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reach\n\ngoal (1 subgoal):\n 1. \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "proof induct"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        g \\<in> isin\n                 \\<lparr>owns = Map.empty, currk = initk,\n                    issued = range initk, cards = \\<lambda>g. {},\n                    roomk = initk, isin = \\<lambda>r. {},\n                    safe = \\<lambda>r. True\\<rparr>\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>currk := (currk s)(ra := k),\n                      issued := issued s \\<union> {k},\n                      cards := (cards s)\n                        (ga := cards s ga \\<union> {(currk s ra, k)}),\n                      owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                      safe := (safe s)(ra := False)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k' ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k') \\<in> cards s ga; roomk s ra \\<in> {k, k'};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k' = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                      roomk := (roomk s)(ra := k'),\n                      safe := (safe s)\n                        (ra :=\n                           owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                           isin s ra = {} \\<and> k' = currk s ra \\<or>\n                           safe s ra)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k' = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "case (enter_room s k1 k2 g1 r1)"], ["proof (state)\nthis:\n  s \\<in> reach\n  \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  (k1, k2) \\<in> cards s g1\n  roomk s r1 \\<in> {k1, k2}\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  g \\<in> isin\n           (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n                roomk := (roomk s)(r1 := k2),\n                safe := (safe s)\n                  (r1 :=\n                     owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                     isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n                     safe s r1)\\<rparr>)\n           r\n\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        g \\<in> isin\n                 \\<lparr>owns = Map.empty, currk = initk,\n                    issued = range initk, cards = \\<lambda>g. {},\n                    roomk = initk, isin = \\<lambda>r. {},\n                    safe = \\<lambda>r. True\\<rparr>\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>currk := (currk s)(ra := k),\n                      issued := issued s \\<union> {k},\n                      cards := (cards s)\n                        (ga := cards s ga \\<union> {(currk s ra, k)}),\n                      owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                      safe := (safe s)(ra := False)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k' ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k') \\<in> cards s ga; roomk s ra \\<in> {k, k'};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k' = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                      roomk := (roomk s)(ra := k'),\n                      safe := (safe s)\n                        (ra :=\n                           owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                           isin s ra = {} \\<and> k' = currk s ra \\<or>\n                           safe s ra)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k' = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "let ?s' = \"s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n               roomk := (roomk s)(r1 := k2),\n               safe := (safe s)\n                 (r1 :=\n                    owns s r1 = Some g1 \\<and> isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n                    safe s r1)\\<rparr>\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        g \\<in> isin\n                 \\<lparr>owns = Map.empty, currk = initk,\n                    issued = range initk, cards = \\<lambda>g. {},\n                    roomk = initk, isin = \\<lambda>r. {},\n                    safe = \\<lambda>r. True\\<rparr>\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>currk := (currk s)(ra := k),\n                      issued := issued s \\<union> {k},\n                      cards := (cards s)\n                        (ga := cards s ga \\<union> {(currk s ra, k)}),\n                      owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                      safe := (safe s)(ra := False)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k' ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k') \\<in> cards s ga; roomk s ra \\<in> {k, k'};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k' = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                      roomk := (roomk s)(ra := k'),\n                      safe := (safe s)\n                        (ra :=\n                           owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                           isin s ra = {} \\<and> k' = currk s ra \\<or>\n                           safe s ra)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k' = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "note s = \\<open>s \\<in> reach\\<close>\n  and IH = \\<open>\\<lbrakk> safe s r; g \\<in> isin s r \\<rbrakk> \\<Longrightarrow> owns s r = Some g\\<close>\n  and card_g1 = \\<open>(k1,k2) \\<in> cards s g1\\<close> and safe = \\<open>safe ?s' r\\<close>\n  and isin = \\<open>g \\<in> isin ?s' r\\<close>"], ["proof (state)\nthis:\n  s \\<in> reach\n  \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  (k1, k2) \\<in> cards s g1\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  g \\<in> isin\n           (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n                roomk := (roomk s)(r1 := k2),\n                safe := (safe s)\n                  (r1 :=\n                     owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                     isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n                     safe s r1)\\<rparr>)\n           r\n\ngoal (4 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        g \\<in> isin\n                 \\<lparr>owns = Map.empty, currk = initk,\n                    issued = range initk, cards = \\<lambda>g. {},\n                    roomk = initk, isin = \\<lambda>r. {},\n                    safe = \\<lambda>r. True\\<rparr>\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>currk := (currk s)(ra := k),\n                      issued := issued s \\<union> {k},\n                      cards := (cards s)\n                        (ga := cards s ga \\<union> {(currk s ra, k)}),\n                      owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                      safe := (safe s)(ra := False)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s k k' ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        (k, k') \\<in> cards s ga; roomk s ra \\<in> {k, k'};\n        safe\n         (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n              roomk := (roomk s)(ra := k'),\n              safe := (safe s)\n                (ra :=\n                   owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                   isin s ra = {} \\<and> k' = currk s ra \\<or>\n                   safe s ra)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra \\<union> {ga}),\n                      roomk := (roomk s)(ra := k'),\n                      safe := (safe s)\n                        (ra :=\n                           owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                           isin s ra = {} \\<and> k' = currk s ra \\<or>\n                           safe s ra)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra \\<union> {ga}),\n                               roomk := (roomk s)(ra := k'),\n                               safe := (safe s)\n                                 (ra :=\n                                    owns s ra = \\<lfloor>ga\\<rfloor> \\<and>\n                                    isin s ra = {} \\<and>\n                                    k' = currk s ra \\<or>\n                                    safe s ra)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 4. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "proof (cases \"r1 = r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. r1 \\<noteq> r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume \"r1 \\<noteq> r\""], ["proof (state)\nthis:\n  r1 \\<noteq> r\n\ngoal (2 subgoals):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. r1 \\<noteq> r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "with IH isin safe"], ["proof (chain)\npicking this:\n  \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  g \\<in> isin\n           (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n                roomk := (roomk s)(r1 := k2),\n                safe := (safe s)\n                  (r1 :=\n                     owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                     isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n                     safe s r1)\\<rparr>)\n           r\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  r1 \\<noteq> r", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n  g \\<in> isin\n           (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n                roomk := (roomk s)(r1 := k2),\n                safe := (safe s)\n                  (r1 :=\n                     owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                     isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n                     safe s r1)\\<rparr>)\n           r\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  r1 \\<noteq> r\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (1 subgoal):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume [simp]: \"r1 = r\""], ["proof (state)\nthis:\n  r1 = r\n\ngoal (1 subgoal):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "have \"g \\<in> isin s r \\<or> g = g1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> isin s r \\<or> g = g1", "using isin"], ["proof (prove)\nusing this:\n  g \\<in> isin\n           (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n                roomk := (roomk s)(r1 := k2),\n                safe := (safe s)\n                  (r1 :=\n                     owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n                     isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n                     safe s r1)\\<rparr>)\n           r\n\ngoal (1 subgoal):\n 1. g \\<in> isin s r \\<or> g = g1", "by auto"], ["proof (state)\nthis:\n  g \\<in> isin s r \\<or> g = g1\n\ngoal (1 subgoal):\n 1. r1 = r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> isin s r \\<or> g = g1\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. g \\<in> isin s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. g = g1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume g: \"g \\<in> isin s r\""], ["proof (state)\nthis:\n  g \\<in> isin s r\n\ngoal (2 subgoals):\n 1. g \\<in> isin s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. g = g1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "then"], ["proof (chain)\npicking this:\n  g \\<in> isin s r", "have \"safe s r\""], ["proof (prove)\nusing this:\n  g \\<in> isin s r\n\ngoal (1 subgoal):\n 1. safe s r", "using safe"], ["proof (prove)\nusing this:\n  g \\<in> isin s r\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n\ngoal (1 subgoal):\n 1. safe s r", "by auto"], ["proof (state)\nthis:\n  safe s r\n\ngoal (2 subgoals):\n 1. g \\<in> isin s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. g = g1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "with g"], ["proof (chain)\npicking this:\n  g \\<in> isin s r\n  safe s r", "show ?thesis"], ["proof (prove)\nusing this:\n  g \\<in> isin s r\n  safe s r\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "using IH"], ["proof (prove)\nusing this:\n  g \\<in> isin s r\n  safe s r\n  \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n  \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (1 subgoal):\n 1. g = g1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g = g1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume [simp]: \"g = g1\""], ["proof (state)\nthis:\n  g = g1\n\ngoal (1 subgoal):\n 1. g = g1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "have \"k2 = roomk s r1 \\<or> k1 = roomk s r1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k2 = roomk s r1 \\<or> k1 = roomk s r1", "using \\<open>roomk s r1 \\<in> {k1,k2}\\<close>"], ["proof (prove)\nusing this:\n  roomk s r1 \\<in> {k1, k2}\n\ngoal (1 subgoal):\n 1. k2 = roomk s r1 \\<or> k1 = roomk s r1", "by auto"], ["proof (state)\nthis:\n  k2 = roomk s r1 \\<or> k1 = roomk s r1\n\ngoal (1 subgoal):\n 1. g = g1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  k2 = roomk s r1 \\<or> k1 = roomk s r1\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. k2 = roomk s r1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. k1 = roomk s r1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume \"k2 = roomk s r1\""], ["proof (state)\nthis:\n  k2 = roomk s r1\n\ngoal (2 subgoals):\n 1. k2 = roomk s r1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. k1 = roomk s r1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "with card_g1 s safe"], ["proof (chain)\npicking this:\n  (k1, k2) \\<in> cards s g1\n  s \\<in> reach\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  k2 = roomk s r1", "show ?thesis"], ["proof (prove)\nusing this:\n  (k1, k2) \\<in> cards s g1\n  s \\<in> reach\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n  k2 = roomk s r1\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (1 subgoal):\n 1. k1 = roomk s r1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k1 = roomk s r1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume [simp]: \"k1 = roomk s r1\""], ["proof (state)\nthis:\n  k1 = roomk s r1\n\ngoal (1 subgoal):\n 1. k1 = roomk s r1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "have \"owns s r = Some g1 \\<or> safe s r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<or> safe s r", "using safe"], ["proof (prove)\nusing this:\n  safe\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<or> safe s r", "by auto"], ["proof (state)\nthis:\n  owns s r = \\<lfloor>g1\\<rfloor> \\<or> safe s r\n\ngoal (1 subgoal):\n 1. k1 = roomk s r1 \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  owns s r = \\<lfloor>g1\\<rfloor> \\<or> safe s r\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume \"owns s r = Some g1\""], ["proof (state)\nthis:\n  owns s r = \\<lfloor>g1\\<rfloor>\n\ngoal (2 subgoals):\n 1. owns s r = \\<lfloor>g1\\<rfloor> \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>\n 2. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  owns s r = \\<lfloor>g1\\<rfloor>\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (1 subgoal):\n 1. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "assume \"safe s r\""], ["proof (state)\nthis:\n  safe s r\n\ngoal (1 subgoal):\n 1. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "hence False"], ["proof (prove)\nusing this:\n  safe s r\n\ngoal (1 subgoal):\n 1. False", "using s card_g1"], ["proof (prove)\nusing this:\n  safe s r\n  s \\<in> reach\n  (k1, k2) \\<in> cards s g1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. safe s r \\<Longrightarrow>\n    owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. owns\n     (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n          roomk := (roomk s)(r1 := k2),\n          safe := (safe s)\n            (r1 :=\n               owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n               isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n               safe s r1)\\<rparr>)\n     r =\n    \\<lfloor>g\\<rfloor>", ".."], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  owns\n   (s\\<lparr>isin := (isin s)(r1 := isin s r1 \\<union> {g1}),\n        roomk := (roomk s)(r1 := k2),\n        safe := (safe s)\n          (r1 :=\n             owns s r1 = \\<lfloor>g1\\<rfloor> \\<and>\n             isin s r1 = {} \\<and> k2 = currk s r1 \\<or>\n             safe s r1)\\<rparr>)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (3 subgoals):\n 1. \\<And>initk.\n       \\<lbrakk>inj initk;\n        safe\n         \\<lparr>owns = Map.empty, currk = initk, issued = range initk,\n            cards = \\<lambda>g. {}, roomk = initk, isin = \\<lambda>r. {},\n            safe = \\<lambda>r. True\\<rparr>\n         r;\n        g \\<in> isin\n                 \\<lparr>owns = Map.empty, currk = initk,\n                    issued = range initk, cards = \\<lambda>g. {},\n                    roomk = initk, isin = \\<lambda>r. {},\n                    safe = \\<lambda>r. True\\<rparr>\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          \\<lparr>owns = Map.empty, currk = initk,\n                             issued = range initk, cards = \\<lambda>g. {},\n                             roomk = initk, isin = \\<lambda>r. {},\n                             safe = \\<lambda>r. True\\<rparr>\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 2. \\<And>s k ra ga.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        k \\<notin> issued s;\n        safe\n         (s\\<lparr>currk := (currk s)(ra := k),\n              issued := issued s \\<union> {k},\n              cards := (cards s)\n                (ga := cards s ga \\<union> {(currk s ra, k)}),\n              owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n              safe := (safe s)(ra := False)\\<rparr>)\n         r;\n        g \\<in> isin\n                 (s\\<lparr>currk := (currk s)(ra := k),\n                      issued := issued s \\<union> {k},\n                      cards := (cards s)\n                        (ga := cards s ga \\<union> {(currk s ra, k)}),\n                      owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                      safe := (safe s)(ra := False)\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>currk := (currk s)(ra := k),\n                               issued := issued s \\<union> {k},\n                               cards := (cards s)\n                                 (ga :=\n                                    cards s ga \\<union> {(currk s ra, k)}),\n                               owns := (owns s)(ra := \\<lfloor>ga\\<rfloor>),\n                               safe := (safe s)(ra := False)\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>\n 3. \\<And>s ga ra.\n       \\<lbrakk>s \\<in> reach;\n        \\<lbrakk>safe s r; g \\<in> isin s r\\<rbrakk>\n        \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>;\n        ga \\<in> isin s ra;\n        safe (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>) r;\n        g \\<in> isin\n                 (s\\<lparr>isin := (isin s)(ra := isin s ra - {ga})\\<rparr>)\n                 r\\<rbrakk>\n       \\<Longrightarrow> owns\n                          (s\\<lparr>isin := (isin s)\n(ra := isin s ra - {ga})\\<rparr>)\n                          r =\n                         \\<lfloor>g\\<rfloor>", "qed auto"], ["", "(*>*)"], ["", "text\\<open>\n\n\\subsection{Verifying safety}\n\\label{sec:verisafe}\n\nAll of our lemmas are invariants of @{const reach}.\nThe complete list, culminating in the main theorem, is this:\n\\begin{lemma}\\label{state-lemmas}\n\\begin{enumerate}\n\\item @{thm currk_issued}\n\\item @{thm key1_issued}\n\\item @{thm key2_issued}\n\\item @{thm roomk_issued}\n\\item \\label{currk_inj} @{thm currk_inj}\n\\item \\label{key1_not_currk} @{thm key1_not_currk}\n\\item @{thm guest_key2_disj}\n\\item \\label{safe_roomk_currk} @{thm[display] safe_roomk_currk}\n\\item \\label{safe_only_owner_enter_normal} @{thm safe_only_owner_enter_normal}\n\\end{enumerate}\n\\end{lemma}\n\\begin{theorem}\\label{safe-state}\n@{thm[mode=IfThen] safe}\n\\end{theorem}\nThe lemmas and the theorem are proved in this order, each one is marked as a\nsimplification rule, and each proof is a one-liner: induction on\n@{prop\"s \\<in> reach\"} followed by \\<open>auto\\<close>.\n\nAlthough, or maybe even because these proofs work so smoothly one may\nlike to understand why. Hence we examine the proof of\nTheorem~\\ref{safe-state} in more detail. The only interesting case is\n@{thm[source] enter_room}. We assume that guest \\<open>g\\<^sub>1\\<close> enters room\n\\<open>r\\<^sub>1\\<close> with card @{term\"(k\\<^sub>1,k\\<^sub>2)\"} and call the new state \\<open>t\\<close>.\nWe assume @{prop\"safe t r\"} and @{prop\"g \\<in> isin t r\"} and prove\n@{prop\"owns t r = \\<lfloor>g\\<rfloor>\"} by case distinction.\nIf @{prop\"r\\<^sub>1 \\<noteq> r\"}, the claim follows directly from the induction hypothesis\nusing \\mbox{@{prop\"safe s r\"}} and @{prop\"g \\<in> isin t r\"}\nbecause @{prop\"owns t r = owns s r\"} and @{prop\"safe t r = safe s r\"}.\nIf @{prop\"r\\<^sub>1 = r\"} then @{prop\"g \\<in> isin t r\"} is equivalent with\n@{prop\"g \\<in> isin s r \\<or> g = g\\<^sub>1\"}. If @{prop\"g \\<in> isin s r\"} then\n\\mbox{@{prop\"safe s r\"}} follows from @{prop\"safe t r\"} by\ndefinition of @{thm[source]enter_room} because @{prop\"g \\<in> isin s r\"}\nimplies @{prop\"isin s r \\<noteq> {}\"}. Hence the induction hypothesis implies the\nclaim.  If @{prop\"g = g\\<^sub>1\"} we make another case distinction.\nIf @{prop\"k\\<^sub>2 = roomk s r\"}, the claim follows immediately from\nLemma~\\ref{state-lemmas}.\\ref{safe_only_owner_enter_normal} above:\nonly the owner of a room can possess a card where the second\nkey is the room key.\nIf @{prop\"k\\<^sub>1 = roomk s r\"} then, by definition of @{thm[source]enter_room},\n@{prop\"safe t r\"} implies @{prop\"owns s r = \\<lfloor>g\\<rfloor> \\<or> safe s r\"}.\nIn the first case the claim is immediate. If @{prop\"safe s r\"}\nthen @{prop\"roomk s r = currk s r\"}\n(by Lemma~\\ref{state-lemmas}.\\ref{safe_roomk_currk})\nand thus @{prop\"(currk s r, k\\<^sub>2) \\<in> cards s g\"} by assumption\n@{prop\"(k\\<^sub>1,k\\<^sub>2) \\<in> cards s g\\<^sub>1\"}, thus contradicting\nLemma~\\ref{state-lemmas}.\\ref{key1_not_currk}.\n\nThis detailed proof shows that a number of case distinctions are\nrequired. Luckily, they all suggest themselves to Isabelle via the\ndefinition of function update (\\<open>:=\\<close>) or via disjunctions that\narise automatically.\n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}