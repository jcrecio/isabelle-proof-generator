{"file_name": "/home/qj213/afp-2021-10-22/thys/HotelKeyCards/Trace.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HotelKeyCards", "problem_names": ["lemma safe_safe: \"safe s r \\<Longrightarrow> safe\\<^sub>0 s r\"", "lemma initk_issued[simp]: \"hotel s \\<Longrightarrow> initk r \\<in> issued s\"", "lemma currk_issued[simp]: \"hotel s \\<Longrightarrow> currk s r \\<in> issued s\"", "lemma key1_issued[simp]: \"hotel s \\<Longrightarrow> (k,k') : cards s g \\<Longrightarrow> k \\<in> issued s\"", "lemma key2_issued[simp]: \"hotel s \\<Longrightarrow> (k,k') : cards s g \\<Longrightarrow> k' \\<in> issued s\"", "lemma roomk_issued[simp]: \"hotel s \\<Longrightarrow> roomk s r \\<in> issued s\"", "lemma issued_app: \"issued (s @ s') = issued s \\<union> issued s'\"", "lemma owns_app[simp]: \"no_Check_in s\\<^sub>2 r \\<Longrightarrow> owns (s\\<^sub>2 @ s\\<^sub>1) r = owns s\\<^sub>1 r\"", "lemma currk_app[simp]: \"no_Check_in s\\<^sub>2 r \\<Longrightarrow> currk (s\\<^sub>2 @ s\\<^sub>1) r = currk s\\<^sub>1 r\"", "lemma currk_Check_in:\n \"\\<lbrakk> hotel (s\\<^sub>2 @ Check_in g r (k, k')# s\\<^sub>1);\n    k' = currk (s\\<^sub>2 @ Check_in g r (k, k') # s\\<^sub>1) r' \\<rbrakk> \\<Longrightarrow> r' = r\"", "lemma no_checkin_no_newkey:\n\"\\<lbrakk> hotel(s\\<^sub>2 @ [Check_in g r (k,k')] @ s\\<^sub>1); no_Check_in s\\<^sub>2 r \\<rbrakk>\n \\<Longrightarrow> (k',k'') \\<notin> cards (s\\<^sub>2 @ Check_in g r (k,k') # s\\<^sub>1) g'\"", "lemma guest_key2_disj2[simp]: \n\"\\<lbrakk> hotel s; (k\\<^sub>1,k) \\<in> cards s g\\<^sub>1; (k\\<^sub>2,k) \\<in> cards s g\\<^sub>2 \\<rbrakk> \\<Longrightarrow> g\\<^sub>1=g\\<^sub>2\"", "lemma safe_roomk_currk[simp]:\n \"hotel s \\<Longrightarrow> safe\\<^sub>0 s r \\<Longrightarrow> roomk s r = currk s r\"", "lemma only_owner_enter_normal:\n \"\\<lbrakk> hotel s; safe\\<^sub>0 s r; (k,roomk s r) \\<in> cards s g \\<rbrakk> \\<Longrightarrow> owns s r = Some g\"", "lemma \"\\<lbrakk> hotel s; safe s r; g \\<in> isin s r \\<rbrakk> \\<Longrightarrow> owns s r = Some g\"", "lemma in_set_conv_decomp_firstD:\nassumes \"P x\"\nshows \"x \\<in> set xs \\<Longrightarrow>\n  \\<exists>ys x zs. xs = ys @ x # zs \\<and> P x \\<and> (\\<forall>y \\<in> set ys. \\<not> P y)\"\n  (is \"_ \\<Longrightarrow> \\<exists>ys x zs. ?P xs ys x zs\")", "lemma ownsD: \"owns s r = Some g \\<Longrightarrow>\n \\<exists>s\\<^sub>1 s\\<^sub>2 g c. s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and> no_Check_in s\\<^sub>2 r\"", "lemma no_Check_in_owns[simp]: \"no_Check_in s r \\<Longrightarrow> owns s r = None\"", "theorem Enter_safe:\n \"\\<lbrakk> hotel(Enter g r c # s); safe\\<^sub>0 s r \\<rbrakk> \\<Longrightarrow> owns s r = Some g\"", "lemma safe_future: \"safe\\<^sub>0 s r \\<Longrightarrow> no_Check_in s' r \\<Longrightarrow> safe\\<^sub>0 (s' @ s) r\"", "theorem safe: assumes \"hotel s\" and \"safe s r\" and \"g \\<in> isin s r\"\n                    shows \"owns s r = \\<lfloor>g\\<rfloor>\""], "translations": [["", "lemma safe_safe: \"safe s r \\<Longrightarrow> safe\\<^sub>0 s r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe s r \\<Longrightarrow> safe\\<^sub>0 s r", "by (simp add: safe\\<^sub>0_def safe_def) blast"], ["", "lemma initk_issued[simp]: \"hotel s \\<Longrightarrow> initk r \\<in> issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hotel s \\<Longrightarrow> initk r \\<in> issued s", "by (induct s) (auto split:event.split)"], ["", "lemma currk_issued[simp]: \"hotel s \\<Longrightarrow> currk s r \\<in> issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hotel s \\<Longrightarrow> currk s r \\<in> issued s", "by (induct s) (auto split:event.split)"], ["", "lemma key1_issued[simp]: \"hotel s \\<Longrightarrow> (k,k') : cards s g \\<Longrightarrow> k \\<in> issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel s; (k, k') \\<in> cards s g\\<rbrakk>\n    \\<Longrightarrow> k \\<in> issued s", "by (induct s) (auto split:event.split)"], ["", "lemma key2_issued[simp]: \"hotel s \\<Longrightarrow> (k,k') : cards s g \\<Longrightarrow> k' \\<in> issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel s; (k, k') \\<in> cards s g\\<rbrakk>\n    \\<Longrightarrow> k' \\<in> issued s", "by (induct s) (auto split:event.split)"], ["", "lemma roomk_issued[simp]: \"hotel s \\<Longrightarrow> roomk s r \\<in> issued s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hotel s \\<Longrightarrow> roomk s r \\<in> issued s", "by (induct s) (auto split:event.split)"], ["", "lemma issued_app: \"issued (s @ s') = issued s \\<union> issued s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. issued (s @ s') = issued s \\<union> issued s'", "apply (induct s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. issued ([] @ s') = issued [] \\<union> issued s'\n 2. \\<And>a s.\n       issued (s @ s') = issued s \\<union> issued s' \\<Longrightarrow>\n       issued ((a # s) @ s') = issued (a # s) \\<union> issued s'", "apply (auto split:event.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa. initk xa \\<in> issued s'", "apply (induct s')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa. initk xa \\<in> issued []\n 2. \\<And>a s' xa.\n       (\\<And>xa. initk xa \\<in> issued s') \\<Longrightarrow>\n       initk xa \\<in> issued (a # s')", "apply (auto split:event.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma owns_app[simp]: \"no_Check_in s\\<^sub>2 r \\<Longrightarrow> owns (s\\<^sub>2 @ s\\<^sub>1) r = owns s\\<^sub>1 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_Check_in s\\<^sub>2 r \\<Longrightarrow>\n    owns (s\\<^sub>2 @ s\\<^sub>1) r = owns s\\<^sub>1 r", "by (induct s\\<^sub>2) (auto split:event.split)"], ["", "lemma currk_app[simp]: \"no_Check_in s\\<^sub>2 r \\<Longrightarrow> currk (s\\<^sub>2 @ s\\<^sub>1) r = currk s\\<^sub>1 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_Check_in s\\<^sub>2 r \\<Longrightarrow>\n    currk (s\\<^sub>2 @ s\\<^sub>1) r = currk s\\<^sub>1 r", "by (induct s\\<^sub>2) (auto split:event.split)"], ["", "lemma currk_Check_in:\n \"\\<lbrakk> hotel (s\\<^sub>2 @ Check_in g r (k, k')# s\\<^sub>1);\n    k' = currk (s\\<^sub>2 @ Check_in g r (k, k') # s\\<^sub>1) r' \\<rbrakk> \\<Longrightarrow> r' = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel (s\\<^sub>2 @ Check_in g r (k, k') # s\\<^sub>1);\n     k' = currk (s\\<^sub>2 @ Check_in g r (k, k') # s\\<^sub>1) r'\\<rbrakk>\n    \\<Longrightarrow> r' = r", "by (induct s\\<^sub>2) (auto simp: issued_app split:event.splits)"], ["", "lemma no_checkin_no_newkey:\n\"\\<lbrakk> hotel(s\\<^sub>2 @ [Check_in g r (k,k')] @ s\\<^sub>1); no_Check_in s\\<^sub>2 r \\<rbrakk>\n \\<Longrightarrow> (k',k'') \\<notin> cards (s\\<^sub>2 @ Check_in g r (k,k') # s\\<^sub>1) g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel (s\\<^sub>2 @ [Check_in g r (k, k')] @ s\\<^sub>1);\n     no_Check_in s\\<^sub>2 r\\<rbrakk>\n    \\<Longrightarrow> (k', k'')\n                      \\<notin> cards\n                                (s\\<^sub>2 @\n                                 Check_in g r (k, k') # s\\<^sub>1)\n                                g'", "apply(induct s\\<^sub>2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hotel ([] @ [Check_in g r (k, k')] @ s\\<^sub>1);\n     no_Check_in [] r\\<rbrakk>\n    \\<Longrightarrow> (k', k'')\n                      \\<notin> cards ([] @ Check_in g r (k, k') # s\\<^sub>1)\n                                g'\n 2. \\<And>a s\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>hotel\n                          (s\\<^sub>2 @ [Check_in g r (k, k')] @ s\\<^sub>1);\n                 no_Check_in s\\<^sub>2 r\\<rbrakk>\n                \\<Longrightarrow> (k', k'')\n                                  \\<notin> cards\n      (s\\<^sub>2 @ Check_in g r (k, k') # s\\<^sub>1) g';\n        hotel ((a # s\\<^sub>2) @ [Check_in g r (k, k')] @ s\\<^sub>1);\n        no_Check_in (a # s\\<^sub>2) r\\<rbrakk>\n       \\<Longrightarrow> (k', k'')\n                         \\<notin> cards\n                                   ((a # s\\<^sub>2) @\n                                    Check_in g r (k, k') # s\\<^sub>1)\n                                   g'", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s\\<^sub>2.\n       \\<lbrakk>\\<lbrakk>hotel\n                          (s\\<^sub>2 @ [Check_in g r (k, k')] @ s\\<^sub>1);\n                 no_Check_in s\\<^sub>2 r\\<rbrakk>\n                \\<Longrightarrow> (k', k'')\n                                  \\<notin> cards\n      (s\\<^sub>2 @ Check_in g r (k, k') # s\\<^sub>1) g';\n        hotel ((a # s\\<^sub>2) @ [Check_in g r (k, k')] @ s\\<^sub>1);\n        no_Check_in (a # s\\<^sub>2) r\\<rbrakk>\n       \\<Longrightarrow> (k', k'')\n                         \\<notin> cards\n                                   ((a # s\\<^sub>2) @\n                                    Check_in g r (k, k') # s\\<^sub>1)\n                                   g'", "apply(fastforce split:event.splits dest: currk_Check_in)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma guest_key2_disj2[simp]: \n\"\\<lbrakk> hotel s; (k\\<^sub>1,k) \\<in> cards s g\\<^sub>1; (k\\<^sub>2,k) \\<in> cards s g\\<^sub>2 \\<rbrakk> \\<Longrightarrow> g\\<^sub>1=g\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel s; (k\\<^sub>1, k) \\<in> cards s g\\<^sub>1;\n     (k\\<^sub>2, k) \\<in> cards s g\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> g\\<^sub>1 = g\\<^sub>2", "apply (induct s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hotel []; (k\\<^sub>1, k) \\<in> cards [] g\\<^sub>1;\n     (k\\<^sub>2, k) \\<in> cards [] g\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> g\\<^sub>1 = g\\<^sub>2\n 2. \\<And>a s.\n       \\<lbrakk>\\<lbrakk>hotel s; (k\\<^sub>1, k) \\<in> cards s g\\<^sub>1;\n                 (k\\<^sub>2, k) \\<in> cards s g\\<^sub>2\\<rbrakk>\n                \\<Longrightarrow> g\\<^sub>1 = g\\<^sub>2;\n        hotel (a # s); (k\\<^sub>1, k) \\<in> cards (a # s) g\\<^sub>1;\n        (k\\<^sub>2, k) \\<in> cards (a # s) g\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> g\\<^sub>1 = g\\<^sub>2", "apply(auto split:event.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma safe_roomk_currk[simp]:\n \"hotel s \\<Longrightarrow> safe\\<^sub>0 s r \\<Longrightarrow> roomk s r = currk s r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel s; safe\\<^sub>0 s r\\<rbrakk>\n    \\<Longrightarrow> roomk s r = currk s r", "apply(clarsimp simp:safe\\<^sub>0_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g a b.\n       \\<lbrakk>hotel\n                 (s\\<^sub>3 @\n                  Enter g r (a, b) #\n                  s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        s =\n        s\\<^sub>3 @\n        Enter g r (a, b) #\n        s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> roomk\n                          (s\\<^sub>3 @\n                           Enter g r (a, b) #\n                           s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n                          r =\n                         b", "apply(hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g a b.\n       \\<lbrakk>hotel\n                 (s\\<^sub>3 @\n                  Enter g r (a, b) #\n                  s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> roomk\n                          (s\\<^sub>3 @\n                           Enter g r (a, b) #\n                           s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n                          r =\n                         b", "apply(erule rev_mp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g a b.\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       hotel\n        (s\\<^sub>3 @\n         Enter g r (a, b) #\n         s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       roomk\n        (s\\<^sub>3 @\n         Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n        r =\n       b", "apply(induct_tac s\\<^sub>3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g a b.\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set [] \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       hotel\n        ([] @\n         Enter g r (a, b) #\n         s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       roomk\n        ([] @\n         Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n        r =\n       b\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g a b aa list.\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       hotel\n        (list @\n         Enter g r (a, b) #\n         s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       roomk\n        (list @\n         Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n        r =\n       b \\<Longrightarrow>\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set (aa # list) \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       hotel\n        ((aa # list) @\n         Enter g r (a, b) #\n         s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       roomk\n        ((aa # list) @\n         Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n        r =\n       b", "apply(auto split:event.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g a b list x21 ba.\n       \\<lbrakk>\\<forall>g a b.\n                   Check_in g r (a, b) \\<notin> set list \\<and>\n                   Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        roomk\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n         r =\n        b;\n        (b, ba)\n        \\<in> cards\n               (list @\n                Enter g r (a, b) #\n                s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n               x21\\<rbrakk>\n       \\<Longrightarrow> ba = b", "apply(rename_tac guest ba)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g a b list guest ba.\n       \\<lbrakk>\\<forall>g a b.\n                   Check_in g r (a, b) \\<notin> set list \\<and>\n                   Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        roomk\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n         r =\n        b;\n        (b, ba)\n        \\<in> cards\n               (list @\n                Enter g r (a, b) #\n                s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n               guest\\<rbrakk>\n       \\<Longrightarrow> ba = b", "apply(subgoal_tac \"(b, ba)\n        \\<notin> cards ((list @ Enter g r (a, b) # s\\<^sub>2) @ Check_in g r (a, b) # s\\<^sub>1)\n           guest\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g a b list guest ba.\n       \\<lbrakk>\\<forall>g a b.\n                   Check_in g r (a, b) \\<notin> set list \\<and>\n                   Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        roomk\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n         r =\n        b;\n        (b, ba)\n        \\<in> cards\n               (list @\n                Enter g r (a, b) #\n                s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n               guest;\n        (b, ba)\n        \\<notin> cards\n                  ((list @ Enter g r (a, b) # s\\<^sub>2) @\n                   Check_in g r (a, b) # s\\<^sub>1)\n                  guest\\<rbrakk>\n       \\<Longrightarrow> ba = b\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g a b list guest ba.\n       \\<lbrakk>\\<forall>g a b.\n                   Check_in g r (a, b) \\<notin> set list \\<and>\n                   Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        roomk\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n         r =\n        b;\n        (b, ba)\n        \\<in> cards\n               (list @\n                Enter g r (a, b) #\n                s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n               guest\\<rbrakk>\n       \\<Longrightarrow> (b, ba)\n                         \\<notin> cards\n                                   ((list @ Enter g r (a, b) # s\\<^sub>2) @\n                                    Check_in g r (a, b) # s\\<^sub>1)\n                                   guest", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g a b list guest ba.\n       \\<lbrakk>\\<forall>g a b.\n                   Check_in g r (a, b) \\<notin> set list \\<and>\n                   Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        roomk\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n         r =\n        b;\n        (b, ba)\n        \\<in> cards\n               (list @\n                Enter g r (a, b) #\n                s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n               guest\\<rbrakk>\n       \\<Longrightarrow> (b, ba)\n                         \\<notin> cards\n                                   ((list @ Enter g r (a, b) # s\\<^sub>2) @\n                                    Check_in g r (a, b) # s\\<^sub>1)\n                                   guest", "apply(rule no_checkin_no_newkey)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g a b list guest ba.\n       \\<lbrakk>\\<forall>g a b.\n                   Check_in g r (a, b) \\<notin> set list \\<and>\n                   Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        roomk\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n         r =\n        b;\n        (b, ba)\n        \\<in> cards\n               (list @\n                Enter g r (a, b) #\n                s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n               guest\\<rbrakk>\n       \\<Longrightarrow> hotel\n                          ((list @ Enter g r (a, b) # s\\<^sub>2) @\n                           [Check_in g r (a, b)] @ s\\<^sub>1)\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g a b list guest ba.\n       \\<lbrakk>\\<forall>g a b.\n                   Check_in g r (a, b) \\<notin> set list \\<and>\n                   Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1);\n        roomk\n         (list @\n          Enter g r (a, b) # s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n         r =\n        b;\n        (b, ba)\n        \\<in> cards\n               (list @\n                Enter g r (a, b) #\n                s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1)\n               guest\\<rbrakk>\n       \\<Longrightarrow> no_Check_in (list @ Enter g r (a, b) # s\\<^sub>2) r", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma only_owner_enter_normal:\n \"\\<lbrakk> hotel s; safe\\<^sub>0 s r; (k,roomk s r) \\<in> cards s g \\<rbrakk> \\<Longrightarrow> owns s r = Some g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel s; safe\\<^sub>0 s r;\n     (k, roomk s r) \\<in> cards s g\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(clarsimp simp:safe\\<^sub>0_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b.\n       \\<lbrakk>hotel\n                 (s\\<^sub>3 @\n                  Enter ga r (a, b) #\n                  s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1);\n        (k, b)\n        \\<in> cards\n               (s\\<^sub>3 @\n                Enter ga r (a, b) #\n                s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n               g;\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        s =\n        s\\<^sub>3 @\n        Enter ga r (a, b) #\n        s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply(hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b.\n       \\<lbrakk>hotel\n                 (s\\<^sub>3 @\n                  Enter ga r (a, b) #\n                  s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1);\n        (k, b)\n        \\<in> cards\n               (s\\<^sub>3 @\n                Enter ga r (a, b) #\n                s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n               g;\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply(erule rev_mp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b.\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       (k, b)\n       \\<in> cards\n              (s\\<^sub>3 @\n               Enter ga r (a, b) #\n               s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n              g \\<longrightarrow>\n       hotel\n        (s\\<^sub>3 @\n         Enter ga r (a, b) #\n         s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       ga = g", "apply(induct_tac s\\<^sub>3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b.\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set [] \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       (k, b)\n       \\<in> cards\n              ([] @\n               Enter ga r (a, b) #\n               s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n              g \\<longrightarrow>\n       hotel\n        ([] @\n         Enter ga r (a, b) #\n         s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       ga = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b aa list.\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       (k, b)\n       \\<in> cards\n              (list @\n               Enter ga r (a, b) #\n               s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n              g \\<longrightarrow>\n       hotel\n        (list @\n         Enter ga r (a, b) #\n         s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       ga = g \\<Longrightarrow>\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set (aa # list) \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       (k, b)\n       \\<in> cards\n              ((aa # list) @\n               Enter ga r (a, b) #\n               s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n              g \\<longrightarrow>\n       hotel\n        ((aa # list) @\n         Enter ga r (a, b) #\n         s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       ga = g", "apply (fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b aa list.\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       (k, b)\n       \\<in> cards\n              (list @\n               Enter ga r (a, b) #\n               s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n              g \\<longrightarrow>\n       hotel\n        (list @\n         Enter ga r (a, b) #\n         s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       ga = g \\<Longrightarrow>\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set (aa # list) \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       (k, b)\n       \\<in> cards\n              ((aa # list) @\n               Enter ga r (a, b) #\n               s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n              g \\<longrightarrow>\n       hotel\n        ((aa # list) @\n         Enter ga r (a, b) #\n         s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) \\<longrightarrow>\n       ga = g", "apply (auto simp add:issued_app split:event.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* A short proof *)"], ["", "lemma \"\\<lbrakk> hotel s; safe s r; g \\<in> isin s r \\<rbrakk> \\<Longrightarrow> owns s r = Some g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel s; safe s r; g \\<in> isin s r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(clarsimp simp add:safe_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b.\n       \\<lbrakk>hotel\n                 (s\\<^sub>3 @\n                  Enter ga r (a, b) #\n                  s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1);\n        g \\<in> isin\n                 (s\\<^sub>3 @\n                  Enter ga r (a, b) #\n                  s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n                 r;\n        s =\n        s\\<^sub>3 @\n        Enter ga r (a, b) # s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1;\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        isin (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) r = {}\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply(hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b.\n       \\<lbrakk>hotel\n                 (s\\<^sub>3 @\n                  Enter ga r (a, b) #\n                  s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1);\n        g \\<in> isin\n                 (s\\<^sub>3 @\n                  Enter ga r (a, b) #\n                  s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n                 r;\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        isin (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) r = {}\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply(rename_tac g' k k')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g' k k'.\n       \\<lbrakk>hotel\n                 (s\\<^sub>3 @\n                  Enter g' r (k, k') #\n                  s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        g \\<in> isin\n                 (s\\<^sub>3 @\n                  Enter g' r (k, k') #\n                  s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                 r;\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {}\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply(erule rev_mp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g' k k'.\n       isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r =\n       {} \\<longrightarrow>\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       g \\<in> isin\n                (s\\<^sub>3 @\n                 Enter g' r (k, k') #\n                 s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                r \\<longrightarrow>\n       hotel\n        (s\\<^sub>3 @\n         Enter g' r (k, k') #\n         s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) \\<longrightarrow>\n       g' = g", "apply(induct_tac s\\<^sub>3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g' k k'.\n       isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r =\n       {} \\<longrightarrow>\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set [] \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       g \\<in> isin\n                ([] @\n                 Enter g' r (k, k') #\n                 s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                r \\<longrightarrow>\n       hotel\n        ([] @\n         Enter g' r (k, k') #\n         s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) \\<longrightarrow>\n       g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g' k k' a list.\n       isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r =\n       {} \\<longrightarrow>\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       g \\<in> isin\n                (list @\n                 Enter g' r (k, k') #\n                 s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                r \\<longrightarrow>\n       hotel\n        (list @\n         Enter g' r (k, k') #\n         s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) \\<longrightarrow>\n       g' = g \\<Longrightarrow>\n       isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r =\n       {} \\<longrightarrow>\n       (\\<forall>g aa b.\n           Check_in g r (aa, b) \\<notin> set (a # list) \\<and>\n           Check_in g r (aa, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       g \\<in> isin\n                ((a # list) @\n                 Enter g' r (k, k') #\n                 s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                r \\<longrightarrow>\n       hotel\n        ((a # list) @\n         Enter g' r (k, k') #\n         s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) \\<longrightarrow>\n       g' = g", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g' k k' a list.\n       isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r =\n       {} \\<longrightarrow>\n       (\\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       g \\<in> isin\n                (list @\n                 Enter g' r (k, k') #\n                 s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                r \\<longrightarrow>\n       hotel\n        (list @\n         Enter g' r (k, k') #\n         s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) \\<longrightarrow>\n       g' = g \\<Longrightarrow>\n       isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r =\n       {} \\<longrightarrow>\n       (\\<forall>g aa b.\n           Check_in g r (aa, b) \\<notin> set (a # list) \\<and>\n           Check_in g r (aa, b) \\<notin> set s\\<^sub>2) \\<longrightarrow>\n       g \\<in> isin\n                ((a # list) @\n                 Enter g' r (k, k') #\n                 s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                r \\<longrightarrow>\n       hotel\n        ((a # list) @\n         Enter g' r (k, k') #\n         s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) \\<longrightarrow>\n       g' = g", "apply (auto split:event.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r,\n         b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply(subgoal_tac\n \"safe\\<^sub>0 (list @ Enter g' r (k,k') # s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r,\n         b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r,\n         b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> safe\\<^sub>0\n                          (list @\n                           Enter g' r (k, k') #\n                           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                          r\n 3. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r,\n         b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> safe\\<^sub>0\n                          (list @\n                           Enter g' r (k, k') #\n                           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                          r\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r,\n         b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 3. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply(simp add:safe\\<^sub>0_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r,\n         b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1' s\\<^sub>2' s\\<^sub>3.\n                            (\\<exists>g a b.\n                                list @\n                                Enter g' r (k, k') #\n                                s\\<^sub>2 @\n                                Check_in g' r (k, k') # s\\<^sub>1 =\n                                s\\<^sub>3 @\n                                Enter g r (a, b) #\n                                s\\<^sub>2' @\n                                Check_in g r (a, b) # s\\<^sub>1') \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b)\n                                \\<notin> set s\\<^sub>3 \\<and>\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r,\n         b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 3. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r,\n         b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (k', b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply(cut_tac s\\<^sub>2 = \"list @ Enter g' r (k, k') # s\\<^sub>2\" in no_checkin_no_newkey)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (k', b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> hotel\n                          ((list @ Enter g' r (k, k') # s\\<^sub>2) @\n                           [Check_in\n                             (?g86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n                             (?r86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n                             (?k86 s\\<^sub>1 s\\<^sub>2 g' k k' list b,\n                              ?k'86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)] @\n                           ?s\\<^sub>186 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (k', b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> no_Check_in (list @ Enter g' r (k, k') # s\\<^sub>2)\n                          (?r86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n 3. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (k', b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r;\n        (?k'86 s\\<^sub>1 s\\<^sub>2 g' k k' list b,\n         ?k''86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n        \\<notin> cards\n                  ((list @ Enter g' r (k, k') # s\\<^sub>2) @\n                   Check_in (?g86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n                    (?r86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n                    (?k86 s\\<^sub>1 s\\<^sub>2 g' k k' list b,\n                     ?k'86 s\\<^sub>1 s\\<^sub>2 g' k k' list b) #\n                   ?s\\<^sub>186 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n                  (?g'86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 4. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (k', b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> no_Check_in (list @ Enter g' r (k, k') # s\\<^sub>2)\n                          r\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (k', b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r;\n        (k', ?k''86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n        \\<notin> cards\n                  ((list @ Enter g' r (k, k') # s\\<^sub>2) @\n                   Check_in g' r (k, k') # s\\<^sub>1)\n                  (?g'86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 3. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (k', b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r;\n        (k', ?k''86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n        \\<notin> cards\n                  ((list @ Enter g' r (k, k') # s\\<^sub>2) @\n                   Check_in g' r (k, k') # s\\<^sub>1)\n                  (?g'86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list b.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (k', b)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r;\n        (k', ?k''86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\n        \\<notin> cards\n                  (list @\n                   Enter g' r (k, k') #\n                   s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                  (?g'86 s\\<^sub>1 s\\<^sub>2 g' k k' list b)\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "apply(subgoal_tac\n \"safe\\<^sub>0 (list @ Enter g' r (k,k') # s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> safe\\<^sub>0\n                          (list @\n                           Enter g' r (k, k') #\n                           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                          r", "apply(drule (1) only_owner_enter_normal)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r\\<rbrakk>\n       \\<Longrightarrow> (?k92 s\\<^sub>1 s\\<^sub>2 g' k k' list aa,\n                          roomk\n                           (list @\n                            Enter g' r (k, k') #\n                            s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                           r)\n                         \\<in> cards\n                                (list @\n                                 Enter g' r (k, k') #\n                                 s\\<^sub>2 @\n                                 Check_in g' r (k, k') # s\\<^sub>1)\n                                (?g92 s\\<^sub>1 s\\<^sub>2 g' k k' list aa)\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r;\n        owns\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r =\n        \\<lfloor>?g92 s\\<^sub>1 s\\<^sub>2 g' k k' list aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 3. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> safe\\<^sub>0\n                          (list @\n                           Enter g' r (k, k') #\n                           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                          r", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r;\n        safe\\<^sub>0\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r;\n        owns\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n         r =\n        \\<lfloor>g\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> g' = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> safe\\<^sub>0\n                          (list @\n                           Enter g' r (k, k') #\n                           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                          r", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> safe\\<^sub>0\n                          (list @\n                           Enter g' r (k, k') #\n                           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                          r", "apply(simp add:safe\\<^sub>0_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 g' k k' list aa.\n       \\<lbrakk>isin (s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1) r = {};\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set list \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        hotel\n         (list @\n          Enter g' r (k, k') #\n          s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1);\n        (aa,\n         roomk\n          (list @\n           Enter g' r (k, k') #\n           s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n          r)\n        \\<in> cards\n               (list @\n                Enter g' r (k, k') #\n                s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n               g;\n        g \\<notin> isin\n                    (list @\n                     Enter g' r (k, k') #\n                     s\\<^sub>2 @ Check_in g' r (k, k') # s\\<^sub>1)\n                    r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1' s\\<^sub>2' s\\<^sub>3.\n                            (\\<exists>g a b.\n                                list @\n                                Enter g' r (k, k') #\n                                s\\<^sub>2 @\n                                Check_in g' r (k, k') # s\\<^sub>1 =\n                                s\\<^sub>3 @\n                                Enter g r (a, b) #\n                                s\\<^sub>2' @\n                                Check_in g r (a, b) # s\\<^sub>1') \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b)\n                                \\<notin> set s\\<^sub>3 \\<and>\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma in_set_conv_decomp_firstD:\nassumes \"P x\"\nshows \"x \\<in> set xs \\<Longrightarrow>\n  \\<exists>ys x zs. xs = ys @ x # zs \\<and> P x \\<and> (\\<forall>y \\<in> set ys. \\<not> P y)\"\n  (is \"_ \\<Longrightarrow> \\<exists>ys x zs. ?P xs ys x zs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<Longrightarrow>\n    \\<exists>ys x zs.\n       xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> set [] \\<Longrightarrow>\n    \\<exists>ys x zs.\n       [] = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n                \\<exists>ys x zs.\n                   xs = ys @ x # zs \\<and>\n                   P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y);\n        x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys x zs.\n                            a # xs = ys @ x # zs \\<and>\n                            P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "case Nil"], ["proof (state)\nthis:\n  x \\<in> set []\n\ngoal (2 subgoals):\n 1. x \\<in> set [] \\<Longrightarrow>\n    \\<exists>ys x zs.\n       [] = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n 2. \\<And>a xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n                \\<exists>ys x zs.\n                   xs = ys @ x # zs \\<and>\n                   P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y);\n        x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys x zs.\n                            a # xs = ys @ x # zs \\<and>\n                            P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> set []\n\ngoal (1 subgoal):\n 1. \\<exists>ys x zs.\n       [] = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "by simp"], ["proof (state)\nthis:\n  \\<exists>ys x zs.\n     [] = ys @ x # zs \\<and> P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n                \\<exists>ys x zs.\n                   xs = ys @ x # zs \\<and>\n                   P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y);\n        x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys x zs.\n                            a # xs = ys @ x # zs \\<and>\n                            P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n                \\<exists>ys x zs.\n                   xs = ys @ x # zs \\<and>\n                   P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y);\n        x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys x zs.\n                            a # xs = ys @ x # zs \\<and>\n                            P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "case (Cons a xs)"], ["proof (state)\nthis:\n  x \\<in> set xs \\<Longrightarrow>\n  \\<exists>ys x zs.\n     xs = ys @ x # zs \\<and> P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n  x \\<in> set (a # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>x \\<in> set xs \\<Longrightarrow>\n                \\<exists>ys x zs.\n                   xs = ys @ x # zs \\<and>\n                   P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y);\n        x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys x zs.\n                            a # xs = ys @ x # zs \\<and>\n                            P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "assume \"x = a \\<or> P a\""], ["proof (state)\nthis:\n  x = a \\<or> P a\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "hence \"?P (a#xs) [] a xs\""], ["proof (prove)\nusing this:\n  x = a \\<or> P a\n\ngoal (1 subgoal):\n 1. a # xs = [] @ a # xs \\<and>\n    P a \\<and> (\\<forall>y\\<in>set []. \\<not> P y)", "using \\<open>P x\\<close>"], ["proof (prove)\nusing this:\n  x = a \\<or> P a\n  P x\n\ngoal (1 subgoal):\n 1. a # xs = [] @ a # xs \\<and>\n    P a \\<and> (\\<forall>y\\<in>set []. \\<not> P y)", "by auto"], ["proof (state)\nthis:\n  a # xs = [] @ a # xs \\<and> P a \\<and> (\\<forall>y\\<in>set []. \\<not> P y)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "thus ?case"], ["proof (prove)\nusing this:\n  a # xs = [] @ a # xs \\<and> P a \\<and> (\\<forall>y\\<in>set []. \\<not> P y)\n\ngoal (1 subgoal):\n 1. \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "by blast"], ["proof (state)\nthis:\n  \\<exists>ys x zs.\n     a # xs = ys @ x # zs \\<and>\n     P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n\ngoal (1 subgoal):\n 1. \\<not> (x = a \\<or> P a) \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (x = a \\<or> P a) \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "assume \"\\<not>(x = a \\<or> P a)\""], ["proof (state)\nthis:\n  \\<not> (x = a \\<or> P a)\n\ngoal (1 subgoal):\n 1. \\<not> (x = a \\<or> P a) \\<Longrightarrow>\n    \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "with assms Cons"], ["proof (chain)\npicking this:\n  P x\n  x \\<in> set xs \\<Longrightarrow>\n  \\<exists>ys x zs.\n     xs = ys @ x # zs \\<and> P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n  x \\<in> set (a # xs)\n  \\<not> (x = a \\<or> P a)", "show ?case"], ["proof (prove)\nusing this:\n  P x\n  x \\<in> set xs \\<Longrightarrow>\n  \\<exists>ys x zs.\n     xs = ys @ x # zs \\<and> P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n  x \\<in> set (a # xs)\n  \\<not> (x = a \\<or> P a)\n\ngoal (1 subgoal):\n 1. \\<exists>ys x zs.\n       a # xs = ys @ x # zs \\<and>\n       P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)", "by clarsimp (fastforce intro!: Cons_eq_appendI)"], ["proof (state)\nthis:\n  \\<exists>ys x zs.\n     a # xs = ys @ x # zs \\<and>\n     P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ys x zs.\n     a # xs = ys @ x # zs \\<and>\n     P x \\<and> (\\<forall>y\\<in>set ys. \\<not> P y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ownsD: \"owns s r = Some g \\<Longrightarrow>\n \\<exists>s\\<^sub>1 s\\<^sub>2 g c. s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and> no_Check_in s\\<^sub>2 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor> \\<Longrightarrow>\n    \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n       s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n       no_Check_in s\\<^sub>2 r", "apply(induct s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. owns [] r = \\<lfloor>g\\<rfloor> \\<Longrightarrow>\n    \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n       [] = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n       no_Check_in s\\<^sub>2 r\n 2. \\<And>a s.\n       \\<lbrakk>owns s r = \\<lfloor>g\\<rfloor> \\<Longrightarrow>\n                \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n                   s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n                   no_Check_in s\\<^sub>2 r;\n        owns (a # s) r = \\<lfloor>g\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n                            a # s =\n                            s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n                            no_Check_in s\\<^sub>2 r", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s.\n       \\<lbrakk>owns s r = \\<lfloor>g\\<rfloor> \\<Longrightarrow>\n                \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n                   s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n                   no_Check_in s\\<^sub>2 r;\n        owns (a # s) r = \\<lfloor>g\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n                            a # s =\n                            s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n                            no_Check_in s\\<^sub>2 r", "apply (auto split:event.splits)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s aa b.\n       (owns s r = \\<lfloor>g\\<rfloor> \\<Longrightarrow>\n        \\<exists>s\\<^sub>1 s\\<^sub>2.\n           (\\<exists>g a b.\n               s = s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1) \\<and>\n           (\\<forall>g a b.\n               Check_in g r (a, b)\n               \\<notin> set s\\<^sub>2)) \\<Longrightarrow>\n       \\<exists>s\\<^sub>1 s\\<^sub>2.\n          (\\<exists>ga a ba.\n              Check_in g r (aa, b) # s =\n              s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2)\n 2. \\<And>x11 x12 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<lbrakk>x12 \\<noteq> r;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1' s\\<^sub>2'.\n                            (\\<exists>ga a bb.\n                                Check_in x11 x12 (aa, b) #\n                                s\\<^sub>2 @\n                                Check_in g r (ab, ba) # s\\<^sub>1 =\n                                s\\<^sub>2' @\n                                Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 3. \\<And>x21 x22 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a bb.\n              Enter x21 x22 (aa, b) #\n              s\\<^sub>2 @ Check_in g r (ab, ba) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 4. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply(rule_tac x = s in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s aa b.\n       (owns s r = \\<lfloor>g\\<rfloor> \\<Longrightarrow>\n        \\<exists>s\\<^sub>1 s\\<^sub>2.\n           (\\<exists>g a b.\n               s = s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1) \\<and>\n           (\\<forall>g a b.\n               Check_in g r (a, b)\n               \\<notin> set s\\<^sub>2)) \\<Longrightarrow>\n       \\<exists>s\\<^sub>2.\n          (\\<exists>ga a ba.\n              Check_in g r (aa, b) # s =\n              s\\<^sub>2 @ Check_in ga r (a, ba) # s) \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2)\n 2. \\<And>x11 x12 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<lbrakk>x12 \\<noteq> r;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1' s\\<^sub>2'.\n                            (\\<exists>ga a bb.\n                                Check_in x11 x12 (aa, b) #\n                                s\\<^sub>2 @\n                                Check_in g r (ab, ba) # s\\<^sub>1 =\n                                s\\<^sub>2' @\n                                Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 3. \\<And>x21 x22 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a bb.\n              Enter x21 x22 (aa, b) #\n              s\\<^sub>2 @ Check_in g r (ab, ba) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 4. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply(rule_tac x = \"[]\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s aa b.\n       (owns s r = \\<lfloor>g\\<rfloor> \\<Longrightarrow>\n        \\<exists>s\\<^sub>1 s\\<^sub>2.\n           (\\<exists>g a b.\n               s = s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1) \\<and>\n           (\\<forall>g a b.\n               Check_in g r (a, b)\n               \\<notin> set s\\<^sub>2)) \\<Longrightarrow>\n       (\\<exists>ga a ba.\n           Check_in g r (aa, b) # s = [] @ Check_in ga r (a, ba) # s) \\<and>\n       (\\<forall>g a b. Check_in g r (a, b) \\<notin> set [])\n 2. \\<And>x11 x12 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<lbrakk>x12 \\<noteq> r;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1' s\\<^sub>2'.\n                            (\\<exists>ga a bb.\n                                Check_in x11 x12 (aa, b) #\n                                s\\<^sub>2 @\n                                Check_in g r (ab, ba) # s\\<^sub>1 =\n                                s\\<^sub>2' @\n                                Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 3. \\<And>x21 x22 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a bb.\n              Enter x21 x22 (aa, b) #\n              s\\<^sub>2 @ Check_in g r (ab, ba) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 4. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<lbrakk>x12 \\<noteq> r;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1' s\\<^sub>2'.\n                            (\\<exists>ga a bb.\n                                Check_in x11 x12 (aa, b) #\n                                s\\<^sub>2 @\n                                Check_in g r (ab, ba) # s\\<^sub>1 =\n                                s\\<^sub>2' @\n                                Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 2. \\<And>x21 x22 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a bb.\n              Enter x21 x22 (aa, b) #\n              s\\<^sub>2 @ Check_in g r (ab, ba) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 3. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply(rule_tac x = s\\<^sub>1 in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<lbrakk>x12 \\<noteq> r;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            (\\<exists>ga a bb.\n                                Check_in x11 x12 (aa, b) #\n                                s\\<^sub>2 @\n                                Check_in g r (ab, ba) # s\\<^sub>1 =\n                                s\\<^sub>2' @\n                                Check_in ga r (a, bb) # s\\<^sub>1) \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 2. \\<And>x21 x22 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a bb.\n              Enter x21 x22 (aa, b) #\n              s\\<^sub>2 @ Check_in g r (ab, ba) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 3. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a bb.\n              Enter x21 x22 (aa, b) #\n              s\\<^sub>2 @ Check_in g r (ab, ba) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, bb) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 2. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply(rule_tac x = s\\<^sub>1 in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 aa b s\\<^sub>1 s\\<^sub>2 ab ba.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>2'.\n          (\\<exists>ga a bb.\n              Enter x21 x22 (aa, b) #\n              s\\<^sub>2 @ Check_in g r (ab, ba) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, bb) # s\\<^sub>1) \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')\n 2. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>1' s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1') \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply(rule_tac x = s\\<^sub>1 in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 s\\<^sub>1 s\\<^sub>2 aa b.\n       \\<forall>g a b.\n          Check_in g r (a, b) \\<notin> set s\\<^sub>2 \\<Longrightarrow>\n       \\<exists>s\\<^sub>2'.\n          (\\<exists>ga a ba.\n              Exit x31 x32 # s\\<^sub>2 @ Check_in g r (aa, b) # s\\<^sub>1 =\n              s\\<^sub>2' @ Check_in ga r (a, ba) # s\\<^sub>1) \\<and>\n          (\\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma no_Check_in_owns[simp]: \"no_Check_in s r \\<Longrightarrow> owns s r = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_Check_in s r \\<Longrightarrow> owns s r = None", "by (induct s) (auto split:event.split)"], ["", "theorem Enter_safe:\n \"\\<lbrakk> hotel(Enter g r c # s); safe\\<^sub>0 s r \\<rbrakk> \\<Longrightarrow> owns s r = Some g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(subgoal_tac \"\\<exists>s\\<^sub>1 s\\<^sub>2 g c. s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and> no_Check_in s\\<^sub>2 r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r;\n     \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n        s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n        no_Check_in s\\<^sub>2 r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>\n 2. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n                         s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n                         no_Check_in s\\<^sub>2 r", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n                         s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n                         no_Check_in s\\<^sub>2 r\n 2. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r;\n     \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n        s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n        no_Check_in s\\<^sub>2 r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(simp add:safe\\<^sub>0_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hotel s \\<and>\n             (case c of\n              (k, k') \\<Rightarrow>\n                (k, k') \\<in> cards s g \\<and>\n                (roomk s r = k \\<or> roomk s r = k'));\n     \\<exists>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3.\n        (\\<exists>g a b.\n            s =\n            s\\<^sub>3 @\n            Enter g r (a, b) #\n            s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1) \\<and>\n        (\\<forall>g a b.\n            Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n            Check_in g r (a, b) \\<notin> set s\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<^sub>1 s\\<^sub>2.\n                         (\\<exists>g a b.\n                             s =\n                             s\\<^sub>2 @\n                             Check_in g r (a, b) # s\\<^sub>1) \\<and>\n                         (\\<forall>g a b.\n                             Check_in g r (a, b) \\<notin> set s\\<^sub>2)\n 2. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r;\n     \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n        s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n        no_Check_in s\\<^sub>2 r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(elim exE conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b.\n       \\<lbrakk>hotel s;\n        case c of\n        (k, k') \\<Rightarrow>\n          (k, k') \\<in> cards s g \\<and>\n          (roomk s r = k \\<or> roomk s r = k');\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        s =\n        s\\<^sub>3 @\n        Enter ga r (a, b) #\n        s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1 s\\<^sub>2.\n                            (\\<exists>g a b.\n                                s =\n                                s\\<^sub>2 @\n                                Check_in g r (a, b) # s\\<^sub>1) \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2)\n 2. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r;\n     \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n        s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n        no_Check_in s\\<^sub>2 r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(rule_tac x = s\\<^sub>1 in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 ga a b.\n       \\<lbrakk>hotel s;\n        case c of\n        (k, k') \\<Rightarrow>\n          (k, k') \\<in> cards s g \\<and>\n          (roomk s r = k \\<or> roomk s r = k');\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        s =\n        s\\<^sub>3 @\n        Enter ga r (a, b) #\n        s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2.\n                            (\\<exists>g a b.\n                                s =\n                                s\\<^sub>2 @\n                                Check_in g r (a, b) # s\\<^sub>1) \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2)\n 2. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r;\n     \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n        s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n        no_Check_in s\\<^sub>2 r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r;\n     \\<exists>s\\<^sub>1 s\\<^sub>2 g c.\n        s = s\\<^sub>2 @ [Check_in g r c] @ s\\<^sub>1 \\<and>\n        no_Check_in s\\<^sub>2 r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(elim exE conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga ca.\n       \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r;\n        s = s\\<^sub>2 @ [Check_in ga r ca] @ s\\<^sub>1;\n        no_Check_in s\\<^sub>2 r\\<rbrakk>\n       \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(cases c)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga ca a b.\n       \\<lbrakk>hotel (Enter g r c # s); safe\\<^sub>0 s r;\n        s = s\\<^sub>2 @ [Check_in ga r ca] @ s\\<^sub>1;\n        no_Check_in s\\<^sub>2 r; c = (a, b)\\<rbrakk>\n       \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) g;\n        b = aa \\<or> b = ba\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) g;\n        b = aa\\<rbrakk>\n       \\<Longrightarrow> ga = g\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) g;\n        b = ba\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply (simp add:no_checkin_no_newkey)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, b) # s\\<^sub>1) g;\n        b = ba\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) g;\n        b = ba\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply(frule only_owner_enter_normal)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) g;\n        b = ba\\<rbrakk>\n       \\<Longrightarrow> safe\\<^sub>0\n                          (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                          (?r21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba)\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) g;\n        b = ba\\<rbrakk>\n       \\<Longrightarrow> (?k21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba,\n                          roomk\n                           (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                           (?r21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba))\n                         \\<in> cards\n                                (s\\<^sub>2 @\n                                 Check_in ga r (a, ba) # s\\<^sub>1)\n                                (?g21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba)\n 3. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) g;\n        b = ba;\n        owns (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n         (?r21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba) =\n        \\<lfloor>?g21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) g;\n        b = ba\\<rbrakk>\n       \\<Longrightarrow> (?k21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba,\n                          roomk\n                           (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                           r)\n                         \\<in> cards\n                                (s\\<^sub>2 @\n                                 Check_in ga r (a, ba) # s\\<^sub>1)\n                                (?g21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba)\n 2. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) g;\n        b = ba;\n        owns (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) r =\n        \\<lfloor>?g21 s\\<^sub>1 s\\<^sub>2 ga a b aa ba\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 ga a b aa ba.\n       \\<lbrakk>safe\\<^sub>0 (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1)\n                 r;\n        s = s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1;\n        \\<forall>g a b. Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        c = (aa, ba); hotel (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1);\n        (aa, ba)\n        \\<in> cards (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) g;\n        b = ba;\n        owns (s\\<^sub>2 @ Check_in ga r (a, ba) # s\\<^sub>1) r =\n        \\<lfloor>g\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> ga = g", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma safe_future: \"safe\\<^sub>0 s r \\<Longrightarrow> no_Check_in s' r \\<Longrightarrow> safe\\<^sub>0 (s' @ s) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe\\<^sub>0 s r; no_Check_in s' r\\<rbrakk>\n    \\<Longrightarrow> safe\\<^sub>0 (s' @ s) r", "apply(clarsimp simp:safe\\<^sub>0_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g a b.\n       \\<lbrakk>\\<forall>g a b. Check_in g r (a, b) \\<notin> set s';\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        s =\n        s\\<^sub>3 @\n        Enter g r (a, b) #\n        s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>1' s\\<^sub>2' s\\<^sub>3'.\n                            (\\<exists>ga aa ba.\n                                s' @\n                                s\\<^sub>3 @\n                                Enter g r (a, b) #\n                                s\\<^sub>2 @\n                                Check_in g r (a, b) # s\\<^sub>1 =\n                                s\\<^sub>3' @\n                                Enter ga r (aa, ba) #\n                                s\\<^sub>2' @\n                                Check_in ga r (aa, ba) # s\\<^sub>1') \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b)\n                                \\<notin> set s\\<^sub>3' \\<and>\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply(rule_tac x = s\\<^sub>1 in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g a b.\n       \\<lbrakk>\\<forall>g a b. Check_in g r (a, b) \\<notin> set s';\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        s =\n        s\\<^sub>3 @\n        Enter g r (a, b) #\n        s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2' s\\<^sub>3'.\n                            (\\<exists>ga aa ba.\n                                s' @\n                                s\\<^sub>3 @\n                                Enter g r (a, b) #\n                                s\\<^sub>2 @\n                                Check_in g r (a, b) # s\\<^sub>1 =\n                                s\\<^sub>3' @\n                                Enter ga r (aa, ba) #\n                                s\\<^sub>2' @\n                                Check_in ga r (aa, ba) # s\\<^sub>1) \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b)\n                                \\<notin> set s\\<^sub>3' \\<and>\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2')", "apply(rule_tac x = s\\<^sub>2 in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g a b.\n       \\<lbrakk>\\<forall>g a b. Check_in g r (a, b) \\<notin> set s';\n        \\<forall>g a b.\n           Check_in g r (a, b) \\<notin> set s\\<^sub>3 \\<and>\n           Check_in g r (a, b) \\<notin> set s\\<^sub>2;\n        s =\n        s\\<^sub>3 @\n        Enter g r (a, b) #\n        s\\<^sub>2 @ Check_in g r (a, b) # s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3'.\n                            (\\<exists>ga aa ba.\n                                s' @\n                                s\\<^sub>3 @\n                                Enter g r (a, b) #\n                                s\\<^sub>2 @\n                                Check_in g r (a, b) # s\\<^sub>1 =\n                                s\\<^sub>3' @\n                                Enter ga r (aa, ba) #\n                                s\\<^sub>2 @\n                                Check_in ga r (aa, ba) # s\\<^sub>1) \\<and>\n                            (\\<forall>g a b.\n                                Check_in g r (a, b)\n                                \\<notin> set s\\<^sub>3' \\<and>\n                                Check_in g r (a, b) \\<notin> set s\\<^sub>2)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary Enter_safe_future:\n \"\\<lbrakk> hotel(Enter g r c # s' @ s); safe\\<^sub>0 s r; no_Check_in s' r \\<rbrakk>\n \\<Longrightarrow> owns s r = Some g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel (Enter g r c # s' @ s); safe\\<^sub>0 s r;\n     no_Check_in s' r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(drule (1) safe_future)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel (Enter g r c # s' @ s); no_Check_in s' r;\n     safe\\<^sub>0 (s' @ s) r\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply(drule (1) Enter_safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no_Check_in s' r; safe\\<^sub>0 (s' @ s) r;\n     owns (s' @ s) r = \\<lfloor>g\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> owns s r = \\<lfloor>g\\<rfloor>", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text_raw\\<open>\n  \\begin{figure}\n  \\begin{center}\\begin{minipage}{\\textwidth}  \n  \\isastyle\\isamarkuptrue\n\\<close>"], ["", "theorem safe: assumes \"hotel s\" and \"safe s r\" and \"g \\<in> isin s r\"\n                    shows \"owns s r = \\<lfloor>g\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "fix s\\<^sub>1 s\\<^sub>2 s\\<^sub>3 g' k k'"], ["proof (state)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "let ?b = \"[Enter g' r (k,k')] @ s\\<^sub>2 @ [Check_in g' r (k,k')] @ s\\<^sub>1\""], ["proof (state)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "let ?s = \"s\\<^sub>3 @ ?b\""], ["proof (state)\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "assume 0: \"isin (s\\<^sub>2 @ [Check_in g' r (k,k')] @ s\\<^sub>1) r = {}\""], ["proof (state)\nthis:\n  isin (s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1) r = {}\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "have \"\\<lbrakk> hotel ?s; no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r; g \\<in> isin ?s r \\<rbrakk> \\<Longrightarrow> g' = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hotel\n              (s\\<^sub>3 @\n               [Enter g' r (k, k')] @\n               s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n     no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n     g \\<in> isin\n              (s\\<^sub>3 @\n               [Enter g' r (k, k')] @\n               s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n              r\\<rbrakk>\n    \\<Longrightarrow> g' = g", "proof(induct s\\<^sub>3)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>hotel\n              ([] @\n               [Enter g' r (k, k')] @\n               s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n     no_Check_in ([] @ s\\<^sub>2) r;\n     g \\<in> isin\n              ([] @\n               [Enter g' r (k, k')] @\n               s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n              r\\<rbrakk>\n    \\<Longrightarrow> g' = g\n 2. \\<And>a s\\<^sub>3.\n       \\<lbrakk>\\<lbrakk>hotel\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n                 no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n                 g \\<in> isin\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                          r\\<rbrakk>\n                \\<Longrightarrow> g' = g;\n        hotel\n         ((a # s\\<^sub>3) @\n          [Enter g' r (k, k')] @\n          s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n        no_Check_in ((a # s\\<^sub>3) @ s\\<^sub>2) r;\n        g \\<in> isin\n                 ((a # s\\<^sub>3) @\n                  [Enter g' r (k, k')] @\n                  s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                 r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "case Nil"], ["proof (state)\nthis:\n  hotel\n   ([] @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  no_Check_in ([] @ s\\<^sub>2) r\n  g \\<in> isin\n           ([] @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hotel\n              ([] @\n               [Enter g' r (k, k')] @\n               s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n     no_Check_in ([] @ s\\<^sub>2) r;\n     g \\<in> isin\n              ([] @\n               [Enter g' r (k, k')] @\n               s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n              r\\<rbrakk>\n    \\<Longrightarrow> g' = g\n 2. \\<And>a s\\<^sub>3.\n       \\<lbrakk>\\<lbrakk>hotel\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n                 no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n                 g \\<in> isin\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                          r\\<rbrakk>\n                \\<Longrightarrow> g' = g;\n        hotel\n         ((a # s\\<^sub>3) @\n          [Enter g' r (k, k')] @\n          s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n        no_Check_in ((a # s\\<^sub>3) @ s\\<^sub>2) r;\n        g \\<in> isin\n                 ((a # s\\<^sub>3) @\n                  [Enter g' r (k, k')] @\n                  s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                 r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "thus ?case"], ["proof (prove)\nusing this:\n  hotel\n   ([] @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  no_Check_in ([] @ s\\<^sub>2) r\n  g \\<in> isin\n           ([] @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           r\n\ngoal (1 subgoal):\n 1. g' = g", "using 0"], ["proof (prove)\nusing this:\n  hotel\n   ([] @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  no_Check_in ([] @ s\\<^sub>2) r\n  g \\<in> isin\n           ([] @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           r\n  isin (s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1) r = {}\n\ngoal (1 subgoal):\n 1. g' = g", "by simp"], ["proof (state)\nthis:\n  g' = g\n\ngoal (1 subgoal):\n 1. \\<And>a s\\<^sub>3.\n       \\<lbrakk>\\<lbrakk>hotel\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n                 no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n                 g \\<in> isin\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                          r\\<rbrakk>\n                \\<Longrightarrow> g' = g;\n        hotel\n         ((a # s\\<^sub>3) @\n          [Enter g' r (k, k')] @\n          s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n        no_Check_in ((a # s\\<^sub>3) @ s\\<^sub>2) r;\n        g \\<in> isin\n                 ((a # s\\<^sub>3) @\n                  [Enter g' r (k, k')] @\n                  s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                 r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a s\\<^sub>3.\n       \\<lbrakk>\\<lbrakk>hotel\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n                 no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n                 g \\<in> isin\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                          r\\<rbrakk>\n                \\<Longrightarrow> g' = g;\n        hotel\n         ((a # s\\<^sub>3) @\n          [Enter g' r (k, k')] @\n          s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n        no_Check_in ((a # s\\<^sub>3) @ s\\<^sub>2) r;\n        g \\<in> isin\n                 ((a # s\\<^sub>3) @\n                  [Enter g' r (k, k')] @\n                  s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                 r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "case (Cons e s\\<^sub>3)"], ["proof (state)\nthis:\n  \\<lbrakk>hotel\n            (s\\<^sub>3 @\n             [Enter g' r (k, k')] @\n             s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n   no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n   g \\<in> isin\n            (s\\<^sub>3 @\n             [Enter g' r (k, k')] @\n             s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n            r\\<rbrakk>\n  \\<Longrightarrow> g' = g\n  hotel\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  no_Check_in ((e # s\\<^sub>3) @ s\\<^sub>2) r\n  g \\<in> isin\n           ((e # s\\<^sub>3) @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           r\n\ngoal (1 subgoal):\n 1. \\<And>a s\\<^sub>3.\n       \\<lbrakk>\\<lbrakk>hotel\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n                 no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n                 g \\<in> isin\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                          r\\<rbrakk>\n                \\<Longrightarrow> g' = g;\n        hotel\n         ((a # s\\<^sub>3) @\n          [Enter g' r (k, k')] @\n          s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n        no_Check_in ((a # s\\<^sub>3) @ s\\<^sub>2) r;\n        g \\<in> isin\n                 ((a # s\\<^sub>3) @\n                  [Enter g' r (k, k')] @\n                  s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                 r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "let ?s = \"s\\<^sub>3 @ ?b\" and ?t = \"(e \\<cdot> s\\<^sub>3) @ ?b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a s\\<^sub>3.\n       \\<lbrakk>\\<lbrakk>hotel\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n                 no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n                 g \\<in> isin\n                          (s\\<^sub>3 @\n                           [Enter g' r (k, k')] @\n                           s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                          r\\<rbrakk>\n                \\<Longrightarrow> g' = g;\n        hotel\n         ((a # s\\<^sub>3) @\n          [Enter g' r (k, k')] @\n          s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n        no_Check_in ((a # s\\<^sub>3) @ s\\<^sub>2) r;\n        g \\<in> isin\n                 ((a # s\\<^sub>3) @\n                  [Enter g' r (k, k')] @\n                  s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n                 r\\<rbrakk>\n       \\<Longrightarrow> g' = g", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. g' = g", "proof(cases e)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. e = Check_in x11 x12 x13 \\<Longrightarrow> g' = g\n 2. \\<And>x21 x22 x23. e = Enter x21 x22 x23 \\<Longrightarrow> g' = g\n 3. \\<And>x31 x32. e = Exit x31 x32 \\<Longrightarrow> g' = g", "case [simp]: (Enter g'' r' c)"], ["proof (state)\nthis:\n  e = Enter g'' r' c\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. e = Check_in x11 x12 x13 \\<Longrightarrow> g' = g\n 2. \\<And>x21 x22 x23. e = Enter x21 x22 x23 \\<Longrightarrow> g' = g\n 3. \\<And>x31 x32. e = Exit x31 x32 \\<Longrightarrow> g' = g", "show \"g' = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' = g", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "assume [simp]: \"r' = r\""], ["proof (state)\nthis:\n  r' = r\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "show \"g' = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' = g", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "assume [simp]: \"g'' = g\""], ["proof (state)\nthis:\n  g'' = g\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "have 1: \"hotel ?s\" and 2: \"c \\<in> cards ?s g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hotel\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1) &&&\n    c \\<in> cards\n             (s\\<^sub>3 @\n              [Enter g' r (k, k')] @\n              s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n             g", "using \\<open>hotel ?t\\<close>"], ["proof (prove)\nusing this:\n  hotel\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n\ngoal (1 subgoal):\n 1. hotel\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1) &&&\n    c \\<in> cards\n             (s\\<^sub>3 @\n              [Enter g' r (k, k')] @\n              s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n             g", "by auto"], ["proof (state)\nthis:\n  hotel\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  c \\<in> cards\n           (s\\<^sub>3 @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           g\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "have 3: \"safe ?s r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r", "using \\<open>no_Check_in ((e \\<cdot> s\\<^sub>3) @ s\\<^sub>2) r\\<close> 0"], ["proof (prove)\nusing this:\n  no_Check_in ((e # s\\<^sub>3) @ s\\<^sub>2) r\n  isin (s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1) r = {}\n\ngoal (1 subgoal):\n 1. safe\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r", "by(simp add:safe_def) blast"], ["proof (state)\nthis:\n  safe\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "obtain k\\<^sub>1 k\\<^sub>2 where [simp]: \"c = (k\\<^sub>1,k\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>1 k\\<^sub>2.\n        c = (k\\<^sub>1, k\\<^sub>2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  c = (k\\<^sub>1, k\\<^sub>2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "have \"roomk ?s r = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. roomk\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r =\n    k'", "using safe_roomk_currk[OF 1 safe_safe[OF 3]]\n                \\<open>no_Check_in ((e \\<cdot> s\\<^sub>3) @ s\\<^sub>2) r\\<close>"], ["proof (prove)\nusing this:\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  currk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r\n  no_Check_in ((e # s\\<^sub>3) @ s\\<^sub>2) r\n\ngoal (1 subgoal):\n 1. roomk\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r =\n    k'", "by auto"], ["proof (state)\nthis:\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  k'\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "hence \"k\\<^sub>1 \\<noteq> roomk ?s r\""], ["proof (prove)\nusing this:\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  k'\n\ngoal (1 subgoal):\n 1. k\\<^sub>1 \\<noteq>\n    roomk\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r", "using no_checkin_no_newkey[where s\\<^sub>2 = \"s\\<^sub>3 @ [Enter g' r (k,k')] @ s\\<^sub>2\"]\n                1 2 \\<open>no_Check_in ((e \\<cdot> s\\<^sub>3) @ s\\<^sub>2) r\\<close>"], ["proof (prove)\nusing this:\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  k'\n  \\<lbrakk>hotel\n            ((s\\<^sub>3 @ [Enter g' r (k, k')] @ s\\<^sub>2) @\n             [Check_in ?g ?r (?k, ?k')] @ ?s\\<^sub>1);\n   no_Check_in (s\\<^sub>3 @ [Enter g' r (k, k')] @ s\\<^sub>2) ?r\\<rbrakk>\n  \\<Longrightarrow> (?k', ?k'')\n                    \\<notin> cards\n                              ((s\\<^sub>3 @\n                                [Enter g' r (k, k')] @ s\\<^sub>2) @\n                               Check_in ?g ?r (?k, ?k') # ?s\\<^sub>1)\n                              ?g'\n  hotel\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  c \\<in> cards\n           (s\\<^sub>3 @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           g\n  no_Check_in ((e # s\\<^sub>3) @ s\\<^sub>2) r\n\ngoal (1 subgoal):\n 1. k\\<^sub>1 \\<noteq>\n    roomk\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r", "by auto"], ["proof (state)\nthis:\n  k\\<^sub>1 \\<noteq>\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "hence \"k\\<^sub>2 = roomk ?s r\""], ["proof (prove)\nusing this:\n  k\\<^sub>1 \\<noteq>\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r\n\ngoal (1 subgoal):\n 1. k\\<^sub>2 =\n    roomk\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r", "using \\<open>hotel ?t\\<close>"], ["proof (prove)\nusing this:\n  k\\<^sub>1 \\<noteq>\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r\n  hotel\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n\ngoal (1 subgoal):\n 1. k\\<^sub>2 =\n    roomk\n     (s\\<^sub>3 @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r", "by auto"], ["proof (state)\nthis:\n  k\\<^sub>2 =\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "with only_owner_enter_normal[OF 1 safe_safe[OF 3]] 2"], ["proof (chain)\npicking this:\n  (?k,\n   roomk\n    (s\\<^sub>3 @\n     [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n    r)\n  \\<in> cards\n         (s\\<^sub>3 @\n          [Enter g' r (k, k')] @\n          s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n         ?g \\<Longrightarrow>\n  owns\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>?g\\<rfloor>\n  c \\<in> cards\n           (s\\<^sub>3 @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           g\n  k\\<^sub>2 =\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r", "have \"owns ?t r =  \\<lfloor>g\\<rfloor>\""], ["proof (prove)\nusing this:\n  (?k,\n   roomk\n    (s\\<^sub>3 @\n     [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n    r)\n  \\<in> cards\n         (s\\<^sub>3 @\n          [Enter g' r (k, k')] @\n          s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n         ?g \\<Longrightarrow>\n  owns\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>?g\\<rfloor>\n  c \\<in> cards\n           (s\\<^sub>3 @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           g\n  k\\<^sub>2 =\n  roomk\n   (s\\<^sub>3 @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r\n\ngoal (1 subgoal):\n 1. owns\n     ((e # s\\<^sub>3) @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r =\n    \\<lfloor>g\\<rfloor>", "by auto"], ["proof (state)\nthis:\n  owns\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "moreover"], ["proof (state)\nthis:\n  owns\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>g\\<rfloor>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "have \"owns ?t r = \\<lfloor>g'\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. owns\n     ((e # s\\<^sub>3) @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r =\n    \\<lfloor>g'\\<rfloor>", "using \\<open>hotel ?t\\<close> \\<open>no_Check_in ((e \\<cdot> s\\<^sub>3) @ s\\<^sub>2) r\\<close>"], ["proof (prove)\nusing this:\n  hotel\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  no_Check_in ((e # s\\<^sub>3) @ s\\<^sub>2) r\n\ngoal (1 subgoal):\n 1. owns\n     ((e # s\\<^sub>3) @\n      [Enter g' r (k, k')] @\n      s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n     r =\n    \\<lfloor>g'\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  owns\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>g'\\<rfloor>\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> g' = g\n 2. \\<not> ?P \\<Longrightarrow> g' = g", "ultimately"], ["proof (chain)\npicking this:\n  owns\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>g\\<rfloor>\n  owns\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>g'\\<rfloor>", "show \"g' = g\""], ["proof (prove)\nusing this:\n  owns\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>g\\<rfloor>\n  owns\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n   r =\n  \\<lfloor>g'\\<rfloor>\n\ngoal (1 subgoal):\n 1. g' = g", "by simp"], ["proof (state)\nthis:\n  g' = g\n\ngoal (1 subgoal):\n 1. g'' \\<noteq> g \\<Longrightarrow> g' = g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. g'' \\<noteq> g \\<Longrightarrow> g' = g", "assume \"g'' \\<noteq> g\""], ["proof (state)\nthis:\n  g'' \\<noteq> g\n\ngoal (1 subgoal):\n 1. g'' \\<noteq> g \\<Longrightarrow> g' = g", "thus \"g' = g\""], ["proof (prove)\nusing this:\n  g'' \\<noteq> g\n\ngoal (1 subgoal):\n 1. g' = g", "using Cons"], ["proof (prove)\nusing this:\n  g'' \\<noteq> g\n  \\<lbrakk>hotel\n            (s\\<^sub>3 @\n             [Enter g' r (k, k')] @\n             s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n   no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n   g \\<in> isin\n            (s\\<^sub>3 @\n             [Enter g' r (k, k')] @\n             s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n            r\\<rbrakk>\n  \\<Longrightarrow> g' = g\n  hotel\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  no_Check_in ((e # s\\<^sub>3) @ s\\<^sub>2) r\n  g \\<in> isin\n           ((e # s\\<^sub>3) @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           r\n\ngoal (1 subgoal):\n 1. g' = g", "by auto"], ["proof (state)\nthis:\n  g' = g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g' = g\n\ngoal (1 subgoal):\n 1. r' \\<noteq> r \\<Longrightarrow> g' = g", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r' \\<noteq> r \\<Longrightarrow> g' = g", "assume \"r' \\<noteq> r\""], ["proof (state)\nthis:\n  r' \\<noteq> r\n\ngoal (1 subgoal):\n 1. r' \\<noteq> r \\<Longrightarrow> g' = g", "thus \"g' = g\""], ["proof (prove)\nusing this:\n  r' \\<noteq> r\n\ngoal (1 subgoal):\n 1. g' = g", "using Cons"], ["proof (prove)\nusing this:\n  r' \\<noteq> r\n  \\<lbrakk>hotel\n            (s\\<^sub>3 @\n             [Enter g' r (k, k')] @\n             s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n   no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n   g \\<in> isin\n            (s\\<^sub>3 @\n             [Enter g' r (k, k')] @\n             s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n            r\\<rbrakk>\n  \\<Longrightarrow> g' = g\n  hotel\n   ((e # s\\<^sub>3) @\n    [Enter g' r (k, k')] @ s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n  no_Check_in ((e # s\\<^sub>3) @ s\\<^sub>2) r\n  g \\<in> isin\n           ((e # s\\<^sub>3) @\n            [Enter g' r (k, k')] @\n            s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n           r\n\ngoal (1 subgoal):\n 1. g' = g", "by auto"], ["proof (state)\nthis:\n  g' = g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g' = g\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13. e = Check_in x11 x12 x13 \\<Longrightarrow> g' = g\n 2. \\<And>x31 x32. e = Exit x31 x32 \\<Longrightarrow> g' = g", "qed (insert Cons, auto)"], ["proof (state)\nthis:\n  g' = g\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>hotel\n            (s\\<^sub>3 @\n             [Enter g' r (k, k')] @\n             s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1);\n   no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r;\n   g \\<in> isin\n            (s\\<^sub>3 @\n             [Enter g' r (k, k')] @\n             s\\<^sub>2 @ [Check_in g' r (k, k')] @ s\\<^sub>1)\n            r\\<rbrakk>\n  \\<Longrightarrow> g' = g\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "}"], ["proof (state)\nthis:\n  \\<lbrakk>isin (?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12)\n            r =\n           {};\n   hotel\n    (?s\\<^sub>32 @\n     [Enter ?g'2 r (?k2, ?k'2)] @\n     ?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12);\n   no_Check_in (?s\\<^sub>32 @ ?s\\<^sub>22) r;\n   g \\<in> isin\n            (?s\\<^sub>32 @\n             [Enter ?g'2 r (?k2, ?k'2)] @\n             ?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12)\n            r\\<rbrakk>\n  \\<Longrightarrow> ?g'2 = g\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "with assms"], ["proof (chain)\npicking this:\n  hotel s\n  safe s r\n  g \\<in> isin s r\n  \\<lbrakk>isin (?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12)\n            r =\n           {};\n   hotel\n    (?s\\<^sub>32 @\n     [Enter ?g'2 r (?k2, ?k'2)] @\n     ?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12);\n   no_Check_in (?s\\<^sub>32 @ ?s\\<^sub>22) r;\n   g \\<in> isin\n            (?s\\<^sub>32 @\n             [Enter ?g'2 r (?k2, ?k'2)] @\n             ?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12)\n            r\\<rbrakk>\n  \\<Longrightarrow> ?g'2 = g", "show \"owns s r = \\<lfloor>g\\<rfloor>\""], ["proof (prove)\nusing this:\n  hotel s\n  safe s r\n  g \\<in> isin s r\n  \\<lbrakk>isin (?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12)\n            r =\n           {};\n   hotel\n    (?s\\<^sub>32 @\n     [Enter ?g'2 r (?k2, ?k'2)] @\n     ?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12);\n   no_Check_in (?s\\<^sub>32 @ ?s\\<^sub>22) r;\n   g \\<in> isin\n            (?s\\<^sub>32 @\n             [Enter ?g'2 r (?k2, ?k'2)] @\n             ?s\\<^sub>22 @ [Check_in ?g'2 r (?k2, ?k'2)] @ ?s\\<^sub>12)\n            r\\<rbrakk>\n  \\<Longrightarrow> ?g'2 = g\n\ngoal (1 subgoal):\n 1. owns s r = \\<lfloor>g\\<rfloor>", "by(auto simp:safe_def)"], ["proof (state)\nthis:\n  owns s r = \\<lfloor>g\\<rfloor>\n\ngoal:\nNo subgoals!", "qed"], ["", "text_raw\\<open>\n  \\end{minipage}\n  \\end{center}\n  \\caption{Isar proof of Theorem~\\ref{safe}}\\label{fig:proof}\n  \\end{figure}\n\\<close>"], ["", "text\\<open>\n\\subsection{Verifying safety}\n\nLemma~\\ref{state-lemmas} largely carries over after replacing\n\\mbox{@{prop\"s : reach\"}} by @{prop\"hotel s\"} and @{const safe} by\n@{const safe\\<^sub>0}. Only properties \\ref{currk_inj} and\n\\ref{key1_not_currk} no longer hold because we no longer assume that\n@{const roomk} is initially injective.\nThey are replaced by two somewhat similar properties:\n\\begin{lemma}\\label{trace-lemmas}\\mbox{}\n\\begin{enumerate}\n\\item @{thm[display,margin=80]currk_Check_in}\n\\item \\label{no_checkin_no_newkey}\n  @{thm[display,margin=100] no_checkin_no_newkey}\n\\end{enumerate}\n\\end{lemma}\nBoth are proved by induction on \\<open>s\\<^sub>2\\<close>.\nIn addition we need some easy structural properties:\n\\begin{lemma}\\label{app-lemmas}\n\\begin{enumerate}\n\\item @{thm issued_app}\n\\item @{thm owns_app}\n\\item \\label{currk_app} @{thm currk_app}\n\\end{enumerate}\n\\end{lemma}\n\nThe main theorem again correspond closely to its state based\ncounterpart:\n\\begin{theorem}\\label{safe}\n@{thm[mode=IfThen] safe}\n\\end{theorem}\nLet us examine the proof of this theorem to show how it differs from\nthe state based version. For the core of the proof let\n@{prop\"s = s\\<^sub>3 @ [Enter g' r (k,k')] @ s\\<^sub>2 @ [Check_in g' r (k,k')] @ s\\<^sub>1\"}\nand assume\n@{prop\"isin (s\\<^sub>2 @ [Check_in g' r (k,k')] @ s\\<^sub>1) r = {}\"} (0). By induction on\n\\<open>s\\<^sub>3\\<close> we prove\n@{prop[display]\"\\<lbrakk>hotel s; no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r; g \\<in> isin s r \\<rbrakk> \\<Longrightarrow> g' = g\"}\nThe actual theorem follows by definition of @{const safe}.\nThe base case of the induction follows from (0). For the induction step let\n@{prop\"t = (e#s\\<^sub>3) @ [Enter g' r (k,k')] @ s\\<^sub>2 @ [Check_in g' r (k,k')] @ s\\<^sub>1\"}.\nWe assume @{prop\"hotel t\"}, @{prop\"no_Check_in ((e#s\\<^sub>3) @ s\\<^sub>2) r\"},\nand @{prop\"g \\<in> isin s r\"}, and show @{prop\"g' = g\"}.\nThe proof is by case distinction on the event \\<open>e\\<close>.\nThe cases @{const Check_in} and @{const Exit} follow directly from the\ninduction hypothesis because the set of occupants of \\<open>r\\<close>\ncan only decrease. Now we focus on the case @{prop\"e = Enter g'' r' c\"}.\nIf @{prop\"r' \\<noteq> r\"} the set of occupants of \\<open>r\\<close> remains unchanged\nand the claim follow directly from the induction hypothesis.\nIf @{prop\"g'' \\<noteq> g\"} then \\<open>g\\<close> must already have been in \\<open>r\\<close>\nbefore the \\<open>Enter\\<close> event and the claim again follows directly\nfrom the induction hypothesis. Now assume @{prop\"r' = r\"}\nand @{prop\"g'' = g\"}.\nFrom @{prop\"hotel t\"} we obtain @{prop\"hotel s\"} (1) and\n@{prop\"c \\<in> cards s g\"} (2), and\nfrom @{prop\"no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r\"} and (0)\nwe obtain @{prop\"safe s r\"} (3). Let @{prop\"c = (k\\<^sub>1,k\\<^sub>2)\"}.\nFrom Lemma~\\ref{state-lemmas}.\\ref{safe_roomk_currk} and\nLemma~\\ref{app-lemmas}.\\ref{currk_app} we obtain\n\\<open>roomk s r = currk s r = k'\\<close>.\nHence @{prop\"k\\<^sub>1 \\<noteq> roomk s r\"} by\nLemma~\\ref{trace-lemmas}.\\ref{no_checkin_no_newkey}\nusing (1), (2) and @{prop\"no_Check_in (s\\<^sub>3 @ s\\<^sub>2) r\"}.\nHence @{prop\"k\\<^sub>2 = roomk s r\"} by @{prop\"hotel t\"}.\nWith Lemma~\\ref{state-lemmas}.\\ref{safe_only_owner_enter_normal}\nand (1--3) we obtain\n@{prop\"owns t r =  \\<lfloor>g\\<rfloor>\"}. At the same time we have @{prop\"owns t r = \\<lfloor>g'\\<rfloor>\"}\nbecause @{prop\"hotel t\"} and @{prop\"no_Check_in ((e # s\\<^sub>3) @ s\\<^sub>2) r\"}: nobody\nhas checked in to room \\<open>r\\<close> after \\<open>g'\\<close>. Thus the claim\n@{prop\"g' = g\"} follows.\n\nThe details of this proof differ from those of Theorem~\\ref{safe-state}\nbut the structure is very similar.\n\n\\subsection{Eliminating \\isa{isin}}\n\nIn the state based approach we needed @{const isin} to express our\nsafety guarantees. In the presence of traces, we can do away with it\nand talk about @{const Enter} events instead. We show that if somebody\nenters a safe room, he is the owner:\n\\begin{theorem}\\label{Enter_safe}\n@{thm[mode=IfThen] Enter_safe}\n\\end{theorem}\nFrom @{prop\"safe\\<^sub>0 s r\"} it follows that \\<open>s\\<close> must be of the form\n@{term\"s\\<^sub>2 @ [Check_in g\\<^sub>0 r c'] @ s\\<^sub>1\"} such that @{prop\"no_Check_in s\\<^sub>2 r\"}.\nLet @{prop\"c = (x,y)\"} and @{prop\"c' = (k,k')\"}.\nBy Lemma~\\ref{state-lemmas}.\\ref{safe_roomk_currk} we have\n\\<open>roomk s r = currk s r = k'\\<close>.\nFrom @{prop\"hotel(Enter g r c # s)\"} it follows that\n@{prop\"(x,y) \\<in> cards s g\"} and @{prop\"k' \\<in> {x,y}\"}.\nBy Lemma~\\ref{trace-lemmas}.\\ref{no_checkin_no_newkey}\n@{prop\"x = k'\"} would contradict @{prop\"(x,y) \\<in> cards s g\"}.\nHence @{prop\"y = k'\"}.\nWith Lemma~\\ref{state-lemmas}.\\ref{safe_only_owner_enter_normal}\nwe obtain @{prop\"owns s r = \\<lfloor>g\\<rfloor>\"}.\n\nHaving dispensed with @{const isin} we could also eliminate @{const\nExit} to arrive at a model closer to the ones in~\\cite{Jackson06}.\n\nFinally one may quibble that all the safety theorems proved so far\nassume safety of the room at that point in time when somebody enters\nit.  That is, the owner of the room must be sure that once a room is\nsafe, it stays safe, in order to profit from those safety theorems.\nOf course, this is the case as long as nobody else checks in to that room:\n\\begin{lemma}\n@{thm[mode=IfThen]safe_future}\n\\end{lemma}\nIt follows easily that Theorem~\\ref{Enter_safe} also extends until check-in:\n\\begin{corollary}\n@{thm[mode=IfThen]Enter_safe_future}\n\\end{corollary}\n\n\\subsection{Completeness of @{const safe}}\n\nHaving proved correctness of @{const safe}, i.e.\\ that safe behaviour\nprotects against intruders, one may wonder if @{const safe} is\ncomplete, i.e.\\ if it covers all safe behaviour, or if it is too\nrestrictive. It turns out that @{const safe} is incomplete for two\ndifferent reasons.  The trivial one is that in case @{const initk} is\ninjective, every room is protected against intruders right from the\nstart. That is, @{term\"[Check_in g r c]\"} will only allow @{term g} to\nenter \\<open>r\\<close> until somebody else checks in to \\<open>r\\<close>. The\nsecond, more subtle incompleteness is that even if there are previous\nowners of a room, it may be safe to enter a room with an old card\n\\<open>c\\<close>: one merely needs to make sure that no other guest checked\nin after the check-in where one obtained \\<open>c\\<close>. However,\nformalizing this is not only messy, it is also somewhat pointless:\nthis liberalization is not something a guest can take advantage of\nbecause there is no (direct) way he can find out which of his cards\nmeets this criterion. But without this knowledge, the only safe thing\nto do is to make sure he has used his latest card. This incompleteness\napplies to the state based model as well.\n\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}