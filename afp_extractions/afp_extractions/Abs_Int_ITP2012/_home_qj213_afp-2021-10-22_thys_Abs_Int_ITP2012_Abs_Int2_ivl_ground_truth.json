{"file_name": "/home/qj213/afp-2021-10-22/thys/Abs_Int_ITP2012/Abs_Int2_ivl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Abs_Int_ITP2012", "problem_names": ["lemma [simp]: \"is_empty(I l h) =\n  (case l of Some l \\<Rightarrow> (case h of Some h \\<Rightarrow> h<l | None \\<Rightarrow> False) | None \\<Rightarrow> False)\"", "lemma [simp]: \"is_empty i \\<Longrightarrow> \\<gamma>_ivl i = {}\"", "lemma gamma_minus_ivl:\n  \"n1 : \\<gamma>_ivl i1 \\<Longrightarrow> n2 : \\<gamma>_ivl i2 \\<Longrightarrow> n1-n2 : \\<gamma>_ivl(minus_ivl i1 i2)\"", "lemma mono_minus_ivl:\n  \"i1 \\<sqsubseteq> i1' \\<Longrightarrow> i2 \\<sqsubseteq> i2' \\<Longrightarrow> minus_ivl i1 i2 \\<sqsubseteq> minus_ivl i1' i2'\""], "translations": [["", "lemma [simp]: \"is_empty(I l h) =\n  (case l of Some l \\<Rightarrow> (case h of Some h \\<Rightarrow> h<l | None \\<Rightarrow> False) | None \\<Rightarrow> False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_empty (I l h) =\n    (case l of None \\<Rightarrow> False\n     | Some l \\<Rightarrow>\n         case h of None \\<Rightarrow> False | Some h \\<Rightarrow> h < l)", "by(auto split:option.split)"], ["", "lemma [simp]: \"is_empty i \\<Longrightarrow> \\<gamma>_ivl i = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_empty i \\<Longrightarrow> \\<gamma>_ivl i = {}", "by(auto simp add: \\<gamma>_ivl_def split: ivl.split option.split)"], ["", "definition \"plus_ivl i1 i2 = (if is_empty i1 | is_empty i2 then empty else\n  case (i1,i2) of (I l1 h1, I l2 h2) \\<Rightarrow> I (l1+l2) (h1+h2))\""], ["", "instantiation ivl :: SL_top\nbegin"], ["", "definition le_option :: \"bool \\<Rightarrow> int option \\<Rightarrow> int option \\<Rightarrow> bool\" where\n\"le_option pos x y =\n (case x of (Some i) \\<Rightarrow> (case y of Some j \\<Rightarrow> i\\<le>j | None \\<Rightarrow> pos)\n  | None \\<Rightarrow> (case y of Some j \\<Rightarrow> \\<not>pos | None \\<Rightarrow> True))\""], ["", "fun le_aux where\n\"le_aux (I l1 h1) (I l2 h2) = (le_option False l2 l1 & le_option True h1 h2)\""], ["", "definition le_ivl where\n\"i1 \\<sqsubseteq> i2 =\n (if is_empty i1 then True else\n  if is_empty i2 then False else le_aux i1 i2)\""], ["", "definition min_option :: \"bool \\<Rightarrow> int option \\<Rightarrow> int option \\<Rightarrow> int option\" where\n\"min_option pos o1 o2 = (if le_option pos o1 o2 then o1 else o2)\""], ["", "definition max_option :: \"bool \\<Rightarrow> int option \\<Rightarrow> int option \\<Rightarrow> int option\" where\n\"max_option pos o1 o2 = (if le_option pos o1 o2 then o2 else o1)\""], ["", "definition \"i1 \\<squnion> i2 =\n (if is_empty i1 then i2 else if is_empty i2 then i1\n  else case (i1,i2) of (I l1 h1, I l2 h2) \\<Rightarrow>\n          I (min_option False l1 l2) (max_option True h1 h2))\""], ["", "definition \"\\<top> = {\\<dots>}\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ivl, SL_top_class)", "proof (standard, goal_cases)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 3. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 4. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 5. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 6. \\<And>x. x \\<sqsubseteq> \\<top>", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 3. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 4. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 5. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 6. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> x", "by(cases x, simp add: le_ivl_def le_option_def split: option.split)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> x\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 2. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 4. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 5. \\<And>x. x \\<sqsubseteq> \\<top>", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 2. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 4. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 5. \\<And>x. x \\<sqsubseteq> \\<top>", "case (2 x y z)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y\n  y \\<sqsubseteq> z\n\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 2. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 4. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 5. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by(cases x, cases y, cases z, auto simp: le_ivl_def le_option_def split: option.splits if_splits)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal (4 subgoals):\n 1. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 4. \\<And>x. x \\<sqsubseteq> \\<top>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 4. \\<And>x. x \\<sqsubseteq> \\<top>", "case (3 x y)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 4. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> x \\<squnion> y", "by(cases x, cases y, simp add: le_ivl_def join_ivl_def le_option_def min_option_def max_option_def split: option.splits)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> x \\<squnion> y\n\ngoal (3 subgoals):\n 1. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 3. \\<And>x. x \\<sqsubseteq> \\<top>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 3. \\<And>x. x \\<sqsubseteq> \\<top>", "case (4 x y)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 3. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<squnion> x", "by(cases x, cases y, simp add: le_ivl_def join_ivl_def le_option_def min_option_def max_option_def split: option.splits)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y \\<squnion> x\n\ngoal (2 subgoals):\n 1. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 2. \\<And>x. x \\<sqsubseteq> \\<top>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 2. \\<And>x. x \\<sqsubseteq> \\<top>", "case (5 x y z)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y\n  z \\<sqsubseteq> y\n\ngoal (2 subgoals):\n 1. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 2. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y\n  z \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. x \\<squnion> z \\<sqsubseteq> y", "by(cases x, cases y, cases z, auto simp add: le_ivl_def join_ivl_def le_option_def min_option_def max_option_def split: option.splits if_splits)"], ["proof (state)\nthis:\n  x \\<squnion> z \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<sqsubseteq> \\<top>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<sqsubseteq> \\<top>", "case (6 x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> \\<top>", "by(cases x, simp add: Top_ivl_def le_ivl_def le_option_def split: option.split)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation ivl :: L_top_bot\nbegin"], ["", "definition \"i1 \\<sqinter> i2 = (if is_empty i1 \\<or> is_empty i2 then empty else\n  case (i1,i2) of (I l1 h1, I l2 h2) \\<Rightarrow>\n    I (max_option False l1 l2) (min_option True h1 h2))\""], ["", "definition \"\\<bottom> = empty\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(ivl, L_top_bot_class)", "proof (standard, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<sqsubseteq> x\n 2. \\<And>x y. x \\<sqinter> y \\<sqsubseteq> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<sqinter> z\n 4. \\<And>x. \\<bottom> \\<sqsubseteq> x", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<sqsubseteq> x\n 2. \\<And>x y. x \\<sqinter> y \\<sqsubseteq> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<sqinter> z\n 4. \\<And>x. \\<bottom> \\<sqsubseteq> x", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ \\<sqinter> y_ \\<sqsubseteq> x_", "by (simp add:meet_ivl_def empty_def le_ivl_def le_option_def max_option_def min_option_def split: ivl.splits option.splits)"], ["proof (state)\nthis:\n  x_ \\<sqinter> y_ \\<sqsubseteq> x_\n\ngoal (3 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<sqsubseteq> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<sqinter> z\n 3. \\<And>x. \\<bottom> \\<sqsubseteq> x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<sqsubseteq> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<sqinter> z\n 3. \\<And>x. \\<bottom> \\<sqsubseteq> x", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>x y. x \\<sqinter> y \\<sqsubseteq> y\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<sqinter> z\n 3. \\<And>x. \\<bottom> \\<sqsubseteq> x", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x_ \\<sqinter> y_ \\<sqsubseteq> y_", "by (simp add: empty_def meet_ivl_def le_ivl_def le_option_def max_option_def min_option_def split: ivl.splits option.splits)"], ["proof (state)\nthis:\n  x_ \\<sqinter> y_ \\<sqsubseteq> y_\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<sqinter> z\n 2. \\<And>x. \\<bottom> \\<sqsubseteq> x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<sqinter> z\n 2. \\<And>x. \\<bottom> \\<sqsubseteq> x", "case (3 x y z)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y\n  x \\<sqsubseteq> z\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; x \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> y \\<sqinter> z\n 2. \\<And>x. \\<bottom> \\<sqsubseteq> x", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y\n  x \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<sqinter> z", "by (cases x, cases y, cases z, auto simp add: le_ivl_def meet_ivl_def empty_def le_option_def max_option_def min_option_def split: option.splits if_splits)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y \\<sqinter> z\n\ngoal (1 subgoal):\n 1. \\<And>x. \\<bottom> \\<sqsubseteq> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<bottom> \\<sqsubseteq> x", "case (4 x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x. \\<bottom> \\<sqsubseteq> x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<sqsubseteq> x", "by(cases x, simp add: bot_ivl_def empty_def le_ivl_def)"], ["proof (state)\nthis:\n  \\<bottom> \\<sqsubseteq> x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation option :: (minus)minus\nbegin"], ["", "fun minus_option where\n\"Some x - Some y = Some(x-y)\" |\n\"_ - _ = None\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a option, minus_class)", ".."], ["", "end"], ["", "definition \"minus_ivl i1 i2 = (if is_empty i1 | is_empty i2 then empty else\n  case (i1,i2) of (I l1 h1, I l2 h2) \\<Rightarrow> I (l1-h2) (h1-l2))\""], ["", "lemma gamma_minus_ivl:\n  \"n1 : \\<gamma>_ivl i1 \\<Longrightarrow> n2 : \\<gamma>_ivl i2 \\<Longrightarrow> n1-n2 : \\<gamma>_ivl(minus_ivl i1 i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n1 \\<in> \\<gamma>_ivl i1; n2 \\<in> \\<gamma>_ivl i2\\<rbrakk>\n    \\<Longrightarrow> n1 - n2 \\<in> \\<gamma>_ivl (minus_ivl i1 i2)", "by(auto simp add: minus_ivl_def \\<gamma>_ivl_def split: ivl.splits option.splits)"], ["", "definition \"filter_plus_ivl i i1 i2 = (\\<^cancel>\\<open>if is_empty i then empty else\\<close>\n  i1 \\<sqinter> minus_ivl i i2, i2 \\<sqinter> minus_ivl i i1)\""], ["", "fun filter_less_ivl :: \"bool \\<Rightarrow> ivl \\<Rightarrow> ivl \\<Rightarrow> ivl * ivl\" where\n\"filter_less_ivl res (I l1 h1) (I l2 h2) =\n  (if is_empty(I l1 h1) \\<or> is_empty(I l2 h2) then (empty, empty) else\n   if res\n   then (I l1 (min_option True h1 (h2 - Some 1)),\n         I (max_option False (l1 + Some 1) l2) h2)\n   else (I (max_option False l1 l2) h1, I l2 (min_option True h1 h2)))\""], ["", "global_interpretation Val_abs\nwhere \\<gamma> = \\<gamma>_ivl and num' = num_ivl and plus' = plus_ivl"], ["proof (prove)\ngoal (1 subgoal):\n 1. Val_abs \\<gamma>_ivl num_ivl plus_ivl", "proof (standard, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       a \\<sqsubseteq> b \\<Longrightarrow>\n       \\<gamma>_ivl a \\<subseteq> \\<gamma>_ivl b\n 2. \\<gamma>_ivl \\<top> = UNIV\n 3. \\<And>n. n \\<in> \\<gamma>_ivl (num_ivl n)\n 4. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "case 1"], ["proof (state)\nthis:\n  a_ \\<sqsubseteq> b_\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       a \\<sqsubseteq> b \\<Longrightarrow>\n       \\<gamma>_ivl a \\<subseteq> \\<gamma>_ivl b\n 2. \\<gamma>_ivl \\<top> = UNIV\n 3. \\<And>n. n \\<in> \\<gamma>_ivl (num_ivl n)\n 4. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "thus ?case"], ["proof (prove)\nusing this:\n  a_ \\<sqsubseteq> b_\n\ngoal (1 subgoal):\n 1. \\<gamma>_ivl a_ \\<subseteq> \\<gamma>_ivl b_", "by(auto simp: \\<gamma>_ivl_def le_ivl_def le_option_def split: ivl.split option.split if_splits)"], ["proof (state)\nthis:\n  \\<gamma>_ivl a_ \\<subseteq> \\<gamma>_ivl b_\n\ngoal (3 subgoals):\n 1. \\<gamma>_ivl \\<top> = UNIV\n 2. \\<And>n. n \\<in> \\<gamma>_ivl (num_ivl n)\n 3. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<gamma>_ivl \\<top> = UNIV\n 2. \\<And>n. n \\<in> \\<gamma>_ivl (num_ivl n)\n 3. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<gamma>_ivl \\<top> = UNIV\n 2. \\<And>n. n \\<in> \\<gamma>_ivl (num_ivl n)\n 3. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>_ivl \\<top> = UNIV", "by(simp add: \\<gamma>_ivl_def Top_ivl_def)"], ["proof (state)\nthis:\n  \\<gamma>_ivl \\<top> = UNIV\n\ngoal (2 subgoals):\n 1. \\<And>n. n \\<in> \\<gamma>_ivl (num_ivl n)\n 2. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. n \\<in> \\<gamma>_ivl (num_ivl n)\n 2. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>n. n \\<in> \\<gamma>_ivl (num_ivl n)\n 2. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. n_ \\<in> \\<gamma>_ivl (num_ivl n_)", "by(simp add: \\<gamma>_ivl_def num_ivl_def)"], ["proof (state)\nthis:\n  n_ \\<in> \\<gamma>_ivl (num_ivl n_)\n\ngoal (1 subgoal):\n 1. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "case 4"], ["proof (state)\nthis:\n  n1_ \\<in> \\<gamma>_ivl a1_\n  n2_ \\<in> \\<gamma>_ivl a2_\n\ngoal (1 subgoal):\n 1. \\<And>n1 a1 n2 a2.\n       \\<lbrakk>n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 + n2 \\<in> \\<gamma>_ivl (plus_ivl a1 a2)", "thus ?case"], ["proof (prove)\nusing this:\n  n1_ \\<in> \\<gamma>_ivl a1_\n  n2_ \\<in> \\<gamma>_ivl a2_\n\ngoal (1 subgoal):\n 1. n1_ + n2_ \\<in> \\<gamma>_ivl (plus_ivl a1_ a2_)", "by(auto simp add: \\<gamma>_ivl_def plus_ivl_def split: ivl.split option.splits)"], ["proof (state)\nthis:\n  n1_ + n2_ \\<in> \\<gamma>_ivl (plus_ivl a1_ a2_)\n\ngoal:\nNo subgoals!", "qed"], ["", "global_interpretation Val_abs1_gamma\nwhere \\<gamma> = \\<gamma>_ivl and num' = num_ivl and plus' = plus_ivl\ndefines aval_ivl = aval'"], ["proof (prove)\ngoal (1 subgoal):\n 1. Val_abs1_gamma num_ivl plus_ivl \\<gamma>_ivl", "proof (standard, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a1 a2.\n       \\<gamma>_ivl a1 \\<inter> \\<gamma>_ivl a2\n       \\<subseteq> \\<gamma>_ivl (a1 \\<sqinter> a2)\n 2. \\<gamma>_ivl \\<bottom> = {}", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>a1 a2.\n       \\<gamma>_ivl a1 \\<inter> \\<gamma>_ivl a2\n       \\<subseteq> \\<gamma>_ivl (a1 \\<sqinter> a2)\n 2. \\<gamma>_ivl \\<bottom> = {}", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>_ivl a1_ \\<inter> \\<gamma>_ivl a2_\n    \\<subseteq> \\<gamma>_ivl (a1_ \\<sqinter> a2_)", "by(auto simp add: \\<gamma>_ivl_def meet_ivl_def empty_def min_option_def max_option_def split: ivl.split option.split)"], ["proof (state)\nthis:\n  \\<gamma>_ivl a1_ \\<inter> \\<gamma>_ivl a2_\n  \\<subseteq> \\<gamma>_ivl (a1_ \\<sqinter> a2_)\n\ngoal (1 subgoal):\n 1. \\<gamma>_ivl \\<bottom> = {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma>_ivl \\<bottom> = {}", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<gamma>_ivl \\<bottom> = {}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>_ivl \\<bottom> = {}", "by(auto simp add: bot_ivl_def \\<gamma>_ivl_def empty_def)"], ["proof (state)\nthis:\n  \\<gamma>_ivl \\<bottom> = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mono_minus_ivl:\n  \"i1 \\<sqsubseteq> i1' \\<Longrightarrow> i2 \\<sqsubseteq> i2' \\<Longrightarrow> minus_ivl i1 i2 \\<sqsubseteq> minus_ivl i1' i2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i1 \\<sqsubseteq> i1'; i2 \\<sqsubseteq> i2'\\<rbrakk>\n    \\<Longrightarrow> minus_ivl i1 i2 \\<sqsubseteq> minus_ivl i1' i2'", "apply(auto simp add: minus_ivl_def empty_def le_ivl_def le_option_def split: ivl.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>i2' = I x1a x2a; i1' = I x1 x2; i2 = I x1c x2c;\n        i1 = I x1b x2b;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1 - x2a of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2 - x1a of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l;\n        case x1 of\n        None \\<Rightarrow>\n          case x1b of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1b of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2b of\n        None \\<Rightarrow>\n          case x2 of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2 of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x1a of\n        None \\<Rightarrow>\n          case x1c of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1c of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2c of\n        None \\<Rightarrow>\n          case x2a of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2a of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> case x1b - x2c of None \\<Rightarrow> False\n                         | Some l \\<Rightarrow>\n                             case x2b - x1c of None \\<Rightarrow> False\n                             | Some h \\<Rightarrow> h < l\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>i2' = I x1a x2a; i1' = I x1 x2; i2 = I x1c x2c;\n        i1 = I x1b x2b;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1 - x2a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 - x1a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b - x2c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b - x1c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1 of\n        None \\<Rightarrow>\n          case x1b of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1b of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2b of\n        None \\<Rightarrow>\n          case x2 of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2 of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x1a of\n        None \\<Rightarrow>\n          case x1c of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1c of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2c of\n        None \\<Rightarrow>\n          case x2a of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2a of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> case x1 - x2a of\n                         None \\<Rightarrow>\n                           case x1b - x2c of None \\<Rightarrow> True\n                           | Some j \\<Rightarrow> \\<not> False\n                         | Some i \\<Rightarrow>\n                             case x1b - x2c of None \\<Rightarrow> False\n                             | Some j \\<Rightarrow> i \\<le> j\n 3. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>i2' = I x1a x2a; i1' = I x1 x2; i2 = I x1c x2c;\n        i1 = I x1b x2b;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1 - x2a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 - x1a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b - x2c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b - x1c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1 of\n        None \\<Rightarrow>\n          case x1b of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1b of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2b of\n        None \\<Rightarrow>\n          case x2 of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2 of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x1a of\n        None \\<Rightarrow>\n          case x1c of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1c of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2c of\n        None \\<Rightarrow>\n          case x2a of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2a of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> case x2b - x1c of\n                         None \\<Rightarrow>\n                           case x2 - x1a of None \\<Rightarrow> True\n                           | Some j \\<Rightarrow> \\<not> True\n                         | Some i \\<Rightarrow>\n                             case x2 - x1a of None \\<Rightarrow> True\n                             | Some j \\<Rightarrow> i \\<le> j", "apply(simp split: option.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>i2' = I x1a x2a; i1' = I x1 x2; i2 = I x1c x2c;\n        i1 = I x1b x2b;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1 - x2a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 - x1a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b - x2c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b - x1c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1 of\n        None \\<Rightarrow>\n          case x1b of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1b of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2b of\n        None \\<Rightarrow>\n          case x2 of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2 of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x1a of\n        None \\<Rightarrow>\n          case x1c of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1c of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2c of\n        None \\<Rightarrow>\n          case x2a of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2a of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> case x1 - x2a of\n                         None \\<Rightarrow>\n                           case x1b - x2c of None \\<Rightarrow> True\n                           | Some j \\<Rightarrow> \\<not> False\n                         | Some i \\<Rightarrow>\n                             case x1b - x2c of None \\<Rightarrow> False\n                             | Some j \\<Rightarrow> i \\<le> j\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>i2' = I x1a x2a; i1' = I x1 x2; i2 = I x1c x2c;\n        i1 = I x1b x2b;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1 - x2a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 - x1a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b - x2c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b - x1c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1 of\n        None \\<Rightarrow>\n          case x1b of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1b of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2b of\n        None \\<Rightarrow>\n          case x2 of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2 of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x1a of\n        None \\<Rightarrow>\n          case x1c of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1c of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2c of\n        None \\<Rightarrow>\n          case x2a of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2a of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> case x2b - x1c of\n                         None \\<Rightarrow>\n                           case x2 - x1a of None \\<Rightarrow> True\n                           | Some j \\<Rightarrow> \\<not> True\n                         | Some i \\<Rightarrow>\n                             case x2 - x1a of None \\<Rightarrow> True\n                             | Some j \\<Rightarrow> i \\<le> j", "apply(simp split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>i2' = I x1a x2a; i1' = I x1 x2; i2 = I x1c x2c;\n        i1 = I x1b x2b;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1 - x2a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 - x1a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b - x2c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b - x1c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1 of\n        None \\<Rightarrow>\n          case x1b of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1b of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2b of\n        None \\<Rightarrow>\n          case x2 of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2 of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x1a of\n        None \\<Rightarrow>\n          case x1c of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> False\n        | Some i \\<Rightarrow>\n            case x1c of None \\<Rightarrow> False\n            | Some j \\<Rightarrow> i \\<le> j;\n        case x2c of\n        None \\<Rightarrow>\n          case x2a of None \\<Rightarrow> True\n          | Some j \\<Rightarrow> \\<not> True\n        | Some i \\<Rightarrow>\n            case x2a of None \\<Rightarrow> True\n            | Some j \\<Rightarrow> i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> case x2b - x1c of\n                         None \\<Rightarrow>\n                           case x2 - x1a of None \\<Rightarrow> True\n                           | Some j \\<Rightarrow> \\<not> True\n                         | Some i \\<Rightarrow>\n                             case x2 - x1a of None \\<Rightarrow> True\n                             | Some j \\<Rightarrow> i \\<le> j", "apply(simp split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "global_interpretation Val_abs1\nwhere \\<gamma> = \\<gamma>_ivl and num' = num_ivl and plus' = plus_ivl\nand test_num' = in_ivl\nand filter_plus' = filter_plus_ivl and filter_less' = filter_less_ivl"], ["proof (prove)\ngoal (1 subgoal):\n 1. Val_abs1 num_ivl plus_ivl \\<gamma>_ivl in_ivl filter_plus_ivl\n     filter_less_ivl", "proof (standard, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n a. in_ivl n a = (n \\<in> \\<gamma>_ivl a)\n 2. \\<And>a a1 a2 b1 b2 n1 n2.\n       \\<lbrakk>filter_plus_ivl a a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2;\n        n1 + n2 \\<in> \\<gamma>_ivl a\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2\n 3. \\<And>n1 n2 a1 a2 b1 b2.\n       \\<lbrakk>filter_less_ivl (n1 < n2) a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>n a. in_ivl n a = (n \\<in> \\<gamma>_ivl a)\n 2. \\<And>a a1 a2 b1 b2 n1 n2.\n       \\<lbrakk>filter_plus_ivl a a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2;\n        n1 + n2 \\<in> \\<gamma>_ivl a\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2\n 3. \\<And>n1 n2 a1 a2 b1 b2.\n       \\<lbrakk>filter_less_ivl (n1 < n2) a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. in_ivl n_ a_ = (n_ \\<in> \\<gamma>_ivl a_)", "by (simp add: \\<gamma>_ivl_def split: ivl.split option.split)"], ["proof (state)\nthis:\n  in_ivl n_ a_ = (n_ \\<in> \\<gamma>_ivl a_)\n\ngoal (2 subgoals):\n 1. \\<And>a a1 a2 b1 b2 n1 n2.\n       \\<lbrakk>filter_plus_ivl a a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2;\n        n1 + n2 \\<in> \\<gamma>_ivl a\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2\n 2. \\<And>n1 n2 a1 a2 b1 b2.\n       \\<lbrakk>filter_less_ivl (n1 < n2) a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a a1 a2 b1 b2 n1 n2.\n       \\<lbrakk>filter_plus_ivl a a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2;\n        n1 + n2 \\<in> \\<gamma>_ivl a\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2\n 2. \\<And>n1 n2 a1 a2 b1 b2.\n       \\<lbrakk>filter_less_ivl (n1 < n2) a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2", "case 2"], ["proof (state)\nthis:\n  filter_plus_ivl a_ a1_ a2_ = (b1_, b2_)\n  n1_ \\<in> \\<gamma>_ivl a1_\n  n2_ \\<in> \\<gamma>_ivl a2_\n  n1_ + n2_ \\<in> \\<gamma>_ivl a_\n\ngoal (2 subgoals):\n 1. \\<And>a a1 a2 b1 b2 n1 n2.\n       \\<lbrakk>filter_plus_ivl a a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2;\n        n1 + n2 \\<in> \\<gamma>_ivl a\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2\n 2. \\<And>n1 n2 a1 a2 b1 b2.\n       \\<lbrakk>filter_less_ivl (n1 < n2) a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2", "thus ?case"], ["proof (prove)\nusing this:\n  filter_plus_ivl a_ a1_ a2_ = (b1_, b2_)\n  n1_ \\<in> \\<gamma>_ivl a1_\n  n2_ \\<in> \\<gamma>_ivl a2_\n  n1_ + n2_ \\<in> \\<gamma>_ivl a_\n\ngoal (1 subgoal):\n 1. n1_ \\<in> \\<gamma>_ivl b1_ \\<and> n2_ \\<in> \\<gamma>_ivl b2_", "by(auto simp add: filter_plus_ivl_def)\n      (metis gamma_minus_ivl add_diff_cancel add.commute)+"], ["proof (state)\nthis:\n  n1_ \\<in> \\<gamma>_ivl b1_ \\<and> n2_ \\<in> \\<gamma>_ivl b2_\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 a1 a2 b1 b2.\n       \\<lbrakk>filter_less_ivl (n1 < n2) a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 a1 a2 b1 b2.\n       \\<lbrakk>filter_less_ivl (n1 < n2) a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2", "case (3 _ _ a1 a2)"], ["proof (state)\nthis:\n  filter_less_ivl (n1_ < n2_) a1 a2 = (b1_, b2_)\n  n1_ \\<in> \\<gamma>_ivl a1\n  n2_ \\<in> \\<gamma>_ivl a2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 a1 a2 b1 b2.\n       \\<lbrakk>filter_less_ivl (n1 < n2) a1 a2 = (b1, b2);\n        n1 \\<in> \\<gamma>_ivl a1; n2 \\<in> \\<gamma>_ivl a2\\<rbrakk>\n       \\<Longrightarrow> n1 \\<in> \\<gamma>_ivl b1 \\<and>\n                         n2 \\<in> \\<gamma>_ivl b2", "thus ?case"], ["proof (prove)\nusing this:\n  filter_less_ivl (n1_ < n2_) a1 a2 = (b1_, b2_)\n  n1_ \\<in> \\<gamma>_ivl a1\n  n2_ \\<in> \\<gamma>_ivl a2\n\ngoal (1 subgoal):\n 1. n1_ \\<in> \\<gamma>_ivl b1_ \\<and> n2_ \\<in> \\<gamma>_ivl b2_", "by(cases a1, cases a2,\n      auto simp: \\<gamma>_ivl_def min_option_def max_option_def le_option_def split: if_splits option.splits)"], ["proof (state)\nthis:\n  n1_ \\<in> \\<gamma>_ivl b1_ \\<and> n2_ \\<in> \\<gamma>_ivl b2_\n\ngoal:\nNo subgoals!", "qed"], ["", "global_interpretation Abs_Int1\nwhere \\<gamma> = \\<gamma>_ivl and num' = num_ivl and plus' = plus_ivl\nand test_num' = in_ivl\nand filter_plus' = filter_plus_ivl and filter_less' = filter_less_ivl\ndefines afilter_ivl = afilter\nand bfilter_ivl = bfilter\nand step_ivl = step'\nand AI_ivl = AI\nand aval_ivl' = aval''"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Int1 num_ivl plus_ivl in_ivl filter_plus_ivl filter_less_ivl\n     \\<gamma>_ivl", ".."], ["", "text\\<open>Monotonicity:\\<close>"], ["", "global_interpretation Abs_Int1_mono\nwhere \\<gamma> = \\<gamma>_ivl and num' = num_ivl and plus' = plus_ivl\nand test_num' = in_ivl\nand filter_plus' = filter_plus_ivl and filter_less' = filter_less_ivl"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Int1_mono num_ivl plus_ivl in_ivl filter_plus_ivl filter_less_ivl\n     \\<gamma>_ivl", "proof (standard, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a1 b1 a2 b2.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> plus_ivl a1 a2 \\<sqsubseteq> plus_ivl b1 b2\n 2. \\<And>a1 b1 a2 b2 r r'.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2;\n        r \\<sqsubseteq> r'\\<rbrakk>\n       \\<Longrightarrow> filter_plus_ivl r a1 a2 \\<sqsubseteq>\n                         filter_plus_ivl r' b1 b2\n 3. \\<And>a1 b1 a2 b2 bv.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> filter_less_ivl bv a1 a2 \\<sqsubseteq>\n                         filter_less_ivl bv b1 b2", "case 1"], ["proof (state)\nthis:\n  a1_ \\<sqsubseteq> b1_\n  a2_ \\<sqsubseteq> b2_\n\ngoal (3 subgoals):\n 1. \\<And>a1 b1 a2 b2.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> plus_ivl a1 a2 \\<sqsubseteq> plus_ivl b1 b2\n 2. \\<And>a1 b1 a2 b2 r r'.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2;\n        r \\<sqsubseteq> r'\\<rbrakk>\n       \\<Longrightarrow> filter_plus_ivl r a1 a2 \\<sqsubseteq>\n                         filter_plus_ivl r' b1 b2\n 3. \\<And>a1 b1 a2 b2 bv.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> filter_less_ivl bv a1 a2 \\<sqsubseteq>\n                         filter_less_ivl bv b1 b2", "thus ?case"], ["proof (prove)\nusing this:\n  a1_ \\<sqsubseteq> b1_\n  a2_ \\<sqsubseteq> b2_\n\ngoal (1 subgoal):\n 1. plus_ivl a1_ a2_ \\<sqsubseteq> plus_ivl b1_ b2_", "by(auto simp: plus_ivl_def le_ivl_def le_option_def empty_def split: if_splits ivl.splits option.splits)"], ["proof (state)\nthis:\n  plus_ivl a1_ a2_ \\<sqsubseteq> plus_ivl b1_ b2_\n\ngoal (2 subgoals):\n 1. \\<And>a1 b1 a2 b2 r r'.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2;\n        r \\<sqsubseteq> r'\\<rbrakk>\n       \\<Longrightarrow> filter_plus_ivl r a1 a2 \\<sqsubseteq>\n                         filter_plus_ivl r' b1 b2\n 2. \\<And>a1 b1 a2 b2 bv.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> filter_less_ivl bv a1 a2 \\<sqsubseteq>\n                         filter_less_ivl bv b1 b2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a1 b1 a2 b2 r r'.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2;\n        r \\<sqsubseteq> r'\\<rbrakk>\n       \\<Longrightarrow> filter_plus_ivl r a1 a2 \\<sqsubseteq>\n                         filter_plus_ivl r' b1 b2\n 2. \\<And>a1 b1 a2 b2 bv.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> filter_less_ivl bv a1 a2 \\<sqsubseteq>\n                         filter_less_ivl bv b1 b2", "case 2"], ["proof (state)\nthis:\n  a1_ \\<sqsubseteq> b1_\n  a2_ \\<sqsubseteq> b2_\n  r_ \\<sqsubseteq> r'_\n\ngoal (2 subgoals):\n 1. \\<And>a1 b1 a2 b2 r r'.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2;\n        r \\<sqsubseteq> r'\\<rbrakk>\n       \\<Longrightarrow> filter_plus_ivl r a1 a2 \\<sqsubseteq>\n                         filter_plus_ivl r' b1 b2\n 2. \\<And>a1 b1 a2 b2 bv.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> filter_less_ivl bv a1 a2 \\<sqsubseteq>\n                         filter_less_ivl bv b1 b2", "thus ?case"], ["proof (prove)\nusing this:\n  a1_ \\<sqsubseteq> b1_\n  a2_ \\<sqsubseteq> b2_\n  r_ \\<sqsubseteq> r'_\n\ngoal (1 subgoal):\n 1. filter_plus_ivl r_ a1_ a2_ \\<sqsubseteq> filter_plus_ivl r'_ b1_ b2_", "by(auto simp: filter_plus_ivl_def le_prod_def mono_meet mono_minus_ivl)"], ["proof (state)\nthis:\n  filter_plus_ivl r_ a1_ a2_ \\<sqsubseteq> filter_plus_ivl r'_ b1_ b2_\n\ngoal (1 subgoal):\n 1. \\<And>a1 b1 a2 b2 bv.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> filter_less_ivl bv a1 a2 \\<sqsubseteq>\n                         filter_less_ivl bv b1 b2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 b1 a2 b2 bv.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> filter_less_ivl bv a1 a2 \\<sqsubseteq>\n                         filter_less_ivl bv b1 b2", "case (3 a1 b1 a2 b2)"], ["proof (state)\nthis:\n  a1 \\<sqsubseteq> b1\n  a2 \\<sqsubseteq> b2\n\ngoal (1 subgoal):\n 1. \\<And>a1 b1 a2 b2 bv.\n       \\<lbrakk>a1 \\<sqsubseteq> b1; a2 \\<sqsubseteq> b2\\<rbrakk>\n       \\<Longrightarrow> filter_less_ivl bv a1 a2 \\<sqsubseteq>\n                         filter_less_ivl bv b1 b2", "thus ?case"], ["proof (prove)\nusing this:\n  a1 \\<sqsubseteq> b1\n  a2 \\<sqsubseteq> b2\n\ngoal (1 subgoal):\n 1. filter_less_ivl bv_ a1 a2 \\<sqsubseteq> filter_less_ivl bv_ b1 b2", "apply(cases a1, cases b1, cases a2, cases b2, auto simp: le_prod_def)"], ["proof (prove)\ngoal (20 subgoals):\n 1. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        case x1 of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2 of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l;\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l)\\<rbrakk>\n       \\<Longrightarrow> Abs_Int2_ivl.empty \\<sqsubseteq>\n                         I x1a (min_option True x2a (x2c - Some 1))\n 2. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        case x1 of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2 of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l;\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l)\\<rbrakk>\n       \\<Longrightarrow> Abs_Int2_ivl.empty \\<sqsubseteq>\n                         I (max_option False (x1a + Some 1) x1c) x2c\n 3. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        case x1b of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2b of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l;\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l)\\<rbrakk>\n       \\<Longrightarrow> Abs_Int2_ivl.empty \\<sqsubseteq>\n                         I x1a (min_option True x2a (x2c - Some 1))\n 4. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        case x1b of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2b of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l;\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l)\\<rbrakk>\n       \\<Longrightarrow> Abs_Int2_ivl.empty \\<sqsubseteq>\n                         I (max_option False (x1a + Some 1) x1c) x2c\n 5. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1a of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2a of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l\\<rbrakk>\n       \\<Longrightarrow> I x1\n                          (min_option True x2 (x2b - Some 1)) \\<sqsubseteq>\n                         Abs_Int2_ivl.empty\n 6. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1a of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2a of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l\\<rbrakk>\n       \\<Longrightarrow> I (max_option False (x1 + Some 1) x1b)\n                          x2b \\<sqsubseteq>\n                         Abs_Int2_ivl.empty\n 7. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1c of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2c of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l\\<rbrakk>\n       \\<Longrightarrow> I x1\n                          (min_option True x2 (x2b - Some 1)) \\<sqsubseteq>\n                         Abs_Int2_ivl.empty\n 8. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        case x1c of None \\<Rightarrow> False\n        | Some l \\<Rightarrow>\n            case x2c of None \\<Rightarrow> False\n            | Some h \\<Rightarrow> h < l\\<rbrakk>\n       \\<Longrightarrow> I (max_option False (x1 + Some 1) x1b)\n                          x2b \\<sqsubseteq>\n                         Abs_Int2_ivl.empty\n 9. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n       \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n        I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n        a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n        \\<not> (case x1 of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2 of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1b of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2b of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1a of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2a of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l);\n        \\<not> (case x1c of None \\<Rightarrow> False\n                | Some l \\<Rightarrow>\n                    case x2c of None \\<Rightarrow> False\n                    | Some h \\<Rightarrow> h < l)\\<rbrakk>\n       \\<Longrightarrow> I x1\n                          (min_option True x2 (x2b - Some 1)) \\<sqsubseteq>\n                         I x1a (min_option True x2a (x2c - Some 1))\n 10. \\<And>x1 x2 x1a x2a x1b x2b x1c x2c.\n        \\<lbrakk>I x1 x2 \\<sqsubseteq> I x1a x2a;\n         I x1b x2b \\<sqsubseteq> I x1c x2c; a1 = I x1 x2; b1 = I x1a x2a;\n         a2 = I x1b x2b; b2 = I x1c x2c; bv_;\n         \\<not> (case x1 of None \\<Rightarrow> False\n                 | Some l \\<Rightarrow>\n                     case x2 of None \\<Rightarrow> False\n                     | Some h \\<Rightarrow> h < l);\n         \\<not> (case x1b of None \\<Rightarrow> False\n                 | Some l \\<Rightarrow>\n                     case x2b of None \\<Rightarrow> False\n                     | Some h \\<Rightarrow> h < l);\n         \\<not> (case x1a of None \\<Rightarrow> False\n                 | Some l \\<Rightarrow>\n                     case x2a of None \\<Rightarrow> False\n                     | Some h \\<Rightarrow> h < l);\n         \\<not> (case x1c of None \\<Rightarrow> False\n                 | Some l \\<Rightarrow>\n                     case x2c of None \\<Rightarrow> False\n                     | Some h \\<Rightarrow> h < l)\\<rbrakk>\n        \\<Longrightarrow> I (max_option False (x1 + Some 1) x1b)\n                           x2b \\<sqsubseteq>\n                          I (max_option False (x1a + Some 1) x1c) x2c\nA total of 20 subgoals...", "by(auto simp add: empty_def le_ivl_def le_option_def min_option_def max_option_def split: option.splits)"], ["proof (state)\nthis:\n  filter_less_ivl bv_ a1 a2 \\<sqsubseteq> filter_less_ivl bv_ b1 b2\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Tests\""], ["", "value \"show_acom_opt (AI_ivl test1_ivl)\""], ["", "text\\<open>Better than \\<open>AI_const\\<close>:\\<close>"], ["", "value \"show_acom_opt (AI_ivl test3_const)\""], ["", "value \"show_acom_opt (AI_ivl test4_const)\""], ["", "value \"show_acom_opt (AI_ivl test6_const)\""], ["", "value \"show_acom_opt (AI_ivl test2_ivl)\""], ["", "value \"show_acom (((step_ivl \\<top>)^^0) (\\<bottom>\\<^sub>c test2_ivl))\""], ["", "value \"show_acom (((step_ivl \\<top>)^^1) (\\<bottom>\\<^sub>c test2_ivl))\""], ["", "value \"show_acom (((step_ivl \\<top>)^^2) (\\<bottom>\\<^sub>c test2_ivl))\""], ["", "text\\<open>Fixed point reached in 2 steps. Not so if the start value of x is known:\\<close>"], ["", "value \"show_acom_opt (AI_ivl test3_ivl)\""], ["", "value \"show_acom (((step_ivl \\<top>)^^0) (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (((step_ivl \\<top>)^^1) (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (((step_ivl \\<top>)^^2) (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (((step_ivl \\<top>)^^3) (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (((step_ivl \\<top>)^^4) (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "text\\<open>Takes as many iterations as the actual execution. Would diverge if\nloop did not terminate. Worse still, as the following example shows: even if\nthe actual execution terminates, the analysis may not. The value of y keeps\ndecreasing as the analysis is iterated, no matter how long:\\<close>"], ["", "value \"show_acom (((step_ivl \\<top>)^^50) (\\<bottom>\\<^sub>c test4_ivl))\""], ["", "text\\<open>Relationships between variables are NOT captured:\\<close>"], ["", "value \"show_acom_opt (AI_ivl test5_ivl)\""], ["", "text\\<open>Again, the analysis would not terminate:\\<close>"], ["", "value \"show_acom (((step_ivl \\<top>)^^50) (\\<bottom>\\<^sub>c test6_ivl))\""], ["", "end"]]}