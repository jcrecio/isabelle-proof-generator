{"file_name": "/home/qj213/afp-2021-10-22/thys/Abs_Int_ITP2012/Abs_Int3.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Abs_Int_ITP2012", "problem_names": ["lemma widen1_acom: \"strip c = strip c' \\<Longrightarrow> c \\<sqsubseteq> c \\<nabla>\\<^sub>c c'\"", "lemma widen2_acom: \"strip c = strip c' \\<Longrightarrow> c' \\<sqsubseteq> c \\<nabla>\\<^sub>c c'\"", "lemma narrow1_acom: \"y \\<sqsubseteq> x \\<Longrightarrow> y \\<sqsubseteq> x \\<triangle>\\<^sub>c y\"", "lemma narrow2_acom: \"y \\<sqsubseteq> x \\<Longrightarrow> x \\<triangle>\\<^sub>c y \\<sqsubseteq> x\"", "lemma strip_map2_acom:\n \"strip c1 = strip c2 \\<Longrightarrow> strip(map2_acom f c1 c2) = strip c1\"", "lemma iter_widen_pfp: \"iter_widen f c = Some c' \\<Longrightarrow> f c' \\<sqsubseteq> c'\"", "lemma strip_while: fixes f :: \"'a acom \\<Rightarrow> 'a acom\"\nassumes \"\\<forall>c. strip (f c) = strip c\" and \"while_option P f c = Some c'\"\nshows \"strip c' = strip c\"", "lemma strip_iter_widen: fixes f :: \"'a::WN acom \\<Rightarrow> 'a acom\"\nassumes \"\\<forall>c. strip (f c) = strip c\" and \"iter_widen f c = Some c'\"\nshows \"strip c' = strip c\"", "lemma iter_narrow_pfp: assumes \"mono f\" and \"f c0 \\<sqsubseteq> c0\"\nand \"iter_narrow f c0 = Some c\"\nshows \"f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0\" (is \"?P c\")", "lemma pfp_wn_pfp:\n  \"\\<lbrakk> mono f;  pfp_wn f c = Some c' \\<rbrakk> \\<Longrightarrow> f c' \\<sqsubseteq> c'\"", "lemma strip_pfp_wn:\n  \"\\<lbrakk> \\<forall>c. strip(f c) = strip c; pfp_wn f c = Some c' \\<rbrakk> \\<Longrightarrow> strip c' = c\"", "lemma AI_wn_sound: \"AI_wn c = Some c' \\<Longrightarrow> CS c \\<le> \\<gamma>\\<^sub>c c'\"", "lemma m_ivl_height: \"m_ivl ivl \\<le> 2\"", "lemma m_ivl_anti_mono: \"(y::ivl) \\<sqsubseteq> x \\<Longrightarrow> m_ivl x \\<le> m_ivl y\"", "lemma m_ivl_widen:\n  \"~ y \\<sqsubseteq> x \\<Longrightarrow> m_ivl(x \\<nabla> y) < m_ivl x\"", "lemma Top_less_ivl: \"\\<top> \\<sqsubseteq> x \\<Longrightarrow> m_ivl x = 0\"", "lemma n_ivl_mono: \"(x::ivl) \\<sqsubseteq> y \\<Longrightarrow> n_ivl x \\<le> n_ivl y\"", "lemma n_ivl_narrow:\n  \"~ x \\<sqsubseteq> x \\<triangle> y \\<Longrightarrow> n_ivl(x \\<triangle> y) < n_ivl x\"", "lemma m_st_height: assumes \"finite X\" and \"set (dom S) \\<subseteq> X\"\nshows \"m_st m_ivl S \\<le> 2 * card X\"", "lemma m_st_anti_mono:\n  \"S1 \\<sqsubseteq> S2 \\<Longrightarrow> m_st m_ivl S2 \\<le> m_st m_ivl S1\"", "lemma m_st_widen:\nassumes \"\\<not> S2 \\<sqsubseteq> S1\" shows \"m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1\"", "lemma n_st_mono: assumes \"set(dom S1) \\<subseteq> X\" \"set(dom S2) \\<subseteq> X\" \"S1 \\<sqsubseteq> S2\"\nshows \"n_st n_ivl X S1 \\<le> n_st n_ivl X S2\"", "lemma n_st_narrow:\nassumes \"finite X\" and \"set(dom S1) \\<subseteq> X\" \"set(dom S2) \\<subseteq> X\"\nand \"S2 \\<sqsubseteq> S1\" \"\\<not> S1 \\<sqsubseteq> S1 \\<triangle> S2\"\nshows \"n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1\"", "lemma m_o_anti_mono: \"finite X \\<Longrightarrow> domo S2 \\<subseteq> X \\<Longrightarrow> S1 \\<sqsubseteq> S2 \\<Longrightarrow>\n  m_o (m_st m_ivl) (2 * card X) S2 \\<le> m_o (m_st m_ivl) (2 * card X) S1\"", "lemma m_o_widen: \"\\<lbrakk> finite X; domo S2 \\<subseteq> X; \\<not> S2 \\<sqsubseteq> S1 \\<rbrakk> \\<Longrightarrow>\n  m_o (m_st m_ivl) (2 * card X) (S1 \\<nabla> S2) < m_o (m_st m_ivl) (2 * card X) S1\"", "lemma n_o_mono: \"domo S1 \\<subseteq> X \\<Longrightarrow> domo S2 \\<subseteq> X \\<Longrightarrow> S1 \\<sqsubseteq> S2 \\<Longrightarrow>\n  n_o (n_st n_ivl X) S1 \\<le> n_o (n_st n_ivl X) S2\"", "lemma n_o_narrow:\n  \"\\<lbrakk> finite X; domo S1 \\<subseteq> X; domo S2 \\<subseteq> X; S2 \\<sqsubseteq> S1; \\<not> S1 \\<sqsubseteq> S1 \\<triangle> S2 \\<rbrakk>\n  \\<Longrightarrow> n_o (n_st n_ivl X) (S1 \\<triangle> S2) < n_o (n_st n_ivl X) S1\"", "lemma domo_widen_subset: \"domo (S1 \\<nabla> S2) \\<subseteq> domo S1 \\<union> domo S2\"", "lemma domo_narrow_subset: \"domo (S1 \\<triangle> S2) \\<subseteq> domo S1 \\<union> domo S2\"", "lemma strip_widen_acom[simp]:\n  \"strip c' = strip (c::'a::WN acom) \\<Longrightarrow>  strip (c \\<nabla>\\<^sub>c c') = strip c\"", "lemma strip_narrow_acom[simp]:\n  \"strip c' = strip (c::'a::WN acom) \\<Longrightarrow>  strip (c \\<triangle>\\<^sub>c c') = strip c\"", "lemma annos_widen_acom[simp]: \"strip c1 = strip (c2::'a::WN acom) \\<Longrightarrow>\n  annos(c1 \\<nabla>\\<^sub>c c2) = map (%(x,y).x\\<nabla>y) (zip (annos c1) (annos(c2::'a::WN acom)))\"", "lemma annos_narrow_acom[simp]: \"strip c1 = strip (c2::'a::WN acom) \\<Longrightarrow>\n  annos(c1 \\<triangle>\\<^sub>c c2) = map (%(x,y).x\\<triangle>y) (zip (annos c1) (annos(c2::'a::WN acom)))\"", "lemma widen_acom_Com[simp]: \"strip c2 = strip c1 \\<Longrightarrow>\n  c1 : Com X \\<Longrightarrow> c2 : Com X \\<Longrightarrow> (c1 \\<nabla>\\<^sub>c c2) : Com X\"", "lemma narrow_acom_Com[simp]: \"strip c2 = strip c1 \\<Longrightarrow>\n  c1 : Com X \\<Longrightarrow> c2 : Com X \\<Longrightarrow> (c1 \\<triangle>\\<^sub>c c2) : Com X\"", "lemma measure_m_c: \"finite X \\<Longrightarrow> {(c, c \\<nabla>\\<^sub>c c') |c c'::ivl st option acom.\n     strip c' = strip c \\<and> c : Com X \\<and> c' : Com X \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>\n    \\<subseteq> measure(m_c(m_o (m_st m_ivl) (2*card(X))))\"", "lemma measure_n_c: \"finite X \\<Longrightarrow> {(c, c \\<triangle>\\<^sub>c c') |c c'.\n  strip c = strip c' \\<and> c \\<in> Com X \\<and> c' \\<in> Com X \\<and> c' \\<sqsubseteq> c \\<and> \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c'}\\<inverse>\n  \\<subseteq> measure(m_c(n_o (n_st n_ivl X)))\"", "lemma iter_widen_termination:\nfixes c0 :: \"'a::WN acom\"\nassumes P_f: \"\\<And>c. P c \\<Longrightarrow> P(f c)\"\nassumes P_widen: \"\\<And>c c'. P c \\<Longrightarrow> P c' \\<Longrightarrow> P(c \\<nabla>\\<^sub>c c')\"\nand \"wf({(c::'a acom,c \\<nabla>\\<^sub>c c')|c c'. P c \\<and> P c' \\<and> ~ c' \\<sqsubseteq> c}^-1)\"\nand \"P c0\" and \"c0 \\<sqsubseteq> f c0\" shows \"\\<exists>c. iter_widen f c0 = Some c\"", "lemma iter_narrow_termination:\nassumes P_f: \"\\<And>c. P c \\<Longrightarrow> P(c \\<triangle>\\<^sub>c f c)\"\nand wf: \"wf({(c, c \\<triangle>\\<^sub>c f c)|c c'. P c \\<and> ~ c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c}^-1)\"\nand \"P c0\" shows \"\\<exists>c. iter_narrow f c0 = Some c\"", "lemma iter_winden_step_ivl_termination:\n  \"\\<exists>c. iter_widen (step_ivl \\<top>) (\\<bottom>\\<^sub>c c0) = Some c\"", "lemma iter_narrow_step_ivl_termination:\n  \"c0 \\<in> Com (vars(strip c0)) \\<Longrightarrow> step_ivl \\<top> c0 \\<sqsubseteq> c0 \\<Longrightarrow>\n  \\<exists>c. iter_narrow (step_ivl \\<top>) c0 = Some c\"", "lemma while_Com:\nfixes c :: \"'a st option acom\"\nassumes \"while_option P f c = Some c'\"\nand \"!!c. strip(f c) = strip c\"\nand \"\\<forall>c::'a st option acom. c : Com(X) \\<longrightarrow> vars(strip c) \\<subseteq> X \\<longrightarrow> f c : Com(X)\"\nand \"c : Com(X)\" and \"vars(strip c) \\<subseteq> X\" shows \"c' : Com(X)\"", "lemma iter_widen_Com: fixes f :: \"'a::WN st option acom \\<Rightarrow> 'a st option acom\"\nassumes \"iter_widen f c = Some c'\"\nand \"\\<forall>c. c : Com(X) \\<longrightarrow> vars(strip c) \\<subseteq> X \\<longrightarrow> f c : Com(X)\"\nand \"!!c. strip(f c) = strip c\"\nand \"c : Com(X)\" and \"vars (strip c) \\<subseteq> X\" shows \"c' : Com(X)\"", "lemma iter_widen_step'_Com:\n  \"iter_widen (step' \\<top>) c = Some c' \\<Longrightarrow> vars(strip c) \\<subseteq> X \\<Longrightarrow> c : Com(X)\n   \\<Longrightarrow> c' : Com(X)\"", "theorem AI_ivl'_termination:\n  \"\\<exists>c'. AI_ivl' c = Some c'\""], "translations": [["", "lemma widen1_acom: \"strip c = strip c' \\<Longrightarrow> c \\<sqsubseteq> c \\<nabla>\\<^sub>c c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c = strip c' \\<Longrightarrow>\n    c \\<sqsubseteq> c \\<nabla>\\<^sub>c c'", "by(induct c c' rule: le_acom.induct)(simp_all add: widen1)"], ["", "lemma widen2_acom: \"strip c = strip c' \\<Longrightarrow> c' \\<sqsubseteq> c \\<nabla>\\<^sub>c c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c = strip c' \\<Longrightarrow>\n    c' \\<sqsubseteq> c \\<nabla>\\<^sub>c c'", "by(induct c c' rule: le_acom.induct)(simp_all add: widen2)"], ["", "lemma narrow1_acom: \"y \\<sqsubseteq> x \\<Longrightarrow> y \\<sqsubseteq> x \\<triangle>\\<^sub>c y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x \\<Longrightarrow>\n    y \\<sqsubseteq> x \\<triangle>\\<^sub>c y", "by(induct y x rule: le_acom.induct) (simp_all add: narrow1)"], ["", "lemma narrow2_acom: \"y \\<sqsubseteq> x \\<Longrightarrow> x \\<triangle>\\<^sub>c y \\<sqsubseteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x \\<Longrightarrow>\n    x \\<triangle>\\<^sub>c y \\<sqsubseteq> x", "by(induct y x rule: le_acom.induct) (simp_all add: narrow2)"], ["", "subsection \"Post-fixed point computation\""], ["", "definition iter_widen :: \"('a acom \\<Rightarrow> 'a acom) \\<Rightarrow> 'a acom \\<Rightarrow> ('a::WN)acom option\"\nwhere \"iter_widen f = while_option (\\<lambda>c. \\<not> f c \\<sqsubseteq> c) (\\<lambda>c. c \\<nabla>\\<^sub>c f c)\""], ["", "definition iter_narrow :: \"('a acom \\<Rightarrow> 'a acom) \\<Rightarrow> 'a acom \\<Rightarrow> 'a::WN acom option\"\nwhere \"iter_narrow f = while_option (\\<lambda>c. \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c) (\\<lambda>c. c \\<triangle>\\<^sub>c f c)\""], ["", "definition pfp_wn ::\n  \"(('a::WN)option acom \\<Rightarrow> 'a option acom) \\<Rightarrow> com \\<Rightarrow> 'a option acom option\"\nwhere \"pfp_wn f c = (case iter_widen f (\\<bottom>\\<^sub>c c) of None \\<Rightarrow> None\n                     | Some c' \\<Rightarrow> iter_narrow f c')\""], ["", "lemma strip_map2_acom:\n \"strip c1 = strip c2 \\<Longrightarrow> strip(map2_acom f c1 c2) = strip c1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c1 = strip c2 \\<Longrightarrow>\n    strip (map2_acom f c1 c2) = strip c1", "by(induct f c1 c2 rule: map2_acom.induct) simp_all"], ["", "lemma iter_widen_pfp: \"iter_widen f c = Some c' \\<Longrightarrow> f c' \\<sqsubseteq> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter_widen f c = Some c' \\<Longrightarrow> f c' \\<sqsubseteq> c'", "by(auto simp add: iter_widen_def dest: while_option_stop)"], ["", "lemma strip_while: fixes f :: \"'a acom \\<Rightarrow> 'a acom\"\nassumes \"\\<forall>c. strip (f c) = strip c\" and \"while_option P f c = Some c'\"\nshows \"strip c' = strip c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c' = strip c", "using while_option_rule[where P = \"\\<lambda>c'. strip c' = strip c\", OF _ assms(2)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>s.\n              \\<lbrakk>strip s = strip c; P s\\<rbrakk>\n              \\<Longrightarrow> strip (f s) = strip c;\n   strip c = strip c\\<rbrakk>\n  \\<Longrightarrow> strip c' = strip c\n\ngoal (1 subgoal):\n 1. strip c' = strip c", "by (metis assms(1))"], ["", "lemma strip_iter_widen: fixes f :: \"'a::WN acom \\<Rightarrow> 'a acom\"\nassumes \"\\<forall>c. strip (f c) = strip c\" and \"iter_widen f c = Some c'\"\nshows \"strip c' = strip c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c' = strip c", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. strip c' = strip c", "have \"\\<forall>c. strip(c \\<nabla>\\<^sub>c f c) = strip c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c. strip (c \\<nabla>\\<^sub>c f c) = strip c", "by (metis assms(1) strip_map2_acom)"], ["proof (state)\nthis:\n  \\<forall>c. strip (c \\<nabla>\\<^sub>c f c) = strip c\n\ngoal (1 subgoal):\n 1. strip c' = strip c", "from strip_while[OF this] assms(2)"], ["proof (chain)\npicking this:\n  while_option ?P (\\<lambda>c. c \\<nabla>\\<^sub>c f c) ?c =\n  Some ?c' \\<Longrightarrow>\n  strip ?c' = strip ?c\n  iter_widen f c = Some c'", "show ?thesis"], ["proof (prove)\nusing this:\n  while_option ?P (\\<lambda>c. c \\<nabla>\\<^sub>c f c) ?c =\n  Some ?c' \\<Longrightarrow>\n  strip ?c' = strip ?c\n  iter_widen f c = Some c'\n\ngoal (1 subgoal):\n 1. strip c' = strip c", "by(simp add: iter_widen_def)"], ["proof (state)\nthis:\n  strip c' = strip c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iter_narrow_pfp: assumes \"mono f\" and \"f c0 \\<sqsubseteq> c0\"\nand \"iter_narrow f c0 = Some c\"\nshows \"f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0\" (is \"?P c\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "assume \"?P c\""], ["proof (state)\nthis:\n  f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0\n\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "note 1 = conjunct1[OF this] and 2 = conjunct2[OF this]"], ["proof (state)\nthis:\n  f c \\<sqsubseteq> c\n  c \\<sqsubseteq> c0\n\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "let ?c' = \"c \\<triangle>\\<^sub>c f c\""], ["proof (state)\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "have \"?P ?c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq>\n    c \\<triangle>\\<^sub>c f c \\<and>\n    c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> c \\<triangle>\\<^sub>c f c\n 2. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "have \"f ?c' \\<sqsubseteq> f c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> f c", "by(rule monoD[OF \\<open>mono f\\<close> narrow2_acom[OF 1]])"], ["proof (state)\nthis:\n  f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> f c\n\ngoal (2 subgoals):\n 1. f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> c \\<triangle>\\<^sub>c f c\n 2. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "also"], ["proof (state)\nthis:\n  f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> f c\n\ngoal (2 subgoals):\n 1. f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> c \\<triangle>\\<^sub>c f c\n 2. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "have \"\\<dots> \\<sqsubseteq> ?c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c", "by(rule narrow1_acom[OF 1])"], ["proof (state)\nthis:\n  f c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c\n\ngoal (2 subgoals):\n 1. f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> c \\<triangle>\\<^sub>c f c\n 2. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "finally"], ["proof (chain)\npicking this:\n  f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> c \\<triangle>\\<^sub>c f c", "show \"f ?c' \\<sqsubseteq> ?c'\""], ["proof (prove)\nusing this:\n  f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> c \\<triangle>\\<^sub>c f c\n\ngoal (1 subgoal):\n 1. f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> c \\<triangle>\\<^sub>c f c", "."], ["proof (state)\nthis:\n  f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq> c \\<triangle>\\<^sub>c f c\n\ngoal (1 subgoal):\n 1. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "have \"?c' \\<sqsubseteq> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c", "by (rule narrow2_acom[OF 1])"], ["proof (state)\nthis:\n  c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c\n\ngoal (1 subgoal):\n 1. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "also"], ["proof (state)\nthis:\n  c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c\n\ngoal (1 subgoal):\n 1. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "have \"c \\<sqsubseteq> c0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sqsubseteq> c0", "by(rule 2)"], ["proof (state)\nthis:\n  c \\<sqsubseteq> c0\n\ngoal (1 subgoal):\n 1. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "finally"], ["proof (chain)\npicking this:\n  c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "show \"?c' \\<sqsubseteq> c0\""], ["proof (prove)\nusing this:\n  c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0\n\ngoal (1 subgoal):\n 1. c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0", "."], ["proof (state)\nthis:\n  c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f (c \\<triangle>\\<^sub>c f c) \\<sqsubseteq>\n  c \\<triangle>\\<^sub>c f c \\<and>\n  c \\<triangle>\\<^sub>c f c \\<sqsubseteq> c0\n\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "}"], ["proof (state)\nthis:\n  f ?ca2 \\<sqsubseteq> ?ca2 \\<and> ?ca2 \\<sqsubseteq> c0 \\<Longrightarrow>\n  f (?ca2 \\<triangle>\\<^sub>c f ?ca2) \\<sqsubseteq>\n  ?ca2 \\<triangle>\\<^sub>c f ?ca2 \\<and>\n  ?ca2 \\<triangle>\\<^sub>c f ?ca2 \\<sqsubseteq> c0\n\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "with while_option_rule[where P = ?P, OF _ assms(3)[simplified iter_narrow_def]]\n    assms(2) le_refl"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>s.\n              \\<lbrakk>f s \\<sqsubseteq> s \\<and> s \\<sqsubseteq> c0;\n               \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n              \\<Longrightarrow> f (s \\<triangle>\\<^sub>c f s) \\<sqsubseteq>\n                                s \\<triangle>\\<^sub>c f s \\<and>\n                                s \\<triangle>\\<^sub>c f s \\<sqsubseteq> c0;\n   f c0 \\<sqsubseteq> c0 \\<and> c0 \\<sqsubseteq> c0\\<rbrakk>\n  \\<Longrightarrow> f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0\n  f c0 \\<sqsubseteq> c0\n  ?x \\<sqsubseteq> ?x\n  f ?ca2 \\<sqsubseteq> ?ca2 \\<and> ?ca2 \\<sqsubseteq> c0 \\<Longrightarrow>\n  f (?ca2 \\<triangle>\\<^sub>c f ?ca2) \\<sqsubseteq>\n  ?ca2 \\<triangle>\\<^sub>c f ?ca2 \\<and>\n  ?ca2 \\<triangle>\\<^sub>c f ?ca2 \\<sqsubseteq> c0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>s.\n              \\<lbrakk>f s \\<sqsubseteq> s \\<and> s \\<sqsubseteq> c0;\n               \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n              \\<Longrightarrow> f (s \\<triangle>\\<^sub>c f s) \\<sqsubseteq>\n                                s \\<triangle>\\<^sub>c f s \\<and>\n                                s \\<triangle>\\<^sub>c f s \\<sqsubseteq> c0;\n   f c0 \\<sqsubseteq> c0 \\<and> c0 \\<sqsubseteq> c0\\<rbrakk>\n  \\<Longrightarrow> f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0\n  f c0 \\<sqsubseteq> c0\n  ?x \\<sqsubseteq> ?x\n  f ?ca2 \\<sqsubseteq> ?ca2 \\<and> ?ca2 \\<sqsubseteq> c0 \\<Longrightarrow>\n  f (?ca2 \\<triangle>\\<^sub>c f ?ca2) \\<sqsubseteq>\n  ?ca2 \\<triangle>\\<^sub>c f ?ca2 \\<and>\n  ?ca2 \\<triangle>\\<^sub>c f ?ca2 \\<sqsubseteq> c0\n\ngoal (1 subgoal):\n 1. f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0", "by blast"], ["proof (state)\nthis:\n  f c \\<sqsubseteq> c \\<and> c \\<sqsubseteq> c0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pfp_wn_pfp:\n  \"\\<lbrakk> mono f;  pfp_wn f c = Some c' \\<rbrakk> \\<Longrightarrow> f c' \\<sqsubseteq> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preord_class.mono f; pfp_wn f c = Some c'\\<rbrakk>\n    \\<Longrightarrow> f c' \\<sqsubseteq> c'", "unfolding pfp_wn_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preord_class.mono f;\n     (case iter_widen f (\\<bottom>\\<^sub>c c) of None \\<Rightarrow> None\n      | Some x \\<Rightarrow> iter_narrow f x) =\n     Some c'\\<rbrakk>\n    \\<Longrightarrow> f c' \\<sqsubseteq> c'", "by (auto dest: iter_widen_pfp iter_narrow_pfp split: option.splits)"], ["", "lemma strip_pfp_wn:\n  \"\\<lbrakk> \\<forall>c. strip(f c) = strip c; pfp_wn f c = Some c' \\<rbrakk> \\<Longrightarrow> strip c' = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>c. strip (f c) = strip c;\n     pfp_wn f c = Some c'\\<rbrakk>\n    \\<Longrightarrow> strip c' = c", "apply(auto simp add: pfp_wn_def iter_narrow_def split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<forall>c. strip (f c) = strip c;\n        iter_widen f (\\<bottom>\\<^sub>c c) = Some x2;\n        while_option\n         (\\<lambda>c. \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c)\n         (\\<lambda>c. c \\<triangle>\\<^sub>c f c) x2 =\n        Some c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = c", "by (metis (mono_tags) strip_map2_acom strip_while strip_bot_acom strip_iter_widen)"], ["", "locale Abs_Int2 = Abs_Int1_mono\nwhere \\<gamma>=\\<gamma> for \\<gamma> :: \"'av::{WN,L_top_bot} \\<Rightarrow> val set\"\nbegin"], ["", "definition AI_wn :: \"com \\<Rightarrow> 'av st option acom option\" where\n\"AI_wn = pfp_wn (step' \\<top>)\""], ["", "lemma AI_wn_sound: \"AI_wn c = Some c' \\<Longrightarrow> CS c \\<le> \\<gamma>\\<^sub>c c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AI_wn c = Some c' \\<Longrightarrow> CS c \\<le> local.\\<gamma>\\<^sub>c c'", "proof(simp add: CS_def AI_wn_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. pfp_wn (local.step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> local.\\<gamma>\\<^sub>c c'", "assume 1: \"pfp_wn (step' \\<top>) c = Some c'\""], ["proof (state)\nthis:\n  pfp_wn (local.step' \\<top>) c = Some c'\n\ngoal (1 subgoal):\n 1. pfp_wn (local.step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> local.\\<gamma>\\<^sub>c c'", "from pfp_wn_pfp[OF mono_step'2 1]"], ["proof (chain)\npicking this:\n  local.step' \\<top> c' \\<sqsubseteq> c'", "have 2: \"step' \\<top> c' \\<sqsubseteq> c'\""], ["proof (prove)\nusing this:\n  local.step' \\<top> c' \\<sqsubseteq> c'\n\ngoal (1 subgoal):\n 1. local.step' \\<top> c' \\<sqsubseteq> c'", "."], ["proof (state)\nthis:\n  local.step' \\<top> c' \\<sqsubseteq> c'\n\ngoal (1 subgoal):\n 1. pfp_wn (local.step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> local.\\<gamma>\\<^sub>c c'", "have 3: \"strip (\\<gamma>\\<^sub>c (step' \\<top> c')) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip (local.\\<gamma>\\<^sub>c (local.step' \\<top> c')) = c", "by(simp add: strip_pfp_wn[OF _ 1])"], ["proof (state)\nthis:\n  strip (local.\\<gamma>\\<^sub>c (local.step' \\<top> c')) = c\n\ngoal (1 subgoal):\n 1. pfp_wn (local.step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> local.\\<gamma>\\<^sub>c c'", "have \"lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Collecting.lfp (step UNIV) c\n    \\<le> local.\\<gamma>\\<^sub>c (local.step' \\<top> c')", "proof(rule lfp_lowerbound[simplified,OF 3])"], ["proof (state)\ngoal (1 subgoal):\n 1. step UNIV (local.\\<gamma>\\<^sub>c (local.step' \\<top> c'))\n    \\<le> local.\\<gamma>\\<^sub>c (local.step' \\<top> c')", "show \"step UNIV (\\<gamma>\\<^sub>c (step' \\<top> c')) \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step UNIV (local.\\<gamma>\\<^sub>c (local.step' \\<top> c'))\n    \\<le> local.\\<gamma>\\<^sub>c (local.step' \\<top> c')", "proof(rule step_preserves_le[OF _ _])"], ["proof (state)\ngoal (2 subgoals):\n 1. UNIV \\<subseteq> local.\\<gamma>\\<^sub>o \\<top>\n 2. local.\\<gamma>\\<^sub>c (local.step' \\<top> c')\n    \\<le> local.\\<gamma>\\<^sub>c c'", "show \"UNIV \\<subseteq> \\<gamma>\\<^sub>o \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV \\<subseteq> local.\\<gamma>\\<^sub>o \\<top>", "by simp"], ["proof (state)\nthis:\n  UNIV \\<subseteq> local.\\<gamma>\\<^sub>o \\<top>\n\ngoal (1 subgoal):\n 1. local.\\<gamma>\\<^sub>c (local.step' \\<top> c')\n    \\<le> local.\\<gamma>\\<^sub>c c'", "show \"\\<gamma>\\<^sub>c (step' \\<top> c') \\<le> \\<gamma>\\<^sub>c c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.\\<gamma>\\<^sub>c (local.step' \\<top> c')\n    \\<le> local.\\<gamma>\\<^sub>c c'", "by(rule mono_gamma_c[OF 2])"], ["proof (state)\nthis:\n  local.\\<gamma>\\<^sub>c (local.step' \\<top> c')\n  \\<le> local.\\<gamma>\\<^sub>c c'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  step UNIV (local.\\<gamma>\\<^sub>c (local.step' \\<top> c'))\n  \\<le> local.\\<gamma>\\<^sub>c (local.step' \\<top> c')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Collecting.lfp (step UNIV) c\n  \\<le> local.\\<gamma>\\<^sub>c (local.step' \\<top> c')\n\ngoal (1 subgoal):\n 1. pfp_wn (local.step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> local.\\<gamma>\\<^sub>c c'", "from this 2"], ["proof (chain)\npicking this:\n  Collecting.lfp (step UNIV) c\n  \\<le> local.\\<gamma>\\<^sub>c (local.step' \\<top> c')\n  local.step' \\<top> c' \\<sqsubseteq> c'", "show \"lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'\""], ["proof (prove)\nusing this:\n  Collecting.lfp (step UNIV) c\n  \\<le> local.\\<gamma>\\<^sub>c (local.step' \\<top> c')\n  local.step' \\<top> c' \\<sqsubseteq> c'\n\ngoal (1 subgoal):\n 1. Collecting.lfp (step UNIV) c \\<le> local.\\<gamma>\\<^sub>c c'", "by (blast intro: mono_gamma_c order_trans)"], ["proof (state)\nthis:\n  Collecting.lfp (step UNIV) c \\<le> local.\\<gamma>\\<^sub>c c'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "global_interpretation Abs_Int2\nwhere \\<gamma> = \\<gamma>_ivl and num' = num_ivl and plus' = plus_ivl\nand test_num' = in_ivl\nand filter_plus' = filter_plus_ivl and filter_less' = filter_less_ivl\ndefines AI_ivl' = AI_wn"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Int2 num_ivl plus_ivl in_ivl filter_plus_ivl filter_less_ivl\n     \\<gamma>_ivl", ".."], ["", "subsection \"Tests\""], ["", "definition \"step_up_ivl n = ((\\<lambda>c. c \\<nabla>\\<^sub>c step_ivl \\<top> c)^^n)\""], ["", "definition \"step_down_ivl n = ((\\<lambda>c. c \\<triangle>\\<^sub>c step_ivl \\<top> c)^^n)\""], ["", "text\\<open>For @{const test3_ivl}, @{const AI_ivl} needed as many iterations as\nthe loop took to execute. In contrast, @{const AI_ivl'} converges in a\nconstant number of steps:\\<close>"], ["", "value \"show_acom (step_up_ivl 1 (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (step_up_ivl 2 (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (step_up_ivl 3 (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (step_up_ivl 4 (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (step_up_ivl 5 (\\<bottom>\\<^sub>c test3_ivl))\""], ["", "value \"show_acom (step_down_ivl 1 (step_up_ivl 5 (\\<bottom>\\<^sub>c test3_ivl)))\""], ["", "value \"show_acom (step_down_ivl 2 (step_up_ivl 5 (\\<bottom>\\<^sub>c test3_ivl)))\""], ["", "value \"show_acom (step_down_ivl 3 (step_up_ivl 5 (\\<bottom>\\<^sub>c test3_ivl)))\""], ["", "text\\<open>Now all the analyses terminate:\\<close>"], ["", "value \"show_acom_opt (AI_ivl' test4_ivl)\""], ["", "value \"show_acom_opt (AI_ivl' test5_ivl)\""], ["", "value \"show_acom_opt (AI_ivl' test6_ivl)\""], ["", "subsection \"Termination: Intervals\""], ["", "definition m_ivl :: \"ivl \\<Rightarrow> nat\" where\n\"m_ivl ivl = (case ivl of I l h \\<Rightarrow>\n     (case l of None \\<Rightarrow> 0 | Some _ \\<Rightarrow> 1) + (case h of None \\<Rightarrow> 0 | Some _ \\<Rightarrow> 1))\""], ["", "lemma m_ivl_height: \"m_ivl ivl \\<le> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m_ivl ivl \\<le> 2", "by(simp add: m_ivl_def split: ivl.split option.split)"], ["", "lemma m_ivl_anti_mono: \"(y::ivl) \\<sqsubseteq> x \\<Longrightarrow> m_ivl x \\<le> m_ivl y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<sqsubseteq> x \\<Longrightarrow> m_ivl x \\<le> m_ivl y", "by(auto simp: m_ivl_def le_option_def le_ivl_def\n        split: ivl.split option.split if_splits)"], ["", "lemma m_ivl_widen:\n  \"~ y \\<sqsubseteq> x \\<Longrightarrow> m_ivl(x \\<nabla> y) < m_ivl x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> y \\<sqsubseteq> x \\<Longrightarrow>\n    m_ivl (x \\<nabla> y) < m_ivl x", "by(auto simp: m_ivl_def widen_ivl_def le_option_def le_ivl_def\n        split: ivl.splits option.splits if_splits)"], ["", "lemma Top_less_ivl: \"\\<top> \\<sqsubseteq> x \\<Longrightarrow> m_ivl x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<top> \\<sqsubseteq> x \\<Longrightarrow> m_ivl x = 0", "by(auto simp: m_ivl_def le_option_def le_ivl_def empty_def Top_ivl_def\n        split: ivl.split option.split if_splits)"], ["", "definition n_ivl :: \"ivl \\<Rightarrow> nat\" where\n\"n_ivl ivl = 2 - m_ivl ivl\""], ["", "lemma n_ivl_mono: \"(x::ivl) \\<sqsubseteq> y \\<Longrightarrow> n_ivl x \\<le> n_ivl y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<Longrightarrow> n_ivl x \\<le> n_ivl y", "unfolding n_ivl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<Longrightarrow> 2 - m_ivl x \\<le> 2 - m_ivl y", "by (metis diff_le_mono2 m_ivl_anti_mono)"], ["", "lemma n_ivl_narrow:\n  \"~ x \\<sqsubseteq> x \\<triangle> y \\<Longrightarrow> n_ivl(x \\<triangle> y) < n_ivl x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x \\<sqsubseteq> x \\<triangle> y \\<Longrightarrow>\n    n_ivl (x \\<triangle> y) < n_ivl x", "by(auto simp: n_ivl_def m_ivl_def narrow_ivl_def le_option_def le_ivl_def\n        split: ivl.splits option.splits if_splits)"], ["", "subsection \"Termination: Abstract State\""], ["", "definition \"m_st m st = (\\<Sum>x\\<in>set(dom st). m(fun st x))\""], ["", "lemma m_st_height: assumes \"finite X\" and \"set (dom S) \\<subseteq> X\"\nshows \"m_st m_ivl S \\<le> 2 * card X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m_st m_ivl S \\<le> 2 * card X", "proof(auto simp: m_st_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X", "have \"(\\<Sum>x\\<in>set(dom S). m_ivl (fun S x)) \\<le> (\\<Sum>x\\<in>set(dom S). 2)\" (is \"?L \\<le> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S). 2)", "by(rule sum_mono)(simp add:m_ivl_height)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x))\n  \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S). 2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x))\n  \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S). 2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X", "have \"\\<dots> \\<le> (\\<Sum>x\\<in>X. 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). 2) \\<le> (\\<Sum>x\\<in>X. 2)", "by(rule sum_mono2[OF assms]) simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S). 2) \\<le> (\\<Sum>x\\<in>X. 2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S). 2) \\<le> (\\<Sum>x\\<in>X. 2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X", "have \"\\<dots> = 2 * card X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>X. 2) = 2 * card X", "by(simp)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>X. 2) = 2 * card X\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X", "show \"?L \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S). m_ivl (fun S x)) \\<le> 2 * card X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma m_st_anti_mono:\n  \"S1 \\<sqsubseteq> S2 \\<Longrightarrow> m_st m_ivl S2 \\<le> m_st m_ivl S1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S1 \\<sqsubseteq> S2 \\<Longrightarrow> m_st m_ivl S2 \\<le> m_st m_ivl S1", "proof(auto simp: m_st_def le_st_def lookup_def split: if_splits)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "let ?X = \"set(dom S1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "let ?Y = \"set(dom S2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "let ?f = \"fun S1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "let ?g = \"fun S2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "assume asm: \"\\<forall>x\\<in>?Y. (x \\<in> ?X \\<longrightarrow> ?f x \\<sqsubseteq> ?g x) \\<and> (x \\<in> ?X \\<or> \\<top> \\<sqsubseteq> ?g x)\""], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (Abs_State.dom S2).\n     (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n      fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n     (x \\<in> set (Abs_State.dom S1) \\<or> \\<top> \\<sqsubseteq> fun S2 x)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "hence 1: \"\\<forall>y\\<in>?Y\\<inter>?X. m_ivl(?g y) \\<le> m_ivl(?f y)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (Abs_State.dom S2).\n     (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n      fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n     (x \\<in> set (Abs_State.dom S1) \\<or> \\<top> \\<sqsubseteq> fun S2 x)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n       m_ivl (fun S2 y) \\<le> m_ivl (fun S1 y)", "by(simp add: m_ivl_anti_mono)"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y) \\<le> m_ivl (fun S1 y)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have 0: \"\\<forall>x\\<in>?Y-?X. m_ivl(?g x) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. m_ivl (fun S2 x)) = \\<lambda>x. 0\n    on set (Abs_State.dom S2) - set (Abs_State.dom S1)", "using asm"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (Abs_State.dom S2).\n     (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n      fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n     (x \\<in> set (Abs_State.dom S1) \\<or> \\<top> \\<sqsubseteq> fun S2 x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. m_ivl (fun S2 x)) = \\<lambda>x. 0\n    on set (Abs_State.dom S2) - set (Abs_State.dom S1)", "by (auto simp: Top_less_ivl)"], ["proof (state)\nthis:\n  (\\<lambda>x. m_ivl (fun S2 x)) = \\<lambda>x. 0\n  on set (Abs_State.dom S2) - set (Abs_State.dom S1)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"(\\<Sum>y\\<in>?Y. m_ivl(?g y)) = (\\<Sum>y\\<in>(?Y-?X) \\<union> (?Y\\<inter>?X). m_ivl(?g y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>set (Abs_State.dom S2). m_ivl (fun S2 y)) =\n    (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1) \\<union>\n                 set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n       m_ivl (fun S2 y))", "by (metis Un_Diff_Int)"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2). m_ivl (fun S2 y)) =\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1) \\<union>\n               set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2). m_ivl (fun S2 y)) =\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1) \\<union>\n               set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"\\<dots> = (\\<Sum>y\\<in>?Y-?X. m_ivl(?g y)) + (\\<Sum>y\\<in>?Y\\<inter>?X. m_ivl(?g y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1) \\<union>\n                 set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n       m_ivl (fun S2 y)) =\n    (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1).\n       m_ivl (fun S2 y)) +\n    (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n       m_ivl (fun S2 y))", "by(subst sum.union_disjoint) auto"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1) \\<union>\n               set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y)) =\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1).\n     m_ivl (fun S2 y)) +\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1) \\<union>\n               set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y)) =\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1).\n     m_ivl (fun S2 y)) +\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"(\\<Sum>y\\<in>?Y-?X. m_ivl(?g y)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1).\n       m_ivl (fun S2 y)) =\n    0", "using 0"], ["proof (prove)\nusing this:\n  (\\<lambda>x. m_ivl (fun S2 x)) = \\<lambda>x. 0\n  on set (Abs_State.dom S2) - set (Abs_State.dom S1)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1).\n       m_ivl (fun S2 y)) =\n    0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1).\n     m_ivl (fun S2 y)) =\n  0\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) - set (Abs_State.dom S1).\n     m_ivl (fun S2 y)) =\n  0\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"0 + (\\<Sum>y\\<in>?Y\\<inter>?X. m_ivl(?g y)) = (\\<Sum>y\\<in>?Y\\<inter>?X. m_ivl(?g y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 +\n    (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n       m_ivl (fun S2 y)) =\n    (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n       m_ivl (fun S2 y))", "by simp"], ["proof (state)\nthis:\n  0 +\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y)) =\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  0 +\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y)) =\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"\\<dots> \\<le> (\\<Sum>y\\<in>?Y\\<inter>?X. m_ivl(?f y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n       m_ivl (fun S2 y))\n    \\<le> (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter>\n                       set (Abs_State.dom S1).\n             m_ivl (fun S1 y))", "by(rule sum_mono)(simp add: 1)"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y))\n  \\<le> (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n           m_ivl (fun S1 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S2 y))\n  \\<le> (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n           m_ivl (fun S1 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"\\<dots> \\<le> (\\<Sum>y\\<in>?X. m_ivl(?f y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n       m_ivl (fun S1 y))\n    \\<le> (\\<Sum>y\\<in>set (Abs_State.dom S1). m_ivl (fun S1 y))", "by(simp add: sum_mono2[of \"?X\" \"?Y Int ?X\", OF _ Int_lower2])"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2) \\<inter> set (Abs_State.dom S1).\n     m_ivl (fun S1 y))\n  \\<le> (\\<Sum>y\\<in>set (Abs_State.dom S1). m_ivl (fun S1 y))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S2).\n       (x \\<in> set (Abs_State.dom S1) \\<longrightarrow>\n        fun S1 x \\<sqsubseteq> fun S2 x) \\<and>\n       (x \\<in> set (Abs_State.dom S1) \\<or>\n        \\<top> \\<sqsubseteq> fun S2 x) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S2). m_ivl (fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2). m_ivl (fun S2 y))\n  \\<le> (\\<Sum>y\\<in>set (Abs_State.dom S1). m_ivl (fun S1 y))", "show \"(\\<Sum>y\\<in>?Y. m_ivl(?g y)) \\<le> (\\<Sum>x\\<in>?X. m_ivl(?f x))\""], ["proof (prove)\nusing this:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2). m_ivl (fun S2 y))\n  \\<le> (\\<Sum>y\\<in>set (Abs_State.dom S1). m_ivl (fun S1 y))\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>set (Abs_State.dom S2). m_ivl (fun S2 y))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "."], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>set (Abs_State.dom S2). m_ivl (fun S2 y))\n  \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma m_st_widen:\nassumes \"\\<not> S2 \\<sqsubseteq> S1\" shows \"m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "let ?X = \"set(dom S1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "let ?Y = \"set(dom S2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "let ?f = \"fun S1\""], ["proof (state)\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "let ?g = \"fun S2\""], ["proof (state)\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "assume \"x \\<in> ?X\" \"\\<not> lookup S2 x \\<sqsubseteq> ?f x\""], ["proof (state)\nthis:\n  x \\<in> set (Abs_State.dom S1)\n  \\<not> lookup S2 x \\<sqsubseteq> fun S1 x\n\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "have \"(\\<Sum>x\\<in>?X\\<inter>?Y. m_ivl(?f x \\<nabla> ?g x)) < (\\<Sum>x\\<in>?X. m_ivl(?f x))\" (is \"?L < ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "assume \"x : ?Y\""], ["proof (state)\nthis:\n  x \\<in> set (Abs_State.dom S2)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"?L < (\\<Sum>x\\<in>?X\\<inter>?Y. m_ivl(?f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n         m_ivl (fun S1 x))", "proof(rule sum_strict_mono_ex1, simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x) \\<le> m_ivl (fun S1 x)\n 2. \\<exists>a\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 a \\<nabla> fun S2 a) < m_ivl (fun S1 a)", "show \"\\<forall>x\\<in>?X\\<inter>?Y. m_ivl(?f x \\<nabla> ?g x) \\<le> m_ivl (?f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x) \\<le> m_ivl (fun S1 x)", "by (metis m_ivl_anti_mono widen1)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x) \\<le> m_ivl (fun S1 x)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 a \\<nabla> fun S2 a) < m_ivl (fun S1 a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 a \\<nabla> fun S2 a) < m_ivl (fun S1 a)", "show \"\\<exists>x\\<in>?X\\<inter>?Y. m_ivl(?f x \\<nabla> ?g x) < m_ivl(?f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x) < m_ivl (fun S1 x)", "using \\<open>x:?X\\<close> \\<open>x:?Y\\<close> \\<open>\\<not> lookup S2 x \\<sqsubseteq> ?f x\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> set (Abs_State.dom S1)\n  x \\<in> set (Abs_State.dom S2)\n  \\<not> lookup S2 x \\<sqsubseteq> fun S1 x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x) < m_ivl (fun S1 x)", "by (metis IntI m_ivl_widen lookup_def)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x) < m_ivl (fun S1 x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"\\<dots> \\<le> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "by(simp add: sum_mono2[OF _ Int_lower1])"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x))\n  \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n 2. \\<not> ?P \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "assume \"x ~: ?Y\""], ["proof (state)\nthis:\n  x \\<notin> set (Abs_State.dom S2)\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"?L \\<le> (\\<Sum>x\\<in>?X\\<inter>?Y. m_ivl(?f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter>\n                       set (Abs_State.dom S2).\n             m_ivl (fun S1 x))", "proof(rule sum_mono, simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (Abs_State.dom S1) \\<and>\n       x \\<in> set (Abs_State.dom S2) \\<Longrightarrow>\n       m_ivl (fun S1 x \\<nabla> fun S2 x) \\<le> m_ivl (fun S1 x)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (Abs_State.dom S1) \\<and>\n       x \\<in> set (Abs_State.dom S2) \\<Longrightarrow>\n       m_ivl (fun S1 x \\<nabla> fun S2 x) \\<le> m_ivl (fun S1 x)", "assume \"x:?X \\<and> x:?Y\""], ["proof (state)\nthis:\n  x \\<in> set (Abs_State.dom S1) \\<and> x \\<in> set (Abs_State.dom S2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (Abs_State.dom S1) \\<and>\n       x \\<in> set (Abs_State.dom S2) \\<Longrightarrow>\n       m_ivl (fun S1 x \\<nabla> fun S2 x) \\<le> m_ivl (fun S1 x)", "show \"m_ivl(?f x \\<nabla> ?g x) \\<le> m_ivl (?f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m_ivl (fun S1 x \\<nabla> fun S2 x) \\<le> m_ivl (fun S1 x)", "by (metis m_ivl_anti_mono widen1)"], ["proof (state)\nthis:\n  m_ivl (fun S1 x \\<nabla> fun S2 x) \\<le> m_ivl (fun S1 x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n           m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n           m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"\\<dots> < m_ivl(?f x) + \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x))\n    < m_ivl (fun S1 x) +\n      (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n         m_ivl (fun S1 x))", "using m_ivl_widen[OF \\<open>\\<not> lookup S2 x \\<sqsubseteq> ?f x\\<close>]"], ["proof (prove)\nusing this:\n  m_ivl (fun S1 x \\<nabla> lookup S2 x) < m_ivl (fun S1 x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x))\n    < m_ivl (fun S1 x) +\n      (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n         m_ivl (fun S1 x))", "by (metis Nat.le_refl add_strict_increasing gr0I not_less0)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x))\n  < m_ivl (fun S1 x) +\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x))\n  < m_ivl (fun S1 x) +\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"\\<dots> = (\\<Sum>y\\<in>insert x (?X\\<inter>?Y). m_ivl(?f y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m_ivl (fun S1 x) +\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x)) =\n    (\\<Sum>y\\<in>insert x\n                  (set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2)).\n       m_ivl (fun S1 y))", "using \\<open>x ~: ?Y\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> set (Abs_State.dom S2)\n\ngoal (1 subgoal):\n 1. m_ivl (fun S1 x) +\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x)) =\n    (\\<Sum>y\\<in>insert x\n                  (set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2)).\n       m_ivl (fun S1 y))", "by simp"], ["proof (state)\nthis:\n  m_ivl (fun S1 x) +\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x)) =\n  (\\<Sum>y\\<in>insert x\n                (set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2)).\n     m_ivl (fun S1 y))\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "also"], ["proof (state)\nthis:\n  m_ivl (fun S1 x) +\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x)) =\n  (\\<Sum>y\\<in>insert x\n                (set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2)).\n     m_ivl (fun S1 y))\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "have \"\\<dots> \\<le> (\\<Sum>x\\<in>?X. m_ivl(?f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>insert x\n                  (set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2)).\n       m_ivl (fun S1 y))\n    \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "by(rule sum_mono2)(insert \\<open>x:?X\\<close>, auto)"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>insert x\n                (set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2)).\n     m_ivl (fun S1 y))\n  \\<le> (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Abs_State.dom S2) \\<Longrightarrow>\n    (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n       m_ivl (fun S1 x \\<nabla> fun S2 x))\n    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter> set (Abs_State.dom S2).\n     m_ivl (fun S1 x \\<nabla> fun S2 x))\n  < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> set (Abs_State.dom S1);\n   \\<not> lookup S2 ?x2 \\<sqsubseteq> fun S1 ?x2\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter>\n                                 set (Abs_State.dom S2).\n                       m_ivl (fun S1 x \\<nabla> fun S2 x))\n                    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "with assms"], ["proof (chain)\npicking this:\n  \\<not> S2 \\<sqsubseteq> S1\n  \\<lbrakk>?x2 \\<in> set (Abs_State.dom S1);\n   \\<not> lookup S2 ?x2 \\<sqsubseteq> fun S1 ?x2\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter>\n                                 set (Abs_State.dom S2).\n                       m_ivl (fun S1 x \\<nabla> fun S2 x))\n                    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> S2 \\<sqsubseteq> S1\n  \\<lbrakk>?x2 \\<in> set (Abs_State.dom S1);\n   \\<not> lookup S2 ?x2 \\<sqsubseteq> fun S1 ?x2\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>x\\<in>set (Abs_State.dom S1) \\<inter>\n                                 set (Abs_State.dom S2).\n                       m_ivl (fun S1 x \\<nabla> fun S2 x))\n                    < (\\<Sum>x\\<in>set (Abs_State.dom S1). m_ivl (fun S1 x))\n\ngoal (1 subgoal):\n 1. m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1", "by(auto simp: le_st_def widen_st_def m_st_def Int_def)"], ["proof (state)\nthis:\n  m_st m_ivl (S1 \\<nabla> S2) < m_st m_ivl S1\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"n_st m X st = (\\<Sum>x\\<in>X. m(lookup st x))\""], ["", "lemma n_st_mono: assumes \"set(dom S1) \\<subseteq> X\" \"set(dom S2) \\<subseteq> X\" \"S1 \\<sqsubseteq> S2\"\nshows \"n_st n_ivl X S1 \\<le> n_st n_ivl X S2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n_st n_ivl X S1 \\<le> n_st n_ivl X S2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. n_st n_ivl X S1 \\<le> n_st n_ivl X S2", "have \"(\\<Sum>x\\<in>X. n_ivl(lookup S1 x)) \\<le> (\\<Sum>x\\<in>X. n_ivl(lookup S2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>X. n_ivl (lookup S1 x))\n    \\<le> (\\<Sum>x\\<in>X. n_ivl (lookup S2 x))", "apply(rule sum_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       n_ivl (lookup S1 x) \\<le> n_ivl (lookup S2 x)", "using assms"], ["proof (prove)\nusing this:\n  set (Abs_State.dom S1) \\<subseteq> X\n  set (Abs_State.dom S2) \\<subseteq> X\n  S1 \\<sqsubseteq> S2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow>\n       n_ivl (lookup S1 x) \\<le> n_ivl (lookup S2 x)", "by(auto simp: le_st_def lookup_def n_ivl_mono split: if_splits)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>X. n_ivl (lookup S1 x))\n  \\<le> (\\<Sum>x\\<in>X. n_ivl (lookup S2 x))\n\ngoal (1 subgoal):\n 1. n_st n_ivl X S1 \\<le> n_st n_ivl X S2", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>X. n_ivl (lookup S1 x))\n  \\<le> (\\<Sum>x\\<in>X. n_ivl (lookup S2 x))\n\ngoal (1 subgoal):\n 1. n_st n_ivl X S1 \\<le> n_st n_ivl X S2", "by(simp add: n_st_def)"], ["proof (state)\nthis:\n  n_st n_ivl X S1 \\<le> n_st n_ivl X S2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma n_st_narrow:\nassumes \"finite X\" and \"set(dom S1) \\<subseteq> X\" \"set(dom S2) \\<subseteq> X\"\nand \"S2 \\<sqsubseteq> S1\" \"\\<not> S1 \\<sqsubseteq> S1 \\<triangle> S2\"\nshows \"n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1", "have 1: \"\\<forall>x\\<in>X. n_ivl (lookup (S1 \\<triangle> S2) x) \\<le> n_ivl (lookup S1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X.\n       n_ivl (lookup (S1 \\<triangle> S2) x) \\<le> n_ivl (lookup S1 x)", "using assms(2-4)"], ["proof (prove)\nusing this:\n  set (Abs_State.dom S1) \\<subseteq> X\n  set (Abs_State.dom S2) \\<subseteq> X\n  S2 \\<sqsubseteq> S1\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X.\n       n_ivl (lookup (S1 \\<triangle> S2) x) \\<le> n_ivl (lookup S1 x)", "by(auto simp: le_st_def narrow_st_def lookup_def n_ivl_mono narrow2\n            split: if_splits)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>X.\n     n_ivl (lookup (S1 \\<triangle> S2) x) \\<le> n_ivl (lookup S1 x)\n\ngoal (1 subgoal):\n 1. n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1", "have 2: \"\\<exists>x\\<in>X. n_ivl (lookup (S1 \\<triangle> S2) x) < n_ivl (lookup S1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X.\n       n_ivl (lookup (S1 \\<triangle> S2) x) < n_ivl (lookup S1 x)", "using assms(2-5)"], ["proof (prove)\nusing this:\n  set (Abs_State.dom S1) \\<subseteq> X\n  set (Abs_State.dom S2) \\<subseteq> X\n  S2 \\<sqsubseteq> S1\n  \\<not> S1 \\<sqsubseteq> S1 \\<triangle> S2\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>X.\n       n_ivl (lookup (S1 \\<triangle> S2) x) < n_ivl (lookup S1 x)", "by(auto simp: le_st_def narrow_st_def lookup_def intro: n_ivl_narrow\n            split: if_splits)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>X.\n     n_ivl (lookup (S1 \\<triangle> S2) x) < n_ivl (lookup S1 x)\n\ngoal (1 subgoal):\n 1. n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1", "have \"(\\<Sum>x\\<in>X. n_ivl(lookup (S1 \\<triangle> S2) x)) < (\\<Sum>x\\<in>X. n_ivl(lookup S1 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>X. n_ivl (lookup (S1 \\<triangle> S2) x))\n    < (\\<Sum>x\\<in>X. n_ivl (lookup S1 x))", "apply(rule sum_strict_mono_ex1[OF \\<open>finite X\\<close>])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>X.\n       n_ivl (lookup (S1 \\<triangle> S2) x) \\<le> n_ivl (lookup S1 x)\n 2. \\<exists>a\\<in>X.\n       n_ivl (lookup (S1 \\<triangle> S2) a) < n_ivl (lookup S1 a)", "using 1 2"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>X.\n     n_ivl (lookup (S1 \\<triangle> S2) x) \\<le> n_ivl (lookup S1 x)\n  \\<exists>x\\<in>X.\n     n_ivl (lookup (S1 \\<triangle> S2) x) < n_ivl (lookup S1 x)\n\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>X.\n       n_ivl (lookup (S1 \\<triangle> S2) x) \\<le> n_ivl (lookup S1 x)\n 2. \\<exists>a\\<in>X.\n       n_ivl (lookup (S1 \\<triangle> S2) a) < n_ivl (lookup S1 a)", "by blast+"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>X. n_ivl (lookup (S1 \\<triangle> S2) x))\n  < (\\<Sum>x\\<in>X. n_ivl (lookup S1 x))\n\ngoal (1 subgoal):\n 1. n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>X. n_ivl (lookup (S1 \\<triangle> S2) x))\n  < (\\<Sum>x\\<in>X. n_ivl (lookup S1 x))\n\ngoal (1 subgoal):\n 1. n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1", "by(simp add: n_st_def)"], ["proof (state)\nthis:\n  n_st n_ivl X (S1 \\<triangle> S2) < n_st n_ivl X S1\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Termination: Option\""], ["", "definition \"m_o m n opt = (case opt of None \\<Rightarrow> n+1 | Some x \\<Rightarrow> m x)\""], ["", "lemma m_o_anti_mono: \"finite X \\<Longrightarrow> domo S2 \\<subseteq> X \\<Longrightarrow> S1 \\<sqsubseteq> S2 \\<Longrightarrow>\n  m_o (m_st m_ivl) (2 * card X) S2 \\<le> m_o (m_st m_ivl) (2 * card X) S1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; domo S2 \\<subseteq> X; S1 \\<sqsubseteq> S2\\<rbrakk>\n    \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X) S2\n                      \\<le> m_o (m_st m_ivl) (2 * card X) S1", "apply(induction S1 S2 rule: le_option.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>finite X; domo (Some y) \\<subseteq> X;\n        Some x \\<sqsubseteq> Some y\\<rbrakk>\n       \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X) (Some y)\n                         \\<le> m_o (m_st m_ivl) (2 * card X) (Some x)\n 2. \\<And>y.\n       \\<lbrakk>finite X; domo y \\<subseteq> X;\n        None \\<sqsubseteq> y\\<rbrakk>\n       \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X) y\n                         \\<le> m_o (m_st m_ivl) (2 * card X) None\n 3. \\<And>uu_.\n       \\<lbrakk>finite X; domo None \\<subseteq> X;\n        Some uu_ \\<sqsubseteq> None\\<rbrakk>\n       \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X) None\n                         \\<le> m_o (m_st m_ivl) (2 * card X) (Some uu_)", "apply(auto simp: domo_def m_o_def m_st_anti_mono le_SucI m_st_height\n           split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma m_o_widen: \"\\<lbrakk> finite X; domo S2 \\<subseteq> X; \\<not> S2 \\<sqsubseteq> S1 \\<rbrakk> \\<Longrightarrow>\n  m_o (m_st m_ivl) (2 * card X) (S1 \\<nabla> S2) < m_o (m_st m_ivl) (2 * card X) S1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; domo S2 \\<subseteq> X;\n     \\<not> S2 \\<sqsubseteq> S1\\<rbrakk>\n    \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X) (S1 \\<nabla> S2)\n                      < m_o (m_st m_ivl) (2 * card X) S1", "by(auto simp: m_o_def domo_def m_st_height less_Suc_eq_le m_st_widen\n        split: option.split)"], ["", "definition \"n_o n opt = (case opt of None \\<Rightarrow> 0 | Some x \\<Rightarrow> n x + 1)\""], ["", "lemma n_o_mono: \"domo S1 \\<subseteq> X \\<Longrightarrow> domo S2 \\<subseteq> X \\<Longrightarrow> S1 \\<sqsubseteq> S2 \\<Longrightarrow>\n  n_o (n_st n_ivl X) S1 \\<le> n_o (n_st n_ivl X) S2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>domo S1 \\<subseteq> X; domo S2 \\<subseteq> X;\n     S1 \\<sqsubseteq> S2\\<rbrakk>\n    \\<Longrightarrow> n_o (n_st n_ivl X) S1 \\<le> n_o (n_st n_ivl X) S2", "apply(induction S1 S2 rule: le_option.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>domo (Some x) \\<subseteq> X; domo (Some y) \\<subseteq> X;\n        Some x \\<sqsubseteq> Some y\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X) (Some x)\n                         \\<le> n_o (n_st n_ivl X) (Some y)\n 2. \\<And>y.\n       \\<lbrakk>domo None \\<subseteq> X; domo y \\<subseteq> X;\n        None \\<sqsubseteq> y\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X) None \\<le> n_o (n_st n_ivl X) y\n 3. \\<And>uu_.\n       \\<lbrakk>domo (Some uu_) \\<subseteq> X; domo None \\<subseteq> X;\n        Some uu_ \\<sqsubseteq> None\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X) (Some uu_)\n                         \\<le> n_o (n_st n_ivl X) None", "apply(auto simp: domo_def n_o_def n_st_mono\n           split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma n_o_narrow:\n  \"\\<lbrakk> finite X; domo S1 \\<subseteq> X; domo S2 \\<subseteq> X; S2 \\<sqsubseteq> S1; \\<not> S1 \\<sqsubseteq> S1 \\<triangle> S2 \\<rbrakk>\n  \\<Longrightarrow> n_o (n_st n_ivl X) (S1 \\<triangle> S2) < n_o (n_st n_ivl X) S1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite X; domo S1 \\<subseteq> X; domo S2 \\<subseteq> X;\n     S2 \\<sqsubseteq> S1; \\<not> S1 \\<sqsubseteq> S1 \\<triangle> S2\\<rbrakk>\n    \\<Longrightarrow> n_o (n_st n_ivl X) (S1 \\<triangle> S2)\n                      < n_o (n_st n_ivl X) S1", "apply(induction S1 S2 rule: narrow_option.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite X; domo None \\<subseteq> X; domo x \\<subseteq> X;\n        x \\<sqsubseteq> None;\n        \\<not> None \\<sqsubseteq> None \\<triangle> x\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X) (None \\<triangle> x)\n                         < n_o (n_st n_ivl X) None\n 2. \\<And>v.\n       \\<lbrakk>finite X; domo (Some v) \\<subseteq> X;\n        domo None \\<subseteq> X; None \\<sqsubseteq> Some v;\n        \\<not> Some v \\<sqsubseteq> Some v \\<triangle> None\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X) (Some v \\<triangle> None)\n                         < n_o (n_st n_ivl X) (Some v)\n 3. \\<And>x y.\n       \\<lbrakk>finite X; domo (Some x) \\<subseteq> X;\n        domo (Some y) \\<subseteq> X; Some y \\<sqsubseteq> Some x;\n        \\<not> Some x \\<sqsubseteq> Some x \\<triangle> Some y\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X) (Some x \\<triangle> Some y)\n                         < n_o (n_st n_ivl X) (Some x)", "apply(auto simp: n_o_def domo_def n_st_narrow)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma domo_widen_subset: \"domo (S1 \\<nabla> S2) \\<subseteq> domo S1 \\<union> domo S2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domo (S1 \\<nabla> S2) \\<subseteq> domo S1 \\<union> domo S2", "apply(induction S1 S2 rule: widen_option.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. domo (None \\<nabla> x) \\<subseteq> domo None \\<union> domo x\n 2. \\<And>v.\n       domo (Some v \\<nabla> None)\n       \\<subseteq> domo (Some v) \\<union> domo None\n 3. \\<And>x y.\n       domo (Some x \\<nabla> Some y)\n       \\<subseteq> domo (Some x) \\<union> domo (Some y)", "apply (auto simp: domo_def widen_st_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma domo_narrow_subset: \"domo (S1 \\<triangle> S2) \\<subseteq> domo S1 \\<union> domo S2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domo (S1 \\<triangle> S2) \\<subseteq> domo S1 \\<union> domo S2", "apply(induction S1 S2 rule: narrow_option.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. domo (None \\<triangle> x) \\<subseteq> domo None \\<union> domo x\n 2. \\<And>v.\n       domo (Some v \\<triangle> None)\n       \\<subseteq> domo (Some v) \\<union> domo None\n 3. \\<And>x y.\n       domo (Some x \\<triangle> Some y)\n       \\<subseteq> domo (Some x) \\<union> domo (Some y)", "apply (auto simp: domo_def narrow_st_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Termination: Commands\""], ["", "lemma strip_widen_acom[simp]:\n  \"strip c' = strip (c::'a::WN acom) \\<Longrightarrow>  strip (c \\<nabla>\\<^sub>c c') = strip c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c' = strip c \\<Longrightarrow>\n    strip (c \\<nabla>\\<^sub>c c') = strip c", "by(induction \"widen::'a\\<Rightarrow>'a\\<Rightarrow>'a\" c c' rule: map2_acom.induct) simp_all"], ["", "lemma strip_narrow_acom[simp]:\n  \"strip c' = strip (c::'a::WN acom) \\<Longrightarrow>  strip (c \\<triangle>\\<^sub>c c') = strip c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c' = strip c \\<Longrightarrow>\n    strip (c \\<triangle>\\<^sub>c c') = strip c", "by(induction \"narrow::'a\\<Rightarrow>'a\\<Rightarrow>'a\" c c' rule: map2_acom.induct) simp_all"], ["", "lemma annos_widen_acom[simp]: \"strip c1 = strip (c2::'a::WN acom) \\<Longrightarrow>\n  annos(c1 \\<nabla>\\<^sub>c c2) = map (%(x,y).x\\<nabla>y) (zip (annos c1) (annos(c2::'a::WN acom)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c1 = strip c2 \\<Longrightarrow>\n    annos (c1 \\<nabla>\\<^sub>c c2) = map2 (\\<nabla>) (annos c1) (annos c2)", "by(induction \"widen::'a\\<Rightarrow>'a\\<Rightarrow>'a\" c1 c2 rule: map2_acom.induct)\n  (simp_all add: size_annos_same2)"], ["", "lemma annos_narrow_acom[simp]: \"strip c1 = strip (c2::'a::WN acom) \\<Longrightarrow>\n  annos(c1 \\<triangle>\\<^sub>c c2) = map (%(x,y).x\\<triangle>y) (zip (annos c1) (annos(c2::'a::WN acom)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c1 = strip c2 \\<Longrightarrow>\n    annos (c1 \\<triangle>\\<^sub>c c2) =\n    map2 (\\<triangle>) (annos c1) (annos c2)", "by(induction \"narrow::'a\\<Rightarrow>'a\\<Rightarrow>'a\" c1 c2 rule: map2_acom.induct)\n  (simp_all add: size_annos_same2)"], ["", "lemma widen_acom_Com[simp]: \"strip c2 = strip c1 \\<Longrightarrow>\n  c1 : Com X \\<Longrightarrow> c2 : Com X \\<Longrightarrow> (c1 \\<nabla>\\<^sub>c c2) : Com X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strip c2 = strip c1; c1 \\<in> Com X; c2 \\<in> Com X\\<rbrakk>\n    \\<Longrightarrow> c1 \\<nabla>\\<^sub>c c2 \\<in> Com X", "apply(auto simp add: Com_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x.\n       \\<lbrakk>strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2). domo S \\<subseteq> X;\n        (a, b) \\<in> set (zip (annos c1) (annos c2));\n        x \\<in> domo (a \\<nabla> b)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(rename_tac S S' x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x.\n       \\<lbrakk>strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2). domo S \\<subseteq> X;\n        (S, S') \\<in> set (zip (annos c1) (annos c2));\n        x \\<in> domo (S \\<nabla> S')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(erule in_set_zipE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x.\n       \\<lbrakk>strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2). domo S \\<subseteq> X;\n        x \\<in> domo (S \\<nabla> S'); S \\<in> set (annos c1);\n        S' \\<in> set (annos c2)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(auto simp: domo_def split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x x2.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(case_tac S)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S S' x x2.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = None\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(case_tac S')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S S' x x2.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2); S = None;\n        S' = None\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2); S = None;\n        S' = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 3. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2); S = None;\n        S' = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(case_tac S')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2); S = Some a;\n        S' = None\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>S S' x x2 a aa.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2); S = Some a;\n        S' = Some aa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x x2 a aa.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<nabla> S' = Some x2; x \\<in> set (Abs_State.dom x2); S = Some a;\n        S' = Some aa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply (fastforce simp: widen_st_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma narrow_acom_Com[simp]: \"strip c2 = strip c1 \\<Longrightarrow>\n  c1 : Com X \\<Longrightarrow> c2 : Com X \\<Longrightarrow> (c1 \\<triangle>\\<^sub>c c2) : Com X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>strip c2 = strip c1; c1 \\<in> Com X; c2 \\<in> Com X\\<rbrakk>\n    \\<Longrightarrow> c1 \\<triangle>\\<^sub>c c2 \\<in> Com X", "apply(auto simp add: Com_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x.\n       \\<lbrakk>strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2). domo S \\<subseteq> X;\n        (a, b) \\<in> set (zip (annos c1) (annos c2));\n        x \\<in> domo (a \\<triangle> b)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(rename_tac S S' x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x.\n       \\<lbrakk>strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2). domo S \\<subseteq> X;\n        (S, S') \\<in> set (zip (annos c1) (annos c2));\n        x \\<in> domo (S \\<triangle> S')\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(erule in_set_zipE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x.\n       \\<lbrakk>strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2). domo S \\<subseteq> X;\n        x \\<in> domo (S \\<triangle> S'); S \\<in> set (annos c1);\n        S' \\<in> set (annos c2)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(auto simp: domo_def split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x x2.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(case_tac S)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S S' x x2.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = None\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(case_tac S')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S S' x x2.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = None; S' = None\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = None; S' = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 3. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = None; S' = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply(case_tac S')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S S' x x2 a.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a; S' = None\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X\n 2. \\<And>S S' x x2 a aa.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a; S' = Some aa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S S' x x2 a aa.\n       \\<lbrakk>S \\<in> set (annos c1); S' \\<in> set (annos c2);\n        strip c2 = strip c1;\n        \\<forall>S\\<in>set (annos c1).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c2).\n           \\<forall>x2.\n              S = Some x2 \\<longrightarrow>\n              set (Abs_State.dom x2) \\<subseteq> X;\n        S \\<triangle> S' = Some x2; x \\<in> set (Abs_State.dom x2);\n        S = Some a; S' = Some aa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> X", "apply (fastforce simp: narrow_st_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"m_c m c = (let as = annos c in \\<Sum>i=0..<size as. m(as!i))\""], ["", "lemma measure_m_c: \"finite X \\<Longrightarrow> {(c, c \\<nabla>\\<^sub>c c') |c c'::ivl st option acom.\n     strip c' = strip c \\<and> c : Com X \\<and> c' : Com X \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>\n    \\<subseteq> measure(m_c(m_o (m_st m_ivl) (2*card(X))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X \\<Longrightarrow>\n    {(c, c \\<nabla>\\<^sub>c c') |c c'.\n     strip c' = strip c \\<and>\n     c \\<in> Com X \\<and>\n     c' \\<in> Com X \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>\n    \\<subseteq> measure (m_c (m_o (m_st m_ivl) (2 * card X)))", "apply(auto simp: m_c_def Let_def Com_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<min (length (annos c))\n   (length (annos c')).\n                             m_o (m_st m_ivl) (2 * card X)\n                              (annos c ! i \\<nabla> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               m_o (m_st m_ivl) (2 * card X) (annos c ! i))", "apply(subgoal_tac \"length(annos c') = length(annos c)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<min (length (annos c))\n   (length (annos c')).\n                             m_o (m_st m_ivl) (2 * card X)\n                              (annos c ! i \\<nabla> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               m_o (m_st m_ivl) (2 * card X) (annos c ! i))\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c\\<rbrakk>\n       \\<Longrightarrow> length (annos c') = length (annos c)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c\\<rbrakk>\n       \\<Longrightarrow> length (annos c') = length (annos c)\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<min (length (annos c))\n   (length (annos c')).\n                             m_o (m_st m_ivl) (2 * card X)\n                              (annos c ! i \\<nabla> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               m_o (m_st m_ivl) (2 * card X) (annos c ! i))", "apply (simp add: size_annos_same2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<min (length (annos c))\n   (length (annos c')).\n                             m_o (m_st m_ivl) (2 * card X)\n                              (annos c ! i \\<nabla> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               m_o (m_st m_ivl) (2 * card X) (annos c ! i))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<length (annos c).\n                             m_o (m_st m_ivl) (2 * card X)\n                              (annos c ! i \\<nabla> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               m_o (m_st m_ivl) (2 * card X) (annos c ! i))", "apply(rule sum_strict_mono_ex1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> finite {0..<length (annos c)}\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! x \\<nabla> annos c' ! x)\n                            \\<le> m_o (m_st m_ivl) (2 * card X)\n                                   (annos c ! x)\n 3. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! a \\<nabla> annos c' ! a)\n                            < m_o (m_st m_ivl) (2 * card X) (annos c ! a)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! x \\<nabla> annos c' ! x)\n                            \\<le> m_o (m_st m_ivl) (2 * card X)\n                                   (annos c ! x)\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! a \\<nabla> annos c' ! a)\n                            < m_o (m_st m_ivl) (2 * card X) (annos c ! a)", "apply (clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c; length (annos c') = length (annos c);\n        x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X)\n                          (annos c ! x \\<nabla> annos c' ! x)\n                         \\<le> m_o (m_st m_ivl) (2 * card X) (annos c ! x)\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! a \\<nabla> annos c' ! a)\n                            < m_o (m_st m_ivl) (2 * card X) (annos c ! a)", "apply(erule m_o_anti_mono)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c; length (annos c') = length (annos c);\n        x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> domo (annos c ! x \\<nabla> annos c' ! x)\n                         \\<subseteq> X\n 2. \\<And>c c' x.\n       \\<lbrakk>strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c; length (annos c') = length (annos c);\n        x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> annos c ! x \\<sqsubseteq>\n                         annos c ! x \\<nabla> annos c' ! x\n 3. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! a \\<nabla> annos c' ! a)\n                            < m_o (m_st m_ivl) (2 * card X) (annos c ! a)", "apply(rule subset_trans[OF domo_widen_subset])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c; length (annos c') = length (annos c);\n        x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> domo (annos c ! x) \\<union> domo (annos c' ! x)\n                         \\<subseteq> X\n 2. \\<And>c c' x.\n       \\<lbrakk>strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c; length (annos c') = length (annos c);\n        x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> annos c ! x \\<sqsubseteq>\n                         annos c ! x \\<nabla> annos c' ! x\n 3. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! a \\<nabla> annos c' ! a)\n                            < m_o (m_st m_ivl) (2 * card X) (annos c ! a)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c; length (annos c') = length (annos c);\n        x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> annos c ! x \\<sqsubseteq>\n                         annos c ! x \\<nabla> annos c' ! x\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! a \\<nabla> annos c' ! a)\n                            < m_o (m_st m_ivl) (2 * card X) (annos c ! a)", "apply(rule widen1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<not> c' \\<sqsubseteq> c;\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! a \\<nabla> annos c' ! a)\n                            < m_o (m_st m_ivl) (2 * card X) (annos c ! a)", "apply(auto simp: le_iff_le_annos listrel_iff_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c' ! n \\<sqsubseteq> annos c ! n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            m_o (m_st m_ivl) (2 * card X)\n                             (annos c ! a \\<nabla> annos c' ! a)\n                            < m_o (m_st m_ivl) (2 * card X) (annos c ! a)", "apply(rule_tac x=n in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c' ! n \\<sqsubseteq> annos c ! n\\<rbrakk>\n       \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X)\n                          (annos c ! n \\<nabla> annos c' ! n)\n                         < m_o (m_st m_ivl) (2 * card X) (annos c ! n)\n 2. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c' ! n \\<sqsubseteq> annos c ! n\\<rbrakk>\n       \\<Longrightarrow> n \\<in> {0..<length (annos c)}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c' ! n \\<sqsubseteq> annos c ! n\\<rbrakk>\n       \\<Longrightarrow> n \\<in> {0..<length (annos c)}\n 2. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c' ! n \\<sqsubseteq> annos c ! n\\<rbrakk>\n       \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X)\n                          (annos c ! n \\<nabla> annos c' ! n)\n                         < m_o (m_st m_ivl) (2 * card X) (annos c ! n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c' ! n \\<sqsubseteq> annos c ! n\\<rbrakk>\n       \\<Longrightarrow> m_o (m_st m_ivl) (2 * card X)\n                          (annos c ! n \\<nabla> annos c' ! n)\n                         < m_o (m_st m_ivl) (2 * card X) (annos c ! n)", "apply(erule m_o_widen)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' n.\n       \\<lbrakk>strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c' ! n \\<sqsubseteq> annos c ! n\\<rbrakk>\n       \\<Longrightarrow> domo (annos c' ! n) \\<subseteq> X\n 2. \\<And>c c' n.\n       \\<lbrakk>strip c' = strip c;\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c' ! n \\<sqsubseteq> annos c ! n\\<rbrakk>\n       \\<Longrightarrow> \\<not> annos c' ! n \\<sqsubseteq> annos c ! n", "apply (simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma measure_n_c: \"finite X \\<Longrightarrow> {(c, c \\<triangle>\\<^sub>c c') |c c'.\n  strip c = strip c' \\<and> c \\<in> Com X \\<and> c' \\<in> Com X \\<and> c' \\<sqsubseteq> c \\<and> \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c'}\\<inverse>\n  \\<subseteq> measure(m_c(n_o (n_st n_ivl X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X \\<Longrightarrow>\n    {(c, c \\<triangle>\\<^sub>c c') |c c'.\n     strip c = strip c' \\<and>\n     c \\<in> Com X \\<and>\n     c' \\<in> Com X \\<and>\n     c' \\<sqsubseteq> c \\<and>\n     \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c'}\\<inverse>\n    \\<subseteq> measure (m_c (n_o (n_st n_ivl X)))", "apply(auto simp: m_c_def Let_def Com_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c;\n        \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<min (length (annos c))\n   (length (annos c')).\n                             n_o (n_st n_ivl X)\n                              (annos c ! i \\<triangle> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               n_o (n_st n_ivl X) (annos c ! i))", "apply(subgoal_tac \"length(annos c') = length(annos c)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<min (length (annos c))\n   (length (annos c')).\n                             n_o (n_st n_ivl X)\n                              (annos c ! i \\<triangle> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               n_o (n_st n_ivl X) (annos c ! i))\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c;\n        \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> length (annos c') = length (annos c)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c;\n        \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> length (annos c') = length (annos c)\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<min (length (annos c))\n   (length (annos c')).\n                             n_o (n_st n_ivl X)\n                              (annos c ! i \\<triangle> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               n_o (n_st n_ivl X) (annos c ! i))", "apply (simp add: size_annos_same2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<min (length (annos c))\n   (length (annos c')).\n                             n_o (n_st n_ivl X)\n                              (annos c ! i \\<triangle> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               n_o (n_st n_ivl X) (annos c ! i))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>i = 0..<length (annos c).\n                             n_o (n_st n_ivl X)\n                              (annos c ! i \\<triangle> annos c' ! i))\n                         < (\\<Sum>i = 0..<length (annos c).\n                               n_o (n_st n_ivl X) (annos c ! i))", "apply(rule sum_strict_mono_ex1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> finite {0..<length (annos c)}\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! x \\<triangle> annos c' ! x)\n                            \\<le> n_o (n_st n_ivl X) (annos c ! x)\n 3. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! x \\<triangle> annos c' ! x)\n                            \\<le> n_o (n_st n_ivl X) (annos c ! x)\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply (clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X)\n                          (annos c ! x \\<triangle> annos c' ! x)\n                         \\<le> n_o (n_st n_ivl X) (annos c ! x)\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply(rule n_o_mono)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> domo (annos c ! x \\<triangle> annos c' ! x)\n                         \\<subseteq> X\n 2. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> domo (annos c ! x) \\<subseteq> X\n 3. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> annos c ! x \\<triangle> annos c' ! x \\<sqsubseteq>\n                         annos c ! x\n 4. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "using domo_narrow_subset"], ["proof (prove)\nusing this:\n  domo (?S1.0 \\<triangle> ?S2.0) \\<subseteq> domo ?S1.0 \\<union> domo ?S2.0\n\ngoal (4 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> domo (annos c ! x \\<triangle> annos c' ! x)\n                         \\<subseteq> X\n 2. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> domo (annos c ! x) \\<subseteq> X\n 3. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> annos c ! x \\<triangle> annos c' ! x \\<sqsubseteq>\n                         annos c ! x\n 4. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> domo (annos c ! x) \\<subseteq> X\n 2. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> annos c ! x \\<triangle> annos c' ! x \\<sqsubseteq>\n                         annos c ! x\n 3. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply fastforce"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> annos c ! x \\<triangle> annos c' ! x \\<sqsubseteq>\n                         annos c ! x\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply(rule narrow2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' x.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c); x < length (annos c)\\<rbrakk>\n       \\<Longrightarrow> annos c' ! x \\<sqsubseteq> annos c ! x\n 2. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply(fastforce simp: le_iff_le_annos listrel_iff_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c'.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        c' \\<sqsubseteq> c; \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c';\n        length (annos c') = length (annos c)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply(auto simp: le_iff_le_annos listrel_iff_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a\\<in>{0..<length (annos c)}.\n                            n_o (n_st n_ivl X)\n                             (annos c ! a \\<triangle> annos c' ! a)\n                            < n_o (n_st n_ivl X) (annos c ! a)", "apply(rule_tac x=n in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X)\n                          (annos c ! n \\<triangle> annos c' ! n)\n                         < n_o (n_st n_ivl X) (annos c ! n)\n 2. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> n \\<in> {0..<length (annos c)}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> n \\<in> {0..<length (annos c)}\n 2. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X)\n                          (annos c ! n \\<triangle> annos c' ! n)\n                         < n_o (n_st n_ivl X) (annos c ! n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' n.\n       \\<lbrakk>finite X; strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> n_o (n_st n_ivl X)\n                          (annos c ! n \\<triangle> annos c' ! n)\n                         < n_o (n_st n_ivl X) (annos c ! n)", "apply(erule n_o_narrow)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>c c' n.\n       \\<lbrakk>strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> domo (annos c ! n) \\<subseteq> X\n 2. \\<And>c c' n.\n       \\<lbrakk>strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> domo (annos c' ! n) \\<subseteq> X\n 3. \\<And>c c' n.\n       \\<lbrakk>strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> annos c' ! n \\<sqsubseteq> annos c ! n\n 4. \\<And>c c' n.\n       \\<lbrakk>strip c = strip c';\n        \\<forall>S\\<in>set (annos c). domo S \\<subseteq> X;\n        \\<forall>S\\<in>set (annos c'). domo S \\<subseteq> X;\n        \\<forall>n<length (annos c). annos c' ! n \\<sqsubseteq> annos c ! n;\n        length (annos c') = length (annos c); n < length (annos c);\n        \\<not> annos c ! n \\<sqsubseteq>\n               annos c ! n \\<triangle> annos c' ! n\\<rbrakk>\n       \\<Longrightarrow> \\<not> annos c ! n \\<sqsubseteq>\n                                annos c ! n \\<triangle> annos c' ! n", "apply (simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Termination: Post-Fixed Point Iterations\""], ["", "lemma iter_widen_termination:\nfixes c0 :: \"'a::WN acom\"\nassumes P_f: \"\\<And>c. P c \\<Longrightarrow> P(f c)\"\nassumes P_widen: \"\\<And>c c'. P c \\<Longrightarrow> P c' \\<Longrightarrow> P(c \\<nabla>\\<^sub>c c')\"\nand \"wf({(c::'a acom,c \\<nabla>\\<^sub>c c')|c c'. P c \\<and> P c' \\<and> ~ c' \\<sqsubseteq> c}^-1)\"\nand \"P c0\" and \"c0 \\<sqsubseteq> f c0\" shows \"\\<exists>c. iter_widen f c0 = Some c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. iter_widen f c0 = Some c", "proof(simp add: iter_widen_def, rule wf_while_option_Some[where P = \"P\"])"], ["proof (state)\ngoal (3 subgoals):\n 1. wf {(c, s).\n        (P s \\<and> \\<not> f s \\<sqsubseteq> s) \\<and>\n        c = s \\<nabla>\\<^sub>c f s}\n 2. \\<And>s.\n       \\<lbrakk>P s; \\<not> f s \\<sqsubseteq> s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<nabla>\\<^sub>c f s)\n 3. P c0", "show \"wf {(cc', c). (P c \\<and> \\<not> f c \\<sqsubseteq> c) \\<and> cc' = c \\<nabla>\\<^sub>c f c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(cc', c).\n        (P c \\<and> \\<not> f c \\<sqsubseteq> c) \\<and>\n        cc' = c \\<nabla>\\<^sub>c f c}", "apply(rule wf_subset[OF assms(3)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(cc', c).\n     (P c \\<and> \\<not> f c \\<sqsubseteq> c) \\<and>\n     cc' = c \\<nabla>\\<^sub>c f c}\n    \\<subseteq> {(c, c \\<nabla>\\<^sub>c c') |c c'.\n                 P c \\<and> P c' \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>", "by(blast intro: P_f)"], ["proof (state)\nthis:\n  wf {(cc', c).\n      (P c \\<and> \\<not> f c \\<sqsubseteq> c) \\<and>\n      cc' = c \\<nabla>\\<^sub>c f c}\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>P s; \\<not> f s \\<sqsubseteq> s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<nabla>\\<^sub>c f s)\n 2. P c0", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>P s; \\<not> f s \\<sqsubseteq> s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<nabla>\\<^sub>c f s)\n 2. P c0", "show \"P c0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P c0", "by(rule \\<open>P c0\\<close>)"], ["proof (state)\nthis:\n  P c0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>P s; \\<not> f s \\<sqsubseteq> s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<nabla>\\<^sub>c f s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>P s; \\<not> f s \\<sqsubseteq> s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<nabla>\\<^sub>c f s)", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>P s; \\<not> f s \\<sqsubseteq> s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<nabla>\\<^sub>c f s)", "assume \"P c\""], ["proof (state)\nthis:\n  P c\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>P s; \\<not> f s \\<sqsubseteq> s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<nabla>\\<^sub>c f s)", "thus \"P (c \\<nabla>\\<^sub>c f c)\""], ["proof (prove)\nusing this:\n  P c\n\ngoal (1 subgoal):\n 1. P (c \\<nabla>\\<^sub>c f c)", "by(simp add: P_f P_widen)"], ["proof (state)\nthis:\n  P (c \\<nabla>\\<^sub>c f c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iter_narrow_termination:\nassumes P_f: \"\\<And>c. P c \\<Longrightarrow> P(c \\<triangle>\\<^sub>c f c)\"\nand wf: \"wf({(c, c \\<triangle>\\<^sub>c f c)|c c'. P c \\<and> ~ c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c}^-1)\"\nand \"P c0\" shows \"\\<exists>c. iter_narrow f c0 = Some c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. iter_narrow f c0 = Some c", "proof(simp add: iter_narrow_def, rule wf_while_option_Some[where P = \"P\"])"], ["proof (state)\ngoal (3 subgoals):\n 1. wf {(c, s).\n        (P s \\<and> \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s) \\<and>\n        c = s \\<triangle>\\<^sub>c f s}\n 2. \\<And>s.\n       \\<lbrakk>P s;\n        \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<triangle>\\<^sub>c f s)\n 3. P c0", "show \"wf {(c', c). (P c \\<and> \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c) \\<and> c' = c \\<triangle>\\<^sub>c f c}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(c', c).\n        (P c \\<and> \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c) \\<and>\n        c' = c \\<triangle>\\<^sub>c f c}", "apply(rule wf_subset[OF wf])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(c', c).\n     (P c \\<and> \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c) \\<and>\n     c' = c \\<triangle>\\<^sub>c f c}\n    \\<subseteq> {uu_.\n                 \\<exists>c c'.\n                    uu_ = (c, c \\<triangle>\\<^sub>c f c) \\<and>\n                    P c \\<and>\n                    \\<not> c \\<sqsubseteq>\n                           c \\<triangle>\\<^sub>c f c}\\<inverse>", "by(blast intro: P_f)"], ["proof (state)\nthis:\n  wf {(c', c).\n      (P c \\<and> \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c f c) \\<and>\n      c' = c \\<triangle>\\<^sub>c f c}\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>P s;\n        \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<triangle>\\<^sub>c f s)\n 2. P c0", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>P s;\n        \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<triangle>\\<^sub>c f s)\n 2. P c0", "show \"P c0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P c0", "by(rule \\<open>P c0\\<close>)"], ["proof (state)\nthis:\n  P c0\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>P s;\n        \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<triangle>\\<^sub>c f s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>P s;\n        \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<triangle>\\<^sub>c f s)", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>P s;\n        \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<triangle>\\<^sub>c f s)", "assume \"P c\""], ["proof (state)\nthis:\n  P c\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>P s;\n        \\<not> s \\<sqsubseteq> s \\<triangle>\\<^sub>c f s\\<rbrakk>\n       \\<Longrightarrow> P (s \\<triangle>\\<^sub>c f s)", "thus \"P (c \\<triangle>\\<^sub>c f c)\""], ["proof (prove)\nusing this:\n  P c\n\ngoal (1 subgoal):\n 1. P (c \\<triangle>\\<^sub>c f c)", "by(simp add: P_f)"], ["proof (state)\nthis:\n  P (c \\<triangle>\\<^sub>c f c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iter_winden_step_ivl_termination:\n  \"\\<exists>c. iter_widen (step_ivl \\<top>) (\\<bottom>\\<^sub>c c0) = Some c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. iter_widen (step_ivl \\<top>) (\\<bottom>\\<^sub>c c0) = Some c", "apply(rule iter_widen_termination[where\n  P = \"%c. strip c = c0 \\<and> c : Com(vars c0)\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c.\n       strip c = c0 \\<and> c \\<in> Com (vars c0) \\<Longrightarrow>\n       strip (step_ivl \\<top> c) = c0 \\<and>\n       step_ivl \\<top> c \\<in> Com (vars c0)\n 2. \\<And>c c'.\n       \\<lbrakk>strip c = c0 \\<and> c \\<in> Com (vars c0);\n        strip c' = c0 \\<and> c' \\<in> Com (vars c0)\\<rbrakk>\n       \\<Longrightarrow> strip (c \\<nabla>\\<^sub>c c') = c0 \\<and>\n                         c \\<nabla>\\<^sub>c c' \\<in> Com (vars c0)\n 3. wf ({(c, c \\<nabla>\\<^sub>c c') |c c'.\n         (strip c = c0 \\<and> c \\<in> Com (vars c0)) \\<and>\n         (strip c' = c0 \\<and> c' \\<in> Com (vars c0)) \\<and>\n         \\<not> c' \\<sqsubseteq> c}\\<inverse>)\n 4. strip (\\<bottom>\\<^sub>c c0) = c0 \\<and>\n    \\<bottom>\\<^sub>c c0 \\<in> Com (vars c0)\n 5. \\<bottom>\\<^sub>c c0 \\<sqsubseteq>\n    step_ivl \\<top> (\\<bottom>\\<^sub>c c0)", "apply (simp_all add: step'_Com bot_acom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf ({(c, c \\<nabla>\\<^sub>c c') |c c'.\n         strip c = c0 \\<and>\n         c \\<in> Com (vars c0) \\<and>\n         strip c' = c0 \\<and>\n         c' \\<in> Com (vars c0) \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>)", "apply(rule wf_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf ?r7\n 2. {(c, c \\<nabla>\\<^sub>c c') |c c'.\n     strip c = c0 \\<and>\n     c \\<in> Com (vars c0) \\<and>\n     strip c' = c0 \\<and>\n     c' \\<in> Com (vars c0) \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>\n    \\<subseteq> ?r7", "apply(rule wf_measure)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(c, c \\<nabla>\\<^sub>c c') |c c'.\n     strip c = c0 \\<and>\n     c \\<in> Com (vars c0) \\<and>\n     strip c' = c0 \\<and>\n     c' \\<in> Com (vars c0) \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>\n    \\<subseteq> measure ?f10", "apply(rule subset_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {(c, c \\<nabla>\\<^sub>c c') |c c'.\n     strip c = c0 \\<and>\n     c \\<in> Com (vars c0) \\<and>\n     strip c' = c0 \\<and>\n     c' \\<in> Com (vars c0) \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>\n    \\<subseteq> ?B11\n 2. ?B11 \\<subseteq> measure ?f10", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. ?B11 \\<subseteq> measure ?f10\n 2. {(c, c \\<nabla>\\<^sub>c c') |c c'.\n     strip c = c0 \\<and>\n     c \\<in> Com (vars c0) \\<and>\n     strip c' = c0 \\<and>\n     c' \\<in> Com (vars c0) \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>\n    \\<subseteq> ?B11", "apply(rule measure_m_c[where X = \"vars c0\", OF finite_cvars])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(c, c \\<nabla>\\<^sub>c c') |c c'.\n     strip c = c0 \\<and>\n     c \\<in> Com (vars c0) \\<and>\n     strip c' = c0 \\<and>\n     c' \\<in> Com (vars c0) \\<and> \\<not> c' \\<sqsubseteq> c}\\<inverse>\n    \\<subseteq> {(c, c \\<nabla>\\<^sub>c c') |c c'.\n                 strip c' = strip c \\<and>\n                 c \\<in> Com (vars c0) \\<and>\n                 c' \\<in> Com (vars c0) \\<and>\n                 \\<not> c' \\<sqsubseteq> c}\\<inverse>", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iter_narrow_step_ivl_termination:\n  \"c0 \\<in> Com (vars(strip c0)) \\<Longrightarrow> step_ivl \\<top> c0 \\<sqsubseteq> c0 \\<Longrightarrow>\n  \\<exists>c. iter_narrow (step_ivl \\<top>) c0 = Some c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. iter_narrow (step_ivl \\<top>) c0 = Some c", "apply(rule iter_narrow_termination[where\n  P = \"%c. strip c = strip c0 \\<and> c : Com(vars(strip c0)) \\<and> step_ivl \\<top> c \\<sqsubseteq> c\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n        step_ivl \\<top> c0 \\<sqsubseteq> c0;\n        strip c = strip c0 \\<and>\n        c \\<in> Com (vars (strip c0)) \\<and>\n        step_ivl \\<top> c \\<sqsubseteq> c\\<rbrakk>\n       \\<Longrightarrow> strip (c \\<triangle>\\<^sub>c step_ivl \\<top> c) =\n                         strip c0 \\<and>\n                         c \\<triangle>\\<^sub>c step_ivl \\<top> c\n                         \\<in> Com (vars (strip c0)) \\<and>\n                         step_ivl \\<top>\n                          (c \\<triangle>\\<^sub>c\n                           step_ivl \\<top> c) \\<sqsubseteq>\n                         c \\<triangle>\\<^sub>c step_ivl \\<top> c\n 2. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> wf ({uu_.\n                           \\<exists>c c'.\n                              uu_ =\n                              (c, c \\<triangle>\\<^sub>c\n                                  step_ivl \\<top> c) \\<and>\n                              (strip c = strip c0 \\<and>\n                               c \\<in> Com (vars (strip c0)) \\<and>\n                               step_ivl \\<top> c \\<sqsubseteq> c) \\<and>\n                              \\<not> c \\<sqsubseteq>\n                                     c \\<triangle>\\<^sub>c\n                                     step_ivl \\<top> c}\\<inverse>)\n 3. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> strip c0 = strip c0 \\<and>\n                      c0 \\<in> Com (vars (strip c0)) \\<and>\n                      step_ivl \\<top> c0 \\<sqsubseteq> c0", "apply (simp_all add: step'_Com)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n        step_ivl \\<top> c0 \\<sqsubseteq> c0;\n        strip c = strip c0 \\<and>\n        c \\<in> Com (vars (strip c0)) \\<and>\n        step_ivl \\<top> c \\<sqsubseteq> c\\<rbrakk>\n       \\<Longrightarrow> step_ivl \\<top>\n                          (c \\<triangle>\\<^sub>c\n                           step_ivl \\<top> c) \\<sqsubseteq>\n                         c \\<triangle>\\<^sub>c step_ivl \\<top> c\n 2. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> wf ({(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                           strip c = strip c0 \\<and>\n                           c \\<in> Com (vars (strip c0)) \\<and>\n                           step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                           \\<not> c \\<sqsubseteq>\n                                  c \\<triangle>\\<^sub>c\n                                  step_ivl \\<top> c}\\<inverse>)", "apply(clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n        step_ivl \\<top> c0 \\<sqsubseteq> c0; strip c = strip c0;\n        c \\<in> Com (vars (strip c0));\n        step_ivl \\<top> c \\<sqsubseteq> c\\<rbrakk>\n       \\<Longrightarrow> step_ivl \\<top>\n                          (c \\<triangle>\\<^sub>c\n                           step_ivl \\<top> c) \\<sqsubseteq>\n                         c \\<triangle>\\<^sub>c step_ivl \\<top> c\n 2. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> wf ({(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                           strip c = strip c0 \\<and>\n                           c \\<in> Com (vars (strip c0)) \\<and>\n                           step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                           \\<not> c \\<sqsubseteq>\n                                  c \\<triangle>\\<^sub>c\n                                  step_ivl \\<top> c}\\<inverse>)", "apply(frule narrow2_acom, drule mono_step'[OF le_refl], erule le_trans[OF _ narrow1_acom])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c.\n       \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n        step_ivl \\<top> c0 \\<sqsubseteq> c0; strip c = strip c0;\n        c \\<in> Com (vars (strip c0));\n        step_ivl \\<top> c \\<sqsubseteq> c\\<rbrakk>\n       \\<Longrightarrow> step_ivl \\<top> c \\<sqsubseteq> c\n 2. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> wf ({(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                           strip c = strip c0 \\<and>\n                           c \\<in> Com (vars (strip c0)) \\<and>\n                           step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                           \\<not> c \\<sqsubseteq>\n                                  c \\<triangle>\\<^sub>c\n                                  step_ivl \\<top> c}\\<inverse>)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> wf ({(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                           strip c = strip c0 \\<and>\n                           c \\<in> Com (vars (strip c0)) \\<and>\n                           step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                           \\<not> c \\<sqsubseteq>\n                                  c \\<triangle>\\<^sub>c\n                                  step_ivl \\<top> c}\\<inverse>)", "apply(rule wf_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> wf ?r16\n 2. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> {(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                       strip c = strip c0 \\<and>\n                       c \\<in> Com (vars (strip c0)) \\<and>\n                       step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                       \\<not> c \\<sqsubseteq>\n                              c \\<triangle>\\<^sub>c\n                              step_ivl \\<top> c}\\<inverse>\n                      \\<subseteq> ?r16", "apply(rule wf_measure)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> {(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                       strip c = strip c0 \\<and>\n                       c \\<in> Com (vars (strip c0)) \\<and>\n                       step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                       \\<not> c \\<sqsubseteq>\n                              c \\<triangle>\\<^sub>c\n                              step_ivl \\<top> c}\\<inverse>\n                      \\<subseteq> measure ?f19", "apply(rule subset_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> {(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                       strip c = strip c0 \\<and>\n                       c \\<in> Com (vars (strip c0)) \\<and>\n                       step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                       \\<not> c \\<sqsubseteq>\n                              c \\<triangle>\\<^sub>c\n                              step_ivl \\<top> c}\\<inverse>\n                      \\<subseteq> ?B20\n 2. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> ?B20 \\<subseteq> measure ?f19", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> ?B20 \\<subseteq> measure ?f19\n 2. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> {(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                       strip c = strip c0 \\<and>\n                       c \\<in> Com (vars (strip c0)) \\<and>\n                       step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                       \\<not> c \\<sqsubseteq>\n                              c \\<triangle>\\<^sub>c\n                              step_ivl \\<top> c}\\<inverse>\n                      \\<subseteq> ?B20", "apply(rule measure_n_c[where X = \"vars(strip c0)\", OF finite_cvars])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n     step_ivl \\<top> c0 \\<sqsubseteq> c0\\<rbrakk>\n    \\<Longrightarrow> {(c, c \\<triangle>\\<^sub>c step_ivl \\<top> c) |c.\n                       strip c = strip c0 \\<and>\n                       c \\<in> Com (vars (strip c0)) \\<and>\n                       step_ivl \\<top> c \\<sqsubseteq> c \\<and>\n                       \\<not> c \\<sqsubseteq>\n                              c \\<triangle>\\<^sub>c\n                              step_ivl \\<top> c}\\<inverse>\n                      \\<subseteq> {(c, c \\<triangle>\\<^sub>c c') |c c'.\n                                   strip c = strip c' \\<and>\n                                   c \\<in> Com (vars (strip c0)) \\<and>\n                                   c' \\<in> Com (vars (strip c0)) \\<and>\n                                   c' \\<sqsubseteq> c \\<and>\n                                   \\<not> c \\<sqsubseteq>\n    c \\<triangle>\\<^sub>c c'}\\<inverse>", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>c0 \\<in> Com (vars (strip c0));\n        step_ivl \\<top> c0 \\<sqsubseteq> c0; strip c = strip c0;\n        c \\<in> Com (vars (strip c0)); step_ivl \\<top> c \\<sqsubseteq> c;\n        \\<not> c \\<sqsubseteq>\n               c \\<triangle>\\<^sub>c step_ivl \\<top> c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c'.\n                            c \\<triangle>\\<^sub>c step_ivl \\<top> c =\n                            c \\<triangle>\\<^sub>c c' \\<and>\n                            strip c0 = strip c' \\<and>\n                            c' \\<in> Com (vars (strip c0)) \\<and>\n                            c' \\<sqsubseteq> c \\<and>\n                            \\<not> c \\<sqsubseteq> c \\<triangle>\\<^sub>c c'", "by (metis bot_least domo_Top order_refl step'_Com strip_step')"], ["", "(* FIXME: simplify type system: Combine Com(X) and vars <= X?? *)"], ["", "lemma while_Com:\nfixes c :: \"'a st option acom\"\nassumes \"while_option P f c = Some c'\"\nand \"!!c. strip(f c) = strip c\"\nand \"\\<forall>c::'a st option acom. c : Com(X) \\<longrightarrow> vars(strip c) \\<subseteq> X \\<longrightarrow> f c : Com(X)\"\nand \"c : Com(X)\" and \"vars(strip c) \\<subseteq> X\" shows \"c' : Com(X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c' \\<in> Com X", "using while_option_rule[where P = \"\\<lambda>c'. c' : Com(X) \\<and> vars(strip c') \\<subseteq> X\", OF _ assms(1)]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>s.\n              \\<lbrakk>s \\<in> Com X \\<and> vars (strip s) \\<subseteq> X;\n               P s\\<rbrakk>\n              \\<Longrightarrow> f s \\<in> Com X \\<and>\n                                vars (strip (f s)) \\<subseteq> X;\n   c \\<in> Com X \\<and> vars (strip c) \\<subseteq> X\\<rbrakk>\n  \\<Longrightarrow> c' \\<in> Com X \\<and> vars (strip c') \\<subseteq> X\n\ngoal (1 subgoal):\n 1. c' \\<in> Com X", "by(simp add: assms(2-))"], ["", "lemma iter_widen_Com: fixes f :: \"'a::WN st option acom \\<Rightarrow> 'a st option acom\"\nassumes \"iter_widen f c = Some c'\"\nand \"\\<forall>c. c : Com(X) \\<longrightarrow> vars(strip c) \\<subseteq> X \\<longrightarrow> f c : Com(X)\"\nand \"!!c. strip(f c) = strip c\"\nand \"c : Com(X)\" and \"vars (strip c) \\<subseteq> X\" shows \"c' : Com(X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c' \\<in> Com X", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. c' \\<in> Com X", "have \"\\<forall>c. c : Com(X) \\<longrightarrow> vars(strip c) \\<subseteq> X \\<longrightarrow> c \\<nabla>\\<^sub>c f c : Com(X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c.\n       c \\<in> Com X \\<longrightarrow>\n       vars (strip c) \\<subseteq> X \\<longrightarrow>\n       c \\<nabla>\\<^sub>c f c \\<in> Com X", "by (metis (full_types) widen_acom_Com assms(2,3))"], ["proof (state)\nthis:\n  \\<forall>c.\n     c \\<in> Com X \\<longrightarrow>\n     vars (strip c) \\<subseteq> X \\<longrightarrow>\n     c \\<nabla>\\<^sub>c f c \\<in> Com X\n\ngoal (1 subgoal):\n 1. c' \\<in> Com X", "from while_Com[OF assms(1)[simplified iter_widen_def] _ this assms(4,5)]"], ["proof (chain)\npicking this:\n  (\\<And>c. strip (c \\<nabla>\\<^sub>c f c) = strip c) \\<Longrightarrow>\n  c' \\<in> Com X", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>c. strip (c \\<nabla>\\<^sub>c f c) = strip c) \\<Longrightarrow>\n  c' \\<in> Com X\n\ngoal (1 subgoal):\n 1. c' \\<in> Com X", "using assms(3)"], ["proof (prove)\nusing this:\n  (\\<And>c. strip (c \\<nabla>\\<^sub>c f c) = strip c) \\<Longrightarrow>\n  c' \\<in> Com X\n  strip (f ?c) = strip ?c\n\ngoal (1 subgoal):\n 1. c' \\<in> Com X", "by(simp)"], ["proof (state)\nthis:\n  c' \\<in> Com X\n\ngoal:\nNo subgoals!", "qed"], ["", "context Abs_Int2\nbegin"], ["", "lemma iter_widen_step'_Com:\n  \"iter_widen (step' \\<top>) c = Some c' \\<Longrightarrow> vars(strip c) \\<subseteq> X \\<Longrightarrow> c : Com(X)\n   \\<Longrightarrow> c' : Com(X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iter_widen (local.step' \\<top>) c = Some c';\n     vars (strip c) \\<subseteq> X; c \\<in> Com X\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X", "apply(subgoal_tac \"strip c'= strip c\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iter_widen (local.step' \\<top>) c = Some c';\n     vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X\n 2. \\<lbrakk>iter_widen (local.step' \\<top>) c = Some c';\n     vars (strip c) \\<subseteq> X; c \\<in> Com X\\<rbrakk>\n    \\<Longrightarrow> strip c' = strip c", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iter_widen (local.step' \\<top>) c = Some c';\n     vars (strip c) \\<subseteq> X; c \\<in> Com X\\<rbrakk>\n    \\<Longrightarrow> strip c' = strip c\n 2. \\<lbrakk>iter_widen (local.step' \\<top>) c = Some c';\n     vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X", "apply (metis strip_iter_widen strip_step')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iter_widen (local.step' \\<top>) c = Some c';\n     vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X", "apply(drule iter_widen_Com)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c.\n                         c \\<in> Com ?X5 \\<longrightarrow>\n                         vars (strip c) \\<subseteq> ?X5 \\<longrightarrow>\n                         local.step' \\<top> c \\<in> Com ?X5\n 2. \\<And>ca.\n       \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n        strip c' = strip c\\<rbrakk>\n       \\<Longrightarrow> strip (local.step' \\<top> ca) = strip ca\n 3. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> c \\<in> Com ?X5\n 4. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> vars (strip c) \\<subseteq> ?X5\n 5. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c; c' \\<in> Com ?X5\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X", "prefer 3"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> c \\<in> Com ?X5\n 2. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c.\n                         c \\<in> Com ?X5 \\<longrightarrow>\n                         vars (strip c) \\<subseteq> ?X5 \\<longrightarrow>\n                         local.step' \\<top> c \\<in> Com ?X5\n 3. \\<And>ca.\n       \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n        strip c' = strip c\\<rbrakk>\n       \\<Longrightarrow> strip (local.step' \\<top> ca) = strip ca\n 4. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> vars (strip c) \\<subseteq> ?X5\n 5. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c; c' \\<in> Com ?X5\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c.\n                         c \\<in> Com X \\<longrightarrow>\n                         vars (strip c) \\<subseteq> X \\<longrightarrow>\n                         local.step' \\<top> c \\<in> Com X\n 2. \\<And>ca.\n       \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n        strip c' = strip c\\<rbrakk>\n       \\<Longrightarrow> strip (local.step' \\<top> ca) = strip ca\n 3. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> vars (strip c) \\<subseteq> X\n 4. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c; c' \\<in> Com X\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> vars (strip c) \\<subseteq> X\n 2. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c.\n                         c \\<in> Com X \\<longrightarrow>\n                         vars (strip c) \\<subseteq> X \\<longrightarrow>\n                         local.step' \\<top> c \\<in> Com X\n 3. \\<And>ca.\n       \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n        strip c' = strip c\\<rbrakk>\n       \\<Longrightarrow> strip (local.step' \\<top> ca) = strip ca\n 4. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c; c' \\<in> Com X\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c\\<rbrakk>\n    \\<Longrightarrow> \\<forall>c.\n                         c \\<in> Com X \\<longrightarrow>\n                         vars (strip c) \\<subseteq> X \\<longrightarrow>\n                         local.step' \\<top> c \\<in> Com X\n 2. \\<And>ca.\n       \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n        strip c' = strip c\\<rbrakk>\n       \\<Longrightarrow> strip (local.step' \\<top> ca) = strip ca\n 3. \\<lbrakk>vars (strip c) \\<subseteq> X; c \\<in> Com X;\n     strip c' = strip c; c' \\<in> Com X\\<rbrakk>\n    \\<Longrightarrow> c' \\<in> Com X", "apply (auto simp: step'_Com)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "theorem AI_ivl'_termination:\n  \"\\<exists>c'. AI_ivl' c = Some c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c'. AI_ivl' c = Some c'", "apply(auto simp: AI_wn_def pfp_wn_def iter_winden_step_ivl_termination split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       iter_widen (step_ivl \\<top>) (\\<bottom>\\<^sub>c c) =\n       Some x2 \\<Longrightarrow>\n       \\<exists>c'. iter_narrow (step_ivl \\<top>) x2 = Some c'", "apply(rule iter_narrow_step_ivl_termination)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       iter_widen (step_ivl \\<top>) (\\<bottom>\\<^sub>c c) =\n       Some x2 \\<Longrightarrow>\n       x2 \\<in> Com (vars (strip x2))\n 2. \\<And>x2.\n       iter_widen (step_ivl \\<top>) (\\<bottom>\\<^sub>c c) =\n       Some x2 \\<Longrightarrow>\n       step_ivl \\<top> x2 \\<sqsubseteq> x2", "apply (metis bot_acom_Com iter_widen_step'_Com[OF _ subset_refl] strip_iter_widen strip_step')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       iter_widen (step_ivl \\<top>) (\\<bottom>\\<^sub>c c) =\n       Some x2 \\<Longrightarrow>\n       step_ivl \\<top> x2 \\<sqsubseteq> x2", "apply(erule iter_widen_pfp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "(* interesting(?) relic\nlemma widen_assoc:\n  \"~ (y::ivl) \\<sqsubseteq> x \\<Longrightarrow> ~ z \\<sqsubseteq> x \\<nabla> y \\<Longrightarrow> ((x::ivl) \\<nabla> y) \\<nabla> z = x \\<nabla> (y \\<nabla> z)\"\napply(cases x)\napply(cases y)\napply(cases z)\napply(rename_tac x1 x2 y1 y2 z1 z2)\napply(simp add: le_ivl_def)\napply(case_tac x1)\napply(case_tac x2)\napply(simp add:le_option_def widen_ivl_def split: if_splits option.splits)\napply(simp add:le_option_def widen_ivl_def split: if_splits option.splits)\napply(case_tac x2)\napply(simp add:le_option_def widen_ivl_def split: if_splits option.splits)\napply(case_tac y1)\napply(case_tac y2)\napply(simp add:le_option_def widen_ivl_def split: if_splits option.splits)\napply(case_tac z1)\napply(auto simp add:le_option_def widen_ivl_def split: if_splits option.splits ivl.splits)[1]\napply(auto simp add:le_option_def widen_ivl_def split: if_splits option.splits ivl.splits)[1]\napply(case_tac y2)\napply(auto simp add:le_option_def widen_ivl_def split: if_splits option.splits ivl.splits)[1]\napply(case_tac z1)\napply(auto simp add:le_option_def widen_ivl_def split: if_splits ivl.splits option.splits)[1]\napply(case_tac z2)\napply(auto simp add:le_option_def widen_ivl_def split: if_splits option.splits)[1]\napply(auto simp add:le_option_def widen_ivl_def split: if_splits option.splits)[1]\ndone\n\nlemma widen_step_trans:\n  \"~ (y::ivl) \\<sqsubseteq> x \\<Longrightarrow> ~ z \\<sqsubseteq> x \\<nabla> y \\<Longrightarrow> \\<exists>u. (x \\<nabla> y) \\<nabla> z = x \\<nabla> u \\<and> ~ u \\<sqsubseteq> x\"\nby (metis widen_assoc preord_class.le_trans widen1)\n*)"]]}