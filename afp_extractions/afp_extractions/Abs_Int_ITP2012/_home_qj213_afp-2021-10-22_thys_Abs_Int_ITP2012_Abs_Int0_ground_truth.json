{"file_name": "/home/qj213/afp-2021-10-22/thys/Abs_Int_ITP2012/Abs_Int0.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Abs_Int_ITP2012", "problem_names": ["lemma monoD: \"mono f \\<Longrightarrow> x \\<sqsubseteq> y \\<Longrightarrow> f x \\<sqsubseteq> f y\"", "lemma mono_comp: \"mono f \\<Longrightarrow> mono g \\<Longrightarrow> mono (g o f)\"", "lemma join_le_iff[simp]: \"x \\<squnion> y \\<sqsubseteq> z \\<longleftrightarrow> x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\"", "lemma le_join_disj: \"x \\<sqsubseteq> y \\<or> x \\<sqsubseteq> z \\<Longrightarrow> x \\<sqsubseteq> y \\<squnion> z\"", "lemma join_apply[simp]: \"(f \\<squnion> g) x = f x \\<squnion> g x\"", "lemma [simp]: \"SKIP {S} \\<sqsubseteq> c \\<longleftrightarrow> (\\<exists>S'. c = SKIP {S'} \\<and> S \\<sqsubseteq> S')\"", "lemma [simp]: \"x ::= e {S} \\<sqsubseteq> c \\<longleftrightarrow> (\\<exists>S'. c = x ::= e {S'} \\<and> S \\<sqsubseteq> S')\"", "lemma [simp]: \"c1;;c2 \\<sqsubseteq> c \\<longleftrightarrow> (\\<exists>c1' c2'. c = c1';;c2' \\<and> c1 \\<sqsubseteq> c1' \\<and> c2 \\<sqsubseteq> c2')\"", "lemma [simp]: \"IF b THEN c1 ELSE c2 {S} \\<sqsubseteq> c \\<longleftrightarrow>\n  (\\<exists>c1' c2' S'. c = IF b THEN c1' ELSE c2' {S'} \\<and> c1 \\<sqsubseteq> c1' \\<and> c2 \\<sqsubseteq> c2' \\<and> S \\<sqsubseteq> S')\"", "lemma [simp]: \"{Inv} WHILE b DO c {P} \\<sqsubseteq> w \\<longleftrightarrow>\n  (\\<exists>Inv' c' P'. w = {Inv'} WHILE b DO c' {P'} \\<and> c \\<sqsubseteq> c' \\<and> Inv \\<sqsubseteq> Inv' \\<and> P \\<sqsubseteq> P')\"", "lemma [simp]: \"(x \\<sqsubseteq> None) = (x = None)\"", "lemma [simp]: \"(Some x \\<sqsubseteq> u) = (\\<exists>y. u = Some y & x \\<sqsubseteq> y)\"", "lemma join_None2[simp]: \"x \\<squnion> None = x\"", "lemma strip_bot_acom[simp]: \"strip(\\<bottom>\\<^sub>c c) = c\"", "lemma bot_acom[rule_format]: \"strip c' = c \\<longrightarrow> \\<bottom>\\<^sub>c c \\<sqsubseteq> c'\"", "lemma pfp_pfp: assumes \"pfp f x0 = Some x\" shows \"f x \\<sqsubseteq> x\"", "lemma pfp_least:\nassumes mono: \"\\<And>x y. x \\<sqsubseteq> y \\<Longrightarrow> f x \\<sqsubseteq> f y\"\nand \"f p \\<sqsubseteq> p\" and \"x0 \\<sqsubseteq> p\" and \"pfp f x0 = Some x\" shows \"x \\<sqsubseteq> p\"", "lemma lpfpc_pfp: \"lpfp\\<^sub>c f c0 = Some c \\<Longrightarrow> f c \\<sqsubseteq> c\"", "lemma strip_pfp:\nassumes \"\\<And>x. g(f x) = g x\" and \"pfp f x0 = Some x\" shows \"g x = g x0\"", "lemma strip_lpfpc: assumes \"\\<And>c. strip(f c) = strip c\" and \"lpfp\\<^sub>c f c = Some c'\"\nshows \"strip c' = c\"", "lemma lpfpc_least:\nassumes mono: \"\\<And>x y. x \\<sqsubseteq> y \\<Longrightarrow> f x \\<sqsubseteq> f y\"\nand \"strip p = c0\" and \"f p \\<sqsubseteq> p\" and lp: \"lpfp\\<^sub>c f c0 = Some c\" shows \"c \\<sqsubseteq> p\"", "lemma strip_step'[simp]: \"strip(step' S c) = strip c\"", "lemma gamma_f_Top[simp]: \"\\<gamma>\\<^sub>f Top = UNIV\"", "lemma gamma_o_Top[simp]: \"\\<gamma>\\<^sub>o Top = UNIV\"", "lemma mono_gamma_f: \"f \\<sqsubseteq> g \\<Longrightarrow> \\<gamma>\\<^sub>f f \\<subseteq> \\<gamma>\\<^sub>f g\"", "lemma mono_gamma_o:\n  \"sa \\<sqsubseteq> sa' \\<Longrightarrow> \\<gamma>\\<^sub>o sa \\<subseteq> \\<gamma>\\<^sub>o sa'\"", "lemma mono_gamma_c: \"ca \\<sqsubseteq> ca' \\<Longrightarrow> \\<gamma>\\<^sub>c ca \\<le> \\<gamma>\\<^sub>c ca'\"", "lemma aval'_sound: \"s : \\<gamma>\\<^sub>f S \\<Longrightarrow> aval a s : \\<gamma>(aval' a S)\"", "lemma in_gamma_update:\n  \"\\<lbrakk> s : \\<gamma>\\<^sub>f S; i : \\<gamma> a \\<rbrakk> \\<Longrightarrow> s(x := i) : \\<gamma>\\<^sub>f(S(x := a))\"", "lemma step_preserves_le:\n  \"\\<lbrakk> S \\<subseteq> \\<gamma>\\<^sub>o S'; c \\<le> \\<gamma>\\<^sub>c c' \\<rbrakk> \\<Longrightarrow> step S c \\<le> \\<gamma>\\<^sub>c (step' S' c')\"", "lemma AI_sound: \"AI c = Some c' \\<Longrightarrow> CS c \\<le> \\<gamma>\\<^sub>c c'\"", "lemma mono_post: \"c \\<sqsubseteq> c' \\<Longrightarrow> post c \\<sqsubseteq> post c'\"", "lemma mono_aval': \"S \\<sqsubseteq> S' \\<Longrightarrow> aval' e S \\<sqsubseteq> aval' e S'\"", "lemma mono_update: \"a \\<sqsubseteq> a' \\<Longrightarrow> S \\<sqsubseteq> S' \\<Longrightarrow> S(x := a) \\<sqsubseteq> S'(x := a')\"", "lemma mono_step': \"S \\<sqsubseteq> S' \\<Longrightarrow> c \\<sqsubseteq> c' \\<Longrightarrow> step' S c \\<sqsubseteq> step' S' c'\""], "translations": [["", "lemma monoD: \"mono f \\<Longrightarrow> x \\<sqsubseteq> y \\<Longrightarrow> f x \\<sqsubseteq> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preord_class.mono f; x \\<sqsubseteq> y\\<rbrakk>\n    \\<Longrightarrow> f x \\<sqsubseteq> f y", "by(simp add: mono_def)"], ["", "lemma mono_comp: \"mono f \\<Longrightarrow> mono g \\<Longrightarrow> mono (g o f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preord_class.mono f; preord_class.mono g\\<rbrakk>\n    \\<Longrightarrow> preord_class.mono (g \\<circ> f)", "by(simp add: mono_def)"], ["", "declare le_trans[trans]"], ["", "end"], ["", "text\\<open>Note: no antisymmetry. Allows implementations where some abstract\nelement is implemented by two different values @{prop \"x \\<noteq> y\"}\nsuch that @{prop\"x \\<sqsubseteq> y\"} and @{prop\"y \\<sqsubseteq> x\"}. Antisymmetry is not\nneeded because we never compare elements for equality but only for \\<open>\\<sqsubseteq>\\<close>.\n\\<close>"], ["", "class SL_top = preord +\nfixes join :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (infixl \"\\<squnion>\" 65)\nfixes Top :: \"'a\" (\"\\<top>\")\nassumes join_ge1 [simp]: \"x \\<sqsubseteq> x \\<squnion> y\"\nand join_ge2 [simp]: \"y \\<sqsubseteq> x \\<squnion> y\"\nand join_least: \"x \\<sqsubseteq> z \\<Longrightarrow> y \\<sqsubseteq> z \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\"\nand top[simp]: \"x \\<sqsubseteq> \\<top>\"\nbegin"], ["", "lemma join_le_iff[simp]: \"x \\<squnion> y \\<sqsubseteq> z \\<longleftrightarrow> x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<squnion> y \\<sqsubseteq> z) =\n    (x \\<sqsubseteq> z \\<and> y \\<sqsubseteq> z)", "by (metis join_ge1 join_ge2 join_least le_trans)"], ["", "lemma le_join_disj: \"x \\<sqsubseteq> y \\<or> x \\<sqsubseteq> z \\<Longrightarrow> x \\<sqsubseteq> y \\<squnion> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<or> x \\<sqsubseteq> z \\<Longrightarrow>\n    x \\<sqsubseteq> y \\<squnion> z", "by (metis join_ge1 join_ge2 le_trans)"], ["", "end"], ["", "instantiation \"fun\" :: (type, SL_top) SL_top\nbegin"], ["", "definition \"f \\<sqsubseteq> g = (\\<forall>x. f x \\<sqsubseteq> g x)\""], ["", "definition \"f \\<squnion> g = (\\<lambda>x. f x \\<squnion> g x)\""], ["", "definition \"\\<top> = (\\<lambda>x. \\<top>)\""], ["", "lemma join_apply[simp]: \"(f \\<squnion> g) x = f x \\<squnion> g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<squnion> g) x = f x \\<squnion> g x", "by (simp add: join_fun_def)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<Rightarrow> 'b, SL_top_class)", "proof (standard,goal_cases)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 3. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 4. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 5. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 6. \\<And>x. x \\<sqsubseteq> \\<top>", "case 2"], ["proof (state)\nthis:\n  x_ \\<sqsubseteq> y_\n  y_ \\<sqsubseteq> z_\n\ngoal (6 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z\n 3. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 4. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 5. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 6. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\nusing this:\n  x_ \\<sqsubseteq> y_\n  y_ \\<sqsubseteq> z_\n\ngoal (1 subgoal):\n 1. x_ \\<sqsubseteq> z_", "by (metis le_fun_def preord_class.le_trans)"], ["proof (state)\nthis:\n  x_ \\<sqsubseteq> z_\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 4. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 5. \\<And>x. x \\<sqsubseteq> \\<top>", "qed (simp_all add: le_fun_def Top_fun_def)"], ["", "end"], ["", "instantiation acom :: (preord) preord\nbegin"], ["", "fun le_acom :: \"('a::preord)acom \\<Rightarrow> 'a acom \\<Rightarrow> bool\" where\n\"le_acom (SKIP {S}) (SKIP {S'}) = (S \\<sqsubseteq> S')\" |\n\"le_acom (x ::= e {S}) (x' ::= e' {S'}) = (x=x' \\<and> e=e' \\<and> S \\<sqsubseteq> S')\" |\n\"le_acom (c1;;c2) (c1';;c2') = (le_acom c1 c1' \\<and> le_acom c2 c2')\" |\n\"le_acom (IF b THEN c1 ELSE c2 {S}) (IF b' THEN c1' ELSE c2' {S'}) =\n  (b=b' \\<and> le_acom c1 c1' \\<and> le_acom c2 c2' \\<and> S \\<sqsubseteq> S')\" |\n\"le_acom ({Inv} WHILE b DO c {P}) ({Inv'} WHILE b' DO c' {P'}) =\n  (b=b' \\<and> le_acom c c' \\<and> Inv \\<sqsubseteq> Inv' \\<and> P \\<sqsubseteq> P')\" |\n\"le_acom _ _ = False\""], ["", "lemma [simp]: \"SKIP {S} \\<sqsubseteq> c \\<longleftrightarrow> (\\<exists>S'. c = SKIP {S'} \\<and> S \\<sqsubseteq> S')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SKIP {S} \\<sqsubseteq> c) =\n    (\\<exists>S'. c = SKIP {S'} \\<and> S \\<sqsubseteq> S')", "by (cases c) auto"], ["", "lemma [simp]: \"x ::= e {S} \\<sqsubseteq> c \\<longleftrightarrow> (\\<exists>S'. c = x ::= e {S'} \\<and> S \\<sqsubseteq> S')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x ::= e {S} \\<sqsubseteq> c) =\n    (\\<exists>S'. c = x ::= e {S'} \\<and> S \\<sqsubseteq> S')", "by (cases c) auto"], ["", "lemma [simp]: \"c1;;c2 \\<sqsubseteq> c \\<longleftrightarrow> (\\<exists>c1' c2'. c = c1';;c2' \\<and> c1 \\<sqsubseteq> c1' \\<and> c2 \\<sqsubseteq> c2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c1;;\n     c2 \\<sqsubseteq> c) =\n    (\\<exists>c1' c2'.\n        c = c1';;\n        c2' \\<and>\n        c1 \\<sqsubseteq> c1' \\<and> c2 \\<sqsubseteq> c2')", "by (cases c) auto"], ["", "lemma [simp]: \"IF b THEN c1 ELSE c2 {S} \\<sqsubseteq> c \\<longleftrightarrow>\n  (\\<exists>c1' c2' S'. c = IF b THEN c1' ELSE c2' {S'} \\<and> c1 \\<sqsubseteq> c1' \\<and> c2 \\<sqsubseteq> c2' \\<and> S \\<sqsubseteq> S')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (IF b THEN c1 ELSE c2\n     {S} \\<sqsubseteq>\n     c) =\n    (\\<exists>c1' c2' S'.\n        c = IF b THEN c1' ELSE c2'\n            {S'} \\<and>\n        c1 \\<sqsubseteq> c1' \\<and>\n        c2 \\<sqsubseteq> c2' \\<and> S \\<sqsubseteq> S')", "by (cases c) auto"], ["", "lemma [simp]: \"{Inv} WHILE b DO c {P} \\<sqsubseteq> w \\<longleftrightarrow>\n  (\\<exists>Inv' c' P'. w = {Inv'} WHILE b DO c' {P'} \\<and> c \\<sqsubseteq> c' \\<and> Inv \\<sqsubseteq> Inv' \\<and> P \\<sqsubseteq> P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({Inv}\n     WHILE b DO c\n     {P} \\<sqsubseteq>\n     w) =\n    (\\<exists>Inv' c' P'.\n        w = {Inv'}\n            WHILE b DO c'\n            {P'} \\<and>\n        c \\<sqsubseteq> c' \\<and>\n        Inv \\<sqsubseteq> Inv' \\<and> P \\<sqsubseteq> P')", "by (cases w) auto"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a acom, preord_class)", "proof (standard,goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> x", "by (induct x) auto"], ["proof (state)\nthis:\n  x \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "case (2 x y z)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "apply(induct x y arbitrary: z rule: le_acom.induct)"], ["proof (prove)\ngoal (37 subgoals):\n 1. \\<And>S S' z.\n       \\<lbrakk>SKIP {S} \\<sqsubseteq> SKIP {S'};\n        SKIP {S'} \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> SKIP {S} \\<sqsubseteq> z\n 2. \\<And>x e S x' e' S' z.\n       \\<lbrakk>x ::= e {S} \\<sqsubseteq> x' ::= e' {S'};\n        x' ::= e' {S'} \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x ::= e {S} \\<sqsubseteq> z\n 3. \\<And>c1 c2 c1' c2' z.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>c1 \\<sqsubseteq> c1';\n                    c1' \\<sqsubseteq> z\\<rbrakk>\n                   \\<Longrightarrow> c1 \\<sqsubseteq> z;\n        \\<And>z.\n           \\<lbrakk>c2 \\<sqsubseteq> c2'; c2' \\<sqsubseteq> z\\<rbrakk>\n           \\<Longrightarrow> c2 \\<sqsubseteq> z;\n        c1;;\n        c2 \\<sqsubseteq> c1';;\n        c2';\n        c1';;\n        c2' \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> c1;;\n                         c2 \\<sqsubseteq> z\n 4. \\<And>b c1 c2 S b' c1' c2' S' z.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>c1 \\<sqsubseteq> c1';\n                    c1' \\<sqsubseteq> z\\<rbrakk>\n                   \\<Longrightarrow> c1 \\<sqsubseteq> z;\n        \\<And>z.\n           \\<lbrakk>c2 \\<sqsubseteq> c2'; c2' \\<sqsubseteq> z\\<rbrakk>\n           \\<Longrightarrow> c2 \\<sqsubseteq> z;\n        IF b THEN c1 ELSE c2\n        {S} \\<sqsubseteq>\n        IF b' THEN c1' ELSE c2'\n        {S'};\n        IF b' THEN c1' ELSE c2'\n        {S'} \\<sqsubseteq>\n        z\\<rbrakk>\n       \\<Longrightarrow> IF b THEN c1 ELSE c2\n                         {S} \\<sqsubseteq>\n                         z\n 5. \\<And>Inv b c P Inv' b' c' P' z.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>c \\<sqsubseteq> c'; c' \\<sqsubseteq> z\\<rbrakk>\n                   \\<Longrightarrow> c \\<sqsubseteq> z;\n        {Inv}\n        WHILE b DO c\n        {P} \\<sqsubseteq>\n        {Inv'}\n        WHILE b' DO c'\n        {P'};\n        {Inv'}\n        WHILE b' DO c'\n        {P'} \\<sqsubseteq>\n        z\\<rbrakk>\n       \\<Longrightarrow> {Inv}\n                         WHILE b DO c\n                         {P} \\<sqsubseteq>\n                         z\n 6. \\<And>v va vb vc z.\n       \\<lbrakk>v ::= va {vb} \\<sqsubseteq> SKIP {vc};\n        SKIP {vc} \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> v ::= va {vb} \\<sqsubseteq> z\n 7. \\<And>v va vb vc vd z.\n       \\<lbrakk>v ::= va {vb} \\<sqsubseteq> vc;;\n                vd;\n        vc;;\n        vd \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> v ::= va {vb} \\<sqsubseteq> z\n 8. \\<And>v va vb vc vd ve vf z.\n       \\<lbrakk>v ::= va {vb} \\<sqsubseteq> IF vc THEN vd ELSE ve\n      {vf};\n        IF vc THEN vd ELSE ve\n        {vf} \\<sqsubseteq>\n        z\\<rbrakk>\n       \\<Longrightarrow> v ::= va {vb} \\<sqsubseteq> z\n 9. \\<And>v va vb vc vd ve vf z.\n       \\<lbrakk>v ::= va {vb} \\<sqsubseteq> {vc}\n      WHILE vd DO ve\n      {vf};\n        {vc}\n        WHILE vd DO ve\n        {vf} \\<sqsubseteq>\n        z\\<rbrakk>\n       \\<Longrightarrow> v ::= va {vb} \\<sqsubseteq> z\n 10. \\<And>v va vb z.\n        \\<lbrakk>v;;\n                 va \\<sqsubseteq> SKIP {vb};\n         SKIP {vb} \\<sqsubseteq> z\\<rbrakk>\n        \\<Longrightarrow> v;;\n                          va \\<sqsubseteq> z\nA total of 37 subgoals...", "apply (auto intro: le_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection \"Lifting\""], ["", "instantiation option :: (preord)preord\nbegin"], ["", "fun le_option where\n\"Some x \\<sqsubseteq> Some y = (x \\<sqsubseteq> y)\" |\n\"None \\<sqsubseteq> y = True\" |\n\"Some _ \\<sqsubseteq> None = False\""], ["", "lemma [simp]: \"(x \\<sqsubseteq> None) = (x = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<sqsubseteq> None) = (x = None)", "by (cases x) simp_all"], ["", "lemma [simp]: \"(Some x \\<sqsubseteq> u) = (\\<exists>y. u = Some y & x \\<sqsubseteq> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Some x \\<sqsubseteq> u) =\n    (\\<exists>y. u = Some y \\<and> x \\<sqsubseteq> y)", "by (cases u) auto"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a option, preord_class)", "proof (standard,goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<sqsubseteq> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> x", "by(cases x, simp_all)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "case (2 x y z)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> z", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y\n  y \\<sqsubseteq> z\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> z", "by(cases z, simp, cases y, simp, cases x, auto intro: le_trans)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation option :: (SL_top)SL_top\nbegin"], ["", "fun join_option where\n\"Some x \\<squnion> Some y = Some(x \\<squnion> y)\" |\n\"None \\<squnion> y = y\" |\n\"x \\<squnion> None = x\""], ["", "lemma join_None2[simp]: \"x \\<squnion> None = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<squnion> None = x", "by (cases x) simp_all"], ["", "definition \"\\<top> = Some \\<top>\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a option, SL_top_class)", "proof (standard,goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 4. \\<And>x. x \\<sqsubseteq> \\<top>", "case (1 x y)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x y. x \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 3. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 4. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> x \\<squnion> y", "by(cases x, simp, cases y, simp_all)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> x \\<squnion> y\n\ngoal (3 subgoals):\n 1. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 3. \\<And>x. x \\<sqsubseteq> \\<top>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 3. \\<And>x. x \\<sqsubseteq> \\<top>", "case (2 x y)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>y x. y \\<sqsubseteq> x \\<squnion> y\n 2. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 3. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<squnion> x", "by(cases y, simp, cases x, simp_all)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y \\<squnion> x\n\ngoal (2 subgoals):\n 1. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 2. \\<And>x. x \\<sqsubseteq> \\<top>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 2. \\<And>x. x \\<sqsubseteq> \\<top>", "case (3 x y z)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> y\n  z \\<sqsubseteq> y\n\ngoal (2 subgoals):\n 1. \\<And>x z y.\n       \\<lbrakk>x \\<sqsubseteq> z; y \\<sqsubseteq> z\\<rbrakk>\n       \\<Longrightarrow> x \\<squnion> y \\<sqsubseteq> z\n 2. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> y\n  z \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. x \\<squnion> z \\<sqsubseteq> y", "by(cases z, simp, cases y, simp, cases x, simp_all)"], ["proof (state)\nthis:\n  x \\<squnion> z \\<sqsubseteq> y\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<sqsubseteq> \\<top>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<sqsubseteq> \\<top>", "case (4 x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<sqsubseteq> \\<top>", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> \\<top>", "by(cases x, simp_all add: Top_option_def)"], ["proof (state)\nthis:\n  x \\<sqsubseteq> \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "definition bot_acom :: \"com \\<Rightarrow> ('a::SL_top)option acom\" (\"\\<bottom>\\<^sub>c\") where\n\"\\<bottom>\\<^sub>c = anno None\""], ["", "lemma strip_bot_acom[simp]: \"strip(\\<bottom>\\<^sub>c c) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip (\\<bottom>\\<^sub>c c) = c", "by(simp add: bot_acom_def)"], ["", "lemma bot_acom[rule_format]: \"strip c' = c \\<longrightarrow> \\<bottom>\\<^sub>c c \\<sqsubseteq> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c' = c \\<longrightarrow> \\<bottom>\\<^sub>c c \\<sqsubseteq> c'", "apply(induct c arbitrary: c')"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       strip c' = com.SKIP \\<longrightarrow>\n       \\<bottom>\\<^sub>c com.SKIP \\<sqsubseteq> c'\n 2. \\<And>x1 x2 c'.\n       strip c' = x1 ::= x2 \\<longrightarrow>\n       \\<bottom>\\<^sub>c (x1 ::= x2) \\<sqsubseteq> c'\n 3. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   \\<bottom>\\<^sub>c c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           \\<bottom>\\<^sub>c c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = c1;; c2 \\<longrightarrow>\n                         \\<bottom>\\<^sub>c (c1;; c2) \\<sqsubseteq> c'\n 4. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   \\<bottom>\\<^sub>c c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           \\<bottom>\\<^sub>c c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         \\<bottom>\\<^sub>c\n                          (IF x1 THEN c1 ELSE c2) \\<sqsubseteq>\n                         c'\n 5. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           \\<bottom>\\<^sub>c c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       \\<bottom>\\<^sub>c (WHILE x1 DO c) \\<sqsubseteq> c'", "apply (simp_all add: bot_acom_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c'.\n       strip c' = com.SKIP \\<longrightarrow> (\\<exists>S'. c' = SKIP {S'})\n 2. \\<And>x1 x2 c'.\n       strip c' = x1 ::= x2 \\<longrightarrow>\n       (\\<exists>S'. c' = x1 ::= x2 {S'})\n 3. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             c' = c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 4. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 c' = IF x1 THEN c1' ELSE c2'\n{S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 5. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply(induct_tac c')"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>c' x.\n       strip (SKIP {x}) = com.SKIP \\<longrightarrow>\n       (\\<exists>S'. SKIP {x} = SKIP {S'})\n 2. \\<And>c' x1a x2 x3.\n       strip (x1a ::= x2 {x3}) = com.SKIP \\<longrightarrow>\n       (\\<exists>S'. x1a ::= x2 {x3} = SKIP {S'})\n 3. \\<And>c' x1a x2.\n       \\<lbrakk>strip x1a = com.SKIP \\<longrightarrow>\n                (\\<exists>S'. x1a = SKIP {S'});\n        strip x2 = com.SKIP \\<longrightarrow>\n        (\\<exists>S'. x2 = SKIP {S'})\\<rbrakk>\n       \\<Longrightarrow> strip (x1a;;\n                                x2) =\n                         com.SKIP \\<longrightarrow>\n                         (\\<exists>S'. x1a;;\n x2 = SKIP {S'})\n 4. \\<And>c' x1a x2 x3 x4.\n       \\<lbrakk>strip x2 = com.SKIP \\<longrightarrow>\n                (\\<exists>S'. x2 = SKIP {S'});\n        strip x3 = com.SKIP \\<longrightarrow>\n        (\\<exists>S'. x3 = SKIP {S'})\\<rbrakk>\n       \\<Longrightarrow> strip (IF x1a THEN x2 ELSE x3\n                                {x4}) =\n                         com.SKIP \\<longrightarrow>\n                         (\\<exists>S'. IF x1a THEN x2 ELSE x3\n {x4} =\n SKIP {S'})\n 5. \\<And>c' x1a x2 x3 x4.\n       strip x3 = com.SKIP \\<longrightarrow>\n       (\\<exists>S'. x3 = SKIP {S'}) \\<Longrightarrow>\n       strip ({x1a}\n              WHILE x2 DO x3\n              {x4}) =\n       com.SKIP \\<longrightarrow>\n       (\\<exists>S'. {x1a}\n                     WHILE x2 DO x3\n                     {x4} =\n                     SKIP {S'})\n 6. \\<And>x1 x2 c'.\n       strip c' = x1 ::= x2 \\<longrightarrow>\n       (\\<exists>S'. c' = x1 ::= x2 {S'})\n 7. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             c' = c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 8. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 c' = IF x1 THEN c1' ELSE c2'\n{S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 9. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply simp_all"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 c'.\n       strip c' = x1 ::= x2 \\<longrightarrow>\n       (\\<exists>S'. c' = x1 ::= x2 {S'})\n 2. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             c' = c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 3. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 c' = IF x1 THEN c1' ELSE c2'\n{S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 4. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply(induct_tac c')"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 c' x.\n       strip (SKIP {x}) = x1 ::= x2 \\<longrightarrow>\n       (\\<exists>S'. SKIP {x} = x1 ::= x2 {S'})\n 2. \\<And>x1 x2 c' x1a x2a x3.\n       strip (x1a ::= x2a {x3}) = x1 ::= x2 \\<longrightarrow>\n       (\\<exists>S'. x1a ::= x2a {x3} = x1 ::= x2 {S'})\n 3. \\<And>x1 x2 c' x1a x2a.\n       \\<lbrakk>strip x1a = x1 ::= x2 \\<longrightarrow>\n                (\\<exists>S'. x1a = x1 ::= x2 {S'});\n        strip x2a = x1 ::= x2 \\<longrightarrow>\n        (\\<exists>S'. x2a = x1 ::= x2 {S'})\\<rbrakk>\n       \\<Longrightarrow> strip (x1a;;\n                                x2a) =\n                         x1 ::= x2 \\<longrightarrow>\n                         (\\<exists>S'. x1a;;\n x2a = x1 ::= x2 {S'})\n 4. \\<And>x1 x2 c' x1a x2a x3 x4.\n       \\<lbrakk>strip x2a = x1 ::= x2 \\<longrightarrow>\n                (\\<exists>S'. x2a = x1 ::= x2 {S'});\n        strip x3 = x1 ::= x2 \\<longrightarrow>\n        (\\<exists>S'. x3 = x1 ::= x2 {S'})\\<rbrakk>\n       \\<Longrightarrow> strip (IF x1a THEN x2a ELSE x3\n                                {x4}) =\n                         x1 ::= x2 \\<longrightarrow>\n                         (\\<exists>S'.\n                             IF x1a THEN x2a ELSE x3\n                             {x4} =\n                             x1 ::= x2 {S'})\n 5. \\<And>x1 x2 c' x1a x2a x3 x4.\n       strip x3 = x1 ::= x2 \\<longrightarrow>\n       (\\<exists>S'. x3 = x1 ::= x2 {S'}) \\<Longrightarrow>\n       strip ({x1a}\n              WHILE x2a DO x3\n              {x4}) =\n       x1 ::= x2 \\<longrightarrow>\n       (\\<exists>S'. {x1a}\n                     WHILE x2a DO x3\n                     {x4} =\n                     x1 ::= x2 {S'})\n 6. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             c' = c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 7. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 c' = IF x1 THEN c1' ELSE c2'\n{S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 8. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply simp_all"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             c' = c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 2. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 c' = IF x1 THEN c1' ELSE c2'\n{S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 3. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply(induct_tac c')"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 c2 c' x.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip (SKIP {x}) = c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             SKIP {x} = c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 2. \\<And>c1 c2 c' x1a x2 x3.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip (x1a ::= x2 {x3}) = c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             x1a ::= x2 {x3} = c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 3. \\<And>c1 c2 c' x1a x2.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow> anno None c2 \\<sqsubseteq> c';\n        strip x1a = c1;; c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            x1a = c1';;\n            c2' \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2');\n        strip x2 = c1;; c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            x2 = c1';;\n            c2' \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2')\\<rbrakk>\n       \\<Longrightarrow> strip (x1a;;\n                                x2) =\n                         c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             x1a;;\n                             x2 = c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 4. \\<And>c1 c2 c' x1a x2 x3 x4.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow> anno None c2 \\<sqsubseteq> c';\n        strip x2 = c1;; c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            x2 = c1';;\n            c2' \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2');\n        strip x3 = c1;; c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            x3 = c1';;\n            c2' \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2')\\<rbrakk>\n       \\<Longrightarrow> strip (IF x1a THEN x2 ELSE x3\n                                {x4}) =\n                         c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             IF x1a THEN x2 ELSE x3\n                             {x4} =\n                             c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 5. \\<And>c1 c2 c' x1a x2 x3 x4.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow> anno None c2 \\<sqsubseteq> c';\n        strip x3 = c1;; c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            x3 = c1';;\n            c2' \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2')\\<rbrakk>\n       \\<Longrightarrow> strip ({x1a}\n                                WHILE x2 DO x3\n                                {x4}) =\n                         c1;; c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             {x1a}\n                             WHILE x2 DO x3\n                             {x4} =\n                             c1';;\n                             c2' \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 6. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 c' = IF x1 THEN c1' ELSE c2'\n{S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 7. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 c'.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip c' = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 c' = IF x1 THEN c1' ELSE c2'\n{S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 2. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply(induct_tac c')"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 c1 c2 c' x.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip (SKIP {x}) =\n                         IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 SKIP {x} = IF x1 THEN c1' ELSE c2'\n      {S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 2. \\<And>x1 c1 c2 c' x1a x2 x3.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow>\n           anno None c2 \\<sqsubseteq> c'\\<rbrakk>\n       \\<Longrightarrow> strip (x1a ::= x2 {x3}) =\n                         IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 x1a ::= x2 {x3} =\n                                 IF x1 THEN c1' ELSE c2'\n                                 {S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 3. \\<And>x1 c1 c2 c' x1a x2.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow> anno None c2 \\<sqsubseteq> c';\n        strip x1a = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            (\\<exists>S'. x1a = IF x1 THEN c1' ELSE c2'\n                                {S'}) \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2');\n        strip x2 = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            (\\<exists>S'. x2 = IF x1 THEN c1' ELSE c2'\n                               {S'}) \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2')\\<rbrakk>\n       \\<Longrightarrow> strip (x1a;;\n                                x2) =\n                         IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 x1a;;\n                                 x2 = IF x1 THEN c1' ELSE c2'\n{S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 4. \\<And>x1 c1 c2 c' x1a x2 x3 x4.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow> anno None c2 \\<sqsubseteq> c';\n        strip x2 = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            (\\<exists>S'. x2 = IF x1 THEN c1' ELSE c2'\n                               {S'}) \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2');\n        strip x3 = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            (\\<exists>S'. x3 = IF x1 THEN c1' ELSE c2'\n                               {S'}) \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2')\\<rbrakk>\n       \\<Longrightarrow> strip (IF x1a THEN x2 ELSE x3\n                                {x4}) =\n                         IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 IF x1a THEN x2 ELSE x3\n                                 {x4} =\n                                 IF x1 THEN c1' ELSE c2'\n                                 {S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 5. \\<And>x1 c1 c2 c' x1a x2 x3 x4.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c1 \\<longrightarrow>\n                   anno None c1 \\<sqsubseteq> c';\n        \\<And>c'.\n           strip c' = c2 \\<longrightarrow> anno None c2 \\<sqsubseteq> c';\n        strip x3 = IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n        (\\<exists>c1' c2'.\n            (\\<exists>S'. x3 = IF x1 THEN c1' ELSE c2'\n                               {S'}) \\<and>\n            anno None c1 \\<sqsubseteq> c1' \\<and>\n            anno None c2 \\<sqsubseteq> c2')\\<rbrakk>\n       \\<Longrightarrow> strip ({x1a}\n                                WHILE x2 DO x3\n                                {x4}) =\n                         IF x1 THEN c1 ELSE c2 \\<longrightarrow>\n                         (\\<exists>c1' c2'.\n                             (\\<exists>S'.\n                                 {x1a}\n                                 WHILE x2 DO x3\n                                 {x4} =\n                                 IF x1 THEN c1' ELSE c2'\n                                 {S'}) \\<and>\n                             anno None c1 \\<sqsubseteq> c1' \\<and>\n                             anno None c2 \\<sqsubseteq> c2')\n 6. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 c c'.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip c' = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'a.\n           (\\<exists>P'. c' = {Inv'}\n                              WHILE x1 DO c'a\n                              {P'}) \\<and>\n           anno None c \\<sqsubseteq> c'a)", "apply(induct_tac c')"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 c c' x.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip (SKIP {x}) = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'.\n           (\\<exists>P'. SKIP {x} = {Inv'}\n                                    WHILE x1 DO c'\n                                    {P'}) \\<and>\n           anno None c \\<sqsubseteq> c')\n 2. \\<And>x1 c c' x1a x2 x3.\n       (\\<And>c'.\n           strip c' = c \\<longrightarrow>\n           anno None c \\<sqsubseteq> c') \\<Longrightarrow>\n       strip (x1a ::= x2 {x3}) = WHILE x1 DO c \\<longrightarrow>\n       (\\<exists>Inv' c'.\n           (\\<exists>P'. x1a ::= x2 {x3} = {Inv'}\n     WHILE x1 DO c'\n     {P'}) \\<and>\n           anno None c \\<sqsubseteq> c')\n 3. \\<And>x1 c c' x1a x2.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c \\<longrightarrow>\n                   anno None c \\<sqsubseteq> c';\n        strip x1a = WHILE x1 DO c \\<longrightarrow>\n        (\\<exists>Inv' c'.\n            (\\<exists>P'. x1a = {Inv'}\n                                WHILE x1 DO c'\n                                {P'}) \\<and>\n            anno None c \\<sqsubseteq> c');\n        strip x2 = WHILE x1 DO c \\<longrightarrow>\n        (\\<exists>Inv' c'.\n            (\\<exists>P'. x2 = {Inv'}\n                               WHILE x1 DO c'\n                               {P'}) \\<and>\n            anno None c \\<sqsubseteq> c')\\<rbrakk>\n       \\<Longrightarrow> strip (x1a;;\n                                x2) =\n                         WHILE x1 DO c \\<longrightarrow>\n                         (\\<exists>Inv' c'.\n                             (\\<exists>P'. x1a;;\n     x2 = {Inv'}\n          WHILE x1 DO c'\n          {P'}) \\<and>\n                             anno None c \\<sqsubseteq> c')\n 4. \\<And>x1 c c' x1a x2 x3 x4.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c \\<longrightarrow>\n                   anno None c \\<sqsubseteq> c';\n        strip x2 = WHILE x1 DO c \\<longrightarrow>\n        (\\<exists>Inv' c'.\n            (\\<exists>P'. x2 = {Inv'}\n                               WHILE x1 DO c'\n                               {P'}) \\<and>\n            anno None c \\<sqsubseteq> c');\n        strip x3 = WHILE x1 DO c \\<longrightarrow>\n        (\\<exists>Inv' c'.\n            (\\<exists>P'. x3 = {Inv'}\n                               WHILE x1 DO c'\n                               {P'}) \\<and>\n            anno None c \\<sqsubseteq> c')\\<rbrakk>\n       \\<Longrightarrow> strip (IF x1a THEN x2 ELSE x3\n                                {x4}) =\n                         WHILE x1 DO c \\<longrightarrow>\n                         (\\<exists>Inv' c'.\n                             (\\<exists>P'.\n                                 IF x1a THEN x2 ELSE x3\n                                 {x4} =\n                                 {Inv'}\n                                 WHILE x1 DO c'\n                                 {P'}) \\<and>\n                             anno None c \\<sqsubseteq> c')\n 5. \\<And>x1 c c' x1a x2 x3 x4.\n       \\<lbrakk>\\<And>c'.\n                   strip c' = c \\<longrightarrow>\n                   anno None c \\<sqsubseteq> c';\n        strip x3 = WHILE x1 DO c \\<longrightarrow>\n        (\\<exists>Inv' c'.\n            (\\<exists>P'. x3 = {Inv'}\n                               WHILE x1 DO c'\n                               {P'}) \\<and>\n            anno None c \\<sqsubseteq> c')\\<rbrakk>\n       \\<Longrightarrow> strip ({x1a}\n                                WHILE x2 DO x3\n                                {x4}) =\n                         WHILE x1 DO c \\<longrightarrow>\n                         (\\<exists>Inv' c'.\n                             (\\<exists>P'.\n                                 {x1a}\n                                 WHILE x2 DO x3\n                                 {x4} =\n                                 {Inv'}\n                                 WHILE x1 DO c'\n                                 {P'}) \\<and>\n                             anno None c \\<sqsubseteq> c')", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \"Post-fixed point iteration\""], ["", "definition\n  pfp :: \"(('a::preord) \\<Rightarrow> 'a) \\<Rightarrow> 'a \\<Rightarrow> 'a option\" where\n\"pfp f = while_option (\\<lambda>x. \\<not> f x \\<sqsubseteq> x) f\""], ["", "lemma pfp_pfp: assumes \"pfp f x0 = Some x\" shows \"f x \\<sqsubseteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<sqsubseteq> x", "using while_option_stop[OF assms[simplified pfp_def]]"], ["proof (prove)\nusing this:\n  \\<not> \\<not> f x \\<sqsubseteq> x\n\ngoal (1 subgoal):\n 1. f x \\<sqsubseteq> x", "by simp"], ["", "lemma pfp_least:\nassumes mono: \"\\<And>x y. x \\<sqsubseteq> y \\<Longrightarrow> f x \\<sqsubseteq> f y\"\nand \"f p \\<sqsubseteq> p\" and \"x0 \\<sqsubseteq> p\" and \"pfp f x0 = Some x\" shows \"x \\<sqsubseteq> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "assume \"x \\<sqsubseteq> p\""], ["proof (state)\nthis:\n  x \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "hence  \"f x \\<sqsubseteq> f p\""], ["proof (prove)\nusing this:\n  x \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. f x \\<sqsubseteq> f p", "by(rule mono)"], ["proof (state)\nthis:\n  f x \\<sqsubseteq> f p\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "from this \\<open>f p \\<sqsubseteq> p\\<close>"], ["proof (chain)\npicking this:\n  f x \\<sqsubseteq> f p\n  f p \\<sqsubseteq> p", "have \"f x \\<sqsubseteq> p\""], ["proof (prove)\nusing this:\n  f x \\<sqsubseteq> f p\n  f p \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. f x \\<sqsubseteq> p", "by(rule le_trans)"], ["proof (state)\nthis:\n  f x \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "}"], ["proof (state)\nthis:\n  ?xa2 \\<sqsubseteq> p \\<Longrightarrow> f ?xa2 \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "thus \"x \\<sqsubseteq> p\""], ["proof (prove)\nusing this:\n  ?xa2 \\<sqsubseteq> p \\<Longrightarrow> f ?xa2 \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "using assms(2-) while_option_rule[where P = \"%x. x \\<sqsubseteq> p\"]"], ["proof (prove)\nusing this:\n  ?xa2 \\<sqsubseteq> p \\<Longrightarrow> f ?xa2 \\<sqsubseteq> p\n  f p \\<sqsubseteq> p\n  x0 \\<sqsubseteq> p\n  pfp f x0 = Some x\n  \\<lbrakk>\\<And>s.\n              \\<lbrakk>s \\<sqsubseteq> p; ?b s\\<rbrakk>\n              \\<Longrightarrow> ?c s \\<sqsubseteq> p;\n   while_option ?b ?c ?s = Some ?t; ?s \\<sqsubseteq> p\\<rbrakk>\n  \\<Longrightarrow> ?t \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "unfolding pfp_def"], ["proof (prove)\nusing this:\n  ?xa2 \\<sqsubseteq> p \\<Longrightarrow> f ?xa2 \\<sqsubseteq> p\n  f p \\<sqsubseteq> p\n  x0 \\<sqsubseteq> p\n  while_option (\\<lambda>x. \\<not> f x \\<sqsubseteq> x) f x0 = Some x\n  \\<lbrakk>\\<And>s.\n              \\<lbrakk>s \\<sqsubseteq> p; ?b s\\<rbrakk>\n              \\<Longrightarrow> ?c s \\<sqsubseteq> p;\n   while_option ?b ?c ?s = Some ?t; ?s \\<sqsubseteq> p\\<rbrakk>\n  \\<Longrightarrow> ?t \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> p", "by blast"], ["proof (state)\nthis:\n  x \\<sqsubseteq> p\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n lpfp\\<^sub>c :: \"(('a::SL_top)option acom \\<Rightarrow> 'a option acom) \\<Rightarrow> com \\<Rightarrow> 'a option acom option\" where\n\"lpfp\\<^sub>c f c = pfp f (\\<bottom>\\<^sub>c c)\""], ["", "lemma lpfpc_pfp: \"lpfp\\<^sub>c f c0 = Some c \\<Longrightarrow> f c \\<sqsubseteq> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lpfp\\<^sub>c f c0 = Some c \\<Longrightarrow> f c \\<sqsubseteq> c", "by(simp add: pfp_pfp lpfp\\<^sub>c_def)"], ["", "lemma strip_pfp:\nassumes \"\\<And>x. g(f x) = g x\" and \"pfp f x0 = Some x\" shows \"g x = g x0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g x = g x0", "using assms while_option_rule[where P = \"%x. g x = g x0\" and c = f]"], ["proof (prove)\nusing this:\n  g (f ?x) = g ?x\n  pfp f x0 = Some x\n  \\<lbrakk>\\<And>s.\n              \\<lbrakk>g s = g x0; ?b s\\<rbrakk>\n              \\<Longrightarrow> g (f s) = g x0;\n   while_option ?b f ?s = Some ?t; g ?s = g x0\\<rbrakk>\n  \\<Longrightarrow> g ?t = g x0\n\ngoal (1 subgoal):\n 1. g x = g x0", "unfolding pfp_def"], ["proof (prove)\nusing this:\n  g (f ?x) = g ?x\n  while_option (\\<lambda>x. \\<not> f x \\<sqsubseteq> x) f x0 = Some x\n  \\<lbrakk>\\<And>s.\n              \\<lbrakk>g s = g x0; ?b s\\<rbrakk>\n              \\<Longrightarrow> g (f s) = g x0;\n   while_option ?b f ?s = Some ?t; g ?s = g x0\\<rbrakk>\n  \\<Longrightarrow> g ?t = g x0\n\ngoal (1 subgoal):\n 1. g x = g x0", "by metis"], ["", "lemma strip_lpfpc: assumes \"\\<And>c. strip(f c) = strip c\" and \"lpfp\\<^sub>c f c = Some c'\"\nshows \"strip c' = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip c' = c", "using assms(1) strip_pfp[OF _ assms(2)[simplified lpfp\\<^sub>c_def]]"], ["proof (prove)\nusing this:\n  strip (f ?c) = strip ?c\n  (\\<And>x. ?g (f x) = ?g x) \\<Longrightarrow>\n  ?g c' = ?g (\\<bottom>\\<^sub>c c)\n\ngoal (1 subgoal):\n 1. strip c' = c", "by(metis strip_bot_acom)"], ["", "lemma lpfpc_least:\nassumes mono: \"\\<And>x y. x \\<sqsubseteq> y \\<Longrightarrow> f x \\<sqsubseteq> f y\"\nand \"strip p = c0\" and \"f p \\<sqsubseteq> p\" and lp: \"lpfp\\<^sub>c f c0 = Some c\" shows \"c \\<sqsubseteq> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sqsubseteq> p", "using pfp_least[OF _ _ bot_acom[OF \\<open>strip p = c0\\<close>] lp[simplified lpfp\\<^sub>c_def]]\n  mono \\<open>f p \\<sqsubseteq> p\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x \\<sqsubseteq> y \\<Longrightarrow> f x \\<sqsubseteq> f y;\n   f p \\<sqsubseteq> p\\<rbrakk>\n  \\<Longrightarrow> c \\<sqsubseteq> p\n  ?x \\<sqsubseteq> ?y \\<Longrightarrow> f ?x \\<sqsubseteq> f ?y\n  f p \\<sqsubseteq> p\n\ngoal (1 subgoal):\n 1. c \\<sqsubseteq> p", "by blast"], ["", "subsection \"Abstract Interpretation\""], ["", "definition \\<gamma>_fun :: \"('a \\<Rightarrow> 'b set) \\<Rightarrow> ('c \\<Rightarrow> 'a) \\<Rightarrow> ('c \\<Rightarrow> 'b)set\" where\n\"\\<gamma>_fun \\<gamma> F = {f. \\<forall>x. f x \\<in> \\<gamma>(F x)}\""], ["", "fun \\<gamma>_option :: \"('a \\<Rightarrow> 'b set) \\<Rightarrow> 'a option \\<Rightarrow> 'b set\" where\n\"\\<gamma>_option \\<gamma> None = {}\" |\n\"\\<gamma>_option \\<gamma> (Some a) = \\<gamma> a\""], ["", "text\\<open>The interface for abstract values:\\<close>"], ["", "locale Val_abs =\nfixes \\<gamma> :: \"'av::SL_top \\<Rightarrow> val set\"\n  assumes mono_gamma: \"a \\<sqsubseteq> b \\<Longrightarrow> \\<gamma> a \\<subseteq> \\<gamma> b\"\n  and gamma_Top[simp]: \"\\<gamma> \\<top> = UNIV\"\nfixes num' :: \"val \\<Rightarrow> 'av\"\nand plus' :: \"'av \\<Rightarrow> 'av \\<Rightarrow> 'av\"\n  assumes gamma_num': \"n : \\<gamma>(num' n)\"\n  and gamma_plus':\n \"n1 : \\<gamma> a1 \\<Longrightarrow> n2 : \\<gamma> a2 \\<Longrightarrow> n1+n2 : \\<gamma>(plus' a1 a2)\""], ["", "type_synonym 'av st = \"(vname \\<Rightarrow> 'av)\""], ["", "locale Abs_Int_Fun = Val_abs \\<gamma> for \\<gamma> :: \"'av::SL_top \\<Rightarrow> val set\"\nbegin"], ["", "fun aval' :: \"aexp \\<Rightarrow> 'av st \\<Rightarrow> 'av\" where\n\"aval' (N n) S = num' n\" |\n\"aval' (V x) S = S x\" |\n\"aval' (Plus a1 a2) S = plus' (aval' a1 S) (aval' a2 S)\""], ["", "fun step' :: \"'av st option \\<Rightarrow> 'av st option acom \\<Rightarrow> 'av st option acom\"\n where\n\"step' S (SKIP {P}) = (SKIP {S})\" |\n\"step' S (x ::= e {P}) =\n  x ::= e {case S of None \\<Rightarrow> None | Some S \\<Rightarrow> Some(S(x := aval' e S))}\" |\n\"step' S (c1;; c2) = step' S c1;; step' (post c1) c2\" |\n\"step' S (IF b THEN c1 ELSE c2 {P}) =\n   IF b THEN step' S c1 ELSE step' S c2 {post c1 \\<squnion> post c2}\" |\n\"step' S ({Inv} WHILE b DO c {P}) =\n  {S \\<squnion> post c} WHILE b DO (step' Inv c) {Inv}\""], ["", "definition AI :: \"com \\<Rightarrow> 'av st option acom option\" where\n\"AI = lpfp\\<^sub>c (step' \\<top>)\""], ["", "lemma strip_step'[simp]: \"strip(step' S c) = strip c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip (step' S c) = strip c", "by(induct c arbitrary: S) (simp_all add: Let_def)"], ["", "abbreviation \\<gamma>\\<^sub>f :: \"'av st \\<Rightarrow> state set\"\nwhere \"\\<gamma>\\<^sub>f == \\<gamma>_fun \\<gamma>\""], ["", "abbreviation \\<gamma>\\<^sub>o :: \"'av st option \\<Rightarrow> state set\"\nwhere \"\\<gamma>\\<^sub>o == \\<gamma>_option \\<gamma>\\<^sub>f\""], ["", "abbreviation \\<gamma>\\<^sub>c :: \"'av st option acom \\<Rightarrow> state set acom\"\nwhere \"\\<gamma>\\<^sub>c == map_acom \\<gamma>\\<^sub>o\""], ["", "lemma gamma_f_Top[simp]: \"\\<gamma>\\<^sub>f Top = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>\\<^sub>f \\<top> = UNIV", "by(simp add: Top_fun_def \\<gamma>_fun_def)"], ["", "lemma gamma_o_Top[simp]: \"\\<gamma>\\<^sub>o Top = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>\\<^sub>o \\<top> = UNIV", "by (simp add: Top_option_def)"], ["", "(* FIXME (maybe also le \\<rightarrow> sqle?) *)"], ["", "lemma mono_gamma_f: \"f \\<sqsubseteq> g \\<Longrightarrow> \\<gamma>\\<^sub>f f \\<subseteq> \\<gamma>\\<^sub>f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<sqsubseteq> g \\<Longrightarrow>\n    \\<gamma>\\<^sub>f f \\<subseteq> \\<gamma>\\<^sub>f g", "by(auto simp: le_fun_def \\<gamma>_fun_def dest: mono_gamma)"], ["", "lemma mono_gamma_o:\n  \"sa \\<sqsubseteq> sa' \\<Longrightarrow> \\<gamma>\\<^sub>o sa \\<subseteq> \\<gamma>\\<^sub>o sa'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sa \\<sqsubseteq> sa' \\<Longrightarrow>\n    \\<gamma>\\<^sub>o sa \\<subseteq> \\<gamma>\\<^sub>o sa'", "by(induction sa sa' rule: le_option.induct)(simp_all add: mono_gamma_f)"], ["", "lemma mono_gamma_c: \"ca \\<sqsubseteq> ca' \\<Longrightarrow> \\<gamma>\\<^sub>c ca \\<le> \\<gamma>\\<^sub>c ca'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ca \\<sqsubseteq> ca' \\<Longrightarrow>\n    \\<gamma>\\<^sub>c ca \\<le> \\<gamma>\\<^sub>c ca'", "by (induction ca ca' rule: le_acom.induct) (simp_all add:mono_gamma_o)"], ["", "text\\<open>Soundness:\\<close>"], ["", "lemma aval'_sound: \"s : \\<gamma>\\<^sub>f S \\<Longrightarrow> aval a s : \\<gamma>(aval' a S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> \\<gamma>\\<^sub>f S \\<Longrightarrow>\n    aval a s \\<in> \\<gamma> (aval' a S)", "by (induct a) (auto simp: gamma_num' gamma_plus' \\<gamma>_fun_def)"], ["", "lemma in_gamma_update:\n  \"\\<lbrakk> s : \\<gamma>\\<^sub>f S; i : \\<gamma> a \\<rbrakk> \\<Longrightarrow> s(x := i) : \\<gamma>\\<^sub>f(S(x := a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> \\<gamma>\\<^sub>f S; i \\<in> \\<gamma> a\\<rbrakk>\n    \\<Longrightarrow> s(x := i) \\<in> \\<gamma>\\<^sub>f (S(x := a))", "by(simp add: \\<gamma>_fun_def)"], ["", "lemma step_preserves_le:\n  \"\\<lbrakk> S \\<subseteq> \\<gamma>\\<^sub>o S'; c \\<le> \\<gamma>\\<^sub>c c' \\<rbrakk> \\<Longrightarrow> step S c \\<le> \\<gamma>\\<^sub>c (step' S' c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n     c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n    \\<Longrightarrow> step S c \\<le> \\<gamma>\\<^sub>c (step' S' c')", "proof(induction c arbitrary: c' S S')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x c' S S'.\n       \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n        SKIP {x} \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (SKIP {x})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 x3 c' S S'.\n       \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n        x1a ::= x2 {x3} \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (x1a ::= x2 {x3})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 3. \\<And>c1 c2 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        c1;;\n        c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (c1;;\n                                 c2)\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 4. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 5. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "case SKIP"], ["proof (state)\nthis:\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  SKIP {x_} \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (5 subgoals):\n 1. \\<And>x c' S S'.\n       \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n        SKIP {x} \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (SKIP {x})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 x3 c' S S'.\n       \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n        x1a ::= x2 {x3} \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (x1a ::= x2 {x3})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 3. \\<And>c1 c2 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        c1;;\n        c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (c1;;\n                                 c2)\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 4. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 5. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "thus ?case"], ["proof (prove)\nusing this:\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  SKIP {x_} \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (1 subgoal):\n 1. step S (SKIP {x_}) \\<le> \\<gamma>\\<^sub>c (step' S' c')", "by(auto simp:SKIP_le map_acom_SKIP)"], ["proof (state)\nthis:\n  step S (SKIP {x_}) \\<le> \\<gamma>\\<^sub>c (step' S' c')\n\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3 c' S S'.\n       \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n        x1a ::= x2 {x3} \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (x1a ::= x2 {x3})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>c1 c2 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        c1;;\n        c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (c1;;\n                                 c2)\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 3. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 4. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3 c' S S'.\n       \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n        x1a ::= x2 {x3} \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (x1a ::= x2 {x3})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>c1 c2 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        c1;;\n        c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (c1;;\n                                 c2)\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 3. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 4. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "case Assign"], ["proof (state)\nthis:\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  x1a_ ::= x2_ {x3_} \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3 c' S S'.\n       \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n        x1a ::= x2 {x3} \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (x1a ::= x2 {x3})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>c1 c2 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        c1;;\n        c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (c1;;\n                                 c2)\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 3. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 4. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "thus ?case"], ["proof (prove)\nusing this:\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  x1a_ ::= x2_ {x3_} \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (1 subgoal):\n 1. step S (x1a_ ::= x2_ {x3_}) \\<le> \\<gamma>\\<^sub>c (step' S' c')", "by (fastforce simp: Assign_le  map_acom_Assign intro: aval'_sound in_gamma_update\n      split: option.splits del:subsetD)"], ["proof (state)\nthis:\n  step S (x1a_ ::= x2_ {x3_}) \\<le> \\<gamma>\\<^sub>c (step' S' c')\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        c1;;\n        c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (c1;;\n                                 c2)\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 3. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c1 c2 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        c1;;\n        c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (c1;;\n                                 c2)\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 3. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "case Seq"], ["proof (state)\nthis:\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c1_ \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c1_ \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c2_ \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c2_ \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  c1_;;\n  c2_ \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        c1;;\n        c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (c1;;\n                                 c2)\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 3. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c1_ \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c1_ \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c2_ \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c2_ \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  c1_;;\n  c2_ \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (1 subgoal):\n 1. step S (c1_;;\n            c2_)\n    \\<le> \\<gamma>\\<^sub>c (step' S' c')", "apply (auto simp: Seq_le map_acom_Seq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c1a c2a.\n       \\<lbrakk>\\<And>S S' c'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1_ \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1_\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>S S' c'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2_ \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2_\n                             \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S'; c1_ \\<le> \\<gamma>\\<^sub>c c1a;\n        c2_ \\<le> \\<gamma>\\<^sub>c c2a; c' = c1a;;\n  c2a\\<rbrakk>\n       \\<Longrightarrow> step (post c1_) c2_\n                         \\<le> \\<gamma>\\<^sub>c (step' (post c1a) c2a)", "by (metis le_post post_map_acom)"], ["proof (state)\nthis:\n  step S (c1_;;\n          c2_)\n  \\<le> \\<gamma>\\<^sub>c (step' S' c')\n\ngoal (2 subgoals):\n 1. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "case (If b c1 c2 P)"], ["proof (state)\nthis:\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c1 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c1 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c2 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c2 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  IF b THEN c1 ELSE c2\n  {P}\n  \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (2 subgoals):\n 1. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c1 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c1 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c2 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c2 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  IF b THEN c1 ELSE c2\n  {P}\n  \\<le> \\<gamma>\\<^sub>c c'", "obtain c1' c2' P' where\n      \"c' = IF b THEN c1' ELSE c2' {P'}\"\n      \"P \\<subseteq> \\<gamma>\\<^sub>o P'\" \"c1 \\<le> \\<gamma>\\<^sub>c c1'\" \"c2 \\<le> \\<gamma>\\<^sub>c c2'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c1 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c1 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c2 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c2 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  IF b THEN c1 ELSE c2\n  {P}\n  \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (1 subgoal):\n 1. (\\<And>c1' c2' P'.\n        \\<lbrakk>c' = IF b THEN c1' ELSE c2'\n                      {P'};\n         P \\<subseteq> \\<gamma>\\<^sub>o P'; c1 \\<le> \\<gamma>\\<^sub>c c1';\n         c2 \\<le> \\<gamma>\\<^sub>c c2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: If_le map_acom_If)"], ["proof (state)\nthis:\n  c' = IF b THEN c1' ELSE c2'\n       {P'}\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n  c2 \\<le> \\<gamma>\\<^sub>c c2'\n\ngoal (2 subgoals):\n 1. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "moreover"], ["proof (state)\nthis:\n  c' = IF b THEN c1' ELSE c2'\n       {P'}\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n  c2 \\<le> \\<gamma>\\<^sub>c c2'\n\ngoal (2 subgoals):\n 1. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "have \"post c1 \\<subseteq> \\<gamma>\\<^sub>o(post c1' \\<squnion> post c2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. post c1 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')", "by (metis (no_types) \\<open>c1 \\<le> \\<gamma>\\<^sub>c c1'\\<close> join_ge1 le_post mono_gamma_o order_trans post_map_acom)"], ["proof (state)\nthis:\n  post c1 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')\n\ngoal (2 subgoals):\n 1. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "moreover"], ["proof (state)\nthis:\n  post c1 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')\n\ngoal (2 subgoals):\n 1. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "have \"post c2 \\<subseteq> \\<gamma>\\<^sub>o(post c1' \\<squnion> post c2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. post c2 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')", "by (metis (no_types) \\<open>c2 \\<le> \\<gamma>\\<^sub>c c2'\\<close> join_ge2 le_post mono_gamma_o order_trans post_map_acom)"], ["proof (state)\nthis:\n  post c2 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')\n\ngoal (2 subgoals):\n 1. \\<And>x1a c1 c2 x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c1 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c1\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        \\<And>c' S S'.\n           \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n            c2 \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n           \\<Longrightarrow> step S c2 \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        IF x1a THEN c1 ELSE c2\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S (IF x1a THEN c1 ELSE c2\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')\n 2. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "ultimately"], ["proof (chain)\npicking this:\n  c' = IF b THEN c1' ELSE c2'\n       {P'}\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n  c2 \\<le> \\<gamma>\\<^sub>c c2'\n  post c1 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')\n  post c2 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')", "show ?case"], ["proof (prove)\nusing this:\n  c' = IF b THEN c1' ELSE c2'\n       {P'}\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n  c2 \\<le> \\<gamma>\\<^sub>c c2'\n  post c1 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')\n  post c2 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')\n\ngoal (1 subgoal):\n 1. step S (IF b THEN c1 ELSE c2\n            {P})\n    \\<le> \\<gamma>\\<^sub>c (step' S' c')", "using \\<open>S \\<subseteq> \\<gamma>\\<^sub>o S'\\<close>"], ["proof (prove)\nusing this:\n  c' = IF b THEN c1' ELSE c2'\n       {P'}\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n  c2 \\<le> \\<gamma>\\<^sub>c c2'\n  post c1 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')\n  post c2 \\<subseteq> \\<gamma>\\<^sub>o (post c1' \\<squnion> post c2')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n\ngoal (1 subgoal):\n 1. step S (IF b THEN c1 ELSE c2\n            {P})\n    \\<le> \\<gamma>\\<^sub>c (step' S' c')", "by (simp add: If.IH subset_iff)"], ["proof (state)\nthis:\n  step S (IF b THEN c1 ELSE c2\n          {P})\n  \\<le> \\<gamma>\\<^sub>c (step' S' c')\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "case (While I b c1 P)"], ["proof (state)\nthis:\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c1 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c1 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  {I}\n  WHILE b DO c1\n  {P}\n  \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c1 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c1 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  {I}\n  WHILE b DO c1\n  {P}\n  \\<le> \\<gamma>\\<^sub>c c'", "obtain c1' I' P' where\n    \"c' = {I'} WHILE b DO c1' {P'}\"\n    \"I \\<subseteq> \\<gamma>\\<^sub>o I'\" \"P \\<subseteq> \\<gamma>\\<^sub>o P'\" \"c1 \\<le> \\<gamma>\\<^sub>c c1'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?S \\<subseteq> \\<gamma>\\<^sub>o ?S';\n   c1 \\<le> \\<gamma>\\<^sub>c ?c'\\<rbrakk>\n  \\<Longrightarrow> step ?S c1 \\<le> \\<gamma>\\<^sub>c (step' ?S' ?c')\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  {I}\n  WHILE b DO c1\n  {P}\n  \\<le> \\<gamma>\\<^sub>c c'\n\ngoal (1 subgoal):\n 1. (\\<And>I' c1' P'.\n        \\<lbrakk>c' = {I'}\n                      WHILE b DO c1'\n                      {P'};\n         I \\<subseteq> \\<gamma>\\<^sub>o I';\n         P \\<subseteq> \\<gamma>\\<^sub>o P';\n         c1 \\<le> \\<gamma>\\<^sub>c c1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce simp: map_acom_While While_le)"], ["proof (state)\nthis:\n  c' = {I'}\n       WHILE b DO c1'\n       {P'}\n  I \\<subseteq> \\<gamma>\\<^sub>o I'\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "moreover"], ["proof (state)\nthis:\n  c' = {I'}\n       WHILE b DO c1'\n       {P'}\n  I \\<subseteq> \\<gamma>\\<^sub>o I'\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "have \"S \\<union> post c1 \\<subseteq> \\<gamma>\\<^sub>o (S' \\<squnion> post c1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<union> post c1 \\<subseteq> \\<gamma>\\<^sub>o (S' \\<squnion> post c1')", "using \\<open>S \\<subseteq> \\<gamma>\\<^sub>o S'\\<close> le_post[OF \\<open>c1 \\<le> \\<gamma>\\<^sub>c c1'\\<close>, simplified]"], ["proof (prove)\nusing this:\n  S \\<subseteq> \\<gamma>\\<^sub>o S'\n  post c1 \\<subseteq> \\<gamma>\\<^sub>o (post c1')\n\ngoal (1 subgoal):\n 1. S \\<union> post c1 \\<subseteq> \\<gamma>\\<^sub>o (S' \\<squnion> post c1')", "by (metis (no_types) join_ge1 join_ge2 le_sup_iff mono_gamma_o order_trans)"], ["proof (state)\nthis:\n  S \\<union> post c1 \\<subseteq> \\<gamma>\\<^sub>o (S' \\<squnion> post c1')\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2 c x4 c' S S'.\n       \\<lbrakk>\\<And>c' S S'.\n                   \\<lbrakk>S \\<subseteq> \\<gamma>\\<^sub>o S';\n                    c \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n                   \\<Longrightarrow> step S c\n                                     \\<le> \\<gamma>\\<^sub>c (step' S' c');\n        S \\<subseteq> \\<gamma>\\<^sub>o S';\n        {x1a}\n        WHILE x2 DO c\n        {x4}\n        \\<le> \\<gamma>\\<^sub>c c'\\<rbrakk>\n       \\<Longrightarrow> step S ({x1a}\n                                 WHILE x2 DO c\n                                 {x4})\n                         \\<le> \\<gamma>\\<^sub>c (step' S' c')", "ultimately"], ["proof (chain)\npicking this:\n  c' = {I'}\n       WHILE b DO c1'\n       {P'}\n  I \\<subseteq> \\<gamma>\\<^sub>o I'\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n  S \\<union> post c1 \\<subseteq> \\<gamma>\\<^sub>o (S' \\<squnion> post c1')", "show ?case"], ["proof (prove)\nusing this:\n  c' = {I'}\n       WHILE b DO c1'\n       {P'}\n  I \\<subseteq> \\<gamma>\\<^sub>o I'\n  P \\<subseteq> \\<gamma>\\<^sub>o P'\n  c1 \\<le> \\<gamma>\\<^sub>c c1'\n  S \\<union> post c1 \\<subseteq> \\<gamma>\\<^sub>o (S' \\<squnion> post c1')\n\ngoal (1 subgoal):\n 1. step S ({I}\n            WHILE b DO c1\n            {P})\n    \\<le> \\<gamma>\\<^sub>c (step' S' c')", "by (simp add: While.IH subset_iff)"], ["proof (state)\nthis:\n  step S ({I}\n          WHILE b DO c1\n          {P})\n  \\<le> \\<gamma>\\<^sub>c (step' S' c')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AI_sound: \"AI c = Some c' \\<Longrightarrow> CS c \\<le> \\<gamma>\\<^sub>c c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AI c = Some c' \\<Longrightarrow> CS c \\<le> \\<gamma>\\<^sub>c c'", "proof(simp add: CS_def AI_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. lpfp\\<^sub>c (step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'", "assume 1: \"lpfp\\<^sub>c (step' \\<top>) c = Some c'\""], ["proof (state)\nthis:\n  lpfp\\<^sub>c (step' \\<top>) c = Some c'\n\ngoal (1 subgoal):\n 1. lpfp\\<^sub>c (step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'", "have 2: \"step' \\<top> c' \\<sqsubseteq> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step' \\<top> c' \\<sqsubseteq> c'", "by(rule lpfpc_pfp[OF 1])"], ["proof (state)\nthis:\n  step' \\<top> c' \\<sqsubseteq> c'\n\ngoal (1 subgoal):\n 1. lpfp\\<^sub>c (step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'", "have 3: \"strip (\\<gamma>\\<^sub>c (step' \\<top> c')) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip (\\<gamma>\\<^sub>c (step' \\<top> c')) = c", "by(simp add: strip_lpfpc[OF _ 1])"], ["proof (state)\nthis:\n  strip (\\<gamma>\\<^sub>c (step' \\<top> c')) = c\n\ngoal (1 subgoal):\n 1. lpfp\\<^sub>c (step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'", "have \"lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')", "proof(rule lfp_lowerbound[simplified,OF 3])"], ["proof (state)\ngoal (1 subgoal):\n 1. step UNIV (\\<gamma>\\<^sub>c (step' \\<top> c'))\n    \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')", "show \"step UNIV (\\<gamma>\\<^sub>c (step' \\<top> c')) \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step UNIV (\\<gamma>\\<^sub>c (step' \\<top> c'))\n    \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')", "proof(rule step_preserves_le[OF _ _])"], ["proof (state)\ngoal (2 subgoals):\n 1. UNIV \\<subseteq> \\<gamma>\\<^sub>o \\<top>\n 2. \\<gamma>\\<^sub>c (step' \\<top> c') \\<le> \\<gamma>\\<^sub>c c'", "show \"UNIV \\<subseteq> \\<gamma>\\<^sub>o \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV \\<subseteq> \\<gamma>\\<^sub>o \\<top>", "by simp"], ["proof (state)\nthis:\n  UNIV \\<subseteq> \\<gamma>\\<^sub>o \\<top>\n\ngoal (1 subgoal):\n 1. \\<gamma>\\<^sub>c (step' \\<top> c') \\<le> \\<gamma>\\<^sub>c c'", "show \"\\<gamma>\\<^sub>c (step' \\<top> c') \\<le> \\<gamma>\\<^sub>c c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>\\<^sub>c (step' \\<top> c') \\<le> \\<gamma>\\<^sub>c c'", "by(rule mono_gamma_c[OF 2])"], ["proof (state)\nthis:\n  \\<gamma>\\<^sub>c (step' \\<top> c') \\<le> \\<gamma>\\<^sub>c c'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  step UNIV (\\<gamma>\\<^sub>c (step' \\<top> c'))\n  \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')\n\ngoal (1 subgoal):\n 1. lpfp\\<^sub>c (step' \\<top>) c = Some c' \\<Longrightarrow>\n    Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'", "with 2"], ["proof (chain)\npicking this:\n  step' \\<top> c' \\<sqsubseteq> c'\n  Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')", "show \"lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'\""], ["proof (prove)\nusing this:\n  step' \\<top> c' \\<sqsubseteq> c'\n  Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c (step' \\<top> c')\n\ngoal (1 subgoal):\n 1. Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'", "by (blast intro: mono_gamma_c order_trans)"], ["proof (state)\nthis:\n  Collecting.lfp (step UNIV) c \\<le> \\<gamma>\\<^sub>c c'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection \"Monotonicity\""], ["", "lemma mono_post: \"c \\<sqsubseteq> c' \\<Longrightarrow> post c \\<sqsubseteq> post c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sqsubseteq> c' \\<Longrightarrow> post c \\<sqsubseteq> post c'", "by(induction c c' rule: le_acom.induct) (auto)"], ["", "locale Abs_Int_Fun_mono = Abs_Int_Fun +\nassumes mono_plus': \"a1 \\<sqsubseteq> b1 \\<Longrightarrow> a2 \\<sqsubseteq> b2 \\<Longrightarrow> plus' a1 a2 \\<sqsubseteq> plus' b1 b2\"\nbegin"], ["", "lemma mono_aval': \"S \\<sqsubseteq> S' \\<Longrightarrow> aval' e S \\<sqsubseteq> aval' e S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<sqsubseteq> S' \\<Longrightarrow> aval' e S \\<sqsubseteq> aval' e S'", "by(induction e)(auto simp: le_fun_def mono_plus')"], ["", "lemma mono_update: \"a \\<sqsubseteq> a' \\<Longrightarrow> S \\<sqsubseteq> S' \\<Longrightarrow> S(x := a) \\<sqsubseteq> S'(x := a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<sqsubseteq> a'; S \\<sqsubseteq> S'\\<rbrakk>\n    \\<Longrightarrow> S(x := a) \\<sqsubseteq> S'(x := a')", "by(simp add: le_fun_def)"], ["", "lemma mono_step': \"S \\<sqsubseteq> S' \\<Longrightarrow> c \\<sqsubseteq> c' \\<Longrightarrow> step' S c \\<sqsubseteq> step' S' c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<sqsubseteq> S'; c \\<sqsubseteq> c'\\<rbrakk>\n    \\<Longrightarrow> step' S c \\<sqsubseteq> step' S' c'", "apply(induction c c' arbitrary: S S' rule: le_acom.induct)"], ["proof (prove)\ngoal (37 subgoals):\n 1. \\<And>S S' Sa S'a.\n       \\<lbrakk>Sa \\<sqsubseteq> S'a;\n        SKIP {S} \\<sqsubseteq> SKIP {S'}\\<rbrakk>\n       \\<Longrightarrow> step' Sa (SKIP {S}) \\<sqsubseteq>\n                         step' S'a (SKIP {S'})\n 2. \\<And>x e S x' e' S' Sa S'a.\n       \\<lbrakk>Sa \\<sqsubseteq> S'a;\n        x ::= e {S} \\<sqsubseteq> x' ::= e' {S'}\\<rbrakk>\n       \\<Longrightarrow> step' Sa (x ::= e {S}) \\<sqsubseteq>\n                         step' S'a (x' ::= e' {S'})\n 3. \\<And>c1 c2 c1' c2' S S'.\n       \\<lbrakk>\\<And>S S'.\n                   \\<lbrakk>S \\<sqsubseteq> S';\n                    c1 \\<sqsubseteq> c1'\\<rbrakk>\n                   \\<Longrightarrow> step' S c1 \\<sqsubseteq> step' S' c1';\n        \\<And>S S'.\n           \\<lbrakk>S \\<sqsubseteq> S'; c2 \\<sqsubseteq> c2'\\<rbrakk>\n           \\<Longrightarrow> step' S c2 \\<sqsubseteq> step' S' c2';\n        S \\<sqsubseteq> S'; c1;;\n                            c2 \\<sqsubseteq> c1';;\n                            c2'\\<rbrakk>\n       \\<Longrightarrow> step' S (c1;;\n                                  c2) \\<sqsubseteq>\n                         step' S' (c1';;\n                                   c2')\n 4. \\<And>b c1 c2 S b' c1' c2' S' Sa S'a.\n       \\<lbrakk>\\<And>S S'.\n                   \\<lbrakk>S \\<sqsubseteq> S';\n                    c1 \\<sqsubseteq> c1'\\<rbrakk>\n                   \\<Longrightarrow> step' S c1 \\<sqsubseteq> step' S' c1';\n        \\<And>S S'.\n           \\<lbrakk>S \\<sqsubseteq> S'; c2 \\<sqsubseteq> c2'\\<rbrakk>\n           \\<Longrightarrow> step' S c2 \\<sqsubseteq> step' S' c2';\n        Sa \\<sqsubseteq> S'a;\n        IF b THEN c1 ELSE c2\n        {S} \\<sqsubseteq>\n        IF b' THEN c1' ELSE c2'\n        {S'}\\<rbrakk>\n       \\<Longrightarrow> step' Sa (IF b THEN c1 ELSE c2\n                                   {S}) \\<sqsubseteq>\n                         step' S'a (IF b' THEN c1' ELSE c2'\n                                    {S'})\n 5. \\<And>Inv b c P Inv' b' c' P' S S'.\n       \\<lbrakk>\\<And>S S'.\n                   \\<lbrakk>S \\<sqsubseteq> S'; c \\<sqsubseteq> c'\\<rbrakk>\n                   \\<Longrightarrow> step' S c \\<sqsubseteq> step' S' c';\n        S \\<sqsubseteq> S';\n        {Inv}\n        WHILE b DO c\n        {P} \\<sqsubseteq>\n        {Inv'}\n        WHILE b' DO c'\n        {P'}\\<rbrakk>\n       \\<Longrightarrow> step' S ({Inv}\n                                  WHILE b DO c\n                                  {P}) \\<sqsubseteq>\n                         step' S' ({Inv'}\n                                   WHILE b' DO c'\n                                   {P'})\n 6. \\<And>v va vb vc S S'.\n       \\<lbrakk>S \\<sqsubseteq> S';\n        v ::= va {vb} \\<sqsubseteq> SKIP {vc}\\<rbrakk>\n       \\<Longrightarrow> step' S (v ::= va {vb}) \\<sqsubseteq>\n                         step' S' (SKIP {vc})\n 7. \\<And>v va vb vc vd S S'.\n       \\<lbrakk>S \\<sqsubseteq> S';\n        v ::= va {vb} \\<sqsubseteq> vc;;\n        vd\\<rbrakk>\n       \\<Longrightarrow> step' S (v ::= va {vb}) \\<sqsubseteq>\n                         step' S' (vc;;\n                                   vd)\n 8. \\<And>v va vb vc vd ve vf S S'.\n       \\<lbrakk>S \\<sqsubseteq> S';\n        v ::= va {vb} \\<sqsubseteq> IF vc THEN vd ELSE ve\n                                    {vf}\\<rbrakk>\n       \\<Longrightarrow> step' S (v ::= va {vb}) \\<sqsubseteq>\n                         step' S' (IF vc THEN vd ELSE ve\n                                   {vf})\n 9. \\<And>v va vb vc vd ve vf S S'.\n       \\<lbrakk>S \\<sqsubseteq> S';\n        v ::= va {vb} \\<sqsubseteq> {vc}\n                                    WHILE vd DO ve\n                                    {vf}\\<rbrakk>\n       \\<Longrightarrow> step' S (v ::= va {vb}) \\<sqsubseteq>\n                         step' S' ({vc}\n                                   WHILE vd DO ve\n                                   {vf})\n 10. \\<And>v va vb S S'.\n        \\<lbrakk>S \\<sqsubseteq> S'; v;;\n                                     va \\<sqsubseteq> SKIP {vb}\\<rbrakk>\n        \\<Longrightarrow> step' S (v;;\n                                   va) \\<sqsubseteq>\n                          step' S' (SKIP {vb})\nA total of 37 subgoals...", "apply (auto simp: Let_def mono_update mono_aval' mono_post le_join_disj\n            split: option.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "text\\<open>Problem: not executable because of the comparison of abstract states,\ni.e. functions, in the post-fixedpoint computation.\\<close>"], ["", "end"]]}