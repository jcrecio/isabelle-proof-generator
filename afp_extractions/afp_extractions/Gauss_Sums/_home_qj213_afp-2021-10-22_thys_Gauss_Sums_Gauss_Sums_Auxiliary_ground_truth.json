{"file_name": "/home/qj213/afp-2021-10-22/thys/Gauss_Sums/Gauss_Sums_Auxiliary.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gauss_Sums", "problem_names": ["lemma sum_div_reduce:\n  fixes d :: nat and f :: \"nat \\<Rightarrow> complex\"\n  assumes \"d dvd k\" \"d > 0\" \n  shows \"(\\<Sum>n | n \\<in> {1..k} \\<and> d dvd n. f n) = (\\<Sum>c \\<in> {1..k div d}. f (c*d))\"", "lemma prod_div_sub:\n  fixes f :: \"nat \\<Rightarrow> complex\"\n  assumes \"finite A\" \"B \\<subseteq> A\" \"\\<forall>b \\<in> B. f b \\<noteq> 0\"\n  shows \"(\\<Prod> i \\<in> A - B. f i) = ((\\<Prod> i \\<in> A. f i) div (\\<Prod> i \\<in> B. f i))\"", "lemma linear_gcd:\n  fixes a b c d :: nat\n  assumes \"a > 0\" \"b > 0\" \"c > 0\" \"d > 0\"\n  assumes \"coprime a c\" \"coprime b d\" \n  shows \"gcd (a*b) (c*d) = (gcd a d) * (gcd b c)\"", "lemma reindex_product_bij:\n  fixes a b m k :: nat\n  defines \"S \\<equiv> {(d1,d2). d1 dvd gcd a m \\<and> d2 dvd gcd k b}\"\n  defines \"T \\<equiv> {d. d dvd (gcd a m) * (gcd k b)}\"\n  defines \"f \\<equiv> (\\<lambda>(d1,d2). d1 * d2)\"\n  assumes \"coprime a k\"\n  shows \"bij_betw f S T\"", "lemma p_div_set:\n  shows \"{p. p \\<in>prime_factors a \\<and> \\<not> p dvd N} = \n         ({p. p \\<in>prime_factors (a*N)} - {p. p \\<in>prime_factors N})\"\n  (is \"?A = ?B\")", "lemma coprime_iff_prime_factors_disjoint:\n  fixes x y :: \"'a :: factorial_semiring\"\n  assumes \"x \\<noteq> 0\" \"y \\<noteq> 0\"\n  shows \"coprime x y \\<longleftrightarrow> prime_factors x \\<inter> prime_factors y = {}\"", "lemma coprime_cong_prime_factors:\n  fixes x y :: \"'a :: factorial_semiring_gcd\"\n  assumes \"x \\<noteq> 0\" \"y \\<noteq> 0\" \"x' \\<noteq> 0\" \"y' \\<noteq> 0\"\n  assumes \"prime_factors x = prime_factors x'\"\n  assumes \"prime_factors y = prime_factors y'\"\n  shows   \"coprime x y \\<longleftrightarrow> coprime x' y'\"", "lemma moebius_prod_not_coprime:\n  assumes \"\\<not> coprime N d\"\n  shows \"moebius_mu (N*d) = 0\"", "lemma sum_divisors_moebius_mu_times_multiplicative:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1}\"\n  assumes \"multiplicative_function f\" and \"n > 0\"\n  shows   \"(\\<Sum>d | d dvd n. moebius_mu d * f d) = (\\<Prod>p\\<in>prime_factors n. 1 - f p)\"", "lemma multiplicative_ind_coprime [intro]: \"multiplicative_function (ind (coprime N))\"", "lemma sum_divisors_moebius_mu_times_multiplicative_revisited:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1}\"\n  assumes \"multiplicative_function f\" \"n > 0\" \"N > 0\"\n  shows   \"(\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n           (\\<Prod>p\\<in>{p. p \\<in> prime_factors n \\<and> \\<not> (p dvd N)}. 1 - f p)\"", "lemma dirichlet_prod_neutral_intro: \n  fixes S :: \"nat \\<Rightarrow> complex\" and f :: \"nat \\<Rightarrow> nat \\<Rightarrow> complex\"\n  defines \"S \\<equiv> (\\<lambda>(n::nat). (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. (f k n)))\" \n  shows \"S(n) = (\\<Sum>k \\<in> {1..n}. f k n * dirichlet_prod_neutral (gcd k n))\"", "lemma dirichlet_prod_neutral_right_neutral:\n \"dirichlet_prod f dirichlet_prod_neutral n = f n \" if \"n > 0\" for f :: \"nat \\<Rightarrow> complex\" and n", "lemma dirichlet_prod_neutral_left_neutral:\n \"dirichlet_prod dirichlet_prod_neutral f n = f n \" \n if \"n > 0\" for f :: \"nat \\<Rightarrow> complex\" and n", "lemma mult_id: \"multiplicative_function id\"", "lemma mult_moebius: \"multiplicative_function moebius_mu\"", "lemma mult_of_nat: \"multiplicative_function of_nat\"", "lemma mult_of_nat_c: \"completely_multiplicative_function of_nat\"", "lemma completely_multiplicative_nonzero:\n  fixes f :: \"nat \\<Rightarrow> complex\"\n  assumes \"completely_multiplicative_function f\" \n          \"d \\<noteq> 0\"\n          \"\\<And>p. prime p \\<Longrightarrow> f(p) \\<noteq> 0\" \n  shows \"f(d) \\<noteq> 0\"", "lemma multipl_div: \n  fixes m k d1 d2 :: nat and f :: \"nat \\<Rightarrow> complex\"\n  assumes \"multiplicative_function f\" \"d1 dvd m\" \"d2 dvd k\" \"coprime m k\"\n  shows \"f ((m*k) div (d1*d2)) = f(m div d1) * f(k div d2)\"", "lemma multipl_div_mono: \n  fixes m k d :: nat and f :: \"nat \\<Rightarrow> complex\"\n  assumes \"completely_multiplicative_function f\" \n          \"d dvd k\" \"d > 0\" \n          \"\\<And>p. prime p \\<Longrightarrow> f(p) \\<noteq> 0\" \n  shows \"f (k div d) = f(k) div f(d)\"", "lemma comp_to_mult: \"completely_multiplicative_function f \\<Longrightarrow>\n       multiplicative_function f\""], "translations": [["", "lemma sum_div_reduce:\n  fixes d :: nat and f :: \"nat \\<Rightarrow> complex\"\n  assumes \"d dvd k\" \"d > 0\" \n  shows \"(\\<Sum>n | n \\<in> {1..k} \\<and> d dvd n. f n) = (\\<Sum>c \\<in> {1..k div d}. f (c*d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n | n \\<in> {1..k} \\<and> d dvd n. f n) =\n    (\\<Sum>c = 1..k div d. f (c * d))", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>k. k * d\" \"\\<lambda>k. k div d\"])\n     (use assms in \\<open>fastforce simp: div_le_mono\\<close>)+"], ["", "lemma prod_div_sub:\n  fixes f :: \"nat \\<Rightarrow> complex\"\n  assumes \"finite A\" \"B \\<subseteq> A\" \"\\<forall>b \\<in> B. f b \\<noteq> 0\"\n  shows \"(\\<Prod> i \\<in> A - B. f i) = ((\\<Prod> i \\<in> A. f i) div (\\<Prod> i \\<in> B. f i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f (A - B) = prod f A / prod f B", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. prod f (A - B) = prod f A / prod f B", "proof (induction \"card B\" arbitrary: B)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>B.\n       \\<lbrakk>0 = card B; finite A; B \\<subseteq> A;\n        \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> prod f (A - B) = prod f A / prod f B\n 2. \\<And>x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = card B; finite A; B \\<subseteq> A;\n                    \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n        Suc x = card B; finite A; B \\<subseteq> A;\n        \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "case 0"], ["proof (state)\nthis:\n  0 = card B\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<And>B.\n       \\<lbrakk>0 = card B; finite A; B \\<subseteq> A;\n        \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> prod f (A - B) = prod f A / prod f B\n 2. \\<And>x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = card B; finite A; B \\<subseteq> A;\n                    \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n        Suc x = card B; finite A; B \\<subseteq> A;\n        \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "then"], ["proof (chain)\npicking this:\n  0 = card B\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  0 = card B\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. prod f (A - B) = prod f A / prod f B", "using infinite_super"], ["proof (prove)\nusing this:\n  0 = card B\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0\n  \\<lbrakk>?S \\<subseteq> ?T; infinite ?S\\<rbrakk>\n  \\<Longrightarrow> infinite ?T\n\ngoal (1 subgoal):\n 1. prod f (A - B) = prod f A / prod f B", "by fastforce"], ["proof (state)\nthis:\n  prod f (A - B) = prod f A / prod f B\n\ngoal (1 subgoal):\n 1. \\<And>x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = card B; finite A; B \\<subseteq> A;\n                    \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n        Suc x = card B; finite A; B \\<subseteq> A;\n        \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = card B; finite A; B \\<subseteq> A;\n                    \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n        Suc x = card B; finite A; B \\<subseteq> A;\n        \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>n = card ?B; finite A; ?B \\<subseteq> A;\n   \\<forall>b\\<in>?B. f b \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> prod f (A - ?B) = prod f A / prod f ?B\n  Suc n = card B\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x B.\n       \\<lbrakk>\\<And>B.\n                   \\<lbrakk>x = card B; finite A; B \\<subseteq> A;\n                    \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n        Suc x = card B; finite A; B \\<subseteq> A;\n        \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>n = card ?B; finite A; ?B \\<subseteq> A;\n   \\<forall>b\\<in>?B. f b \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> prod f (A - ?B) = prod f A / prod f ?B\n  Suc n = card B\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = card ?B; finite A; ?B \\<subseteq> A;\n   \\<forall>b\\<in>?B. f b \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> prod f (A - ?B) = prod f A / prod f ?B\n  Suc n = card B\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. prod f (A - B) = prod f A / prod f B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "obtain B' x where decomp: \"B = B' \\<union> {x} \\<and> x \\<notin> B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>B' x.\n        B = B' \\<union> {x} \\<and> x \\<notin> B' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using card_eq_SucD[OF Suc(2)[symmetric]] insert_is_Un"], ["proof (prove)\nusing this:\n  \\<exists>b B.\n     B = insert b B \\<and>\n     b \\<notin> B \\<and> card B = n \\<and> (n = 0 \\<longrightarrow> B = {})\n  insert ?a ?A = {?a} \\<union> ?A\n\ngoal (1 subgoal):\n 1. (\\<And>B' x.\n        B = B' \\<union> {x} \\<and> x \\<notin> B' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  B = B' \\<union> {x} \\<and> x \\<notin> B'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "then"], ["proof (chain)\npicking this:\n  B = B' \\<union> {x} \\<and> x \\<notin> B'", "have B'card: \"card B' = n\""], ["proof (prove)\nusing this:\n  B = B' \\<union> {x} \\<and> x \\<notin> B'\n\ngoal (1 subgoal):\n 1. card B' = n", "using Suc(2)"], ["proof (prove)\nusing this:\n  B = B' \\<union> {x} \\<and> x \\<notin> B'\n  Suc n = card B\n\ngoal (1 subgoal):\n 1. card B' = n", "using Suc.prems(2) assms(1) finite_subset"], ["proof (prove)\nusing this:\n  B = B' \\<union> {x} \\<and> x \\<notin> B'\n  Suc n = card B\n  B \\<subseteq> A\n  finite A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. card B' = n", "by fastforce"], ["proof (state)\nthis:\n  card B' = n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "have \"prod f (A - B) = prod f ((A-B') - {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f (A - B) = prod f (A - B' - {x})", "by (simp add: decomp,subst Diff_insert,simp)"], ["proof (state)\nthis:\n  prod f (A - B) = prod f (A - B' - {x})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "also"], ["proof (state)\nthis:\n  prod f (A - B) = prod f (A - B' - {x})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "have \"\\<dots> = (prod f (A-B')) div f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f (A - B' - {x}) = prod f (A - B') / f x", "using prod_diff1[of \"A-B'\" f x] Suc decomp"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (A - B'); f x \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> prod f (A - B' - {x}) =\n                    (if x \\<in> A - B' then prod f (A - B') / f x\n                     else prod f (A - B'))\n  \\<lbrakk>n = card ?B; finite A; ?B \\<subseteq> A;\n   \\<forall>b\\<in>?B. f b \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> prod f (A - ?B) = prod f A / prod f ?B\n  Suc n = card B\n  finite A\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0\n  B = B' \\<union> {x} \\<and> x \\<notin> B'\n\ngoal (1 subgoal):\n 1. prod f (A - B' - {x}) = prod f (A - B') / f x", "by auto"], ["proof (state)\nthis:\n  prod f (A - B' - {x}) = prod f (A - B') / f x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "also"], ["proof (state)\nthis:\n  prod f (A - B' - {x}) = prod f (A - B') / f x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "have \"\\<dots> = (prod f A div prod f B') div f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f (A - B') / f x = prod f A / prod f B' / f x", "using Suc(1)[of B'] Suc(3) B'card decomp\n            Suc.prems(2) Suc.prems(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = card B'; finite A; B' \\<subseteq> A;\n   \\<forall>b\\<in>B'. f b \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> prod f (A - B') = prod f A / prod f B'\n  finite A\n  card B' = n\n  B = B' \\<union> {x} \\<and> x \\<notin> B'\n  B \\<subseteq> A\n  \\<forall>b\\<in>B. f b \\<noteq> 0\n\ngoal (1 subgoal):\n 1. prod f (A - B') / f x = prod f A / prod f B' / f x", "by force"], ["proof (state)\nthis:\n  prod f (A - B') / f x = prod f A / prod f B' / f x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "also"], ["proof (state)\nthis:\n  prod f (A - B') / f x = prod f A / prod f B' / f x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "have \"\\<dots> = prod f A div (prod f B' * f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f A / prod f B' / f x = prod f A / (prod f B' * f x)", "by auto"], ["proof (state)\nthis:\n  prod f A / prod f B' / f x = prod f A / (prod f B' * f x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "also"], ["proof (state)\nthis:\n  prod f A / prod f B' / f x = prod f A / (prod f B' * f x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "have \"\\<dots> = prod f A div prod f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f A / (prod f B' * f x) = prod f A / prod f B", "using decomp Suc.prems(2) assms(1) finite_subset"], ["proof (prove)\nusing this:\n  B = B' \\<union> {x} \\<and> x \\<notin> B'\n  B \\<subseteq> A\n  finite A\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. prod f A / (prod f B' * f x) = prod f A / prod f B", "by fastforce"], ["proof (state)\nthis:\n  prod f A / (prod f B' * f x) = prod f A / prod f B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>B.\n                \\<lbrakk>n = card B; finite A; B \\<subseteq> A;\n                 \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n                \\<Longrightarrow> prod f (A - B) = prod f A / prod f B;\n     Suc n = card B; finite A; B \\<subseteq> A;\n     \\<forall>b\\<in>B. f b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> prod f (A - B) = prod f A / prod f B", "finally"], ["proof (chain)\npicking this:\n  prod f (A - B) = prod f A / prod f B", "show ?thesis"], ["proof (prove)\nusing this:\n  prod f (A - B) = prod f A / prod f B\n\ngoal (1 subgoal):\n 1. prod f (A - B) = prod f A / prod f B", "by blast"], ["proof (state)\nthis:\n  prod f (A - B) = prod f A / prod f B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prod f (A - B) = prod f A / prod f B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma linear_gcd:\n  fixes a b c d :: nat\n  assumes \"a > 0\" \"b > 0\" \"c > 0\" \"d > 0\"\n  assumes \"coprime a c\" \"coprime b d\" \n  shows \"gcd (a*b) (c*d) = (gcd a d) * (gcd b c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (a * b) (c * d) = gcd a d * gcd b c", "using assms"], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  0 < c\n  0 < d\n  coprime a c\n  coprime b d\n\ngoal (1 subgoal):\n 1. gcd (a * b) (c * d) = gcd a d * gcd b c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "define q1 :: nat where \"q1 = a div gcd a d\""], ["proof (state)\nthis:\n  q1 = a div gcd a d\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "define q2 :: nat where \"q2 = c div gcd b c\""], ["proof (state)\nthis:\n  q2 = c div gcd b c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "define q3 :: nat where \"q3 = b div gcd b c\""], ["proof (state)\nthis:\n  q3 = b div gcd b c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "define q4 :: nat where \"q4 = d div gcd a d\""], ["proof (state)\nthis:\n  q4 = d div gcd a d\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "have \"coprime q1 q2\" \"coprime q3 q4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime q1 q2 &&& coprime q3 q4", "unfolding q1_def q2_def q3_def q4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (a div gcd a d) (c div gcd b c) &&&\n    coprime (b div gcd b c) (d div gcd a d)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. coprime (a div gcd a d) (c div gcd b c)\n 2. coprime (b div gcd b c) (d div gcd a d)", "have \"coprime (a div gcd a d) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (a div gcd a d) c", "using \\<open>coprime a c\\<close> coprime_mult_left_iff[of \"a div gcd a d\" \"gcd a d\" c]\n            dvd_mult_div_cancel[OF gcd_dvd1, of a b]"], ["proof (prove)\nusing this:\n  coprime a c\n  coprime (a div gcd a d * gcd a d) c =\n  (coprime (a div gcd a d) c \\<and> coprime (gcd a d) c)\n  gcd a b * (a div gcd a b) = a\n\ngoal (1 subgoal):\n 1. coprime (a div gcd a d) c", "by simp"], ["proof (state)\nthis:\n  coprime (a div gcd a d) c\n\ngoal (2 subgoals):\n 1. coprime (a div gcd a d) (c div gcd b c)\n 2. coprime (b div gcd b c) (d div gcd a d)", "then"], ["proof (chain)\npicking this:\n  coprime (a div gcd a d) c", "show \"coprime (a div gcd a d) (c div gcd b c)\""], ["proof (prove)\nusing this:\n  coprime (a div gcd a d) c\n\ngoal (1 subgoal):\n 1. coprime (a div gcd a d) (c div gcd b c)", "using coprime_mult_right_iff[of \"a div gcd a d\" \"gcd b c\" \"c div gcd b c\"]\n          dvd_div_mult_self[OF gcd_dvd2[of b c]]"], ["proof (prove)\nusing this:\n  coprime (a div gcd a d) c\n  coprime (a div gcd a d) (gcd b c * (c div gcd b c)) =\n  (coprime (a div gcd a d) (gcd b c) \\<and>\n   coprime (a div gcd a d) (c div gcd b c))\n  c div gcd b c * gcd b c = c\n\ngoal (1 subgoal):\n 1. coprime (a div gcd a d) (c div gcd b c)", "by auto"], ["proof (state)\nthis:\n  coprime (a div gcd a d) (c div gcd b c)\n\ngoal (1 subgoal):\n 1. coprime (b div gcd b c) (d div gcd a d)", "have \"coprime (b div gcd b c) d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (b div gcd b c) d", "using \\<open>coprime b d\\<close> coprime_mult_left_iff[of \"b div gcd b c\" \"gcd b c\" d]\n            dvd_mult_div_cancel[OF gcd_dvd1, of a b]"], ["proof (prove)\nusing this:\n  coprime b d\n  coprime (b div gcd b c * gcd b c) d =\n  (coprime (b div gcd b c) d \\<and> coprime (gcd b c) d)\n  gcd a b * (a div gcd a b) = a\n\ngoal (1 subgoal):\n 1. coprime (b div gcd b c) d", "by simp"], ["proof (state)\nthis:\n  coprime (b div gcd b c) d\n\ngoal (1 subgoal):\n 1. coprime (b div gcd b c) (d div gcd a d)", "then"], ["proof (chain)\npicking this:\n  coprime (b div gcd b c) d", "show \"coprime (b div gcd b c) (d div gcd a d)\""], ["proof (prove)\nusing this:\n  coprime (b div gcd b c) d\n\ngoal (1 subgoal):\n 1. coprime (b div gcd b c) (d div gcd a d)", "using coprime_mult_right_iff[of \"b div gcd b c\" \"gcd a d\" \"d div gcd a d\"]\n          dvd_div_mult_self[OF gcd_dvd2[of b c]]"], ["proof (prove)\nusing this:\n  coprime (b div gcd b c) d\n  coprime (b div gcd b c) (gcd a d * (d div gcd a d)) =\n  (coprime (b div gcd b c) (gcd a d) \\<and>\n   coprime (b div gcd b c) (d div gcd a d))\n  c div gcd b c * gcd b c = c\n\ngoal (1 subgoal):\n 1. coprime (b div gcd b c) (d div gcd a d)", "by auto"], ["proof (state)\nthis:\n  coprime (b div gcd b c) (d div gcd a d)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  coprime q1 q2\n  coprime q3 q4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "moreover"], ["proof (state)\nthis:\n  coprime q1 q2\n  coprime q3 q4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "have \"coprime q1 q4\" \"coprime q3 q2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime q1 q4 &&& coprime q3 q2", "unfolding q1_def q2_def q3_def q4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime (a div gcd a d) (d div gcd a d) &&&\n    coprime (b div gcd b c) (c div gcd b c)", "using assms div_gcd_coprime"], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  0 < c\n  0 < d\n  coprime a c\n  coprime b d\n  ?a \\<noteq> (0::?'a) \\<or> ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  coprime (?a div gcd ?a ?b) (?b div gcd ?a ?b)\n\ngoal (1 subgoal):\n 1. coprime (a div gcd a d) (d div gcd a d) &&&\n    coprime (b div gcd b c) (c div gcd b c)", "by blast+"], ["proof (state)\nthis:\n  coprime q1 q4\n  coprime q3 q2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "ultimately"], ["proof (chain)\npicking this:\n  coprime q1 q2\n  coprime q3 q4\n  coprime q1 q4\n  coprime q3 q2", "have 1: \"coprime (q1*q3) (q2*q4)\""], ["proof (prove)\nusing this:\n  coprime q1 q2\n  coprime q3 q4\n  coprime q1 q4\n  coprime q3 q2\n\ngoal (1 subgoal):\n 1. coprime (q1 * q3) (q2 * q4)", "by simp"], ["proof (state)\nthis:\n  coprime (q1 * q3) (q2 * q4)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "have \"gcd (a*b) (c*d) = (gcd a d) * (gcd b c) * gcd (q1*q3) (q2*q4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (a * b) (c * d) = gcd a d * gcd b c * gcd (q1 * q3) (q2 * q4)", "unfolding q1_def q2_def q3_def q4_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (a * b) (c * d) =\n    gcd a d * gcd b c *\n    gcd (a div gcd a d * (b div gcd b c)) (c div gcd b c * (d div gcd a d))", "by (subst gcd_mult_distrib_nat[of \"gcd a d * gcd b c\"],\n       simp add: field_simps,\n       simp add: mult.left_commute semiring_normalization_rules(18))"], ["proof (state)\nthis:\n  gcd (a * b) (c * d) = gcd a d * gcd b c * gcd (q1 * q3) (q2 * q4)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b; 0 < c; 0 < d; coprime a c; coprime b d\\<rbrakk>\n    \\<Longrightarrow> gcd (a * b) (c * d) = gcd a d * gcd b c", "from this 1"], ["proof (chain)\npicking this:\n  gcd (a * b) (c * d) = gcd a d * gcd b c * gcd (q1 * q3) (q2 * q4)\n  coprime (q1 * q3) (q2 * q4)", "show \"gcd (a*b) (c*d) = (gcd a d) * (gcd b c)\""], ["proof (prove)\nusing this:\n  gcd (a * b) (c * d) = gcd a d * gcd b c * gcd (q1 * q3) (q2 * q4)\n  coprime (q1 * q3) (q2 * q4)\n\ngoal (1 subgoal):\n 1. gcd (a * b) (c * d) = gcd a d * gcd b c", "by auto"], ["proof (state)\nthis:\n  gcd (a * b) (c * d) = gcd a d * gcd b c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reindex_product_bij:\n  fixes a b m k :: nat\n  defines \"S \\<equiv> {(d1,d2). d1 dvd gcd a m \\<and> d2 dvd gcd k b}\"\n  defines \"T \\<equiv> {d. d dvd (gcd a m) * (gcd k b)}\"\n  defines \"f \\<equiv> (\\<lambda>(d1,d2). d1 * d2)\"\n  assumes \"coprime a k\"\n  shows \"bij_betw f S T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f S T", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f S \\<and> f ` S = T", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on f S\n 2. f ` S = T", "show inj: \"inj_on f S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f S", "unfolding f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "fix d1 d2 d1' d2'"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "assume \"(d1,d2) \\<in> S\" \"(d1',d2') \\<in> S\""], ["proof (state)\nthis:\n  (d1, d2) \\<in> S\n  (d1', d2') \\<in> S\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "then"], ["proof (chain)\npicking this:\n  (d1, d2) \\<in> S\n  (d1', d2') \\<in> S", "have dvd: \"d1 dvd gcd a m\" \"d2 dvd gcd k b\" \n              \"d1' dvd gcd a m\" \"d2' dvd gcd k b\""], ["proof (prove)\nusing this:\n  (d1, d2) \\<in> S\n  (d1', d2') \\<in> S\n\ngoal (1 subgoal):\n 1. (d1 dvd gcd a m &&& d2 dvd gcd k b) &&&\n    d1' dvd gcd a m &&& d2' dvd gcd k b", "unfolding S_def"], ["proof (prove)\nusing this:\n  (d1, d2) \\<in> {(d1, d2). d1 dvd gcd a m \\<and> d2 dvd gcd k b}\n  (d1', d2') \\<in> {(d1, d2). d1 dvd gcd a m \\<and> d2 dvd gcd k b}\n\ngoal (1 subgoal):\n 1. (d1 dvd gcd a m &&& d2 dvd gcd k b) &&&\n    d1' dvd gcd a m &&& d2' dvd gcd k b", "by simp+"], ["proof (state)\nthis:\n  d1 dvd gcd a m\n  d2 dvd gcd k b\n  d1' dvd gcd a m\n  d2' dvd gcd k b\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "assume \"f (d1,d2) = f (d1',d2')\""], ["proof (state)\nthis:\n  f (d1, d2) = f (d1', d2')\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "then"], ["proof (chain)\npicking this:\n  f (d1, d2) = f (d1', d2')", "have eq: \"d1 * d2 = d1' * d2'\""], ["proof (prove)\nusing this:\n  f (d1, d2) = f (d1', d2')\n\ngoal (1 subgoal):\n 1. d1 * d2 = d1' * d2'", "unfolding f_def"], ["proof (prove)\nusing this:\n  (case (d1, d2) of (d1, d2) \\<Rightarrow> d1 * d2) =\n  (case (d1', d2') of (d1, d2) \\<Rightarrow> d1 * d2)\n\ngoal (1 subgoal):\n 1. d1 * d2 = d1' * d2'", "by simp"], ["proof (state)\nthis:\n  d1 * d2 = d1' * d2'\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "from eq dvd"], ["proof (chain)\npicking this:\n  d1 * d2 = d1' * d2'\n  d1 dvd gcd a m\n  d2 dvd gcd k b\n  d1' dvd gcd a m\n  d2' dvd gcd k b", "have eq1: \"d1 = d1'\""], ["proof (prove)\nusing this:\n  d1 * d2 = d1' * d2'\n  d1 dvd gcd a m\n  d2 dvd gcd k b\n  d1' dvd gcd a m\n  d2' dvd gcd k b\n\ngoal (1 subgoal):\n 1. d1 = d1'", "by (simp,meson assms coprime_crossproduct_nat coprime_divisors)"], ["proof (state)\nthis:\n  d1 = d1'\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "from eq dvd"], ["proof (chain)\npicking this:\n  d1 * d2 = d1' * d2'\n  d1 dvd gcd a m\n  d2 dvd gcd k b\n  d1' dvd gcd a m\n  d2' dvd gcd k b", "have eq2: \"d2 = d2'\""], ["proof (prove)\nusing this:\n  d1 * d2 = d1' * d2'\n  d1 dvd gcd a m\n  d2 dvd gcd k b\n  d1' dvd gcd a m\n  d2' dvd gcd k b\n\ngoal (1 subgoal):\n 1. d2 = d2'", "using assms(4) eq1"], ["proof (prove)\nusing this:\n  d1 * d2 = d1' * d2'\n  d1 dvd gcd a m\n  d2 dvd gcd k b\n  d1' dvd gcd a m\n  d2' dvd gcd k b\n  coprime a k\n  d1 = d1'\n\ngoal (1 subgoal):\n 1. d2 = d2'", "by auto"], ["proof (state)\nthis:\n  d2 = d2'\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "from eq1 eq2"], ["proof (chain)\npicking this:\n  d1 = d1'\n  d2 = d2'", "have \"d1 = d1' \\<and> d2 = d2'\""], ["proof (prove)\nusing this:\n  d1 = d1'\n  d2 = d2'\n\ngoal (1 subgoal):\n 1. d1 = d1' \\<and> d2 = d2'", "by simp"], ["proof (state)\nthis:\n  d1 = d1' \\<and> d2 = d2'\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?d1.2, ?d2.2) \\<in> S; (?d1'2, ?d2'2) \\<in> S;\n   f (?d1.2, ?d2.2) = f (?d1'2, ?d2'2)\\<rbrakk>\n  \\<Longrightarrow> ?d1.2 = ?d1'2 \\<and> ?d2.2 = ?d2'2\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?d1.2, ?d2.2) \\<in> S; (?d1'2, ?d2'2) \\<in> S;\n   f (?d1.2, ?d2.2) = f (?d1'2, ?d2'2)\\<rbrakk>\n  \\<Longrightarrow> ?d1.2 = ?d1'2 \\<and> ?d2.2 = ?d2'2", "show \"inj_on (\\<lambda>(d1, d2). d1 * d2) S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(?d1.2, ?d2.2) \\<in> S; (?d1'2, ?d2'2) \\<in> S;\n   f (?d1.2, ?d2.2) = f (?d1'2, ?d2'2)\\<rbrakk>\n  \\<Longrightarrow> ?d1.2 = ?d1'2 \\<and> ?d2.2 = ?d2'2\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "using S_def f_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?d1.2, ?d2.2) \\<in> S; (?d1'2, ?d2'2) \\<in> S;\n   f (?d1.2, ?d2.2) = f (?d1'2, ?d2'2)\\<rbrakk>\n  \\<Longrightarrow> ?d1.2 = ?d1'2 \\<and> ?d2.2 = ?d2'2\n  S \\<equiv> {(d1, d2). d1 dvd gcd a m \\<and> d2 dvd gcd k b}\n  f \\<equiv> \\<lambda>(d1, d2). d1 * d2\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(d1, d2). d1 * d2) S", "by (intro inj_onI,blast)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>(d1, d2). d1 * d2) S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on f S\n\ngoal (1 subgoal):\n 1. f ` S = T", "show surj: \"f ` S = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` S = T", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` S = T", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` S = T", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` S = T", "have \"d dvd (gcd a m) * (gcd k b)\n       \\<longleftrightarrow> (\\<exists>d1 d2. d = d1*d2 \\<and> d1 dvd gcd a m \\<and> d2 dvd gcd k b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d dvd gcd a m * gcd k b) =\n    (\\<exists>d1 d2.\n        d = d1 * d2 \\<and> d1 dvd gcd a m \\<and> d2 dvd gcd k b)", "using division_decomp mult_dvd_mono"], ["proof (prove)\nusing this:\n  ?a dvd ?b * ?c \\<Longrightarrow>\n  \\<exists>b' c'. ?a = b' * c' \\<and> b' dvd ?b \\<and> c' dvd ?c\n  \\<lbrakk>?a dvd ?b; ?c dvd ?d\\<rbrakk>\n  \\<Longrightarrow> ?a * ?c dvd ?b * ?d\n\ngoal (1 subgoal):\n 1. (d dvd gcd a m * gcd k b) =\n    (\\<exists>d1 d2.\n        d = d1 * d2 \\<and> d1 dvd gcd a m \\<and> d2 dvd gcd k b)", "by blast"], ["proof (state)\nthis:\n  (d dvd gcd a m * gcd k b) =\n  (\\<exists>d1 d2. d = d1 * d2 \\<and> d1 dvd gcd a m \\<and> d2 dvd gcd k b)\n\ngoal (1 subgoal):\n 1. f ` S = T", "}"], ["proof (state)\nthis:\n  (?d2 dvd gcd a m * gcd k b) =\n  (\\<exists>d1 d2.\n      ?d2 = d1 * d2 \\<and> d1 dvd gcd a m \\<and> d2 dvd gcd k b)\n\ngoal (1 subgoal):\n 1. f ` S = T", "then"], ["proof (chain)\npicking this:\n  (?d2 dvd gcd a m * gcd k b) =\n  (\\<exists>d1 d2.\n      ?d2 = d1 * d2 \\<and> d1 dvd gcd a m \\<and> d2 dvd gcd k b)", "show ?thesis"], ["proof (prove)\nusing this:\n  (?d2 dvd gcd a m * gcd k b) =\n  (\\<exists>d1 d2.\n      ?d2 = d1 * d2 \\<and> d1 dvd gcd a m \\<and> d2 dvd gcd k b)\n\ngoal (1 subgoal):\n 1. f ` S = T", "unfolding f_def S_def T_def image_def"], ["proof (prove)\nusing this:\n  (?d2 dvd gcd a m * gcd k b) =\n  (\\<exists>d1 d2.\n      ?d2 = d1 * d2 \\<and> d1 dvd gcd a m \\<and> d2 dvd gcd k b)\n\ngoal (1 subgoal):\n 1. {y. \\<exists>x\\<in>{(d1, d2). d1 dvd gcd a m \\<and> d2 dvd gcd k b}.\n           y = (case x of (x, xa) \\<Rightarrow> x * xa)} =\n    {d. d dvd gcd a m * gcd k b}", "by auto"], ["proof (state)\nthis:\n  f ` S = T\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f ` S = T\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma p_div_set:\n  shows \"{p. p \\<in>prime_factors a \\<and> \\<not> p dvd N} = \n         ({p. p \\<in>prime_factors (a*N)} - {p. p \\<in>prime_factors N})\"\n  (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N} =\n    {p. p \\<in># prime_factorization (a * N)} -\n    {p. p \\<in># prime_factorization N}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> {p. p \\<in># prime_factorization (a * N)} -\n                {p. p \\<in># prime_factorization N}\n 2. {p. p \\<in># prime_factorization (a * N)} -\n    {p. p \\<in># prime_factorization N}\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "show \"?A \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> {p. p \\<in># prime_factorization (a * N)} -\n                {p. p \\<in># prime_factorization N}", "proof (simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "assume as: \"p \\<in># prime_factorization a\" \"\\<not> p dvd N\""], ["proof (state)\nthis:\n  p \\<in># prime_factorization a\n  \\<not> p dvd N\n\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "then"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization a\n  \\<not> p dvd N", "have 1: \"p \\<in> prime_factors (a * N)\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization a\n  \\<not> p dvd N\n\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization (a * N)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in># prime_factorization a; \\<not> p dvd N\\<rbrakk>\n    \\<Longrightarrow> p \\<in># prime_factorization (a * N)", "from in_prime_factors_iff[of p a] as"], ["proof (chain)\npicking this:\n  (p \\<in># prime_factorization a) =\n  (a \\<noteq> (0::'a) \\<and> p dvd a \\<and> prime p)\n  p \\<in># prime_factorization a\n  \\<not> p dvd N", "have \"a \\<noteq> 0\" \"p dvd a\" \"prime p\""], ["proof (prove)\nusing this:\n  (p \\<in># prime_factorization a) =\n  (a \\<noteq> (0::'a) \\<and> p dvd a \\<and> prime p)\n  p \\<in># prime_factorization a\n  \\<not> p dvd N\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a) &&& p dvd a &&& prime p", "by simp+"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n  p dvd a\n  prime p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in># prime_factorization a; \\<not> p dvd N\\<rbrakk>\n    \\<Longrightarrow> p \\<in># prime_factorization (a * N)", "have \"N \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N \\<noteq> (0::'a)", "using \\<open>\\<not> p dvd N\\<close>"], ["proof (prove)\nusing this:\n  \\<not> p dvd N\n\ngoal (1 subgoal):\n 1. N \\<noteq> (0::'a)", "by blast"], ["proof (state)\nthis:\n  N \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in># prime_factorization a; \\<not> p dvd N\\<rbrakk>\n    \\<Longrightarrow> p \\<in># prime_factorization (a * N)", "have \"a * N \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * N \\<noteq> (0::'a)", "using \\<open>a \\<noteq> 0\\<close> \\<open>N \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  a \\<noteq> (0::'a)\n  N \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. a * N \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  a * N \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in># prime_factorization a; \\<not> p dvd N\\<rbrakk>\n    \\<Longrightarrow> p \\<in># prime_factorization (a * N)", "have \"p dvd a*N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd a * N", "using \\<open>p dvd a\\<close>"], ["proof (prove)\nusing this:\n  p dvd a\n\ngoal (1 subgoal):\n 1. p dvd a * N", "by simp"], ["proof (state)\nthis:\n  p dvd a * N\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in># prime_factorization a; \\<not> p dvd N\\<rbrakk>\n    \\<Longrightarrow> p \\<in># prime_factorization (a * N)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization (a * N)", "using \\<open>a*N \\<noteq> 0\\<close> \\<open>p dvd a*N\\<close> \\<open>prime p\\<close> in_prime_factors_iff"], ["proof (prove)\nusing this:\n  a * N \\<noteq> (0::'a)\n  p dvd a * N\n  prime p\n  (?p \\<in># prime_factorization ?x) =\n  (?x \\<noteq> (0::?'a) \\<and> ?p dvd ?x \\<and> prime ?p)\n\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization (a * N)", "by blast"], ["proof (state)\nthis:\n  p \\<in># prime_factorization (a * N)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in># prime_factorization (a * N)\n\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "from as"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization a\n  \\<not> p dvd N", "have 2: \"p \\<notin> prime_factors N\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization a\n  \\<not> p dvd N\n\ngoal (1 subgoal):\n 1. p \\<notin> prime_factors N", "by blast"], ["proof (state)\nthis:\n  p \\<notin> prime_factors N\n\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "from 1 2"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization (a * N)\n  p \\<notin> prime_factors N", "have \"p \\<in> prime_factors (a * N) - prime_factors N\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization (a * N)\n  p \\<notin> prime_factors N\n\ngoal (1 subgoal):\n 1. p \\<in> prime_factors (a * N) - prime_factors N", "by blast"], ["proof (state)\nthis:\n  p \\<in> prime_factors (a * N) - prime_factors N\n\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?p2 \\<in># prime_factorization a; \\<not> ?p2 dvd N\\<rbrakk>\n  \\<Longrightarrow> ?p2 \\<in> prime_factors (a * N) - prime_factors N\n\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?p2 \\<in># prime_factorization a; \\<not> ?p2 dvd N\\<rbrakk>\n  \\<Longrightarrow> ?p2 \\<in> prime_factors (a * N) - prime_factors N", "show \"{p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n               \\<subseteq> prime_factors (a * N) - prime_factors N\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?p2 \\<in># prime_factorization a; \\<not> ?p2 dvd N\\<rbrakk>\n  \\<Longrightarrow> ?p2 \\<in> prime_factors (a * N) - prime_factors N\n\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n    \\<subseteq> prime_factors (a * N) - prime_factors N", "by blast"], ["proof (state)\nthis:\n  {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n  \\<subseteq> prime_factors (a * N) - prime_factors N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n  \\<subseteq> {p. p \\<in># prime_factorization (a * N)} -\n              {p. p \\<in># prime_factorization N}\n\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization (a * N)} -\n    {p. p \\<in># prime_factorization N}\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "show \"?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. p \\<in># prime_factorization (a * N)} -\n    {p. p \\<in># prime_factorization N}\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "proof (simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "assume as: \"p \\<in> prime_factors (a * N) - prime_factors N\""], ["proof (state)\nthis:\n  p \\<in> prime_factors (a * N) - prime_factors N\n\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "then"], ["proof (chain)\npicking this:\n  p \\<in> prime_factors (a * N) - prime_factors N", "have 1: \"\\<not> p dvd N\""], ["proof (prove)\nusing this:\n  p \\<in> prime_factors (a * N) - prime_factors N\n\ngoal (1 subgoal):\n 1. \\<not> p dvd N", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<in> prime_factors (a * N) - prime_factors N \\<Longrightarrow>\n    \\<not> p dvd N", "from as"], ["proof (chain)\npicking this:\n  p \\<in> prime_factors (a * N) - prime_factors N", "have \"p \\<in> prime_factors (a * N)\" \"p \\<notin> prime_factors N\""], ["proof (prove)\nusing this:\n  p \\<in> prime_factors (a * N) - prime_factors N\n\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization (a * N) &&& p \\<notin> prime_factors N", "using DiffD1 DiffD2"], ["proof (prove)\nusing this:\n  p \\<in> prime_factors (a * N) - prime_factors N\n  ?c \\<in> ?A - ?B \\<Longrightarrow> ?c \\<in> ?A\n  \\<lbrakk>?c \\<in> ?A - ?B; ?c \\<in> ?B\\<rbrakk> \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization (a * N) &&& p \\<notin> prime_factors N", "by blast+"], ["proof (state)\nthis:\n  p \\<in># prime_factorization (a * N)\n  p \\<notin> prime_factors N\n\ngoal (1 subgoal):\n 1. p \\<in> prime_factors (a * N) - prime_factors N \\<Longrightarrow>\n    \\<not> p dvd N", "then"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization (a * N)\n  p \\<notin> prime_factors N", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization (a * N)\n  p \\<notin> prime_factors N\n\ngoal (1 subgoal):\n 1. \\<not> p dvd N", "by (simp add: in_prime_factors_iff)"], ["proof (state)\nthis:\n  \\<not> p dvd N\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> p dvd N\n\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "have 2: \"p \\<in># prime_factorization a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization a", "have \"p dvd (a*N)\" \"prime p\" \"a*N \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd a * N &&& prime p &&& a * N \\<noteq> (0::'a)", "using in_prime_factors_iff as"], ["proof (prove)\nusing this:\n  (?p \\<in># prime_factorization ?x) =\n  (?x \\<noteq> (0::?'a) \\<and> ?p dvd ?x \\<and> prime ?p)\n  p \\<in> prime_factors (a * N) - prime_factors N\n\ngoal (1 subgoal):\n 1. p dvd a * N &&& prime p &&& a * N \\<noteq> (0::'a)", "by blast+"], ["proof (state)\nthis:\n  p dvd a * N\n  prime p\n  a * N \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization a", "have \"p dvd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p dvd a", "using \\<open>\\<not> p dvd N\\<close> prime_dvd_multD[OF \\<open>prime p\\<close> \\<open>p dvd (a*N)\\<close>]"], ["proof (prove)\nusing this:\n  \\<not> p dvd N\n  p dvd a \\<or> p dvd N\n\ngoal (1 subgoal):\n 1. p dvd a", "by blast"], ["proof (state)\nthis:\n  p dvd a\n\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization a", "have \"a \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a)", "using \\<open>a*N \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  a * N \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. a \\<noteq> (0::'a)", "by simp"], ["proof (state)\nthis:\n  a \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization a", "using in_prime_factors_iff \\<open>a \\<noteq> 0\\<close> \\<open>p dvd a\\<close> \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  (?p \\<in># prime_factorization ?x) =\n  (?x \\<noteq> (0::?'a) \\<and> ?p dvd ?x \\<and> prime ?p)\n  a \\<noteq> (0::'a)\n  p dvd a\n  prime p\n\ngoal (1 subgoal):\n 1. p \\<in># prime_factorization a", "by blast"], ["proof (state)\nthis:\n  p \\<in># prime_factorization a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in># prime_factorization a\n\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "from 1 2"], ["proof (chain)\npicking this:\n  \\<not> p dvd N\n  p \\<in># prime_factorization a", "have \"p \\<in> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\""], ["proof (prove)\nusing this:\n  \\<not> p dvd N\n  p \\<in># prime_factorization a\n\ngoal (1 subgoal):\n 1. p \\<in> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "by blast"], ["proof (state)\nthis:\n  p \\<in> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> prime_factors (a * N) - prime_factors N \\<Longrightarrow>\n  ?p2 \\<in> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "then"], ["proof (chain)\npicking this:\n  ?p2 \\<in> prime_factors (a * N) - prime_factors N \\<Longrightarrow>\n  ?p2 \\<in> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "show \"prime_factors (a * N) - prime_factors N\n               \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\""], ["proof (prove)\nusing this:\n  ?p2 \\<in> prime_factors (a * N) - prime_factors N \\<Longrightarrow>\n  ?p2 \\<in> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n\ngoal (1 subgoal):\n 1. prime_factors (a * N) - prime_factors N\n    \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}", "by blast"], ["proof (state)\nthis:\n  prime_factors (a * N) - prime_factors N\n  \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {p. p \\<in># prime_factorization (a * N)} -\n  {p. p \\<in># prime_factorization N}\n  \\<subseteq> {p. p \\<in># prime_factorization a \\<and> \\<not> p dvd N}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coprime_iff_prime_factors_disjoint:\n  fixes x y :: \"'a :: factorial_semiring\"\n  assumes \"x \\<noteq> 0\" \"y \\<noteq> 0\"\n  shows \"coprime x y \\<longleftrightarrow> prime_factors x \\<inter> prime_factors y = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime x y = (prime_factors x \\<inter> prime_factors y = {})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. coprime x y \\<Longrightarrow>\n    prime_factors x \\<inter> prime_factors y = {}\n 2. prime_factors x \\<inter> prime_factors y = {} \\<Longrightarrow>\n    coprime x y", "assume \"coprime x y\""], ["proof (state)\nthis:\n  coprime x y\n\ngoal (2 subgoals):\n 1. coprime x y \\<Longrightarrow>\n    prime_factors x \\<inter> prime_factors y = {}\n 2. prime_factors x \\<inter> prime_factors y = {} \\<Longrightarrow>\n    coprime x y", "have False if \"p \\<in> prime_factors x\" \"p \\<in> prime_factors y\" for p"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "from that assms"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization x\n  p \\<in># prime_factorization y\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)", "have \"p dvd x\" \"p dvd y\""], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization x\n  p \\<in># prime_factorization y\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. p dvd x &&& p dvd y", "by (auto simp: prime_factors_dvd)"], ["proof (state)\nthis:\n  p dvd x\n  p dvd y\n\ngoal (1 subgoal):\n 1. False", "with \\<open>coprime x y\\<close>"], ["proof (chain)\npicking this:\n  coprime x y\n  p dvd x\n  p dvd y", "have \"p dvd 1\""], ["proof (prove)\nusing this:\n  coprime x y\n  p dvd x\n  p dvd y\n\ngoal (1 subgoal):\n 1. is_unit p", "using coprime_common_divisor"], ["proof (prove)\nusing this:\n  coprime x y\n  p dvd x\n  p dvd y\n  \\<lbrakk>coprime ?a ?b; ?c dvd ?a; ?c dvd ?b\\<rbrakk>\n  \\<Longrightarrow> is_unit ?c\n\ngoal (1 subgoal):\n 1. is_unit p", "by auto"], ["proof (state)\nthis:\n  is_unit p\n\ngoal (1 subgoal):\n 1. False", "with that assms"], ["proof (chain)\npicking this:\n  p \\<in># prime_factorization x\n  p \\<in># prime_factorization y\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)\n  is_unit p", "show False"], ["proof (prove)\nusing this:\n  p \\<in># prime_factorization x\n  p \\<in># prime_factorization y\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)\n  is_unit p\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: prime_factors_dvd)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?p \\<in># prime_factorization x;\n   ?p \\<in># prime_factorization y\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. coprime x y \\<Longrightarrow>\n    prime_factors x \\<inter> prime_factors y = {}\n 2. prime_factors x \\<inter> prime_factors y = {} \\<Longrightarrow>\n    coprime x y", "thus \"prime_factors x \\<inter> prime_factors y = {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<in># prime_factorization x;\n   ?p \\<in># prime_factorization y\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. prime_factors x \\<inter> prime_factors y = {}", "by auto"], ["proof (state)\nthis:\n  prime_factors x \\<inter> prime_factors y = {}\n\ngoal (1 subgoal):\n 1. prime_factors x \\<inter> prime_factors y = {} \\<Longrightarrow>\n    coprime x y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. prime_factors x \\<inter> prime_factors y = {} \\<Longrightarrow>\n    coprime x y", "assume disjoint: \"prime_factors x \\<inter> prime_factors y = {}\""], ["proof (state)\nthis:\n  prime_factors x \\<inter> prime_factors y = {}\n\ngoal (1 subgoal):\n 1. prime_factors x \\<inter> prime_factors y = {} \\<Longrightarrow>\n    coprime x y", "show \"coprime x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime x y", "proof (rule coprimeI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c. \\<lbrakk>c dvd x; c dvd y\\<rbrakk> \\<Longrightarrow> is_unit c", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c. \\<lbrakk>c dvd x; c dvd y\\<rbrakk> \\<Longrightarrow> is_unit c", "assume d: \"d dvd x\" \"d dvd y\""], ["proof (state)\nthis:\n  d dvd x\n  d dvd y\n\ngoal (1 subgoal):\n 1. \\<And>c. \\<lbrakk>c dvd x; c dvd y\\<rbrakk> \\<Longrightarrow> is_unit c", "show \"is_unit d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit d", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_unit d \\<Longrightarrow> False", "assume \"\\<not>is_unit d\""], ["proof (state)\nthis:\n  \\<not> is_unit d\n\ngoal (1 subgoal):\n 1. \\<not> is_unit d \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> is_unit d\n\ngoal (1 subgoal):\n 1. \\<not> is_unit d \\<Longrightarrow> False", "from this and d assms"], ["proof (chain)\npicking this:\n  \\<not> is_unit d\n  d dvd x\n  d dvd y\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)", "have \"d \\<noteq> 0\""], ["proof (prove)\nusing this:\n  \\<not> is_unit d\n  d dvd x\n  d dvd y\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. d \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  d \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> is_unit d \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> is_unit d\n  d \\<noteq> (0::'a)", "obtain p where p: \"prime p\" \"p dvd d\""], ["proof (prove)\nusing this:\n  \\<not> is_unit d\n  d \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>prime p; p dvd d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prime_divisor_exists"], ["proof (prove)\nusing this:\n  \\<not> is_unit d\n  d \\<noteq> (0::'a)\n  \\<lbrakk>?a \\<noteq> (0::?'a); \\<not> is_unit ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b. b dvd ?a \\<and> prime b\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>prime p; p dvd d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  prime p\n  p dvd d\n\ngoal (1 subgoal):\n 1. \\<not> is_unit d \\<Longrightarrow> False", "with d and assms"], ["proof (chain)\npicking this:\n  d dvd x\n  d dvd y\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)\n  prime p\n  p dvd d", "have \"p \\<in> prime_factors x \\<inter> prime_factors y\""], ["proof (prove)\nusing this:\n  d dvd x\n  d dvd y\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)\n  prime p\n  p dvd d\n\ngoal (1 subgoal):\n 1. p \\<in> prime_factors x \\<inter> prime_factors y", "by (auto simp: prime_factors_dvd)"], ["proof (state)\nthis:\n  p \\<in> prime_factors x \\<inter> prime_factors y\n\ngoal (1 subgoal):\n 1. \\<not> is_unit d \\<Longrightarrow> False", "with disjoint"], ["proof (chain)\npicking this:\n  prime_factors x \\<inter> prime_factors y = {}\n  p \\<in> prime_factors x \\<inter> prime_factors y", "show False"], ["proof (prove)\nusing this:\n  prime_factors x \\<inter> prime_factors y = {}\n  p \\<in> prime_factors x \\<inter> prime_factors y\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_unit d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  coprime x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma coprime_cong_prime_factors:\n  fixes x y :: \"'a :: factorial_semiring_gcd\"\n  assumes \"x \\<noteq> 0\" \"y \\<noteq> 0\" \"x' \\<noteq> 0\" \"y' \\<noteq> 0\"\n  assumes \"prime_factors x = prime_factors x'\"\n  assumes \"prime_factors y = prime_factors y'\"\n  shows   \"coprime x y \\<longleftrightarrow> coprime x' y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime x y = coprime x' y'", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> (0::'a)\n  y \\<noteq> (0::'a)\n  x' \\<noteq> (0::'a)\n  y' \\<noteq> (0::'a)\n  prime_factors x = prime_factors x'\n  prime_factors y = prime_factors y'\n\ngoal (1 subgoal):\n 1. coprime x y = coprime x' y'", "by (simp add: coprime_iff_prime_factors_disjoint)"], ["", "lemma moebius_prod_not_coprime:\n  assumes \"\\<not> coprime N d\"\n  shows \"moebius_mu (N*d) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu (N * d) = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. moebius_mu (N * d) = (0::'a)", "from assms"], ["proof (chain)\npicking this:\n  \\<not> coprime N d", "obtain l where l_form: \"l dvd N \\<and> l dvd d \\<and> \\<not> is_unit l\""], ["proof (prove)\nusing this:\n  \\<not> coprime N d\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        l dvd N \\<and> l dvd d \\<and> \\<not> is_unit l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding coprime_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>c.\n             c dvd N \\<longrightarrow> c dvd d \\<longrightarrow> is_unit c)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        l dvd N \\<and> l dvd d \\<and> \\<not> is_unit l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l dvd N \\<and> l dvd d \\<and> \\<not> is_unit l\n\ngoal (1 subgoal):\n 1. moebius_mu (N * d) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  l dvd N \\<and> l dvd d \\<and> \\<not> is_unit l", "have \"l * l dvd N * d\""], ["proof (prove)\nusing this:\n  l dvd N \\<and> l dvd d \\<and> \\<not> is_unit l\n\ngoal (1 subgoal):\n 1. l * l dvd N * d", "using mult_dvd_mono"], ["proof (prove)\nusing this:\n  l dvd N \\<and> l dvd d \\<and> \\<not> is_unit l\n  \\<lbrakk>?a dvd ?b; ?c dvd ?d\\<rbrakk>\n  \\<Longrightarrow> ?a * ?c dvd ?b * ?d\n\ngoal (1 subgoal):\n 1. l * l dvd N * d", "by auto"], ["proof (state)\nthis:\n  l * l dvd N * d\n\ngoal (1 subgoal):\n 1. moebius_mu (N * d) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  l * l dvd N * d", "have \"l\\<^sup>2 dvd N*d\""], ["proof (prove)\nusing this:\n  l * l dvd N * d\n\ngoal (1 subgoal):\n 1. l\\<^sup>2 dvd N * d", "by (subst power2_eq_square,blast)"], ["proof (state)\nthis:\n  l\\<^sup>2 dvd N * d\n\ngoal (1 subgoal):\n 1. moebius_mu (N * d) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  l\\<^sup>2 dvd N * d", "have \"\\<not> squarefree (N*d)\""], ["proof (prove)\nusing this:\n  l\\<^sup>2 dvd N * d\n\ngoal (1 subgoal):\n 1. \\<not> squarefree (N * d)", "unfolding squarefree_def coprime_def"], ["proof (prove)\nusing this:\n  l\\<^sup>2 dvd N * d\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x. x\\<^sup>2 dvd N * d \\<longrightarrow> is_unit x)", "using l_form"], ["proof (prove)\nusing this:\n  l\\<^sup>2 dvd N * d\n  l dvd N \\<and> l dvd d \\<and> \\<not> is_unit l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x. x\\<^sup>2 dvd N * d \\<longrightarrow> is_unit x)", "by blast"], ["proof (state)\nthis:\n  \\<not> squarefree (N * d)\n\ngoal (1 subgoal):\n 1. moebius_mu (N * d) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  \\<not> squarefree (N * d)", "show \"moebius_mu (N*d) = 0\""], ["proof (prove)\nusing this:\n  \\<not> squarefree (N * d)\n\ngoal (1 subgoal):\n 1. moebius_mu (N * d) = (0::'b)", "using moebius_mu_def"], ["proof (prove)\nusing this:\n  \\<not> squarefree (N * d)\n  moebius_mu ?n =\n  (if squarefree ?n then (- (1::?'a)) ^ card (prime_factors ?n)\n   else (0::?'a))\n\ngoal (1 subgoal):\n 1. moebius_mu (N * d) = (0::'b)", "by auto"], ["proof (state)\nthis:\n  moebius_mu (N * d) = (0::?'b1)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Theorem 2.18\\<close>"], ["", "(* TODO Place in corresponding theory *)"], ["", "lemma sum_divisors_moebius_mu_times_multiplicative:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1}\"\n  assumes \"multiplicative_function f\" and \"n > 0\"\n  shows   \"(\\<Sum>d | d dvd n. moebius_mu d * f d) = (\\<Prod>p\\<in>prime_factors n. 1 - f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "define g where \"g = (\\<lambda>n. \\<Sum>d | d dvd n. moebius_mu d * f d)\""], ["proof (state)\nthis:\n  g = (\\<lambda>n. \\<Sum>d | d dvd n. moebius_mu d * f d)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "define g' where \"g' = dirichlet_prod (\\<lambda>n. moebius_mu n * f n) (\\<lambda>n. if n = 0 then 0 else 1)\""], ["proof (state)\nthis:\n  g' =\n  dirichlet_prod (\\<lambda>n. moebius_mu n * f n)\n   (\\<lambda>n. if n = 0 then 0::'a else (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "have \"multiplicative_function (\\<lambda>n. if n = 0 then 0 else 1 :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. if n = 0 then 0::'a else (1::'a))", "by standard auto"], ["proof (state)\nthis:\n  multiplicative_function (\\<lambda>n. if n = 0 then 0::'a else (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "interpret multiplicative_function g'"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function g'", "unfolding g'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function\n     (dirichlet_prod (\\<lambda>n. moebius_mu n * f n)\n       (\\<lambda>n. if n = 0 then 0::'a else (1::'a)))", "by (intro multiplicative_dirichlet_prod multiplicative_function_mult\n              moebius_mu.multiplicative_function_axioms assms) fact+"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "have g'_primepow: \"g' (p ^ k) = 1 - f p\" if \"prime p\" \"k > 0\" for p k"], ["proof (prove)\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "have \"g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))", "using that"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))", "by (simp add: g'_def dirichlet_prod_prime_power)"], ["proof (state)\nthis:\n  g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "also"], ["proof (state)\nthis:\n  g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "have \"\\<dots> = (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i)) =\n    (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))", "using that"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i)) =\n    (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))", "by (intro sum.mono_neutral_right) (auto simp: moebius_mu_power')"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i)) =\n  (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i)) =\n  (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "have \"\\<dots> = 1 - f p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i)) = (1::'a) - f p", "using that"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i)) = (1::'a) - f p", "by (simp add: moebius_mu.prime)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i)) = (1::'a) - f p\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "finally"], ["proof (chain)\npicking this:\n  g' (p ^ k) = (1::'a) - f p", "show ?thesis"], ["proof (prove)\nusing this:\n  g' (p ^ k) = (1::'a) - f p\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "."], ["proof (state)\nthis:\n  g' (p ^ k) = (1::'a) - f p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>prime ?p; 0 < ?k\\<rbrakk>\n  \\<Longrightarrow> g' (?p ^ ?k) = (1::'a) - f ?p\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "have \"g' n = g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' n = g n", "by (simp add: g_def g'_def dirichlet_prod_def)"], ["proof (state)\nthis:\n  g' n = g n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "also"], ["proof (state)\nthis:\n  g' n = g n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "from assms"], ["proof (chain)\npicking this:\n  multiplicative_function f\n  0 < n", "have \"g' n = (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n))\""], ["proof (prove)\nusing this:\n  multiplicative_function f\n  0 < n\n\ngoal (1 subgoal):\n 1. g' n = (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n))", "by (intro prod_prime_factors) auto"], ["proof (state)\nthis:\n  g' n = (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "also"], ["proof (state)\nthis:\n  g' n = (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "have \"\\<dots> = (\\<Prod>p\\<in>prime_factors n. 1 - f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n)) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "by (intro prod.cong) (auto simp: g'_primepow prime_factors_multiplicity)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n)) =\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p) = g n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p) = g n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "by (simp add: g_def)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_ind_coprime [intro]: \"multiplicative_function (ind (coprime N))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (ind (coprime N))", "by (intro multiplicative_function_ind) auto"], ["", "lemma sum_divisors_moebius_mu_times_multiplicative_revisited:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1}\"\n  assumes \"multiplicative_function f\" \"n > 0\" \"N > 0\"\n  shows   \"(\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n           (\\<Prod>p\\<in>{p. p \\<in> prime_factors n \\<and> \\<not> (p dvd N)}. 1 - f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "have \"(\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n          (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d))", "using assms"], ["proof (prove)\nusing this:\n  multiplicative_function f\n  0 < n\n  0 < N\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d))", "by (intro sum.mono_neutral_cong_left) (auto simp: ind_def)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n  (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n  (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "have \"\\<dots> = (\\<Prod>p\\<in>prime_factors n. 1 - ind (coprime N) p * f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d)) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - ind (coprime N) p * f p)", "using assms"], ["proof (prove)\nusing this:\n  multiplicative_function f\n  0 < n\n  0 < N\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d)) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - ind (coprime N) p * f p)", "by (intro sum_divisors_moebius_mu_times_multiplicative)\n                   (auto intro: multiplicative_function_mult)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d)) =\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - ind (coprime N) p * f p)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d * (ind (coprime N) d * f d)) =\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - ind (coprime N) p * f p)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "from assms"], ["proof (chain)\npicking this:\n  multiplicative_function f\n  0 < n\n  0 < N", "have \"\\<dots> = (\\<Prod>p | p \\<in> prime_factors n \\<and> \\<not>(p dvd N). 1 - f p)\""], ["proof (prove)\nusing this:\n  multiplicative_function f\n  0 < n\n  0 < N\n\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. (1::'a) - ind (coprime N) p * f p) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "by (intro prod.mono_neutral_cong_right)\n       (auto simp: ind_def prime_factors_dvd coprime_commute dest: prime_imp_coprime)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - ind (coprime N) p * f p) =\n  (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n     (1::'a) - f p)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n  (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n     (1::'a) - f p)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n  (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n     (1::'a) - f p)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n       (1::'a) - f p)", "."], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n \\<and> coprime N d. moebius_mu d * f d) =\n  (\\<Prod>p\\<in>{p. p \\<in># prime_factorization n \\<and> \\<not> p dvd N}.\n     (1::'a) - f p)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Neutral element of the Dirichlet product\\<close>"], ["", "definition \"dirichlet_prod_neutral n = (if n = 1 then 1 else 0)\" for n :: nat"], ["", "lemma dirichlet_prod_neutral_intro: \n  fixes S :: \"nat \\<Rightarrow> complex\" and f :: \"nat \\<Rightarrow> nat \\<Rightarrow> complex\"\n  defines \"S \\<equiv> (\\<lambda>(n::nat). (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. (f k n)))\" \n  shows \"S(n) = (\\<Sum>k \\<in> {1..n}. f k n * dirichlet_prod_neutral (gcd k n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "let ?g = \"\\<lambda>k. (f k n)* (dirichlet_prod_neutral (gcd k n))\""], ["proof (state)\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "have zeros: \"\\<forall>k \\<in> {1..n} - {k. k \\<in> {1..n} \\<and> coprime k n}. ?g k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k\\<in>{1..n} - {k \\<in> {1..n}. coprime k n}.\n       f k n * dirichlet_prod_neutral (gcd k n) = 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<in> {1..n} - {k \\<in> {1..n}. coprime k n} \\<Longrightarrow>\n       f k n * dirichlet_prod_neutral (gcd k n) = 0", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<in> {1..n} - {k \\<in> {1..n}. coprime k n} \\<Longrightarrow>\n       f k n * dirichlet_prod_neutral (gcd k n) = 0", "assume \"k \\<in> {1..n} - {k \\<in> {1..n}. coprime k n}\""], ["proof (state)\nthis:\n  k \\<in> {1..n} - {k \\<in> {1..n}. coprime k n}\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       k \\<in> {1..n} - {k \\<in> {1..n}. coprime k n} \\<Longrightarrow>\n       f k n * dirichlet_prod_neutral (gcd k n) = 0", "then"], ["proof (chain)\npicking this:\n  k \\<in> {1..n} - {k \\<in> {1..n}. coprime k n}", "show \"(f k n) * dirichlet_prod_neutral (gcd k n) = 0\""], ["proof (prove)\nusing this:\n  k \\<in> {1..n} - {k \\<in> {1..n}. coprime k n}\n\ngoal (1 subgoal):\n 1. f k n * dirichlet_prod_neutral (gcd k n) = 0", "by (simp add: dirichlet_prod_neutral_def[of \"gcd k n\"] split: if_splits,presburger)"], ["proof (state)\nthis:\n  f k n * dirichlet_prod_neutral (gcd k n) = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k\\<in>{1..n} - {k \\<in> {1..n}. coprime k n}.\n     f k n * dirichlet_prod_neutral (gcd k n) = 0\n\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "have \"S n = (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. (f k n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. f k n)", "by (simp add: S_def)"], ["proof (state)\nthis:\n  S n = (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. f k n)\n\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "also"], ["proof (state)\nthis:\n  S n = (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. f k n)\n\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "have \"\\<dots> = sum ?g {k. k \\<in> {1..n} \\<and> coprime k n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. f k n) =\n    (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n.\n       f k n * dirichlet_prod_neutral (gcd k n))", "by (simp add: dirichlet_prod_neutral_def split: if_splits)"], ["proof (state)\nthis:\n  (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. f k n) =\n  (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n.\n     f k n * dirichlet_prod_neutral (gcd k n))\n\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "also"], ["proof (state)\nthis:\n  (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n. f k n) =\n  (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n.\n     f k n * dirichlet_prod_neutral (gcd k n))\n\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "have \"\\<dots> = sum ?g {1..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n.\n       f k n * dirichlet_prod_neutral (gcd k n)) =\n    (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "by (intro sum.mono_neutral_left, auto simp add: zeros)"], ["proof (state)\nthis:\n  (\\<Sum>k | k \\<in> {1..n} \\<and> coprime k n.\n     f k n * dirichlet_prod_neutral (gcd k n)) =\n  (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))\n\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "finally"], ["proof (chain)\npicking this:\n  S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "show ?thesis"], ["proof (prove)\nusing this:\n  S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))\n\ngoal (1 subgoal):\n 1. S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))", "by blast"], ["proof (state)\nthis:\n  S n = (\\<Sum>k = 1..n. f k n * dirichlet_prod_neutral (gcd k n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_neutral_right_neutral:\n \"dirichlet_prod f dirichlet_prod_neutral n = f n \" if \"n > 0\" for f :: \"nat \\<Rightarrow> complex\" and n"], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "fix d :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "assume \"d dvd n\""], ["proof (state)\nthis:\n  d dvd n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "then"], ["proof (chain)\npicking this:\n  d dvd n", "have eq: \"n = d \\<longleftrightarrow> n div d = 1\""], ["proof (prove)\nusing this:\n  d dvd n\n\ngoal (1 subgoal):\n 1. (n = d) = (n div d = 1)", "using div_self that dvd_mult_div_cancel"], ["proof (prove)\nusing this:\n  d dvd n\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> ?a div ?a = (1::?'a)\n  0 < n\n  ?a dvd ?b \\<Longrightarrow> ?a * (?b div ?a) = ?b\n\ngoal (1 subgoal):\n 1. (n = d) = (n div d = 1)", "by force"], ["proof (state)\nthis:\n  (n = d) = (n div d = 1)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "have \"f(d)*dirichlet_prod_neutral(n div d) = (if n = d then f(d) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f d * dirichlet_prod_neutral (n div d) = (if n = d then f d else 0)", "by (simp add: dirichlet_prod_neutral_def eq)"], ["proof (state)\nthis:\n  f d * dirichlet_prod_neutral (n div d) = (if n = d then f d else 0)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "}"], ["proof (state)\nthis:\n  ?d2 dvd n \\<Longrightarrow>\n  f ?d2 * dirichlet_prod_neutral (n div ?d2) =\n  (if n = ?d2 then f ?d2 else 0)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "note summand = this"], ["proof (state)\nthis:\n  ?d2 dvd n \\<Longrightarrow>\n  f ?d2 * dirichlet_prod_neutral (n div ?d2) =\n  (if n = ?d2 then f ?d2 else 0)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "have \"dirichlet_prod f dirichlet_prod_neutral n = \n          (\\<Sum>d | d dvd n. f(d)*dirichlet_prod_neutral(n div d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n =\n    (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d))", "unfolding dirichlet_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d)) =\n    (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d))", "by blast"], ["proof (state)\nthis:\n  dirichlet_prod f dirichlet_prod_neutral n =\n  (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "also"], ["proof (state)\nthis:\n  dirichlet_prod f dirichlet_prod_neutral n =\n  (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "have \"\\<dots> = (\\<Sum>d | d dvd n. (if n = d then f(d) else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d)) =\n    (\\<Sum>d | d dvd n. if n = d then f d else 0)", "using summand"], ["proof (prove)\nusing this:\n  ?d2 dvd n \\<Longrightarrow>\n  f ?d2 * dirichlet_prod_neutral (n div ?d2) =\n  (if n = ?d2 then f ?d2 else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d)) =\n    (\\<Sum>d | d dvd n. if n = d then f d else 0)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d)) =\n  (\\<Sum>d | d dvd n. if n = d then f d else 0)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. f d * dirichlet_prod_neutral (n div d)) =\n  (\\<Sum>d | d dvd n. if n = d then f d else 0)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "have \"\\<dots> = (\\<Sum>d | d = n. (if n = d then f(d) else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. if n = d then f d else 0) =\n    (\\<Sum>d | d = n. if n = d then f d else 0)", "using that"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. if n = d then f d else 0) =\n    (\\<Sum>d | d = n. if n = d then f d else 0)", "by (intro sum.mono_neutral_right, auto)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. if n = d then f d else 0) =\n  (\\<Sum>d | d = n. if n = d then f d else 0)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. if n = d then f d else 0) =\n  (\\<Sum>d | d = n. if n = d then f d else 0)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "have \"\\<dots> = f(n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d = n. if n = d then f d else 0) = f n", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>d | d = n. if n = d then f d else 0) = f n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f dirichlet_prod_neutral n = f n", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod f dirichlet_prod_neutral n = f n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "by simp"], ["proof (state)\nthis:\n  dirichlet_prod f dirichlet_prod_neutral n = f n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_neutral_left_neutral:\n \"dirichlet_prod dirichlet_prod_neutral f n = f n \" \n if \"n > 0\" for f :: \"nat \\<Rightarrow> complex\" and n"], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod dirichlet_prod_neutral f n = f n", "using dirichlet_prod_neutral_right_neutral[OF that, of f] \n        dirichlet_prod_commutes[of f dirichlet_prod_neutral]"], ["proof (prove)\nusing this:\n  dirichlet_prod f dirichlet_prod_neutral n = f n\n  dirichlet_prod f dirichlet_prod_neutral =\n  dirichlet_prod dirichlet_prod_neutral f\n\ngoal (1 subgoal):\n 1. dirichlet_prod dirichlet_prod_neutral f n = f n", "by argo"], ["", "corollary I_right_neutral_0:\n  fixes f :: \"nat \\<Rightarrow> complex\" \n  assumes \"f 0 = 0\"\n  shows \"dirichlet_prod f dirichlet_prod_neutral n = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "using assms dirichlet_prod_neutral_right_neutral"], ["proof (prove)\nusing this:\n  f 0 = 0\n  0 < ?n \\<Longrightarrow>\n  dirichlet_prod ?f dirichlet_prod_neutral ?n = ?f ?n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f dirichlet_prod_neutral n = f n", "by (cases n, simp, blast)"], ["", "subsection \\<open>Multiplicative functions\\<close>"], ["", "lemma mult_id: \"multiplicative_function id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function id", "by (simp add: multiplicative_function_def)"], ["", "lemma mult_moebius: \"multiplicative_function moebius_mu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function moebius_mu", "using Moebius_Mu.moebius_mu.multiplicative_function_axioms"], ["proof (prove)\nusing this:\n  multiplicative_function moebius_mu\n\ngoal (1 subgoal):\n 1. multiplicative_function moebius_mu", "by simp"], ["", "lemma mult_of_nat: \"multiplicative_function of_nat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function of_nat", "using multiplicative_function_def of_nat_0 of_nat_1 of_nat_mult"], ["proof (prove)\nusing this:\n  multiplicative_function ?f \\<equiv>\n  ?f 0 = (0::?'a) \\<and>\n  ?f 1 = (1::?'a) \\<and>\n  (\\<forall>a b.\n      1 < a \\<longrightarrow>\n      1 < b \\<longrightarrow>\n      coprime a b \\<longrightarrow> ?f (a * b) = ?f a * ?f b)\n  of_nat 0 = (0::?'a)\n  of_nat 1 = (1::?'a)\n  of_nat (?m * ?n) = of_nat ?m * of_nat ?n\n\ngoal (1 subgoal):\n 1. multiplicative_function of_nat", "by blast"], ["", "lemma mult_of_nat_c: \"completely_multiplicative_function of_nat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function of_nat", "by (simp add: completely_multiplicative_function_def)"], ["", "lemma completely_multiplicative_nonzero:\n  fixes f :: \"nat \\<Rightarrow> complex\"\n  assumes \"completely_multiplicative_function f\" \n          \"d \\<noteq> 0\"\n          \"\\<And>p. prime p \\<Longrightarrow> f(p) \\<noteq> 0\" \n  shows \"f(d) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f d \\<noteq> 0", "using assms(2)"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f d \\<noteq> 0", "proof (induction d rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n        n \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> f n \\<noteq> 0", "case (1 n)"], ["proof (state)\nthis:\n  \\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n        n \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> f n \\<noteq> 0", "then"], ["proof (chain)\npicking this:\n  \\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0\n  n \\<noteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f n \\<noteq> 0", "proof (cases \"n = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n = 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0\n 2. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "case True"], ["proof (state)\nthis:\n  n = 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n = 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0\n 2. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "then"], ["proof (chain)\npicking this:\n  n = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 1\n\ngoal (1 subgoal):\n 1. f n \\<noteq> 0", "using assms(1)"], ["proof (prove)\nusing this:\n  n = 1\n  completely_multiplicative_function f\n\ngoal (1 subgoal):\n 1. f n \\<noteq> 0", "unfolding completely_multiplicative_function_def"], ["proof (prove)\nusing this:\n  n = 1\n  f 0 = 0 \\<and>\n  f (Suc 0) = 1 \\<and>\n  (\\<forall>a b.\n      1 < a \\<longrightarrow> 1 < b \\<longrightarrow> f (a * b) = f a * f b)\n\ngoal (1 subgoal):\n 1. f n \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  f n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> 1", "obtain p where 2:\"prime p \\<and> p dvd n\""], ["proof (prove)\nusing this:\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        prime p \\<and> p dvd n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prime_factor_nat"], ["proof (prove)\nusing this:\n  n \\<noteq> 1\n  ?n \\<noteq> 1 \\<Longrightarrow> \\<exists>p. prime p \\<and> p dvd ?n\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        prime p \\<and> p dvd n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prime p \\<and> p dvd n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "then"], ["proof (chain)\npicking this:\n  prime p \\<and> p dvd n", "obtain a where 3: \"n = p * a\"  \"a \\<noteq> 0\""], ["proof (prove)\nusing this:\n  prime p \\<and> p dvd n\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>n = p * a; a \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using 1"], ["proof (prove)\nusing this:\n  prime p \\<and> p dvd n\n  \\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>n = p * a; a \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  n = p * a\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "then"], ["proof (chain)\npicking this:\n  n = p * a\n  a \\<noteq> 0", "have 4: \"f(a) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  n = p * a\n  a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f a \\<noteq> 0", "using 1"], ["proof (prove)\nusing this:\n  n = p * a\n  a \\<noteq> 0\n  \\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f a \\<noteq> 0", "using 2 prime_nat_iff"], ["proof (prove)\nusing this:\n  n = p * a\n  a \\<noteq> 0\n  \\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0\n  n \\<noteq> 0\n  prime p \\<and> p dvd n\n  prime ?n =\n  (1 < ?n \\<and>\n   (\\<forall>m. m dvd ?n \\<longrightarrow> m = 1 \\<or> m = ?n))\n\ngoal (1 subgoal):\n 1. f a \\<noteq> 0", "by fastforce"], ["proof (state)\nthis:\n  f a \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "have 5: \"f(p) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f p \\<noteq> 0", "using assms(3) 2"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow> f ?p \\<noteq> 0\n  prime p \\<and> p dvd n\n\ngoal (1 subgoal):\n 1. f p \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  f p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m<n. m \\<noteq> 0 \\<longrightarrow> f m \\<noteq> 0;\n     n \\<noteq> 0; n \\<noteq> 1\\<rbrakk>\n    \\<Longrightarrow> f n \\<noteq> 0", "from 3 4 5"], ["proof (chain)\npicking this:\n  n = p * a\n  a \\<noteq> 0\n  f a \\<noteq> 0\n  f p \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = p * a\n  a \\<noteq> 0\n  f a \\<noteq> 0\n  f p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f n \\<noteq> 0", "by (simp add: assms(1) completely_multiplicative_function.mult)"], ["proof (state)\nthis:\n  f n \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f n \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multipl_div: \n  fixes m k d1 d2 :: nat and f :: \"nat \\<Rightarrow> complex\"\n  assumes \"multiplicative_function f\" \"d1 dvd m\" \"d2 dvd k\" \"coprime m k\"\n  shows \"f ((m*k) div (d1*d2)) = f(m div d1) * f(k div d2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (m * k div (d1 * d2)) = f (m div d1) * f (k div d2)", "using assms"], ["proof (prove)\nusing this:\n  multiplicative_function f\n  d1 dvd m\n  d2 dvd k\n  coprime m k\n\ngoal (1 subgoal):\n 1. f (m * k div (d1 * d2)) = f (m div d1) * f (k div d2)", "unfolding multiplicative_function_def"], ["proof (prove)\nusing this:\n  f 0 = 0 \\<and>\n  f 1 = 1 \\<and>\n  (\\<forall>a b.\n      1 < a \\<longrightarrow>\n      1 < b \\<longrightarrow>\n      coprime a b \\<longrightarrow> f (a * b) = f a * f b)\n  d1 dvd m\n  d2 dvd k\n  coprime m k\n\ngoal (1 subgoal):\n 1. f (m * k div (d1 * d2)) = f (m div d1) * f (k div d2)", "using assms(1) multiplicative_function.mult_coprime"], ["proof (prove)\nusing this:\n  f 0 = 0 \\<and>\n  f 1 = 1 \\<and>\n  (\\<forall>a b.\n      1 < a \\<longrightarrow>\n      1 < b \\<longrightarrow>\n      coprime a b \\<longrightarrow> f (a * b) = f a * f b)\n  d1 dvd m\n  d2 dvd k\n  coprime m k\n  multiplicative_function f\n  \\<lbrakk>multiplicative_function ?f; coprime ?a ?b\\<rbrakk>\n  \\<Longrightarrow> ?f (?a * ?b) = ?f ?a * ?f ?b\n\ngoal (1 subgoal):\n 1. f (m * k div (d1 * d2)) = f (m div d1) * f (k div d2)", "by fastforce"], ["", "lemma multipl_div_mono: \n  fixes m k d :: nat and f :: \"nat \\<Rightarrow> complex\"\n  assumes \"completely_multiplicative_function f\" \n          \"d dvd k\" \"d > 0\" \n          \"\\<And>p. prime p \\<Longrightarrow> f(p) \\<noteq> 0\" \n  shows \"f (k div d) = f(k) div f(d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "have \"d \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "using assms(2,3)"], ["proof (prove)\nusing this:\n  d dvd k\n  0 < d\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "then"], ["proof (chain)\npicking this:\n  d \\<noteq> 0", "have nz: \"f(d) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f d \\<noteq> 0", "using assms(1,4) completely_multiplicative_nonzero"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n  completely_multiplicative_function f\n  prime ?p \\<Longrightarrow> f ?p \\<noteq> 0\n  \\<lbrakk>completely_multiplicative_function ?f; ?d \\<noteq> 0;\n   \\<And>p. prime p \\<Longrightarrow> ?f p \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> ?f ?d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f d \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  f d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "from assms(2,3)"], ["proof (chain)\npicking this:\n  d dvd k\n  0 < d", "obtain a where div: \"k = a * d \""], ["proof (prove)\nusing this:\n  d dvd k\n  0 < d\n\ngoal (1 subgoal):\n 1. (\\<And>a. k = a * d \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  k = a * d\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "have \"f (k div d) = f ((a*d) div d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (k div d) = f (a * d div d)", "using div"], ["proof (prove)\nusing this:\n  k = a * d\n\ngoal (1 subgoal):\n 1. f (k div d) = f (a * d div d)", "by simp"], ["proof (state)\nthis:\n  f (k div d) = f (a * d div d)\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "also"], ["proof (state)\nthis:\n  f (k div d) = f (a * d div d)\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "have \"\\<dots> = f(a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (a * d div d) = f a", "using assms(3) div"], ["proof (prove)\nusing this:\n  0 < d\n  k = a * d\n\ngoal (1 subgoal):\n 1. f (a * d div d) = f a", "by simp"], ["proof (state)\nthis:\n  f (a * d div d) = f a\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "also"], ["proof (state)\nthis:\n  f (a * d div d) = f a\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "have \"\\<dots> = f(a)*f(d) div f(d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f a = f a * f d / f d", "using nz"], ["proof (prove)\nusing this:\n  f d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f a = f a * f d / f d", "by auto"], ["proof (state)\nthis:\n  f a = f a * f d / f d\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "also"], ["proof (state)\nthis:\n  f a = f a * f d / f d\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "have \"\\<dots> = f(a*d) div f(d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f a * f d / f d = f (a * d) / f d", "by (simp add: div assms(1) completely_multiplicative_function.mult)"], ["proof (state)\nthis:\n  f a * f d / f d = f (a * d) / f d\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "also"], ["proof (state)\nthis:\n  f a * f d / f d = f (a * d) / f d\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "have \"\\<dots> = f (k) div f(d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (a * d) / f d = f k / f d", "using div"], ["proof (prove)\nusing this:\n  k = a * d\n\ngoal (1 subgoal):\n 1. f (a * d) / f d = f k / f d", "by simp"], ["proof (state)\nthis:\n  f (a * d) / f d = f k / f d\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "finally"], ["proof (chain)\npicking this:\n  f (k div d) = f k / f d", "show ?thesis"], ["proof (prove)\nusing this:\n  f (k div d) = f k / f d\n\ngoal (1 subgoal):\n 1. f (k div d) = f k / f d", "by simp"], ["proof (state)\nthis:\n  f (k div d) = f k / f d\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma comp_to_mult: \"completely_multiplicative_function f \\<Longrightarrow>\n       multiplicative_function f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f \\<Longrightarrow>\n    multiplicative_function f", "unfolding completely_multiplicative_function_def\n            multiplicative_function_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 = (0::'a) \\<and>\n    f (Suc 0) = (1::'a) \\<and>\n    (\\<forall>a b.\n        1 < a \\<longrightarrow>\n        1 < b \\<longrightarrow> f (a * b) = f a * f b) \\<Longrightarrow>\n    f 0 = (0::'a) \\<and>\n    f 1 = (1::'a) \\<and>\n    (\\<forall>a b.\n        1 < a \\<longrightarrow>\n        1 < b \\<longrightarrow>\n        coprime a b \\<longrightarrow> f (a * b) = f a * f b)", "by auto"], ["", "end"]]}