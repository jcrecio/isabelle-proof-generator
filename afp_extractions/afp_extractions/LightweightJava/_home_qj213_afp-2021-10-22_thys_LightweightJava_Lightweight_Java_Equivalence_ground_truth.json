{"file_name": "/home/qj213/afp-2021-10-22/thys/LightweightJava/Lightweight_Java_Equivalence.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LightweightJava", "problem_names": ["lemma map_id[simp]: \"map id list = list\"", "lemma id_map_two[simp]: \"map (\\<lambda>(x,y). (x,y)) list = list\"", "lemma id_image_two[simp]: \"(\\<lambda>(x,y). (x,y)) ` set list = set list\"", "lemma map_fst[simp]: \"map (\\<lambda>(x, y). x) list = map fst list\"", "lemma map_snd[simp]: \"map (\\<lambda>(x, y). y) list = map snd list\"", "lemma zip_map_map_two [simp]: \"zip (map fst list) (map snd list) = list\"", "lemma concat_map_singlton [simp]: \"concat (map (\\<lambda>e. [e]) list) = list\"", "lemma list_all_map_P [simp]: \"list_all (\\<lambda>b. b) (map (\\<lambda>x. P x) list) = (\\<forall>x \\<in> set list. P x)\"", "lemma dom_single[simp]: \"a : dom (Map.empty(k \\<mapsto> v)) = (a = k)\"", "lemma predicted_lu[rule_format, simp]:\n  \"x \\<in> set list \\<longrightarrow> map_of (map (\\<lambda>key. (key, value)) list) x = Some value\"", "lemma key_in_map1[simp]: \"k \\<notin> dom M' \\<Longrightarrow> (M ++ M') k = M k\"", "lemma forall_cons [rule_format]: \"(\\<forall>x \\<in> set (s#S). P x) \\<and> y \\<in> set S \\<longrightarrow> P y\"", "lemma mem_cong[rule_format]:\n  \"x \\<in> set list \\<longrightarrow> (f x \\<in> set (map f list))\"", "lemma forall_union: \"\\<lbrakk>\\<forall>a \\<in> dom A. P (A a); \\<forall>b \\<in> dom B. P (B b)\\<rbrakk> \\<Longrightarrow> \\<forall>x \\<in> dom A \\<union> dom B. P ((B ++ A) x)\"", "lemma [simp]: \"(class_name cld dcl) = (class_name_f cld = dcl)\"", "lemma [simp]: \"(superclass_name cld cl) = (superclass_name_f cld = cl)\"", "lemma [simp]: \"(class_fields cld fds) = (class_fields_f cld = fds)\"", "lemma [simp]: \"(class_methods cld fds) = (class_methods_f cld = fds)\"", "lemma [simp]: \"(method_name md m) = (method_name_f md = m)\"", "lemma distinct_names_map[rule_format]:\n  \"(\\<forall>x\\<in>set cld_dcl_list. case_prod (\\<lambda>cld. (=) (class_name_f cld)) x) \\<and> distinct (map snd cld_dcl_list)\n      \\<longrightarrow> distinct_names_f (map fst cld_dcl_list)\"", "lemma [simp]: \"(distinct_names P) = (distinct_names_f P)\"", "lemma [simp]: \"(find_cld P ctx fqn ctxcld_opt) = (find_cld_f P ctx fqn = ctxcld_opt)\"", "lemma find_to_mem[rule_format]:\n  \"find_cld_f P ctx fqn = Some (ctx', cld) \\<longrightarrow> cld : set P\"", "lemma find_cld_name_eq[rule_format]:\n  \"\\<forall>ctxcld. find_cld_f P ctx (fqn_def dcl) = Some ctxcld \\<longrightarrow> (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) = ctxcld)\"", "lemma [simp]: \"(find_type P ctx cl ty_opt) = (find_type_f P ctx cl = ty_opt)\"", "lemma mem_remove: \"cld : set P \\<Longrightarrow> length (remove1 cld P) < length P\"", "lemma finite_program[rule_format, intro]:\n  \"\\<forall>P cld. (\\<exists>ctx ctx' fqn. find_cld_f P ctx fqn = Some (ctx', cld)) \\<longrightarrow>\n      length (remove1 cld P) < length P\"", "lemma path_length_eq[rule_format]:\n  \"path_length P ctx cl nn \\<Longrightarrow> \\<forall>nn'. path_length P ctx cl nn' \\<longrightarrow> nn = nn'\"", "lemma fpr_termination[iff]:\n  \"\\<forall>P cld ctx ctx' fqn. find_cld_f P ctx fqn = Some (ctx', cld) \\<and> acyclic_clds P\n       \\<longrightarrow> The (path_length P ctx' (superclass_name_f cld)) < The (path_length P ctx (cl_fqn fqn))\"", "lemma [simp]: \"(find_path_rec P ctx cl path path_opt) = (find_path_rec_f P ctx cl path = path_opt)\"", "lemma [simp]: \"(find_path P ctx cl path_opt) = (find_path_f P ctx cl = path_opt)\"", "lemma [simp]: \"(find_path_ty P ty ctxclds_opt) = (find_path_ty_f P ty = ctxclds_opt)\"", "lemma cl_f_list_map: \"map (case_fd (\\<lambda>cl f. f)) (map (\\<lambda>(x, y). fd_def x y) cl_f_list) = map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list\"", "lemma fip_ind_to_f: \"\\<forall>fs. fields_in_path clds fs \\<longrightarrow> fields_in_path_f clds = fs\"", "lemma fd_map_split: \"map (case_fd (\\<lambda>cl f. f)) (map (\\<lambda>(x, y). fd_def x y) list) = map (\\<lambda>(cl, f). f) list\"", "lemma fd_map_split': \"map (\\<lambda>(x, y). fd_def x y) (map (case_fd Pair) list) = list\"", "lemma fd_map_split'': \"map ((\\<lambda>(x, y). fd_def x y) \\<circ> case_fd Pair) list = list\"", "lemma [simp]: \"\\<forall>fs. (fields_in_path ctxclds fs) = (fields_in_path_f ctxclds = fs)\"", "lemma [simp]: \"\\<forall>fs_opt. (fields P ty fs_opt) = (fields_f P ty = fs_opt)\"", "lemma meth_def_map[THEN mp]:\n  \"(\\<forall>x \\<in> set list. (\\<lambda>(md, cl, m, vds, mb). md = meth_def_def (meth_sig_def cl m vds) mb) x)\n     \\<longrightarrow> map (case_meth_def (\\<lambda>ms mb. case ms of meth_sig_def cl m vds \\<Rightarrow> m)) (map (\\<lambda>(md, cl, m, vds, mb). md) list) = map (\\<lambda>(md, cl, m, vds, mb). m) list\"", "lemma meth_def_map':\n  \"map ((\\<lambda>(md, cl, m, vds, mb). md) \\<circ> (\\<lambda>md. case md of meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow> (md, cl, m, vds, mb))) list = list\"", "lemma [simp]: \"\\<forall>meths. (methods_in_path clds meths) = (methods_in_path_f clds = meths)\"", "lemma [simp]: \"(methods P ty meths) = (methods_f P ty = Some meths)\"", "lemma [simp]: \"(ftype_in_fds P ctx fds f ty_opt) = (ftype_in_fds_f P ctx fds f = ty_opt)\"", "lemma [simp]: \"(ftype_in_path P ctxclds f ty_opt) = (ftype_in_path_f P ctxclds f = ty_opt)\"", "lemma [simp]: \"(ftype P ty f ty') = (ftype_f P ty f = Some ty')\"", "lemma [simp]: \"(find_meth_def_in_list mds m md_opt) = (find_meth_def_in_list_f mds m = md_opt)\"", "lemma [simp]: \"(find_meth_def_in_path ctxclds m ctxmeth_def_opt) = (find_meth_def_in_path_f ctxclds m = ctxmeth_def_opt)\"", "lemma [simp]: \"(find_meth_def P ty m ctxmd_opt) = (find_meth_def_f P ty m = ctxmd_opt)\"", "lemma lift_opts_ind[rule_format]:\n  \"(\\<forall>x\\<in>set list. (\\<lambda>(cl, var, ty). find_type_f P ctx cl = Some ty) x)\n       \\<longrightarrow> lift_opts (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk) \\<circ> (\\<lambda>(cl, var, ty). vd_def cl var)) list) = Some (map (\\<lambda>(cl, var, ty). ty) list)\"", "lemma find_md_m_match'[rule_format]:\n  \"find_meth_def_in_list_f mds m = Some (meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow> m' = m\"", "lemma find_md_m_match:\n  \"find_meth_def_in_path_f path m = Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow> m' = m\"", "lemma vds_map_length:\n  \"length (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) = length vds\"", "lemma lift_opts_length[rule_format]:\n  \"\\<forall>tys. lift_opts ty_opts = Some tys \\<longrightarrow> length ty_opts = length tys\"", "lemma vds_tys_length_eq[rule_format]:\n  \"lift_opts (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) = Some tys \\<longrightarrow> length vds = length tys\"", "lemma vds_tys_length_eq'[rule_format]:\n  \"\\<forall>tys. length vds = length tys \\<longrightarrow> vds = map (\\<lambda>(cl, var, ty). vd_def cl var) (map (\\<lambda>(vd, ty). case vd of vd_def cl var \\<Rightarrow> (cl, var, ty)) (zip vds tys))\"", "lemma vds_tys_length_eq''[rule_format]:\n  \"\\<forall>vds. length vds = length tys \\<longrightarrow> tys = map ((\\<lambda>(cl, var, ty). ty) \\<circ> (\\<lambda>(vd, ty). case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))) (zip vds tys)\"", "lemma lift_opts_find_type[rule_format]:\n  \"\\<forall>tys. lift_opts (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) = Some tys\n      \\<longrightarrow> (\\<forall>(vd, ty) \\<in> set (zip vds tys). case vd of vd_def cl var \\<Rightarrow> find_type_f P ctx cl = Some ty)\"", "lemma [simp]: \"(mtype P ty m mty) = (mtype_f P ty m = Some mty)\"", "lemma class_name_mem_map[rule_format]:\n\"(ctx, cld, class_name_f cld) \\<in> set ctx_cld_dcl_list\n       \\<Longrightarrow> (ctx, class_name_f cld)\n          \\<in> ((\\<lambda>(ctx, cld). (ctx, class_name_f cld)) \\<circ> (\\<lambda>(ctx, cld, dcl). (ctx, cld))) `\n            set ctx_cld_dcl_list\"", "lemma map_map_three:\n  \" ctxclds = map ((\\<lambda>(ctx, cld, dcl). (ctx, cld)) \\<circ> (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld))) ctxclds\"", "lemma mem_el_map[rule_format]:\n  \"(ctx, dcl) \\<in> set ctxclds\n       \\<Longrightarrow> (ctx, class_name_f dcl)\n          \\<in> (\\<lambda>(ctx_XXX, cld_XXX, y). (ctx_XXX, y)) `\n            set (map (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld)) ctxclds)\"", "lemma [simp]: \"(sty_one P ty ty') = (is_sty_one P ty ty' = Some True)\"", "lemma path_append[rule_format]:\n  \"find_path_rec_f P ctx cl path' = Some path \\<Longrightarrow> \\<exists>path''. path = path' @ path''\"", "lemma all_in_path_found'[rule_format]:\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n      (\\<forall>ctxcld \\<in> set path. ctxcld \\<in> set path' \\<or> (\\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld))\"", "lemma all_in_path_found:\n  \"\\<lbrakk>find_path_f P ctx cl = Some path; ctxcld \\<in> set path\\<rbrakk> \\<Longrightarrow> \\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld\"", "lemma fpr_target_is_head':\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n     (\\<forall>fqn ctxcld. cl = cl_fqn fqn \\<and> find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow>\n          (\\<exists>path''. path = path' @ ctxcld # path''))\"", "lemma fpr_target_is_head:\n  \"find_path_f P ctx (cl_fqn fqn) = Some path \\<Longrightarrow> \\<exists>ctxcld. find_cld_f P ctx fqn = Some ctxcld \\<and> (\\<exists>path''. path = ctxcld # path'')\"", "lemma fpr_sub_path':\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n     (\\<forall>fqn ctxcld path'' path_fqn.\n         cl = cl_fqn fqn \\<and> find_cld_f P ctx fqn = Some ctxcld \\<and>\n         find_path_rec_f P (fst ctxcld) (superclass_name_f (snd ctxcld)) path'' = Some path_fqn \\<longrightarrow>\n              (\\<exists>path'''. path_fqn = path'' @ path''' \\<and> path = path' @ ctxcld # path'''))\"", "lemma fpr_sub_path:\n  \"\\<lbrakk>find_path_f P ctx (cl_fqn fqn) = Some path; find_cld_f P ctx fqn = Some ctxcld;\n    find_path_f P (fst ctxcld) (superclass_name_f (snd ctxcld)) = Some path'\\<rbrakk>\n       \\<Longrightarrow> path = ctxcld # path'\"", "lemma fpr_sub_path_simp:\n  \"\\<lbrakk>find_path_rec_f P ctx (superclass_name_f cld) path'' = Some path_fqn; find_cld_f P ctx fqn = Some (ctx, cld); acyclic_clds P;\n    find_path_rec_f P ctx (superclass_name_f cld) (path' @ [(ctx, cld)]) = Some path\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path'''. path_fqn = path'' @ path''' \\<and> path = path' @ (ctx, cld) # path'''\"", "lemma fpr_same_suffix'[rule_format]:\n  \"find_path_rec_f P ctx cl prefix = Some path \\<longrightarrow>\n     (\\<forall>suffix prefix'. path = prefix @ suffix \\<longrightarrow>\n          find_path_rec_f P ctx cl prefix' = Some (prefix' @ suffix))\"", "lemma fpr_same_suffix:\n  \"find_path_rec_f P ctx cl prefix = Some path \\<longrightarrow>\n     (\\<forall>suffix prefix' suffix'. path = prefix @ suffix \\<and>\n          find_path_rec_f P ctx cl prefix' = Some (prefix' @ suffix')\n             \\<longrightarrow> suffix = suffix')\"", "lemma fpr_mid_path'[rule_format]:\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n     (\\<forall>ctxcld \\<in> set path.\n         ctxcld \\<in> set path' \\<or>\n         (\\<forall>path_fqn. find_path_rec_f P (fst ctxcld) (cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' = Some path_fqn \\<longrightarrow>\n              (\\<forall>path'''. path_fqn = path'' @ path''' \\<longrightarrow> (\\<exists>path_rest. path = path_rest @ path'''))))\"", "lemma fpr_mid_path:\n  \"\\<lbrakk>find_path_f P ctx cl = Some path; (ctx', cld') \\<in> set path;\n    find_path_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) = Some path'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = path'' @ path'\"", "lemma fpr_first_in_path'[rule_format]:\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n      (\\<forall>fqn ctxcld. cl = cl_fqn fqn \\<and> find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow> ctxcld \\<in> set path)\"", "lemma fpr_first_in_path:\n  \"\\<lbrakk>find_path_f P ctx (cl_fqn fqn) = Some path; find_cld_f P ctx fqn = Some ctxcld\\<rbrakk> \\<Longrightarrow> ctxcld \\<in> set path\"", "lemma cld_for_path:\n  \"find_path_f P ctx (cl_fqn fqn) = Some path \\<Longrightarrow> \\<exists>ctxcld. find_cld_f P ctx fqn = Some ctxcld\"", "lemma ctx_cld_ctx_dcl[rule_format]:\n  \"(ctx, cld_def dcl cl fds mds) \\<in> set path \\<longrightarrow> (ctx, dcl) \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ` set path\"", "lemma ctx_dcl_ctx_cld[rule_format]:\n  \"(ctx, dcl) \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ` set path \\<longrightarrow> (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) \\<in> set path)\"", "lemma ctx_dcl_mem_path:\n  \"find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path \\<Longrightarrow> (ctx, dcl) \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ` set path\"", "lemma sty_reflexiveI:\n  \"is_sty_one P ty ty' = Some True \\<Longrightarrow> is_sty_one P ty ty = Some True\"", "lemma sty_transitiveI:\n  \"\\<lbrakk>is_sty_one P ty ty' = Some True; is_sty_one P ty' ty'' = Some True\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty ty'' = Some True\"", "lemma lift_opts_exists:\n  \"\\<forall>x\\<in>set ty_ty'_list. (\\<lambda>(ty, ty'). is_sty_one P ty ty' = Some True) x \\<Longrightarrow> \\<exists>bools. lift_opts (map (\\<lambda>(ty, ty'). is_sty_one P ty ty') ty_ty'_list) = Some bools\"", "lemma lift_opts_all_true[rule_format]:\n  \"\\<forall>bools. (\\<forall>x\\<in>set ty_ty'_list. (\\<lambda>(ty, ty'). is_sty_one P ty ty' = Some True) x) \\<and>\n            lift_opts (map (\\<lambda>(ty, ty'). is_sty_one P ty ty') ty_ty'_list) = Some bools\n                  \\<longrightarrow> list_all id bools\"", "lemma tys_tys'_list: \"\\<And>bools ty ty'. \\<lbrakk>lift_opts (map (\\<lambda>(x, y). is_sty_one P x y) tys_tys'_list) = Some bools; length tys = length tys'; list_all id bools; (ty, ty') \\<in> set tys_tys'_list\\<rbrakk> \\<Longrightarrow> is_sty_one P ty ty' = Some True\"", "lemma [simp]: \"(sty_many P tys tys') = (is_sty_many P tys tys' = Some True)\"", "lemma [simp]: \"(\\<forall>x\\<in>set s_s'_list. case x of (s_XXX, s_') \\<Rightarrow> tr_s T s_XXX s_' \\<and> tr_s_f T s_XXX = s_') \\<longrightarrow>\n       tr_ss_f T (map fst s_s'_list) = map snd s_s'_list\"", "lemma [simp]: \"(\\<forall>x\\<in>set y_y'_list. case_prod (\\<lambda>y_XXX. (=) (case T y_XXX of None \\<Rightarrow> y_XXX | Some x' \\<Rightarrow> x')) x) \\<longrightarrow> map (tr_x T) (map fst y_y'_list) = map snd y_y'_list\"", "lemma set_zip_tr[simp]: \"(s, s') \\<in> set (zip ss (tr_ss_f T ss)) \\<longrightarrow> s' = tr_s_f T s\"", "lemma [iff]: \"length ss = length (tr_ss_f T ss)\"", "lemma tr_ss_map:\n  \"tr_ss_f T (map fst s_s'_list) = map snd s_s'_list \\<and> (\\<forall>x\\<in>set s_s'_list. case_prod (tr_s T) x) \\<and>\n   (a, b) \\<in> set s_s'_list \\<longrightarrow> tr_s T a (tr_s_f T a)\"", "lemma tr_f_to_rel: \"\\<forall>s'. tr_s_f T s = s' \\<longrightarrow> tr_s T s s'\"", "lemma tr_rel_f_eq: \"((tr_s T s s') = (tr_s_f T s = s'))\""], "translations": [["", "lemma map_id[simp]: \"map id list = list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map id list = list", "by (induct list) auto"], ["", "lemma id_map_two[simp]: \"map (\\<lambda>(x,y). (x,y)) list = list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>(x, y). (x, y)) list = list", "by (induct list) auto"], ["", "lemma id_image_two[simp]: \"(\\<lambda>(x,y). (x,y)) ` set list = set list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). (x, y)) ` set list = set list", "by (induct list) auto"], ["", "lemma map_fst[simp]: \"map (\\<lambda>(x, y). x) list = map fst list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>(x, y). x) list = map fst list", "by (induct list) auto"], ["", "lemma map_snd[simp]: \"map (\\<lambda>(x, y). y) list = map snd list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>(x, y). y) list = map snd list", "by (induct list) auto"], ["", "lemma zip_map_map_two [simp]: \"zip (map fst list) (map snd list) = list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zip (map fst list) (map snd list) = list", "by (induct list) auto"], ["", "lemma concat_map_singlton [simp]: \"concat (map (\\<lambda>e. [e]) list) = list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat (map (\\<lambda>e. [e]) list) = list", "by (induct list) simp_all"], ["", "lemma list_all_map_P [simp]: \"list_all (\\<lambda>b. b) (map (\\<lambda>x. P x) list) = (\\<forall>x \\<in> set list. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (\\<lambda>b. b) (map P list) = (\\<forall>x\\<in>set list. P x)", "by (induct list) simp_all"], ["", "lemma dom_single[simp]: \"a : dom (Map.empty(k \\<mapsto> v)) = (a = k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> dom [k \\<mapsto> v]) = (a = k)", "by (simp add: dom_def)"], ["", "lemma predicted_lu[rule_format, simp]:\n  \"x \\<in> set list \\<longrightarrow> map_of (map (\\<lambda>key. (key, value)) list) x = Some value\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set list \\<longrightarrow>\n    map_of (map (\\<lambda>key. (key, value)) list) x = Some value", "by (induct list) auto"], ["", "lemma key_in_map1[simp]: \"k \\<notin> dom M' \\<Longrightarrow> (M ++ M') k = M k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<notin> dom M' \\<Longrightarrow> (M ++ M') k = M k", "apply (subgoal_tac \"M' k = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>k \\<notin> dom M'; M' k = None\\<rbrakk>\n    \\<Longrightarrow> (M ++ M') k = M k\n 2. k \\<notin> dom M' \\<Longrightarrow> M' k = None", "apply (simp add: map_add_def, force simp add: domI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma forall_cons [rule_format]: \"(\\<forall>x \\<in> set (s#S). P x) \\<and> y \\<in> set S \\<longrightarrow> P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set (s # S). P x) \\<and> y \\<in> set S \\<longrightarrow>\n    P y", "by (induct_tac S) simp_all"], ["", "lemma mem_cong[rule_format]:\n  \"x \\<in> set list \\<longrightarrow> (f x \\<in> set (map f list))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set list \\<longrightarrow> f x \\<in> set (map f list)", "by (induct list) auto"], ["", "lemma forall_union: \"\\<lbrakk>\\<forall>a \\<in> dom A. P (A a); \\<forall>b \\<in> dom B. P (B b)\\<rbrakk> \\<Longrightarrow> \\<forall>x \\<in> dom A \\<union> dom B. P ((B ++ A) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a\\<in>dom A. P (A a);\n     \\<forall>b\\<in>dom B. P (B b)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>dom A \\<union> dom B. P ((B ++ A) x)", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>a\\<in>dom A. P (A a);\n        \\<forall>b\\<in>dom B. P (B b); A x = Some y\\<rbrakk>\n       \\<Longrightarrow> P ((B ++ A) x)\n 2. \\<And>x y.\n       \\<lbrakk>\\<forall>a\\<in>dom A. P (A a);\n        \\<forall>b\\<in>dom B. P (B b); B x = Some y\\<rbrakk>\n       \\<Longrightarrow> P ((B ++ A) x)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>a\\<in>dom A. P (A a);\n        \\<forall>b\\<in>dom B. P (B b); B x = Some y\\<rbrakk>\n       \\<Longrightarrow> P ((B ++ A) x)", "apply(drule_tac x = x in bspec, simp add: domI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>a\\<in>dom A. P (A a); B x = Some y;\n        P (B x)\\<rbrakk>\n       \\<Longrightarrow> P ((B ++ A) x)", "apply(case_tac \"A x = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>a\\<in>dom A. P (A a); B x = Some y; P (B x);\n        A x = None\\<rbrakk>\n       \\<Longrightarrow> P ((B ++ A) x)\n 2. \\<And>x y.\n       \\<lbrakk>\\<forall>a\\<in>dom A. P (A a); B x = Some y; P (B x);\n        A x \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> P ((B ++ A) x)", "apply(force simp add: map_add_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>a\\<in>dom A. P (A a); B x = Some y; P (B x);\n        A x \\<noteq> None\\<rbrakk>\n       \\<Longrightarrow> P ((B ++ A) x)", "by (force)"], ["", "(* END: HELPER FUNCTIONS *)"], ["", "definition\nclass_name_f :: \"cld \\<Rightarrow> dcl\"\nwhere\n\"class_name_f cld =\n  (case cld of cld_def dcl cl fds mds \\<Rightarrow> dcl)\""], ["", "lemma [simp]: \"(class_name cld dcl) = (class_name_f cld = dcl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_name cld dcl = (class_name_f cld = dcl)", "by (force simp add: class_name_f_def split: cld.splits\n          intro: class_nameI elim: class_name.cases)"], ["", "definition\nsuperclass_name_f :: \"cld \\<Rightarrow> cl\"\nwhere\n\"superclass_name_f cld =\n  (case cld of cld_def dcl cl fds mds \\<Rightarrow> cl)\""], ["", "lemma [simp]: \"(superclass_name cld cl) = (superclass_name_f cld = cl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. superclass_name cld cl = (superclass_name_f cld = cl)", "by (force simp add: superclass_name_f_def split: cld.splits\n          intro: superclass_nameI elim: superclass_name.cases)"], ["", "definition\nclass_fields_f :: \"cld \\<Rightarrow> fds\"\nwhere\n\"class_fields_f cld =\n  (case cld of cld_def dcl cl fds mds \\<Rightarrow> fds)\""], ["", "lemma [simp]: \"(class_fields cld fds) = (class_fields_f cld = fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_fields cld fds = (class_fields_f cld = fds)", "by (force simp add: class_fields_f_def split: cld.splits\n          intro: class_fieldsI elim: class_fields.cases)"], ["", "definition\nclass_methods_f :: \"cld \\<Rightarrow> meth_defs\"\nwhere\n\"class_methods_f cld =\n  (case cld of cld_def dcl cl fds mds \\<Rightarrow> mds)\""], ["", "lemma [simp]: \"(class_methods cld fds) = (class_methods_f cld = fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class_methods cld fds = (class_methods_f cld = fds)", "by (force simp add: class_methods_f_def split: cld.splits\n          intro: class_methodsI elim: class_methods.cases)"], ["", "definition\nmethod_name_f :: \"meth_def \\<Rightarrow> meth\"\nwhere\n\"method_name_f md =\n  (case md of meth_def_def meth_sig meth_body \\<Rightarrow>\n  (case meth_sig of meth_sig_def cl meth vds \\<Rightarrow> meth))\""], ["", "lemma [simp]: \"(method_name md m) = (method_name_f md = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. method_name md m = (method_name_f md = m)", "by (force simp add: method_name_f_def split: meth_def.splits meth_sig.splits\n          intro: method_nameI elim: method_name.cases)"], ["", "definition\ndistinct_names_f :: \"P \\<Rightarrow> bool\"\nwhere\n\"distinct_names_f P =\n  (distinct (map class_name_f P))\""], ["", "lemma distinct_names_map[rule_format]:\n  \"(\\<forall>x\\<in>set cld_dcl_list. case_prod (\\<lambda>cld. (=) (class_name_f cld)) x) \\<and> distinct (map snd cld_dcl_list)\n      \\<longrightarrow> distinct_names_f (map fst cld_dcl_list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set cld_dcl_list.\n        case x of (cld, x) \\<Rightarrow> class_name_f cld = x) \\<and>\n    distinct (map snd cld_dcl_list) \\<longrightarrow>\n    distinct_names_f (map fst cld_dcl_list)", "apply(induct cld_dcl_list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>x\\<in>set [].\n        case x of (cld, a) \\<Rightarrow> class_name_f cld = a) \\<and>\n    distinct (map snd []) \\<longrightarrow>\n    distinct_names_f (map fst [])\n 2. \\<And>a cld_dcl_list.\n       (\\<forall>x\\<in>set cld_dcl_list.\n           case x of (cld, a) \\<Rightarrow> class_name_f cld = a) \\<and>\n       distinct (map snd cld_dcl_list) \\<longrightarrow>\n       distinct_names_f (map fst cld_dcl_list) \\<Longrightarrow>\n       (\\<forall>x\\<in>set (a # cld_dcl_list).\n           case x of (cld, a) \\<Rightarrow> class_name_f cld = a) \\<and>\n       distinct (map snd (a # cld_dcl_list)) \\<longrightarrow>\n       distinct_names_f (map fst (a # cld_dcl_list))", "apply(clarsimp simp add: distinct_names_f_def)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a cld_dcl_list aa b.\n       \\<lbrakk>distinct (map (class_name_f \\<circ> fst) cld_dcl_list);\n        \\<forall>x\\<in>set cld_dcl_list.\n           case x of (cld, x) \\<Rightarrow> class_name_f cld = x;\n        class_name_f aa \\<notin> snd ` set cld_dcl_list;\n        distinct (map snd cld_dcl_list); class_name_f a = class_name_f aa;\n        (aa, b) \\<in> set cld_dcl_list\\<rbrakk>\n       \\<Longrightarrow> False", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]: \"(distinct_names P) = (distinct_names_f P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_names P = distinct_names_f P", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct_names P \\<Longrightarrow> distinct_names_f P\n 2. distinct_names_f P \\<Longrightarrow> distinct_names P", "apply(erule distinct_names.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Pa cld_dcl_list.\n       \\<lbrakk>P = Pa;\n        Pa = map (\\<lambda>(cld_XXX, dcl_XXX). cld_XXX) cld_dcl_list;\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(cld_XXX, dcl_XXX). class_name cld_XXX dcl_XXX)\n           cld_dcl_list);\n        distinct\n         (map (\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX) cld_dcl_list)\\<rbrakk>\n       \\<Longrightarrow> distinct_names_f P\n 2. distinct_names_f P \\<Longrightarrow> distinct_names P", "apply(clarsimp simp add: distinct_names_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct_names_f P \\<Longrightarrow> distinct_names P", "apply(simp add: distinct_names_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map class_name_f P) \\<Longrightarrow> distinct_names P", "apply(rule_tac cld_dcl_list = \"map (\\<lambda>cld. (cld, class_name_f cld)) P\" in dn_defI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. distinct (map class_name_f P) \\<Longrightarrow>\n    P =\n    map (\\<lambda>(cld_XXX, dcl_XXX). cld_XXX)\n     (map (\\<lambda>cld. (cld, class_name_f cld)) P)\n 2. distinct (map class_name_f P) \\<Longrightarrow>\n    list_all (\\<lambda>f. f)\n     (map (\\<lambda>(cld_XXX, dcl_XXX). class_name cld_XXX dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))\n 3. distinct (map class_name_f P) \\<Longrightarrow>\n    distinct\n     (map (\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. distinct (map class_name_f P) \\<Longrightarrow>\n    P =\n    map ((\\<lambda>(cld_XXX, dcl_XXX). cld_XXX) \\<circ>\n         (\\<lambda>cld. (cld, class_name_f cld)))\n     P\n 2. distinct (map class_name_f P) \\<Longrightarrow>\n    list_all (\\<lambda>f. f)\n     (map (\\<lambda>(cld_XXX, dcl_XXX). class_name cld_XXX dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))\n 3. distinct (map class_name_f P) \\<Longrightarrow>\n    distinct\n     (map (\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))", "apply(induct P)"], ["proof (prove)\ngoal (4 subgoals):\n 1. distinct (map class_name_f []) \\<Longrightarrow>\n    [] =\n    map ((\\<lambda>(cld_XXX, dcl_XXX). cld_XXX) \\<circ>\n         (\\<lambda>cld. (cld, class_name_f cld)))\n     []\n 2. \\<And>a P.\n       \\<lbrakk>distinct (map class_name_f P) \\<Longrightarrow>\n                P =\n                map ((\\<lambda>(cld_XXX, dcl_XXX). cld_XXX) \\<circ>\n                     (\\<lambda>cld. (cld, class_name_f cld)))\n                 P;\n        distinct (map class_name_f (a # P))\\<rbrakk>\n       \\<Longrightarrow> a # P =\n                         map ((\\<lambda>(cld_XXX, dcl_XXX). cld_XXX) \\<circ>\n                              (\\<lambda>cld. (cld, class_name_f cld)))\n                          (a # P)\n 3. distinct (map class_name_f P) \\<Longrightarrow>\n    list_all (\\<lambda>f. f)\n     (map (\\<lambda>(cld_XXX, dcl_XXX). class_name cld_XXX dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))\n 4. distinct (map class_name_f P) \\<Longrightarrow>\n    distinct\n     (map (\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a P.\n       \\<lbrakk>distinct (map class_name_f P) \\<Longrightarrow>\n                P =\n                map ((\\<lambda>(cld_XXX, dcl_XXX). cld_XXX) \\<circ>\n                     (\\<lambda>cld. (cld, class_name_f cld)))\n                 P;\n        distinct (map class_name_f (a # P))\\<rbrakk>\n       \\<Longrightarrow> a # P =\n                         map ((\\<lambda>(cld_XXX, dcl_XXX). cld_XXX) \\<circ>\n                              (\\<lambda>cld. (cld, class_name_f cld)))\n                          (a # P)\n 2. distinct (map class_name_f P) \\<Longrightarrow>\n    list_all (\\<lambda>f. f)\n     (map (\\<lambda>(cld_XXX, dcl_XXX). class_name cld_XXX dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))\n 3. distinct (map class_name_f P) \\<Longrightarrow>\n    distinct\n     (map (\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct (map class_name_f P) \\<Longrightarrow>\n    list_all (\\<lambda>f. f)\n     (map (\\<lambda>(cld_XXX, dcl_XXX). class_name cld_XXX dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))\n 2. distinct (map class_name_f P) \\<Longrightarrow>\n    distinct\n     (map (\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map class_name_f P) \\<Longrightarrow>\n    distinct\n     (map (\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX)\n       (map (\\<lambda>cld. (cld, class_name_f cld)) P))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map class_name_f P) \\<Longrightarrow>\n    distinct\n     (map ((\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX) \\<circ>\n           (\\<lambda>cld. (cld, class_name_f cld)))\n       P)", "apply(induct P)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct (map class_name_f []) \\<Longrightarrow>\n    distinct\n     (map ((\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX) \\<circ>\n           (\\<lambda>cld. (cld, class_name_f cld)))\n       [])\n 2. \\<And>a P.\n       \\<lbrakk>distinct (map class_name_f P) \\<Longrightarrow>\n                distinct\n                 (map ((\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX) \\<circ>\n                       (\\<lambda>cld. (cld, class_name_f cld)))\n                   P);\n        distinct (map class_name_f (a # P))\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (map ((\\<lambda>(cld_XXX, dcl_XXX).\n                                    dcl_XXX) \\<circ>\n                                (\\<lambda>cld. (cld, class_name_f cld)))\n                            (a # P))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>distinct (map class_name_f P) \\<Longrightarrow>\n                distinct\n                 (map ((\\<lambda>(cld_XXX, dcl_XXX). dcl_XXX) \\<circ>\n                       (\\<lambda>cld. (cld, class_name_f cld)))\n                   P);\n        distinct (map class_name_f (a # P))\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (map ((\\<lambda>(cld_XXX, dcl_XXX).\n                                    dcl_XXX) \\<circ>\n                                (\\<lambda>cld. (cld, class_name_f cld)))\n                            (a # P))", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nfind_cld_f :: \"P \\<Rightarrow> ctx \\<Rightarrow> fqn \\<Rightarrow> ctxcld_opt\"\nwhere\n\"find_cld_f []         ctx fqn = None\" |\n\"find_cld_f (cld#clds) ctx fqn =\n  (case cld of cld_def dcl cl fds mds \\<Rightarrow>\n  (case fqn of fqn_def dcl' \\<Rightarrow>\n  (if dcl = dcl' then Some (ctx, cld) else find_cld_f clds ctx fqn)))\""], ["", "lemma [simp]: \"(find_cld P ctx fqn ctxcld_opt) = (find_cld_f P ctx fqn = ctxcld_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_cld P ctx fqn ctxcld_opt = (find_cld_f P ctx fqn = ctxcld_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_cld P ctx fqn ctxcld_opt \\<Longrightarrow>\n    find_cld_f P ctx fqn = ctxcld_opt\n 2. find_cld_f P ctx fqn = ctxcld_opt \\<Longrightarrow>\n    find_cld P ctx fqn ctxcld_opt", "apply(induct rule: find_cld.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ctx fqn. find_cld_f [] ctx fqn = None\n 2. \\<And>P cld cld_list dcl cl fds meth_defs ctx.\n       \\<lbrakk>P = [cld] @ cld_list;\n        cld = cld_def dcl cl fds meth_defs\\<rbrakk>\n       \\<Longrightarrow> find_cld_f P ctx (fqn_def dcl) = Some (ctx, cld)\n 3. \\<And>cld dcl' cl fds meth_defs dcl cld_list ctx ctxcld_opt.\n       \\<lbrakk>cld = cld_def dcl' cl fds meth_defs;\n        cl_fqn (fqn_def dcl) \\<noteq> cl_fqn (fqn_def dcl');\n        find_cld cld_list ctx (fqn_def dcl) ctxcld_opt;\n        find_cld_f cld_list ctx (fqn_def dcl) = ctxcld_opt\\<rbrakk>\n       \\<Longrightarrow> find_cld_f ([cld] @ cld_list) ctx (fqn_def dcl) =\n                         ctxcld_opt\n 4. find_cld_f P ctx fqn = ctxcld_opt \\<Longrightarrow>\n    find_cld P ctx fqn ctxcld_opt", "apply(simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_cld_f P ctx fqn = ctxcld_opt \\<Longrightarrow>\n    find_cld P ctx fqn ctxcld_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ctxcld_opt = find_cld_f P ctx fqn \\<Longrightarrow>\n    find_cld P ctx fqn (find_cld_f P ctx fqn)", "apply(induct P)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ctxcld_opt = find_cld_f [] ctx fqn \\<Longrightarrow>\n    find_cld [] ctx fqn (find_cld_f [] ctx fqn)\n 2. \\<And>a P.\n       \\<lbrakk>ctxcld_opt = find_cld_f P ctx fqn \\<Longrightarrow>\n                find_cld P ctx fqn (find_cld_f P ctx fqn);\n        ctxcld_opt = find_cld_f (a # P) ctx fqn\\<rbrakk>\n       \\<Longrightarrow> find_cld (a # P) ctx fqn\n                          (find_cld_f (a # P) ctx fqn)", "apply(simp add: fc_emptyI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<lbrakk>ctxcld_opt = find_cld_f P ctx fqn \\<Longrightarrow>\n                find_cld P ctx fqn (find_cld_f P ctx fqn);\n        ctxcld_opt = find_cld_f (a # P) ctx fqn\\<rbrakk>\n       \\<Longrightarrow> find_cld (a # P) ctx fqn\n                          (find_cld_f (a # P) ctx fqn)", "apply(case_tac fqn)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a P x.\n       \\<lbrakk>ctxcld_opt = find_cld_f P ctx fqn \\<Longrightarrow>\n                find_cld P ctx fqn (find_cld_f P ctx fqn);\n        ctxcld_opt = find_cld_f (a # P) ctx fqn; fqn = fqn_def x\\<rbrakk>\n       \\<Longrightarrow> find_cld (a # P) ctx fqn\n                          (find_cld_f (a # P) ctx fqn)", "apply(rename_tac cld clds dcl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld clds dcl.\n       \\<lbrakk>ctxcld_opt = find_cld_f clds ctx fqn \\<Longrightarrow>\n                find_cld clds ctx fqn (find_cld_f clds ctx fqn);\n        ctxcld_opt = find_cld_f (cld # clds) ctx fqn;\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> find_cld (cld # clds) ctx fqn\n                          (find_cld_f (cld # clds) ctx fqn)", "apply(case_tac cld)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld clds dcl x1 x2 x3 x4.\n       \\<lbrakk>ctxcld_opt = find_cld_f clds ctx fqn \\<Longrightarrow>\n                find_cld clds ctx fqn (find_cld_f clds ctx fqn);\n        ctxcld_opt = find_cld_f (cld # clds) ctx fqn; fqn = fqn_def dcl;\n        cld = cld_def x1 x2 x3 x4\\<rbrakk>\n       \\<Longrightarrow> find_cld (cld # clds) ctx fqn\n                          (find_cld_f (cld # clds) ctx fqn)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>clds dcl x1 x2 x3 x4.\n       \\<lbrakk>(if x1 = dcl then Some (ctx, cld_def x1 x2 x3 x4)\n                 else find_cld_f clds ctx (fqn_def dcl)) =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt =\n        (if x1 = dcl then Some (ctx, cld_def x1 x2 x3 x4)\n         else find_cld_f clds ctx (fqn_def dcl));\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> (x1 = dcl \\<longrightarrow>\n                          find_cld (cld_def dcl x2 x3 x4 # clds) ctx\n                           (fqn_def dcl)\n                           (Some (ctx, cld_def dcl x2 x3 x4))) \\<and>\n                         (x1 \\<noteq> dcl \\<longrightarrow>\n                          find_cld (cld_def x1 x2 x3 x4 # clds) ctx\n                           (fqn_def dcl)\n                           (find_cld_f clds ctx (fqn_def dcl)))", "apply(rename_tac dcl' cl' vds' mds')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>clds dcl dcl' cl' vds' mds'.\n       \\<lbrakk>(if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n                 else find_cld_f clds ctx (fqn_def dcl)) =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt =\n        (if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n         else find_cld_f clds ctx (fqn_def dcl));\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> (dcl' = dcl \\<longrightarrow>\n                          find_cld (cld_def dcl cl' vds' mds' # clds) ctx\n                           (fqn_def dcl)\n                           (Some (ctx, cld_def dcl cl' vds' mds'))) \\<and>\n                         (dcl' \\<noteq> dcl \\<longrightarrow>\n                          find_cld (cld_def dcl' cl' vds' mds' # clds) ctx\n                           (fqn_def dcl)\n                           (find_cld_f clds ctx (fqn_def dcl)))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>clds dcl dcl' cl' vds' mds'.\n       \\<lbrakk>(if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n                 else find_cld_f clds ctx (fqn_def dcl)) =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt =\n        (if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n         else find_cld_f clds ctx (fqn_def dcl));\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> dcl' = dcl \\<longrightarrow>\n                         find_cld (cld_def dcl cl' vds' mds' # clds) ctx\n                          (fqn_def dcl)\n                          (Some (ctx, cld_def dcl cl' vds' mds'))\n 2. \\<And>clds dcl dcl' cl' vds' mds'.\n       \\<lbrakk>(if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n                 else find_cld_f clds ctx (fqn_def dcl)) =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt =\n        (if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n         else find_cld_f clds ctx (fqn_def dcl));\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> dcl' \\<noteq> dcl \\<longrightarrow>\n                         find_cld (cld_def dcl' cl' vds' mds' # clds) ctx\n                          (fqn_def dcl) (find_cld_f clds ctx (fqn_def dcl))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>clds dcl cl' vds' mds'.\n       \\<lbrakk>Some (ctx, cld_def dcl cl' vds' mds') =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt = Some (ctx, cld_def dcl cl' vds' mds');\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> find_cld (cld_def dcl cl' vds' mds' # clds) ctx\n                          (fqn_def dcl)\n                          (Some (ctx, cld_def dcl cl' vds' mds'))\n 2. \\<And>clds dcl dcl' cl' vds' mds'.\n       \\<lbrakk>(if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n                 else find_cld_f clds ctx (fqn_def dcl)) =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt =\n        (if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n         else find_cld_f clds ctx (fqn_def dcl));\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> dcl' \\<noteq> dcl \\<longrightarrow>\n                         find_cld (cld_def dcl' cl' vds' mds' # clds) ctx\n                          (fqn_def dcl) (find_cld_f clds ctx (fqn_def dcl))", "apply(rule fc_cons_trueI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>clds dcl cl' vds' mds'.\n       \\<lbrakk>Some (ctx, cld_def dcl cl' vds' mds') =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt = Some (ctx, cld_def dcl cl' vds' mds');\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> cld_def dcl cl' vds' mds' # clds =\n                         [cld_def dcl cl' vds' mds'] @\n                         ?cld_list16 clds dcl cl' vds' mds'\n 2. \\<And>clds dcl cl' vds' mds'.\n       \\<lbrakk>Some (ctx, cld_def dcl cl' vds' mds') =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt = Some (ctx, cld_def dcl cl' vds' mds');\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> cld_def dcl cl' vds' mds' =\n                         cld_def dcl (?cl16 clds dcl cl' vds' mds')\n                          (?fds16 clds dcl cl' vds' mds')\n                          (?meth_defs16 clds dcl cl' vds' mds')\n 3. \\<And>clds dcl dcl' cl' vds' mds'.\n       \\<lbrakk>(if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n                 else find_cld_f clds ctx (fqn_def dcl)) =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt =\n        (if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n         else find_cld_f clds ctx (fqn_def dcl));\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> dcl' \\<noteq> dcl \\<longrightarrow>\n                         find_cld (cld_def dcl' cl' vds' mds' # clds) ctx\n                          (fqn_def dcl) (find_cld_f clds ctx (fqn_def dcl))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>clds dcl cl' vds' mds'.\n       \\<lbrakk>Some (ctx, cld_def dcl cl' vds' mds') =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt = Some (ctx, cld_def dcl cl' vds' mds');\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> cld_def dcl cl' vds' mds' =\n                         cld_def dcl (?cl16 clds dcl cl' vds' mds')\n                          (?fds16 clds dcl cl' vds' mds')\n                          (?meth_defs16 clds dcl cl' vds' mds')\n 2. \\<And>clds dcl dcl' cl' vds' mds'.\n       \\<lbrakk>(if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n                 else find_cld_f clds ctx (fqn_def dcl)) =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt =\n        (if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n         else find_cld_f clds ctx (fqn_def dcl));\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> dcl' \\<noteq> dcl \\<longrightarrow>\n                         find_cld (cld_def dcl' cl' vds' mds' # clds) ctx\n                          (fqn_def dcl) (find_cld_f clds ctx (fqn_def dcl))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>clds dcl dcl' cl' vds' mds'.\n       \\<lbrakk>(if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n                 else find_cld_f clds ctx (fqn_def dcl)) =\n                find_cld_f clds ctx (fqn_def dcl) \\<Longrightarrow>\n                find_cld clds ctx (fqn_def dcl)\n                 (find_cld_f clds ctx (fqn_def dcl));\n        ctxcld_opt =\n        (if dcl' = dcl then Some (ctx, cld_def dcl' cl' vds' mds')\n         else find_cld_f clds ctx (fqn_def dcl));\n        fqn = fqn_def dcl\\<rbrakk>\n       \\<Longrightarrow> dcl' \\<noteq> dcl \\<longrightarrow>\n                         find_cld (cld_def dcl' cl' vds' mds' # clds) ctx\n                          (fqn_def dcl) (find_cld_f clds ctx (fqn_def dcl))", "apply(force intro: fc_cons_falseI[simplified])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma find_to_mem[rule_format]:\n  \"find_cld_f P ctx fqn = Some (ctx', cld) \\<longrightarrow> cld : set P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_cld_f P ctx fqn = Some (ctx', cld) \\<longrightarrow>\n    cld \\<in> set P", "apply(induct P)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_cld_f [] ctx fqn = Some (ctx', cld) \\<longrightarrow>\n    cld \\<in> set []\n 2. \\<And>a P.\n       find_cld_f P ctx fqn = Some (ctx', cld) \\<longrightarrow>\n       cld \\<in> set P \\<Longrightarrow>\n       find_cld_f (a # P) ctx fqn = Some (ctx', cld) \\<longrightarrow>\n       cld \\<in> set (a # P)", "by (clarsimp split: cld.splits fqn.splits)+"], ["", "lemma find_cld_name_eq[rule_format]:\n  \"\\<forall>ctxcld. find_cld_f P ctx (fqn_def dcl) = Some ctxcld \\<longrightarrow> (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) = ctxcld)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ctxcld.\n       find_cld_f P ctx (fqn_def dcl) = Some ctxcld \\<longrightarrow>\n       (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) = ctxcld)", "apply(induct P)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>ctxcld.\n       find_cld_f [] ctx (fqn_def dcl) = Some ctxcld \\<longrightarrow>\n       (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) = ctxcld)\n 2. \\<And>a P.\n       \\<forall>ctxcld.\n          find_cld_f P ctx (fqn_def dcl) = Some ctxcld \\<longrightarrow>\n          (\\<exists>cl fds mds.\n              (ctx, cld_def dcl cl fds mds) = ctxcld) \\<Longrightarrow>\n       \\<forall>ctxcld.\n          find_cld_f (a # P) ctx (fqn_def dcl) =\n          Some ctxcld \\<longrightarrow>\n          (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) = ctxcld)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a P.\n       \\<forall>ctxcld.\n          find_cld_f P ctx (fqn_def dcl) = Some ctxcld \\<longrightarrow>\n          (\\<exists>cl fds mds.\n              (ctx, cld_def dcl cl fds mds) = ctxcld) \\<Longrightarrow>\n       \\<forall>ctxcld.\n          find_cld_f (a # P) ctx (fqn_def dcl) =\n          Some ctxcld \\<longrightarrow>\n          (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) = ctxcld)", "apply(clarsimp split: cld.splits fqn.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nfind_type_f :: \"P \\<Rightarrow> ctx \\<Rightarrow> cl \\<Rightarrow> ty_opt\"\nwhere\n\"find_type_f P ctx cl_object = Some ty_top\" |\n\"find_type_f P ctx (cl_fqn fqn) =\n  (case fqn of fqn_def dcl \\<Rightarrow>\n  (case find_cld_f P ctx fqn of None \\<Rightarrow> None | Some (ctx', cld) \\<Rightarrow>\n     Some (ty_def ctx' dcl)))\""], ["", "lemma [simp]: \"(find_type P ctx cl ty_opt) = (find_type_f P ctx cl = ty_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_type P ctx cl ty_opt = (find_type_f P ctx cl = ty_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_type P ctx cl ty_opt \\<Longrightarrow>\n    find_type_f P ctx cl = ty_opt\n 2. find_type_f P ctx cl = ty_opt \\<Longrightarrow>\n    find_type P ctx cl ty_opt", "apply(force elim: find_type.cases split: fqn.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_type_f P ctx cl = ty_opt \\<Longrightarrow>\n    find_type P ctx cl ty_opt", "apply(case_tac cl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>find_type_f P ctx cl = ty_opt; cl = cl_object\\<rbrakk>\n    \\<Longrightarrow> find_type P ctx cl ty_opt\n 2. \\<And>x2.\n       \\<lbrakk>find_type_f P ctx cl = ty_opt; cl = cl_fqn x2\\<rbrakk>\n       \\<Longrightarrow> find_type P ctx cl ty_opt", "apply(force intro: ft_objI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_type_f P ctx cl = ty_opt; cl = cl_fqn x2\\<rbrakk>\n       \\<Longrightarrow> find_type P ctx cl ty_opt", "apply(rename_tac fqn)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fqn.\n       \\<lbrakk>find_type_f P ctx cl = ty_opt; cl = cl_fqn fqn\\<rbrakk>\n       \\<Longrightarrow> find_type P ctx cl ty_opt", "apply(case_tac fqn)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fqn x.\n       \\<lbrakk>find_type_f P ctx cl = ty_opt; cl = cl_fqn fqn;\n        fqn = fqn_def x\\<rbrakk>\n       \\<Longrightarrow> find_type P ctx cl ty_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>cl = cl_fqn (fqn_def x);\n        ty_opt =\n        (case find_cld_f P ctx (fqn_def x) of None \\<Rightarrow> None\n         | Some (ctx', cld) \\<Rightarrow> Some (ty_def ctx' x))\\<rbrakk>\n       \\<Longrightarrow> find_type P ctx (cl_fqn (fqn_def x))\n                          (case find_cld_f P ctx (fqn_def x) of\n                           None \\<Rightarrow> None\n                           | Some (ctx', cld) \\<Rightarrow>\n                               Some (ty_def ctx' x))", "apply(split option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>cl = cl_fqn (fqn_def x);\n        ty_opt =\n        (case find_cld_f P ctx (fqn_def x) of None \\<Rightarrow> None\n         | Some (ctx', cld) \\<Rightarrow> Some (ty_def ctx' x))\\<rbrakk>\n       \\<Longrightarrow> (find_cld_f P ctx (fqn_def x) =\n                          None \\<longrightarrow>\n                          find_type P ctx (cl_fqn (fqn_def x)) None) \\<and>\n                         (\\<forall>x2.\n                             find_cld_f P ctx (fqn_def x) =\n                             Some x2 \\<longrightarrow>\n                             find_type P ctx (cl_fqn (fqn_def x))\n                              (case x2 of\n                               (ctx', cld) \\<Rightarrow>\n                                 Some (ty_def ctx' x)))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>cl = cl_fqn (fqn_def x);\n        ty_opt =\n        (case find_cld_f P ctx (fqn_def x) of None \\<Rightarrow> None\n         | Some (ctx', cld) \\<Rightarrow> Some (ty_def ctx' x))\\<rbrakk>\n       \\<Longrightarrow> find_cld_f P ctx (fqn_def x) =\n                         None \\<longrightarrow>\n                         find_type P ctx (cl_fqn (fqn_def x)) None\n 2. \\<And>x.\n       \\<lbrakk>cl = cl_fqn (fqn_def x);\n        ty_opt =\n        (case find_cld_f P ctx (fqn_def x) of None \\<Rightarrow> None\n         | Some (ctx', cld) \\<Rightarrow> Some (ty_def ctx' x))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            find_cld_f P ctx (fqn_def x) =\n                            Some x2 \\<longrightarrow>\n                            find_type P ctx (cl_fqn (fqn_def x))\n                             (case x2 of\n                              (ctx', cld) \\<Rightarrow>\n                                Some (ty_def ctx' x))", "apply(force intro: ft_nullI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>cl = cl_fqn (fqn_def x);\n        ty_opt =\n        (case find_cld_f P ctx (fqn_def x) of None \\<Rightarrow> None\n         | Some (ctx', cld) \\<Rightarrow> Some (ty_def ctx' x))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            find_cld_f P ctx (fqn_def x) =\n                            Some x2 \\<longrightarrow>\n                            find_type P ctx (cl_fqn (fqn_def x))\n                             (case x2 of\n                              (ctx', cld) \\<Rightarrow>\n                                Some (ty_def ctx' x))", "by (force intro: ft_dclI)"], ["", "lemma mem_remove: \"cld : set P \\<Longrightarrow> length (remove1 cld P) < length P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cld \\<in> set P \\<Longrightarrow> length (remove1 cld P) < length P", "apply(induct P)"], ["proof (prove)\ngoal (2 subgoals):\n 1. cld \\<in> set [] \\<Longrightarrow> length (remove1 cld []) < length []\n 2. \\<And>a P.\n       \\<lbrakk>cld \\<in> set P \\<Longrightarrow>\n                length (remove1 cld P) < length P;\n        cld \\<in> set (a # P)\\<rbrakk>\n       \\<Longrightarrow> length (remove1 cld (a # P)) < length (a # P)", "by(simp, force split: if_split_asm)"], ["", "lemma finite_program[rule_format, intro]:\n  \"\\<forall>P cld. (\\<exists>ctx ctx' fqn. find_cld_f P ctx fqn = Some (ctx', cld)) \\<longrightarrow>\n      length (remove1 cld P) < length P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P cld.\n       (\\<exists>ctx ctx' fqn.\n           find_cld_f P ctx fqn = Some (ctx', cld)) \\<longrightarrow>\n       length (remove1 cld P) < length P", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P cld ctx ctx' fqn.\n       find_cld_f P ctx fqn = Some (ctx', cld) \\<Longrightarrow>\n       length (remove1 cld P) < length P", "apply(drule find_to_mem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P cld ctx ctx' fqn.\n       cld \\<in> set P \\<Longrightarrow> length (remove1 cld P) < length P", "by (simp add: mem_remove)"], ["", "lemma path_length_eq[rule_format]:\n  \"path_length P ctx cl nn \\<Longrightarrow> \\<forall>nn'. path_length P ctx cl nn' \\<longrightarrow> nn = nn'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_length P ctx cl nn \\<Longrightarrow>\n    \\<forall>nn'. path_length P ctx cl nn' \\<longrightarrow> nn = nn'", "apply(erule path_length.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx.\n       \\<forall>nn'.\n          path_length P ctx cl_object nn' \\<longrightarrow> 0 = nn'\n 2. \\<And>P ctx fqn ctx' cld cl nn.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'.\n           path_length P ctx' cl nn' \\<longrightarrow> nn = nn'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nn'.\n                            path_length P ctx (cl_fqn fqn)\n                             nn' \\<longrightarrow>\n                            nn + 1 = nn'", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx nn'.\n       path_length P ctx cl_object nn' \\<Longrightarrow> nn' = 0\n 2. \\<And>P ctx fqn ctx' cld cl nn.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'.\n           path_length P ctx' cl nn' \\<longrightarrow> nn = nn'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nn'.\n                            path_length P ctx (cl_fqn fqn)\n                             nn' \\<longrightarrow>\n                            nn + 1 = nn'", "apply(erule path_length.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P ctx nn' Pa ctxa.\n       \\<lbrakk>P = Pa; ctx = ctxa; cl_object = cl_object; nn' = 0\\<rbrakk>\n       \\<Longrightarrow> nn' = 0\n 2. \\<And>P ctx nn' Pa ctxa fqn ctx' cld cl nn.\n       \\<lbrakk>P = Pa; ctx = ctxa; cl_object = cl_fqn fqn; nn' = nn + 1;\n        find_cld Pa ctxa fqn (Some (ctx', cld)); superclass_name cld cl;\n        path_length Pa ctx' cl nn\\<rbrakk>\n       \\<Longrightarrow> nn' = 0\n 3. \\<And>P ctx fqn ctx' cld cl nn.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'.\n           path_length P ctx' cl nn' \\<longrightarrow> nn = nn'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nn'.\n                            path_length P ctx (cl_fqn fqn)\n                             nn' \\<longrightarrow>\n                            nn + 1 = nn'", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx nn' Pa ctxa fqn ctx' cld cl nn.\n       \\<lbrakk>P = Pa; ctx = ctxa; cl_object = cl_fqn fqn; nn' = nn + 1;\n        find_cld Pa ctxa fqn (Some (ctx', cld)); superclass_name cld cl;\n        path_length Pa ctx' cl nn\\<rbrakk>\n       \\<Longrightarrow> nn' = 0\n 2. \\<And>P ctx fqn ctx' cld cl nn.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'.\n           path_length P ctx' cl nn' \\<longrightarrow> nn = nn'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nn'.\n                            path_length P ctx (cl_fqn fqn)\n                             nn' \\<longrightarrow>\n                            nn + 1 = nn'", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn ctx' cld cl nn.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'.\n           path_length P ctx' cl nn' \\<longrightarrow> nn = nn'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>nn'.\n                            path_length P ctx (cl_fqn fqn)\n                             nn' \\<longrightarrow>\n                            nn + 1 = nn'", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn ctx' cld cl nn nn'.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'.\n           path_length P ctx' cl nn' \\<longrightarrow> nn = nn'\\<rbrakk>\n       \\<Longrightarrow> path_length P ctx (cl_fqn fqn)\n                          nn' \\<longrightarrow>\n                         nn + 1 = nn'", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn ctx' cld cl nn nn'.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'. path_length P ctx' cl nn' \\<longrightarrow> nn = nn';\n        path_length P ctx (cl_fqn fqn) nn'\\<rbrakk>\n       \\<Longrightarrow> nn + 1 = nn'", "apply(erule_tac ?a4.0 = nn' in path_length.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn ctx' cld cl nn nn' Pa ctxa.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'. path_length P ctx' cl nn' \\<longrightarrow> nn = nn';\n        P = Pa; ctx = ctxa; cl_fqn fqn = cl_object; nn' = 0\\<rbrakk>\n       \\<Longrightarrow> nn + 1 = nn'\n 2. \\<And>P ctx fqn ctx' cld cl nn nn' Pa ctxa fqna ctx'a clda cla nna.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'. path_length P ctx' cl nn' \\<longrightarrow> nn = nn';\n        P = Pa; ctx = ctxa; cl_fqn fqn = cl_fqn fqna; nn' = nna + 1;\n        find_cld Pa ctxa fqna (Some (ctx'a, clda));\n        superclass_name clda cla; path_length Pa ctx'a cla nna\\<rbrakk>\n       \\<Longrightarrow> nn + 1 = nn'", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn ctx' cld cl nn nn' Pa ctxa fqna ctx'a clda cla nna.\n       \\<lbrakk>find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl; path_length P ctx' cl nn;\n        \\<forall>nn'. path_length P ctx' cl nn' \\<longrightarrow> nn = nn';\n        P = Pa; ctx = ctxa; cl_fqn fqn = cl_fqn fqna; nn' = nna + 1;\n        find_cld Pa ctxa fqna (Some (ctx'a, clda));\n        superclass_name clda cla; path_length Pa ctx'a cla nna\\<rbrakk>\n       \\<Longrightarrow> nn + 1 = nn'", "apply(clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_termination[iff]:\n  \"\\<forall>P cld ctx ctx' fqn. find_cld_f P ctx fqn = Some (ctx', cld) \\<and> acyclic_clds P\n       \\<longrightarrow> The (path_length P ctx' (superclass_name_f cld)) < The (path_length P ctx (cl_fqn fqn))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P cld ctx ctx' fqn.\n       find_cld_f P ctx fqn = Some (ctx', cld) \\<and>\n       acyclic_clds P \\<longrightarrow>\n       The (path_length P ctx' (superclass_name_f cld))\n       < The (path_length P ctx (cl_fqn fqn))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P cld ctx ctx' fqn.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> The (path_length P ctx' (superclass_name_f cld))\n                         < The (path_length P ctx (cl_fqn fqn))", "apply(erule acyclic_clds.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P cld ctx ctx' fqn Pa.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld); P = Pa;\n        \\<forall>ctx fqn.\n           (\\<exists>ctx' cld.\n               find_cld Pa ctx fqn (Some (ctx', cld))) \\<longrightarrow>\n           (\\<exists>nn. path_length Pa ctx (cl_fqn fqn) nn)\\<rbrakk>\n       \\<Longrightarrow> The (path_length P ctx' (superclass_name_f cld))\n                         < The (path_length P ctx (cl_fqn fqn))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx ctx' fqn Pa.\n       \\<lbrakk>find_cld_f Pa ctx fqn = Some (ctx', cld);\n        \\<forall>ctx fqn.\n           (\\<exists>ctx' cld.\n               find_cld_f Pa ctx fqn = Some (ctx', cld)) \\<longrightarrow>\n           Ex (path_length Pa ctx (cl_fqn fqn))\\<rbrakk>\n       \\<Longrightarrow> The (path_length Pa ctx' (superclass_name_f cld))\n                         < The (path_length Pa ctx (cl_fqn fqn))", "apply(rename_tac P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx ctx' fqn P.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        \\<forall>ctx fqn.\n           (\\<exists>ctx' cld.\n               find_cld_f P ctx fqn = Some (ctx', cld)) \\<longrightarrow>\n           Ex (path_length P ctx (cl_fqn fqn))\\<rbrakk>\n       \\<Longrightarrow> The (path_length P ctx' (superclass_name_f cld))\n                         < The (path_length P ctx (cl_fqn fqn))", "apply(erule_tac x = ctx in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx ctx' fqn P.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        \\<forall>fqn.\n           (\\<exists>ctx' cld.\n               find_cld_f P ctx fqn = Some (ctx', cld)) \\<longrightarrow>\n           Ex (path_length P ctx (cl_fqn fqn))\\<rbrakk>\n       \\<Longrightarrow> The (path_length P ctx' (superclass_name_f cld))\n                         < The (path_length P ctx (cl_fqn fqn))", "apply(erule_tac x = fqn in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx ctx' fqn P.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        (\\<exists>ctx' cld.\n            find_cld_f P ctx fqn = Some (ctx', cld)) \\<longrightarrow>\n        Ex (path_length P ctx (cl_fqn fqn))\\<rbrakk>\n       \\<Longrightarrow> The (path_length P ctx' (superclass_name_f cld))\n                         < The (path_length P ctx (cl_fqn fqn))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx ctx' fqn P x.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) x\\<rbrakk>\n       \\<Longrightarrow> The (path_length P ctx' (superclass_name_f cld))\n                         < The (path_length P ctx (cl_fqn fqn))", "apply(rule theI2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>cld ctx ctx' fqn P x.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) x\\<rbrakk>\n       \\<Longrightarrow> path_length P ctx (cl_fqn fqn)\n                          (?a13 cld ctx ctx' fqn P x)\n 2. \\<And>cld ctx ctx' fqn P x xa.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) x;\n        path_length P ctx (cl_fqn fqn) xa\\<rbrakk>\n       \\<Longrightarrow> xa = ?a13 cld ctx ctx' fqn P x\n 3. \\<And>cld ctx ctx' fqn P x xa.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) x;\n        path_length P ctx (cl_fqn fqn) xa\\<rbrakk>\n       \\<Longrightarrow> (THE a.\n                             path_length P ctx' (superclass_name_f cld) a)\n                         < xa", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cld ctx ctx' fqn P x xa.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) x;\n        path_length P ctx (cl_fqn fqn) xa\\<rbrakk>\n       \\<Longrightarrow> xa = x\n 2. \\<And>cld ctx ctx' fqn P x xa.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) x;\n        path_length P ctx (cl_fqn fqn) xa\\<rbrakk>\n       \\<Longrightarrow> (THE a.\n                             path_length P ctx' (superclass_name_f cld) a)\n                         < xa", "apply(simp add: path_length_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx ctx' fqn P x xa.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) x;\n        path_length P ctx (cl_fqn fqn) xa\\<rbrakk>\n       \\<Longrightarrow> (THE a.\n                             path_length P ctx' (superclass_name_f cld) a)\n                         < xa", "apply(erule path_length.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cld ctx ctx' fqn P x xa Pa ctxa.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) xa; P = Pa; ctx = ctxa;\n        cl_fqn fqn = cl_object; x = 0\\<rbrakk>\n       \\<Longrightarrow> (THE a.\n                             path_length P ctx' (superclass_name_f cld) a)\n                         < xa\n 2. \\<And>cld ctx ctx' fqn P x xa Pa ctxa fqna ctx'a clda cl nn.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) xa; P = Pa; ctx = ctxa;\n        cl_fqn fqn = cl_fqn fqna; x = nn + 1;\n        find_cld Pa ctxa fqna (Some (ctx'a, clda)); superclass_name clda cl;\n        path_length Pa ctx'a cl nn\\<rbrakk>\n       \\<Longrightarrow> (THE a.\n                             path_length P ctx' (superclass_name_f cld) a)\n                         < xa", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx ctx' fqn P x xa Pa ctxa fqna ctx'a clda cl nn.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx (cl_fqn fqn) xa; P = Pa; ctx = ctxa;\n        cl_fqn fqn = cl_fqn fqna; x = nn + 1;\n        find_cld Pa ctxa fqna (Some (ctx'a, clda)); superclass_name clda cl;\n        path_length Pa ctx'a cl nn\\<rbrakk>\n       \\<Longrightarrow> (THE a.\n                             path_length P ctx' (superclass_name_f cld) a)\n                         < xa", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx' xa Pa ctxa fqna nn.\n       \\<lbrakk>path_length Pa ctxa (cl_fqn fqna) xa;\n        find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) nn\\<rbrakk>\n       \\<Longrightarrow> The (path_length Pa ctx' (superclass_name_f cld))\n                         < xa", "apply(rule theI2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>cld ctx' xa Pa ctxa fqna nn.\n       \\<lbrakk>path_length Pa ctxa (cl_fqn fqna) xa;\n        find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) nn\\<rbrakk>\n       \\<Longrightarrow> path_length Pa ctx' (superclass_name_f cld)\n                          (?a26 cld ctx' xa Pa ctxa fqna nn)\n 2. \\<And>cld ctx' xa Pa ctxa fqna nn x.\n       \\<lbrakk>path_length Pa ctxa (cl_fqn fqna) xa;\n        find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) nn;\n        path_length Pa ctx' (superclass_name_f cld) x\\<rbrakk>\n       \\<Longrightarrow> x = ?a26 cld ctx' xa Pa ctxa fqna nn\n 3. \\<And>cld ctx' xa Pa ctxa fqna nn x.\n       \\<lbrakk>path_length Pa ctxa (cl_fqn fqna) xa;\n        find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) nn;\n        path_length Pa ctx' (superclass_name_f cld) x\\<rbrakk>\n       \\<Longrightarrow> x < xa", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cld ctx' xa Pa ctxa fqna nn x.\n       \\<lbrakk>path_length Pa ctxa (cl_fqn fqna) xa;\n        find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) nn;\n        path_length Pa ctx' (superclass_name_f cld) x\\<rbrakk>\n       \\<Longrightarrow> x = nn\n 2. \\<And>cld ctx' xa Pa ctxa fqna nn x.\n       \\<lbrakk>path_length Pa ctxa (cl_fqn fqna) xa;\n        find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) nn;\n        path_length Pa ctx' (superclass_name_f cld) x\\<rbrakk>\n       \\<Longrightarrow> x < xa", "apply(simp add: path_length_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx' xa Pa ctxa fqna nn x.\n       \\<lbrakk>path_length Pa ctxa (cl_fqn fqna) xa;\n        find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) nn;\n        path_length Pa ctx' (superclass_name_f cld) x\\<rbrakk>\n       \\<Longrightarrow> x < xa", "apply(drule_tac path_length_eq, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx' xa Pa ctxa fqna nn x.\n       \\<lbrakk>path_length Pa ctxa (cl_fqn fqna) xa;\n        find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) x; nn = x\\<rbrakk>\n       \\<Longrightarrow> x < xa", "apply(erule path_length.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cld ctx' xa Pa ctxa fqna nn x P ctx.\n       \\<lbrakk>find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) x; nn = x; Pa = P;\n        ctxa = ctx; cl_fqn fqna = cl_object; xa = 0\\<rbrakk>\n       \\<Longrightarrow> x < xa\n 2. \\<And>cld ctx' xa Pa ctxa fqna nn x P ctx fqn ctx'a clda cl nna.\n       \\<lbrakk>find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) x; nn = x; Pa = P;\n        ctxa = ctx; cl_fqn fqna = cl_fqn fqn; xa = nna + 1;\n        find_cld P ctx fqn (Some (ctx'a, clda)); superclass_name clda cl;\n        path_length P ctx'a cl nna\\<rbrakk>\n       \\<Longrightarrow> x < xa", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx' xa Pa ctxa fqna nn x P ctx fqn ctx'a clda cl nna.\n       \\<lbrakk>find_cld_f Pa ctxa fqna = Some (ctx', cld);\n        path_length Pa ctx' (superclass_name_f cld) x; nn = x; Pa = P;\n        ctxa = ctx; cl_fqn fqna = cl_fqn fqn; xa = nna + 1;\n        find_cld P ctx fqn (Some (ctx'a, clda)); superclass_name clda cl;\n        path_length P ctx'a cl nna\\<rbrakk>\n       \\<Longrightarrow> x < xa", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx' x P ctx fqn nna.\n       \\<lbrakk>path_length P ctx' (superclass_name_f cld) x;\n        find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx' (superclass_name_f cld) nna\\<rbrakk>\n       \\<Longrightarrow> x < Suc nna", "apply(drule_tac path_length_eq, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cld ctx' x P ctx fqn nna.\n       \\<lbrakk>find_cld_f P ctx fqn = Some (ctx', cld);\n        path_length P ctx' (superclass_name_f cld) nna; x = nna\\<rbrakk>\n       \\<Longrightarrow> x < Suc nna", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "function\nfind_path_rec_f :: \"P \\<Rightarrow> ctx \\<Rightarrow> cl \\<Rightarrow> ctxclds \\<Rightarrow> ctxclds_opt\"\nwhere\n\"find_path_rec_f P ctx  cl_object   path = Some path\" |\n\"find_path_rec_f P ctx (cl_fqn fqn) path =\n  (if ~(acyclic_clds P) then None else\n  (case find_cld_f P ctx fqn of None \\<Rightarrow> None | Some (ctx', cld) \\<Rightarrow>\n   find_path_rec_f P ctx'\n                    (superclass_name_f cld) (path @ [(ctx',cld)])))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>Pa ctx path.\n                   x = (Pa, ctx, cl_object, path) \\<Longrightarrow> P;\n        \\<And>Pa ctx fqn path.\n           x = (Pa, ctx, cl_fqn fqn, path) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>P ctx path Pa ctxa patha.\n       (P, ctx, cl_object, path) =\n       (Pa, ctxa, cl_object, patha) \\<Longrightarrow>\n       Some path = Some patha\n 3. \\<And>P ctx path Pa ctxa fqn patha.\n       (P, ctx, cl_object, path) =\n       (Pa, ctxa, cl_fqn fqn, patha) \\<Longrightarrow>\n       Some path =\n       (if \\<not> acyclic_clds Pa then None\n        else case find_cld_f Pa ctxa fqn of None \\<Rightarrow> None\n             | Some (ctx', cld) \\<Rightarrow>\n                 find_path_rec_f_sumC\n                  (Pa, ctx', superclass_name_f cld, patha @ [(ctx', cld)]))\n 4. \\<And>P ctx fqn path Pa ctxa fqna patha.\n       (P, ctx, cl_fqn fqn, path) =\n       (Pa, ctxa, cl_fqn fqna, patha) \\<Longrightarrow>\n       (if \\<not> acyclic_clds P then None\n        else case find_cld_f P ctx fqn of None \\<Rightarrow> None\n             | Some (ctx', cld) \\<Rightarrow>\n                 find_path_rec_f_sumC\n                  (P, ctx', superclass_name_f cld, path @ [(ctx', cld)])) =\n       (if \\<not> acyclic_clds Pa then None\n        else case find_cld_f Pa ctxa fqna of None \\<Rightarrow> None\n             | Some (ctx', cld) \\<Rightarrow>\n                 find_path_rec_f_sumC\n                  (Pa, ctx', superclass_name_f cld, patha @ [(ctx', cld)]))", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All find_path_rec_f_dom", "by (relation \"measure (\\<lambda>(P, ctx, cl, path). (THE nn. path_length P ctx cl nn))\") auto"], ["", "lemma [simp]: \"(find_path_rec P ctx cl path path_opt) = (find_path_rec_f P ctx cl path = path_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec P ctx cl path path_opt =\n    (find_path_rec_f P ctx cl path = path_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_path_rec P ctx cl path path_opt \\<Longrightarrow>\n    find_path_rec_f P ctx cl path = path_opt\n 2. find_path_rec_f P ctx cl path = path_opt \\<Longrightarrow>\n    find_path_rec P ctx cl path path_opt", "apply(erule find_path_rec.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P ctx ctxclds.\n       find_path_rec_f P ctx cl_object ctxclds = Some ctxclds\n 2. \\<And>P ctx fqn ctxclds.\n       \\<not> acyclic_clds P \\<or> find_cld P ctx fqn None \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) ctxclds = None\n 3. \\<And>P ctx fqn ctx' cld cl ctxclds ctxclds_opt.\n       \\<lbrakk>acyclic_clds P \\<and> find_cld P ctx fqn (Some (ctx', cld));\n        superclass_name cld cl;\n        find_path_rec P ctx' cl (ctxclds @ [(ctx', cld)]) ctxclds_opt;\n        find_path_rec_f P ctx' cl (ctxclds @ [(ctx', cld)]) =\n        ctxclds_opt\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx (cl_fqn fqn) ctxclds =\n                         ctxclds_opt\n 4. find_path_rec_f P ctx cl path = path_opt \\<Longrightarrow>\n    find_path_rec P ctx cl path path_opt", "apply(simp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl path = path_opt \\<Longrightarrow>\n    find_path_rec P ctx cl path path_opt", "apply(induct rule: find_path_rec_f.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx path.\n       find_path_rec_f P ctx cl_object path = path_opt \\<Longrightarrow>\n       find_path_rec P ctx cl_object path path_opt\n 2. \\<And>P ctx fqn path.\n       \\<lbrakk>\\<And>x2 x y.\n                   \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n                    find_cld_f P ctx fqn = Some x2; (x, y) = x2;\n                    find_path_rec_f P x (superclass_name_f y)\n                     (path @ [(x, y)]) =\n                    path_opt\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P x (superclass_name_f y)\n(path @ [(x, y)]) path_opt;\n        find_path_rec_f P ctx (cl_fqn fqn) path = path_opt\\<rbrakk>\n       \\<Longrightarrow> find_path_rec P ctx (cl_fqn fqn) path path_opt", "apply(clarsimp simp add: fpr_objI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn path.\n       \\<lbrakk>\\<And>x2 x y.\n                   \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n                    find_cld_f P ctx fqn = Some x2; (x, y) = x2;\n                    find_path_rec_f P x (superclass_name_f y)\n                     (path @ [(x, y)]) =\n                    path_opt\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P x (superclass_name_f y)\n(path @ [(x, y)]) path_opt;\n        find_path_rec_f P ctx (cl_fqn fqn) path = path_opt\\<rbrakk>\n       \\<Longrightarrow> find_path_rec P ctx (cl_fqn fqn) path path_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn path.\n       \\<lbrakk>\\<And>a b x.\n                   \\<lbrakk>acyclic_clds P;\n                    find_cld_f P ctx fqn = Some (a, b); x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a (superclass_name_f b)\n(path @ [(a, b)])\n(find_path_rec_f P a (superclass_name_f b) (path @ [(a, b)]));\n        path_opt =\n        (if \\<not> acyclic_clds P then None\n         else case find_cld_f P ctx fqn of None \\<Rightarrow> None\n              | Some (ctx', cld) \\<Rightarrow>\n                  find_path_rec_f P ctx' (superclass_name_f cld)\n                   (path @ [(ctx', cld)]))\\<rbrakk>\n       \\<Longrightarrow> (\\<not> acyclic_clds P \\<longrightarrow>\n                          find_path_rec P ctx (cl_fqn fqn) path None) \\<and>\n                         (acyclic_clds P \\<longrightarrow>\n                          find_path_rec P ctx (cl_fqn fqn) path\n                           (case find_cld_f P ctx fqn of\n                            None \\<Rightarrow> None\n                            | Some (ctx', cld) \\<Rightarrow>\n                                find_path_rec_f P ctx'\n                                 (superclass_name_f cld)\n                                 (path @ [(ctx', cld)])))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path.\n       \\<lbrakk>\\<And>a b x.\n                   \\<lbrakk>acyclic_clds P;\n                    find_cld_f P ctx fqn = Some (a, b); x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a (superclass_name_f b)\n(path @ [(a, b)])\n(find_path_rec_f P a (superclass_name_f b) (path @ [(a, b)]));\n        path_opt =\n        (if \\<not> acyclic_clds P then None\n         else case find_cld_f P ctx fqn of None \\<Rightarrow> None\n              | Some (ctx', cld) \\<Rightarrow>\n                  find_path_rec_f P ctx' (superclass_name_f cld)\n                   (path @ [(ctx', cld)]))\\<rbrakk>\n       \\<Longrightarrow> \\<not> acyclic_clds P \\<longrightarrow>\n                         find_path_rec P ctx (cl_fqn fqn) path None\n 2. \\<And>P ctx fqn path.\n       \\<lbrakk>\\<And>a b x.\n                   \\<lbrakk>acyclic_clds P;\n                    find_cld_f P ctx fqn = Some (a, b); x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a (superclass_name_f b)\n(path @ [(a, b)])\n(find_path_rec_f P a (superclass_name_f b) (path @ [(a, b)]));\n        path_opt =\n        (if \\<not> acyclic_clds P then None\n         else case find_cld_f P ctx fqn of None \\<Rightarrow> None\n              | Some (ctx', cld) \\<Rightarrow>\n                  find_path_rec_f P ctx' (superclass_name_f cld)\n                   (path @ [(ctx', cld)]))\\<rbrakk>\n       \\<Longrightarrow> acyclic_clds P \\<longrightarrow>\n                         find_path_rec P ctx (cl_fqn fqn) path\n                          (case find_cld_f P ctx fqn of\n                           None \\<Rightarrow> None\n                           | Some (ctx', cld) \\<Rightarrow>\n                               find_path_rec_f P ctx'\n                                (superclass_name_f cld)\n                                (path @ [(ctx', cld)]))", "apply(simp add: fpr_nullI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn path.\n       \\<lbrakk>\\<And>a b x.\n                   \\<lbrakk>acyclic_clds P;\n                    find_cld_f P ctx fqn = Some (a, b); x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a (superclass_name_f b)\n(path @ [(a, b)])\n(find_path_rec_f P a (superclass_name_f b) (path @ [(a, b)]));\n        path_opt =\n        (if \\<not> acyclic_clds P then None\n         else case find_cld_f P ctx fqn of None \\<Rightarrow> None\n              | Some (ctx', cld) \\<Rightarrow>\n                  find_path_rec_f P ctx' (superclass_name_f cld)\n                   (path @ [(ctx', cld)]))\\<rbrakk>\n       \\<Longrightarrow> acyclic_clds P \\<longrightarrow>\n                         find_path_rec P ctx (cl_fqn fqn) path\n                          (case find_cld_f P ctx fqn of\n                           None \\<Rightarrow> None\n                           | Some (ctx', cld) \\<Rightarrow>\n                               find_path_rec_f P ctx'\n                                (superclass_name_f cld)\n                                (path @ [(ctx', cld)]))", "apply(clarsimp split: option.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path.\n       \\<lbrakk>find_cld_f P ctx fqn = None; path_opt = None;\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> find_path_rec P ctx (cl_fqn fqn) path None\n 2. \\<And>P ctx fqn path aa ba.\n       \\<lbrakk>\\<And>a x.\n                   \\<lbrakk>aa = a; x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a\n(superclass_name_f ba) (path @ [(a, ba)])\n(find_path_rec_f P a (superclass_name_f ba) (path @ [(a, ba)]));\n        find_cld_f P ctx fqn = Some (aa, ba);\n        path_opt =\n        find_path_rec_f P aa (superclass_name_f ba) (path @ [(aa, ba)]);\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> find_path_rec P ctx (cl_fqn fqn) path\n                          (find_path_rec_f P aa (superclass_name_f ba)\n                            (path @ [(aa, ba)]))", "apply(rule fpr_nullI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path.\n       \\<lbrakk>find_cld_f P ctx fqn = None; path_opt = None;\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> \\<not> acyclic_clds P \\<or> find_cld P ctx fqn None\n 2. \\<And>P ctx fqn path aa ba.\n       \\<lbrakk>\\<And>a x.\n                   \\<lbrakk>aa = a; x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a\n(superclass_name_f ba) (path @ [(a, ba)])\n(find_path_rec_f P a (superclass_name_f ba) (path @ [(a, ba)]));\n        find_cld_f P ctx fqn = Some (aa, ba);\n        path_opt =\n        find_path_rec_f P aa (superclass_name_f ba) (path @ [(aa, ba)]);\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> find_path_rec P ctx (cl_fqn fqn) path\n                          (find_path_rec_f P aa (superclass_name_f ba)\n                            (path @ [(aa, ba)]))", "apply(simp add: fpr_nullI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn path aa ba.\n       \\<lbrakk>\\<And>a x.\n                   \\<lbrakk>aa = a; x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a\n(superclass_name_f ba) (path @ [(a, ba)])\n(find_path_rec_f P a (superclass_name_f ba) (path @ [(a, ba)]));\n        find_cld_f P ctx fqn = Some (aa, ba);\n        path_opt =\n        find_path_rec_f P aa (superclass_name_f ba) (path @ [(aa, ba)]);\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> find_path_rec P ctx (cl_fqn fqn) path\n                          (find_path_rec_f P aa (superclass_name_f ba)\n                            (path @ [(aa, ba)]))", "apply(rule fpr_fqnI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P ctx fqn path aa ba.\n       \\<lbrakk>\\<And>a x.\n                   \\<lbrakk>aa = a; x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a\n(superclass_name_f ba) (path @ [(a, ba)])\n(find_path_rec_f P a (superclass_name_f ba) (path @ [(a, ba)]));\n        find_cld_f P ctx fqn = Some (aa, ba);\n        path_opt =\n        find_path_rec_f P aa (superclass_name_f ba) (path @ [(aa, ba)]);\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> acyclic_clds P \\<and>\n                         find_cld P ctx fqn\n                          (Some\n                            (?ctx'48 P ctx fqn path aa ba,\n                             ?cld48 P ctx fqn path aa ba))\n 2. \\<And>P ctx fqn path aa ba.\n       \\<lbrakk>\\<And>a x.\n                   \\<lbrakk>aa = a; x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a\n(superclass_name_f ba) (path @ [(a, ba)])\n(find_path_rec_f P a (superclass_name_f ba) (path @ [(a, ba)]));\n        find_cld_f P ctx fqn = Some (aa, ba);\n        path_opt =\n        find_path_rec_f P aa (superclass_name_f ba) (path @ [(aa, ba)]);\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> superclass_name (?cld48 P ctx fqn path aa ba)\n                          (?cl48 P ctx fqn path aa ba)\n 3. \\<And>P ctx fqn path aa ba.\n       \\<lbrakk>\\<And>a x.\n                   \\<lbrakk>aa = a; x = a\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec P a\n(superclass_name_f ba) (path @ [(a, ba)])\n(find_path_rec_f P a (superclass_name_f ba) (path @ [(a, ba)]));\n        find_cld_f P ctx fqn = Some (aa, ba);\n        path_opt =\n        find_path_rec_f P aa (superclass_name_f ba) (path @ [(aa, ba)]);\n        acyclic_clds P\\<rbrakk>\n       \\<Longrightarrow> find_path_rec P (?ctx'48 P ctx fqn path aa ba)\n                          (?cl48 P ctx fqn path aa ba)\n                          (path @\n                           [(?ctx'48 P ctx fqn path aa ba,\n                             ?cld48 P ctx fqn path aa ba)])\n                          (find_path_rec_f P aa (superclass_name_f ba)\n                            (path @ [(aa, ba)]))", "apply(force)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\nfind_path_f :: \"P \\<Rightarrow> ctx \\<Rightarrow> cl \\<Rightarrow> ctxclds_opt\"\nwhere\n\"find_path_f P ctx cl = find_path_rec_f P ctx cl []\""], ["", "lemma [simp]: \"(find_path P ctx cl path_opt) = (find_path_f P ctx cl = path_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path P ctx cl path_opt = (find_path_f P ctx cl = path_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_path P ctx cl path_opt \\<Longrightarrow>\n    find_path_f P ctx cl = path_opt\n 2. find_path_f P ctx cl = path_opt \\<Longrightarrow>\n    find_path P ctx cl path_opt", "apply(erule find_path.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Pa ctxa cla ctxclds_opt.\n       \\<lbrakk>P = Pa; ctx = ctxa; cl = cla; path_opt = ctxclds_opt;\n        find_path_rec Pa ctxa cla [] ctxclds_opt\\<rbrakk>\n       \\<Longrightarrow> find_path_f P ctx cl = path_opt\n 2. find_path_f P ctx cl = path_opt \\<Longrightarrow>\n    find_path P ctx cl path_opt", "apply(unfold find_path_f_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Pa ctxa cla ctxclds_opt.\n       \\<lbrakk>P = Pa; ctx = ctxa; cl = cla; path_opt = ctxclds_opt;\n        find_path_rec Pa ctxa cla [] ctxclds_opt\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx cl [] = path_opt\n 2. find_path_rec_f P ctx cl [] = path_opt \\<Longrightarrow>\n    find_path P ctx cl path_opt", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl [] = path_opt \\<Longrightarrow>\n    find_path P ctx cl path_opt", "apply(simp add: fp_defI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nfind_path_ty_f :: \"P \\<Rightarrow> ty \\<Rightarrow> ctxclds_opt\"\nwhere\n\"find_path_ty_f P  ty_top          = Some []\" |\n\"find_path_ty_f P (ty_def ctx dcl) =\n   find_path_f P ctx (cl_fqn (fqn_def dcl))\""], ["", "lemma [simp]: \"(find_path_ty P ty ctxclds_opt) = (find_path_ty_f P ty = ctxclds_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_ty P ty ctxclds_opt = (find_path_ty_f P ty = ctxclds_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_path_ty P ty ctxclds_opt \\<Longrightarrow>\n    find_path_ty_f P ty = ctxclds_opt\n 2. find_path_ty_f P ty = ctxclds_opt \\<Longrightarrow>\n    find_path_ty P ty ctxclds_opt", "apply(force elim: find_path_ty.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_ty_f P ty = ctxclds_opt \\<Longrightarrow>\n    find_path_ty P ty ctxclds_opt", "apply(case_tac ty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>find_path_ty_f P ty = ctxclds_opt; ty = ty_top\\<rbrakk>\n    \\<Longrightarrow> find_path_ty P ty ctxclds_opt\n 2. \\<And>x21 x22.\n       \\<lbrakk>find_path_ty_f P ty = ctxclds_opt;\n        ty = ty_def x21 x22\\<rbrakk>\n       \\<Longrightarrow> find_path_ty P ty ctxclds_opt", "apply(clarsimp simp add: fpty_objI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>find_path_ty_f P ty = ctxclds_opt;\n        ty = ty_def x21 x22\\<rbrakk>\n       \\<Longrightarrow> find_path_ty P ty ctxclds_opt", "apply(clarsimp simp add: fpty_dclI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nfields_in_path_f :: \"ctxclds \\<Rightarrow> fs\"\nwhere\n\"fields_in_path_f []               = []\" |\n\"fields_in_path_f (ctxcld#ctxclds) =\n  (map (\\<lambda>fd. case fd of fd_def cl f \\<Rightarrow> f) (class_fields_f (snd ctxcld)))\n     @ fields_in_path_f ctxclds\""], ["", "lemma cl_f_list_map: \"map (case_fd (\\<lambda>cl f. f)) (map (\\<lambda>(x, y). fd_def x y) cl_f_list) = map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (case_fd (\\<lambda>cl f. f))\n     (map (\\<lambda>(x, y). fd_def x y) cl_f_list) =\n    map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list", "by (induct cl_f_list, auto)"], ["", "lemma fip_ind_to_f: \"\\<forall>fs. fields_in_path clds fs \\<longrightarrow> fields_in_path_f clds = fs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>fs.\n       fields_in_path clds fs \\<longrightarrow> fields_in_path_f clds = fs", "apply(induct clds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>fs.\n       fields_in_path [] fs \\<longrightarrow> fields_in_path_f [] = fs\n 2. \\<And>a clds.\n       \\<forall>fs.\n          fields_in_path clds fs \\<longrightarrow>\n          fields_in_path_f clds = fs \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # clds) fs \\<longrightarrow>\n          fields_in_path_f (a # clds) = fs", "apply(clarsimp, erule fields_in_path.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fs. \\<lbrakk>[] = []; fs = []\\<rbrakk> \\<Longrightarrow> [] = fs\n 2. \\<And>fs cld cl_f_list ctxcld_list fsa fs' ctx.\n       \\<lbrakk>[] = [(ctx, cld)] @ ctxcld_list; fs = fs';\n        class_fields cld\n         (map (\\<lambda>(cl_XXX, f_XXX). fd_def cl_XXX f_XXX) cl_f_list);\n        fields_in_path ctxcld_list fsa;\n        fs' = map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list @ fsa\\<rbrakk>\n       \\<Longrightarrow> [] = fs\n 3. \\<And>a clds.\n       \\<forall>fs.\n          fields_in_path clds fs \\<longrightarrow>\n          fields_in_path_f clds = fs \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # clds) fs \\<longrightarrow>\n          fields_in_path_f (a # clds) = fs", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fs cld cl_f_list ctxcld_list fsa fs' ctx.\n       \\<lbrakk>[] = [(ctx, cld)] @ ctxcld_list; fs = fs';\n        class_fields cld\n         (map (\\<lambda>(cl_XXX, f_XXX). fd_def cl_XXX f_XXX) cl_f_list);\n        fields_in_path ctxcld_list fsa;\n        fs' = map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list @ fsa\\<rbrakk>\n       \\<Longrightarrow> [] = fs\n 2. \\<And>a clds.\n       \\<forall>fs.\n          fields_in_path clds fs \\<longrightarrow>\n          fields_in_path_f clds = fs \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # clds) fs \\<longrightarrow>\n          fields_in_path_f (a # clds) = fs", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a clds.\n       \\<forall>fs.\n          fields_in_path clds fs \\<longrightarrow>\n          fields_in_path_f clds = fs \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # clds) fs \\<longrightarrow>\n          fields_in_path_f (a # clds) = fs", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b clds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path clds fs \\<longrightarrow>\n                   fields_in_path_f clds = fs;\n        fields_in_path ((a, b) # clds) fs\\<rbrakk>\n       \\<Longrightarrow> map (case_fd (\\<lambda>cl f. f))\n                          (class_fields_f b) @\n                         fields_in_path_f clds =\n                         fs", "apply(erule fields_in_path.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b clds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path clds fs \\<longrightarrow>\n                   fields_in_path_f clds = fs;\n        (a, b) # clds = []; fs = []\\<rbrakk>\n       \\<Longrightarrow> map (case_fd (\\<lambda>cl f. f))\n                          (class_fields_f b) @\n                         fields_in_path_f clds =\n                         fs\n 2. \\<And>a b clds fs cld cl_f_list ctxcld_list fsa fs' ctx.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path clds fs \\<longrightarrow>\n                   fields_in_path_f clds = fs;\n        (a, b) # clds = [(ctx, cld)] @ ctxcld_list; fs = fs';\n        class_fields cld\n         (map (\\<lambda>(cl_XXX, f_XXX). fd_def cl_XXX f_XXX) cl_f_list);\n        fields_in_path ctxcld_list fsa;\n        fs' = map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list @ fsa\\<rbrakk>\n       \\<Longrightarrow> map (case_fd (\\<lambda>cl f. f))\n                          (class_fields_f b) @\n                         fields_in_path_f clds =\n                         fs", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b clds fs cld cl_f_list ctxcld_list fsa fs' ctx.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path clds fs \\<longrightarrow>\n                   fields_in_path_f clds = fs;\n        (a, b) # clds = [(ctx, cld)] @ ctxcld_list; fs = fs';\n        class_fields cld\n         (map (\\<lambda>(cl_XXX, f_XXX). fd_def cl_XXX f_XXX) cl_f_list);\n        fields_in_path ctxcld_list fsa;\n        fs' = map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list @ fsa\\<rbrakk>\n       \\<Longrightarrow> map (case_fd (\\<lambda>cl f. f))\n                          (class_fields_f b) @\n                         fields_in_path_f clds =\n                         fs", "by(clarsimp simp add: cl_f_list_map)"], ["", "lemma fd_map_split: \"map (case_fd (\\<lambda>cl f. f)) (map (\\<lambda>(x, y). fd_def x y) list) = map (\\<lambda>(cl, f). f) list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (case_fd (\\<lambda>cl f. f))\n     (map (\\<lambda>(x, y). fd_def x y) list) =\n    map (\\<lambda>(cl, f). f) list", "apply(induct list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map (\\<lambda>a. case a of fd_def cl f \\<Rightarrow> f)\n     (map (\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y) []) =\n    map (\\<lambda>a. case a of (cl, f) \\<Rightarrow> f) []\n 2. \\<And>a list.\n       map (\\<lambda>a. case a of fd_def cl f \\<Rightarrow> f)\n        (map (\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y) list) =\n       map (\\<lambda>a. case a of (cl, f) \\<Rightarrow> f)\n        list \\<Longrightarrow>\n       map (\\<lambda>a. case a of fd_def cl f \\<Rightarrow> f)\n        (map (\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y)\n          (a # list)) =\n       map (\\<lambda>a. case a of (cl, f) \\<Rightarrow> f) (a # list)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       map (\\<lambda>a. case a of fd_def cl f \\<Rightarrow> f)\n        (map (\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y) list) =\n       map (\\<lambda>a. case a of (cl, f) \\<Rightarrow> f)\n        list \\<Longrightarrow>\n       map (\\<lambda>a. case a of fd_def cl f \\<Rightarrow> f)\n        (map (\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y)\n          (a # list)) =\n       map (\\<lambda>a. case a of (cl, f) \\<Rightarrow> f) (a # list)", "apply(clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fd_map_split': \"map (\\<lambda>(x, y). fd_def x y) (map (case_fd Pair) list) = list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>(x, y). fd_def x y) (map (case_fd Pair) list) = list", "apply(induct list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map (\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y)\n     (map (\\<lambda>a. case a of fd_def a b \\<Rightarrow> (a, b)) []) =\n    []\n 2. \\<And>a list.\n       map (\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y)\n        (map (\\<lambda>a. case a of fd_def a b \\<Rightarrow> (a, b)) list) =\n       list \\<Longrightarrow>\n       map (\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y)\n        (map (\\<lambda>a. case a of fd_def a b \\<Rightarrow> (a, b))\n          (a # list)) =\n       a # list", "apply(simp split: fd.splits)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fd_map_split'': \"map ((\\<lambda>(x, y). fd_def x y) \\<circ> case_fd Pair) list = list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>(x, y). fd_def x y) \\<circ> case_fd Pair) list = list", "apply(induct list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map ((\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y) \\<circ>\n         (\\<lambda>a. case a of fd_def a b \\<Rightarrow> (a, b)))\n     [] =\n    []\n 2. \\<And>a list.\n       map ((\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y) \\<circ>\n            (\\<lambda>a. case a of fd_def a b \\<Rightarrow> (a, b)))\n        list =\n       list \\<Longrightarrow>\n       map ((\\<lambda>a. case a of (x, y) \\<Rightarrow> fd_def x y) \\<circ>\n            (\\<lambda>a. case a of fd_def a b \\<Rightarrow> (a, b)))\n        (a # list) =\n       a # list", "apply(simp split: fd.splits)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]: \"\\<forall>fs. (fields_in_path ctxclds fs) = (fields_in_path_f ctxclds = fs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>fs. fields_in_path ctxclds fs = (fields_in_path_f ctxclds = fs)", "apply(induct ctxclds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>fs. fields_in_path [] fs = (fields_in_path_f [] = fs)\n 2. \\<And>a ctxclds.\n       \\<forall>fs.\n          fields_in_path ctxclds fs =\n          (fields_in_path_f ctxclds = fs) \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # ctxclds) fs =\n          (fields_in_path_f (a # ctxclds) = fs)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fs. fields_in_path [] fs = (fields_in_path_f [] = fs)\n 2. \\<And>a ctxclds.\n       \\<forall>fs.\n          fields_in_path ctxclds fs =\n          (fields_in_path_f ctxclds = fs) \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # ctxclds) fs =\n          (fields_in_path_f (a # ctxclds) = fs)", "apply(rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fs.\n       fields_in_path [] fs \\<Longrightarrow> fields_in_path_f [] = fs\n 2. \\<And>fs.\n       fields_in_path_f [] = fs \\<Longrightarrow> fields_in_path [] fs\n 3. \\<And>a ctxclds.\n       \\<forall>fs.\n          fields_in_path ctxclds fs =\n          (fields_in_path_f ctxclds = fs) \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # ctxclds) fs =\n          (fields_in_path_f (a # ctxclds) = fs)", "apply(force elim: fields_in_path.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fs.\n       fields_in_path_f [] = fs \\<Longrightarrow> fields_in_path [] fs\n 2. \\<And>a ctxclds.\n       \\<forall>fs.\n          fields_in_path ctxclds fs =\n          (fields_in_path_f ctxclds = fs) \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # ctxclds) fs =\n          (fields_in_path_f (a # ctxclds) = fs)", "apply(simp add: fip_emptyI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ctxclds.\n       \\<forall>fs.\n          fields_in_path ctxclds fs =\n          (fields_in_path_f ctxclds = fs) \\<Longrightarrow>\n       \\<forall>fs.\n          fields_in_path (a # ctxclds) fs =\n          (fields_in_path_f (a # ctxclds) = fs)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ctxclds fs.\n       \\<forall>fs.\n          fields_in_path ctxclds fs =\n          (fields_in_path_f ctxclds = fs) \\<Longrightarrow>\n       fields_in_path ((a, b) # ctxclds) fs =\n       (map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        fields_in_path ((a, b) # ctxclds) fs\\<rbrakk>\n       \\<Longrightarrow> map (case_fd (\\<lambda>cl f. f))\n                          (class_fields_f b) @\n                         fields_in_path_f ctxclds =\n                         fs\n 2. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fields_in_path ((a, b) # ctxclds) fs", "apply(erule fields_in_path.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        (a, b) # ctxclds = []; fs = []\\<rbrakk>\n       \\<Longrightarrow> map (case_fd (\\<lambda>cl f. f))\n                          (class_fields_f b) @\n                         fields_in_path_f ctxclds =\n                         fs\n 2. \\<And>a b ctxclds fs cld cl_f_list ctxcld_list fsa fs' ctx.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        (a, b) # ctxclds = [(ctx, cld)] @ ctxcld_list; fs = fs';\n        class_fields cld\n         (map (\\<lambda>(cl_XXX, f_XXX). fd_def cl_XXX f_XXX) cl_f_list);\n        fields_in_path ctxcld_list fsa;\n        fs' = map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list @ fsa\\<rbrakk>\n       \\<Longrightarrow> map (case_fd (\\<lambda>cl f. f))\n                          (class_fields_f b) @\n                         fields_in_path_f ctxclds =\n                         fs\n 3. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fields_in_path ((a, b) # ctxclds) fs", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ctxclds fs cld cl_f_list ctxcld_list fsa fs' ctx.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        (a, b) # ctxclds = [(ctx, cld)] @ ctxcld_list; fs = fs';\n        class_fields cld\n         (map (\\<lambda>(cl_XXX, f_XXX). fd_def cl_XXX f_XXX) cl_f_list);\n        fields_in_path ctxcld_list fsa;\n        fs' = map (\\<lambda>(cl_XXX, f_XXX). f_XXX) cl_f_list @ fsa\\<rbrakk>\n       \\<Longrightarrow> map (case_fd (\\<lambda>cl f. f))\n                          (class_fields_f b) @\n                         fields_in_path_f ctxclds =\n                         fs\n 2. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fields_in_path ((a, b) # ctxclds) fs", "apply(simp add: fip_ind_to_f fd_map_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b ctxclds fs cld cl_f_list fsa fs'.\n       \\<lbrakk>\\<forall>fs. fields_in_path ctxclds fs = (fsa = fs);\n        b = cld; fs = map snd cl_f_list @ fsa;\n        class_fields_f cld = map (\\<lambda>(x, y). fd_def x y) cl_f_list;\n        fs' = map snd cl_f_list @ fsa\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set cl_f_list.\n                            (case case x of\n                                  (x, xa) \\<Rightarrow> fd_def x xa of\n                             fd_def cl f \\<Rightarrow> f) =\n                            snd x\n 2. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fields_in_path ((a, b) # ctxclds) fs", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fields_in_path ((a, b) # ctxclds) fs", "apply(rule_tac cld = b and ctxcld_list = ctxclds\n           and cl_f_list = \"map (case_fd (\\<lambda>cl f. (cl, f))) (class_fields_f b)\" in fip_consI[simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> class_fields_f b =\n                         map (\\<lambda>(x, y). fd_def x y)\n                          (map (case_fd Pair) (class_fields_f b))\n 2. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fields_in_path ctxclds (?fs32 a b ctxclds fs)\n 3. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fs =\n                         map snd (map (case_fd Pair) (class_fields_f b)) @\n                         ?fs32 a b ctxclds fs", "apply(simp add: fd_map_split'')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fields_in_path ctxclds (?fs32 a b ctxclds fs)\n 2. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fs =\n                         map snd (map (case_fd Pair) (class_fields_f b)) @\n                         ?fs32 a b ctxclds fs", "apply(simp add: fd_map_split')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ctxclds fs.\n       \\<lbrakk>\\<forall>fs.\n                   fields_in_path ctxclds fs =\n                   (fields_in_path_f ctxclds = fs);\n        map (case_fd (\\<lambda>cl f. f)) (class_fields_f b) @\n        fields_in_path_f ctxclds =\n        fs\\<rbrakk>\n       \\<Longrightarrow> fs =\n                         map snd (map (case_fd Pair) (class_fields_f b)) @\n                         fields_in_path_f ctxclds", "apply(clarsimp split: fd.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\nfields_f :: \"P \\<Rightarrow> ty \\<Rightarrow> fs option\"\nwhere\n\"fields_f P ty =\n  (case find_path_ty_f P ty of None \\<Rightarrow> None | Some ctxclds \\<Rightarrow>\n    Some (fields_in_path_f ctxclds))\""], ["", "lemma [simp]: \"\\<forall>fs_opt. (fields P ty fs_opt) = (fields_f P ty = fs_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>fs_opt. fields P ty fs_opt = (fields_f P ty = fs_opt)", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fs_opt. fields P ty fs_opt = (fields_f P ty = fs_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fs_opt.\n       fields P ty fs_opt \\<Longrightarrow> fields_f P ty = fs_opt\n 2. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(case_tac fs_opt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fs_opt.\n       \\<lbrakk>fields P ty fs_opt; fs_opt = None\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 2. \\<And>fs_opt a.\n       \\<lbrakk>fields P ty fs_opt; fs_opt = Some a\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 3. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fields P ty None \\<Longrightarrow> fields_f P ty = None\n 2. \\<And>fs_opt a.\n       \\<lbrakk>fields P ty fs_opt; fs_opt = Some a\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 3. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(erule fields.cases)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Pa tya.\n       \\<lbrakk>P = Pa; ty = tya; None = None;\n        find_path_ty Pa tya None\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = None\n 2. \\<And>Pa tya ctxclds fs.\n       \\<lbrakk>P = Pa; ty = tya; None = Some fs;\n        find_path_ty Pa tya (Some ctxclds);\n        fields_in_path ctxclds fs\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = None\n 3. \\<And>fs_opt a.\n       \\<lbrakk>fields P ty fs_opt; fs_opt = Some a\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 4. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. find_path_ty_f P ty = None \\<Longrightarrow> fields_f P ty = None\n 2. \\<And>Pa tya ctxclds fs.\n       \\<lbrakk>P = Pa; ty = tya; None = Some fs;\n        find_path_ty Pa tya (Some ctxclds);\n        fields_in_path ctxclds fs\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = None\n 3. \\<And>fs_opt a.\n       \\<lbrakk>fields P ty fs_opt; fs_opt = Some a\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 4. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(simp add: fields_f_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Pa tya ctxclds fs.\n       \\<lbrakk>P = Pa; ty = tya; None = Some fs;\n        find_path_ty Pa tya (Some ctxclds);\n        fields_in_path ctxclds fs\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = None\n 2. \\<And>fs_opt a.\n       \\<lbrakk>fields P ty fs_opt; fs_opt = Some a\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 3. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fs_opt a.\n       \\<lbrakk>fields P ty fs_opt; fs_opt = Some a\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 2. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(erule fields.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fs_opt a Pa tya.\n       \\<lbrakk>fs_opt = Some a; P = Pa; ty = tya; fs_opt = None;\n        find_path_ty Pa tya None\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 2. \\<And>fs_opt a Pa tya ctxclds fs.\n       \\<lbrakk>fs_opt = Some a; P = Pa; ty = tya; fs_opt = Some fs;\n        find_path_ty Pa tya (Some ctxclds);\n        fields_in_path ctxclds fs\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 3. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fs_opt a Pa tya ctxclds fs.\n       \\<lbrakk>fs_opt = Some a; P = Pa; ty = tya; fs_opt = Some fs;\n        find_path_ty Pa tya (Some ctxclds);\n        fields_in_path ctxclds fs\\<rbrakk>\n       \\<Longrightarrow> fields_f P ty = fs_opt\n 2. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ctxclds.\n       find_path_ty_f P ty = Some ctxclds \\<Longrightarrow>\n       fields_f P ty = Some (fields_in_path_f ctxclds)\n 2. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(simp add: fields_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fs_opt.\n       fields_f P ty = fs_opt \\<Longrightarrow> fields P ty fs_opt", "apply(simp add: fields_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. fields P ty\n     (case find_path_ty_f P ty of None \\<Rightarrow> None\n      | Some ctxclds \\<Rightarrow> Some (fields_in_path_f ctxclds))", "apply(case_tac \"find_path_ty_f P ty\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_path_ty_f P ty = None \\<Longrightarrow>\n    fields P ty\n     (case find_path_ty_f P ty of None \\<Rightarrow> None\n      | Some ctxclds \\<Rightarrow> Some (fields_in_path_f ctxclds))\n 2. \\<And>a.\n       find_path_ty_f P ty = Some a \\<Longrightarrow>\n       fields P ty\n        (case find_path_ty_f P ty of None \\<Rightarrow> None\n         | Some ctxclds \\<Rightarrow> Some (fields_in_path_f ctxclds))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_path_ty_f P ty = None \\<Longrightarrow> fields P ty None\n 2. \\<And>a.\n       find_path_ty_f P ty = Some a \\<Longrightarrow>\n       fields P ty\n        (case find_path_ty_f P ty of None \\<Rightarrow> None\n         | Some ctxclds \\<Rightarrow> Some (fields_in_path_f ctxclds))", "apply(simp add: fields_noneI[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_path_ty_f P ty = Some a \\<Longrightarrow>\n       fields P ty\n        (case find_path_ty_f P ty of None \\<Rightarrow> None\n         | Some ctxclds \\<Rightarrow> Some (fields_in_path_f ctxclds))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_path_ty_f P ty = Some a \\<Longrightarrow>\n       fields P ty (Some (fields_in_path_f a))", "apply(case_tac \"find_path_ty_f P ty\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>find_path_ty_f P ty = Some a;\n        find_path_ty_f P ty = None\\<rbrakk>\n       \\<Longrightarrow> fields P ty (Some (fields_in_path_f a))\n 2. \\<And>a aa.\n       \\<lbrakk>find_path_ty_f P ty = Some a;\n        find_path_ty_f P ty = Some aa\\<rbrakk>\n       \\<Longrightarrow> fields P ty (Some (fields_in_path_f a))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa.\n       \\<lbrakk>find_path_ty_f P ty = Some a;\n        find_path_ty_f P ty = Some aa\\<rbrakk>\n       \\<Longrightarrow> fields P ty (Some (fields_in_path_f a))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_path_ty_f P ty = Some a \\<Longrightarrow>\n       fields P ty (Some (fields_in_path_f a))", "apply(rule fields_someI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       find_path_ty_f P ty = Some a \\<Longrightarrow>\n       find_path_ty P ty (Some (?ctxclds27 a))\n 2. \\<And>a.\n       find_path_ty_f P ty = Some a \\<Longrightarrow>\n       fields_in_path (?ctxclds27 a) (fields_in_path_f a)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_path_ty_f P ty = Some a \\<Longrightarrow>\n       fields_in_path a (fields_in_path_f a)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nmethods_in_path_f :: \"clds \\<Rightarrow> meths\"\nwhere\n\"methods_in_path_f []         = []\" |\n\"methods_in_path_f (cld#clds) =\n  map (\\<lambda>md. case md of meth_def_def meth_sig meth_body \\<Rightarrow>\n         case meth_sig of meth_sig_def cl meth vds \\<Rightarrow> meth)\n              (class_methods_f cld) @ methods_in_path_f clds\""], ["", "lemma meth_def_map[THEN mp]:\n  \"(\\<forall>x \\<in> set list. (\\<lambda>(md, cl, m, vds, mb). md = meth_def_def (meth_sig_def cl m vds) mb) x)\n     \\<longrightarrow> map (case_meth_def (\\<lambda>ms mb. case ms of meth_sig_def cl m vds \\<Rightarrow> m)) (map (\\<lambda>(md, cl, m, vds, mb). md) list) = map (\\<lambda>(md, cl, m, vds, mb). m) list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set list.\n        case x of\n        (md, cl, m, vds, mb) \\<Rightarrow>\n          md = meth_def_def (meth_sig_def cl m vds) mb) \\<longrightarrow>\n    map (case_meth_def\n          (\\<lambda>ms mb.\n              case ms of meth_sig_def cl m vds \\<Rightarrow> m))\n     (map (\\<lambda>(md, cl, m, vds, mb). md) list) =\n    map (\\<lambda>(md, cl, m, vds, mb). m) list", "by (induct list, auto)"], ["", "lemma meth_def_map':\n  \"map ((\\<lambda>(md, cl, m, vds, mb). md) \\<circ> (\\<lambda>md. case md of meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow> (md, cl, m, vds, mb))) list = list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>(md, cl, m, vds, mb). md) \\<circ>\n         (\\<lambda>md.\n             case md of\n             meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n               (md, cl, m, vds, mb)))\n     list =\n    list", "apply(induct list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. map ((\\<lambda>a.\n             case a of (md, cl, m, vds, mb) \\<Rightarrow> md) \\<circ>\n         (\\<lambda>md.\n             case md of\n             meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n               (md, cl, m, vds, mb)))\n     [] =\n    []\n 2. \\<And>a list.\n       map ((\\<lambda>a.\n                case a of (md, cl, m, vds, mb) \\<Rightarrow> md) \\<circ>\n            (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n                  (md, cl, m, vds, mb)))\n        list =\n       list \\<Longrightarrow>\n       map ((\\<lambda>a.\n                case a of (md, cl, m, vds, mb) \\<Rightarrow> md) \\<circ>\n            (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n                  (md, cl, m, vds, mb)))\n        (a # list) =\n       a # list", "by (auto split: meth_def.splits meth_sig.splits)"], ["", "lemma [simp]: \"\\<forall>meths. (methods_in_path clds meths) = (methods_in_path_f clds = meths)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>meths.\n       methods_in_path clds meths = (methods_in_path_f clds = meths)", "apply(induct clds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>meths.\n       methods_in_path [] meths = (methods_in_path_f [] = meths)\n 2. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       \\<forall>meths.\n          methods_in_path (a # clds) meths =\n          (methods_in_path_f (a # clds) = meths)", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>meths. methods_in_path [] meths = ([] = meths)\n 2. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       \\<forall>meths.\n          methods_in_path (a # clds) meths =\n          (methods_in_path_f (a # clds) = meths)", "apply(rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>meths. methods_in_path [] meths \\<Longrightarrow> [] = meths\n 2. \\<And>meths. [] = meths \\<Longrightarrow> methods_in_path [] meths\n 3. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       \\<forall>meths.\n          methods_in_path (a # clds) meths =\n          (methods_in_path_f (a # clds) = meths)", "apply(erule methods_in_path.cases)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>meths.\n       \\<lbrakk>[] = []; meths = []\\<rbrakk> \\<Longrightarrow> [] = meths\n 2. \\<And>meths cld meth_def_cl_meth_vds_meth_body_list cld_list meths'\n       methsa.\n       \\<lbrakk>[] = [cld] @ cld_list; meths = methsa;\n        class_methods cld\n         (map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                  meth_body_XXX). meth_def_XXX)\n           meth_def_cl_meth_vds_meth_body_list);\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                  meth_body_XXX).\n                  meth_def_XXX =\n                  meth_def_def (meth_sig_def cl_XXX meth_XXX vds_XXX)\n                   meth_body_XXX)\n           meth_def_cl_meth_vds_meth_body_list);\n        methods_in_path cld_list meths';\n        methsa =\n        map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                meth_body_XXX). meth_XXX)\n         meth_def_cl_meth_vds_meth_body_list @\n        meths'\\<rbrakk>\n       \\<Longrightarrow> [] = meths\n 3. \\<And>meths. [] = meths \\<Longrightarrow> methods_in_path [] meths\n 4. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       \\<forall>meths.\n          methods_in_path (a # clds) meths =\n          (methods_in_path_f (a # clds) = meths)", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>meths cld meth_def_cl_meth_vds_meth_body_list cld_list meths'\n       methsa.\n       \\<lbrakk>[] = [cld] @ cld_list; meths = methsa;\n        class_methods cld\n         (map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                  meth_body_XXX). meth_def_XXX)\n           meth_def_cl_meth_vds_meth_body_list);\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                  meth_body_XXX).\n                  meth_def_XXX =\n                  meth_def_def (meth_sig_def cl_XXX meth_XXX vds_XXX)\n                   meth_body_XXX)\n           meth_def_cl_meth_vds_meth_body_list);\n        methods_in_path cld_list meths';\n        methsa =\n        map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                meth_body_XXX). meth_XXX)\n         meth_def_cl_meth_vds_meth_body_list @\n        meths'\\<rbrakk>\n       \\<Longrightarrow> [] = meths\n 2. \\<And>meths. [] = meths \\<Longrightarrow> methods_in_path [] meths\n 3. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       \\<forall>meths.\n          methods_in_path (a # clds) meths =\n          (methods_in_path_f (a # clds) = meths)", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>meths. [] = meths \\<Longrightarrow> methods_in_path [] meths\n 2. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       \\<forall>meths.\n          methods_in_path (a # clds) meths =\n          (methods_in_path_f (a # clds) = meths)", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. methods_in_path [] []\n 2. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       \\<forall>meths.\n          methods_in_path (a # clds) meths =\n          (methods_in_path_f (a # clds) = meths)", "apply(rule mip_emptyI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       \\<forall>meths.\n          methods_in_path (a # clds) meths =\n          (methods_in_path_f (a # clds) = meths)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a clds meths.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       methods_in_path (a # clds) meths =\n       (map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        methods_in_path (a # clds) meths\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>md.\n                                 case md of\n                                 meth_def_def (meth_sig_def cl meth vds)\n                                  meth_body \\<Rightarrow>\n                                   meth)\n                          (class_methods_f a) @\n                         methods_in_path_f clds =\n                         meths\n 2. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path (a # clds) meths", "apply(erule methods_in_path.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        a # clds = []; meths = []\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>md.\n                                 case md of\n                                 meth_def_def (meth_sig_def cl meth vds)\n                                  meth_body \\<Rightarrow>\n                                   meth)\n                          (class_methods_f a) @\n                         methods_in_path_f clds =\n                         meths\n 2. \\<And>a clds meths cld meth_def_cl_meth_vds_meth_body_list cld_list\n       meths' methsa.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        a # clds = [cld] @ cld_list; meths = methsa;\n        class_methods cld\n         (map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                  meth_body_XXX). meth_def_XXX)\n           meth_def_cl_meth_vds_meth_body_list);\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                  meth_body_XXX).\n                  meth_def_XXX =\n                  meth_def_def (meth_sig_def cl_XXX meth_XXX vds_XXX)\n                   meth_body_XXX)\n           meth_def_cl_meth_vds_meth_body_list);\n        methods_in_path cld_list meths';\n        methsa =\n        map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                meth_body_XXX). meth_XXX)\n         meth_def_cl_meth_vds_meth_body_list @\n        meths'\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>md.\n                                 case md of\n                                 meth_def_def (meth_sig_def cl meth vds)\n                                  meth_body \\<Rightarrow>\n                                   meth)\n                          (class_methods_f a) @\n                         methods_in_path_f clds =\n                         meths\n 3. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path (a # clds) meths", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a clds meths cld meth_def_cl_meth_vds_meth_body_list cld_list\n       meths' methsa.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        a # clds = [cld] @ cld_list; meths = methsa;\n        class_methods cld\n         (map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                  meth_body_XXX). meth_def_XXX)\n           meth_def_cl_meth_vds_meth_body_list);\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                  meth_body_XXX).\n                  meth_def_XXX =\n                  meth_def_def (meth_sig_def cl_XXX meth_XXX vds_XXX)\n                   meth_body_XXX)\n           meth_def_cl_meth_vds_meth_body_list);\n        methods_in_path cld_list meths';\n        methsa =\n        map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                meth_body_XXX). meth_XXX)\n         meth_def_cl_meth_vds_meth_body_list @\n        meths'\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>md.\n                                 case md of\n                                 meth_def_def (meth_sig_def cl meth vds)\n                                  meth_body \\<Rightarrow>\n                                   meth)\n                          (class_methods_f a) @\n                         methods_in_path_f clds =\n                         meths\n 2. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path (a # clds) meths", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path (a # clds) meths", "apply(rule_tac\n  meth_def_cl_meth_vds_meth_body_list =\n   \"(case a of cld_def dcl cl fds mds \\<Rightarrow>\n    (map (\\<lambda>md. (case md of meth_def_def ms mb \\<Rightarrow>\n               (case ms of meth_sig_def cl m vds \\<Rightarrow> (md, cl, m, vds, mb)))) mds))\" in\n  mip_consI[simplified])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> class_methods_f a =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_def_XXX)\n                          (case a of\n                           cld_def dcl cl fds mds \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              mds)\n 2. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (case a of\n    cld_def dcl cl fds mds \\<Rightarrow>\n      map (\\<lambda>md.\n              case md of\n              meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n                (md, cl, m, vds, mb))\n       mds).\n                            case x of\n                            (meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                             meth_body_XXX) \\<Rightarrow>\n                              meth_def_XXX =\n                              meth_def_def\n                               (meth_sig_def cl_XXX meth_XXX vds_XXX)\n                               meth_body_XXX\n 3. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path clds (?meths'29 a clds meths)\n 4. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> meths =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_XXX)\n                          (case a of\n                           cld_def dcl cl fds mds \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              mds) @\n                         ?meths'29 a clds meths", "apply(clarsimp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       class_methods_f a =\n       map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n               meth_body_XXX). meth_def_XXX)\n        (case a of\n         cld_def dcl cl fds x \\<Rightarrow>\n           map (\\<lambda>md.\n                   case md of\n                   meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n                     (md, cl, m, vds, mb))\n            x)\n 2. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (case a of\n    cld_def dcl cl fds mds \\<Rightarrow>\n      map (\\<lambda>md.\n              case md of\n              meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n                (md, cl, m, vds, mb))\n       mds).\n                            case x of\n                            (meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                             meth_body_XXX) \\<Rightarrow>\n                              meth_def_XXX =\n                              meth_def_def\n                               (meth_sig_def cl_XXX meth_XXX vds_XXX)\n                               meth_body_XXX\n 3. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path clds (?meths'29 a clds meths)\n 4. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> meths =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_XXX)\n                          (case a of\n                           cld_def dcl cl fds mds \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              mds) @\n                         ?meths'29 a clds meths", "apply(case_tac a)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a clds x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        a = cld_def x1 x2 x3 x4\\<rbrakk>\n       \\<Longrightarrow> class_methods_f a =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_def_XXX)\n                          (case a of\n                           cld_def dcl cl fds x \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              x)\n 2. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (case a of\n    cld_def dcl cl fds mds \\<Rightarrow>\n      map (\\<lambda>md.\n              case md of\n              meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n                (md, cl, m, vds, mb))\n       mds).\n                            case x of\n                            (meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                             meth_body_XXX) \\<Rightarrow>\n                              meth_def_XXX =\n                              meth_def_def\n                               (meth_sig_def cl_XXX meth_XXX vds_XXX)\n                               meth_body_XXX\n 3. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path clds (?meths'29 a clds meths)\n 4. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> meths =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_XXX)\n                          (case a of\n                           cld_def dcl cl fds mds \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              mds) @\n                         ?meths'29 a clds meths", "apply(simp add: class_methods_f_def meth_def_map')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (case a of\n    cld_def dcl cl fds mds \\<Rightarrow>\n      map (\\<lambda>md.\n              case md of\n              meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n                (md, cl, m, vds, mb))\n       mds).\n                            case x of\n                            (meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n                             meth_body_XXX) \\<Rightarrow>\n                              meth_def_XXX =\n                              meth_def_def\n                               (meth_sig_def cl_XXX meth_XXX vds_XXX)\n                               meth_body_XXX\n 2. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path clds (?meths'29 a clds meths)\n 3. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> meths =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_XXX)\n                          (case a of\n                           cld_def dcl cl fds mds \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              mds) @\n                         ?meths'29 a clds meths", "apply(clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>clds aa ab ac ad b uu_ md.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        (aa, ab, ac, ad, b) =\n        (case md of\n         meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n           (md, cl, m, vds, mb));\n        md \\<in> set uu_\\<rbrakk>\n       \\<Longrightarrow> aa = meth_def_def (meth_sig_def ab ac ad) b\n 2. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path clds (?meths'29 a clds meths)\n 3. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> meths =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_XXX)\n                          (case a of\n                           cld_def dcl cl fds mds \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              mds) @\n                         ?meths'29 a clds meths", "apply(clarsimp split: meth_def.splits meth_sig.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> methods_in_path clds (?meths'29 a clds meths)\n 2. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> meths =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_XXX)\n                          (case a of\n                           cld_def dcl cl fds mds \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              mds) @\n                         ?meths'29 a clds meths", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a clds meths.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        map (\\<lambda>md.\n                case md of\n                meth_def_def (meth_sig_def cl meth vds)\n                 meth_body \\<Rightarrow>\n                  meth)\n         (class_methods_f a) @\n        methods_in_path_f clds =\n        meths\\<rbrakk>\n       \\<Longrightarrow> meths =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_XXX)\n                          (case a of\n                           cld_def dcl cl fds mds \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              mds) @\n                         methods_in_path_f clds", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a clds.\n       \\<forall>meths.\n          methods_in_path clds meths =\n          (methods_in_path_f clds = meths) \\<Longrightarrow>\n       map (case_meth_def\n             (\\<lambda>meth_sig meth_body.\n                 case meth_sig of\n                 meth_sig_def cl meth vds \\<Rightarrow> meth))\n        (class_methods_f a) =\n       map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX, vds_XXX,\n               meth_body_XXX). meth_XXX)\n        (case a of\n         cld_def dcl cl fds x \\<Rightarrow>\n           map (\\<lambda>md.\n                   case md of\n                   meth_def_def (meth_sig_def cl m vds) mb \\<Rightarrow>\n                     (md, cl, m, vds, mb))\n            x)", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a clds x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>meths.\n                   methods_in_path clds meths =\n                   (methods_in_path_f clds = meths);\n        a = cld_def x1 x2 x3 x4\\<rbrakk>\n       \\<Longrightarrow> map (case_meth_def\n                               (\\<lambda>meth_sig meth_body.\n                                   case meth_sig of\n                                   meth_sig_def cl meth vds \\<Rightarrow>\n                                     meth))\n                          (class_methods_f a) =\n                         map (\\<lambda>(meth_def_XXX, cl_XXX, meth_XXX,\n                                 vds_XXX, meth_body_XXX). meth_XXX)\n                          (case a of\n                           cld_def dcl cl fds x \\<Rightarrow>\n                             map (\\<lambda>md.\n                                     case md of\n                                     meth_def_def (meth_sig_def cl m vds)\nmb \\<Rightarrow>\n (md, cl, m, vds, mb))\n                              x)", "apply(clarsimp simp add: class_methods_f_def split: meth_def.splits meth_sig.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\nmethods_f :: \"P \\<Rightarrow> ty \\<Rightarrow> meths option\"\nwhere\n\"methods_f P ty =\n  (case find_path_ty_f P ty of None \\<Rightarrow> None | Some ctxclds \\<Rightarrow>\n    Some (methods_in_path_f (map (\\<lambda>(ctx, cld). cld) ctxclds)))\""], ["", "lemma [simp]: \"(methods P ty meths) = (methods_f P ty = Some meths)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. methods P ty meths = (methods_f P ty = Some meths)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. methods P ty meths \\<Longrightarrow> methods_f P ty = Some meths\n 2. methods_f P ty = Some meths \\<Longrightarrow> methods P ty meths", "apply(erule methods.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Pa tya ctx_cld_list methsa.\n       \\<lbrakk>P = Pa; ty = tya; meths = methsa;\n        find_path_ty Pa tya\n         (Some\n           (map (\\<lambda>(ctx_XXX, cld_XXX). (ctx_XXX, cld_XXX))\n             ctx_cld_list));\n        methods_in_path\n         (map (\\<lambda>(ctx_XXX, cld_XXX). cld_XXX) ctx_cld_list)\n         methsa\\<rbrakk>\n       \\<Longrightarrow> methods_f P ty = Some meths\n 2. methods_f P ty = Some meths \\<Longrightarrow> methods P ty meths", "apply(clarsimp simp add: methods_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. methods_f P ty = Some meths \\<Longrightarrow> methods P ty meths", "apply(simp add: methods_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case find_path_ty_f P ty of None \\<Rightarrow> None\n     | Some ctxclds \\<Rightarrow>\n         Some\n          (methods_in_path_f (map (\\<lambda>(ctx, cld). cld) ctxclds))) =\n    Some meths \\<Longrightarrow>\n    methods P ty meths", "apply(split option.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>find_path_ty_f P ty = None; None = Some meths\\<rbrakk>\n    \\<Longrightarrow> methods P ty meths\n 2. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        Some (methods_in_path_f (map (\\<lambda>(ctx, cld). cld) x2)) =\n        Some meths\\<rbrakk>\n       \\<Longrightarrow> methods P ty meths", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        Some (methods_in_path_f (map (\\<lambda>(ctx, cld). cld) x2)) =\n        Some meths\\<rbrakk>\n       \\<Longrightarrow> methods P ty meths", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        meths = methods_in_path_f (map snd x2)\\<rbrakk>\n       \\<Longrightarrow> methods P ty (methods_in_path_f (map snd x2))", "apply(rule methods_methodsI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        meths = methods_in_path_f (map snd x2)\\<rbrakk>\n       \\<Longrightarrow> find_path_ty P ty\n                          (Some\n                            (map (\\<lambda>(ctx_XXX, cld_XXX).\n                                     (ctx_XXX, cld_XXX))\n                              (?ctx_cld_list20 x2)))\n 2. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        meths = methods_in_path_f (map snd x2)\\<rbrakk>\n       \\<Longrightarrow> methods_in_path\n                          (map (\\<lambda>(ctx_XXX, cld_XXX). cld_XXX)\n                            (?ctx_cld_list20 x2))\n                          (methods_in_path_f (map snd x2))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        meths = methods_in_path_f (map snd x2)\\<rbrakk>\n       \\<Longrightarrow> methods_in_path\n                          (map (\\<lambda>(ctx_XXX, cld_XXX). cld_XXX) x2)\n                          (methods_in_path_f (map snd x2))", "apply(clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nftype_in_fds_f :: \"P \\<Rightarrow> ctx \\<Rightarrow> fds \\<Rightarrow> f \\<Rightarrow> ty_opt_bot\"\nwhere\n\"ftype_in_fds_f P ctx []       f = ty_opt_bot_opt None\" |\n\"ftype_in_fds_f P ctx (fd#fds) f =\n  (case fd of fd_def cl f' \\<Rightarrow> (if f = f' then\n  (case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot | Some ty \\<Rightarrow>\n     ty_opt_bot_opt (Some ty)) else ftype_in_fds_f P ctx fds f))\""], ["", "lemma [simp]: \"(ftype_in_fds P ctx fds f ty_opt) = (ftype_in_fds_f P ctx fds f = ty_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ftype_in_fds P ctx fds f ty_opt = (ftype_in_fds_f P ctx fds f = ty_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n    ftype_in_fds_f P ctx fds f = ty_opt\n 2. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(induct fds)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ftype_in_fds P ctx [] f ty_opt \\<Longrightarrow>\n    ftype_in_fds_f P ctx [] f = ty_opt\n 2. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        ftype_in_fds P ctx (a # fds) f ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 3. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(erule ftype_in_fds.cases)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>Pa ctxa fa.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = []; f = fa;\n        ty_opt = ty_opt_bot_opt None\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 2. \\<And>Pa ctxa cl fa fd_list.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_bot; find_type Pa ctxa cl None\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 3. \\<And>Pa ctxa cl ty fa fd_list.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_opt (Some ty);\n        find_type Pa ctxa cl (Some ty)\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 4. \\<And>fa f' Pa ctxa fd_list ty_opt_bot cl.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = f';\n        ty_opt = ty_opt_bot; fa \\<noteq> f';\n        ftype_in_fds Pa ctxa fd_list f' ty_opt_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 5. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        ftype_in_fds P ctx (a # fds) f ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 6. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Pa ctxa cl fa fd_list.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_bot; find_type Pa ctxa cl None\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 2. \\<And>Pa ctxa cl ty fa fd_list.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_opt (Some ty);\n        find_type Pa ctxa cl (Some ty)\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 3. \\<And>fa f' Pa ctxa fd_list ty_opt_bot cl.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = f';\n        ty_opt = ty_opt_bot; fa \\<noteq> f';\n        ftype_in_fds Pa ctxa fd_list f' ty_opt_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 4. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        ftype_in_fds P ctx (a # fds) f ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 5. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Pa ctxa cl ty fa fd_list.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_opt (Some ty);\n        find_type Pa ctxa cl (Some ty)\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 2. \\<And>fa f' Pa ctxa fd_list ty_opt_bot cl.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = f';\n        ty_opt = ty_opt_bot; fa \\<noteq> f';\n        ftype_in_fds Pa ctxa fd_list f' ty_opt_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 3. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        ftype_in_fds P ctx (a # fds) f ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 4. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fa f' Pa ctxa fd_list ty_opt_bot cl.\n       \\<lbrakk>P = Pa; ctx = ctxa; [] = [fd_def cl fa] @ fd_list; f = f';\n        ty_opt = ty_opt_bot; fa \\<noteq> f';\n        ftype_in_fds Pa ctxa fd_list f' ty_opt_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx [] f = ty_opt\n 2. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        ftype_in_fds P ctx (a # fds) f ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 3. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        ftype_in_fds P ctx (a # fds) f ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 2. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(erule ftype_in_fds.cases)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a fds Pa ctxa fa.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = []; f = fa;\n        ty_opt = ty_opt_bot_opt None\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 2. \\<And>a fds Pa ctxa cl fa fd_list.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_bot; find_type Pa ctxa cl None\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 3. \\<And>a fds Pa ctxa cl ty fa fd_list.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_opt (Some ty);\n        find_type Pa ctxa cl (Some ty)\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 4. \\<And>a fds fa f' Pa ctxa fd_list ty_opt_bot cl.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = f';\n        ty_opt = ty_opt_bot; fa \\<noteq> f';\n        ftype_in_fds Pa ctxa fd_list f' ty_opt_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 5. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a fds Pa ctxa cl fa fd_list.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_bot; find_type Pa ctxa cl None\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 2. \\<And>a fds Pa ctxa cl ty fa fd_list.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_opt (Some ty);\n        find_type Pa ctxa cl (Some ty)\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 3. \\<And>a fds fa f' Pa ctxa fd_list ty_opt_bot cl.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = f';\n        ty_opt = ty_opt_bot; fa \\<noteq> f';\n        ftype_in_fds Pa ctxa fd_list f' ty_opt_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 4. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a fds Pa ctxa cl ty fa fd_list.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = fa;\n        ty_opt = ty_opt_bot_opt (Some ty);\n        find_type Pa ctxa cl (Some ty)\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 2. \\<And>a fds fa f' Pa ctxa fd_list ty_opt_bot cl.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = f';\n        ty_opt = ty_opt_bot; fa \\<noteq> f';\n        ftype_in_fds Pa ctxa fd_list f' ty_opt_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 3. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a fds fa f' Pa ctxa fd_list ty_opt_bot cl.\n       \\<lbrakk>ftype_in_fds P ctx fds f ty_opt \\<Longrightarrow>\n                ftype_in_fds_f P ctx fds f = ty_opt;\n        P = Pa; ctx = ctxa; a # fds = [fd_def cl fa] @ fd_list; f = f';\n        ty_opt = ty_opt_bot; fa \\<noteq> f';\n        ftype_in_fds Pa ctxa fd_list f' ty_opt_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds_f P ctx (a # fds) f = ty_opt\n 2. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx fds f ty_opt", "apply(induct fds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ftype_in_fds_f P ctx [] f = ty_opt \\<Longrightarrow>\n    ftype_in_fds P ctx [] f ty_opt\n 2. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n                ftype_in_fds P ctx fds f ty_opt;\n        ftype_in_fds_f P ctx (a # fds) f = ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds P ctx (a # fds) f ty_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ty_opt = ty_opt_bot_opt None \\<Longrightarrow>\n    ftype_in_fds P ctx [] f (ty_opt_bot_opt None)\n 2. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n                ftype_in_fds P ctx fds f ty_opt;\n        ftype_in_fds_f P ctx (a # fds) f = ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds P ctx (a # fds) f ty_opt", "apply(rule ftif_emptyI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a fds.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n                ftype_in_fds P ctx fds f ty_opt;\n        ftype_in_fds_f P ctx (a # fds) f = ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds P ctx (a # fds) f ty_opt", "apply(rename_tac fd fds)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fd fds.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f = ty_opt \\<Longrightarrow>\n                ftype_in_fds P ctx fds f ty_opt;\n        ftype_in_fds_f P ctx (fd # fds) f = ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds P ctx (fd # fds) f ty_opt", "apply(case_tac fd, rename_tac cl f', clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fds cl f'.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (if f = f'\n                 then case find_type_f P ctx cl of\n                      None \\<Rightarrow> ty_opt_bot_bot\n                      | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n                 else ftype_in_fds_f P ctx fds f) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f (ftype_in_fds_f P ctx fds f);\n        ty_opt =\n        (if f = f'\n         then case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n              | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n         else ftype_in_fds_f P ctx fds f)\\<rbrakk>\n       \\<Longrightarrow> (f = f' \\<longrightarrow>\n                          ftype_in_fds P ctx (fd_def cl f' # fds) f'\n                           (case find_type_f P ctx cl of\n                            None \\<Rightarrow> ty_opt_bot_bot\n                            | Some ty \\<Rightarrow>\n                                ty_opt_bot_opt (Some ty))) \\<and>\n                         (f \\<noteq> f' \\<longrightarrow>\n                          ftype_in_fds P ctx (fd_def cl f' # fds) f\n                           (ftype_in_fds_f P ctx fds f))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fds cl f'.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (if f = f'\n                 then case find_type_f P ctx cl of\n                      None \\<Rightarrow> ty_opt_bot_bot\n                      | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n                 else ftype_in_fds_f P ctx fds f) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f (ftype_in_fds_f P ctx fds f);\n        ty_opt =\n        (if f = f'\n         then case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n              | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n         else ftype_in_fds_f P ctx fds f)\\<rbrakk>\n       \\<Longrightarrow> f = f' \\<longrightarrow>\n                         ftype_in_fds P ctx (fd_def cl f' # fds) f'\n                          (case find_type_f P ctx cl of\n                           None \\<Rightarrow> ty_opt_bot_bot\n                           | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty))\n 2. \\<And>fds cl f'.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (if f = f'\n                 then case find_type_f P ctx cl of\n                      None \\<Rightarrow> ty_opt_bot_bot\n                      | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n                 else ftype_in_fds_f P ctx fds f) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f (ftype_in_fds_f P ctx fds f);\n        ty_opt =\n        (if f = f'\n         then case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n              | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n         else ftype_in_fds_f P ctx fds f)\\<rbrakk>\n       \\<Longrightarrow> f \\<noteq> f' \\<longrightarrow>\n                         ftype_in_fds P ctx (fd_def cl f' # fds) f\n                          (ftype_in_fds_f P ctx fds f)", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fds cl.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (case find_type_f P ctx cl of\n                 None \\<Rightarrow> ty_opt_bot_bot\n                 | Some ty \\<Rightarrow>\n                     ty_opt_bot_opt (Some ty)) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f\n                 (case find_type_f P ctx cl of\n                  None \\<Rightarrow> ty_opt_bot_bot\n                  | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty));\n        ty_opt =\n        (case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n         | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty))\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds P ctx (fd_def cl f # fds) f\n                          (case find_type_f P ctx cl of\n                           None \\<Rightarrow> ty_opt_bot_bot\n                           | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty))\n 2. \\<And>fds cl f'.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (if f = f'\n                 then case find_type_f P ctx cl of\n                      None \\<Rightarrow> ty_opt_bot_bot\n                      | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n                 else ftype_in_fds_f P ctx fds f) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f (ftype_in_fds_f P ctx fds f);\n        ty_opt =\n        (if f = f'\n         then case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n              | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n         else ftype_in_fds_f P ctx fds f)\\<rbrakk>\n       \\<Longrightarrow> f \\<noteq> f' \\<longrightarrow>\n                         ftype_in_fds P ctx (fd_def cl f' # fds) f\n                          (ftype_in_fds_f P ctx fds f)", "apply(case_tac \"find_type_f P ctx cl\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>fds cl.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (case find_type_f P ctx cl of\n                 None \\<Rightarrow> ty_opt_bot_bot\n                 | Some ty \\<Rightarrow>\n                     ty_opt_bot_opt (Some ty)) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f\n                 (case find_type_f P ctx cl of\n                  None \\<Rightarrow> ty_opt_bot_bot\n                  | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty));\n        ty_opt =\n        (case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n         | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty));\n        find_type_f P ctx cl = None\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds P ctx (fd_def cl f # fds) f\n                          (case find_type_f P ctx cl of\n                           None \\<Rightarrow> ty_opt_bot_bot\n                           | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty))\n 2. \\<And>fds cl a.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (case find_type_f P ctx cl of\n                 None \\<Rightarrow> ty_opt_bot_bot\n                 | Some ty \\<Rightarrow>\n                     ty_opt_bot_opt (Some ty)) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f\n                 (case find_type_f P ctx cl of\n                  None \\<Rightarrow> ty_opt_bot_bot\n                  | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty));\n        ty_opt =\n        (case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n         | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty));\n        find_type_f P ctx cl = Some a\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds P ctx (fd_def cl f # fds) f\n                          (case find_type_f P ctx cl of\n                           None \\<Rightarrow> ty_opt_bot_bot\n                           | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty))\n 3. \\<And>fds cl f'.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (if f = f'\n                 then case find_type_f P ctx cl of\n                      None \\<Rightarrow> ty_opt_bot_bot\n                      | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n                 else ftype_in_fds_f P ctx fds f) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f (ftype_in_fds_f P ctx fds f);\n        ty_opt =\n        (if f = f'\n         then case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n              | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n         else ftype_in_fds_f P ctx fds f)\\<rbrakk>\n       \\<Longrightarrow> f \\<noteq> f' \\<longrightarrow>\n                         ftype_in_fds P ctx (fd_def cl f' # fds) f\n                          (ftype_in_fds_f P ctx fds f)", "apply(simp add: ftif_cons_botI[simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fds cl a.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (case find_type_f P ctx cl of\n                 None \\<Rightarrow> ty_opt_bot_bot\n                 | Some ty \\<Rightarrow>\n                     ty_opt_bot_opt (Some ty)) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f\n                 (case find_type_f P ctx cl of\n                  None \\<Rightarrow> ty_opt_bot_bot\n                  | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty));\n        ty_opt =\n        (case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n         | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty));\n        find_type_f P ctx cl = Some a\\<rbrakk>\n       \\<Longrightarrow> ftype_in_fds P ctx (fd_def cl f # fds) f\n                          (case find_type_f P ctx cl of\n                           None \\<Rightarrow> ty_opt_bot_bot\n                           | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty))\n 2. \\<And>fds cl f'.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (if f = f'\n                 then case find_type_f P ctx cl of\n                      None \\<Rightarrow> ty_opt_bot_bot\n                      | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n                 else ftype_in_fds_f P ctx fds f) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f (ftype_in_fds_f P ctx fds f);\n        ty_opt =\n        (if f = f'\n         then case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n              | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n         else ftype_in_fds_f P ctx fds f)\\<rbrakk>\n       \\<Longrightarrow> f \\<noteq> f' \\<longrightarrow>\n                         ftype_in_fds P ctx (fd_def cl f' # fds) f\n                          (ftype_in_fds_f P ctx fds f)", "apply(simp add: ftif_cons_trueI[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fds cl f'.\n       \\<lbrakk>ftype_in_fds_f P ctx fds f =\n                (if f = f'\n                 then case find_type_f P ctx cl of\n                      None \\<Rightarrow> ty_opt_bot_bot\n                      | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n                 else ftype_in_fds_f P ctx fds f) \\<Longrightarrow>\n                ftype_in_fds P ctx fds f (ftype_in_fds_f P ctx fds f);\n        ty_opt =\n        (if f = f'\n         then case find_type_f P ctx cl of None \\<Rightarrow> ty_opt_bot_bot\n              | Some ty \\<Rightarrow> ty_opt_bot_opt (Some ty)\n         else ftype_in_fds_f P ctx fds f)\\<rbrakk>\n       \\<Longrightarrow> f \\<noteq> f' \\<longrightarrow>\n                         ftype_in_fds P ctx (fd_def cl f' # fds) f\n                          (ftype_in_fds_f P ctx fds f)", "apply(force intro: ftif_cons_falseI[simplified])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nftype_in_path_f :: \"P \\<Rightarrow> ctxclds \\<Rightarrow> f \\<Rightarrow> ty_opt\"\nwhere\n\"ftype_in_path_f P []               f = None\" |\n\"ftype_in_path_f P (ctxcld#ctxclds) f =\n  (case ctxcld of (ctx, cld) \\<Rightarrow>\n  (case ftype_in_fds_f P ctx (class_fields_f cld) f of\n     ty_opt_bot_bot \\<Rightarrow> None | ty_opt_bot_opt ty_opt \\<Rightarrow>\n  (case ty_opt of Some ty \\<Rightarrow> Some ty | None \\<Rightarrow>\n     ftype_in_path_f P ctxclds f)))\""], ["", "lemma [simp]: \"(ftype_in_path P ctxclds f ty_opt) = (ftype_in_path_f P ctxclds f = ty_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ftype_in_path P ctxclds f ty_opt =\n    (ftype_in_path_f P ctxclds f = ty_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ftype_in_path P ctxclds f ty_opt \\<Longrightarrow>\n    ftype_in_path_f P ctxclds f = ty_opt\n 2. ftype_in_path_f P ctxclds f = ty_opt \\<Longrightarrow>\n    ftype_in_path P ctxclds f ty_opt", "apply(induct rule: ftype_in_path.induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>P f. ftype_in_path_f P [] f = None\n 2. \\<And>cld fds P ctx f ctxcld_list.\n       \\<lbrakk>class_fields cld fds;\n        ftype_in_fds P ctx fds f ty_opt_bot_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path_f P ([(ctx, cld)] @ ctxcld_list) f =\n                         None\n 3. \\<And>cld fds P ctx f ty ctxcld_list.\n       \\<lbrakk>class_fields cld fds;\n        ftype_in_fds P ctx fds f (ty_opt_bot_opt (Some ty))\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path_f P ([(ctx, cld)] @ ctxcld_list) f =\n                         Some ty\n 4. \\<And>cld fds P ctx f ctxcld_list ty_opt.\n       \\<lbrakk>class_fields cld fds;\n        ftype_in_fds P ctx fds f (ty_opt_bot_opt None);\n        ftype_in_path P ctxcld_list f ty_opt;\n        ftype_in_path_f P ctxcld_list f = ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path_f P ([(ctx, cld)] @ ctxcld_list) f =\n                         ty_opt\n 5. ftype_in_path_f P ctxclds f = ty_opt \\<Longrightarrow>\n    ftype_in_path P ctxclds f ty_opt", "apply(simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ftype_in_path_f P ctxclds f = ty_opt \\<Longrightarrow>\n    ftype_in_path P ctxclds f ty_opt", "apply(induct ctxclds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ftype_in_path_f P [] f = ty_opt \\<Longrightarrow>\n    ftype_in_path P [] f ty_opt\n 2. \\<And>a ctxclds.\n       \\<lbrakk>ftype_in_path_f P ctxclds f = ty_opt \\<Longrightarrow>\n                ftype_in_path P ctxclds f ty_opt;\n        ftype_in_path_f P (a # ctxclds) f = ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P (a # ctxclds) f ty_opt", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. None = ty_opt \\<Longrightarrow> ftype_in_path P [] f None\n 2. \\<And>a ctxclds.\n       \\<lbrakk>ftype_in_path_f P ctxclds f = ty_opt \\<Longrightarrow>\n                ftype_in_path P ctxclds f ty_opt;\n        ftype_in_path_f P (a # ctxclds) f = ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P (a # ctxclds) f ty_opt", "apply(rule ftip_emptyI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ctxclds.\n       \\<lbrakk>ftype_in_path_f P ctxclds f = ty_opt \\<Longrightarrow>\n                ftype_in_path P ctxclds f ty_opt;\n        ftype_in_path_f P (a # ctxclds) f = ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P (a # ctxclds) f ty_opt", "apply(hypsubst_thin)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ctxclds.\n       (ftype_in_path_f P ctxclds f =\n        ftype_in_path_f P (a # ctxclds) f \\<Longrightarrow>\n        ftype_in_path P ctxclds f\n         (ftype_in_path_f P (a # ctxclds) f)) \\<Longrightarrow>\n       ftype_in_path P (a # ctxclds) f (ftype_in_path_f P (a # ctxclds) f)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ctxclds.\n       (ftype_in_path_f P ctxclds f =\n        (case ftype_in_fds_f P a (class_fields_f b) f of\n         ty_opt_bot_opt None \\<Rightarrow> ftype_in_path_f P ctxclds f\n         | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n         | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n        ftype_in_path P ctxclds f\n         (ftype_in_path_f P ctxclds f)) \\<Longrightarrow>\n       ftype_in_path P ((a, b) # ctxclds) f\n        (case ftype_in_fds_f P a (class_fields_f b) f of\n         ty_opt_bot_opt None \\<Rightarrow> ftype_in_path_f P ctxclds f\n         | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n         | ty_opt_bot_bot \\<Rightarrow> None)", "apply(case_tac \"ftype_in_fds_f P a (class_fields_f b) f\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ctxclds x1.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_opt x1\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)\n 2. \\<And>a b ctxclds.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)", "apply(rename_tac ty_opt)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ctxclds ty_opt.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f =\n        ty_opt_bot_opt ty_opt\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)\n 2. \\<And>a b ctxclds.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)", "apply(case_tac ty_opt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ctxclds ty_opt.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_opt ty_opt;\n        ty_opt = None\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)\n 2. \\<And>a b ctxclds ty_opt aa.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_opt ty_opt;\n        ty_opt = Some aa\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)\n 3. \\<And>a b ctxclds.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)", "apply(simp add: ftip_cons_falseI[simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ctxclds ty_opt aa.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_opt ty_opt;\n        ty_opt = Some aa\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)\n 2. \\<And>a b ctxclds.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)", "apply(simp add: ftip_cons_trueI[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ctxclds.\n       \\<lbrakk>ftype_in_path_f P ctxclds f =\n                (case ftype_in_fds_f P a (class_fields_f b) f of\n                 ty_opt_bot_opt None \\<Rightarrow>\n                   ftype_in_path_f P ctxclds f\n                 | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                 | ty_opt_bot_bot \\<Rightarrow> None) \\<Longrightarrow>\n                ftype_in_path P ctxclds f (ftype_in_path_f P ctxclds f);\n        ftype_in_fds_f P a (class_fields_f b) f = ty_opt_bot_bot\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P ((a, b) # ctxclds) f\n                          (case ftype_in_fds_f P a (class_fields_f b) f of\n                           ty_opt_bot_opt None \\<Rightarrow>\n                             ftype_in_path_f P ctxclds f\n                           | ty_opt_bot_opt (Some xa) \\<Rightarrow> Some xa\n                           | ty_opt_bot_bot \\<Rightarrow> None)", "apply(simp add: ftip_cons_botI[simplified])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\nftype_f :: \"P \\<Rightarrow> ty \\<Rightarrow> f \\<Rightarrow> ty_opt\"\nwhere\n\"ftype_f P ty f =\n  (case find_path_ty_f P ty of None \\<Rightarrow> None | Some ctxclds \\<Rightarrow>\n     ftype_in_path_f P ctxclds f)\""], ["", "lemma [simp]: \"(ftype P ty f ty') = (ftype_f P ty f = Some ty')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ftype P ty f ty' = (ftype_f P ty f = Some ty')", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ftype P ty f ty' \\<Longrightarrow> ftype_f P ty f = Some ty'\n 2. ftype_f P ty f = Some ty' \\<Longrightarrow> ftype P ty f ty'", "apply(induct rule: ftype.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty ctxclds f ty'.\n       \\<lbrakk>find_path_ty P ty (Some ctxclds);\n        ftype_in_path P ctxclds f (Some ty')\\<rbrakk>\n       \\<Longrightarrow> ftype_f P ty f = Some ty'\n 2. ftype_f P ty f = Some ty' \\<Longrightarrow> ftype P ty f ty'", "apply(clarsimp simp add: ftype_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ftype_f P ty f = Some ty' \\<Longrightarrow> ftype P ty f ty'", "apply(clarsimp simp add: ftype_f_def split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        ftype_in_path_f P x2 f = Some ty'\\<rbrakk>\n       \\<Longrightarrow> ftype P ty f ty'", "apply(rule ftypeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        ftype_in_path_f P x2 f = Some ty'\\<rbrakk>\n       \\<Longrightarrow> find_path_ty P ty (Some (?ctxclds14 x2))\n 2. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        ftype_in_path_f P x2 f = Some ty'\\<rbrakk>\n       \\<Longrightarrow> ftype_in_path P (?ctxclds14 x2) f (Some ty')", "apply(simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nfind_meth_def_in_list_f :: \"meth_defs \\<Rightarrow> meth \\<Rightarrow> meth_def_opt\"\nwhere\n\"find_meth_def_in_list_f []       m = None\" |\n\"find_meth_def_in_list_f (md#mds) m =\n  (case md of meth_def_def ms mb \\<Rightarrow>\n  (case ms of meth_sig_def cl m' vds \\<Rightarrow>\n  (if m = m' then Some md else find_meth_def_in_list_f mds m)))\""], ["", "lemma [simp]: \"(find_meth_def_in_list mds m md_opt) = (find_meth_def_in_list_f mds m = md_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_meth_def_in_list mds m md_opt =\n    (find_meth_def_in_list_f mds m = md_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_meth_def_in_list mds m md_opt \\<Longrightarrow>\n    find_meth_def_in_list_f mds m = md_opt\n 2. find_meth_def_in_list_f mds m = md_opt \\<Longrightarrow>\n    find_meth_def_in_list mds m md_opt", "apply(induct rule: find_meth_def_in_list.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>meth. find_meth_def_in_list_f [] meth = None\n 2. \\<And>meth_def cl meth vds meth_body meth_def_list.\n       meth_def =\n       meth_def_def (meth_sig_def cl meth vds) meth_body \\<Longrightarrow>\n       find_meth_def_in_list_f ([meth_def] @ meth_def_list) meth =\n       Some meth_def\n 3. \\<And>meth_def cl meth' vds meth_body meth meth_def_list meth_def_opt.\n       \\<lbrakk>meth_def =\n                meth_def_def (meth_sig_def cl meth' vds) meth_body;\n        meth \\<noteq> meth';\n        find_meth_def_in_list meth_def_list meth meth_def_opt;\n        find_meth_def_in_list_f meth_def_list meth = meth_def_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_list_f\n                          ([meth_def] @ meth_def_list) meth =\n                         meth_def_opt\n 4. find_meth_def_in_list_f mds m = md_opt \\<Longrightarrow>\n    find_meth_def_in_list mds m md_opt", "apply(simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_meth_def_in_list_f mds m = md_opt \\<Longrightarrow>\n    find_meth_def_in_list mds m md_opt", "apply(induct mds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_meth_def_in_list_f [] m = md_opt \\<Longrightarrow>\n    find_meth_def_in_list [] m md_opt\n 2. \\<And>a mds.\n       \\<lbrakk>find_meth_def_in_list_f mds m = md_opt \\<Longrightarrow>\n                find_meth_def_in_list mds m md_opt;\n        find_meth_def_in_list_f (a # mds) m = md_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_list (a # mds) m md_opt", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. None = md_opt \\<Longrightarrow> find_meth_def_in_list [] m None\n 2. \\<And>a mds.\n       \\<lbrakk>find_meth_def_in_list_f mds m = md_opt \\<Longrightarrow>\n                find_meth_def_in_list mds m md_opt;\n        find_meth_def_in_list_f (a # mds) m = md_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_list (a # mds) m md_opt", "apply(rule fmdil_emptyI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a mds.\n       \\<lbrakk>find_meth_def_in_list_f mds m = md_opt \\<Longrightarrow>\n                find_meth_def_in_list mds m md_opt;\n        find_meth_def_in_list_f (a # mds) m = md_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_list (a # mds) m md_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a mds.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                (case a of\n                 meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n                   if m = m' then Some a\n                   else find_meth_def_in_list_f mds m) \\<Longrightarrow>\n                find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt =\n        (case a of\n         meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n           if m = m' then Some a\n           else find_meth_def_in_list_f mds m)\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_list (a # mds) m\n                          (case a of\n                           meth_def_def (meth_sig_def cl m' vds)\n                            mb \\<Rightarrow>\n                             if m = m' then Some a\n                             else find_meth_def_in_list_f mds m)", "apply(clarsimp split: meth_def.split meth_sig.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a mds x1 x2.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                (case a of\n                 meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n                   if m = m' then Some a\n                   else find_meth_def_in_list_f mds m) \\<Longrightarrow>\n                find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt =\n        (case a of\n         meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n           if m = m' then Some a\n           else find_meth_def_in_list_f mds m)\\<rbrakk>\n       \\<Longrightarrow> (m = x2 \\<longrightarrow>\n                          (\\<forall>x3 x2a.\n                              a =\n                              meth_def_def (meth_sig_def x1 x2 x3)\n                               x2a \\<longrightarrow>\n                              find_meth_def_in_list\n                               (meth_def_def (meth_sig_def x1 x2 x3) x2a #\n                                mds)\n                               x2 (Some\n                                    (meth_def_def (meth_sig_def x1 x2 x3)\nx2a)))) \\<and>\n                         (m \\<noteq> x2 \\<longrightarrow>\n                          (\\<forall>x3 x2a.\n                              a =\n                              meth_def_def (meth_sig_def x1 x2 x3)\n                               x2a \\<longrightarrow>\n                              find_meth_def_in_list\n                               (meth_def_def (meth_sig_def x1 x2 x3) x2a #\n                                mds)\n                               m (find_meth_def_in_list_f mds m)))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a mds x1 x2.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                (case a of\n                 meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n                   if m = m' then Some a\n                   else find_meth_def_in_list_f mds m) \\<Longrightarrow>\n                find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt =\n        (case a of\n         meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n           if m = m' then Some a\n           else find_meth_def_in_list_f mds m)\\<rbrakk>\n       \\<Longrightarrow> m = x2 \\<longrightarrow>\n                         (\\<forall>x3 x2a.\n                             a =\n                             meth_def_def (meth_sig_def x1 x2 x3)\n                              x2a \\<longrightarrow>\n                             find_meth_def_in_list\n                              (meth_def_def (meth_sig_def x1 x2 x3) x2a #\n                               mds)\n                              x2 (Some\n                                   (meth_def_def (meth_sig_def x1 x2 x3)\n                                     x2a)))\n 2. \\<And>a mds x1 x2.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                (case a of\n                 meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n                   if m = m' then Some a\n                   else find_meth_def_in_list_f mds m) \\<Longrightarrow>\n                find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt =\n        (case a of\n         meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n           if m = m' then Some a\n           else find_meth_def_in_list_f mds m)\\<rbrakk>\n       \\<Longrightarrow> m \\<noteq> x2 \\<longrightarrow>\n                         (\\<forall>x3 x2a.\n                             a =\n                             meth_def_def (meth_sig_def x1 x2 x3)\n                              x2a \\<longrightarrow>\n                             find_meth_def_in_list\n                              (meth_def_def (meth_sig_def x1 x2 x3) x2a #\n                               mds)\n                              m (find_meth_def_in_list_f mds m))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds x1 x3 x2a.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                Some\n                 (meth_def_def (meth_sig_def x1 m x3) x2a) \\<Longrightarrow>\n                find_meth_def_in_list mds m\n                 (Some (meth_def_def (meth_sig_def x1 m x3) x2a));\n        md_opt = Some (meth_def_def (meth_sig_def x1 m x3) x2a)\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_list\n                          (meth_def_def (meth_sig_def x1 m x3) x2a # mds) m\n                          (Some (meth_def_def (meth_sig_def x1 m x3) x2a))\n 2. \\<And>a mds x1 x2.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                (case a of\n                 meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n                   if m = m' then Some a\n                   else find_meth_def_in_list_f mds m) \\<Longrightarrow>\n                find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt =\n        (case a of\n         meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n           if m = m' then Some a\n           else find_meth_def_in_list_f mds m)\\<rbrakk>\n       \\<Longrightarrow> m \\<noteq> x2 \\<longrightarrow>\n                         (\\<forall>x3 x2a.\n                             a =\n                             meth_def_def (meth_sig_def x1 x2 x3)\n                              x2a \\<longrightarrow>\n                             find_meth_def_in_list\n                              (meth_def_def (meth_sig_def x1 x2 x3) x2a #\n                               mds)\n                              m (find_meth_def_in_list_f mds m))", "apply(rule fmdil_cons_trueI[simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>mds x1 x3 x2a.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                Some\n                 (meth_def_def (meth_sig_def x1 m x3) x2a) \\<Longrightarrow>\n                find_meth_def_in_list mds m\n                 (Some (meth_def_def (meth_sig_def x1 m x3) x2a));\n        md_opt = Some (meth_def_def (meth_sig_def x1 m x3) x2a)\\<rbrakk>\n       \\<Longrightarrow> meth_def_def (meth_sig_def x1 m x3) x2a =\n                         meth_def_def\n                          (meth_sig_def (?cl40 mds x1 x3 x2a) m\n                            (?vds40 mds x1 x3 x2a))\n                          (?meth_body40 mds x1 x3 x2a)\n 2. \\<And>a mds x1 x2.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                (case a of\n                 meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n                   if m = m' then Some a\n                   else find_meth_def_in_list_f mds m) \\<Longrightarrow>\n                find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt =\n        (case a of\n         meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n           if m = m' then Some a\n           else find_meth_def_in_list_f mds m)\\<rbrakk>\n       \\<Longrightarrow> m \\<noteq> x2 \\<longrightarrow>\n                         (\\<forall>x3 x2a.\n                             a =\n                             meth_def_def (meth_sig_def x1 x2 x3)\n                              x2a \\<longrightarrow>\n                             find_meth_def_in_list\n                              (meth_def_def (meth_sig_def x1 x2 x3) x2a #\n                               mds)\n                              m (find_meth_def_in_list_f mds m))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a mds x1 x2.\n       \\<lbrakk>find_meth_def_in_list_f mds m =\n                (case a of\n                 meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n                   if m = m' then Some a\n                   else find_meth_def_in_list_f mds m) \\<Longrightarrow>\n                find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt =\n        (case a of\n         meth_def_def (meth_sig_def cl m' vds) mb \\<Rightarrow>\n           if m = m' then Some a\n           else find_meth_def_in_list_f mds m)\\<rbrakk>\n       \\<Longrightarrow> m \\<noteq> x2 \\<longrightarrow>\n                         (\\<forall>x3 x2a.\n                             a =\n                             meth_def_def (meth_sig_def x1 x2 x3)\n                              x2a \\<longrightarrow>\n                             find_meth_def_in_list\n                              (meth_def_def (meth_sig_def x1 x2 x3) x2a #\n                               mds)\n                              m (find_meth_def_in_list_f mds m))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mds x1 x2 x3 x2a.\n       \\<lbrakk>find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt = find_meth_def_in_list_f mds m; m \\<noteq> x2\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_list\n                          (meth_def_def (meth_sig_def x1 x2 x3) x2a # mds) m\n                          (find_meth_def_in_list_f mds m)", "apply(rule fmdil_cons_falseI[simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>mds x1 x2 x3 x2a.\n       \\<lbrakk>find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt = find_meth_def_in_list_f mds m; m \\<noteq> x2\\<rbrakk>\n       \\<Longrightarrow> meth_def_def (meth_sig_def x1 x2 x3) x2a =\n                         meth_def_def\n                          (meth_sig_def (?cl55 mds x1 x2 x3 x2a)\n                            (?meth'55 mds x1 x2 x3 x2a)\n                            (?vds55 mds x1 x2 x3 x2a))\n                          (?meth_body55 mds x1 x2 x3 x2a)\n 2. \\<And>mds x1 x2 x3 x2a.\n       \\<lbrakk>find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt = find_meth_def_in_list_f mds m; m \\<noteq> x2\\<rbrakk>\n       \\<Longrightarrow> m \\<noteq> ?meth'55 mds x1 x2 x3 x2a\n 3. \\<And>mds x1 x2 x3 x2a.\n       \\<lbrakk>find_meth_def_in_list mds m (find_meth_def_in_list_f mds m);\n        md_opt = find_meth_def_in_list_f mds m; m \\<noteq> x2\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_list mds m\n                          (find_meth_def_in_list_f mds m)", "apply(force+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nfind_meth_def_in_path_f :: \"ctxclds \\<Rightarrow> meth \\<Rightarrow> ctxmeth_def_opt\"\nwhere\nfmdip_empty: \"find_meth_def_in_path_f []               m = None\" |\nfmdip_cons:  \"find_meth_def_in_path_f (ctxcld#ctxclds) m =\n  (case ctxcld of (ctx, cld) \\<Rightarrow>\n  (case find_meth_def_in_list_f (class_methods_f cld) m of\n    Some md \\<Rightarrow> Some (ctx, md) |\n    None \\<Rightarrow> find_meth_def_in_path_f ctxclds m))\""], ["", "lemma [simp]: \"(find_meth_def_in_path ctxclds m ctxmeth_def_opt) = (find_meth_def_in_path_f ctxclds m = ctxmeth_def_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_meth_def_in_path ctxclds m ctxmeth_def_opt =\n    (find_meth_def_in_path_f ctxclds m = ctxmeth_def_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_meth_def_in_path ctxclds m ctxmeth_def_opt \\<Longrightarrow>\n    find_meth_def_in_path_f ctxclds m = ctxmeth_def_opt\n 2. find_meth_def_in_path_f ctxclds m = ctxmeth_def_opt \\<Longrightarrow>\n    find_meth_def_in_path ctxclds m ctxmeth_def_opt", "apply(induct rule: find_meth_def_in_path.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>meth. find_meth_def_in_path_f [] meth = None\n 2. \\<And>cld meth_defs meth meth_def ctx ctxcld_list.\n       \\<lbrakk>class_methods cld meth_defs;\n        find_meth_def_in_list meth_defs meth (Some meth_def)\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path_f\n                          ([(ctx, cld)] @ ctxcld_list) meth =\n                         Some (ctx, meth_def)\n 3. \\<And>cld meth_defs meth ctxcld_list ctxmeth_def_opt ctx.\n       \\<lbrakk>class_methods cld meth_defs;\n        find_meth_def_in_list meth_defs meth None;\n        find_meth_def_in_path ctxcld_list meth ctxmeth_def_opt;\n        find_meth_def_in_path_f ctxcld_list meth = ctxmeth_def_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path_f\n                          ([(ctx, cld)] @ ctxcld_list) meth =\n                         ctxmeth_def_opt\n 4. find_meth_def_in_path_f ctxclds m = ctxmeth_def_opt \\<Longrightarrow>\n    find_meth_def_in_path ctxclds m ctxmeth_def_opt", "apply(simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_meth_def_in_path_f ctxclds m = ctxmeth_def_opt \\<Longrightarrow>\n    find_meth_def_in_path ctxclds m ctxmeth_def_opt", "apply(induct ctxclds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_meth_def_in_path_f [] m = ctxmeth_def_opt \\<Longrightarrow>\n    find_meth_def_in_path [] m ctxmeth_def_opt\n 2. \\<And>a ctxclds.\n       \\<lbrakk>find_meth_def_in_path_f ctxclds m =\n                ctxmeth_def_opt \\<Longrightarrow>\n                find_meth_def_in_path ctxclds m ctxmeth_def_opt;\n        find_meth_def_in_path_f (a # ctxclds) m = ctxmeth_def_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path (a # ctxclds) m\n                          ctxmeth_def_opt", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. None = ctxmeth_def_opt \\<Longrightarrow> find_meth_def_in_path [] m None\n 2. \\<And>a ctxclds.\n       \\<lbrakk>find_meth_def_in_path_f ctxclds m =\n                ctxmeth_def_opt \\<Longrightarrow>\n                find_meth_def_in_path ctxclds m ctxmeth_def_opt;\n        find_meth_def_in_path_f (a # ctxclds) m = ctxmeth_def_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path (a # ctxclds) m\n                          ctxmeth_def_opt", "apply(rule fmdip_emptyI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ctxclds.\n       \\<lbrakk>find_meth_def_in_path_f ctxclds m =\n                ctxmeth_def_opt \\<Longrightarrow>\n                find_meth_def_in_path ctxclds m ctxmeth_def_opt;\n        find_meth_def_in_path_f (a # ctxclds) m = ctxmeth_def_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path (a # ctxclds) m\n                          ctxmeth_def_opt", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ctxclds.\n       \\<lbrakk>find_meth_def_in_path_f ctxclds m =\n                (case find_meth_def_in_list_f (class_methods_f b) m of\n                 None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n                 | Some md \\<Rightarrow> Some (a, md)) \\<Longrightarrow>\n                find_meth_def_in_path ctxclds m\n                 (find_meth_def_in_path_f ctxclds m);\n        ctxmeth_def_opt =\n        (case find_meth_def_in_list_f (class_methods_f b) m of\n         None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n         | Some md \\<Rightarrow> Some (a, md))\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path ((a, b) # ctxclds) m\n                          (case find_meth_def_in_list_f (class_methods_f b)\n                                 m of\n                           None \\<Rightarrow>\n                             find_meth_def_in_path_f ctxclds m\n                           | Some md \\<Rightarrow> Some (a, md))", "apply(case_tac \"find_meth_def_in_list_f (class_methods_f b) m\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ctxclds.\n       \\<lbrakk>find_meth_def_in_path_f ctxclds m =\n                (case find_meth_def_in_list_f (class_methods_f b) m of\n                 None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n                 | Some md \\<Rightarrow> Some (a, md)) \\<Longrightarrow>\n                find_meth_def_in_path ctxclds m\n                 (find_meth_def_in_path_f ctxclds m);\n        ctxmeth_def_opt =\n        (case find_meth_def_in_list_f (class_methods_f b) m of\n         None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n         | Some md \\<Rightarrow> Some (a, md));\n        find_meth_def_in_list_f (class_methods_f b) m = None\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path ((a, b) # ctxclds) m\n                          (case find_meth_def_in_list_f (class_methods_f b)\n                                 m of\n                           None \\<Rightarrow>\n                             find_meth_def_in_path_f ctxclds m\n                           | Some md \\<Rightarrow> Some (a, md))\n 2. \\<And>a b ctxclds aa.\n       \\<lbrakk>find_meth_def_in_path_f ctxclds m =\n                (case find_meth_def_in_list_f (class_methods_f b) m of\n                 None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n                 | Some md \\<Rightarrow> Some (a, md)) \\<Longrightarrow>\n                find_meth_def_in_path ctxclds m\n                 (find_meth_def_in_path_f ctxclds m);\n        ctxmeth_def_opt =\n        (case find_meth_def_in_list_f (class_methods_f b) m of\n         None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n         | Some md \\<Rightarrow> Some (a, md));\n        find_meth_def_in_list_f (class_methods_f b) m = Some aa\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path ((a, b) # ctxclds) m\n                          (case find_meth_def_in_list_f (class_methods_f b)\n                                 m of\n                           None \\<Rightarrow>\n                             find_meth_def_in_path_f ctxclds m\n                           | Some md \\<Rightarrow> Some (a, md))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ctxclds.\n       \\<lbrakk>find_meth_def_in_path ctxclds m\n                 (find_meth_def_in_path_f ctxclds m);\n        ctxmeth_def_opt = find_meth_def_in_path_f ctxclds m;\n        find_meth_def_in_list_f (class_methods_f b) m = None\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path ((a, b) # ctxclds) m\n                          (find_meth_def_in_path_f ctxclds m)\n 2. \\<And>a b ctxclds aa.\n       \\<lbrakk>find_meth_def_in_path_f ctxclds m =\n                (case find_meth_def_in_list_f (class_methods_f b) m of\n                 None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n                 | Some md \\<Rightarrow> Some (a, md)) \\<Longrightarrow>\n                find_meth_def_in_path ctxclds m\n                 (find_meth_def_in_path_f ctxclds m);\n        ctxmeth_def_opt =\n        (case find_meth_def_in_list_f (class_methods_f b) m of\n         None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n         | Some md \\<Rightarrow> Some (a, md));\n        find_meth_def_in_list_f (class_methods_f b) m = Some aa\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path ((a, b) # ctxclds) m\n                          (case find_meth_def_in_list_f (class_methods_f b)\n                                 m of\n                           None \\<Rightarrow>\n                             find_meth_def_in_path_f ctxclds m\n                           | Some md \\<Rightarrow> Some (a, md))", "apply(simp add: fmdip_cons_falseI[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ctxclds aa.\n       \\<lbrakk>find_meth_def_in_path_f ctxclds m =\n                (case find_meth_def_in_list_f (class_methods_f b) m of\n                 None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n                 | Some md \\<Rightarrow> Some (a, md)) \\<Longrightarrow>\n                find_meth_def_in_path ctxclds m\n                 (find_meth_def_in_path_f ctxclds m);\n        ctxmeth_def_opt =\n        (case find_meth_def_in_list_f (class_methods_f b) m of\n         None \\<Rightarrow> find_meth_def_in_path_f ctxclds m\n         | Some md \\<Rightarrow> Some (a, md));\n        find_meth_def_in_list_f (class_methods_f b) m = Some aa\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_in_path ((a, b) # ctxclds) m\n                          (case find_meth_def_in_list_f (class_methods_f b)\n                                 m of\n                           None \\<Rightarrow>\n                             find_meth_def_in_path_f ctxclds m\n                           | Some md \\<Rightarrow> Some (a, md))", "apply(simp add: fmdip_cons_trueI[simplified])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\nfind_meth_def_f :: \"P \\<Rightarrow> ty \\<Rightarrow> meth \\<Rightarrow> ctxmeth_def_opt\"\nwhere\n\"find_meth_def_f P ty m =\n  (case find_path_ty_f P ty of None \\<Rightarrow> None | Some ctxclds \\<Rightarrow>\n    find_meth_def_in_path_f ctxclds m)\""], ["", "lemma [simp]: \"(find_meth_def P ty m ctxmd_opt) = (find_meth_def_f P ty m = ctxmd_opt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_meth_def P ty m ctxmd_opt = (find_meth_def_f P ty m = ctxmd_opt)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_meth_def P ty m ctxmd_opt \\<Longrightarrow>\n    find_meth_def_f P ty m = ctxmd_opt\n 2. find_meth_def_f P ty m = ctxmd_opt \\<Longrightarrow>\n    find_meth_def P ty m ctxmd_opt", "apply(induct rule: find_meth_def.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P ty meth.\n       find_path_ty P ty None \\<Longrightarrow>\n       find_meth_def_f P ty meth = None\n 2. \\<And>P ty ctxclds meth ctxmeth_def_opt.\n       \\<lbrakk>find_path_ty P ty (Some ctxclds);\n        find_meth_def_in_path ctxclds meth ctxmeth_def_opt\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_f P ty meth = ctxmeth_def_opt\n 3. find_meth_def_f P ty m = ctxmd_opt \\<Longrightarrow>\n    find_meth_def P ty m ctxmd_opt", "apply(simp add: find_meth_def_f_def)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case find_path_ty_f P ty of None \\<Rightarrow> None\n     | Some ctxclds \\<Rightarrow> find_meth_def_in_path_f ctxclds m) =\n    ctxmd_opt \\<Longrightarrow>\n    find_meth_def P ty m ctxmd_opt", "apply(clarsimp simp add: find_meth_def_f_def split: option.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>find_path_ty_f P ty = None; ctxmd_opt = None\\<rbrakk>\n    \\<Longrightarrow> find_meth_def P ty m None\n 2. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        ctxmd_opt = find_meth_def_in_path_f x2 m\\<rbrakk>\n       \\<Longrightarrow> find_meth_def P ty m (find_meth_def_in_path_f x2 m)", "apply(simp add: fmd_nullI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        ctxmd_opt = find_meth_def_in_path_f x2 m\\<rbrakk>\n       \\<Longrightarrow> find_meth_def P ty m (find_meth_def_in_path_f x2 m)", "apply(simp add: fmd_optI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec\nlift_opts :: \"'a option list \\<Rightarrow> 'a list option\"\nwhere\n\"lift_opts []         = Some []\" |\n\"lift_opts (opt#opts) =\n  (case opt of None \\<Rightarrow> None | Some v \\<Rightarrow>\n  (case lift_opts opts of None \\<Rightarrow> None | Some vs \\<Rightarrow> Some (v#vs)))\""], ["", "definition\nmtype_f :: \"P \\<Rightarrow> ty \\<Rightarrow> meth \\<Rightarrow> mty option\"\nwhere\n\"mtype_f P ty m =\n  (case find_meth_def_f P ty m of None \\<Rightarrow> None | Some (ctx, md) \\<Rightarrow>\n  (case md of meth_def_def ms mb \\<Rightarrow>\n  (case ms of meth_sig_def cl m' vds \\<Rightarrow>\n  (case find_type_f P ctx cl of None \\<Rightarrow> None | Some ty' \\<Rightarrow>\n  (case lift_opts (map (\\<lambda>vd. case vd of vd_def clk vark \\<Rightarrow>\n    find_type_f P ctx clk) vds) of None \\<Rightarrow> None | Some tys \\<Rightarrow>\n      Some (mty_def tys ty'))))))\""], ["", "lemma lift_opts_ind[rule_format]:\n  \"(\\<forall>x\\<in>set list. (\\<lambda>(cl, var, ty). find_type_f P ctx cl = Some ty) x)\n       \\<longrightarrow> lift_opts (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk) \\<circ> (\\<lambda>(cl, var, ty). vd_def cl var)) list) = Some (map (\\<lambda>(cl, var, ty). ty) list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set list.\n        case x of\n        (cl, var, ty) \\<Rightarrow>\n          find_type_f P ctx cl = Some ty) \\<longrightarrow>\n    lift_opts\n     (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk) \\<circ>\n           (\\<lambda>(cl, var, ty). vd_def cl var))\n       list) =\n    Some (map (\\<lambda>(cl, var, ty). ty) list)", "by (induct list, auto)"], ["", "lemma find_md_m_match'[rule_format]:\n  \"find_meth_def_in_list_f mds m = Some (meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow> m' = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_meth_def_in_list_f mds m =\n    Some (meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n    m' = m", "apply(induct mds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_meth_def_in_list_f [] m =\n    Some (meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n    m' = m\n 2. \\<And>a mds.\n       find_meth_def_in_list_f mds m =\n       Some (meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n       m' = m \\<Longrightarrow>\n       find_meth_def_in_list_f (a # mds) m =\n       Some (meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n       m' = m", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a mds.\n       find_meth_def_in_list_f mds m =\n       Some (meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n       m' = m \\<Longrightarrow>\n       find_meth_def_in_list_f (a # mds) m =\n       Some (meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n       m' = m", "apply(clarsimp split: meth_def.splits meth_sig.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma find_md_m_match:\n  \"find_meth_def_in_path_f path m = Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow> m' = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_meth_def_in_path_f path m =\n    Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n    m' = m", "apply(induct path)"], ["proof (prove)\ngoal (2 subgoals):\n 1. find_meth_def_in_path_f [] m =\n    Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n    m' = m\n 2. \\<And>a path.\n       find_meth_def_in_path_f path m =\n       Some\n        (ctx, meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n       m' = m \\<Longrightarrow>\n       find_meth_def_in_path_f (a # path) m =\n       Some\n        (ctx, meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n       m' = m", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a path.\n       find_meth_def_in_path_f path m =\n       Some\n        (ctx, meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n       m' = m \\<Longrightarrow>\n       find_meth_def_in_path_f (a # path) m =\n       Some\n        (ctx, meth_def_def (meth_sig_def cl m' vds) mb) \\<longrightarrow>\n       m' = m", "apply(clarsimp split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b path.\n       \\<lbrakk>find_meth_def_in_path_f path m \\<noteq>\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_meth_def_in_list_f (class_methods_f b) m =\n        Some (meth_def_def (meth_sig_def cl m' vds) mb)\\<rbrakk>\n       \\<Longrightarrow> m' = m", "by(rule find_md_m_match')"], ["", "lemma vds_map_length:\n  \"length (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) = length vds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n    length vds", "by (induct vds, auto)"], ["", "lemma lift_opts_length[rule_format]:\n  \"\\<forall>tys. lift_opts ty_opts = Some tys \\<longrightarrow> length ty_opts = length tys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>tys.\n       lift_opts ty_opts = Some tys \\<longrightarrow>\n       length ty_opts = length tys", "apply(induct ty_opts)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>tys.\n       lift_opts [] = Some tys \\<longrightarrow> length [] = length tys\n 2. \\<And>a ty_opts.\n       \\<forall>tys.\n          lift_opts ty_opts = Some tys \\<longrightarrow>\n          length ty_opts = length tys \\<Longrightarrow>\n       \\<forall>tys.\n          lift_opts (a # ty_opts) = Some tys \\<longrightarrow>\n          length (a # ty_opts) = length tys", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ty_opts.\n       \\<forall>tys.\n          lift_opts ty_opts = Some tys \\<longrightarrow>\n          length ty_opts = length tys \\<Longrightarrow>\n       \\<forall>tys.\n          lift_opts (a # ty_opts) = Some tys \\<longrightarrow>\n          length (a # ty_opts) = length tys", "by(clarsimp split: option.splits)"], ["", "lemma vds_tys_length_eq[rule_format]:\n  \"lift_opts (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) = Some tys \\<longrightarrow> length vds = length tys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_opts\n     (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n    Some tys \\<longrightarrow>\n    length vds = length tys", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_opts\n     (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n    Some tys \\<Longrightarrow>\n    length vds = length tys", "apply(drule lift_opts_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n    length tys \\<Longrightarrow>\n    length vds = length tys", "apply(simp add: vds_map_length)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma vds_tys_length_eq'[rule_format]:\n  \"\\<forall>tys. length vds = length tys \\<longrightarrow> vds = map (\\<lambda>(cl, var, ty). vd_def cl var) (map (\\<lambda>(vd, ty). case vd of vd_def cl var \\<Rightarrow> (cl, var, ty)) (zip vds tys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>tys.\n       length vds = length tys \\<longrightarrow>\n       vds =\n       map (\\<lambda>(cl, var, ty). vd_def cl var)\n        (map2\n          (\\<lambda>vd ty.\n              case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n          vds tys)", "apply(induct vds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>tys.\n       length [] = length tys \\<longrightarrow>\n       [] =\n       map (\\<lambda>a. case a of (cl, var, ty) \\<Rightarrow> vd_def cl var)\n        (map2\n          (\\<lambda>vd ty.\n              case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n          [] tys)\n 2. \\<And>a vds.\n       \\<forall>tys.\n          length vds = length tys \\<longrightarrow>\n          vds =\n          map (\\<lambda>a.\n                  case a of (cl, var, ty) \\<Rightarrow> vd_def cl var)\n           (map2\n             (\\<lambda>vd ty.\n                 case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n             vds tys) \\<Longrightarrow>\n       \\<forall>tys.\n          length (a # vds) = length tys \\<longrightarrow>\n          a # vds =\n          map (\\<lambda>a.\n                  case a of (cl, var, ty) \\<Rightarrow> vd_def cl var)\n           (map2\n             (\\<lambda>vd ty.\n                 case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n             (a # vds) tys)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a vds.\n       \\<forall>tys.\n          length vds = length tys \\<longrightarrow>\n          vds =\n          map (\\<lambda>a.\n                  case a of (cl, var, ty) \\<Rightarrow> vd_def cl var)\n           (map2\n             (\\<lambda>vd ty.\n                 case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n             vds tys) \\<Longrightarrow>\n       \\<forall>tys.\n          length (a # vds) = length tys \\<longrightarrow>\n          a # vds =\n          map (\\<lambda>a.\n                  case a of (cl, var, ty) \\<Rightarrow> vd_def cl var)\n           (map2\n             (\\<lambda>vd ty.\n                 case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n             (a # vds) tys)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a vds tys.\n       \\<lbrakk>\\<forall>tys.\n                   length vds = length tys \\<longrightarrow>\n                   vds =\n                   map ((\\<lambda>(cl, var, ty). vd_def cl var) \\<circ>\n                        (\\<lambda>(vd, ty).\n                            case vd of\n                            vd_def cl var \\<Rightarrow> (cl, var, ty)))\n                    (zip vds tys);\n        Suc (length vds) = length tys\\<rbrakk>\n       \\<Longrightarrow> a # vds =\n                         map ((\\<lambda>(cl, var, ty).\n                                  vd_def cl var) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip (a # vds) tys)", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a vds tys x1 x2.\n       \\<lbrakk>\\<forall>tys.\n                   length vds = length tys \\<longrightarrow>\n                   vds =\n                   map ((\\<lambda>(cl, var, ty). vd_def cl var) \\<circ>\n                        (\\<lambda>(vd, ty).\n                            case vd of\n                            vd_def cl var \\<Rightarrow> (cl, var, ty)))\n                    (zip vds tys);\n        Suc (length vds) = length tys; a = vd_def x1 x2\\<rbrakk>\n       \\<Longrightarrow> a # vds =\n                         map ((\\<lambda>(cl, var, ty).\n                                  vd_def cl var) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip (a # vds) tys)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vds tys x1 x2.\n       \\<lbrakk>\\<forall>tys.\n                   length vds = length tys \\<longrightarrow>\n                   vds =\n                   map ((\\<lambda>(cl, var, ty). vd_def cl var) \\<circ>\n                        (\\<lambda>(vd, ty).\n                            case vd of\n                            vd_def cl var \\<Rightarrow> (cl, var, ty)))\n                    (zip vds tys);\n        Suc (length vds) = length tys\\<rbrakk>\n       \\<Longrightarrow> vd_def x1 x2 # vds =\n                         map ((\\<lambda>(cl, var, ty).\n                                  vd_def cl var) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip (vd_def x1 x2 # vds) tys)", "apply(case_tac tys)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>vds tys x1 x2.\n       \\<lbrakk>\\<forall>tys.\n                   length vds = length tys \\<longrightarrow>\n                   vds =\n                   map ((\\<lambda>(cl, var, ty). vd_def cl var) \\<circ>\n                        (\\<lambda>(vd, ty).\n                            case vd of\n                            vd_def cl var \\<Rightarrow> (cl, var, ty)))\n                    (zip vds tys);\n        Suc (length vds) = length tys; tys = []\\<rbrakk>\n       \\<Longrightarrow> vd_def x1 x2 # vds =\n                         map ((\\<lambda>(cl, var, ty).\n                                  vd_def cl var) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip (vd_def x1 x2 # vds) tys)\n 2. \\<And>vds tys x1 x2 a list.\n       \\<lbrakk>\\<forall>tys.\n                   length vds = length tys \\<longrightarrow>\n                   vds =\n                   map ((\\<lambda>(cl, var, ty). vd_def cl var) \\<circ>\n                        (\\<lambda>(vd, ty).\n                            case vd of\n                            vd_def cl var \\<Rightarrow> (cl, var, ty)))\n                    (zip vds tys);\n        Suc (length vds) = length tys; tys = a # list\\<rbrakk>\n       \\<Longrightarrow> vd_def x1 x2 # vds =\n                         map ((\\<lambda>(cl, var, ty).\n                                  vd_def cl var) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip (vd_def x1 x2 # vds) tys)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vds tys x1 x2 a list.\n       \\<lbrakk>\\<forall>tys.\n                   length vds = length tys \\<longrightarrow>\n                   vds =\n                   map ((\\<lambda>(cl, var, ty). vd_def cl var) \\<circ>\n                        (\\<lambda>(vd, ty).\n                            case vd of\n                            vd_def cl var \\<Rightarrow> (cl, var, ty)))\n                    (zip vds tys);\n        Suc (length vds) = length tys; tys = a # list\\<rbrakk>\n       \\<Longrightarrow> vd_def x1 x2 # vds =\n                         map ((\\<lambda>(cl, var, ty).\n                                  vd_def cl var) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip (vd_def x1 x2 # vds) tys)", "apply(clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma vds_tys_length_eq''[rule_format]:\n  \"\\<forall>vds. length vds = length tys \\<longrightarrow> tys = map ((\\<lambda>(cl, var, ty). ty) \\<circ> (\\<lambda>(vd, ty). case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))) (zip vds tys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>vds.\n       length vds = length tys \\<longrightarrow>\n       tys =\n       map ((\\<lambda>(cl, var, ty). ty) \\<circ>\n            (\\<lambda>(vd, ty).\n                case vd of vd_def cl var \\<Rightarrow> (cl, var, ty)))\n        (zip vds tys)", "apply(induct tys)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>vds.\n       length vds = length [] \\<longrightarrow>\n       [] =\n       map ((\\<lambda>a. case a of (cl, var, ty) \\<Rightarrow> ty) \\<circ>\n            (\\<lambda>a.\n                case a of (vd_def cl var, ty) \\<Rightarrow> (cl, var, ty)))\n        (zip vds [])\n 2. \\<And>a tys.\n       \\<forall>vds.\n          length vds = length tys \\<longrightarrow>\n          tys =\n          map ((\\<lambda>a.\n                   case a of (cl, var, ty) \\<Rightarrow> ty) \\<circ>\n               (\\<lambda>a.\n                   case a of\n                   (vd_def cl var, ty) \\<Rightarrow> (cl, var, ty)))\n           (zip vds tys) \\<Longrightarrow>\n       \\<forall>vds.\n          length vds = length (a # tys) \\<longrightarrow>\n          a # tys =\n          map ((\\<lambda>a.\n                   case a of (cl, var, ty) \\<Rightarrow> ty) \\<circ>\n               (\\<lambda>a.\n                   case a of\n                   (vd_def cl var, ty) \\<Rightarrow> (cl, var, ty)))\n           (zip vds (a # tys))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a tys.\n       \\<forall>vds.\n          length vds = length tys \\<longrightarrow>\n          tys =\n          map ((\\<lambda>a.\n                   case a of (cl, var, ty) \\<Rightarrow> ty) \\<circ>\n               (\\<lambda>a.\n                   case a of\n                   (vd_def cl var, ty) \\<Rightarrow> (cl, var, ty)))\n           (zip vds tys) \\<Longrightarrow>\n       \\<forall>vds.\n          length vds = length (a # tys) \\<longrightarrow>\n          a # tys =\n          map ((\\<lambda>a.\n                   case a of (cl, var, ty) \\<Rightarrow> ty) \\<circ>\n               (\\<lambda>a.\n                   case a of\n                   (vd_def cl var, ty) \\<Rightarrow> (cl, var, ty)))\n           (zip vds (a # tys))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a tys vds.\n       \\<lbrakk>\\<forall>vds.\n                   length vds = length tys \\<longrightarrow>\n                   tys =\n                   map (\\<lambda>a.\n                           case case a of\n                                (vd_def cl var, ty) \\<Rightarrow>\n                                  (cl, var, ty) of\n                           (cl, var, ty) \\<Rightarrow> ty)\n                    (zip vds tys);\n        length vds = Suc (length tys)\\<rbrakk>\n       \\<Longrightarrow> a # tys =\n                         map (\\<lambda>a.\n                                 case case a of\n(vd_def cl var, ty) \\<Rightarrow> (cl, var, ty) of\n                                 (cl, var, ty) \\<Rightarrow> ty)\n                          (zip vds (a # tys))", "apply(case_tac vds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a tys vds.\n       \\<lbrakk>\\<forall>vds.\n                   length vds = length tys \\<longrightarrow>\n                   tys =\n                   map (\\<lambda>a.\n                           case case a of\n                                (vd_def cl var, ty) \\<Rightarrow>\n                                  (cl, var, ty) of\n                           (cl, var, ty) \\<Rightarrow> ty)\n                    (zip vds tys);\n        length vds = Suc (length tys); vds = []\\<rbrakk>\n       \\<Longrightarrow> a # tys =\n                         map (\\<lambda>a.\n                                 case case a of\n(vd_def cl var, ty) \\<Rightarrow> (cl, var, ty) of\n                                 (cl, var, ty) \\<Rightarrow> ty)\n                          (zip vds (a # tys))\n 2. \\<And>a tys vds aa list.\n       \\<lbrakk>\\<forall>vds.\n                   length vds = length tys \\<longrightarrow>\n                   tys =\n                   map (\\<lambda>a.\n                           case case a of\n                                (vd_def cl var, ty) \\<Rightarrow>\n                                  (cl, var, ty) of\n                           (cl, var, ty) \\<Rightarrow> ty)\n                    (zip vds tys);\n        length vds = Suc (length tys); vds = aa # list\\<rbrakk>\n       \\<Longrightarrow> a # tys =\n                         map (\\<lambda>a.\n                                 case case a of\n(vd_def cl var, ty) \\<Rightarrow> (cl, var, ty) of\n                                 (cl, var, ty) \\<Rightarrow> ty)\n                          (zip vds (a # tys))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a tys vds aa list.\n       \\<lbrakk>\\<forall>vds.\n                   length vds = length tys \\<longrightarrow>\n                   tys =\n                   map (\\<lambda>a.\n                           case case a of\n                                (vd_def cl var, ty) \\<Rightarrow>\n                                  (cl, var, ty) of\n                           (cl, var, ty) \\<Rightarrow> ty)\n                    (zip vds tys);\n        length vds = Suc (length tys); vds = aa # list\\<rbrakk>\n       \\<Longrightarrow> a # tys =\n                         map (\\<lambda>a.\n                                 case case a of\n(vd_def cl var, ty) \\<Rightarrow> (cl, var, ty) of\n                                 (cl, var, ty) \\<Rightarrow> ty)\n                          (zip vds (a # tys))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a tys aa list.\n       \\<lbrakk>\\<forall>vds.\n                   length vds = length tys \\<longrightarrow>\n                   tys =\n                   map (\\<lambda>a.\n                           case case a of\n                                (vd_def cl var, ty) \\<Rightarrow>\n                                  (cl, var, ty) of\n                           (cl, var, ty) \\<Rightarrow> ty)\n                    (zip vds tys);\n        length list = length tys\\<rbrakk>\n       \\<Longrightarrow> a =\n                         (case case aa of\n                               vd_def cl var \\<Rightarrow> (cl, var, a) of\n                          (cl, var, ty) \\<Rightarrow> ty)", "apply(split vd.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a tys aa list.\n       \\<lbrakk>\\<forall>vds.\n                   length vds = length tys \\<longrightarrow>\n                   tys =\n                   map (\\<lambda>a.\n                           case case a of\n                                (vd_def cl var, ty) \\<Rightarrow>\n                                  (cl, var, ty) of\n                           (cl, var, ty) \\<Rightarrow> ty)\n                    (zip vds tys);\n        length list = length tys\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x1 x2.\n                            aa = vd_def x1 x2 \\<longrightarrow>\n                            a =\n                            (case (x1, x2, a) of\n                             (cl, var, ty) \\<Rightarrow> ty)", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lift_opts_find_type[rule_format]:\n  \"\\<forall>tys. lift_opts (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) = Some tys\n      \\<longrightarrow> (\\<forall>(vd, ty) \\<in> set (zip vds tys). case vd of vd_def cl var \\<Rightarrow> find_type_f P ctx cl = Some ty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>tys.\n       lift_opts\n        (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n       Some tys \\<longrightarrow>\n       (\\<forall>(vd, ty)\\<in>set (zip vds tys).\n           case vd of\n           vd_def cl var \\<Rightarrow> find_type_f P ctx cl = Some ty)", "apply(induct vds)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>tys.\n       lift_opts\n        (map (\\<lambda>a.\n                 case a of\n                 vd_def clk vark \\<Rightarrow> find_type_f P ctx clk)\n          []) =\n       Some tys \\<longrightarrow>\n       (\\<forall>a\\<in>set (zip [] tys).\n           case a of\n           (vd_def cl var, ty) \\<Rightarrow> find_type_f P ctx cl = Some ty)\n 2. \\<And>a vds.\n       \\<forall>tys.\n          lift_opts\n           (map (\\<lambda>a.\n                    case a of\n                    vd_def clk vark \\<Rightarrow> find_type_f P ctx clk)\n             vds) =\n          Some tys \\<longrightarrow>\n          (\\<forall>a\\<in>set (zip vds tys).\n              case a of\n              (vd_def cl var, ty) \\<Rightarrow>\n                find_type_f P ctx cl = Some ty) \\<Longrightarrow>\n       \\<forall>tys.\n          lift_opts\n           (map (\\<lambda>a.\n                    case a of\n                    vd_def clk vark \\<Rightarrow> find_type_f P ctx clk)\n             (a # vds)) =\n          Some tys \\<longrightarrow>\n          (\\<forall>a\\<in>set (zip (a # vds) tys).\n              case a of\n              (vd_def cl var, ty) \\<Rightarrow>\n                find_type_f P ctx cl = Some ty)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a vds.\n       \\<forall>tys.\n          lift_opts\n           (map (\\<lambda>a.\n                    case a of\n                    vd_def clk vark \\<Rightarrow> find_type_f P ctx clk)\n             vds) =\n          Some tys \\<longrightarrow>\n          (\\<forall>a\\<in>set (zip vds tys).\n              case a of\n              (vd_def cl var, ty) \\<Rightarrow>\n                find_type_f P ctx cl = Some ty) \\<Longrightarrow>\n       \\<forall>tys.\n          lift_opts\n           (map (\\<lambda>a.\n                    case a of\n                    vd_def clk vark \\<Rightarrow> find_type_f P ctx clk)\n             (a # vds)) =\n          Some tys \\<longrightarrow>\n          (\\<forall>a\\<in>set (zip (a # vds) tys).\n              case a of\n              (vd_def cl var, ty) \\<Rightarrow>\n                find_type_f P ctx cl = Some ty)", "apply(clarsimp split: vd.splits option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vds x1 x2 x2a b x1a x2c.\n       \\<lbrakk>\\<forall>x\\<in>set (zip vds x2a).\n                   case x of\n                   (vd, ty) \\<Rightarrow>\n                     \\<forall>x1.\n                        (\\<forall>x2. vd \\<noteq> vd_def x1 x2) \\<or>\n                        find_type_f P ctx x1 = Some ty;\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some x2a;\n        find_type_f P ctx x1 = Some x2;\n        (vd_def x1a x2c, b) \\<in> set (zip vds x2a)\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx x1a = Some b", "apply(rename_tac cl' var)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vds x1 x2 x2a b cl' var.\n       \\<lbrakk>\\<forall>x\\<in>set (zip vds x2a).\n                   case x of\n                   (vd, ty) \\<Rightarrow>\n                     \\<forall>x1.\n                        (\\<forall>x2. vd \\<noteq> vd_def x1 x2) \\<or>\n                        find_type_f P ctx x1 = Some ty;\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some x2a;\n        find_type_f P ctx x1 = Some x2;\n        (vd_def cl' var, b) \\<in> set (zip vds x2a)\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl' = Some b", "apply(drule_tac x = \"(vd_def cl' var, b)\" in bspec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>vds x1 x2 x2a b cl' var.\n       \\<lbrakk>lift_opts\n                 (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk))\n                   vds) =\n                Some x2a;\n        find_type_f P ctx x1 = Some x2;\n        (vd_def cl' var, b) \\<in> set (zip vds x2a);\n        case (vd_def cl' var, b) of\n        (vd, ty) \\<Rightarrow>\n          \\<forall>x1.\n             (\\<forall>x2. vd \\<noteq> vd_def x1 x2) \\<or>\n             find_type_f P ctx x1 = Some ty\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl' = Some b", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]: \"(mtype P ty m mty) = (mtype_f P ty m = Some mty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mtype P ty m mty = (mtype_f P ty m = Some mty)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. mtype P ty m mty \\<Longrightarrow> mtype_f P ty m = Some mty\n 2. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(induct rule: mtype.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty meth ctx meth_def cl cl_var_ty_list meth_body ty' mty.\n       \\<lbrakk>find_meth_def P ty meth (Some (ctx, meth_def));\n        meth_def =\n        meth_def_def\n         (meth_sig_def cl meth\n           (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). vd_def cl_XXX var_XXX)\n             cl_var_ty_list))\n         meth_body;\n        find_type P ctx cl (Some ty');\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                  find_type P ctx cl_XXX (Some ty_XXX))\n           cl_var_ty_list);\n        mty =\n        mty_def\n         (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX) cl_var_ty_list)\n         ty'\\<rbrakk>\n       \\<Longrightarrow> mtype_f P ty meth = Some mty\n 2. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(clarsimp simp add: mtype_f_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> (case lift_opts\n                                (map (case_vd\n (\\<lambda>clk vark. find_type_f P ctx clk) \\<circ>\n(\\<lambda>(cl_XXX, var_XXX, ty_XXX). vd_def cl_XXX var_XXX))\n                                  cl_var_ty_list) of\n                          None \\<Rightarrow> None\n                          | Some tys \\<Rightarrow> Some (mty_def tys ty')) =\n                         Some\n                          (mty_def\n                            (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                     ty_XXX)\n                              cl_var_ty_list)\n                            ty')\n 2. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(split option.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> (lift_opts\n                           (map (case_vd\n                                  (\\<lambda>clk vark.\nfind_type_f P ctx clk) \\<circ>\n                                 (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                     vd_def cl_XXX var_XXX))\n                             cl_var_ty_list) =\n                          None \\<longrightarrow>\n                          None =\n                          Some\n                           (mty_def\n                             (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\nty_XXX)\n                               cl_var_ty_list)\n                             ty')) \\<and>\n                         (\\<forall>x2.\n                             lift_opts\n                              (map (case_vd\n                                     (\\<lambda>clk vark.\n   find_type_f P ctx clk) \\<circ>\n                                    (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n  vd_def cl_XXX var_XXX))\n                                cl_var_ty_list) =\n                             Some x2 \\<longrightarrow>\n                             Some (mty_def x2 ty') =\n                             Some\n                              (mty_def\n                                (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n   ty_XXX)\n                                  cl_var_ty_list)\n                                ty'))\n 2. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> lift_opts\n                          (map (case_vd\n                                 (\\<lambda>clk vark.\n                                     find_type_f P ctx clk) \\<circ>\n                                (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                    vd_def cl_XXX var_XXX))\n                            cl_var_ty_list) =\n                         None \\<longrightarrow>\n                         None =\n                         Some\n                          (mty_def\n                            (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                     ty_XXX)\n                              cl_var_ty_list)\n                            ty')\n 2. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            lift_opts\n                             (map (case_vd\n                                    (\\<lambda>clk vark.\n  find_type_f P ctx clk) \\<circ>\n                                   (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n vd_def cl_XXX var_XXX))\n                               cl_var_ty_list) =\n                            Some x2 \\<longrightarrow>\n                            Some (mty_def x2 ty') =\n                            Some\n                             (mty_def\n                               (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n  ty_XXX)\n                                 cl_var_ty_list)\n                               ty')\n 3. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            lift_opts\n                             (map (case_vd\n                                    (\\<lambda>clk vark.\n  find_type_f P ctx clk) \\<circ>\n                                   (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n vd_def cl_XXX var_XXX))\n                               cl_var_ty_list) =\n                            Some y\n 2. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            lift_opts\n                             (map (case_vd\n                                    (\\<lambda>clk vark.\n  find_type_f P ctx clk) \\<circ>\n                                   (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n vd_def cl_XXX var_XXX))\n                               cl_var_ty_list) =\n                            Some x2 \\<longrightarrow>\n                            Some (mty_def x2 ty') =\n                            Some\n                             (mty_def\n                               (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n  ty_XXX)\n                                 cl_var_ty_list)\n                               ty')\n 3. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(rule_tac x = \"map (\\<lambda>(cl, var, ty). ty) cl_var_ty_list\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> lift_opts\n                          (map (case_vd\n                                 (\\<lambda>clk vark.\n                                     find_type_f P ctx clk) \\<circ>\n                                (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                    vd_def cl_XXX var_XXX))\n                            cl_var_ty_list) =\n                         Some\n                          (map (\\<lambda>(cl, var, ty). ty) cl_var_ty_list)\n 2. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            lift_opts\n                             (map (case_vd\n                                    (\\<lambda>clk vark.\n  find_type_f P ctx clk) \\<circ>\n                                   (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n vd_def cl_XXX var_XXX))\n                               cl_var_ty_list) =\n                            Some x2 \\<longrightarrow>\n                            Some (mty_def x2 ty') =\n                            Some\n                             (mty_def\n                               (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n  ty_XXX)\n                                 cl_var_ty_list)\n                               ty')\n 3. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(simp add: lift_opts_ind)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty'.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            lift_opts\n                             (map (case_vd\n                                    (\\<lambda>clk vark.\n  find_type_f P ctx clk) \\<circ>\n                                   (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n vd_def cl_XXX var_XXX))\n                               cl_var_ty_list) =\n                            Some x2 \\<longrightarrow>\n                            Some (mty_def x2 ty') =\n                            Some\n                             (mty_def\n                               (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n  ty_XXX)\n                                 cl_var_ty_list)\n                               ty')\n 2. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty meth ctx cl cl_var_ty_list meth_body ty' x2.\n       \\<lbrakk>find_meth_def_f P ty meth =\n                Some\n                 (ctx,\n                  meth_def_def\n                   (meth_sig_def cl meth\n                     (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                              vd_def cl_XXX var_XXX)\n                       cl_var_ty_list))\n                   meth_body);\n        find_type_f P ctx cl = Some ty';\n        \\<forall>x\\<in>set cl_var_ty_list.\n           case x of\n           (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n             find_type_f P ctx cl_XXX = Some ty_XXX;\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk) \\<circ>\n               (\\<lambda>(cl_XXX, var_XXX, ty_XXX). vd_def cl_XXX var_XXX))\n           cl_var_ty_list) =\n        Some x2\\<rbrakk>\n       \\<Longrightarrow> x2 =\n                         map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                          cl_var_ty_list\n 2. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(simp add: lift_opts_ind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mtype_f P ty m = Some mty \\<Longrightarrow> mtype P ty m mty", "apply(clarsimp simp add: mtype_f_def split: option.splits meth_def.splits meth_sig.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x2 x1a x2a x3 x2b x2c.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (a, meth_def_def (meth_sig_def x1a x2a x3) x2);\n        find_type_f P a x1a = Some x2b;\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P a clk)) x3) =\n        Some x2c;\n        mty = mty_def x2c x2b\\<rbrakk>\n       \\<Longrightarrow> mtype P ty m (mty_def x2c x2b)", "apply(rename_tac ctx mb cl m' vds ty' tys)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mtype P ty m (mty_def tys ty')", "apply(rule_tac ctx = ctx and cl = cl and meth_body = mb and ty' = ty'\n           and cl_var_ty_list = \"map (\\<lambda>(vd, ty). case vd of vd_def cl var \\<Rightarrow> (cl, var, ty)) (zip vds tys)\"\n           and meth_def = \"meth_def_def (meth_sig_def cl m' vds) mb\" in mtypeI[simplified])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_meth_def_f P ty m =\n                         Some\n                          (ctx, meth_def_def (meth_sig_def cl m' vds) mb)\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> meth_def_def (meth_sig_def cl m' vds) mb =\n                         meth_def_def\n                          (meth_sig_def cl m\n                            (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                     vd_def cl_XXX var_XXX)\n                              (map2\n                                (\\<lambda>vd ty.\n                                    case vd of\n                                    vd_def cl var \\<Rightarrow>\n(cl, var, ty))\n                                vds tys)))\n                          mb\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 4. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 5. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> meth_def_def (meth_sig_def cl m' vds) mb =\n                         meth_def_def\n                          (meth_sig_def cl m\n                            (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                     vd_def cl_XXX var_XXX)\n                              (map2\n                                (\\<lambda>vd ty.\n                                    case vd of\n                                    vd_def cl var \\<Rightarrow>\n(cl, var, ty))\n                                vds tys)))\n                          mb\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 4. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(clarsimp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> m' = m \\<and>\n                         vds =\n                         map ((\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                  vd_def cl_XXX var_XXX) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip vds tys)\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 4. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(rule)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> m' = m\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> vds =\n                         map ((\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                  vd_def cl_XXX var_XXX) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip vds tys)\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 4. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 5. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(clarsimp simp add: find_meth_def_f_def split: option.splits)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys x2.\n       \\<lbrakk>find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'; find_path_ty_f P ty = Some x2;\n        find_meth_def_in_path_f x2 m =\n        Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb)\\<rbrakk>\n       \\<Longrightarrow> m' = m\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> vds =\n                         map ((\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                  vd_def cl_XXX var_XXX) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip vds tys)\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 4. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 5. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(simp add: find_md_m_match)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> vds =\n                         map ((\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                  vd_def cl_XXX var_XXX) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip vds tys)\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 4. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(drule vds_tys_length_eq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty'; mty = mty_def tys ty';\n        length vds = length tys\\<rbrakk>\n       \\<Longrightarrow> vds =\n                         map ((\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                  vd_def cl_XXX var_XXX) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip vds tys)\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 4. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(frule vds_tys_length_eq')"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty'; mty = mty_def tys ty';\n        length vds = length tys;\n        vds =\n        map (\\<lambda>(cl, var, ty). vd_def cl var)\n         (map2\n           (\\<lambda>vd ty.\n               case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n           vds tys)\\<rbrakk>\n       \\<Longrightarrow> vds =\n                         map ((\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                  vd_def cl_XXX var_XXX) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip vds tys)\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 4. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl = Some ty'\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map2\n     (\\<lambda>vd ty. case vd of vd_def cl var \\<Rightarrow> (cl, var, ty))\n     vds tys).\n                            case x of\n                            (cl_XXX, var_XXX, ty_XXX) \\<Rightarrow>\n                              find_type_f P ctx cl_XXX = Some ty_XXX\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys a b cl_XXX aa ba.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'; (a, b) \\<in> set (zip vds tys);\n        (case a of vd_def cl var \\<Rightarrow> (cl, var, b)) =\n        (cl_XXX, aa, ba)\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl_XXX = Some ba\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(split vd.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys a b cl_XXX aa ba x1 x2.\n       \\<lbrakk>lift_opts\n                 (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk))\n                   vds) =\n                Some tys;\n        mty = mty_def tys ty'; (a, b) \\<in> set (zip vds tys);\n        find_meth_def_f P ty m =\n        Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty'; a = vd_def x1 x2;\n        (x1, x2, b) = (cl_XXX, aa, ba)\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl_XXX = Some ba\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys cl_XXX aa ba.\n       \\<lbrakk>lift_opts\n                 (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk))\n                   vds) =\n                Some tys;\n        mty = mty_def tys ty';\n        (vd_def cl_XXX aa, ba) \\<in> set (zip vds tys);\n        find_meth_def_f P ty m =\n        Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty'\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl_XXX = Some ba\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(drule lift_opts_find_type)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys cl_XXX aa ba.\n       \\<lbrakk>mty = mty_def tys ty';\n        (vd_def cl_XXX aa, ba) \\<in> set (zip vds tys);\n        find_meth_def_f P ty m =\n        Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty'\\<rbrakk>\n       \\<Longrightarrow> ?x126 ctx mb cl m' vds ty' tys cl_XXX aa ba\n                         \\<in> set (zip vds tys)\n 2. \\<And>ctx mb cl m' vds ty' tys cl_XXX aa ba.\n       \\<lbrakk>mty = mty_def tys ty';\n        (vd_def cl_XXX aa, ba) \\<in> set (zip vds tys);\n        find_meth_def_f P ty m =\n        Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        case ?x126 ctx mb cl m' vds ty' tys cl_XXX aa ba of\n        (vd_def cl var, ty) \\<Rightarrow>\n          find_type_f P ctx cl = Some ty\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl_XXX = Some ba\n 3. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ctx mb cl m' vds ty' tys cl_XXX aa ba.\n       \\<lbrakk>mty = mty_def tys ty';\n        (vd_def cl_XXX aa, ba) \\<in> set (zip vds tys);\n        find_meth_def_f P ty m =\n        Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        case (vd_def cl_XXX aa, ba) of\n        (vd_def cl var, ty) \\<Rightarrow>\n          find_type_f P ctx cl = Some ty\\<rbrakk>\n       \\<Longrightarrow> find_type_f P ctx cl_XXX = Some ba\n 2. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> mty_def tys ty' =\n                         mty_def\n                          (map (\\<lambda>(cl_XXX, var_XXX, ty_XXX). ty_XXX)\n                            (map2\n                              (\\<lambda>vd ty.\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow> (cl, var, ty))\n                              vds tys))\n                          ty'", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty';\n        lift_opts\n         (map (case_vd (\\<lambda>clk vark. find_type_f P ctx clk)) vds) =\n        Some tys;\n        mty = mty_def tys ty'\\<rbrakk>\n       \\<Longrightarrow> tys =\n                         map ((\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                  ty_XXX) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip vds tys)", "apply(drule vds_tys_length_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctx mb cl m' vds ty' tys.\n       \\<lbrakk>find_meth_def_f P ty m =\n                Some (ctx, meth_def_def (meth_sig_def cl m' vds) mb);\n        find_type_f P ctx cl = Some ty'; mty = mty_def tys ty';\n        length vds = length tys\\<rbrakk>\n       \\<Longrightarrow> tys =\n                         map ((\\<lambda>(cl_XXX, var_XXX, ty_XXX).\n                                  ty_XXX) \\<circ>\n                              (\\<lambda>(vd, ty).\n                                  case vd of\n                                  vd_def cl var \\<Rightarrow>\n                                    (cl, var, ty)))\n                          (zip vds tys)", "apply(simp add: vds_tys_length_eq'')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\nis_sty_one :: \"P \\<Rightarrow> ty \\<Rightarrow> ty \\<Rightarrow> bool option\"\nwhere\n\"is_sty_one P ty ty' =\n  (case find_path_ty_f P ty of None \\<Rightarrow> None | Some ctxclds \\<Rightarrow>\n  (case ty' of ty_top \\<Rightarrow> Some True | ty_def ctx' dcl' \\<Rightarrow>\n    Some ((ctx', dcl') : set (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ctxclds)) ))\""], ["", "lemma class_name_mem_map[rule_format]:\n\"(ctx, cld, class_name_f cld) \\<in> set ctx_cld_dcl_list\n       \\<Longrightarrow> (ctx, class_name_f cld)\n          \\<in> ((\\<lambda>(ctx, cld). (ctx, class_name_f cld)) \\<circ> (\\<lambda>(ctx, cld, dcl). (ctx, cld))) `\n            set ctx_cld_dcl_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ctx, cld, class_name_f cld)\n    \\<in> set ctx_cld_dcl_list \\<Longrightarrow>\n    (ctx, class_name_f cld)\n    \\<in> ((\\<lambda>(ctx, cld). (ctx, class_name_f cld)) \\<circ>\n           (\\<lambda>(ctx, cld, dcl). (ctx, cld))) `\n          set ctx_cld_dcl_list", "by (induct ctx_cld_dcl_list, auto)"], ["", "lemma map_map_three:\n  \" ctxclds = map ((\\<lambda>(ctx, cld, dcl). (ctx, cld)) \\<circ> (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld))) ctxclds\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ctxclds =\n    map ((\\<lambda>(ctx, cld, dcl). (ctx, cld)) \\<circ>\n         (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld)))\n     ctxclds", "by (induct ctxclds, auto)"], ["", "lemma mem_el_map[rule_format]:\n  \"(ctx, dcl) \\<in> set ctxclds\n       \\<Longrightarrow> (ctx, class_name_f dcl)\n          \\<in> (\\<lambda>(ctx_XXX, cld_XXX, y). (ctx_XXX, y)) `\n            set (map (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld)) ctxclds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ctx, dcl) \\<in> set ctxclds \\<Longrightarrow>\n    (ctx, class_name_f dcl)\n    \\<in> (\\<lambda>(ctx_XXX, cld_XXX, y). (ctx_XXX, y)) `\n          set (map (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld))\n                ctxclds)", "by (induct ctxclds, auto)"], ["", "lemma [simp]: \"(sty_one P ty ty') = (is_sty_one P ty ty' = Some True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sty_one P ty ty' = (is_sty_one P ty ty' = Some True)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sty_one P ty ty' \\<Longrightarrow> is_sty_one P ty ty' = Some True\n 2. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "apply(induct rule: sty_one.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P ty ctxclds.\n       find_path_ty P ty (Some ctxclds) \\<Longrightarrow>\n       is_sty_one P ty ty_top = Some True\n 2. \\<And>P ty ctx_cld_dcl_list ctx' dcl'.\n       \\<lbrakk>find_path_ty P ty\n                 (Some\n                   (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                            (ctx_XXX, cld_XXX))\n                     ctx_cld_dcl_list));\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                  class_name cld_XXX dcl_XXX)\n           ctx_cld_dcl_list);\n        (ctx', dcl')\n        \\<in> set (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                           (ctx_XXX, dcl_XXX))\n                    ctx_cld_dcl_list)\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty (ty_def ctx' dcl') = Some True\n 3. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "apply(simp add: is_sty_one_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty ctx_cld_dcl_list ctx' dcl'.\n       \\<lbrakk>find_path_ty P ty\n                 (Some\n                   (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                            (ctx_XXX, cld_XXX))\n                     ctx_cld_dcl_list));\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                  class_name cld_XXX dcl_XXX)\n           ctx_cld_dcl_list);\n        (ctx', dcl')\n        \\<in> set (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                           (ctx_XXX, dcl_XXX))\n                    ctx_cld_dcl_list)\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty (ty_def ctx' dcl') = Some True\n 2. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "apply(clarsimp simp add: is_sty_one_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty ctx_cld_dcl_list a aa b.\n       \\<lbrakk>find_path_ty_f P ty =\n                Some\n                 (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                          (ctx_XXX, cld_XXX))\n                   ctx_cld_dcl_list);\n        \\<forall>x\\<in>set ctx_cld_dcl_list.\n           case x of\n           (ctx_XXX, cld_XXX, xa) \\<Rightarrow> class_name_f cld_XXX = xa;\n        (a, aa, b) \\<in> set ctx_cld_dcl_list\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> (\\<lambda>x.\n                                   case case x of\n  (ctx_XXX, cld_XXX, dcl_XXX) \\<Rightarrow> (ctx_XXX, cld_XXX) of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set ctx_cld_dcl_list\n 2. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "apply(rename_tac ctx cld dcl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty ctx_cld_dcl_list ctx cld dcl.\n       \\<lbrakk>find_path_ty_f P ty =\n                Some\n                 (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                          (ctx_XXX, cld_XXX))\n                   ctx_cld_dcl_list);\n        \\<forall>x\\<in>set ctx_cld_dcl_list.\n           case x of\n           (ctx_XXX, cld_XXX, xa) \\<Rightarrow> class_name_f cld_XXX = xa;\n        (ctx, cld, dcl) \\<in> set ctx_cld_dcl_list\\<rbrakk>\n       \\<Longrightarrow> (ctx, dcl)\n                         \\<in> (\\<lambda>x.\n                                   case case x of\n  (ctx_XXX, cld_XXX, dcl_XXX) \\<Rightarrow> (ctx_XXX, cld_XXX) of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set ctx_cld_dcl_list\n 2. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "apply(drule_tac x = \"(ctx, cld, dcl)\" in bspec, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty ctx_cld_dcl_list ctx cld dcl.\n       \\<lbrakk>find_path_ty_f P ty =\n                Some\n                 (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                          (ctx_XXX, cld_XXX))\n                   ctx_cld_dcl_list);\n        (ctx, cld, dcl) \\<in> set ctx_cld_dcl_list;\n        case (ctx, cld, dcl) of\n        (ctx_XXX, cld_XXX, xa) \\<Rightarrow>\n          class_name_f cld_XXX = xa\\<rbrakk>\n       \\<Longrightarrow> (ctx, dcl)\n                         \\<in> (\\<lambda>x.\n                                   case case x of\n  (ctx_XXX, cld_XXX, dcl_XXX) \\<Rightarrow> (ctx_XXX, cld_XXX) of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set ctx_cld_dcl_list\n 2. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ty ctx_cld_dcl_list ctx cld.\n       \\<lbrakk>find_path_ty_f P ty =\n                Some\n                 (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                          (ctx_XXX, cld_XXX))\n                   ctx_cld_dcl_list);\n        (ctx, cld, class_name_f cld) \\<in> set ctx_cld_dcl_list\\<rbrakk>\n       \\<Longrightarrow> (ctx, class_name_f cld)\n                         \\<in> (\\<lambda>x.\n                                   case case x of\n  (ctx_XXX, cld_XXX, dcl_XXX) \\<Rightarrow> (ctx_XXX, cld_XXX) of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set ctx_cld_dcl_list\n 2. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "using case_prod_conv image_iff"], ["proof (prove)\nusing this:\n  (case (?a, ?b) of (c, d) \\<Rightarrow> ?f c d) = ?f ?a ?b\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (2 subgoals):\n 1. \\<And>P ty ctx_cld_dcl_list ctx cld.\n       \\<lbrakk>find_path_ty_f P ty =\n                Some\n                 (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                          (ctx_XXX, cld_XXX))\n                   ctx_cld_dcl_list);\n        (ctx, cld, class_name_f cld) \\<in> set ctx_cld_dcl_list\\<rbrakk>\n       \\<Longrightarrow> (ctx, class_name_f cld)\n                         \\<in> (\\<lambda>x.\n                                   case case x of\n  (ctx_XXX, cld_XXX, dcl_XXX) \\<Rightarrow> (ctx_XXX, cld_XXX) of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set ctx_cld_dcl_list\n 2. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sty_one P ty ty' = Some True \\<Longrightarrow> sty_one P ty ty'", "apply(clarsimp simp add: is_sty_one_def split: option.splits ty.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2; ty' = ty_top\\<rbrakk>\n       \\<Longrightarrow> sty_one P ty ty_top\n 2. \\<And>x2 a b.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        ty' = ty_def a (class_name_f b); (a, b) \\<in> set x2\\<rbrakk>\n       \\<Longrightarrow> sty_one P ty (ty_def a (class_name_f b))", "apply(simp add: sty_objI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 a b.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        ty' = ty_def a (class_name_f b); (a, b) \\<in> set x2\\<rbrakk>\n       \\<Longrightarrow> sty_one P ty (ty_def a (class_name_f b))", "apply(rename_tac ctxclds ctx dcl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> sty_one P ty (ty_def ctx (class_name_f dcl))", "apply(rule_tac ctx_cld_dcl_list = \"map (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld)) ctxclds\" in sty_dclI[simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> find_path_ty_f P ty =\n                         Some\n                          (map (\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                                   (ctx_XXX, cld_XXX))\n                            (map (\\<lambda>(ctx, cld).\n                                     (ctx, cld, class_name_f cld))\n                              ctxclds))\n 2. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld)) ctxclds).\n                            case x of\n                            (ctx_XXX, cld_XXX, xa) \\<Rightarrow>\n                              class_name_f cld_XXX = xa\n 3. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> (ctx, class_name_f dcl)\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx_XXX, cld_XXX, xa) \\<Rightarrow>\n                                     (ctx_XXX, xa)) `\n                               set (map (\\<lambda>(ctx, cld).\n      (ctx, cld, class_name_f cld))\n                                     ctxclds)", "apply(clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> ctxclds =\n                         map ((\\<lambda>(ctx_XXX, cld_XXX, dcl_XXX).\n                                  (ctx_XXX, cld_XXX)) \\<circ>\n                              (\\<lambda>(ctx, cld).\n                                  (ctx, cld, class_name_f cld)))\n                          ctxclds\n 2. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld)) ctxclds).\n                            case x of\n                            (ctx_XXX, cld_XXX, xa) \\<Rightarrow>\n                              class_name_f cld_XXX = xa\n 3. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> (ctx, class_name_f dcl)\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx_XXX, cld_XXX, xa) \\<Rightarrow>\n                                     (ctx_XXX, xa)) `\n                               set (map (\\<lambda>(ctx, cld).\n      (ctx, cld, class_name_f cld))\n                                     ctxclds)", "apply(rule map_map_three)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (map (\\<lambda>(ctx, cld). (ctx, cld, class_name_f cld)) ctxclds).\n                            case x of\n                            (ctx_XXX, cld_XXX, xa) \\<Rightarrow>\n                              class_name_f cld_XXX = xa\n 2. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> (ctx, class_name_f dcl)\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx_XXX, cld_XXX, xa) \\<Rightarrow>\n                                     (ctx_XXX, xa)) `\n                               set (map (\\<lambda>(ctx, cld).\n      (ctx, cld, class_name_f cld))\n                                     ctxclds)", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctxclds ctx dcl.\n       \\<lbrakk>find_path_ty_f P ty = Some ctxclds;\n        ty' = ty_def ctx (class_name_f dcl);\n        (ctx, dcl) \\<in> set ctxclds\\<rbrakk>\n       \\<Longrightarrow> (ctx, class_name_f dcl)\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx_XXX, cld_XXX, xa) \\<Rightarrow>\n                                     (ctx_XXX, xa)) `\n                               set (map (\\<lambda>(ctx, cld).\n      (ctx, cld, class_name_f cld))\n                                     ctxclds)", "apply(rule mem_el_map, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma path_append[rule_format]:\n  \"find_path_rec_f P ctx cl path' = Some path \\<Longrightarrow> \\<exists>path''. path = path' @ path''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl path' = Some path \\<Longrightarrow>\n    \\<exists>path''. path = path' @ path''", "apply(induct rule: find_path_rec_f.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx patha.\n       find_path_rec_f P ctx cl_object patha = Some path \\<Longrightarrow>\n       \\<exists>path''. path = patha @ path''\n 2. \\<And>P ctx fqn patha.\n       \\<lbrakk>\\<And>x2 x y.\n                   \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n                    find_cld_f P ctx fqn = Some x2; (x, y) = x2;\n                    find_path_rec_f P x (superclass_name_f y)\n                     (patha @ [(x, y)]) =\n                    Some path\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>path''.\n  path = (patha @ [(x, y)]) @ path'';\n        find_path_rec_f P ctx (cl_fqn fqn) patha = Some path\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = patha @ path''", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha.\n       \\<lbrakk>\\<And>x2 x y.\n                   \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n                    find_cld_f P ctx fqn = Some x2; (x, y) = x2;\n                    find_path_rec_f P x (superclass_name_f y)\n                     (patha @ [(x, y)]) =\n                    Some path\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>path''.\n  path = (patha @ [(x, y)]) @ path'';\n        find_path_rec_f P ctx (cl_fqn fqn) patha = Some path\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = patha @ path''", "apply(force split: if_split_asm option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma all_in_path_found'[rule_format]:\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n      (\\<forall>ctxcld \\<in> set path. ctxcld \\<in> set path' \\<or> (\\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n    (\\<forall>ctxcld\\<in>set path.\n        ctxcld \\<in> set path' \\<or>\n        (\\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld))", "apply(induct rule: find_path_rec_f.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx patha.\n       find_path_rec_f P ctx cl_object patha = Some path \\<longrightarrow>\n       (\\<forall>ctxcld\\<in>set path.\n           ctxcld \\<in> set patha \\<or>\n           (\\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld))\n 2. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>ctxcld\\<in>set path.\n                                 ctxcld \\<in> set (patha @ [(x, y)]) \\<or>\n                                 (\\<exists>ctx' fqn'.\n                                     find_cld_f P ctx' fqn' =\n                                     Some ctxcld))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>ctxcld\\<in>set path.\n           ctxcld \\<in> set patha \\<or>\n           (\\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>ctxcld\\<in>set path.\n                                 ctxcld \\<in> set (patha @ [(x, y)]) \\<or>\n                                 (\\<exists>ctx' fqn'.\n                                     find_cld_f P ctx' fqn' =\n                                     Some ctxcld))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>ctxcld\\<in>set path.\n           ctxcld \\<in> set patha \\<or>\n           (\\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld))", "apply(rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha.\n       \\<lbrakk>\\<And>x2 x y.\n                   \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n                    find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P x\n(superclass_name_f y) (patha @ [(x, y)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld \\<in> set (patha @ [(x, y)]) \\<or>\n   (\\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld));\n        find_path_rec_f P ctx (cl_fqn fqn) patha = Some path\\<rbrakk>\n       \\<Longrightarrow> \\<forall>ctxcld\\<in>set path.\n                            ctxcld \\<in> set patha \\<or>\n                            (\\<exists>ctx' fqn'.\n                                find_cld_f P ctx' fqn' = Some ctxcld)", "apply(force split: if_split_asm option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma all_in_path_found:\n  \"\\<lbrakk>find_path_f P ctx cl = Some path; ctxcld \\<in> set path\\<rbrakk> \\<Longrightarrow> \\<exists>ctx' fqn'. find_cld_f P ctx' fqn' = Some ctxcld\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_f P ctx cl = Some path;\n     ctxcld \\<in> set path\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ctx' fqn'.\n                         find_cld_f P ctx' fqn' = Some ctxcld", "by (unfold find_path_f_def, simp only: all_in_path_found'[of _ _ _ \"[]\", simplified])"], ["", "lemma fpr_target_is_head':\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n     (\\<forall>fqn ctxcld. cl = cl_fqn fqn \\<and> find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow>\n          (\\<exists>path''. path = path' @ ctxcld # path''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n    (\\<forall>fqn ctxcld.\n        cl = cl_fqn fqn \\<and>\n        find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow>\n        (\\<exists>path''. path = path' @ ctxcld # path''))", "apply(induct_tac P ctx cl path' rule: find_path_rec_f.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx patha.\n       find_path_rec_f P ctx cl_object patha = Some path \\<longrightarrow>\n       (\\<forall>fqn ctxcld.\n           cl_object = cl_fqn fqn \\<and>\n           find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow>\n           (\\<exists>path''. path = patha @ ctxcld # path''))\n 2. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>fqn ctxcld.\n                                 superclass_name_f y = cl_fqn fqn \\<and>\n                                 find_cld_f P x fqn =\n                                 Some ctxcld \\<longrightarrow>\n                                 (\\<exists>path''.\n                                     path =\n                                     (patha @ [(x, y)]) @\n                                     ctxcld # path''))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>fqna ctxcld.\n           cl_fqn fqn = cl_fqn fqna \\<and>\n           find_cld_f P ctx fqna = Some ctxcld \\<longrightarrow>\n           (\\<exists>path''. path = patha @ ctxcld # path''))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>fqn ctxcld.\n                                 superclass_name_f y = cl_fqn fqn \\<and>\n                                 find_cld_f P x fqn =\n                                 Some ctxcld \\<longrightarrow>\n                                 (\\<exists>path''.\n                                     path =\n                                     (patha @ [(x, y)]) @\n                                     ctxcld # path''))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>fqna ctxcld.\n           cl_fqn fqn = cl_fqn fqna \\<and>\n           find_cld_f P ctx fqna = Some ctxcld \\<longrightarrow>\n           (\\<exists>path''. path = patha @ ctxcld # path''))", "apply(clarsimp split: if_split_asm option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>fqn a ba.\n   superclass_name_f b = cl_fqn fqn \\<and>\n   find_cld_f P aa fqn = Some (a, ba) \\<longrightarrow>\n   (\\<exists>path''. path = patha @ (aa, b) # (a, ba) # path''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = patha @ (a, b) # path''", "apply(case_tac \"superclass_name_f b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn patha a b.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>fqn a ba.\n   superclass_name_f b = cl_fqn fqn \\<and>\n   find_cld_f P aa fqn = Some (a, ba) \\<longrightarrow>\n   (\\<exists>path''. path = patha @ (aa, b) # (a, ba) # path''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        superclass_name_f b = cl_object\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = patha @ (a, b) # path''\n 2. \\<And>P ctx fqn patha a b x2.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>fqn a ba.\n   superclass_name_f b = cl_fqn fqn \\<and>\n   find_cld_f P aa fqn = Some (a, ba) \\<longrightarrow>\n   (\\<exists>path''. path = patha @ (aa, b) # (a, ba) # path''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        superclass_name_f b = cl_fqn x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = patha @ (a, b) # path''", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b x2.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>fqn a ba.\n   superclass_name_f b = cl_fqn fqn \\<and>\n   find_cld_f P aa fqn = Some (a, ba) \\<longrightarrow>\n   (\\<exists>path''. path = patha @ (aa, b) # (a, ba) # path''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        superclass_name_f b = cl_fqn x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = patha @ (a, b) # path''", "apply(clarsimp split: if_split_asm option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b x2 aa ba.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> (case find_cld_f P aa x2 of\nNone \\<Rightarrow> None\n| Some (ctx', cld) \\<Rightarrow>\n    find_path_rec_f P ctx' (superclass_name_f cld)\n     ((patha @ [(aa, b)]) @ [(ctx', cld)])) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>a ba.\n   find_cld_f P aa x2 = Some (a, ba) \\<longrightarrow>\n   (\\<exists>path''. path = patha @ (aa, b) # (a, ba) # path''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        superclass_name_f b = cl_fqn x2; find_cld_f P a x2 = Some (aa, ba);\n        find_path_rec_f P aa (superclass_name_f ba)\n         (patha @ [(a, b), (aa, ba)]) =\n        Some path\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = patha @ (a, b) # path''", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_target_is_head:\n  \"find_path_f P ctx (cl_fqn fqn) = Some path \\<Longrightarrow> \\<exists>ctxcld. find_cld_f P ctx fqn = Some ctxcld \\<and> (\\<exists>path''. path = ctxcld # path'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_f P ctx (cl_fqn fqn) = Some path \\<Longrightarrow>\n    \\<exists>ctxcld.\n       find_cld_f P ctx fqn = Some ctxcld \\<and>\n       (\\<exists>path''. path = ctxcld # path'')", "apply(unfold find_path_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx (cl_fqn fqn) [] = Some path \\<Longrightarrow>\n    \\<exists>ctxcld.\n       find_cld_f P ctx fqn = Some ctxcld \\<and>\n       (\\<exists>path''. path = ctxcld # path'')", "apply(frule fpr_target_is_head'[of _ _ _ \"[]\", THEN mp])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_rec_f P ctx (cl_fqn fqn) [] = Some path;\n     \\<forall>fqna ctxcld.\n        cl_fqn fqn = cl_fqn fqna \\<and>\n        find_cld_f P ctx fqna = Some ctxcld \\<longrightarrow>\n        (\\<exists>path''. path = [] @ ctxcld # path'')\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ctxcld.\n                         find_cld_f P ctx fqn = Some ctxcld \\<and>\n                         (\\<exists>path''. path = ctxcld # path'')", "apply(clarsimp split: option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_sub_path':\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n     (\\<forall>fqn ctxcld path'' path_fqn.\n         cl = cl_fqn fqn \\<and> find_cld_f P ctx fqn = Some ctxcld \\<and>\n         find_path_rec_f P (fst ctxcld) (superclass_name_f (snd ctxcld)) path'' = Some path_fqn \\<longrightarrow>\n              (\\<exists>path'''. path_fqn = path'' @ path''' \\<and> path = path' @ ctxcld # path'''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n    (\\<forall>fqn ctxcld path'' path_fqn.\n        cl = cl_fqn fqn \\<and>\n        find_cld_f P ctx fqn = Some ctxcld \\<and>\n        find_path_rec_f P (fst ctxcld) (superclass_name_f (snd ctxcld))\n         path'' =\n        Some path_fqn \\<longrightarrow>\n        (\\<exists>path'''.\n            path_fqn = path'' @ path''' \\<and>\n            path = path' @ ctxcld # path'''))", "apply(induct_tac P ctx cl path' rule: find_path_rec_f.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx patha.\n       find_path_rec_f P ctx cl_object patha = Some path \\<longrightarrow>\n       (\\<forall>fqn ctxcld path'' path_fqn.\n           cl_object = cl_fqn fqn \\<and>\n           find_cld_f P ctx fqn = Some ctxcld \\<and>\n           find_path_rec_f P (fst ctxcld) (superclass_name_f (snd ctxcld))\n            path'' =\n           Some path_fqn \\<longrightarrow>\n           (\\<exists>path'''.\n               path_fqn = path'' @ path''' \\<and>\n               path = patha @ ctxcld # path'''))\n 2. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>fqn ctxcld path'' path_fqn.\n                                 superclass_name_f y = cl_fqn fqn \\<and>\n                                 find_cld_f P x fqn = Some ctxcld \\<and>\n                                 find_path_rec_f P (fst ctxcld)\n                                  (superclass_name_f (snd ctxcld)) path'' =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<exists>path'''.\n                                     path_fqn = path'' @ path''' \\<and>\n                                     path =\n                                     (patha @ [(x, y)]) @\n                                     ctxcld # path'''))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>fqna ctxcld path'' path_fqn.\n           cl_fqn fqn = cl_fqn fqna \\<and>\n           find_cld_f P ctx fqna = Some ctxcld \\<and>\n           find_path_rec_f P (fst ctxcld) (superclass_name_f (snd ctxcld))\n            path'' =\n           Some path_fqn \\<longrightarrow>\n           (\\<exists>path'''.\n               path_fqn = path'' @ path''' \\<and>\n               path = patha @ ctxcld # path'''))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>fqn ctxcld path'' path_fqn.\n                                 superclass_name_f y = cl_fqn fqn \\<and>\n                                 find_cld_f P x fqn = Some ctxcld \\<and>\n                                 find_path_rec_f P (fst ctxcld)\n                                  (superclass_name_f (snd ctxcld)) path'' =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<exists>path'''.\n                                     path_fqn = path'' @ path''' \\<and>\n                                     path =\n                                     (patha @ [(x, y)]) @\n                                     ctxcld # path'''))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>fqna ctxcld path'' path_fqn.\n           cl_fqn fqn = cl_fqn fqna \\<and>\n           find_cld_f P ctx fqna = Some ctxcld \\<and>\n           find_path_rec_f P (fst ctxcld) (superclass_name_f (snd ctxcld))\n            path'' =\n           Some path_fqn \\<longrightarrow>\n           (\\<exists>path'''.\n               path_fqn = path'' @ path''' \\<and>\n               path = patha @ ctxcld # path'''))", "apply(clarsimp split: if_split_asm option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b path'' path_fqn.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>fqn a ba path'' path_fqn.\n   superclass_name_f b = cl_fqn fqn \\<and>\n   find_cld_f P aa fqn = Some (a, ba) \\<and>\n   find_path_rec_f P a (superclass_name_f ba) path'' =\n   Some path_fqn \\<longrightarrow>\n   (\\<exists>path'''.\n       path_fqn = path'' @ path''' \\<and>\n       path = patha @ (aa, b) # (a, ba) # path'''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        find_path_rec_f P a (superclass_name_f b) path'' =\n        Some path_fqn\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path'''.\n                            path_fqn = path'' @ path''' \\<and>\n                            path = patha @ (a, b) # path'''", "apply(case_tac \"superclass_name_f b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn patha a b path'' path_fqn.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>fqn a ba path'' path_fqn.\n   superclass_name_f b = cl_fqn fqn \\<and>\n   find_cld_f P aa fqn = Some (a, ba) \\<and>\n   find_path_rec_f P a (superclass_name_f ba) path'' =\n   Some path_fqn \\<longrightarrow>\n   (\\<exists>path'''.\n       path_fqn = path'' @ path''' \\<and>\n       path = patha @ (aa, b) # (a, ba) # path'''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        find_path_rec_f P a (superclass_name_f b) path'' = Some path_fqn;\n        superclass_name_f b = cl_object\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path'''.\n                            path_fqn = path'' @ path''' \\<and>\n                            path = patha @ (a, b) # path'''\n 2. \\<And>P ctx fqn patha a b path'' path_fqn x2.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>fqn a ba path'' path_fqn.\n   superclass_name_f b = cl_fqn fqn \\<and>\n   find_cld_f P aa fqn = Some (a, ba) \\<and>\n   find_path_rec_f P a (superclass_name_f ba) path'' =\n   Some path_fqn \\<longrightarrow>\n   (\\<exists>path'''.\n       path_fqn = path'' @ path''' \\<and>\n       path = patha @ (aa, b) # (a, ba) # path'''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        find_path_rec_f P a (superclass_name_f b) path'' = Some path_fqn;\n        superclass_name_f b = cl_fqn x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path'''.\n                            path_fqn = path'' @ path''' \\<and>\n                            path = patha @ (a, b) # path'''", "apply(simp add: find_path_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b path'' path_fqn x2.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>fqn a ba path'' path_fqn.\n   superclass_name_f b = cl_fqn fqn \\<and>\n   find_cld_f P aa fqn = Some (a, ba) \\<and>\n   find_path_rec_f P a (superclass_name_f ba) path'' =\n   Some path_fqn \\<longrightarrow>\n   (\\<exists>path'''.\n       path_fqn = path'' @ path''' \\<and>\n       path = patha @ (aa, b) # (a, ba) # path'''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        find_path_rec_f P a (superclass_name_f b) path'' = Some path_fqn;\n        superclass_name_f b = cl_fqn x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path'''.\n                            path_fqn = path'' @ path''' \\<and>\n                            path = patha @ (a, b) # path'''", "apply(clarsimp split: if_split_asm option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b path'' path_fqn x2 aa ba.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> (case find_cld_f P aa x2 of\nNone \\<Rightarrow> None\n| Some (ctx', cld) \\<Rightarrow>\n    find_path_rec_f P ctx' (superclass_name_f cld)\n     ((patha @ [(aa, b)]) @ [(ctx', cld)])) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>a ba path'' path_fqn.\n   find_cld_f P aa x2 = Some (a, ba) \\<and>\n   find_path_rec_f P a (superclass_name_f ba) path'' =\n   Some path_fqn \\<longrightarrow>\n   (\\<exists>path'''.\n       path_fqn = path'' @ path''' \\<and>\n       path = patha @ (aa, b) # (a, ba) # path'''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P aa (superclass_name_f ba) (path'' @ [(aa, ba)]) =\n        Some path_fqn;\n        superclass_name_f b = cl_fqn x2; find_cld_f P a x2 = Some (aa, ba);\n        find_path_rec_f P aa (superclass_name_f ba)\n         (patha @ [(a, b), (aa, ba)]) =\n        Some path\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path'''.\n                            path_fqn = path'' @ path''' \\<and>\n                            path = patha @ (a, b) # path'''", "apply(frule_tac path = path in path_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b path'' path_fqn x2 aa ba.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> (case find_cld_f P aa x2 of\nNone \\<Rightarrow> None\n| Some (ctx', cld) \\<Rightarrow>\n    find_path_rec_f P ctx' (superclass_name_f cld)\n     ((patha @ [(aa, b)]) @ [(ctx', cld)])) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>a ba path'' path_fqn.\n   find_cld_f P aa x2 = Some (a, ba) \\<and>\n   find_path_rec_f P a (superclass_name_f ba) path'' =\n   Some path_fqn \\<longrightarrow>\n   (\\<exists>path'''.\n       path_fqn = path'' @ path''' \\<and>\n       path = patha @ (aa, b) # (a, ba) # path'''));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P aa (superclass_name_f ba) (path'' @ [(aa, ba)]) =\n        Some path_fqn;\n        superclass_name_f b = cl_fqn x2; find_cld_f P a x2 = Some (aa, ba);\n        find_path_rec_f P aa (superclass_name_f ba)\n         (patha @ [(a, b), (aa, ba)]) =\n        Some path;\n        \\<exists>path''.\n           path = (patha @ [(a, b), (aa, ba)]) @ path''\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path'''.\n                            path_fqn = path'' @ path''' \\<and>\n                            path = patha @ (a, b) # path'''", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b path'' path_fqn x2 aa ba path''a.\n       \\<lbrakk>\\<And>aaa x.\n                   \\<lbrakk>a = aaa; x = aaa\\<rbrakk>\n                   \\<Longrightarrow> (case find_cld_f P aaa x2 of\nNone \\<Rightarrow> None\n| Some (ctx', cld) \\<Rightarrow>\n    find_path_rec_f P ctx' (superclass_name_f cld)\n     ((patha @ [(aaa, b)]) @ [(ctx', cld)])) =\n                                     Some\n(patha @ (aaa, b) # (aa, ba) # path''a) \\<longrightarrow>\n                                     (\\<forall>a b path'' path_fqn.\n   find_cld_f P aaa x2 = Some (a, b) \\<and>\n   find_path_rec_f P a (superclass_name_f b) path'' =\n   Some path_fqn \\<longrightarrow>\n   path_fqn = path'' @ path''a \\<and> aa = a \\<and> ba = b);\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P aa (superclass_name_f ba) (path'' @ [(aa, ba)]) =\n        Some path_fqn;\n        superclass_name_f b = cl_fqn x2; find_cld_f P a x2 = Some (aa, ba);\n        find_path_rec_f P aa (superclass_name_f ba)\n         (patha @ [(a, b), (aa, ba)]) =\n        Some (patha @ (a, b) # (aa, ba) # path''a);\n        path = patha @ (a, b) # (aa, ba) # path''a\\<rbrakk>\n       \\<Longrightarrow> path_fqn = path'' @ (aa, ba) # path''a", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_sub_path:\n  \"\\<lbrakk>find_path_f P ctx (cl_fqn fqn) = Some path; find_cld_f P ctx fqn = Some ctxcld;\n    find_path_f P (fst ctxcld) (superclass_name_f (snd ctxcld)) = Some path'\\<rbrakk>\n       \\<Longrightarrow> path = ctxcld # path'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_f P ctx (cl_fqn fqn) = Some path;\n     find_cld_f P ctx fqn = Some ctxcld;\n     find_path_f P (fst ctxcld) (superclass_name_f (snd ctxcld)) =\n     Some path'\\<rbrakk>\n    \\<Longrightarrow> path = ctxcld # path'", "by (unfold find_path_f_def, force intro: fpr_sub_path'[rule_format, of _ _ _ \"[]\" _ _ _ \"[]\", simplified])"], ["", "lemma fpr_sub_path_simp:\n  \"\\<lbrakk>find_path_rec_f P ctx (superclass_name_f cld) path'' = Some path_fqn; find_cld_f P ctx fqn = Some (ctx, cld); acyclic_clds P;\n    find_path_rec_f P ctx (superclass_name_f cld) (path' @ [(ctx, cld)]) = Some path\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path'''. path_fqn = path'' @ path''' \\<and> path = path' @ (ctx, cld) # path'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_rec_f P ctx (superclass_name_f cld) path'' =\n             Some path_fqn;\n     find_cld_f P ctx fqn = Some (ctx, cld); acyclic_clds P;\n     find_path_rec_f P ctx (superclass_name_f cld) (path' @ [(ctx, cld)]) =\n     Some path\\<rbrakk>\n    \\<Longrightarrow> \\<exists>path'''.\n                         path_fqn = path'' @ path''' \\<and>\n                         path = path' @ (ctx, cld) # path'''", "apply(cut_tac P = P and ctx = ctx and cl = \"cl_fqn fqn\" and path' = path' and path = path in fpr_sub_path')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_rec_f P ctx (superclass_name_f cld) path'' =\n             Some path_fqn;\n     find_cld_f P ctx fqn = Some (ctx, cld); acyclic_clds P;\n     find_path_rec_f P ctx (superclass_name_f cld) (path' @ [(ctx, cld)]) =\n     Some path;\n     find_path_rec_f P ctx (cl_fqn fqn) path' = Some path \\<longrightarrow>\n     (\\<forall>fqna ctxcld path'' path_fqn.\n         cl_fqn fqn = cl_fqn fqna \\<and>\n         find_cld_f P ctx fqna = Some ctxcld \\<and>\n         find_path_rec_f P (fst ctxcld) (superclass_name_f (snd ctxcld))\n          path'' =\n         Some path_fqn \\<longrightarrow>\n         (\\<exists>path'''.\n             path_fqn = path'' @ path''' \\<and>\n             path = path' @ ctxcld # path'''))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>path'''.\n                         path_fqn = path'' @ path''' \\<and>\n                         path = path' @ (ctx, cld) # path'''", "apply(clarsimp split: option.splits if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_same_suffix'[rule_format]:\n  \"find_path_rec_f P ctx cl prefix = Some path \\<longrightarrow>\n     (\\<forall>suffix prefix'. path = prefix @ suffix \\<longrightarrow>\n          find_path_rec_f P ctx cl prefix' = Some (prefix' @ suffix))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl prefix = Some path \\<longrightarrow>\n    (\\<forall>suffix prefix'.\n        path = prefix @ suffix \\<longrightarrow>\n        find_path_rec_f P ctx cl prefix' = Some (prefix' @ suffix))", "apply(induct_tac P ctx cl prefix rule: find_path_rec_f.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx patha.\n       find_path_rec_f P ctx cl_object patha = Some path \\<longrightarrow>\n       (\\<forall>suffix prefix'.\n           path = patha @ suffix \\<longrightarrow>\n           find_path_rec_f P ctx cl_object prefix' =\n           Some (prefix' @ suffix))\n 2. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>suffix prefix'.\n                                 path =\n                                 (patha @ [(x, y)]) @\n                                 suffix \\<longrightarrow>\n                                 find_path_rec_f P x (superclass_name_f y)\n                                  prefix' =\n                                 Some (prefix' @ suffix))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>suffix prefix'.\n           path = patha @ suffix \\<longrightarrow>\n           find_path_rec_f P ctx (cl_fqn fqn) prefix' =\n           Some (prefix' @ suffix))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>suffix prefix'.\n                                 path =\n                                 (patha @ [(x, y)]) @\n                                 suffix \\<longrightarrow>\n                                 find_path_rec_f P x (superclass_name_f y)\n                                  prefix' =\n                                 Some (prefix' @ suffix))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>suffix prefix'.\n           path = patha @ suffix \\<longrightarrow>\n           find_path_rec_f P ctx (cl_fqn fqn) prefix' =\n           Some (prefix' @ suffix))", "apply(clarsimp split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b suffix prefix'.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some (patha @ suffix) \\<longrightarrow>\n                                     (\\<forall>suffixa.\n   suffix = (aa, b) # suffixa \\<longrightarrow>\n   (\\<forall>prefix'.\n       find_path_rec_f P aa (superclass_name_f b) prefix' =\n       Some (prefix' @ suffixa)));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some (patha @ suffix);\n        path = patha @ suffix\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P a (superclass_name_f b)\n                          (prefix' @ [(a, b)]) =\n                         Some (prefix' @ suffix)", "apply(frule path_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b suffix prefix'.\n       \\<lbrakk>\\<And>aa x.\n                   \\<lbrakk>a = aa; x = aa\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f b) (patha @ [(aa, b)]) =\n                                     Some (patha @ suffix) \\<longrightarrow>\n                                     (\\<forall>suffixa.\n   suffix = (aa, b) # suffixa \\<longrightarrow>\n   (\\<forall>prefix'.\n       find_path_rec_f P aa (superclass_name_f b) prefix' =\n       Some (prefix' @ suffixa)));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some (patha @ suffix);\n        path = patha @ suffix;\n        \\<exists>path''.\n           patha @ suffix = (patha @ [(a, b)]) @ path''\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P a (superclass_name_f b)\n                          (prefix' @ [(a, b)]) =\n                         Some (prefix' @ suffix)", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_same_suffix:\n  \"find_path_rec_f P ctx cl prefix = Some path \\<longrightarrow>\n     (\\<forall>suffix prefix' suffix'. path = prefix @ suffix \\<and>\n          find_path_rec_f P ctx cl prefix' = Some (prefix' @ suffix')\n             \\<longrightarrow> suffix = suffix')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl prefix = Some path \\<longrightarrow>\n    (\\<forall>suffix prefix' suffix'.\n        path = prefix @ suffix \\<and>\n        find_path_rec_f P ctx cl prefix' =\n        Some (prefix' @ suffix') \\<longrightarrow>\n        suffix = suffix')", "apply(induct_tac P ctx cl prefix rule: find_path_rec_f.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx patha.\n       find_path_rec_f P ctx cl_object patha = Some path \\<longrightarrow>\n       (\\<forall>suffix prefix' suffix'.\n           path = patha @ suffix \\<and>\n           find_path_rec_f P ctx cl_object prefix' =\n           Some (prefix' @ suffix') \\<longrightarrow>\n           suffix = suffix')\n 2. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>suffix prefix' suffix'.\n                                 path = (patha @ [(x, y)]) @ suffix \\<and>\n                                 find_path_rec_f P x (superclass_name_f y)\n                                  prefix' =\n                                 Some (prefix' @ suffix') \\<longrightarrow>\n                                 suffix = suffix')) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>suffix prefix' suffix'.\n           path = patha @ suffix \\<and>\n           find_path_rec_f P ctx (cl_fqn fqn) prefix' =\n           Some (prefix' @ suffix') \\<longrightarrow>\n           suffix = suffix')", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>suffix prefix' suffix'.\n                                 path = (patha @ [(x, y)]) @ suffix \\<and>\n                                 find_path_rec_f P x (superclass_name_f y)\n                                  prefix' =\n                                 Some (prefix' @ suffix') \\<longrightarrow>\n                                 suffix = suffix')) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>suffix prefix' suffix'.\n           path = patha @ suffix \\<and>\n           find_path_rec_f P ctx (cl_fqn fqn) prefix' =\n           Some (prefix' @ suffix') \\<longrightarrow>\n           suffix = suffix')", "by (metis fpr_same_suffix' option.inject same_append_eq)"], ["", "lemma fpr_mid_path'[rule_format]:\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n     (\\<forall>ctxcld \\<in> set path.\n         ctxcld \\<in> set path' \\<or>\n         (\\<forall>path_fqn. find_path_rec_f P (fst ctxcld) (cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' = Some path_fqn \\<longrightarrow>\n              (\\<forall>path'''. path_fqn = path'' @ path''' \\<longrightarrow> (\\<exists>path_rest. path = path_rest @ path'''))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n    (\\<forall>ctxcld\\<in>set path.\n        ctxcld \\<in> set path' \\<or>\n        (\\<forall>path_fqn.\n            find_path_rec_f P (fst ctxcld)\n             (cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' =\n            Some path_fqn \\<longrightarrow>\n            (\\<forall>path'''.\n                path_fqn = path'' @ path''' \\<longrightarrow>\n                (\\<exists>path_rest. path = path_rest @ path'''))))", "supply [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n    (\\<forall>ctxcld\\<in>set path.\n        ctxcld \\<in> set path' \\<or>\n        (\\<forall>path_fqn.\n            find_path_rec_f P (fst ctxcld)\n             (cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' =\n            Some path_fqn \\<longrightarrow>\n            (\\<forall>path'''.\n                path_fqn = path'' @ path''' \\<longrightarrow>\n                (\\<exists>path_rest. path = path_rest @ path'''))))", "apply(induct_tac P ctx cl path' rule: find_path_rec_f.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx patha.\n       find_path_rec_f P ctx cl_object patha = Some path \\<longrightarrow>\n       (\\<forall>ctxcld\\<in>set path.\n           ctxcld \\<in> set patha \\<or>\n           (\\<forall>path_fqn.\n               find_path_rec_f P (fst ctxcld)\n                (cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' =\n               Some path_fqn \\<longrightarrow>\n               (\\<forall>path'''.\n                   path_fqn = path'' @ path''' \\<longrightarrow>\n                   (\\<exists>path_rest. path = path_rest @ path'''))))\n 2. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>ctxcld\\<in>set path.\n                                 ctxcld \\<in> set (patha @ [(x, y)]) \\<or>\n                                 (\\<forall>path_fqn.\n                                     find_path_rec_f P (fst ctxcld)\n(cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' =\n                                     Some path_fqn \\<longrightarrow>\n                                     (\\<forall>path'''.\n   path_fqn = path'' @ path''' \\<longrightarrow>\n   (\\<exists>path_rest. path = path_rest @ path'''))))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>ctxcld\\<in>set path.\n           ctxcld \\<in> set patha \\<or>\n           (\\<forall>path_fqn.\n               find_path_rec_f P (fst ctxcld)\n                (cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' =\n               Some path_fqn \\<longrightarrow>\n               (\\<forall>path'''.\n                   path_fqn = path'' @ path''' \\<longrightarrow>\n                   (\\<exists>path_rest. path = path_rest @ path'''))))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha.\n       (\\<And>x2 x y.\n           \\<lbrakk>\\<not> \\<not> acyclic_clds P;\n            find_cld_f P ctx fqn = Some x2; (x, y) = x2\\<rbrakk>\n           \\<Longrightarrow> find_path_rec_f P x (superclass_name_f y)\n                              (patha @ [(x, y)]) =\n                             Some path \\<longrightarrow>\n                             (\\<forall>ctxcld\\<in>set path.\n                                 ctxcld \\<in> set (patha @ [(x, y)]) \\<or>\n                                 (\\<forall>path_fqn.\n                                     find_path_rec_f P (fst ctxcld)\n(cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' =\n                                     Some path_fqn \\<longrightarrow>\n                                     (\\<forall>path'''.\n   path_fqn = path'' @ path''' \\<longrightarrow>\n   (\\<exists>path_rest. path = path_rest @ path'''))))) \\<Longrightarrow>\n       find_path_rec_f P ctx (cl_fqn fqn) patha =\n       Some path \\<longrightarrow>\n       (\\<forall>ctxcld\\<in>set path.\n           ctxcld \\<in> set patha \\<or>\n           (\\<forall>path_fqn.\n               find_path_rec_f P (fst ctxcld)\n                (cl_fqn (fqn_def (class_name_f (snd ctxcld)))) path'' =\n               Some path_fqn \\<longrightarrow>\n               (\\<forall>path'''.\n                   path_fqn = path'' @ path''' \\<longrightarrow>\n                   (\\<exists>path_rest. path = path_rest @ path'''))))", "apply(clarsimp split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b aa ba ab bb path'''.\n       \\<lbrakk>\\<And>aa ba x y.\n                   \\<lbrakk>a = aa \\<and> b = ba;\n                    x = aa \\<and> y = ba\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f ba) (patha @ [(aa, ba)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (aa, ba) \\<or>\n   ctxcld \\<in> set patha \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        (aa, ba) \\<in> set path;\n        find_cld_f P aa (fqn_def (class_name_f ba)) = Some (ab, bb);\n        (aa, ba) \\<notin> set patha;\n        find_path_rec_f P ab (superclass_name_f bb) (path'' @ [(ab, bb)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''", "apply(frule find_cld_name_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b aa ba ab bb path'''.\n       \\<lbrakk>\\<And>aa ba x y.\n                   \\<lbrakk>a = aa \\<and> b = ba;\n                    x = aa \\<and> y = ba\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f ba) (patha @ [(aa, ba)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (aa, ba) \\<or>\n   ctxcld \\<in> set patha \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        (aa, ba) \\<in> set path;\n        find_cld_f P aa (fqn_def (class_name_f ba)) = Some (ab, bb);\n        (aa, ba) \\<notin> set patha;\n        find_path_rec_f P ab (superclass_name_f bb) (path'' @ [(ab, bb)]) =\n        Some (path'' @ path''');\n        \\<exists>cl fds mds.\n           (aa, cld_def (class_name_f ba) cl fds mds) = (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn patha a b ba ab path''' cl fds mds.\n       \\<lbrakk>\\<And>aa ba x y.\n                   \\<lbrakk>a = aa \\<and> b = ba;\n                    x = aa \\<and> y = ba\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P aa\n(superclass_name_f ba) (patha @ [(aa, ba)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (aa, ba) \\<or>\n   ctxcld \\<in> set patha \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (a, b); acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (patha @ [(a, b)]) =\n        Some path;\n        (ab, ba) \\<in> set path;\n        find_cld_f P ab (fqn_def (class_name_f ba)) =\n        Some (ab, cld_def (class_name_f ba) cl fds mds);\n        (ab, ba) \\<notin> set patha;\n        find_path_rec_f P ab\n         (superclass_name_f (cld_def (class_name_f ba) cl fds mds))\n         (path'' @ [(ab, cld_def (class_name_f ba) cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''", "apply(rename_tac path' ctx' cld' cld'' ctx'' path''' cl fds mds)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''", "apply(subgoal_tac \"find_path_rec_f P ctx' (superclass_name_f cld') (path' @ [(ctx', cld')]) = Some path \\<longrightarrow>\n              (\\<forall>ctxcld\\<in>set path.\n                  ctxcld = (ctx', cld') \\<or>\n                  ctxcld \\<in> set path' \\<or>\n                  (\\<forall>path_fqn. case_option None (case_prod (\\<lambda>ctx' cld. find_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])))\n                               (find_cld_f P (fst ctxcld) (fqn_def (class_name_f (snd ctxcld)))) =\n                              Some path_fqn \\<longrightarrow>\n                              (\\<forall>path'''. path_fqn = path'' @ path''' \\<longrightarrow> (\\<exists>path_rest. path = path_rest @ path'''))))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''');\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path \\<longrightarrow>\n        (\\<forall>ctxcld\\<in>set path.\n            ctxcld = (ctx', cld') \\<or>\n            ctxcld \\<in> set path' \\<or>\n            (\\<forall>path_fqn.\n                (case find_cld_f P (fst ctxcld)\n                       (fqn_def (class_name_f (snd ctxcld))) of\n                 None \\<Rightarrow> None\n                 | Some (ctx', cld) \\<Rightarrow>\n                     find_path_rec_f P ctx' (superclass_name_f cld)\n                      (path'' @ [(ctx', cld)])) =\n                Some path_fqn \\<longrightarrow>\n                (\\<forall>path'''.\n                    path_fqn = path'' @ path''' \\<longrightarrow>\n                    (\\<exists>path_rest.\n                        path = path_rest @ path'''))))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''');\n        \\<forall>ctxcld\\<in>set path.\n           ctxcld = (ctx', cld') \\<or>\n           ctxcld \\<in> set path' \\<or>\n           (\\<forall>path_fqn.\n               (case find_cld_f P (fst ctxcld)\n                      (fqn_def (class_name_f (snd ctxcld))) of\n                None \\<Rightarrow> None\n                | Some (ctx', cld) \\<Rightarrow>\n                    find_path_rec_f P ctx' (superclass_name_f cld)\n                     (path'' @ [(ctx', cld)])) =\n               Some path_fqn \\<longrightarrow>\n               (\\<forall>path'''.\n                   path_fqn = path'' @ path''' \\<longrightarrow>\n                   (\\<exists>path_rest.\n                       path = path_rest @ path''')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 3. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''');\n        \\<forall>ctxcld\\<in>set path.\n           ctxcld = (ctx', cld') \\<or>\n           ctxcld \\<in> set path' \\<or>\n           (\\<forall>path_fqn.\n               (case find_cld_f P (fst ctxcld)\n                      (fqn_def (class_name_f (snd ctxcld))) of\n                None \\<Rightarrow> None\n                | Some (ctx', cld) \\<Rightarrow>\n                    find_path_rec_f P ctx' (superclass_name_f cld)\n                     (path'' @ [(ctx', cld)])) =\n               Some path_fqn \\<longrightarrow>\n               (\\<forall>path'''.\n                   path_fqn = path'' @ path''' \\<longrightarrow>\n                   (\\<exists>path_rest.\n                       path = path_rest @ path''')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(drule_tac x = \"(ctx'', cld'')\" in bspec, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''');\n        (ctx'', cld'') = (ctx', cld') \\<or>\n        (ctx'', cld'') \\<in> set path' \\<or>\n        (\\<forall>path_fqn.\n            (case find_cld_f P (fst (ctx'', cld''))\n                   (fqn_def (class_name_f (snd (ctx'', cld'')))) of\n             None \\<Rightarrow> None\n             | Some (ctx', cld) \\<Rightarrow>\n                 find_path_rec_f P ctx' (superclass_name_f cld)\n                  (path'' @ [(ctx', cld)])) =\n            Some path_fqn \\<longrightarrow>\n            (\\<forall>path'''.\n                path_fqn = path'' @ path''' \\<longrightarrow>\n                (\\<exists>path_rest. path = path_rest @ path''')))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' cld' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx', cld') \\<in> set path;\n        find_cld_f P ctx' (fqn_def (class_name_f cld')) =\n        Some (ctx', cld_def (class_name_f cld') cl fds mds);\n        (ctx', cld') \\<notin> set path';\n        find_path_rec_f P ctx'\n         (superclass_name_f (cld_def (class_name_f cld') cl fds mds))\n         (path'' @ [(ctx', cld_def (class_name_f cld') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(simp add: superclass_name_f_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' cld' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx'\n         (case cld' of cld_def dcl cl fds mds \\<Rightarrow> cl)\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx', cld') \\<in> set path;\n        find_cld_f P ctx' (fqn_def (class_name_f cld')) =\n        Some (ctx', cld_def (class_name_f cld') cl fds mds);\n        (ctx', cld') \\<notin> set path';\n        find_path_rec_f P ctx' cl\n         (path'' @ [(ctx', cld_def (class_name_f cld') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(case_tac cld')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' cld' path''' cl fds mds x1 x2 x3 x4.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx'\n         (case cld' of cld_def dcl cl fds mds \\<Rightarrow> cl)\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx', cld') \\<in> set path;\n        find_cld_f P ctx' (fqn_def (class_name_f cld')) =\n        Some (ctx', cld_def (class_name_f cld') cl fds mds);\n        (ctx', cld') \\<notin> set path';\n        find_path_rec_f P ctx' cl\n         (path'' @ [(ctx', cld_def (class_name_f cld') cl fds mds)]) =\n        Some (path'' @ path''');\n        cld' = cld_def x1 x2 x3 x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(rename_tac dcl' cl' fds' mds')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' cld' path''' cl fds mds dcl' cl' fds' mds'.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx'\n         (case cld' of cld_def dcl cl fds mds \\<Rightarrow> cl)\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx', cld') \\<in> set path;\n        find_cld_f P ctx' (fqn_def (class_name_f cld')) =\n        Some (ctx', cld_def (class_name_f cld') cl fds mds);\n        (ctx', cld') \\<notin> set path';\n        find_path_rec_f P ctx' cl\n         (path'' @ [(ctx', cld_def (class_name_f cld') cl fds mds)]) =\n        Some (path'' @ path''');\n        cld' = cld_def dcl' cl' fds' mds'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(clarsimp simp add: class_name_f_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' path''' cl fds mds dcl' cl' fds' mds'.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld_def dcl' cl' fds' mds');\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some path;\n        (ctx', cld_def dcl' cl' fds' mds') \\<in> set path;\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl fds mds);\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl\n         (path'' @ [(ctx', cld_def dcl' cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(case_tac fqn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' path''' cl fds mds dcl' cl' fds' mds' x.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld_def dcl' cl' fds' mds');\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some path;\n        (ctx', cld_def dcl' cl' fds' mds') \\<in> set path;\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl fds mds);\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl\n         (path'' @ [(ctx', cld_def dcl' cl fds mds)]) =\n        Some (path'' @ path''');\n        fqn = fqn_def x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(rename_tac dcl'')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx fqn path' ctx' path''' cl fds mds dcl' cl' fds' mds' dcl''.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld_def dcl' cl' fds' mds');\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some path;\n        (ctx', cld_def dcl' cl' fds' mds') \\<in> set path;\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl fds mds);\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl\n         (path'' @ [(ctx', cld_def dcl' cl fds mds)]) =\n        Some (path'' @ path''');\n        fqn = fqn_def dcl''\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx path' ctx' path''' cl fds mds dcl' cl' fds' mds' dcl''.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx (fqn_def dcl'') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some path;\n        (ctx', cld_def dcl' cl' fds' mds') \\<in> set path;\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl fds mds);\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl\n         (path'' @ [(ctx', cld_def dcl' cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(frule find_cld_name_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P ctx path' ctx' path''' cl fds mds dcl' cl' fds' mds' dcl''.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx (fqn_def dcl'') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some path;\n        (ctx', cld_def dcl' cl' fds' mds') \\<in> set path;\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl fds mds);\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl\n         (path'' @ [(ctx', cld_def dcl' cl fds mds)]) =\n        Some (path'' @ path''');\n        \\<exists>cl fds mds.\n           (ctx, cld_def dcl'' cl fds mds) =\n           (ctx', cld_def dcl' cl' fds' mds')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P path' ctx' path''' dcl' cl' fds' mds'.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some path;\n        (ctx', cld_def dcl' cl' fds' mds') \\<in> set path;\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(frule path_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P path' ctx' path''' dcl' cl' fds' mds'.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some path;\n        (ctx', cld_def dcl' cl' fds' mds') \\<in> set path;\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ path''');\n        \\<exists>path''.\n           path =\n           (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) @ path''\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(frule_tac path = \"path'' @ path'''\" in path_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P path' ctx' path''' dcl' cl' fds' mds'.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some path;\n        (ctx', cld_def dcl' cl' fds' mds') \\<in> set path;\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ path''');\n        \\<exists>path''.\n           path = (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) @ path'';\n        \\<exists>path''a.\n           path'' @ path''' =\n           (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) @\n           path''a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest. path = path_rest @ path'''\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P path' ctx' dcl' cl' fds' mds' path''a path''aa.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some\n(path' @ (a, b) # path''a) \\<longrightarrow>\n                                     (\\<forall>ctxcld\n         \\<in>set path' \\<union> set path''a.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest.\n               path' @ (a, b) # path''a = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a);\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ (ctx', cld_def dcl' cl' fds' mds') # path''aa);\n        path = path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path_rest.\n                            path' @\n                            (ctx', cld_def dcl' cl' fds' mds') # path''a =\n                            path_rest @\n                            (ctx', cld_def dcl' cl' fds' mds') # path''aa\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(rule_tac x = path' in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P path' ctx' dcl' cl' fds' mds' path''a path''aa.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some\n(path' @ (a, b) # path''a) \\<longrightarrow>\n                                     (\\<forall>ctxcld\n         \\<in>set path' \\<union> set path''a.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest.\n               path' @ (a, b) # path''a = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a);\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ (ctx', cld_def dcl' cl' fds' mds') # path''aa);\n        path = path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a\\<rbrakk>\n       \\<Longrightarrow> path' @\n                         (ctx', cld_def dcl' cl' fds' mds') # path''a =\n                         path' @\n                         (ctx', cld_def dcl' cl' fds' mds') # path''aa\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P path' ctx' dcl' cl' fds' mds' path''a path''aa.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some\n(path' @ (a, b) # path''a) \\<longrightarrow>\n                                     (\\<forall>ctxcld\n         \\<in>set path' \\<union> set path''a.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest.\n               path' @ (a, b) # path''a = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a);\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ (ctx', cld_def dcl' cl' fds' mds') # path''aa);\n        path = path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a\\<rbrakk>\n       \\<Longrightarrow> path''a = path''aa\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(frule_tac suffix = path''a and prefix' = \"path'' @ [(ctx', cld_def dcl' cl' fds' mds')]\" and\n                suffix' = path''aa in fpr_same_suffix[rule_format])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>P path' ctx' dcl' cl' fds' mds' path''a path''aa.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some\n(path' @ (a, b) # path''a) \\<longrightarrow>\n                                     (\\<forall>ctxcld\n         \\<in>set path' \\<union> set path''a.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest.\n               path' @ (a, b) # path''a = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a);\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ (ctx', cld_def dcl' cl' fds' mds') # path''aa);\n        path = path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a\\<rbrakk>\n       \\<Longrightarrow> path' @\n                         (ctx', cld_def dcl' cl' fds' mds') # path''a =\n                         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) @\n                         path''a \\<and>\n                         find_path_rec_f P ctx' cl'\n                          (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n                         Some\n                          ((path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) @\n                           path''aa)\n 2. \\<And>P path' ctx' dcl' cl' fds' mds' path''a path''aa.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some\n(path' @ (a, b) # path''a) \\<longrightarrow>\n                                     (\\<forall>ctxcld\n         \\<in>set path' \\<union> set path''a.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest.\n               path' @ (a, b) # path''a = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a);\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ (ctx', cld_def dcl' cl' fds' mds') # path''aa);\n        path = path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a;\n        path''a = path''aa\\<rbrakk>\n       \\<Longrightarrow> path''a = path''aa\n 3. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P path' ctx' dcl' cl' fds' mds' path''a path''aa.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld_def dcl' cl' fds' mds' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(case b of cld_def dcl cl fds mds \\<Rightarrow> cl) (path' @ [(a, b)]) =\n                                     Some\n(path' @ (a, b) # path''a) \\<longrightarrow>\n                                     (\\<forall>ctxcld\n         \\<in>set path' \\<union> set path''a.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def\n                (case snd ctxcld of\n                 cld_def dcl cl fds mds \\<Rightarrow> dcl)) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest.\n               path' @ (a, b) # path''a = path_rest @ path'''))));\n        acyclic_clds P;\n        find_path_rec_f P ctx' cl'\n         (path' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a);\n        find_cld_f P ctx' (fqn_def dcl') =\n        Some (ctx', cld_def dcl' cl' fds' mds');\n        (ctx', cld_def dcl' cl' fds' mds') \\<notin> set path';\n        find_path_rec_f P ctx' cl'\n         (path'' @ [(ctx', cld_def dcl' cl' fds' mds')]) =\n        Some (path'' @ (ctx', cld_def dcl' cl' fds' mds') # path''aa);\n        path = path' @ (ctx', cld_def dcl' cl' fds' mds') # path''a;\n        path''a = path''aa\\<rbrakk>\n       \\<Longrightarrow> path''a = path''aa\n 2. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P ctx fqn path' ctx' cld' cld'' ctx'' path''' cl fds mds.\n       \\<lbrakk>\\<And>a b x y.\n                   \\<lbrakk>ctx' = a \\<and> cld' = b;\n                    x = a \\<and> y = b\\<rbrakk>\n                   \\<Longrightarrow> find_path_rec_f P a\n(superclass_name_f b) (path' @ [(a, b)]) =\n                                     Some path \\<longrightarrow>\n                                     (\\<forall>ctxcld\\<in>set path.\n   ctxcld = (a, b) \\<or>\n   ctxcld \\<in> set path' \\<or>\n   (\\<forall>path_fqn.\n       (case find_cld_f P (fst ctxcld)\n              (fqn_def (class_name_f (snd ctxcld))) of\n        None \\<Rightarrow> None\n        | Some (ctx', cld) \\<Rightarrow>\n            find_path_rec_f P ctx' (superclass_name_f cld)\n             (path'' @ [(ctx', cld)])) =\n       Some path_fqn \\<longrightarrow>\n       (\\<forall>path'''.\n           path_fqn = path'' @ path''' \\<longrightarrow>\n           (\\<exists>path_rest. path = path_rest @ path'''))));\n        find_cld_f P ctx fqn = Some (ctx', cld'); acyclic_clds P;\n        find_path_rec_f P ctx' (superclass_name_f cld')\n         (path' @ [(ctx', cld')]) =\n        Some path;\n        (ctx'', cld'') \\<in> set path;\n        find_cld_f P ctx'' (fqn_def (class_name_f cld'')) =\n        Some (ctx'', cld_def (class_name_f cld'') cl fds mds);\n        (ctx'', cld'') \\<notin> set path';\n        find_path_rec_f P ctx''\n         (superclass_name_f (cld_def (class_name_f cld'') cl fds mds))\n         (path'' @ [(ctx'', cld_def (class_name_f cld'') cl fds mds)]) =\n        Some (path'' @ path''')\\<rbrakk>\n       \\<Longrightarrow> find_path_rec_f P ctx' (superclass_name_f cld')\n                          (path' @ [(ctx', cld')]) =\n                         Some path \\<longrightarrow>\n                         (\\<forall>ctxcld\\<in>set path.\n                             ctxcld = (ctx', cld') \\<or>\n                             ctxcld \\<in> set path' \\<or>\n                             (\\<forall>path_fqn.\n                                 (case find_cld_f P (fst ctxcld)\n  (fqn_def (class_name_f (snd ctxcld))) of\n                                  None \\<Rightarrow> None\n                                  | Some (ctx', cld) \\<Rightarrow>\nfind_path_rec_f P ctx' (superclass_name_f cld) (path'' @ [(ctx', cld)])) =\n                                 Some path_fqn \\<longrightarrow>\n                                 (\\<forall>path'''.\n                                     path_fqn =\n                                     path'' @ path''' \\<longrightarrow>\n                                     (\\<exists>path_rest.\n   path = path_rest @ path'''))))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_mid_path:\n  \"\\<lbrakk>find_path_f P ctx cl = Some path; (ctx', cld') \\<in> set path;\n    find_path_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) = Some path'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>path''. path = path'' @ path'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_f P ctx cl = Some path; (ctx', cld') \\<in> set path;\n     find_path_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) =\n     Some path'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>path''. path = path'' @ path'", "apply(cut_tac  P = P and ctx = ctx and cl = cl and path' = \"[]\" and path = path and ctxcld = \"(ctx', cld')\" and path'' = \"[]\" in fpr_mid_path')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>find_path_f P ctx cl = Some path; (ctx', cld') \\<in> set path;\n     find_path_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) =\n     Some path'\\<rbrakk>\n    \\<Longrightarrow> find_path_rec_f P ctx cl [] = Some path\n 2. \\<lbrakk>find_path_f P ctx cl = Some path; (ctx', cld') \\<in> set path;\n     find_path_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) =\n     Some path'\\<rbrakk>\n    \\<Longrightarrow> (ctx', cld') \\<in> set path\n 3. \\<lbrakk>find_path_f P ctx cl = Some path; (ctx', cld') \\<in> set path;\n     find_path_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) = Some path';\n     (ctx', cld') \\<in> set [] \\<or>\n     (\\<forall>path_fqn.\n         find_path_rec_f P (fst (ctx', cld'))\n          (cl_fqn (fqn_def (class_name_f (snd (ctx', cld'))))) [] =\n         Some path_fqn \\<longrightarrow>\n         (\\<forall>path'''.\n             path_fqn = [] @ path''' \\<longrightarrow>\n             (\\<exists>path_rest. path = path_rest @ path''')))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>path''. path = path'' @ path'", "apply(unfold find_path_f_def, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>find_path_rec_f P ctx cl [] = Some path;\n     (ctx', cld') \\<in> set path;\n     find_path_rec_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) [] =\n     Some path'\\<rbrakk>\n    \\<Longrightarrow> (ctx', cld') \\<in> set path\n 2. \\<lbrakk>find_path_rec_f P ctx cl [] = Some path;\n     (ctx', cld') \\<in> set path;\n     find_path_rec_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) [] =\n     Some path';\n     (ctx', cld') \\<in> set [] \\<or>\n     (\\<forall>path_fqn.\n         find_path_rec_f P (fst (ctx', cld'))\n          (cl_fqn (fqn_def (class_name_f (snd (ctx', cld'))))) [] =\n         Some path_fqn \\<longrightarrow>\n         (\\<forall>path'''.\n             path_fqn = [] @ path''' \\<longrightarrow>\n             (\\<exists>path_rest. path = path_rest @ path''')))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>path''. path = path'' @ path'", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_rec_f P ctx cl [] = Some path;\n     (ctx', cld') \\<in> set path;\n     find_path_rec_f P ctx' (cl_fqn (fqn_def (class_name_f cld'))) [] =\n     Some path';\n     (ctx', cld') \\<in> set [] \\<or>\n     (\\<forall>path_fqn.\n         find_path_rec_f P (fst (ctx', cld'))\n          (cl_fqn (fqn_def (class_name_f (snd (ctx', cld'))))) [] =\n         Some path_fqn \\<longrightarrow>\n         (\\<forall>path'''.\n             path_fqn = [] @ path''' \\<longrightarrow>\n             (\\<exists>path_rest. path = path_rest @ path''')))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>path''. path = path'' @ path'", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_first_in_path'[rule_format]:\n  \"find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n      (\\<forall>fqn ctxcld. cl = cl_fqn fqn \\<and> find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow> ctxcld \\<in> set path)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n    (\\<forall>fqn ctxcld.\n        cl = cl_fqn fqn \\<and>\n        find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow>\n        ctxcld \\<in> set path)", "apply(case_tac cl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. cl = cl_object \\<Longrightarrow>\n    find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n    (\\<forall>fqn ctxcld.\n        cl = cl_fqn fqn \\<and>\n        find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow>\n        ctxcld \\<in> set path)\n 2. \\<And>x2.\n       cl = cl_fqn x2 \\<Longrightarrow>\n       find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n       (\\<forall>fqn ctxcld.\n           cl = cl_fqn fqn \\<and>\n           find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow>\n           ctxcld \\<in> set path)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       cl = cl_fqn x2 \\<Longrightarrow>\n       find_path_rec_f P ctx cl path' = Some path \\<longrightarrow>\n       (\\<forall>fqn ctxcld.\n           cl = cl_fqn fqn \\<and>\n           find_cld_f P ctx fqn = Some ctxcld \\<longrightarrow>\n           ctxcld \\<in> set path)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 a b.\n       \\<lbrakk>cl = cl_fqn x2; acyclic_clds P;\n        find_path_rec_f P a (superclass_name_f b) (path' @ [(a, b)]) =\n        Some path;\n        find_cld_f P ctx x2 = Some (a, b)\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> set path", "apply(drule path_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 a b.\n       \\<lbrakk>cl = cl_fqn x2; acyclic_clds P;\n        find_cld_f P ctx x2 = Some (a, b);\n        \\<exists>path''. path = (path' @ [(a, b)]) @ path''\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> set path", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fpr_first_in_path:\n  \"\\<lbrakk>find_path_f P ctx (cl_fqn fqn) = Some path; find_cld_f P ctx fqn = Some ctxcld\\<rbrakk> \\<Longrightarrow> ctxcld \\<in> set path\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_f P ctx (cl_fqn fqn) = Some path;\n     find_cld_f P ctx fqn = Some ctxcld\\<rbrakk>\n    \\<Longrightarrow> ctxcld \\<in> set path", "by (unfold find_path_f_def, force intro: fpr_first_in_path'[of _ _ _ \"[]\", simplified])"], ["", "lemma cld_for_path:\n  \"find_path_f P ctx (cl_fqn fqn) = Some path \\<Longrightarrow> \\<exists>ctxcld. find_cld_f P ctx fqn = Some ctxcld\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_f P ctx (cl_fqn fqn) = Some path \\<Longrightarrow>\n    \\<exists>ctxcld. find_cld_f P ctx fqn = Some ctxcld", "apply(unfold find_path_f_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_rec_f P ctx (cl_fqn fqn) [] = Some path \\<Longrightarrow>\n    \\<exists>ctxcld. find_cld_f P ctx fqn = Some ctxcld", "apply(clarsimp split: if_split_asm option.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ctx_cld_ctx_dcl[rule_format]:\n  \"(ctx, cld_def dcl cl fds mds) \\<in> set path \\<longrightarrow> (ctx, dcl) \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ` set path\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ctx, cld_def dcl cl fds mds) \\<in> set path \\<longrightarrow>\n    (ctx, dcl)\n    \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ` set path", "by (induct path, auto simp add: class_name_f_def)"], ["", "lemma ctx_dcl_ctx_cld[rule_format]:\n  \"(ctx, dcl) \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ` set path \\<longrightarrow> (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) \\<in> set path)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ctx, dcl)\n    \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) `\n          set path \\<longrightarrow>\n    (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) \\<in> set path)", "apply(induct path)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (ctx, dcl)\n    \\<in> (\\<lambda>a.\n              case a of (ctx, cld) \\<Rightarrow> (ctx, class_name_f cld)) `\n          set [] \\<longrightarrow>\n    (\\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) \\<in> set [])\n 2. \\<And>a path.\n       (ctx, dcl)\n       \\<in> (\\<lambda>a.\n                 case a of\n                 (ctx, cld) \\<Rightarrow> (ctx, class_name_f cld)) `\n             set path \\<longrightarrow>\n       (\\<exists>cl fds mds.\n           (ctx, cld_def dcl cl fds mds) \\<in> set path) \\<Longrightarrow>\n       (ctx, dcl)\n       \\<in> (\\<lambda>a.\n                 case a of\n                 (ctx, cld) \\<Rightarrow> (ctx, class_name_f cld)) `\n             set (a # path) \\<longrightarrow>\n       (\\<exists>cl fds mds.\n           (ctx, cld_def dcl cl fds mds) \\<in> set (a # path))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a path.\n       (ctx, dcl)\n       \\<in> (\\<lambda>a.\n                 case a of\n                 (ctx, cld) \\<Rightarrow> (ctx, class_name_f cld)) `\n             set path \\<longrightarrow>\n       (\\<exists>cl fds mds.\n           (ctx, cld_def dcl cl fds mds) \\<in> set path) \\<Longrightarrow>\n       (ctx, dcl)\n       \\<in> (\\<lambda>a.\n                 case a of\n                 (ctx, cld) \\<Rightarrow> (ctx, class_name_f cld)) `\n             set (a # path) \\<longrightarrow>\n       (\\<exists>cl fds mds.\n           (ctx, cld_def dcl cl fds mds) \\<in> set (a # path))", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b path.\n       \\<lbrakk>(ctx, class_name_f b)\n                \\<notin> (\\<lambda>x.\n                             case x of\n                             (ctx, cld) \\<Rightarrow>\n                               (ctx, class_name_f cld)) `\n                         set path;\n        dcl = class_name_f b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cl fds mds.\n                            cld_def (class_name_f b) cl fds mds = b \\<or>\n                            (ctx, cld_def (class_name_f b) cl fds mds)\n                            \\<in> set path", "apply(case_tac b)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b path x1 x2 x3 x4.\n       \\<lbrakk>(ctx, class_name_f b)\n                \\<notin> (\\<lambda>x.\n                             case x of\n                             (ctx, cld) \\<Rightarrow>\n                               (ctx, class_name_f cld)) `\n                         set path;\n        dcl = class_name_f b; b = cld_def x1 x2 x3 x4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cl fds mds.\n                            cld_def (class_name_f b) cl fds mds = b \\<or>\n                            (ctx, cld_def (class_name_f b) cl fds mds)\n                            \\<in> set path", "apply(force simp add: class_name_f_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ctx_dcl_mem_path:\n  \"find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path \\<Longrightarrow> (ctx, dcl) \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ` set path\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path \\<Longrightarrow>\n    (ctx, dcl)\n    \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) ` set path", "apply(frule cld_for_path)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path;\n     \\<exists>ctxcld. find_cld_f P ctx (fqn_def dcl) = Some ctxcld\\<rbrakk>\n    \\<Longrightarrow> (ctx, dcl)\n                      \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) `\n                            set path", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctxcld.\n       \\<lbrakk>find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path;\n        find_cld_f P ctx (fqn_def dcl) = Some ctxcld\\<rbrakk>\n       \\<Longrightarrow> (ctx, dcl)\n                         \\<in> (\\<lambda>(ctx, cld).\n                                   (ctx, class_name_f cld)) `\n                               set path", "apply(frule fpr_first_in_path)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ctxcld.\n       \\<lbrakk>find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path;\n        find_cld_f P ctx (fqn_def dcl) = Some ctxcld\\<rbrakk>\n       \\<Longrightarrow> find_cld_f P ctx (fqn_def dcl) =\n                         Some (?ctxcld4 ctxcld)\n 2. \\<And>ctxcld.\n       \\<lbrakk>find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path;\n        find_cld_f P ctx (fqn_def dcl) = Some ctxcld;\n        ?ctxcld4 ctxcld \\<in> set path\\<rbrakk>\n       \\<Longrightarrow> (ctx, dcl)\n                         \\<in> (\\<lambda>(ctx, cld).\n                                   (ctx, class_name_f cld)) `\n                               set path", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctxcld.\n       \\<lbrakk>find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path;\n        find_cld_f P ctx (fqn_def dcl) = Some ctxcld;\n        ctxcld \\<in> set path\\<rbrakk>\n       \\<Longrightarrow> (ctx, dcl)\n                         \\<in> (\\<lambda>(ctx, cld).\n                                   (ctx, class_name_f cld)) `\n                               set path", "apply(frule find_cld_name_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctxcld.\n       \\<lbrakk>find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path;\n        find_cld_f P ctx (fqn_def dcl) = Some ctxcld; ctxcld \\<in> set path;\n        \\<exists>cl fds mds. (ctx, cld_def dcl cl fds mds) = ctxcld\\<rbrakk>\n       \\<Longrightarrow> (ctx, dcl)\n                         \\<in> (\\<lambda>(ctx, cld).\n                                   (ctx, class_name_f cld)) `\n                               set path", "apply(elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ctxcld cl fds mds.\n       \\<lbrakk>find_path_f P ctx (cl_fqn (fqn_def dcl)) = Some path;\n        find_cld_f P ctx (fqn_def dcl) = Some ctxcld; ctxcld \\<in> set path;\n        (ctx, cld_def dcl cl fds mds) = ctxcld\\<rbrakk>\n       \\<Longrightarrow> (ctx, dcl)\n                         \\<in> (\\<lambda>(ctx, cld).\n                                   (ctx, class_name_f cld)) `\n                               set path", "apply(clarsimp simp add: ctx_cld_ctx_dcl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sty_reflexiveI:\n  \"is_sty_one P ty ty' = Some True \\<Longrightarrow> is_sty_one P ty ty = Some True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sty_one P ty ty' = Some True \\<Longrightarrow>\n    is_sty_one P ty ty = Some True", "apply(simp add: is_sty_one_def split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        (case ty' of ty_top \\<Rightarrow> Some True\n         | ty_def ctx' dcl' \\<Rightarrow>\n             Some\n              ((ctx', dcl')\n               \\<in> set (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld))\n                           x2))) =\n        Some True\\<rbrakk>\n       \\<Longrightarrow> (case ty of ty_top \\<Rightarrow> Some True\n                          | ty_def ctx' dcl' \\<Rightarrow>\n                              Some\n                               ((ctx', dcl')\n                                \\<in> set\n (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) x2))) =\n                         Some True", "apply(case_tac ty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        (case ty' of ty_top \\<Rightarrow> Some True\n         | ty_def ctx' dcl' \\<Rightarrow>\n             Some\n              ((ctx', dcl')\n               \\<in> set (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld))\n                           x2))) =\n        Some True;\n        ty = ty_top\\<rbrakk>\n       \\<Longrightarrow> (case ty of ty_top \\<Rightarrow> Some True\n                          | ty_def ctx' dcl' \\<Rightarrow>\n                              Some\n                               ((ctx', dcl')\n                                \\<in> set\n (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) x2))) =\n                         Some True\n 2. \\<And>x2 x21 x22.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        (case ty' of ty_top \\<Rightarrow> Some True\n         | ty_def ctx' dcl' \\<Rightarrow>\n             Some\n              ((ctx', dcl')\n               \\<in> set (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld))\n                           x2))) =\n        Some True;\n        ty = ty_def x21 x22\\<rbrakk>\n       \\<Longrightarrow> (case ty of ty_top \\<Rightarrow> Some True\n                          | ty_def ctx' dcl' \\<Rightarrow>\n                              Some\n                               ((ctx', dcl')\n                                \\<in> set\n (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) x2))) =\n                         Some True", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x21 x22.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        (case ty' of ty_top \\<Rightarrow> Some True\n         | ty_def ctx' dcl' \\<Rightarrow>\n             Some\n              ((ctx', dcl')\n               \\<in> set (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld))\n                           x2))) =\n        Some True;\n        ty = ty_def x21 x22\\<rbrakk>\n       \\<Longrightarrow> (case ty of ty_top \\<Rightarrow> Some True\n                          | ty_def ctx' dcl' \\<Rightarrow>\n                              Some\n                               ((ctx', dcl')\n                                \\<in> set\n (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) x2))) =\n                         Some True", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x21 x22.\n       \\<lbrakk>find_path_f P x21 (cl_fqn (fqn_def x22)) = Some x2;\n        (case ty' of ty_top \\<Rightarrow> Some True\n         | ty_def ctx' dcl' \\<Rightarrow>\n             Some\n              ((ctx', dcl')\n               \\<in> set (map (\\<lambda>(ctx, cld). (ctx, class_name_f cld))\n                           x2))) =\n        Some True;\n        ty = ty_def x21 x22\\<rbrakk>\n       \\<Longrightarrow> (x21, x22)\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set x2", "apply(drule ctx_dcl_mem_path)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x21 x22.\n       \\<lbrakk>(case ty' of ty_top \\<Rightarrow> Some True\n                 | ty_def ctx' dcl' \\<Rightarrow>\n                     Some\n                      ((ctx', dcl')\n                       \\<in> set (map (\\<lambda>(ctx, cld).\n    (ctx, class_name_f cld))\n                                   x2))) =\n                Some True;\n        ty = ty_def x21 x22;\n        (x21, x22)\n        \\<in> (\\<lambda>(ctx, cld). (ctx, class_name_f cld)) `\n              set x2\\<rbrakk>\n       \\<Longrightarrow> (x21, x22)\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set x2", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sty_transitiveI:\n  \"\\<lbrakk>is_sty_one P ty ty' = Some True; is_sty_one P ty' ty'' = Some True\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty ty'' = Some True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sty_one P ty ty' = Some True;\n     is_sty_one P ty' ty'' = Some True\\<rbrakk>\n    \\<Longrightarrow> is_sty_one P ty ty'' = Some True", "apply(clarsimp simp add: is_sty_one_def split: ty.splits option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 x2a a b aa ba.\n       \\<lbrakk>find_path_ty_f P ty = Some x2;\n        ty' = ty_def a (class_name_f b);\n        find_path_f P a (cl_fqn (fqn_def (class_name_f b))) = Some x2a;\n        ty'' = ty_def aa (class_name_f ba); (a, b) \\<in> set x2;\n        (aa, ba) \\<in> set x2a\\<rbrakk>\n       \\<Longrightarrow> (aa, class_name_f ba)\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set x2", "apply(rename_tac path ctx dcl path' ctx' dcl')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>path ctx dcl path' ctx' dcl'.\n       \\<lbrakk>find_path_ty_f P ty = Some path;\n        ty' = ty_def dcl (class_name_f path');\n        find_path_f P dcl (cl_fqn (fqn_def (class_name_f path'))) =\n        Some ctx;\n        ty'' = ty_def ctx' (class_name_f dcl'); (dcl, path') \\<in> set path;\n        (ctx', dcl') \\<in> set ctx\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f dcl')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path", "apply(case_tac ty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>path ctx dcl path' ctx' dcl'.\n       \\<lbrakk>find_path_ty_f P ty = Some path;\n        ty' = ty_def dcl (class_name_f path');\n        find_path_f P dcl (cl_fqn (fqn_def (class_name_f path'))) =\n        Some ctx;\n        ty'' = ty_def ctx' (class_name_f dcl'); (dcl, path') \\<in> set path;\n        (ctx', dcl') \\<in> set ctx; ty = ty_top\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f dcl')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path\n 2. \\<And>path ctx dcl path' ctx' dcl' x21 x22.\n       \\<lbrakk>find_path_ty_f P ty = Some path;\n        ty' = ty_def dcl (class_name_f path');\n        find_path_f P dcl (cl_fqn (fqn_def (class_name_f path'))) =\n        Some ctx;\n        ty'' = ty_def ctx' (class_name_f dcl'); (dcl, path') \\<in> set path;\n        (ctx', dcl') \\<in> set ctx; ty = ty_def x21 x22\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f dcl')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>path ctx dcl path' ctx' dcl' x21 x22.\n       \\<lbrakk>find_path_ty_f P ty = Some path;\n        ty' = ty_def dcl (class_name_f path');\n        find_path_f P dcl (cl_fqn (fqn_def (class_name_f path'))) =\n        Some ctx;\n        ty'' = ty_def ctx' (class_name_f dcl'); (dcl, path') \\<in> set path;\n        (ctx', dcl') \\<in> set ctx; ty = ty_def x21 x22\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f dcl')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>path ctx dcl path' ctx' dcl' x21 x22.\n       \\<lbrakk>find_path_f P x21 (cl_fqn (fqn_def x22)) = Some path;\n        ty' = ty_def dcl (class_name_f path');\n        find_path_f P dcl (cl_fqn (fqn_def (class_name_f path'))) =\n        Some ctx;\n        ty'' = ty_def ctx' (class_name_f dcl'); (dcl, path') \\<in> set path;\n        (ctx', dcl') \\<in> set ctx; ty = ty_def x21 x22\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f dcl')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path", "apply(rename_tac ctx dcl ctx' cld' ctx'' cld'')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>path ctxa ctx dcl ctx' cld' ctx'' cld''.\n       \\<lbrakk>find_path_f P ctx'' (cl_fqn (fqn_def cld'')) = Some path;\n        ty' = ty_def ctx (class_name_f dcl);\n        find_path_f P ctx (cl_fqn (fqn_def (class_name_f dcl))) = Some ctxa;\n        ty'' = ty_def ctx' (class_name_f cld'); (ctx, dcl) \\<in> set path;\n        (ctx', cld') \\<in> set ctxa; ty = ty_def ctx'' cld''\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f cld')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path", "apply(frule fpr_mid_path)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>path ctxa ctx dcl ctx' cld' ctx'' cld''.\n       \\<lbrakk>find_path_f P ctx'' (cl_fqn (fqn_def cld'')) = Some path;\n        ty' = ty_def ctx (class_name_f dcl);\n        find_path_f P ctx (cl_fqn (fqn_def (class_name_f dcl))) = Some ctxa;\n        ty'' = ty_def ctx' (class_name_f cld'); (ctx, dcl) \\<in> set path;\n        (ctx', cld') \\<in> set ctxa; ty = ty_def ctx'' cld''\\<rbrakk>\n       \\<Longrightarrow> (?ctx'85 path ctxa ctx dcl ctx' cld' ctx'' cld'',\n                          ?cld'85 path ctxa ctx dcl ctx' cld' ctx'' cld'')\n                         \\<in> set path\n 2. \\<And>path ctxa ctx dcl ctx' cld' ctx'' cld''.\n       \\<lbrakk>find_path_f P ctx'' (cl_fqn (fqn_def cld'')) = Some path;\n        ty' = ty_def ctx (class_name_f dcl);\n        find_path_f P ctx (cl_fqn (fqn_def (class_name_f dcl))) = Some ctxa;\n        ty'' = ty_def ctx' (class_name_f cld'); (ctx, dcl) \\<in> set path;\n        (ctx', cld') \\<in> set ctxa; ty = ty_def ctx'' cld''\\<rbrakk>\n       \\<Longrightarrow> find_path_f P\n                          (?ctx'85 path ctxa ctx dcl ctx' cld' ctx'' cld'')\n                          (cl_fqn\n                            (fqn_def\n                              (class_name_f\n                                (?cld'85 path ctxa ctx dcl ctx' cld' ctx''\n                                  cld'')))) =\n                         Some\n                          (?path'85 path ctxa ctx dcl ctx' cld' ctx'' cld'')\n 3. \\<And>path ctxa ctx dcl ctx' cld' ctx'' cld''.\n       \\<lbrakk>find_path_f P ctx'' (cl_fqn (fqn_def cld'')) = Some path;\n        ty' = ty_def ctx (class_name_f dcl);\n        find_path_f P ctx (cl_fqn (fqn_def (class_name_f dcl))) = Some ctxa;\n        ty'' = ty_def ctx' (class_name_f cld'); (ctx, dcl) \\<in> set path;\n        (ctx', cld') \\<in> set ctxa; ty = ty_def ctx'' cld'';\n        \\<exists>path''.\n           path =\n           path'' @\n           ?path'85 path ctxa ctx dcl ctx' cld' ctx'' cld''\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f cld')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>path ctxa ctx dcl ctx' cld' ctx'' cld''.\n       \\<lbrakk>find_path_f P ctx'' (cl_fqn (fqn_def cld'')) = Some path;\n        ty' = ty_def ctx (class_name_f dcl);\n        find_path_f P ctx (cl_fqn (fqn_def (class_name_f dcl))) = Some ctxa;\n        ty'' = ty_def ctx' (class_name_f cld'); (ctx, dcl) \\<in> set path;\n        (ctx', cld') \\<in> set ctxa; ty = ty_def ctx'' cld''\\<rbrakk>\n       \\<Longrightarrow> find_path_f P ctx\n                          (cl_fqn (fqn_def (class_name_f dcl))) =\n                         Some\n                          (?path'85 path ctxa ctx dcl ctx' cld' ctx'' cld'')\n 2. \\<And>path ctxa ctx dcl ctx' cld' ctx'' cld''.\n       \\<lbrakk>find_path_f P ctx'' (cl_fqn (fqn_def cld'')) = Some path;\n        ty' = ty_def ctx (class_name_f dcl);\n        find_path_f P ctx (cl_fqn (fqn_def (class_name_f dcl))) = Some ctxa;\n        ty'' = ty_def ctx' (class_name_f cld'); (ctx, dcl) \\<in> set path;\n        (ctx', cld') \\<in> set ctxa; ty = ty_def ctx'' cld'';\n        \\<exists>path''.\n           path =\n           path'' @\n           ?path'85 path ctxa ctx dcl ctx' cld' ctx'' cld''\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f cld')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>path ctxa ctx dcl ctx' cld' ctx'' cld''.\n       \\<lbrakk>find_path_f P ctx'' (cl_fqn (fqn_def cld'')) = Some path;\n        ty' = ty_def ctx (class_name_f dcl);\n        find_path_f P ctx (cl_fqn (fqn_def (class_name_f dcl))) = Some ctxa;\n        ty'' = ty_def ctx' (class_name_f cld'); (ctx, dcl) \\<in> set path;\n        (ctx', cld') \\<in> set ctxa; ty = ty_def ctx'' cld'';\n        \\<exists>path''. path = path'' @ ctxa\\<rbrakk>\n       \\<Longrightarrow> (ctx', class_name_f cld')\n                         \\<in> (\\<lambda>x.\n                                   case x of\n                                   (ctx, cld) \\<Rightarrow>\n                                     (ctx, class_name_f cld)) `\n                               set path", "apply(force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\nis_sty_many :: \"P \\<Rightarrow> tys \\<Rightarrow> tys \\<Rightarrow> bool option\"\nwhere\n\"is_sty_many P tys tys' =\n  (if length tys \\<noteq> length tys' then None else\n  (case lift_opts (map (\\<lambda>(ty, ty'). is_sty_one P ty ty') (zip tys tys'))\n     of None \\<Rightarrow> None | Some bools \\<Rightarrow> Some (list_all id bools)))\""], ["", "lemma lift_opts_exists:\n  \"\\<forall>x\\<in>set ty_ty'_list. (\\<lambda>(ty, ty'). is_sty_one P ty ty' = Some True) x \\<Longrightarrow> \\<exists>bools. lift_opts (map (\\<lambda>(ty, ty'). is_sty_one P ty ty') ty_ty'_list) = Some bools\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set ty_ty'_list.\n       case x of\n       (ty, ty') \\<Rightarrow>\n         is_sty_one P ty ty' = Some True \\<Longrightarrow>\n    \\<exists>bools.\n       lift_opts\n        (map (\\<lambda>(ty, ty'). is_sty_one P ty ty') ty_ty'_list) =\n       Some bools", "by (induct ty_ty'_list, auto)"], ["", "lemma lift_opts_all_true[rule_format]:\n  \"\\<forall>bools. (\\<forall>x\\<in>set ty_ty'_list. (\\<lambda>(ty, ty'). is_sty_one P ty ty' = Some True) x) \\<and>\n            lift_opts (map (\\<lambda>(ty, ty'). is_sty_one P ty ty') ty_ty'_list) = Some bools\n                  \\<longrightarrow> list_all id bools\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>bools.\n       (\\<forall>x\\<in>set ty_ty'_list.\n           case x of\n           (ty, ty') \\<Rightarrow> is_sty_one P ty ty' = Some True) \\<and>\n       lift_opts\n        (map (\\<lambda>(ty, ty'). is_sty_one P ty ty') ty_ty'_list) =\n       Some bools \\<longrightarrow>\n       list_all id bools", "by (induct ty_ty'_list, auto split: option.splits)"], ["", "lemma tys_tys'_list: \"\\<And>bools ty ty'. \\<lbrakk>lift_opts (map (\\<lambda>(x, y). is_sty_one P x y) tys_tys'_list) = Some bools; length tys = length tys'; list_all id bools; (ty, ty') \\<in> set tys_tys'_list\\<rbrakk> \\<Longrightarrow> is_sty_one P ty ty' = Some True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>bools ty ty'.\n       \\<lbrakk>lift_opts\n                 (map (\\<lambda>(x, y). is_sty_one P x y) tys_tys'_list) =\n                Some bools;\n        length tys = length tys'; list_all id bools;\n        (ty, ty') \\<in> set tys_tys'_list\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty ty' = Some True", "apply(induct tys_tys'_list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>bools ty ty'.\n       \\<lbrakk>lift_opts (map (\\<lambda>(x, y). is_sty_one P x y) []) =\n                Some bools;\n        length tys = length tys'; list_all id bools;\n        (ty, ty') \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty ty' = Some True\n 2. \\<And>a tys_tys'_list bools ty ty'.\n       \\<lbrakk>\\<And>bools ty ty'.\n                   \\<lbrakk>lift_opts\n                             (map (\\<lambda>(x, y). is_sty_one P x y)\n                               tys_tys'_list) =\n                            Some bools;\n                    length tys = length tys'; list_all id bools;\n                    (ty, ty') \\<in> set tys_tys'_list\\<rbrakk>\n                   \\<Longrightarrow> is_sty_one P ty ty' = Some True;\n        lift_opts\n         (map (\\<lambda>(x, y). is_sty_one P x y) (a # tys_tys'_list)) =\n        Some bools;\n        length tys = length tys'; list_all id bools;\n        (ty, ty') \\<in> set (a # tys_tys'_list)\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty ty' = Some True", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a tys_tys'_list bools ty ty'.\n       \\<lbrakk>\\<And>bools ty ty'.\n                   \\<lbrakk>lift_opts\n                             (map (\\<lambda>(x, y). is_sty_one P x y)\n                               tys_tys'_list) =\n                            Some bools;\n                    length tys = length tys'; list_all id bools;\n                    (ty, ty') \\<in> set tys_tys'_list\\<rbrakk>\n                   \\<Longrightarrow> is_sty_one P ty ty' = Some True;\n        lift_opts\n         (map (\\<lambda>(x, y). is_sty_one P x y) (a # tys_tys'_list)) =\n        Some bools;\n        length tys = length tys'; list_all id bools;\n        (ty, ty') \\<in> set (a # tys_tys'_list)\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty ty' = Some True", "apply(clarsimp split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b tys_tys'_list ty ty' x2 x2a.\n       \\<lbrakk>length tys = length tys';\n        ty = a \\<and> ty' = b \\<or> (ty, ty') \\<in> set tys_tys'_list;\n        \\<And>bools ty ty'.\n           \\<lbrakk>x2a = bools; list_all id bools;\n            (ty, ty') \\<in> set tys_tys'_list\\<rbrakk>\n           \\<Longrightarrow> is_sty_one P ty ty' = Some True;\n        is_sty_one P a b = Some True;\n        lift_opts (map (\\<lambda>(x, y). is_sty_one P x y) tys_tys'_list) =\n        Some x2a;\n        x2; list_all id x2a\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P ty ty' = Some True", "by force"], ["", "lemma [simp]: \"(sty_many P tys tys') = (is_sty_many P tys tys' = Some True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sty_many P tys tys' = (is_sty_many P tys tys' = Some True)", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sty_many P tys tys' \\<Longrightarrow> is_sty_many P tys tys' = Some True\n 2. is_sty_many P tys tys' = Some True \\<Longrightarrow> sty_many P tys tys'", "apply(erule sty_many.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>tysa ty_ty'_list tys'a Pa.\n       \\<lbrakk>P = Pa; tys = tysa; tys' = tys'a;\n        tysa = map (\\<lambda>(ty_XXX, ty_'). ty_XXX) ty_ty'_list;\n        tys'a = map (\\<lambda>(ty_XXX, ty_'). ty_') ty_ty'_list;\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(ty_XXX, ty_'). sty_one Pa ty_XXX ty_')\n           ty_ty'_list)\\<rbrakk>\n       \\<Longrightarrow> is_sty_many P tys tys' = Some True\n 2. is_sty_many P tys tys' = Some True \\<Longrightarrow> sty_many P tys tys'", "apply(clarsimp simp add: is_sty_many_def split: option.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ty_ty'_list.\n       \\<lbrakk>tys = map fst ty_ty'_list; tys' = map snd ty_ty'_list;\n        \\<forall>x\\<in>set ty_ty'_list.\n           case x of\n           (ty_XXX, ty_') \\<Rightarrow>\n             is_sty_one P ty_XXX ty_' = Some True\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>y.\n                             lift_opts\n                              (map (\\<lambda>(x, y). is_sty_one P x y)\n                                ty_ty'_list) =\n                             Some y) \\<and>\n                         (\\<forall>x2.\n                             lift_opts\n                              (map (\\<lambda>(x, y). is_sty_one P x y)\n                                ty_ty'_list) =\n                             Some x2 \\<longrightarrow>\n                             list_all id x2)\n 2. is_sty_many P tys tys' = Some True \\<Longrightarrow> sty_many P tys tys'", "apply(rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ty_ty'_list.\n       \\<lbrakk>tys = map fst ty_ty'_list; tys' = map snd ty_ty'_list;\n        \\<forall>x\\<in>set ty_ty'_list.\n           case x of\n           (ty_XXX, ty_') \\<Rightarrow>\n             is_sty_one P ty_XXX ty_' = Some True\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            lift_opts\n                             (map (\\<lambda>(x, y). is_sty_one P x y)\n                               ty_ty'_list) =\n                            Some y\n 2. \\<And>ty_ty'_list.\n       \\<lbrakk>tys = map fst ty_ty'_list; tys' = map snd ty_ty'_list;\n        \\<forall>x\\<in>set ty_ty'_list.\n           case x of\n           (ty_XXX, ty_') \\<Rightarrow>\n             is_sty_one P ty_XXX ty_' = Some True\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            lift_opts\n                             (map (\\<lambda>(x, y). is_sty_one P x y)\n                               ty_ty'_list) =\n                            Some x2 \\<longrightarrow>\n                            list_all id x2\n 3. is_sty_many P tys tys' = Some True \\<Longrightarrow> sty_many P tys tys'", "apply(simp add: lift_opts_exists)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ty_ty'_list.\n       \\<lbrakk>tys = map fst ty_ty'_list; tys' = map snd ty_ty'_list;\n        \\<forall>x\\<in>set ty_ty'_list.\n           case x of\n           (ty_XXX, ty_') \\<Rightarrow>\n             is_sty_one P ty_XXX ty_' = Some True\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            lift_opts\n                             (map (\\<lambda>(x, y). is_sty_one P x y)\n                               ty_ty'_list) =\n                            Some x2 \\<longrightarrow>\n                            list_all id x2\n 2. is_sty_many P tys tys' = Some True \\<Longrightarrow> sty_many P tys tys'", "apply(force intro: lift_opts_all_true)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sty_many P tys tys' = Some True \\<Longrightarrow> sty_many P tys tys'", "apply(clarsimp simp add: is_sty_many_def split: option.splits if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>lift_opts (map2 (is_sty_one P) tys tys') = Some x2;\n        length tys = length tys'; list_all id x2\\<rbrakk>\n       \\<Longrightarrow> sty_many P tys tys'", "apply(rule_tac ty_ty'_list = \"zip tys tys'\" in sty_manyI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>lift_opts (map2 (is_sty_one P) tys tys') = Some x2;\n        length tys = length tys'; list_all id x2\\<rbrakk>\n       \\<Longrightarrow> tys = map2 (\\<lambda>ty_XXX ty_'. ty_XXX) tys tys'\n 2. \\<And>x2.\n       \\<lbrakk>lift_opts (map2 (is_sty_one P) tys tys') = Some x2;\n        length tys = length tys'; list_all id x2\\<rbrakk>\n       \\<Longrightarrow> tys' = map2 (\\<lambda>ty_XXX ty_'. ty_') tys tys'\n 3. \\<And>x2.\n       \\<lbrakk>lift_opts (map2 (is_sty_one P) tys tys') = Some x2;\n        length tys = length tys'; list_all id x2\\<rbrakk>\n       \\<Longrightarrow> list_all (\\<lambda>f. f)\n                          (map2 (sty_one P) tys tys')", "apply(simp add: map_fst_zip[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>lift_opts (map2 (is_sty_one P) tys tys') = Some x2;\n        length tys = length tys'; list_all id x2\\<rbrakk>\n       \\<Longrightarrow> tys' = map2 (\\<lambda>ty_XXX ty_'. ty_') tys tys'\n 2. \\<And>x2.\n       \\<lbrakk>lift_opts (map2 (is_sty_one P) tys tys') = Some x2;\n        length tys = length tys'; list_all id x2\\<rbrakk>\n       \\<Longrightarrow> list_all (\\<lambda>f. f)\n                          (map2 (sty_one P) tys tys')", "apply(simp add: map_snd_zip[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>lift_opts (map2 (is_sty_one P) tys tys') = Some x2;\n        length tys = length tys'; list_all id x2\\<rbrakk>\n       \\<Longrightarrow> list_all (\\<lambda>f. f)\n                          (map2 (sty_one P) tys tys')", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 a b.\n       \\<lbrakk>lift_opts (map2 (is_sty_one P) tys tys') = Some x2;\n        length tys = length tys'; list_all id x2;\n        (a, b) \\<in> set (zip tys tys')\\<rbrakk>\n       \\<Longrightarrow> is_sty_one P a b = Some True", "apply(simp add: tys_tys'_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* TODO: here will go all the other definitions for functions equivalent to\n   relations concerning well-formedness *)"], ["", "definition\ntr_x :: \"T \\<Rightarrow> x \\<Rightarrow> x\"\nwhere\n\"tr_x T x = (case T x of None \\<Rightarrow> x | Some x' \\<Rightarrow> x')\""], ["", "definition\ntr_var :: \"T \\<Rightarrow> var \\<Rightarrow> var\"\nwhere\n\"tr_var T var = (case tr_x T (x_var var) of x_this \\<Rightarrow> var | x_var var' \\<Rightarrow> var')\""], ["", "primrec\ntr_s_f  :: \"T \\<Rightarrow> s \\<Rightarrow> s\" and\ntr_ss_f :: \"T \\<Rightarrow> s list \\<Rightarrow> s list\"\nwhere\n\"tr_s_f T (s_block ss)        = s_block (tr_ss_f T ss)\" |\n\"tr_s_f T (s_ass var x)       = s_ass (tr_var T var) (tr_x T x)\" |\n\"tr_s_f T (s_read var x f)    = s_read (tr_var T var) (tr_x T x) f\" |\n\"tr_s_f T (s_write x f y)     = s_write (tr_x T x) f (tr_x T y)\" |\n\"tr_s_f T (s_if x y s1 s2)    = s_if (tr_x T x) (tr_x T y) (tr_s_f T s1) (tr_s_f T s2)\" |\n\"tr_s_f T (s_call var x m ys) = s_call (tr_var T var) (tr_x T x) m (map (tr_x T) ys)\" |\n\"tr_s_f T (s_new var ctx cl)  = s_new (tr_var T var) ctx cl\" |\n\n\"tr_ss_f T [] = []\" |\n\"tr_ss_f T (s#ss) = tr_s_f T s # tr_ss_f T ss\""], ["", "lemma [simp]: \"(\\<forall>x\\<in>set s_s'_list. case x of (s_XXX, s_') \\<Rightarrow> tr_s T s_XXX s_' \\<and> tr_s_f T s_XXX = s_') \\<longrightarrow>\n       tr_ss_f T (map fst s_s'_list) = map snd s_s'_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set s_s'_list.\n        case x of\n        (s_XXX, s_') \\<Rightarrow>\n          tr_s T s_XXX s_' \\<and> tr_s_f T s_XXX = s_') \\<longrightarrow>\n    tr_ss_f T (map fst s_s'_list) = map snd s_s'_list", "by (induct s_s'_list, auto)"], ["", "lemma [simp]: \"(\\<forall>x\\<in>set y_y'_list. case_prod (\\<lambda>y_XXX. (=) (case T y_XXX of None \\<Rightarrow> y_XXX | Some x' \\<Rightarrow> x')) x) \\<longrightarrow> map (tr_x T) (map fst y_y'_list) = map snd y_y'_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>set y_y'_list.\n        case x of\n        (y_XXX, x) \\<Rightarrow>\n          (case T y_XXX of None \\<Rightarrow> y_XXX\n           | Some x' \\<Rightarrow> x') =\n          x) \\<longrightarrow>\n    map (tr_x T) (map fst y_y'_list) = map snd y_y'_list", "apply(induct y_y'_list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>x\\<in>set [].\n        case x of\n        (y_XXX, a) \\<Rightarrow>\n          (case T y_XXX of None \\<Rightarrow> y_XXX\n           | Some x' \\<Rightarrow> x') =\n          a) \\<longrightarrow>\n    map (tr_x T) (map fst []) = map snd []\n 2. \\<And>a y_y'_list.\n       (\\<forall>x\\<in>set y_y'_list.\n           case x of\n           (y_XXX, a) \\<Rightarrow>\n             (case T y_XXX of None \\<Rightarrow> y_XXX\n              | Some x' \\<Rightarrow> x') =\n             a) \\<longrightarrow>\n       map (tr_x T) (map fst y_y'_list) =\n       map snd y_y'_list \\<Longrightarrow>\n       (\\<forall>x\\<in>set (a # y_y'_list).\n           case x of\n           (y_XXX, a) \\<Rightarrow>\n             (case T y_XXX of None \\<Rightarrow> y_XXX\n              | Some x' \\<Rightarrow> x') =\n             a) \\<longrightarrow>\n       map (tr_x T) (map fst (a # y_y'_list)) = map snd (a # y_y'_list)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a y_y'_list.\n       (\\<forall>x\\<in>set y_y'_list.\n           case x of\n           (y_XXX, a) \\<Rightarrow>\n             (case T y_XXX of None \\<Rightarrow> y_XXX\n              | Some x' \\<Rightarrow> x') =\n             a) \\<longrightarrow>\n       map (tr_x T) (map fst y_y'_list) =\n       map snd y_y'_list \\<Longrightarrow>\n       (\\<forall>x\\<in>set (a # y_y'_list).\n           case x of\n           (y_XXX, a) \\<Rightarrow>\n             (case T y_XXX of None \\<Rightarrow> y_XXX\n              | Some x' \\<Rightarrow> x') =\n             a) \\<longrightarrow>\n       map (tr_x T) (map fst (a # y_y'_list)) = map snd (a # y_y'_list)", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a y_y'_list.\n       \\<lbrakk>\\<forall>x\\<in>set y_y'_list.\n                   case x of\n                   (y_XXX, x) \\<Rightarrow>\n                     (case T y_XXX of None \\<Rightarrow> y_XXX\n                      | Some x' \\<Rightarrow> x') =\n                     x;\n        \\<forall>x\\<in>set y_y'_list. tr_x T (fst x) = snd x\\<rbrakk>\n       \\<Longrightarrow> tr_x T a =\n                         (case T a of None \\<Rightarrow> a\n                          | Some x' \\<Rightarrow> x')", "apply(simp only: tr_x_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_zip_tr[simp]: \"(s, s') \\<in> set (zip ss (tr_ss_f T ss)) \\<longrightarrow> s' = tr_s_f T s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, s') \\<in> set (zip ss (tr_ss_f T ss)) \\<longrightarrow>\n    s' = tr_s_f T s", "by (induct ss, auto)"], ["", "lemma [iff]: \"length ss = length (tr_ss_f T ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ss = length (tr_ss_f T ss)", "by (induct ss, auto)"], ["", "lemma tr_ss_map:\n  \"tr_ss_f T (map fst s_s'_list) = map snd s_s'_list \\<and> (\\<forall>x\\<in>set s_s'_list. case_prod (tr_s T) x) \\<and>\n   (a, b) \\<in> set s_s'_list \\<longrightarrow> tr_s T a (tr_s_f T a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tr_ss_f T (map fst s_s'_list) = map snd s_s'_list \\<and>\n    (\\<forall>x\\<in>set s_s'_list.\n        case x of (x, xa) \\<Rightarrow> tr_s T x xa) \\<and>\n    (a, b) \\<in> set s_s'_list \\<longrightarrow>\n    tr_s T a (tr_s_f T a)", "apply(induct s_s'_list)"], ["proof (prove)\ngoal (2 subgoals):\n 1. tr_ss_f T (map fst []) = map snd [] \\<and>\n    (\\<forall>x\\<in>set [].\n        case x of (a, b) \\<Rightarrow> tr_s T a b) \\<and>\n    (a, b) \\<in> set [] \\<longrightarrow>\n    tr_s T a (tr_s_f T a)\n 2. \\<And>aa s_s'_list.\n       tr_ss_f T (map fst s_s'_list) = map snd s_s'_list \\<and>\n       (\\<forall>x\\<in>set s_s'_list.\n           case x of (a, b) \\<Rightarrow> tr_s T a b) \\<and>\n       (a, b) \\<in> set s_s'_list \\<longrightarrow>\n       tr_s T a (tr_s_f T a) \\<Longrightarrow>\n       tr_ss_f T (map fst (aa # s_s'_list)) =\n       map snd (aa # s_s'_list) \\<and>\n       (\\<forall>x\\<in>set (aa # s_s'_list).\n           case x of (a, b) \\<Rightarrow> tr_s T a b) \\<and>\n       (a, b) \\<in> set (aa # s_s'_list) \\<longrightarrow>\n       tr_s T a (tr_s_f T a)", "by auto"], ["", "lemma tr_f_to_rel: \"\\<forall>s'. tr_s_f T s = s' \\<longrightarrow> tr_s T s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s'. tr_s_f T s = s' \\<longrightarrow> tr_s T s s'", "apply(induct s rule: tr_s_f.induct)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x.\n       ?P2.0 x \\<Longrightarrow>\n       \\<forall>s'.\n          tr_s_f T (s_block x) = s' \\<longrightarrow> tr_s T (s_block x) s'\n 2. \\<And>x1 x2.\n       \\<forall>s'.\n          tr_s_f T (s_ass x1 x2) = s' \\<longrightarrow>\n          tr_s T (s_ass x1 x2) s'\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_read x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_read x1 x2 x3) s'\n 4. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 5. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 6. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 7. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 8. ?P2.0 []\n 9. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        ?P2.0 x2\\<rbrakk>\n       \\<Longrightarrow> ?P2.0 (x1 # x2)", "apply(simp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2.\n       \\<forall>s'.\n          tr_s_f T (s_ass x1 x2) = s' \\<longrightarrow>\n          tr_s T (s_ass x1 x2) s'\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_read x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_read x1 x2 x3) s'\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 4. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 5. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 6. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 7. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 8. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2. tr_s T (s_ass x1 x2) (s_ass (tr_var T x1) (tr_x T x2))\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_read x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_read x1 x2 x3) s'\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 4. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 5. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 6. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 7. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 8. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(rule tr_s_var_assignI)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x1 x2.\n       (case T (x_var x1) of None \\<Rightarrow> x1\n        | Some (x_var var') \\<Rightarrow> var'\n        | Some x_this \\<Rightarrow> x1) =\n       tr_var T x1\n 2. \\<And>x1 x2.\n       (case T x2 of None \\<Rightarrow> x2 | Some x' \\<Rightarrow> x') =\n       tr_x T x2\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_read x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_read x1 x2 x3) s'\n 4. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 5. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 6. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 7. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 8. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 9. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp simp add: tr_x_def tr_var_def split: option.splits)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2.\n       (case T x2 of None \\<Rightarrow> x2 | Some x' \\<Rightarrow> x') =\n       tr_x T x2\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_read x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_read x1 x2 x3) s'\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 4. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 5. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 6. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 7. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 8. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp add: tr_x_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_read x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_read x1 x2 x3) s'\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 3. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 4. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 5. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 6. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 7. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 x3.\n       tr_s T (s_read x1 x2 x3) (s_read (tr_var T x1) (tr_x T x2) x3)\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 3. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 4. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 5. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 6. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 7. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(rule tr_s_field_readI)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 x3.\n       (case T (x_var x1) of None \\<Rightarrow> x1\n        | Some (x_var var') \\<Rightarrow> var'\n        | Some x_this \\<Rightarrow> x1) =\n       tr_var T x1\n 2. \\<And>x1 x2 x3.\n       (case T x2 of None \\<Rightarrow> x2 | Some x' \\<Rightarrow> x') =\n       tr_x T x2\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 4. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 5. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 6. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 7. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 8. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp simp add: tr_x_def tr_var_def split: option.splits)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 x3.\n       (case T x2 of None \\<Rightarrow> x2 | Some x' \\<Rightarrow> x') =\n       tr_x T x2\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 3. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 4. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 5. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 6. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 7. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp add: tr_x_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_write x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_write x1 x2 x3) s'\n 2. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 4. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 5. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 6. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3.\n       tr_s T (s_write x1 x2 x3) (s_write (tr_x T x1) x2 (tr_x T x3))\n 2. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 4. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 5. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 6. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(rule tr_s_field_writeI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 x3.\n       (case T x1 of None \\<Rightarrow> x1 | Some x' \\<Rightarrow> x') =\n       tr_x T x1\n 2. \\<And>x1 x2 x3.\n       (case T x3 of None \\<Rightarrow> x3 | Some x' \\<Rightarrow> x') =\n       tr_x T x3\n 3. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 4. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 5. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 6. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 7. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp add: tr_x_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3.\n       (case T x3 of None \\<Rightarrow> x3 | Some x' \\<Rightarrow> x') =\n       tr_x T x3\n 2. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 4. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 5. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 6. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp add: tr_x_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3 x4.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            tr_s_f T (s_if x1 x2 x3 x4) =\n                            s' \\<longrightarrow>\n                            tr_s T (s_if x1 x2 x3 x4) s'\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 3. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 4. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 5. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp simp only: tr_s_f.simps)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_if x1 x2 x3 x4)\n                          (s_if (tr_x T x1) (tr_x T x2) (tr_s_f T x3)\n                            (tr_s_f T x4))\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 3. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 4. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 5. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(rule tr_s_ifI)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> (case T x1 of None \\<Rightarrow> x1\n                          | Some x' \\<Rightarrow> x') =\n                         tr_x T x1\n 2. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> (case T x2 of None \\<Rightarrow> x2\n                          | Some x' \\<Rightarrow> x') =\n                         tr_x T x2\n 3. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x3 (tr_s_f T x3)\n 4. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x4 (tr_s_f T x4)\n 5. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 6. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 7. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 8. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp only: tr_x_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> (case T x2 of None \\<Rightarrow> x2\n                          | Some x' \\<Rightarrow> x') =\n                         tr_x T x2\n 2. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x3 (tr_s_f T x3)\n 3. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x4 (tr_s_f T x4)\n 4. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 5. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 6. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 7. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp only: tr_x_def)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x3 (tr_s_f T x3)\n 2. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x4 (tr_s_f T x4)\n 3. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 4. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 5. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 6. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 x3 x4 s'.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x3 = s' \\<longrightarrow> tr_s T x3 s';\n        \\<forall>s'.\n           tr_s_f T x4 = s' \\<longrightarrow> tr_s T x4 s'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x4 (tr_s_f T x4)\n 2. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 3. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 4. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 5. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 x3.\n       \\<forall>s'.\n          tr_s_f T (s_new x1 x2 x3) = s' \\<longrightarrow>\n          tr_s T (s_new x1 x2 x3) s'\n 2. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 3. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 4. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 x3. tr_s T (s_new x1 x2 x3) (s_new (tr_var T x1) x2 x3)\n 2. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 3. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 4. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(rule tr_s_newI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 x3.\n       (case T (x_var x1) of None \\<Rightarrow> x1\n        | Some (x_var var') \\<Rightarrow> var'\n        | Some x_this \\<Rightarrow> x1) =\n       tr_var T x1\n 2. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 3. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 4. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp simp add: tr_x_def tr_var_def split: option.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 x3 x4.\n       \\<forall>s'.\n          tr_s_f T (s_call x1 x2 x3 x4) = s' \\<longrightarrow>\n          tr_s T (s_call x1 x2 x3 x4) s'\n 2. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 3. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2 x3 x4.\n       tr_s T (s_call x1 x2 x3 x4)\n        (s_call (tr_var T x1) (tr_x T x2) x3 (map (tr_x T) x4))\n 2. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 3. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(rename_tac var x m ys)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var x m ys.\n       tr_s T (s_call var x m ys)\n        (s_call (tr_var T var) (tr_x T x) m (map (tr_x T) ys))\n 2. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 3. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(cut_tac T = T and var = var and var' = \"tr_var T var\" and x = x and\n              x' = \"tr_x T x\" and y_y'_list = \"zip ys (map (tr_x T) ys)\" and\n              meth = m in tr_s_mcallI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>var x m ys.\n       (case T (x_var var) of None \\<Rightarrow> var\n        | Some (x_var var') \\<Rightarrow> var'\n        | Some x_this \\<Rightarrow> var) =\n       tr_var T var\n 2. \\<And>var x m ys.\n       (case T x of None \\<Rightarrow> x | Some x' \\<Rightarrow> x') =\n       tr_x T x\n 3. \\<And>var x m ys.\n       list_all (\\<lambda>f. f)\n        (map2\n          (\\<lambda>y_XXX.\n              (=) (case T y_XXX of None \\<Rightarrow> y_XXX\n                   | Some x' \\<Rightarrow> x'))\n          ys (map (tr_x T) ys))\n 4. \\<And>var x m ys.\n       tr_s T\n        (s_call var x m\n          (map2 (\\<lambda>y_XXX y_'. y_XXX) ys (map (tr_x T) ys)))\n        (s_call (tr_var T var) (tr_x T x) m\n          (map2 (\\<lambda>y_XXX y_'. y_') ys\n            (map (tr_x T) ys))) \\<Longrightarrow>\n       tr_s T (s_call var x m ys)\n        (s_call (tr_var T var) (tr_x T x) m (map (tr_x T) ys))\n 5. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 6. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp simp add: tr_x_def tr_var_def split: option.splits)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var x m ys.\n       (case T x of None \\<Rightarrow> x | Some x' \\<Rightarrow> x') =\n       tr_x T x\n 2. \\<And>var x m ys.\n       list_all (\\<lambda>f. f)\n        (map2\n          (\\<lambda>y_XXX.\n              (=) (case T y_XXX of None \\<Rightarrow> y_XXX\n                   | Some x' \\<Rightarrow> x'))\n          ys (map (tr_x T) ys))\n 3. \\<And>var x m ys.\n       tr_s T\n        (s_call var x m\n          (map2 (\\<lambda>y_XXX y_'. y_XXX) ys (map (tr_x T) ys)))\n        (s_call (tr_var T var) (tr_x T x) m\n          (map2 (\\<lambda>y_XXX y_'. y_') ys\n            (map (tr_x T) ys))) \\<Longrightarrow>\n       tr_s T (s_call var x m ys)\n        (s_call (tr_var T var) (tr_x T x) m (map (tr_x T) ys))\n 4. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 5. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp only: tr_x_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var x m ys.\n       list_all (\\<lambda>f. f)\n        (map2\n          (\\<lambda>y_XXX.\n              (=) (case T y_XXX of None \\<Rightarrow> y_XXX\n                   | Some x' \\<Rightarrow> x'))\n          ys (map (tr_x T) ys))\n 2. \\<And>var x m ys.\n       tr_s T\n        (s_call var x m\n          (map2 (\\<lambda>y_XXX y_'. y_XXX) ys (map (tr_x T) ys)))\n        (s_call (tr_var T var) (tr_x T x) m\n          (map2 (\\<lambda>y_XXX y_'. y_') ys\n            (map (tr_x T) ys))) \\<Longrightarrow>\n       tr_s T (s_call var x m ys)\n        (s_call (tr_var T var) (tr_x T x) m (map (tr_x T) ys))\n 3. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 4. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp simp add: set_zip tr_x_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var x m ys.\n       tr_s T\n        (s_call var x m\n          (map2 (\\<lambda>y_XXX y_'. y_XXX) ys (map (tr_x T) ys)))\n        (s_call (tr_var T var) (tr_x T x) m\n          (map2 (\\<lambda>y_XXX y_'. y_') ys\n            (map (tr_x T) ys))) \\<Longrightarrow>\n       tr_s T (s_call var x m ys)\n        (s_call (tr_var T var) (tr_x T x) m (map (tr_x T) ys))\n 2. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 3. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. tr_s T (s_block []) (s_block (tr_ss_f T []))\n 2. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. tr_s T (s_block []) (s_block [])\n 2. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(cut_tac T = T and s_s'_list = \"[]\" in tr_s_blockI[simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x\\<in>set []. case x of (x, xa) \\<Rightarrow> tr_s T x xa\n 2. tr_s T (s_block (map fst [])) (s_block (map snd [])) \\<Longrightarrow>\n    tr_s T (s_block []) (s_block [])\n 3. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. tr_s T (s_block (map fst [])) (s_block (map snd [])) \\<Longrightarrow>\n    tr_s T (s_block []) (s_block [])\n 2. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<forall>s'.\n                   tr_s_f T x1 = s' \\<longrightarrow> tr_s T x1 s';\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_ss_f T (x1 # x2)))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>tr_s T x1 (tr_s_f T x1);\n        tr_s T (s_block x2) (s_block (tr_ss_f T x2))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (x1 # x2))\n                          (s_block (tr_s_f T x1 # tr_ss_f T x2))", "apply(rename_tac s ss)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(cut_tac T = T and s_s'_list = \"zip (s # ss) (tr_s_f T s # tr_ss_f T ss)\" in tr_s_blockI[simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   (zip (s # ss) (tr_s_f T s # tr_ss_f T ss)).\n                            case x of (x, xa) \\<Rightarrow> tr_s T x xa\n 2. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s ss a b.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        (a, b) \\<in> set (zip ss (tr_ss_f T ss))\\<rbrakk>\n       \\<Longrightarrow> tr_s T a b\n 2. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(rename_tac x x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s ss x x'.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        (x, x') \\<in> set (zip ss (tr_ss_f T ss))\\<rbrakk>\n       \\<Longrightarrow> tr_s T x x'\n 2. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(frule set_zip_tr[THEN mp])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s ss x x'.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        (x, x') \\<in> set (zip ss (tr_ss_f T ss)); x' = tr_s_f T x\\<rbrakk>\n       \\<Longrightarrow> tr_s T x x'\n 2. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s ss x.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        (x, tr_s_f T x) \\<in> set (zip ss (tr_ss_f T ss))\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 2. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(erule in_set_zipE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s ss x.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss)); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss)\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 2. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(erule_tac ?a1.0=\"T\" and ?a2.0=\"s_block ss\" and ?a3.0=\"s_block (tr_ss_f T ss)\" in tr_s.cases)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>s ss x Ta s_s'_list.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_block (map (\\<lambda>(s_XXX, s_'). s_XXX) s_s'_list);\n        s_block (tr_ss_f T ss) =\n        s_block (map (\\<lambda>(s_XXX, s_'). s_') s_s'_list);\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(s_XXX, s_'). tr_s Ta s_XXX s_') s_s'_list)\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 2. \\<And>s ss x Ta var var' xa x'.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_ass var xa; s_block (tr_ss_f T ss) = s_ass var' x';\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 3. \\<And>s ss x Ta var var' xa x' f.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_read var xa f;\n        s_block (tr_ss_f T ss) = s_read var' x' f;\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 4. \\<And>s ss x Ta xa x' y y' f.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_write xa f y;\n        s_block (tr_ss_f T ss) = s_write x' f y';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        (case Ta y of None \\<Rightarrow> y | Some x' \\<Rightarrow> x') =\n        y'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 5. \\<And>s ss x Ta xa x' y y' s1 s1' s2 s2'.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_if xa y s1 s2;\n        s_block (tr_ss_f T ss) = s_if x' y' s1' s2';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        (case Ta y of None \\<Rightarrow> y | Some x' \\<Rightarrow> x') = y';\n        tr_s Ta s1 s1'; tr_s Ta s2 s2'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 6. \\<And>s ss x Ta var var' ctx cl.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_new var ctx cl;\n        s_block (tr_ss_f T ss) = s_new var' ctx cl;\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 7. \\<And>s ss x Ta var var' xa x' y_y'_list meth.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss =\n        s_call var xa meth (map (\\<lambda>(y_XXX, y_'). y_XXX) y_y'_list);\n        s_block (tr_ss_f T ss) =\n        s_call var' x' meth (map (\\<lambda>(y_XXX, y_'). y_') y_y'_list);\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(y_XXX, y_').\n                  (case Ta y_XXX of None \\<Rightarrow> y_XXX\n                   | Some x' \\<Rightarrow> x') =\n                  y_')\n           y_y'_list)\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 8. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(clarsimp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>s s_s'_list a b aa.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_ss_f T (map fst s_s'_list) = map snd s_s'_list;\n        \\<forall>x\\<in>set s_s'_list.\n           case x of (x, xa) \\<Rightarrow> tr_s T x xa;\n        (a, b) \\<in> set s_s'_list;\n        (aa, tr_s_f T a) \\<in> set s_s'_list\\<rbrakk>\n       \\<Longrightarrow> tr_s T a (tr_s_f T a)\n 2. \\<And>s ss x Ta var var' xa x'.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_ass var xa; s_block (tr_ss_f T ss) = s_ass var' x';\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 3. \\<And>s ss x Ta var var' xa x' f.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_read var xa f;\n        s_block (tr_ss_f T ss) = s_read var' x' f;\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 4. \\<And>s ss x Ta xa x' y y' f.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_write xa f y;\n        s_block (tr_ss_f T ss) = s_write x' f y';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        (case Ta y of None \\<Rightarrow> y | Some x' \\<Rightarrow> x') =\n        y'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 5. \\<And>s ss x Ta xa x' y y' s1 s1' s2 s2'.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_if xa y s1 s2;\n        s_block (tr_ss_f T ss) = s_if x' y' s1' s2';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        (case Ta y of None \\<Rightarrow> y | Some x' \\<Rightarrow> x') = y';\n        tr_s Ta s1 s1'; tr_s Ta s2 s2'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 6. \\<And>s ss x Ta var var' ctx cl.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_new var ctx cl;\n        s_block (tr_ss_f T ss) = s_new var' ctx cl;\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 7. \\<And>s ss x Ta var var' xa x' y_y'_list meth.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss =\n        s_call var xa meth (map (\\<lambda>(y_XXX, y_'). y_XXX) y_y'_list);\n        s_block (tr_ss_f T ss) =\n        s_call var' x' meth (map (\\<lambda>(y_XXX, y_'). y_') y_y'_list);\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(y_XXX, y_').\n                  (case Ta y_XXX of None \\<Rightarrow> y_XXX\n                   | Some x' \\<Rightarrow> x') =\n                  y_')\n           y_y'_list)\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 8. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(rule tr_ss_map[THEN mp], force)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s ss x Ta var var' xa x'.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_ass var xa; s_block (tr_ss_f T ss) = s_ass var' x';\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 2. \\<And>s ss x Ta var var' xa x' f.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_read var xa f;\n        s_block (tr_ss_f T ss) = s_read var' x' f;\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 3. \\<And>s ss x Ta xa x' y y' f.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_write xa f y;\n        s_block (tr_ss_f T ss) = s_write x' f y';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        (case Ta y of None \\<Rightarrow> y | Some x' \\<Rightarrow> x') =\n        y'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 4. \\<And>s ss x Ta xa x' y y' s1 s1' s2 s2'.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_if xa y s1 s2;\n        s_block (tr_ss_f T ss) = s_if x' y' s1' s2';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        (case Ta y of None \\<Rightarrow> y | Some x' \\<Rightarrow> x') = y';\n        tr_s Ta s1 s1'; tr_s Ta s2 s2'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 5. \\<And>s ss x Ta var var' ctx cl.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss = s_new var ctx cl;\n        s_block (tr_ss_f T ss) = s_new var' ctx cl;\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var'\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 6. \\<And>s ss x Ta var var' xa x' y_y'_list meth.\n       \\<lbrakk>tr_s T s (tr_s_f T s); x \\<in> set ss;\n        tr_s_f T x \\<in> set (tr_ss_f T ss); T = Ta;\n        s_block ss =\n        s_call var xa meth (map (\\<lambda>(y_XXX, y_'). y_XXX) y_y'_list);\n        s_block (tr_ss_f T ss) =\n        s_call var' x' meth (map (\\<lambda>(y_XXX, y_'). y_') y_y'_list);\n        (case Ta (x_var var) of None \\<Rightarrow> var\n         | Some (x_var var') \\<Rightarrow> var'\n         | Some x_this \\<Rightarrow> var) =\n        var';\n        (case Ta xa of None \\<Rightarrow> xa | Some x' \\<Rightarrow> x') =\n        x';\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(y_XXX, y_').\n                  (case Ta y_XXX of None \\<Rightarrow> y_XXX\n                   | Some x' \\<Rightarrow> x') =\n                  y_')\n           y_y'_list)\\<rbrakk>\n       \\<Longrightarrow> tr_s T x (tr_s_f T x)\n 7. \\<And>s ss.\n       \\<lbrakk>tr_s T s (tr_s_f T s);\n        tr_s T (s_block ss) (s_block (tr_ss_f T ss));\n        tr_s T\n         (s_block (map fst (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\n         (s_block\n           (map snd (zip (s # ss) (tr_s_f T s # tr_ss_f T ss))))\\<rbrakk>\n       \\<Longrightarrow> tr_s T (s_block (s # ss))\n                          (s_block (tr_s_f T s # tr_ss_f T ss))", "apply(clarsimp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tr_rel_f_eq: \"((tr_s T s s') = (tr_s_f T s = s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tr_s T s s' = (tr_s_f T s = s')", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. tr_s T s s' \\<Longrightarrow> tr_s_f T s = s'\n 2. tr_s_f T s = s' \\<Longrightarrow> tr_s T s s'", "apply(erule tr_s.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>T s_s'_list.\n       list_all (\\<lambda>f. f)\n        (map (\\<lambda>(s_XXX, s_').\n                 tr_s T s_XXX s_' \\<and> tr_s_f T s_XXX = s_')\n          s_s'_list) \\<Longrightarrow>\n       tr_s_f T (s_block (map (\\<lambda>(s_XXX, s_'). s_XXX) s_s'_list)) =\n       s_block (map (\\<lambda>(s_XXX, s_'). s_') s_s'_list)\n 2. \\<And>T var var' x x'.\n       \\<lbrakk>(case T (x_var var) of None \\<Rightarrow> var\n                 | Some (x_var var') \\<Rightarrow> var'\n                 | Some x_this \\<Rightarrow> var) =\n                var';\n        (case T x of None \\<Rightarrow> x | Some x' \\<Rightarrow> x') =\n        x'\\<rbrakk>\n       \\<Longrightarrow> tr_s_f T (s_ass var x) = s_ass var' x'\n 3. \\<And>T var var' x x' f.\n       \\<lbrakk>(case T (x_var var) of None \\<Rightarrow> var\n                 | Some (x_var var') \\<Rightarrow> var'\n                 | Some x_this \\<Rightarrow> var) =\n                var';\n        (case T x of None \\<Rightarrow> x | Some x' \\<Rightarrow> x') =\n        x'\\<rbrakk>\n       \\<Longrightarrow> tr_s_f T (s_read var x f) = s_read var' x' f\n 4. \\<And>T x x' y y' f.\n       \\<lbrakk>(case T x of None \\<Rightarrow> x\n                 | Some x' \\<Rightarrow> x') =\n                x';\n        (case T y of None \\<Rightarrow> y | Some x' \\<Rightarrow> x') =\n        y'\\<rbrakk>\n       \\<Longrightarrow> tr_s_f T (s_write x f y) = s_write x' f y'\n 5. \\<And>T x x' y y' s1 s1' s2 s2'.\n       \\<lbrakk>(case T x of None \\<Rightarrow> x\n                 | Some x' \\<Rightarrow> x') =\n                x';\n        (case T y of None \\<Rightarrow> y | Some x' \\<Rightarrow> x') = y';\n        tr_s T s1 s1'; tr_s_f T s1 = s1'; tr_s T s2 s2';\n        tr_s_f T s2 = s2'\\<rbrakk>\n       \\<Longrightarrow> tr_s_f T (s_if x y s1 s2) = s_if x' y' s1' s2'\n 6. \\<And>T var var' ctx cl.\n       (case T (x_var var) of None \\<Rightarrow> var\n        | Some (x_var var') \\<Rightarrow> var'\n        | Some x_this \\<Rightarrow> var) =\n       var' \\<Longrightarrow>\n       tr_s_f T (s_new var ctx cl) = s_new var' ctx cl\n 7. \\<And>T var var' x x' y_y'_list meth.\n       \\<lbrakk>(case T (x_var var) of None \\<Rightarrow> var\n                 | Some (x_var var') \\<Rightarrow> var'\n                 | Some x_this \\<Rightarrow> var) =\n                var';\n        (case T x of None \\<Rightarrow> x | Some x' \\<Rightarrow> x') = x';\n        list_all (\\<lambda>f. f)\n         (map (\\<lambda>(y_XXX, y_').\n                  (case T y_XXX of None \\<Rightarrow> y_XXX\n                   | Some x' \\<Rightarrow> x') =\n                  y_')\n           y_y'_list)\\<rbrakk>\n       \\<Longrightarrow> tr_s_f T\n                          (s_call var x meth\n                            (map (\\<lambda>(y_XXX, y_'). y_XXX)\n                              y_y'_list)) =\n                         s_call var' x' meth\n                          (map (\\<lambda>(y_XXX, y_'). y_') y_y'_list)\n 8. tr_s_f T s = s' \\<Longrightarrow> tr_s T s s'", "apply(force simp add: tr_x_def tr_var_def split: option.splits)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. tr_s_f T s = s' \\<Longrightarrow> tr_s T s s'", "apply(cut_tac T = T and s = s in tr_f_to_rel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tr_s_f T s = s';\n     \\<forall>s'. tr_s_f T s = s' \\<longrightarrow> tr_s T s s'\\<rbrakk>\n    \\<Longrightarrow> tr_s T s s'", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}